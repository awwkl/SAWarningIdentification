GitDiffStart: 9b9d85d9ca244f2061111f2db825aa89a9f84793 | Mon Oct 12 22:40:30 2009 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index 781ccd0..9822e85 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -53,6 +53,9 @@ API Changes
 * LUCENE-1971: Remove deprecated RangeQuery, RangeFilter and
   ConstantScoreRangeQuery. (Uwe Schindler)
 
+* LUCENE-1975: Remove deprecated SpanQuery.getTerms() and generify 
+  Query.extractTerms(Set<Term>) (Michael Busch)
+
 Bug fixes
 
 * LUCENE-1951: When the text provided to WildcardQuery has no wildcard
diff --git a/src/java/org/apache/lucene/search/BooleanQuery.java b/src/java/org/apache/lucene/search/BooleanQuery.java
index ed70248..73d1e6b 100644
--- a/src/java/org/apache/lucene/search/BooleanQuery.java
+++ b/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -18,6 +18,7 @@ package org.apache.lucene.search;
  */
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.util.ToStringUtils;
 import org.apache.lucene.search.BooleanClause.Occur;
 
@@ -449,7 +450,7 @@ public class BooleanQuery extends Query {
   }
 
   // inherit javadoc
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
       for (Iterator i = clauses.iterator(); i.hasNext();) {
           BooleanClause clause = (BooleanClause) i.next();
           clause.getQuery().extractTerms(terms);
diff --git a/src/java/org/apache/lucene/search/ConstantScoreQuery.java b/src/java/org/apache/lucene/search/ConstantScoreQuery.java
index 98507b8..84874e9 100644
--- a/src/java/org/apache/lucene/search/ConstantScoreQuery.java
+++ b/src/java/org/apache/lucene/search/ConstantScoreQuery.java
@@ -18,6 +18,7 @@ package org.apache.lucene.search;
  */
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 
 import java.io.IOException;
 import java.util.Set;
@@ -42,7 +43,7 @@ public class ConstantScoreQuery extends Query {
     return this;
   }
 
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     // OK to not add any terms when used for MultiSearcher,
     // but may not be OK for highlighting
   }
diff --git a/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java b/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
index 948a6a4..7eeda2e 100644
--- a/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
+++ b/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
@@ -23,6 +23,7 @@ import java.util.Iterator;
 import java.util.Set;
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 
 /**
  * A query that generates the union of documents produced by its subqueries, and that scores each document with the maximum
@@ -213,7 +214,7 @@ public class DisjunctionMaxQuery extends Query {
   }
 
   // inherit javadoc
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     for (Iterator iter = disjuncts.iterator(); iter.hasNext();) {
       ((Query) iter.next()).extractTerms(terms);
     }
diff --git a/src/java/org/apache/lucene/search/FilteredQuery.java b/src/java/org/apache/lucene/search/FilteredQuery.java
index b8bd16b..2b814b3 100644
--- a/src/java/org/apache/lucene/search/FilteredQuery.java
+++ b/src/java/org/apache/lucene/search/FilteredQuery.java
@@ -18,6 +18,7 @@ package org.apache.lucene.search;
  */
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.util.ToStringUtils;
 
 import java.io.IOException;
@@ -187,7 +188,7 @@ extends Query {
   }
 
   // inherit javadoc
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
       getQuery().extractTerms(terms);
   }
 
diff --git a/src/java/org/apache/lucene/search/MatchAllDocsQuery.java b/src/java/org/apache/lucene/search/MatchAllDocsQuery.java
index cb2bfcf..cc8957a 100644
--- a/src/java/org/apache/lucene/search/MatchAllDocsQuery.java
+++ b/src/java/org/apache/lucene/search/MatchAllDocsQuery.java
@@ -18,6 +18,7 @@ package org.apache.lucene.search;
  */
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermDocs;
 import org.apache.lucene.util.ToStringUtils;
 
@@ -131,7 +132,7 @@ public class MatchAllDocsQuery extends Query {
     return new MatchAllDocsWeight(searcher);
   }
 
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
   }
 
   public String toString(String field) {
diff --git a/src/java/org/apache/lucene/search/MultiPhraseQuery.java b/src/java/org/apache/lucene/search/MultiPhraseQuery.java
index 210b719..c14f676 100644
--- a/src/java/org/apache/lucene/search/MultiPhraseQuery.java
+++ b/src/java/org/apache/lucene/search/MultiPhraseQuery.java
@@ -113,7 +113,7 @@ public class MultiPhraseQuery extends Query {
   }
 
   // inherit javadoc
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     for (Iterator iter = termArrays.iterator(); iter.hasNext();) {
       Term[] arr = (Term[])iter.next();
       for (int i=0; i<arr.length; i++) {
diff --git a/src/java/org/apache/lucene/search/PhraseQuery.java b/src/java/org/apache/lucene/search/PhraseQuery.java
index 355d7c7..ffa49e1 100644
--- a/src/java/org/apache/lucene/search/PhraseQuery.java
+++ b/src/java/org/apache/lucene/search/PhraseQuery.java
@@ -251,9 +251,9 @@ public class PhraseQuery extends Query {
   }
 
   /**
-   * @see org.apache.lucene.search.Query#extractTerms(java.util.Set)
+   * @see org.apache.lucene.search.Query#extractTerms(Set)
    */
-  public void extractTerms(Set queryTerms) {
+  public void extractTerms(Set<Term> queryTerms) {
     queryTerms.addAll(terms);
   }
 
diff --git a/src/java/org/apache/lucene/search/Query.java b/src/java/org/apache/lucene/search/Query.java
index 0cf2793..3744e70 100644
--- a/src/java/org/apache/lucene/search/Query.java
+++ b/src/java/org/apache/lucene/search/Query.java
@@ -24,6 +24,7 @@ import java.util.Iterator;
 import java.util.Set;
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 
 /** The abstract base class for queries.
     <p>Instantiable subclasses are:
@@ -165,7 +166,7 @@ public abstract class Query implements java.io.Serializable, Cloneable {
    * 
    * @throws UnsupportedOperationException if this query is not yet rewritten
    */
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     // needs to be implemented by query subclasses
     throw new UnsupportedOperationException();
   }
diff --git a/src/java/org/apache/lucene/search/TermQuery.java b/src/java/org/apache/lucene/search/TermQuery.java
index cf55498..cc9d2b9 100644
--- a/src/java/org/apache/lucene/search/TermQuery.java
+++ b/src/java/org/apache/lucene/search/TermQuery.java
@@ -146,7 +146,7 @@ public class TermQuery extends Query {
     return new TermWeight(searcher);
   }
 
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     terms.add(getTerm());
   }
 
diff --git a/src/java/org/apache/lucene/search/function/CustomScoreQuery.java b/src/java/org/apache/lucene/search/function/CustomScoreQuery.java
index b4d0d50..b9b8932 100755
--- a/src/java/org/apache/lucene/search/function/CustomScoreQuery.java
+++ b/src/java/org/apache/lucene/search/function/CustomScoreQuery.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import java.util.Set;
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.search.ComplexExplanation;
 import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.Query;
@@ -98,7 +99,7 @@ public class CustomScoreQuery extends Query {
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.Query#extractTerms(java.util.Set) */
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     subQuery.extractTerms(terms);
     for(int i = 0; i < valSrcQueries.length; i++) {
       valSrcQueries[i].extractTerms(terms);
diff --git a/src/java/org/apache/lucene/search/function/ValueSourceQuery.java b/src/java/org/apache/lucene/search/function/ValueSourceQuery.java
index 7da3e24..3826b81 100644
--- a/src/java/org/apache/lucene/search/function/ValueSourceQuery.java
+++ b/src/java/org/apache/lucene/search/function/ValueSourceQuery.java
@@ -18,6 +18,7 @@ package org.apache.lucene.search.function;
  */
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermDocs;
 import org.apache.lucene.search.*;
 import org.apache.lucene.util.ToStringUtils;
@@ -58,7 +59,7 @@ public class ValueSourceQuery extends Query {
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.Query#extractTerms(java.util.Set) */
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     // no terms involved here
   }
 
diff --git a/src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java b/src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java
index ec2b76c..735b9db 100644
--- a/src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java
+++ b/src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java
@@ -22,6 +22,7 @@ import java.util.Collection;
 import java.util.Set;
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.search.Searcher;
@@ -94,12 +95,7 @@ public class FieldMaskingSpanQuery extends SpanQuery {
     return maskedQuery.getSpans(reader);
   }
 
-  /** @deprecated use {@link #extractTerms(Set)} instead. */
-  public Collection getTerms() {
-    return maskedQuery.getTerms();
-  }
-  
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     maskedQuery.extractTerms(terms);
   }  
 
diff --git a/src/java/org/apache/lucene/search/spans/SpanFirstQuery.java b/src/java/org/apache/lucene/search/spans/SpanFirstQuery.java
index 0bf412c..aa61515 100644
--- a/src/java/org/apache/lucene/search/spans/SpanFirstQuery.java
+++ b/src/java/org/apache/lucene/search/spans/SpanFirstQuery.java
@@ -24,6 +24,7 @@ import java.util.Set;
 import java.util.ArrayList;
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.util.ToStringUtils;
 
@@ -47,12 +48,6 @@ public class SpanFirstQuery extends SpanQuery implements Cloneable {
 
   public String getField() { return match.getField(); }
 
-  /** Returns a collection of all terms matched by this query.
-   * @deprecated use extractTerms instead
-   * @see #extractTerms(Set)
-   */
-  public Collection getTerms() { return match.getTerms(); }
-
   public String toString(String field) {
     StringBuilder buffer = new StringBuilder();
     buffer.append("spanFirst(");
@@ -70,7 +65,7 @@ public class SpanFirstQuery extends SpanQuery implements Cloneable {
     return spanFirstQuery;
   }
   
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
 	    match.extractTerms(terms);
   }
 
diff --git a/src/java/org/apache/lucene/search/spans/SpanNearQuery.java b/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
index ce13d7b..e1cf485 100644
--- a/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
+++ b/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
@@ -27,6 +27,7 @@ import java.util.Set;
 
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.util.ToStringUtils;
 
@@ -80,21 +81,7 @@ public class SpanNearQuery extends SpanQuery implements Cloneable {
 
   public String getField() { return field; }
   
-  /** Returns a collection of all terms matched by this query.
-   * @deprecated use extractTerms instead
-   * @see #extractTerms(Set)
-   */
-  public Collection getTerms() {
-    Collection terms = new ArrayList();
-    Iterator i = clauses.iterator();
-    while (i.hasNext()) {
-      SpanQuery clause = (SpanQuery)i.next();
-      terms.addAll(clause.getTerms());
-    }
-    return terms;
-  }
-  
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
 	    Iterator i = clauses.iterator();
 	    while (i.hasNext()) {
 	      SpanQuery clause = (SpanQuery)i.next();
diff --git a/src/java/org/apache/lucene/search/spans/SpanNotQuery.java b/src/java/org/apache/lucene/search/spans/SpanNotQuery.java
index 6b5d954..c934ecb 100644
--- a/src/java/org/apache/lucene/search/spans/SpanNotQuery.java
+++ b/src/java/org/apache/lucene/search/spans/SpanNotQuery.java
@@ -18,6 +18,7 @@ package org.apache.lucene.search.spans;
  */
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.util.ToStringUtils;
 
@@ -49,13 +50,7 @@ public class SpanNotQuery extends SpanQuery implements Cloneable {
 
   public String getField() { return include.getField(); }
 
-  /** Returns a collection of all terms matched by this query.
-   * @deprecated use extractTerms instead
-   * @see #extractTerms(Set)
-   */
-  public Collection getTerms() { return include.getTerms(); }
-  
-  public void extractTerms(Set terms) { include.extractTerms(terms); }
+  public void extractTerms(Set<Term> terms) { include.extractTerms(terms); }
 
   public String toString(String field) {
     StringBuilder buffer = new StringBuilder();
diff --git a/src/java/org/apache/lucene/search/spans/SpanOrQuery.java b/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
index c65d261..ae300e7 100644
--- a/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
+++ b/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
@@ -26,6 +26,7 @@ import java.util.Iterator;
 import java.util.Set;
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
 import org.apache.lucene.util.PriorityQueue;
 import org.apache.lucene.util.ToStringUtils;
 import org.apache.lucene.search.Query;
@@ -58,21 +59,7 @@ public class SpanOrQuery extends SpanQuery implements Cloneable {
 
   public String getField() { return field; }
 
-  /** Returns a collection of all terms matched by this query.
-   * @deprecated use extractTerms instead
-   * @see #extractTerms(Set)
-   */
-  public Collection getTerms() {
-    Collection terms = new ArrayList();
-    Iterator i = clauses.iterator();
-    while (i.hasNext()) {
-      SpanQuery clause = (SpanQuery)i.next();
-      terms.addAll(clause.getTerms());
-    }
-    return terms;
-  }
-  
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
     Iterator i = clauses.iterator();
     while (i.hasNext()) {
       SpanQuery clause = (SpanQuery)i.next();
diff --git a/src/java/org/apache/lucene/search/spans/SpanQuery.java b/src/java/org/apache/lucene/search/spans/SpanQuery.java
index 6e3dcf2..fb32ed6 100644
--- a/src/java/org/apache/lucene/search/spans/SpanQuery.java
+++ b/src/java/org/apache/lucene/search/spans/SpanQuery.java
@@ -19,6 +19,7 @@ package org.apache.lucene.search.spans;
 
 import java.io.IOException;
 import java.util.Collection;
+import java.util.Set;
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.search.Query;
@@ -34,12 +35,6 @@ public abstract class SpanQuery extends Query {
   /** Returns the name of the field matched by this query.*/
   public abstract String getField();
 
-  /** Returns a collection of all terms matched by this query.
-   * @deprecated use extractTerms instead
-   * @see Query#extractTerms(Set)
-   */
-  public abstract Collection getTerms();
-  
   public Weight createWeight(Searcher searcher) throws IOException {
     return new SpanWeight(this, searcher);
   }
diff --git a/src/java/org/apache/lucene/search/spans/SpanTermQuery.java b/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
index 9f6739a..341474e 100644
--- a/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
+++ b/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
@@ -38,16 +38,7 @@ public class SpanTermQuery extends SpanQuery {
 
   public String getField() { return term.field(); }
   
-  /** Returns a collection of all terms matched by this query.
-   * @deprecated use extractTerms instead
-   * @see #extractTerms(Set)
-   */
-  public Collection getTerms() {
-    Collection terms = new ArrayList();
-    terms.add(term);
-    return terms;
-  }
-  public void extractTerms(Set terms) {
+  public void extractTerms(Set<Term> terms) {
 	  terms.add(term);
   }
 
diff --git a/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java b/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java
index d790354..d1f68b1 100644
--- a/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java
+++ b/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java
@@ -77,11 +77,6 @@ final class JustCompileSearchSpans {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
 
-    /** @deprecated delete in 3.0. */
-    public Collection getTerms() {
-      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
-    }
-
     public String toString(String field) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
diff --git a/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java b/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java
index f7fea83..1214451 100644
--- a/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java
+++ b/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery.java
@@ -17,28 +17,22 @@ package org.apache.lucene.search.spans;
  * limitations under the License.
  */
 
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.Scorer;
-import org.apache.lucene.search.Weight;
-import org.apache.lucene.search.CheckHits;
-import org.apache.lucene.search.QueryUtils;
-
-import org.apache.lucene.store.RAMDirectory;
-
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.Term;
+import java.util.HashSet;
+import java.util.Set;
 
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
-
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.CheckHits;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.QueryUtils;
+import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.util.LuceneTestCase;
 
-import java.util.HashSet;
-
 public class TestFieldMaskingSpanQuery extends LuceneTestCase {
 
   protected static Document doc(Field[] fields) {
@@ -137,7 +131,9 @@ public class TestFieldMaskingSpanQuery extends LuceneTestCase {
 
     QueryUtils.checkEqual(q, qr);
 
-    assertEquals(1, qr.getTerms().size());
+    Set<Term> terms = new HashSet<Term>();
+    qr.extractTerms(terms);
+    assertEquals(1, terms.size());
   }
   
   public void testRewrite1() throws Exception {
@@ -155,7 +151,9 @@ public class TestFieldMaskingSpanQuery extends LuceneTestCase {
 
     QueryUtils.checkUnequal(q, qr);
 
-    assertEquals(2, qr.getTerms().size());
+    Set<Term> terms = new HashSet<Term>();
+    qr.extractTerms(terms);
+    assertEquals(2, terms.size());
   }
   
   public void testRewrite2() throws Exception {

