GitDiffStart: 0bad718d58904e44f01dd562745a03e7bc921097 | Tue May 8 03:23:47 2012 +0000
diff --git a/dev-tools/idea/solr/contrib/uima/uima.iml b/dev-tools/idea/solr/contrib/uima/uima.iml
index 5489efa..c962746 100644
--- a/dev-tools/idea/solr/contrib/uima/uima.iml
+++ b/dev-tools/idea/solr/contrib/uima/uima.iml
@@ -27,5 +27,6 @@
     <orderEntry type="module" module-name="solr" />
     <orderEntry type="module" module-name="lucene" />
     <orderEntry type="module" module-name="analysis-uima" />
+    <orderEntry type="module" module-name="analysis-common" />
   </component>
 </module>
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory.java
new file mode 100644
index 0000000..06ac32b
--- /dev/null
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory.java
@@ -0,0 +1,168 @@
+package org.apache.lucene.analysis.util;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.core.StopFilter;
+import org.apache.lucene.util.IOUtils;
+import org.apache.lucene.util.Version;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.nio.charset.CharsetDecoder;
+import java.nio.charset.CodingErrorAction;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+
+abstract class AbstractAnalysisFactory {
+
+  /** The init args */
+  protected Map<String,String> args;
+
+  /** the luceneVersion arg */
+  protected Version luceneMatchVersion = null;
+
+  public void init(Map<String,String> args) {
+    this.args = args;
+  }
+
+  public Map<String,String> getArgs() {
+    return args;
+  }
+
+   /** this method can be called in the {@link org.apache.lucene.analysis.util.TokenizerFactory#create(java.io.Reader)}
+   * or {@link org.apache.lucene.analysis.util.TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,
+   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */
+  protected final void assureMatchVersion() {
+    if (luceneMatchVersion == null) {
+      throw new InitializationException("Configuration Error: Factory '" + this.getClass().getName() +
+        "' needs a 'luceneMatchVersion' parameter");
+    }
+  }
+
+  public void setLuceneMatchVersion(Version luceneMatchVersion) {
+    this.luceneMatchVersion = luceneMatchVersion;
+  }
+
+  public Version getLuceneMatchVersion() {
+    return this.luceneMatchVersion;
+  }
+
+  protected int getInt(String name) {
+    return getInt(name, -1, false);
+  }
+
+  protected int getInt(String name, int defaultVal) {
+    return getInt(name, defaultVal, true);
+  }
+
+  protected int getInt(String name, int defaultVal, boolean useDefault) {
+    String s = args.get(name);
+    if (s == null) {
+      if (useDefault) {
+        return defaultVal;
+      }
+      throw new InitializationException("Configuration Error: missing parameter '" + name + "'");
+    }
+    return Integer.parseInt(s);
+  }
+
+  protected boolean getBoolean(String name, boolean defaultVal) {
+    return getBoolean(name, defaultVal, true);
+  }
+
+  protected boolean getBoolean(String name, boolean defaultVal, boolean useDefault) {
+    String s = args.get(name);
+    if (s==null) {
+      if (useDefault) return defaultVal;
+      throw new InitializationException("Configuration Error: missing parameter '" + name + "'");
+    }
+    return Boolean.parseBoolean(s);
+  }
+
+  protected CharArraySet getWordSet(ResourceLoader loader,
+      String wordFiles, boolean ignoreCase) throws IOException {
+    assureMatchVersion();
+    List<String> files = splitFileNames(wordFiles);
+    CharArraySet words = null;
+    if (files.size() > 0) {
+      // default stopwords list has 35 or so words, but maybe don't make it that
+      // big to start
+      words = new CharArraySet(luceneMatchVersion,
+          files.size() * 10, ignoreCase);
+      for (String file : files) {
+        List<String> wlist = loader.getLines(file.trim());
+        words.addAll(StopFilter.makeStopSet(luceneMatchVersion, wlist,
+            ignoreCase));
+      }
+    }
+    return words;
+  }
+
+  /** same as {@link #getWordSet(ResourceLoader, String, boolean)},
+   * except the input is in snowball format. */
+  protected CharArraySet getSnowballWordSet(ResourceLoader loader,
+      String wordFiles, boolean ignoreCase) throws IOException {
+    assureMatchVersion();
+    List<String> files = splitFileNames(wordFiles);
+    CharArraySet words = null;
+    if (files.size() > 0) {
+      // default stopwords list has 35 or so words, but maybe don't make it that
+      // big to start
+      words = new CharArraySet(luceneMatchVersion,
+          files.size() * 10, ignoreCase);
+      for (String file : files) {
+        InputStream stream = null;
+        Reader reader = null;
+        try {
+          stream = loader.openResource(file.trim());
+          CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()
+              .onMalformedInput(CodingErrorAction.REPORT)
+              .onUnmappableCharacter(CodingErrorAction.REPORT);
+          reader = new InputStreamReader(stream, decoder);
+          WordlistLoader.getSnowballWordSet(reader, words);
+        } finally {
+          IOUtils.closeWhileHandlingException(reader, stream);
+        }
+      }
+    }
+    return words;
+  }
+
+  /**
+   * Splits file names separated by comma character.
+   * File names can contain comma characters escaped by backslash '\'
+   *
+   * @param fileNames the string containing file names
+   * @return a list of file names with the escaping backslashed removed
+   */
+  protected List<String> splitFileNames(String fileNames) {
+    if (fileNames == null)
+      return Collections.<String>emptyList();
+
+    List<String> result = new ArrayList<String>();
+    for (String file : fileNames.split("(?<!\\\\),")) {
+      result.add(file.replaceAll("\\\\(?=,)", ""));
+    }
+
+    return result;
+  }
+}
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharFilterFactory.java
new file mode 100644
index 0000000..03a4af1
--- /dev/null
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharFilterFactory.java
@@ -0,0 +1,25 @@
+package org.apache.lucene.analysis.util;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.CharStream;
+
+public abstract class CharFilterFactory extends AbstractAnalysisFactory {
+
+  public abstract CharStream create(CharStream input);
+}
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/InitializationException.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/InitializationException.java
new file mode 100644
index 0000000..c5b46d1
--- /dev/null
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/InitializationException.java
@@ -0,0 +1,32 @@
+package org.apache.lucene.analysis.util;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Exception representing an error occurring during the initialization of a Factory.
+ */
+public class InitializationException extends RuntimeException {
+
+  public InitializationException(String message) {
+    super(message);
+  }
+
+  public InitializationException(String message, Throwable cause) {
+    super(message, cause);
+  }
+}
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/TokenFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/TokenFilterFactory.java
new file mode 100644
index 0000000..6bbfc18
--- /dev/null
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/TokenFilterFactory.java
@@ -0,0 +1,26 @@
+package org.apache.lucene.analysis.util;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.TokenStream;
+
+public abstract class TokenFilterFactory extends AbstractAnalysisFactory {
+
+  /** Transform the specified input TokenStream */
+  public abstract TokenStream create(TokenStream input);
+}
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/TokenizerFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/TokenizerFactory.java
new file mode 100644
index 0000000..71f5121
--- /dev/null
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/TokenizerFactory.java
@@ -0,0 +1,28 @@
+package org.apache.lucene.analysis.util;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.Tokenizer;
+
+import java.io.Reader;
+
+public abstract class TokenizerFactory extends AbstractAnalysisFactory {
+
+  /** Creates a TokenStream of the specified input */
+  public abstract Tokenizer create(Reader input);
+}
diff --git a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUCollationKeyFilterFactory.java b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUCollationKeyFilterFactory.java
index 2010de7..3305f3c 100644
--- a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUCollationKeyFilterFactory.java
+++ b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUCollationKeyFilterFactory.java
@@ -21,6 +21,7 @@ import java.io.InputStream;
 
 import org.apache.commons.io.IOUtils;
 import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 import org.apache.lucene.collation.ICUCollationKeyFilter;
 import org.apache.lucene.analysis.util.ResourceLoader;
 import org.apache.solr.common.SolrException;
@@ -70,7 +71,7 @@ import com.ibm.icu.util.ULocale;
  * @deprecated use {@link org.apache.solr.schema.ICUCollationField} instead.
  */
 @Deprecated
-public class ICUCollationKeyFilterFactory extends BaseTokenFilterFactory implements MultiTermAwareComponent,ResourceLoaderAware {
+public class ICUCollationKeyFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent, ResourceLoaderAware {
   private Collator collator;
 
   public void inform(ResourceLoader loader) {
diff --git a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUFoldingFilterFactory.java b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUFoldingFilterFactory.java
index ebedc1d..9598366 100644
--- a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUFoldingFilterFactory.java
+++ b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUFoldingFilterFactory.java
@@ -2,6 +2,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.icu.ICUFoldingFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Licensed to the Apache Software Foundation (ASF) under one or more
@@ -21,7 +22,7 @@ import org.apache.lucene.analysis.icu.ICUFoldingFilter;
  */
 
 /** Factory for {@link ICUFoldingFilter} */
-public class ICUFoldingFilterFactory extends BaseTokenFilterFactory implements MultiTermAwareComponent {
+public class ICUFoldingFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
 
   @Override
   public TokenStream create(TokenStream input) {
diff --git a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory.java b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory.java
index 63b4657..db06da6 100644
--- a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory.java
+++ b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory.java
@@ -23,6 +23,7 @@ import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.icu.ICUNormalizer2Filter;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.SolrException.ErrorCode;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 import com.ibm.icu.text.FilteredNormalizer2;
 import com.ibm.icu.text.Normalizer2;
@@ -44,7 +45,7 @@ import com.ibm.icu.text.UnicodeSet;
  * @see Normalizer2
  * @see FilteredNormalizer2
  */
-public class ICUNormalizer2FilterFactory extends BaseTokenFilterFactory implements MultiTermAwareComponent {
+public class ICUNormalizer2FilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
   private Normalizer2 normalizer;
 
   // TODO: support custom normalization
diff --git a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUTokenizerFactory.java b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUTokenizerFactory.java
index bbda76f..3b4c7fd 100644
--- a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUTokenizerFactory.java
+++ b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUTokenizerFactory.java
@@ -21,9 +21,10 @@ import java.io.Reader;
 
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.icu.segmentation.ICUTokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 
 /** Factory for {@link ICUTokenizer} */
-public class ICUTokenizerFactory extends BaseTokenizerFactory {
+public class ICUTokenizerFactory extends TokenizerFactory {
   // TODO: add support for custom configs
   @Override
   public Tokenizer create(Reader input) {
diff --git a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUTransformFilterFactory.java b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUTransformFilterFactory.java
index 98b162b..9ae0dec 100644
--- a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUTransformFilterFactory.java
+++ b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUTransformFilterFactory.java
@@ -21,9 +21,9 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.icu.ICUTransformFilter;
-import org.apache.solr.analysis.BaseTokenFilterFactory;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.SolrException.ErrorCode;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 import com.ibm.icu.text.Transliterator;
 
@@ -37,7 +37,7 @@ import com.ibm.icu.text.Transliterator;
  * </ul>
  * @see Transliterator
  */
-public class ICUTransformFilterFactory extends BaseTokenFilterFactory implements MultiTermAwareComponent {
+public class ICUTransformFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
   private Transliterator transliterator;
   
   // TODO: add support for custom rules
diff --git a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/MorfologikFilterFactory.java b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/MorfologikFilterFactory.java
index 89250ec..f18ba35 100644
--- a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/MorfologikFilterFactory.java
+++ b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/MorfologikFilterFactory.java
@@ -26,6 +26,7 @@ import morfologik.stemming.PolishStemmer.DICTIONARY;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.morfologik.MorfologikFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Filter factory for {@link MorfologikFilter}.
@@ -44,7 +45,7 @@ import org.apache.lucene.analysis.morfologik.MorfologikFilter;
  * 
  * @see <a href="http://morfologik.blogspot.com/">Morfologik web site</a>
  */
-public class MorfologikFilterFactory extends BaseTokenFilterFactory {
+public class MorfologikFilterFactory extends TokenFilterFactory {
   /** Dictionary. */
   private DICTIONARY dictionary = DICTIONARY.MORFOLOGIK;
   
diff --git a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/SmartChineseSentenceTokenizerFactory.java b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/SmartChineseSentenceTokenizerFactory.java
index add2977..94c605d 100644
--- a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/SmartChineseSentenceTokenizerFactory.java
+++ b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/SmartChineseSentenceTokenizerFactory.java
@@ -21,12 +21,13 @@ import java.io.Reader;
 
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.cn.smart.SentenceTokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 
 /**
  * Factory for the SmartChineseAnalyzer {@link SentenceTokenizer}
  * @lucene.experimental
  */
-public class SmartChineseSentenceTokenizerFactory extends BaseTokenizerFactory {
+public class SmartChineseSentenceTokenizerFactory extends TokenizerFactory {
   public Tokenizer create(Reader input) {
     return new SentenceTokenizer(input);
   }
diff --git a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/SmartChineseWordTokenFilterFactory.java b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/SmartChineseWordTokenFilterFactory.java
index 953491e..3395111 100644
--- a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/SmartChineseWordTokenFilterFactory.java
+++ b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/SmartChineseWordTokenFilterFactory.java
@@ -20,6 +20,7 @@ package org.apache.solr.analysis;
 import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.cn.smart.WordTokenFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for the SmartChineseAnalyzer {@link WordTokenFilter}
@@ -30,7 +31,7 @@ import org.apache.lucene.analysis.cn.smart.WordTokenFilter;
  * <code>words="org/apache/lucene/analysis/cn/smart/stopwords.txt"</code>
  * @lucene.experimental
  */
-public class SmartChineseWordTokenFilterFactory extends BaseTokenFilterFactory {
+public class SmartChineseWordTokenFilterFactory extends TokenFilterFactory {
   public TokenFilter create(TokenStream input) {
       return new WordTokenFilter(input);
   }
diff --git a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/StempelPolishStemFilterFactory.java b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/StempelPolishStemFilterFactory.java
index f8396ab..e8c6089 100644
--- a/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/StempelPolishStemFilterFactory.java
+++ b/solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/StempelPolishStemFilterFactory.java
@@ -26,12 +26,13 @@ import org.apache.lucene.analysis.util.ResourceLoader;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.SolrException.ErrorCode;
 import org.apache.lucene.analysis.util.ResourceLoaderAware;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 import org.egothor.stemmer.Trie;
 
 /**
  * Factory for {@link StempelFilter} using a Polish stemming table.
  */
-public class StempelPolishStemFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware {
+public class StempelPolishStemFilterFactory extends TokenFilterFactory implements ResourceLoaderAware {
   private Trie stemmer = null;
   private static final String STEMTABLE = "org/apache/lucene/analysis/pl/stemmer_20000.tbl";
   
diff --git a/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory.java b/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory.java
index 5ddfa1a..c75ca10 100644
--- a/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory.java
+++ b/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory.java
@@ -22,9 +22,9 @@ import java.util.Set;
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.util.CharArraySet;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 import org.apache.solr.analysis.CommonGramsFilterFactory;
 import org.apache.solr.analysis.StopFilterFactory;
-import org.apache.solr.analysis.TokenFilterFactory;
 import org.apache.solr.analysis.TokenizerChain;
 import org.apache.solr.schema.IndexSchema;
 import org.carrot2.core.LanguageCode;
diff --git a/solr/contrib/uima/src/java/org/apache/solr/uima/analysis/UIMAAnnotationsTokenizerFactory.java b/solr/contrib/uima/src/java/org/apache/solr/uima/analysis/UIMAAnnotationsTokenizerFactory.java
index 2d23776..8467b79 100644
--- a/solr/contrib/uima/src/java/org/apache/solr/uima/analysis/UIMAAnnotationsTokenizerFactory.java
+++ b/solr/contrib/uima/src/java/org/apache/solr/uima/analysis/UIMAAnnotationsTokenizerFactory.java
@@ -18,16 +18,16 @@ package org.apache.solr.uima.analysis;
  */
 
 import org.apache.lucene.analysis.Tokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 import org.apache.lucene.analysis.uima.UIMAAnnotationsTokenizer;
-import org.apache.solr.analysis.BaseTokenizerFactory;
 
 import java.io.Reader;
 import java.util.Map;
 
 /**
- * Solr {@link org.apache.solr.analysis.TokenizerFactory} for {@link UIMAAnnotationsTokenizer}
+ * {@link org.apache.lucene.analysis.util.TokenizerFactory} for {@link UIMAAnnotationsTokenizer}
  */
-public class UIMAAnnotationsTokenizerFactory extends BaseTokenizerFactory {
+public class UIMAAnnotationsTokenizerFactory extends TokenizerFactory {
 
   private String descriptorPath;
   private String tokenType;
diff --git a/solr/contrib/uima/src/java/org/apache/solr/uima/analysis/UIMATypeAwareAnnotationsTokenizerFactory.java b/solr/contrib/uima/src/java/org/apache/solr/uima/analysis/UIMATypeAwareAnnotationsTokenizerFactory.java
index 9566699..1efda6b 100644
--- a/solr/contrib/uima/src/java/org/apache/solr/uima/analysis/UIMATypeAwareAnnotationsTokenizerFactory.java
+++ b/solr/contrib/uima/src/java/org/apache/solr/uima/analysis/UIMATypeAwareAnnotationsTokenizerFactory.java
@@ -19,15 +19,15 @@ package org.apache.solr.uima.analysis;
 
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.uima.UIMATypeAwareAnnotationsTokenizer;
-import org.apache.solr.analysis.BaseTokenizerFactory;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 
 import java.io.Reader;
 import java.util.Map;
 
 /**
- * Solr {@link org.apache.solr.analysis.TokenizerFactory} for {@link UIMATypeAwareAnnotationsTokenizer}
+ * {@link org.apache.lucene.analysis.util.TokenizerFactory} for {@link UIMATypeAwareAnnotationsTokenizer}
  */
-public class UIMATypeAwareAnnotationsTokenizerFactory extends BaseTokenizerFactory {
+public class UIMATypeAwareAnnotationsTokenizerFactory extends TokenizerFactory {
 
   private String descriptorPath;
   private String tokenType;
diff --git a/solr/core/src/java/org/apache/solr/analysis/ASCIIFoldingFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/ASCIIFoldingFilterFactory.java
index 88d5729..fff4602 100644
--- a/solr/core/src/java/org/apache/solr/analysis/ASCIIFoldingFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/ASCIIFoldingFilterFactory.java
@@ -18,6 +18,8 @@
 
 
 package org.apache.solr.analysis;
+
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 import org.apache.lucene.analysis.miscellaneous.ASCIIFoldingFilter;
 import org.apache.lucene.analysis.TokenStream;
 
@@ -32,7 +34,7 @@ import org.apache.lucene.analysis.TokenStream;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class ASCIIFoldingFilterFactory extends BaseTokenFilterFactory implements MultiTermAwareComponent {
+public class ASCIIFoldingFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
   public ASCIIFoldingFilter create(TokenStream input) {
     return new ASCIIFoldingFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/ArabicLetterTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/ArabicLetterTokenizerFactory.java
index aeed58e..60a852c 100644
--- a/solr/core/src/java/org/apache/solr/analysis/ArabicLetterTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/ArabicLetterTokenizerFactory.java
@@ -17,6 +17,7 @@ package org.apache.solr.analysis;
  */
 
 import org.apache.lucene.analysis.ar.ArabicLetterTokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -29,7 +30,7 @@ import java.util.Map;
  * @deprecated (3.1) Use StandardTokenizerFactory instead.
  **/
 @Deprecated
-public class ArabicLetterTokenizerFactory extends BaseTokenizerFactory{
+public class ArabicLetterTokenizerFactory extends TokenizerFactory {
 
   private static final Logger log = LoggerFactory.getLogger(ArabicLetterTokenizerFactory.class);
 
diff --git a/solr/core/src/java/org/apache/solr/analysis/ArabicNormalizationFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/ArabicNormalizationFilterFactory.java
index d3db401..0e45602 100644
--- a/solr/core/src/java/org/apache/solr/analysis/ArabicNormalizationFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/ArabicNormalizationFilterFactory.java
@@ -18,6 +18,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.ar.ArabicNormalizationFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 
 /**
@@ -31,7 +32,7 @@ import org.apache.lucene.analysis.ar.ArabicNormalizationFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class ArabicNormalizationFilterFactory extends BaseTokenFilterFactory implements MultiTermAwareComponent {
+public class ArabicNormalizationFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
 
   public ArabicNormalizationFilter create(TokenStream input) {
     return new ArabicNormalizationFilter(input);
diff --git a/solr/core/src/java/org/apache/solr/analysis/ArabicStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/ArabicStemFilterFactory.java
index 0766f74..08e0400 100644
--- a/solr/core/src/java/org/apache/solr/analysis/ArabicStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/ArabicStemFilterFactory.java
@@ -18,6 +18,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.ar.ArabicStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 
 /**
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.ar.ArabicStemFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class ArabicStemFilterFactory extends BaseTokenFilterFactory{
+public class ArabicStemFilterFactory extends TokenFilterFactory {
 
 
   public ArabicStemFilter create(TokenStream input) {
diff --git a/solr/core/src/java/org/apache/solr/analysis/BaseCharFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/BaseCharFilterFactory.java
deleted file mode 100644
index 3b43c6c..0000000
--- a/solr/core/src/java/org/apache/solr/analysis/BaseCharFilterFactory.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.analysis;
-
-import org.apache.lucene.util.Version;
-
-import java.util.Map;
-
-/**
-*
-* @since Solr 1.4
-*
-*/
-public abstract class BaseCharFilterFactory implements CharFilterFactory {
-
-  protected Version luceneMatchVersion;
-
-  /** The init args */
-  protected Map<String,String> args;
-
-  public Map<String, String> getArgs() {
-    return args;
-  }
-
-  public void init(Map<String, String> args) {
-    this.args = args;
-  }
-
-  public void setLuceneMatchVersion(Version luceneMatchVersion) {
-    this.luceneMatchVersion = luceneMatchVersion;
-  }
-
-  protected int getInt(String name) {
-    return getInt(name,-1,false);
-  }
-
-  protected int getInt(String name, int defaultVal) {
-    return getInt(name,defaultVal,true);
-  }
-
-  protected int getInt(String name, int defaultVal, boolean useDefault) {
-    String s = args.get(name);
-    if (s==null) {
-      if (useDefault) return defaultVal;
-      throw new InitializationException("Configuration Error: missing parameter '" + name + "'");
-    }
-    return Integer.parseInt(s);
-  }
-}
diff --git a/solr/core/src/java/org/apache/solr/analysis/BaseTokenFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/BaseTokenFilterFactory.java
deleted file mode 100644
index 0f554bc..0000000
--- a/solr/core/src/java/org/apache/solr/analysis/BaseTokenFilterFactory.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.analysis;
-
-/**
- * Simple abstract implementation that handles init arg processing.
- * 
- *
- */
-public abstract class BaseTokenFilterFactory extends BaseTokenStreamFactory implements TokenFilterFactory {
-
-}
diff --git a/solr/core/src/java/org/apache/solr/analysis/BaseTokenStreamFactory.java b/solr/core/src/java/org/apache/solr/analysis/BaseTokenStreamFactory.java
deleted file mode 100644
index 909b120..0000000
--- a/solr/core/src/java/org/apache/solr/analysis/BaseTokenStreamFactory.java
+++ /dev/null
@@ -1,153 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.analysis;
-
-import org.apache.lucene.analysis.core.StopFilter;
-import org.apache.lucene.analysis.util.CharArraySet;
-import org.apache.lucene.analysis.util.WordlistLoader;
-import org.apache.lucene.util.IOUtils;
-import org.apache.lucene.util.Version;
-import org.apache.lucene.analysis.util.ResourceLoader;
-import org.apache.solr.common.util.StrUtils;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.nio.charset.CharsetDecoder;
-import java.nio.charset.CodingErrorAction;
-import java.util.List;
-import java.util.Map;
-
-/**
- * Simple abstract implementation that handles init arg processing, is not really
- * a factory as it implements no interface, but removes code duplication
- * in its subclasses.
- * 
- *
- */
-abstract class BaseTokenStreamFactory {
-  /** The init args */
-  protected Map<String,String> args;
-  
-  /** the luceneVersion arg */
-  protected Version luceneMatchVersion = null;
-
-  public void init(Map<String,String> args) {
-    this.args=args;
-  }
-
-  public Map<String,String> getArgs() {
-    return args;
-  }
-  
-  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} 
-   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,
-   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */
-  protected final void assureMatchVersion() {
-    if (luceneMatchVersion == null) {
-      throw new InitializationException("Configuration Error: Factory '" + this.getClass().getName() +
-        "' needs a 'luceneMatchVersion' parameter");
-    }
-  }
-
-  public void setLuceneMatchVersion(Version luceneMatchVersion) {
-    this.luceneMatchVersion = luceneMatchVersion;
-  }
-  
-  // TODO: move these somewhere that tokenizers and others
-  // can also use them...
-  protected int getInt(String name) {
-    return getInt(name,-1,false);
-  }
-
-  protected int getInt(String name, int defaultVal) {
-    return getInt(name,defaultVal,true);
-  }
-
-  protected int getInt(String name, int defaultVal, boolean useDefault) {
-    String s = args.get(name);
-    if (s==null) {
-      if (useDefault) return defaultVal;
-      throw new InitializationException("Configuration Error: missing parameter '" + name + "'");
-    }
-    return Integer.parseInt(s);
-  }
-
-  protected boolean getBoolean(String name, boolean defaultVal) {
-    return getBoolean(name,defaultVal,true);
-  }
-
-  protected boolean getBoolean(String name, boolean defaultVal, boolean useDefault) {
-    String s = args.get(name);
-    if (s==null) {
-      if (useDefault) return defaultVal;
-      throw new InitializationException("Configuration Error: missing parameter '" + name + "'");
-    }
-    return Boolean.parseBoolean(s);
-  }
-
-  protected CharArraySet getWordSet(ResourceLoader loader,
-      String wordFiles, boolean ignoreCase) throws IOException {
-    assureMatchVersion();
-    List<String> files = StrUtils.splitFileNames(wordFiles);
-    CharArraySet words = null;
-    if (files.size() > 0) {
-      // default stopwords list has 35 or so words, but maybe don't make it that
-      // big to start
-      words = new CharArraySet(luceneMatchVersion, 
-          files.size() * 10, ignoreCase);
-      for (String file : files) {
-        List<String> wlist = loader.getLines(file.trim());
-        words.addAll(StopFilter.makeStopSet(luceneMatchVersion, wlist,
-            ignoreCase));
-      }
-    }
-    return words;
-  }
-  
-  /** same as {@link #getWordSet(ResourceLoader, String, boolean)},
-   * except the input is in snowball format. */
-  protected CharArraySet getSnowballWordSet(ResourceLoader loader,
-      String wordFiles, boolean ignoreCase) throws IOException {
-    assureMatchVersion();
-    List<String> files = StrUtils.splitFileNames(wordFiles);
-    CharArraySet words = null;
-    if (files.size() > 0) {
-      // default stopwords list has 35 or so words, but maybe don't make it that
-      // big to start
-      words = new CharArraySet(luceneMatchVersion, 
-          files.size() * 10, ignoreCase);
-      for (String file : files) {
-        InputStream stream = null;
-        Reader reader = null;
-        try {
-          stream = loader.openResource(file.trim());
-          CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()
-              .onMalformedInput(CodingErrorAction.REPORT)
-              .onUnmappableCharacter(CodingErrorAction.REPORT);
-          reader = new InputStreamReader(stream, decoder);
-          WordlistLoader.getSnowballWordSet(reader, words);
-        } finally {
-          IOUtils.closeWhileHandlingException(reader, stream);
-        }
-      }
-    }
-    return words;
-  }
-}
diff --git a/solr/core/src/java/org/apache/solr/analysis/BaseTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/BaseTokenizerFactory.java
deleted file mode 100644
index d4c4c2b..0000000
--- a/solr/core/src/java/org/apache/solr/analysis/BaseTokenizerFactory.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.analysis;
-
-/**
- * Simple abstract implementation that handles init arg processing.
- * 
- *
- */
-public abstract class BaseTokenizerFactory extends BaseTokenStreamFactory implements TokenizerFactory {
-
-}
diff --git a/solr/core/src/java/org/apache/solr/analysis/BeiderMorseFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/BeiderMorseFilterFactory.java
index 8d101be..e8ed237 100644
--- a/solr/core/src/java/org/apache/solr/analysis/BeiderMorseFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/BeiderMorseFilterFactory.java
@@ -27,6 +27,7 @@ import org.apache.commons.codec.language.bm.PhoneticEngine;
 import org.apache.commons.codec.language.bm.RuleType;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.phonetic.BeiderMorseFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link BeiderMorseFilter}.
@@ -42,7 +43,7 @@ import org.apache.lucene.analysis.phonetic.BeiderMorseFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class BeiderMorseFilterFactory extends BaseTokenFilterFactory {
+public class BeiderMorseFilterFactory extends TokenFilterFactory {
   private PhoneticEngine engine;
   private LanguageSet languageSet;
   
diff --git a/solr/core/src/java/org/apache/solr/analysis/BrazilianStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/BrazilianStemFilterFactory.java
index e2e8e97..d1716b6 100644
--- a/solr/core/src/java/org/apache/solr/analysis/BrazilianStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/BrazilianStemFilterFactory.java
@@ -18,8 +18,10 @@
 
 
 package org.apache.solr.analysis;
+
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.br.BrazilianStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link BrazilianStemFilter}.
@@ -33,7 +35,7 @@ import org.apache.lucene.analysis.br.BrazilianStemFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class BrazilianStemFilterFactory extends BaseTokenFilterFactory {
+public class BrazilianStemFilterFactory extends TokenFilterFactory {
   public BrazilianStemFilter create(TokenStream in) {
     return new BrazilianStemFilter(in);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/BulgarianStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/BulgarianStemFilterFactory.java
index 0386351..1676a93 100644
--- a/solr/core/src/java/org/apache/solr/analysis/BulgarianStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/BulgarianStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.bg.BulgarianStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link BulgarianStemFilter}.
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.bg.BulgarianStemFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class BulgarianStemFilterFactory extends BaseTokenFilterFactory {
+public class BulgarianStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new BulgarianStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/CJKBigramFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/CJKBigramFilterFactory.java
index 4fd2ee9..54025c3 100644
--- a/solr/core/src/java/org/apache/solr/analysis/CJKBigramFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/CJKBigramFilterFactory.java
@@ -21,6 +21,7 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.cjk.CJKBigramFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link CJKBigramFilter}.
@@ -36,7 +37,7 @@ import org.apache.lucene.analysis.cjk.CJKBigramFilter;
  *   &lt;/analyzer&gt;
  * &lt;/fieldType&gt;</pre>
  */
-public class CJKBigramFilterFactory extends BaseTokenFilterFactory {
+public class CJKBigramFilterFactory extends TokenFilterFactory {
   int flags;
 
   @Override
diff --git a/solr/core/src/java/org/apache/solr/analysis/CJKTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/CJKTokenizerFactory.java
index 1556c76..8e2e7c7 100644
--- a/solr/core/src/java/org/apache/solr/analysis/CJKTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/CJKTokenizerFactory.java
@@ -20,6 +20,8 @@
 package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.cjk.CJKTokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
+
 import java.io.Reader;
 
 /** 
@@ -33,7 +35,7 @@ import java.io.Reader;
  * @deprecated
  */
 @Deprecated
-public class CJKTokenizerFactory extends BaseTokenizerFactory {
+public class CJKTokenizerFactory extends TokenizerFactory {
   public CJKTokenizer create(Reader in) {
     return new CJKTokenizer(in);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/CJKWidthFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/CJKWidthFilterFactory.java
index d333525..aaac0f3 100644
--- a/solr/core/src/java/org/apache/solr/analysis/CJKWidthFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/CJKWidthFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.cjk.CJKWidthFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link CJKWidthFilter}.
@@ -33,7 +34,7 @@ import org.apache.lucene.analysis.cjk.CJKWidthFilter;
  * &lt;/fieldType&gt;</pre>
  */
 
-public class CJKWidthFilterFactory extends BaseTokenFilterFactory implements MultiTermAwareComponent {
+public class CJKWidthFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
   
   @Override
   public TokenStream create(TokenStream input) {
diff --git a/solr/core/src/java/org/apache/solr/analysis/CapitalizationFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/CapitalizationFilterFactory.java
index 080b134..1dd96fd 100644
--- a/solr/core/src/java/org/apache/solr/analysis/CapitalizationFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/CapitalizationFilterFactory.java
@@ -20,6 +20,7 @@ package org.apache.solr.analysis;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.miscellaneous.CapitalizationFilter;
 import org.apache.lucene.analysis.util.CharArraySet;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -56,7 +57,7 @@ import java.util.StringTokenizer;
  *
  * @since solr 1.3
  */
-public class CapitalizationFilterFactory extends BaseTokenFilterFactory {
+public class CapitalizationFilterFactory extends TokenFilterFactory {
   public static final String KEEP = "keep";
   public static final String KEEP_IGNORE_CASE = "keepIgnoreCase";
   public static final String OK_PREFIX = "okPrefix";
diff --git a/solr/core/src/java/org/apache/solr/analysis/CharFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/CharFilterFactory.java
deleted file mode 100644
index c4f9182..0000000
--- a/solr/core/src/java/org/apache/solr/analysis/CharFilterFactory.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.analysis;
-
-import java.util.Map;
-
-import org.apache.lucene.analysis.CharStream;
-import org.apache.lucene.util.Version;
-
-/**
-*
-* @since Solr 1.4
-*
-*/
-public interface CharFilterFactory {
-
-  public void init(Map<String,String> args);
-
-  public Map<String,String> getArgs();
-
-  public void setLuceneMatchVersion(Version luceneMatchVersion);
-
-  public CharStream create(CharStream input);
-}
diff --git a/solr/core/src/java/org/apache/solr/analysis/ChineseFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/ChineseFilterFactory.java
index 3b6d85d..002ee3e 100644
--- a/solr/core/src/java/org/apache/solr/analysis/ChineseFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/ChineseFilterFactory.java
@@ -22,6 +22,7 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.cn.ChineseFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -30,7 +31,7 @@ import org.slf4j.LoggerFactory;
  * @deprecated Use {@link StopFilterFactory} instead.
  */
 @Deprecated
-public class ChineseFilterFactory extends BaseTokenFilterFactory {
+public class ChineseFilterFactory extends TokenFilterFactory {
 
   private static final Logger log = LoggerFactory.getLogger(ChineseFilterFactory.class);
 
diff --git a/solr/core/src/java/org/apache/solr/analysis/ChineseTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/ChineseTokenizerFactory.java
index 2259286..27e12cf 100644
--- a/solr/core/src/java/org/apache/solr/analysis/ChineseTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/ChineseTokenizerFactory.java
@@ -23,6 +23,7 @@ import java.io.Reader;
 import java.util.Map;
 
 import org.apache.lucene.analysis.cn.ChineseTokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -31,7 +32,7 @@ import org.slf4j.LoggerFactory;
  * @deprecated Use {@link StandardTokenizerFactory} instead.
  */
 @Deprecated
-public class ChineseTokenizerFactory extends BaseTokenizerFactory {
+public class ChineseTokenizerFactory extends TokenizerFactory {
 
   private static final Logger log = LoggerFactory.getLogger(ChineseTokenizerFactory.class);
 
diff --git a/solr/core/src/java/org/apache/solr/analysis/ClassicFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/ClassicFilterFactory.java
index eba8e05..180c97f 100644
--- a/solr/core/src/java/org/apache/solr/analysis/ClassicFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/ClassicFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 import org.apache.lucene.analysis.standard.ClassicFilter;
 
 /**
@@ -33,7 +34,7 @@ import org.apache.lucene.analysis.standard.ClassicFilter;
  *
  *
  */
-public class ClassicFilterFactory extends BaseTokenFilterFactory {
+public class ClassicFilterFactory extends TokenFilterFactory {
   public TokenFilter create(TokenStream input) {
     return new ClassicFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/ClassicTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/ClassicTokenizerFactory.java
index 3b8a54b..f422ae3 100644
--- a/solr/core/src/java/org/apache/solr/analysis/ClassicTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/ClassicTokenizerFactory.java
@@ -20,6 +20,8 @@ package org.apache.solr.analysis;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.standard.ClassicTokenizer;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
+
 import java.io.Reader;
 import java.util.Map;
 
@@ -35,7 +37,7 @@ import java.util.Map;
  *
  */
 
-public class ClassicTokenizerFactory extends BaseTokenizerFactory {
+public class ClassicTokenizerFactory extends TokenizerFactory {
 
   private int maxTokenLength;
 
diff --git a/solr/core/src/java/org/apache/solr/analysis/CollationKeyFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/CollationKeyFilterFactory.java
index 25194e8..8d0f4bd 100644
--- a/solr/core/src/java/org/apache/solr/analysis/CollationKeyFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/CollationKeyFilterFactory.java
@@ -26,6 +26,8 @@ import java.util.Locale;
 
 import org.apache.commons.io.IOUtils;
 import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.util.InitializationException;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 import org.apache.lucene.collation.CollationKeyFilter;
 import org.apache.lucene.analysis.util.ResourceLoader;
 import org.apache.lucene.analysis.util.ResourceLoaderAware;
@@ -70,7 +72,7 @@ import org.apache.lucene.analysis.util.ResourceLoaderAware;
  * @deprecated use {@link org.apache.solr.schema.CollationField} instead.
  */
 @Deprecated
-public class CollationKeyFilterFactory extends BaseTokenFilterFactory implements MultiTermAwareComponent,ResourceLoaderAware {
+public class CollationKeyFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent, ResourceLoaderAware {
   private Collator collator;
 
   public void inform(ResourceLoader loader) {
diff --git a/solr/core/src/java/org/apache/solr/analysis/CommonGramsFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/CommonGramsFilterFactory.java
index e74a66a..78e6fdc 100644
--- a/solr/core/src/java/org/apache/solr/analysis/CommonGramsFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/CommonGramsFilterFactory.java
@@ -21,9 +21,7 @@ import java.io.IOException;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.commongrams.CommonGramsFilter;
 import org.apache.lucene.analysis.core.StopAnalyzer;
-import org.apache.lucene.analysis.util.CharArraySet;
-import org.apache.lucene.analysis.util.ResourceLoader;
-import org.apache.lucene.analysis.util.ResourceLoaderAware;
+import org.apache.lucene.analysis.util.*;
 
 /**
  * Constructs a {@link CommonGramsFilter}.
@@ -40,7 +38,7 @@ import org.apache.lucene.analysis.util.ResourceLoaderAware;
 /*
  * This is pretty close to a straight copy from StopFilterFactory
  */
-public class CommonGramsFilterFactory extends BaseTokenFilterFactory implements
+public class CommonGramsFilterFactory extends TokenFilterFactory implements
     ResourceLoaderAware {
 
   public void inform(ResourceLoader loader) {
diff --git a/solr/core/src/java/org/apache/solr/analysis/CommonGramsQueryFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/CommonGramsQueryFilterFactory.java
index 26a8bd4..5ba568c 100644
--- a/solr/core/src/java/org/apache/solr/analysis/CommonGramsQueryFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/CommonGramsQueryFilterFactory.java
@@ -23,9 +23,7 @@ import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.commongrams.CommonGramsFilter;
 import org.apache.lucene.analysis.commongrams.CommonGramsQueryFilter;
 import org.apache.lucene.analysis.core.StopAnalyzer;
-import org.apache.lucene.analysis.util.CharArraySet;
-import org.apache.lucene.analysis.util.ResourceLoader;
-import org.apache.lucene.analysis.util.ResourceLoaderAware;
+import org.apache.lucene.analysis.util.*;
 
 /**
  * Construct {@link CommonGramsQueryFilter}.
@@ -41,7 +39,7 @@ import org.apache.lucene.analysis.util.ResourceLoaderAware;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class CommonGramsQueryFilterFactory extends BaseTokenFilterFactory
+public class CommonGramsQueryFilterFactory extends TokenFilterFactory
     implements ResourceLoaderAware {
 
   @Override
diff --git a/solr/core/src/java/org/apache/solr/analysis/CzechStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/CzechStemFilterFactory.java
index 6229d8e..259fe72 100644
--- a/solr/core/src/java/org/apache/solr/analysis/CzechStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/CzechStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.cz.CzechStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  *  Factory for {@link CzechStemFilter}.
@@ -31,7 +32,7 @@ import org.apache.lucene.analysis.cz.CzechStemFilter;
  *   &lt;/analyzer&gt;
  * &lt;/fieldType&gt;</pre>
  */
-public class CzechStemFilterFactory extends BaseTokenFilterFactory {
+public class CzechStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new CzechStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/DelimitedPayloadTokenFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/DelimitedPayloadTokenFilterFactory.java
index bf7e90b..93599e6 100644
--- a/solr/core/src/java/org/apache/solr/analysis/DelimitedPayloadTokenFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/DelimitedPayloadTokenFilterFactory.java
@@ -22,8 +22,10 @@ import org.apache.lucene.analysis.payloads.PayloadEncoder;
 import org.apache.lucene.analysis.payloads.FloatEncoder;
 import org.apache.lucene.analysis.payloads.IntegerEncoder;
 import org.apache.lucene.analysis.payloads.IdentityEncoder;
+import org.apache.lucene.analysis.util.InitializationException;
 import org.apache.lucene.analysis.util.ResourceLoader;
 import org.apache.lucene.analysis.util.ResourceLoaderAware;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 import java.util.Map;
 
@@ -41,7 +43,7 @@ import java.util.Map;
  *
  * 
  */
-public class DelimitedPayloadTokenFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware {
+public class DelimitedPayloadTokenFilterFactory extends TokenFilterFactory implements ResourceLoaderAware {
   public static final String ENCODER_ATTR = "encoder";
   public static final String DELIMITER_ATTR = "delimiter";
 
diff --git a/solr/core/src/java/org/apache/solr/analysis/DictionaryCompoundWordTokenFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/DictionaryCompoundWordTokenFilterFactory.java
index fb728bc..e20821e 100644
--- a/solr/core/src/java/org/apache/solr/analysis/DictionaryCompoundWordTokenFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/DictionaryCompoundWordTokenFilterFactory.java
@@ -19,9 +19,7 @@
 
 package org.apache.solr.analysis;
 import org.apache.lucene.analysis.compound.*;
-import org.apache.lucene.analysis.util.CharArraySet;
-import org.apache.lucene.analysis.util.ResourceLoaderAware;
-import org.apache.lucene.analysis.util.ResourceLoader;
+import org.apache.lucene.analysis.util.*;
 import org.apache.lucene.analysis.TokenStream;
 
 import java.util.Map;
@@ -39,7 +37,7 @@ import java.io.IOException;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class DictionaryCompoundWordTokenFilterFactory extends BaseTokenFilterFactory  implements ResourceLoaderAware {
+public class DictionaryCompoundWordTokenFilterFactory extends TokenFilterFactory  implements ResourceLoaderAware {
   private CharArraySet dictionary;
   private String dictFile;
   private int minWordSize;
diff --git a/solr/core/src/java/org/apache/solr/analysis/DoubleMetaphoneFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/DoubleMetaphoneFilterFactory.java
index 5d87531..42a7e60 100644
--- a/solr/core/src/java/org/apache/solr/analysis/DoubleMetaphoneFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/DoubleMetaphoneFilterFactory.java
@@ -20,6 +20,7 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link DoubleMetaphoneFilter}.
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class DoubleMetaphoneFilterFactory extends BaseTokenFilterFactory 
+public class DoubleMetaphoneFilterFactory extends TokenFilterFactory
 {
   public static final String INJECT = "inject"; 
   public static final String MAX_CODE_LENGTH = "maxCodeLength"; 
diff --git a/solr/core/src/java/org/apache/solr/analysis/EdgeNGramFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/EdgeNGramFilterFactory.java
index 623f66a..e784e8e 100644
--- a/solr/core/src/java/org/apache/solr/analysis/EdgeNGramFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/EdgeNGramFilterFactory.java
@@ -20,6 +20,7 @@ package org.apache.solr.analysis;
 import java.util.Map;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Creates new instances of {@link EdgeNGramTokenFilter}.
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class EdgeNGramFilterFactory extends BaseTokenFilterFactory {
+public class EdgeNGramFilterFactory extends TokenFilterFactory {
   private int maxGramSize = 0;
 
   private int minGramSize = 0;
diff --git a/solr/core/src/java/org/apache/solr/analysis/EdgeNGramTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/EdgeNGramTokenizerFactory.java
index f246443..02d3be7 100755
--- a/solr/core/src/java/org/apache/solr/analysis/EdgeNGramTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/EdgeNGramTokenizerFactory.java
@@ -18,6 +18,7 @@ package org.apache.solr.analysis;
  */
 
 import org.apache.lucene.analysis.ngram.EdgeNGramTokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 
 import java.io.Reader;
 import java.util.Map;
@@ -32,7 +33,7 @@ import java.util.Map;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class EdgeNGramTokenizerFactory extends BaseTokenizerFactory {
+public class EdgeNGramTokenizerFactory extends TokenizerFactory {
     private int maxGramSize = 0;
 
     private int minGramSize = 0;
diff --git a/solr/core/src/java/org/apache/solr/analysis/ElisionFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/ElisionFilterFactory.java
index fb05d06..b2fc8c3 100644
--- a/solr/core/src/java/org/apache/solr/analysis/ElisionFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/ElisionFilterFactory.java
@@ -19,10 +19,8 @@
 
 package org.apache.solr.analysis;
 
-import org.apache.lucene.analysis.util.ResourceLoader;
-import org.apache.lucene.analysis.util.ResourceLoaderAware;
+import org.apache.lucene.analysis.util.*;
 import org.apache.lucene.analysis.fr.*;
-import org.apache.lucene.analysis.util.CharArraySet;
 
 import java.io.IOException;
 import org.apache.lucene.analysis.TokenStream;
@@ -40,7 +38,7 @@ import org.apache.lucene.analysis.TokenStream;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class ElisionFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware {
+public class ElisionFilterFactory extends TokenFilterFactory implements ResourceLoaderAware {
 
   private CharArraySet articles;
 
diff --git a/solr/core/src/java/org/apache/solr/analysis/EnglishMinimalStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/EnglishMinimalStemFilterFactory.java
index 98cdede..4bf2144 100644
--- a/solr/core/src/java/org/apache/solr/analysis/EnglishMinimalStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/EnglishMinimalStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.en.EnglishMinimalStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link EnglishMinimalStemFilter}.
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.en.EnglishMinimalStemFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class EnglishMinimalStemFilterFactory extends BaseTokenFilterFactory {
+public class EnglishMinimalStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new EnglishMinimalStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/EnglishPossessiveFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/EnglishPossessiveFilterFactory.java
index cefff90..8f28e4b 100644
--- a/solr/core/src/java/org/apache/solr/analysis/EnglishPossessiveFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/EnglishPossessiveFilterFactory.java
@@ -21,6 +21,7 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.en.EnglishPossessiveFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link EnglishPossessiveFilter}. 
@@ -34,7 +35,7 @@ import org.apache.lucene.analysis.en.EnglishPossessiveFilter;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class EnglishPossessiveFilterFactory extends BaseTokenFilterFactory {
+public class EnglishPossessiveFilterFactory extends TokenFilterFactory {
   
   @Override
   public void init(Map<String,String> args) {
diff --git a/solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory.java
index 1f1d4a1..495c448 100644
--- a/solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory.java
@@ -26,7 +26,6 @@ import java.nio.charset.CharsetDecoder;
 import java.nio.charset.CodingErrorAction;
 import java.text.ParseException;
 import java.util.List;
-import java.util.Map;
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenStream;
@@ -37,10 +36,9 @@ import org.apache.lucene.analysis.synonym.SynonymFilter;
 import org.apache.lucene.analysis.synonym.SynonymMap;
 import org.apache.lucene.analysis.synonym.SolrSynonymParser;
 import org.apache.lucene.analysis.synonym.WordnetSynonymParser;
+import org.apache.lucene.analysis.util.*;
 import org.apache.lucene.util.Version;
-import org.apache.lucene.analysis.util.ResourceLoader;
 import org.apache.solr.common.util.StrUtils;
-import org.apache.lucene.analysis.util.ResourceLoaderAware;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -50,7 +48,7 @@ import org.slf4j.LoggerFactory;
  */
 // NOTE: rename this to "SynonymFilterFactory" and nuke that delegator in Lucene 5.0!
 @Deprecated
-final class FSTSynonymFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware {
+final class FSTSynonymFilterFactory extends TokenFilterFactory implements ResourceLoaderAware {
 
   public static final Logger log = LoggerFactory.getLogger(FSTSynonymFilterFactory.class);
 
diff --git a/solr/core/src/java/org/apache/solr/analysis/FinnishLightStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/FinnishLightStemFilterFactory.java
index 308fe12..3c4ce08 100644
--- a/solr/core/src/java/org/apache/solr/analysis/FinnishLightStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/FinnishLightStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.fi.FinnishLightStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link FinnishLightStemFilter}.
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.fi.FinnishLightStemFilter;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class FinnishLightStemFilterFactory extends BaseTokenFilterFactory {
+public class FinnishLightStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new FinnishLightStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/FrenchLightStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/FrenchLightStemFilterFactory.java
index ef74a66..53f361d 100644
--- a/solr/core/src/java/org/apache/solr/analysis/FrenchLightStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/FrenchLightStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.fr.FrenchLightStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link FrenchLightStemFilter}.
@@ -33,7 +34,7 @@ import org.apache.lucene.analysis.fr.FrenchLightStemFilter;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class FrenchLightStemFilterFactory extends BaseTokenFilterFactory {
+public class FrenchLightStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new FrenchLightStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/FrenchMinimalStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/FrenchMinimalStemFilterFactory.java
index 98bce9a..4c1715f 100644
--- a/solr/core/src/java/org/apache/solr/analysis/FrenchMinimalStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/FrenchMinimalStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.fr.FrenchMinimalStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link FrenchMinimalStemFilter}.
@@ -33,7 +34,7 @@ import org.apache.lucene.analysis.fr.FrenchMinimalStemFilter;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class FrenchMinimalStemFilterFactory extends BaseTokenFilterFactory {
+public class FrenchMinimalStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new FrenchMinimalStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/GalicianMinimalStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/GalicianMinimalStemFilterFactory.java
index ffe731d..7744477 100644
--- a/solr/core/src/java/org/apache/solr/analysis/GalicianMinimalStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/GalicianMinimalStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.gl.GalicianMinimalStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link GalicianMinimalStemFilter}. 
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.gl.GalicianMinimalStemFilter;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class GalicianMinimalStemFilterFactory extends BaseTokenFilterFactory {
+public class GalicianMinimalStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new GalicianMinimalStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/GalicianStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/GalicianStemFilterFactory.java
index e6cf771..d529f5e 100644
--- a/solr/core/src/java/org/apache/solr/analysis/GalicianStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/GalicianStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.gl.GalicianStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link GalicianStemFilter}. 
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.gl.GalicianStemFilter;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class GalicianStemFilterFactory extends BaseTokenFilterFactory {
+public class GalicianStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new GalicianStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/GermanLightStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/GermanLightStemFilterFactory.java
index 111fff4..38bb1c4 100644
--- a/solr/core/src/java/org/apache/solr/analysis/GermanLightStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/GermanLightStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.de.GermanLightStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link GermanLightStemFilter}.
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.de.GermanLightStemFilter;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class GermanLightStemFilterFactory extends BaseTokenFilterFactory {
+public class GermanLightStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new GermanLightStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/GermanMinimalStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/GermanMinimalStemFilterFactory.java
index 2ccba34..8905231 100644
--- a/solr/core/src/java/org/apache/solr/analysis/GermanMinimalStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/GermanMinimalStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.de.GermanMinimalStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link GermanMinimalStemFilter}.
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.de.GermanMinimalStemFilter;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class GermanMinimalStemFilterFactory extends BaseTokenFilterFactory {
+public class GermanMinimalStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new GermanMinimalStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/GermanNormalizationFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/GermanNormalizationFilterFactory.java
index e050bc4..5ff7504 100644
--- a/solr/core/src/java/org/apache/solr/analysis/GermanNormalizationFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/GermanNormalizationFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.de.GermanNormalizationFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link GermanNormalizationFilter}.
@@ -31,7 +32,7 @@ import org.apache.lucene.analysis.de.GermanNormalizationFilter;
  *   &lt;/analyzer&gt;
  * &lt;/fieldType&gt;</pre> 
  */
-public class GermanNormalizationFilterFactory extends BaseTokenFilterFactory implements MultiTermAwareComponent {
+public class GermanNormalizationFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
 
   public TokenStream create(TokenStream input) {
     return new GermanNormalizationFilter(input);
diff --git a/solr/core/src/java/org/apache/solr/analysis/GermanStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/GermanStemFilterFactory.java
index 5e9088c..30951d2 100644
--- a/solr/core/src/java/org/apache/solr/analysis/GermanStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/GermanStemFilterFactory.java
@@ -21,6 +21,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.de.GermanStemFilter;
 import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link GermanStemFilter}. 
@@ -34,7 +35,7 @@ import org.apache.lucene.analysis.TokenStream;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class GermanStemFilterFactory extends BaseTokenFilterFactory {
+public class GermanStemFilterFactory extends TokenFilterFactory {
   public GermanStemFilter create(TokenStream in) {
     return new GermanStemFilter(in);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/GreekLowerCaseFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/GreekLowerCaseFilterFactory.java
index b79b835..acbe87a 100644
--- a/solr/core/src/java/org/apache/solr/analysis/GreekLowerCaseFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/GreekLowerCaseFilterFactory.java
@@ -22,6 +22,8 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.el.GreekLowerCaseFilter;
+import org.apache.lucene.analysis.util.InitializationException;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link GreekLowerCaseFilter}. 
@@ -34,8 +36,7 @@ import org.apache.lucene.analysis.el.GreekLowerCaseFilter;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class GreekLowerCaseFilterFactory extends BaseTokenFilterFactory implements MultiTermAwareComponent
-{
+public class GreekLowerCaseFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
  
   @Override
   public void init(Map<String, String> args) {
diff --git a/solr/core/src/java/org/apache/solr/analysis/GreekStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/GreekStemFilterFactory.java
index 90720da..93862ef 100644
--- a/solr/core/src/java/org/apache/solr/analysis/GreekStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/GreekStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.el.GreekStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link GreekStemFilter}. 
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.el.GreekStemFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class GreekStemFilterFactory extends BaseTokenFilterFactory {
+public class GreekStemFilterFactory extends TokenFilterFactory {
 
   public TokenStream create(TokenStream input) {
     return new GreekStemFilter(input);
diff --git a/solr/core/src/java/org/apache/solr/analysis/HTMLStripCharFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/HTMLStripCharFilterFactory.java
index 472f0b6..7d7be9e 100644
--- a/solr/core/src/java/org/apache/solr/analysis/HTMLStripCharFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/HTMLStripCharFilterFactory.java
@@ -20,6 +20,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.CharStream;
 import org.apache.lucene.analysis.charfilter.HTMLStripCharFilter;
+import org.apache.lucene.analysis.util.CharFilterFactory;
 
 import java.util.HashSet;
 import java.util.Map;
@@ -38,7 +39,7 @@ import java.util.regex.Pattern;
  * &lt;/fieldType&gt;</pre>
  *
  */
- public class HTMLStripCharFilterFactory extends BaseCharFilterFactory {
+ public class HTMLStripCharFilterFactory extends CharFilterFactory {
   
   Set<String> escapedTags = null;
   Pattern TAG_NAME_PATTERN = Pattern.compile("[^\\s,]+");
diff --git a/solr/core/src/java/org/apache/solr/analysis/HindiNormalizationFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/HindiNormalizationFilterFactory.java
index f745d33..f2f1f9d 100644
--- a/solr/core/src/java/org/apache/solr/analysis/HindiNormalizationFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/HindiNormalizationFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.hi.HindiNormalizationFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link HindiNormalizationFilter}. 
@@ -31,7 +32,7 @@ import org.apache.lucene.analysis.hi.HindiNormalizationFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class HindiNormalizationFilterFactory extends BaseTokenFilterFactory implements MultiTermAwareComponent {
+public class HindiNormalizationFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
   public TokenStream create(TokenStream input) {
     return new HindiNormalizationFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/HindiStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/HindiStemFilterFactory.java
index 657f04d..a172a8a 100644
--- a/solr/core/src/java/org/apache/solr/analysis/HindiStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/HindiStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.hi.HindiStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link HindiStemFilter}. 
@@ -31,7 +32,7 @@ import org.apache.lucene.analysis.hi.HindiStemFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class HindiStemFilterFactory extends BaseTokenFilterFactory {
+public class HindiStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new HindiStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/HungarianLightStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/HungarianLightStemFilterFactory.java
index c635f42..8412643 100644
--- a/solr/core/src/java/org/apache/solr/analysis/HungarianLightStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/HungarianLightStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.hu.HungarianLightStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link HungarianLightStemFilter}. 
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.hu.HungarianLightStemFilter;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class HungarianLightStemFilterFactory extends BaseTokenFilterFactory {
+public class HungarianLightStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new HungarianLightStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory.java
index df7e362..004c3c1 100644
--- a/solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory.java
@@ -24,8 +24,10 @@ import java.util.List;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.hunspell.HunspellDictionary;
 import org.apache.lucene.analysis.hunspell.HunspellStemFilter;
+import org.apache.lucene.analysis.util.InitializationException;
 import org.apache.lucene.analysis.util.ResourceLoader;
 import org.apache.lucene.analysis.util.ResourceLoaderAware;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * TokenFilterFactory that creates instances of {@link org.apache.lucene.analysis.hunspell.HunspellStemFilter}.
@@ -43,7 +45,7 @@ import org.apache.lucene.analysis.util.ResourceLoaderAware;
  * 
  * See <a href="http://wiki.apache.org/solr/Hunspell">http://wiki.apache.org/solr/Hunspell</a>
  */
-public class HunspellStemFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware {
+public class HunspellStemFilterFactory extends TokenFilterFactory implements ResourceLoaderAware {
   
   private static final String PARAM_DICTIONARY = "dictionary";
   private static final String PARAM_AFFIX = "affix";
diff --git a/solr/core/src/java/org/apache/solr/analysis/HyphenatedWordsFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/HyphenatedWordsFilterFactory.java
index 17a4ad5..80dcadf 100755
--- a/solr/core/src/java/org/apache/solr/analysis/HyphenatedWordsFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/HyphenatedWordsFilterFactory.java
@@ -19,7 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.miscellaneous.HyphenatedWordsFilter;
-import org.apache.solr.analysis.BaseTokenFilterFactory;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link HyphenatedWordsFilter}.
@@ -32,7 +32,7 @@ import org.apache.solr.analysis.BaseTokenFilterFactory;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class HyphenatedWordsFilterFactory extends BaseTokenFilterFactory {
+public class HyphenatedWordsFilterFactory extends TokenFilterFactory {
 	public HyphenatedWordsFilter create(TokenStream input) {
 		return new HyphenatedWordsFilter(input);
 	}
diff --git a/solr/core/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory.java
index 9472337..709a548 100644
--- a/solr/core/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/HyphenationCompoundWordTokenFilterFactory.java
@@ -22,10 +22,7 @@ import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase;
 import org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter;
 import org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;
-import org.apache.lucene.analysis.util.CharArraySet;
-import org.apache.solr.analysis.BaseTokenFilterFactory;
-import org.apache.lucene.analysis.util.ResourceLoader;
-import org.apache.lucene.analysis.util.ResourceLoaderAware;
+import org.apache.lucene.analysis.util.*;
 
 import java.util.Map;
 import java.io.InputStream;
@@ -58,7 +55,7 @@ import org.xml.sax.InputSource;
  *
  * @see HyphenationCompoundWordTokenFilter
  */
-public class HyphenationCompoundWordTokenFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware {
+public class HyphenationCompoundWordTokenFilterFactory extends TokenFilterFactory implements ResourceLoaderAware {
   private CharArraySet dictionary;
   private HyphenationTree hyphenator;
   private String dictFile;
diff --git a/solr/core/src/java/org/apache/solr/analysis/IndicNormalizationFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/IndicNormalizationFilterFactory.java
index cb116b1..b2eba80 100644
--- a/solr/core/src/java/org/apache/solr/analysis/IndicNormalizationFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/IndicNormalizationFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.in.IndicNormalizationFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link IndicNormalizationFilter}. 
@@ -31,7 +32,7 @@ import org.apache.lucene.analysis.in.IndicNormalizationFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class IndicNormalizationFilterFactory extends BaseTokenFilterFactory implements MultiTermAwareComponent {
+public class IndicNormalizationFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
   public TokenStream create(TokenStream input) {
     return new IndicNormalizationFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/IndonesianStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/IndonesianStemFilterFactory.java
index c2e2bc9..1bae0dc 100644
--- a/solr/core/src/java/org/apache/solr/analysis/IndonesianStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/IndonesianStemFilterFactory.java
@@ -21,6 +21,7 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.id.IndonesianStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link IndonesianStemFilter}. 
@@ -34,7 +35,7 @@ import org.apache.lucene.analysis.id.IndonesianStemFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class IndonesianStemFilterFactory extends BaseTokenFilterFactory {
+public class IndonesianStemFilterFactory extends TokenFilterFactory {
   private boolean stemDerivational = true;
 
   @Override
diff --git a/solr/core/src/java/org/apache/solr/analysis/InitializationException.java b/solr/core/src/java/org/apache/solr/analysis/InitializationException.java
deleted file mode 100644
index b5bffb6..0000000
--- a/solr/core/src/java/org/apache/solr/analysis/InitializationException.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package org.apache.solr.analysis;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Exception representing an error occurring during the initialization of a Factory.
- */
-public class InitializationException extends RuntimeException {
-
-  public InitializationException(String message) {
-    super(message);
-  }
-
-  public InitializationException(String message, Throwable cause) {
-    super(message, cause);
-  }
-}
diff --git a/solr/core/src/java/org/apache/solr/analysis/IrishLowerCaseFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/IrishLowerCaseFilterFactory.java
index 271145a..46f1bd3 100644
--- a/solr/core/src/java/org/apache/solr/analysis/IrishLowerCaseFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/IrishLowerCaseFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.ga.IrishLowerCaseFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link IrishLowerCaseFilter}. 
@@ -31,7 +32,7 @@ import org.apache.lucene.analysis.ga.IrishLowerCaseFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class IrishLowerCaseFilterFactory extends BaseTokenFilterFactory implements MultiTermAwareComponent {
+public class IrishLowerCaseFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
 
   @Override
   public TokenStream create(TokenStream input) {
diff --git a/solr/core/src/java/org/apache/solr/analysis/ItalianLightStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/ItalianLightStemFilterFactory.java
index c0d9ede..c895d42 100644
--- a/solr/core/src/java/org/apache/solr/analysis/ItalianLightStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/ItalianLightStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.it.ItalianLightStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link ItalianLightStemFilter}. 
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.it.ItalianLightStemFilter;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class ItalianLightStemFilterFactory extends BaseTokenFilterFactory {
+public class ItalianLightStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new ItalianLightStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/JapaneseBaseFormFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/JapaneseBaseFormFilterFactory.java
index 1d36622..0ece745 100644
--- a/solr/core/src/java/org/apache/solr/analysis/JapaneseBaseFormFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/JapaneseBaseFormFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.ja.JapaneseBaseFormFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link org.apache.lucene.analysis.ja.JapaneseBaseFormFilter}.
@@ -31,7 +32,7 @@ import org.apache.lucene.analysis.ja.JapaneseBaseFormFilter;
  * &lt;/fieldType&gt;
  * </pre>
  */
-public class JapaneseBaseFormFilterFactory extends BaseTokenFilterFactory {
+public class JapaneseBaseFormFilterFactory extends TokenFilterFactory {
 
   @Override
   public TokenStream create(TokenStream input) {
diff --git a/solr/core/src/java/org/apache/solr/analysis/JapaneseKatakanaStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/JapaneseKatakanaStemFilterFactory.java
index 8226cfd..09ffed7 100644
--- a/solr/core/src/java/org/apache/solr/analysis/JapaneseKatakanaStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/JapaneseKatakanaStemFilterFactory.java
@@ -19,6 +19,8 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.ja.JapaneseKatakanaStemFilter;
+import org.apache.lucene.analysis.util.InitializationException;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 import java.util.Map;
 
@@ -34,7 +36,7 @@ import java.util.Map;
  * &lt;/fieldType&gt;
  * </pre>
  */
-public class JapaneseKatakanaStemFilterFactory extends BaseTokenFilterFactory {
+public class JapaneseKatakanaStemFilterFactory extends TokenFilterFactory {
   private static final String MINIMUM_LENGTH_PARAM = "minimumLength";
   private int minimumLength;
   
diff --git a/solr/core/src/java/org/apache/solr/analysis/JapanesePartOfSpeechStopFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/JapanesePartOfSpeechStopFilterFactory.java
index f3ff2b0..e2761b5 100644
--- a/solr/core/src/java/org/apache/solr/analysis/JapanesePartOfSpeechStopFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/JapanesePartOfSpeechStopFilterFactory.java
@@ -23,9 +23,7 @@ import java.util.Set;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.ja.JapanesePartOfSpeechStopFilter;
-import org.apache.lucene.analysis.util.CharArraySet;
-import org.apache.lucene.analysis.util.ResourceLoader;
-import org.apache.lucene.analysis.util.ResourceLoaderAware;
+import org.apache.lucene.analysis.util.*;
 
 /**
  * Factory for {@link org.apache.lucene.analysis.ja.JapanesePartOfSpeechStopFilter}.
@@ -40,7 +38,7 @@ import org.apache.lucene.analysis.util.ResourceLoaderAware;
  * &lt;/fieldType&gt;
  * </pre>
  */
-public class JapanesePartOfSpeechStopFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware  {
+public class JapanesePartOfSpeechStopFilterFactory extends TokenFilterFactory implements ResourceLoaderAware  {
   private boolean enablePositionIncrements;
   private Set<String> stopTags;
 
diff --git a/solr/core/src/java/org/apache/solr/analysis/JapaneseReadingFormFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/JapaneseReadingFormFilterFactory.java
index 7b99c71..18bcf7b 100644
--- a/solr/core/src/java/org/apache/solr/analysis/JapaneseReadingFormFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/JapaneseReadingFormFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.ja.JapaneseReadingFormFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 import java.util.Map;
 
@@ -34,7 +35,7 @@ import java.util.Map;
  * &lt;/fieldType&gt;
  * </pre>
  */
-public class JapaneseReadingFormFilterFactory extends BaseTokenFilterFactory {
+public class JapaneseReadingFormFilterFactory extends TokenFilterFactory {
   private static final String ROMAJI_PARAM = "useRomaji";
   private boolean useRomaji;
   
diff --git a/solr/core/src/java/org/apache/solr/analysis/JapaneseTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/JapaneseTokenizerFactory.java
index 174b73a..dd5aa90 100644
--- a/solr/core/src/java/org/apache/solr/analysis/JapaneseTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/JapaneseTokenizerFactory.java
@@ -30,6 +30,8 @@ import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.ja.JapaneseTokenizer;
 import org.apache.lucene.analysis.ja.JapaneseTokenizer.Mode;
 import org.apache.lucene.analysis.ja.dict.UserDictionary;
+import org.apache.lucene.analysis.util.InitializationException;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.analysis.util.ResourceLoader;
 import org.apache.lucene.analysis.util.ResourceLoaderAware;
@@ -49,7 +51,7 @@ import org.apache.lucene.analysis.util.ResourceLoaderAware;
  * &lt;/fieldType&gt;
  * </pre>
  */
-public class JapaneseTokenizerFactory extends BaseTokenizerFactory implements ResourceLoaderAware {
+public class JapaneseTokenizerFactory extends TokenizerFactory implements ResourceLoaderAware {
   private static final String MODE = "mode";
   
   private static final String USER_DICT_PATH = "userDictionary";
diff --git a/solr/core/src/java/org/apache/solr/analysis/KStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/KStemFilterFactory.java
index efaeec4..42d2f0d 100644
--- a/solr/core/src/java/org/apache/solr/analysis/KStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/KStemFilterFactory.java
@@ -20,11 +20,12 @@ package org.apache.solr.analysis;
 import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.en.KStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link KStemFilter}
  */
-public class KStemFilterFactory extends BaseTokenFilterFactory {
+public class KStemFilterFactory extends TokenFilterFactory {
 
   public TokenFilter create(TokenStream input) {
     return new KStemFilter(input);
diff --git a/solr/core/src/java/org/apache/solr/analysis/KeepWordFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/KeepWordFilterFactory.java
index a77be20..8545079 100644
--- a/solr/core/src/java/org/apache/solr/analysis/KeepWordFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/KeepWordFilterFactory.java
@@ -17,11 +17,9 @@
 
 package org.apache.solr.analysis;
 
-import org.apache.lucene.analysis.util.ResourceLoader;
-import org.apache.lucene.analysis.util.ResourceLoaderAware;
+import org.apache.lucene.analysis.util.*;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.miscellaneous.KeepWordFilter;
-import org.apache.lucene.analysis.util.CharArraySet;
 
 import java.util.Map;
 import java.util.Set;
@@ -38,7 +36,7 @@ import java.io.IOException;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class KeepWordFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware {
+public class KeepWordFilterFactory extends TokenFilterFactory implements ResourceLoaderAware {
 
   @Override
   public void init(Map<String,String> args) {
diff --git a/solr/core/src/java/org/apache/solr/analysis/KeywordMarkerFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/KeywordMarkerFilterFactory.java
index ffea9f9..f2b55ad 100644
--- a/solr/core/src/java/org/apache/solr/analysis/KeywordMarkerFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/KeywordMarkerFilterFactory.java
@@ -3,10 +3,8 @@ package org.apache.solr.analysis;
 import java.io.IOException;
 
 import org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilter;
-import org.apache.lucene.analysis.util.CharArraySet;
+import org.apache.lucene.analysis.util.*;
 import org.apache.lucene.analysis.TokenStream;
-import org.apache.lucene.analysis.util.ResourceLoader;
-import org.apache.lucene.analysis.util.ResourceLoaderAware;
 
 /**
  * Licensed to the Apache Software Foundation (ASF) under one or more
@@ -36,7 +34,7 @@ import org.apache.lucene.analysis.util.ResourceLoaderAware;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class KeywordMarkerFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware {
+public class KeywordMarkerFilterFactory extends TokenFilterFactory implements ResourceLoaderAware {
   public static final String PROTECTED_TOKENS = "protected";
   private CharArraySet protectedWords;
   private boolean ignoreCase;
diff --git a/solr/core/src/java/org/apache/solr/analysis/KeywordTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/KeywordTokenizerFactory.java
index 8f70f9e..065f413 100644
--- a/solr/core/src/java/org/apache/solr/analysis/KeywordTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/KeywordTokenizerFactory.java
@@ -18,6 +18,7 @@
 package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.core.KeywordTokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 
 import java.io.Reader;
 
@@ -31,7 +32,7 @@ import java.io.Reader;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class KeywordTokenizerFactory extends BaseTokenizerFactory {
+public class KeywordTokenizerFactory extends TokenizerFactory {
   public KeywordTokenizer create(Reader input) {
     return new KeywordTokenizer(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/LatvianStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/LatvianStemFilterFactory.java
index 5dca133..f008846 100644
--- a/solr/core/src/java/org/apache/solr/analysis/LatvianStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/LatvianStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.lv.LatvianStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link LatvianStemFilter}. 
@@ -31,7 +32,7 @@ import org.apache.lucene.analysis.lv.LatvianStemFilter;
  *   &lt;/analyzer&gt;
  * &lt;/fieldType&gt;</pre>
  */
-public class LatvianStemFilterFactory extends BaseTokenFilterFactory {
+public class LatvianStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new LatvianStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilterFactory.java
index 01888ba..60c506b 100644
--- a/solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
  */
 
 import org.apache.lucene.analysis.CharStream;
+import org.apache.lucene.analysis.util.CharFilterFactory;
 
 /**
  * Factory for {@link LegacyHTMLStripCharFilter}.
@@ -49,7 +50,7 @@ import org.apache.lucene.analysis.CharStream;
  * @deprecated use {@link HTMLStripCharFilterFactory}
  */
 @Deprecated
-public class LegacyHTMLStripCharFilterFactory extends BaseCharFilterFactory {
+public class LegacyHTMLStripCharFilterFactory extends CharFilterFactory {
 
   public LegacyHTMLStripCharFilter create(CharStream input) {
     return new LegacyHTMLStripCharFilter(input);
diff --git a/solr/core/src/java/org/apache/solr/analysis/LengthFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/LengthFilterFactory.java
index dc28d67..ad458e1 100644
--- a/solr/core/src/java/org/apache/solr/analysis/LengthFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/LengthFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.miscellaneous.LengthFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 import java.util.Map;
 
@@ -33,7 +34,7 @@ import java.util.Map;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class LengthFilterFactory extends BaseTokenFilterFactory {
+public class LengthFilterFactory extends TokenFilterFactory {
   int min,max;
   boolean enablePositionIncrements;
   public static final String MIN_KEY = "min";
diff --git a/solr/core/src/java/org/apache/solr/analysis/LetterTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/LetterTokenizerFactory.java
index e067d53..63c6ba4 100644
--- a/solr/core/src/java/org/apache/solr/analysis/LetterTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/LetterTokenizerFactory.java
@@ -18,6 +18,7 @@
 package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.core.LetterTokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 
 import java.io.Reader;
 import java.util.Map;
@@ -32,7 +33,7 @@ import java.util.Map;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class LetterTokenizerFactory extends BaseTokenizerFactory {
+public class LetterTokenizerFactory extends TokenizerFactory {
 
   @Override
   public void init(Map<String,String> args) {
diff --git a/solr/core/src/java/org/apache/solr/analysis/LimitTokenCountFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/LimitTokenCountFilterFactory.java
index b4c0bce..0b4684c 100644
--- a/solr/core/src/java/org/apache/solr/analysis/LimitTokenCountFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/LimitTokenCountFilterFactory.java
@@ -21,6 +21,7 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link LimitTokenCountFilter}. 
@@ -33,7 +34,7 @@ import org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class LimitTokenCountFilterFactory extends BaseTokenFilterFactory {
+public class LimitTokenCountFilterFactory extends TokenFilterFactory {
 
   int maxTokenCount;
 
diff --git a/solr/core/src/java/org/apache/solr/analysis/LowerCaseFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/LowerCaseFilterFactory.java
index f7da154..27d8afe 100644
--- a/solr/core/src/java/org/apache/solr/analysis/LowerCaseFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/LowerCaseFilterFactory.java
@@ -21,6 +21,7 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.core.LowerCaseFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link LowerCaseFilter}. 
@@ -33,7 +34,7 @@ import org.apache.lucene.analysis.core.LowerCaseFilter;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class LowerCaseFilterFactory extends BaseTokenFilterFactory implements MultiTermAwareComponent {
+public class LowerCaseFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
   @Override
   public void init(Map<String,String> args) {
     super.init(args);
diff --git a/solr/core/src/java/org/apache/solr/analysis/LowerCaseTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/LowerCaseTokenizerFactory.java
index 7975e8d..6b620f0 100644
--- a/solr/core/src/java/org/apache/solr/analysis/LowerCaseTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/LowerCaseTokenizerFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.core.LowerCaseFilter;
 import org.apache.lucene.analysis.core.LowerCaseTokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 
 import java.io.Reader;
 import java.util.Map;
@@ -33,7 +34,7 @@ import java.util.Map;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class LowerCaseTokenizerFactory extends BaseTokenizerFactory implements MultiTermAwareComponent {
+public class LowerCaseTokenizerFactory extends TokenizerFactory implements MultiTermAwareComponent {
   @Override
   public void init(Map<String,String> args) {
     super.init(args);
diff --git a/solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory.java
index 1542d94..35d2f3a 100644
--- a/solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory.java
@@ -27,6 +27,8 @@ import java.util.regex.Pattern;
 import org.apache.lucene.analysis.CharStream;
 import org.apache.lucene.analysis.charfilter.MappingCharFilter;
 import org.apache.lucene.analysis.charfilter.NormalizeCharMap;
+import org.apache.lucene.analysis.util.CharFilterFactory;
+import org.apache.lucene.analysis.util.InitializationException;
 import org.apache.lucene.analysis.util.ResourceLoader;
 import org.apache.solr.common.util.StrUtils;
 import org.apache.lucene.analysis.util.ResourceLoaderAware;
@@ -45,7 +47,7 @@ import org.apache.lucene.analysis.util.ResourceLoaderAware;
  * @since Solr 1.4
  *
  */
-public class MappingCharFilterFactory extends BaseCharFilterFactory implements
+public class MappingCharFilterFactory extends CharFilterFactory implements
     ResourceLoaderAware, MultiTermAwareComponent {
 
   protected NormalizeCharMap normMap;
diff --git a/solr/core/src/java/org/apache/solr/analysis/NGramFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/NGramFilterFactory.java
index 6dc5eae..2c9ae79 100644
--- a/solr/core/src/java/org/apache/solr/analysis/NGramFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/NGramFilterFactory.java
@@ -20,6 +20,7 @@ package org.apache.solr.analysis;
 import java.util.Map;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.ngram.NGramTokenFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link NGramTokenFilter}.
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.ngram.NGramTokenFilter;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class NGramFilterFactory extends BaseTokenFilterFactory {
+public class NGramFilterFactory extends TokenFilterFactory {
   private int maxGramSize = 0;
 
   private int minGramSize = 0;
diff --git a/solr/core/src/java/org/apache/solr/analysis/NGramTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/NGramTokenizerFactory.java
index 1b77523..9f6fc62 100755
--- a/solr/core/src/java/org/apache/solr/analysis/NGramTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/NGramTokenizerFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.ngram.NGramTokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 
 import java.io.Reader;
 import java.util.Map;
@@ -33,7 +34,7 @@ import java.util.Map;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class NGramTokenizerFactory extends BaseTokenizerFactory {
+public class NGramTokenizerFactory extends TokenizerFactory {
     private int maxGramSize = 0;
     private int minGramSize = 0;
     
diff --git a/solr/core/src/java/org/apache/solr/analysis/NorwegianLightStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/NorwegianLightStemFilterFactory.java
index b700400..674d971 100644
--- a/solr/core/src/java/org/apache/solr/analysis/NorwegianLightStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/NorwegianLightStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.no.NorwegianLightStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link NorwegianLightStemFilter}.
@@ -31,7 +32,7 @@ import org.apache.lucene.analysis.no.NorwegianLightStemFilter;
  *   &lt;/analyzer&gt;
  * &lt;/fieldType&gt;</pre>
  */
-public class NorwegianLightStemFilterFactory extends BaseTokenFilterFactory {
+public class NorwegianLightStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new NorwegianLightStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/NorwegianMinimalStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/NorwegianMinimalStemFilterFactory.java
index 1a1965c..3c8ab45 100644
--- a/solr/core/src/java/org/apache/solr/analysis/NorwegianMinimalStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/NorwegianMinimalStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.no.NorwegianMinimalStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link NorwegianMinimalStemFilter}.
@@ -31,7 +32,7 @@ import org.apache.lucene.analysis.no.NorwegianMinimalStemFilter;
  *   &lt;/analyzer&gt;
  * &lt;/fieldType&gt;</pre>
  */
-public class NorwegianMinimalStemFilterFactory extends BaseTokenFilterFactory {
+public class NorwegianMinimalStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new NorwegianMinimalStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/NumericPayloadTokenFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/NumericPayloadTokenFilterFactory.java
index 21922e1..574c482 100644
--- a/solr/core/src/java/org/apache/solr/analysis/NumericPayloadTokenFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/NumericPayloadTokenFilterFactory.java
@@ -21,6 +21,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.payloads.NumericPayloadTokenFilter;
 import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 import java.util.Map;
 
 /** 
@@ -34,7 +35,7 @@ import java.util.Map;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class NumericPayloadTokenFilterFactory extends BaseTokenFilterFactory {
+public class NumericPayloadTokenFilterFactory extends TokenFilterFactory {
   private float payload;
   private String typeMatch;
   @Override
diff --git a/solr/core/src/java/org/apache/solr/analysis/PathHierarchyTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/PathHierarchyTokenizerFactory.java
index 39a86d3..2adfc83 100644
--- a/solr/core/src/java/org/apache/solr/analysis/PathHierarchyTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/PathHierarchyTokenizerFactory.java
@@ -22,6 +22,8 @@ import java.util.Map;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.path.PathHierarchyTokenizer;
 import org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer;
+import org.apache.lucene.analysis.util.InitializationException;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 
 
 /**
@@ -34,7 +36,7 @@ import org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class PathHierarchyTokenizerFactory extends BaseTokenizerFactory {
+public class PathHierarchyTokenizerFactory extends TokenizerFactory {
   
   private char delimiter;
   private char replacement;
diff --git a/solr/core/src/java/org/apache/solr/analysis/PatternReplaceCharFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/PatternReplaceCharFilterFactory.java
index 41e50e1..c0a5dfa 100644
--- a/solr/core/src/java/org/apache/solr/analysis/PatternReplaceCharFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/PatternReplaceCharFilterFactory.java
@@ -23,6 +23,8 @@ import java.util.regex.PatternSyntaxException;
 
 import org.apache.lucene.analysis.CharStream;
 import org.apache.lucene.analysis.pattern.PatternReplaceCharFilter;
+import org.apache.lucene.analysis.util.CharFilterFactory;
+import org.apache.lucene.analysis.util.InitializationException;
 
 /**
  * Factory for {@link PatternReplaceCharFilter}. 
@@ -38,7 +40,7 @@ import org.apache.lucene.analysis.pattern.PatternReplaceCharFilter;
  *
  * @since Solr 3.1
  */
-public class PatternReplaceCharFilterFactory extends BaseCharFilterFactory {
+public class PatternReplaceCharFilterFactory extends CharFilterFactory {
   
   private Pattern p;
   private String replacement;
diff --git a/solr/core/src/java/org/apache/solr/analysis/PatternReplaceFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/PatternReplaceFilterFactory.java
index b38d361..2883a7b 100644
--- a/solr/core/src/java/org/apache/solr/analysis/PatternReplaceFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/PatternReplaceFilterFactory.java
@@ -18,6 +18,8 @@
 package org.apache.solr.analysis;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.pattern.PatternReplaceFilter;
+import org.apache.lucene.analysis.util.InitializationException;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 import java.util.Map;
 import java.util.regex.Pattern;
@@ -36,7 +38,7 @@ import java.util.regex.PatternSyntaxException;
  *
  * @see PatternReplaceFilter
  */
-public class PatternReplaceFilterFactory extends BaseTokenFilterFactory {
+public class PatternReplaceFilterFactory extends TokenFilterFactory {
   Pattern p;
   String replacement;
   boolean all = true;
diff --git a/solr/core/src/java/org/apache/solr/analysis/PatternTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/PatternTokenizerFactory.java
index 7b52987..d5b005a 100644
--- a/solr/core/src/java/org/apache/solr/analysis/PatternTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/PatternTokenizerFactory.java
@@ -24,6 +24,8 @@ import java.util.regex.Pattern;
 
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.pattern.PatternTokenizer;
+import org.apache.lucene.analysis.util.InitializationException;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 
 
 /**
@@ -63,7 +65,7 @@ import org.apache.lucene.analysis.pattern.PatternTokenizer;
  * @since solr1.2
  *
  */
-public class PatternTokenizerFactory extends BaseTokenizerFactory 
+public class PatternTokenizerFactory extends TokenizerFactory
 {
   public static final String PATTERN = "pattern";
   public static final String GROUP = "group";
diff --git a/solr/core/src/java/org/apache/solr/analysis/PersianCharFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/PersianCharFilterFactory.java
index 226903e..9fcd089 100644
--- a/solr/core/src/java/org/apache/solr/analysis/PersianCharFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/PersianCharFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.CharStream;
 import org.apache.lucene.analysis.fa.PersianCharFilter;
+import org.apache.lucene.analysis.util.CharFilterFactory;
 
 /**
  * Factory for {@link PersianCharFilter}.
@@ -31,7 +32,7 @@ import org.apache.lucene.analysis.fa.PersianCharFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class PersianCharFilterFactory extends BaseCharFilterFactory implements MultiTermAwareComponent {
+public class PersianCharFilterFactory extends CharFilterFactory implements MultiTermAwareComponent {
 
   @Override
   public CharStream create(CharStream input) {
diff --git a/solr/core/src/java/org/apache/solr/analysis/PersianNormalizationFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/PersianNormalizationFilterFactory.java
index 8ce311b..81f1860 100644
--- a/solr/core/src/java/org/apache/solr/analysis/PersianNormalizationFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/PersianNormalizationFilterFactory.java
@@ -21,6 +21,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.fa.PersianNormalizationFilter;
 import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link PersianNormalizationFilter}.
@@ -34,7 +35,7 @@ import org.apache.lucene.analysis.TokenStream;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class PersianNormalizationFilterFactory extends BaseTokenFilterFactory implements MultiTermAwareComponent {
+public class PersianNormalizationFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
   public PersianNormalizationFilter create(TokenStream input) {
     return new PersianNormalizationFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory.java
index f307975..c107b77 100644
--- a/solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory.java
@@ -27,6 +27,8 @@ import org.apache.commons.codec.Encoder;
 import org.apache.commons.codec.language.*;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.phonetic.PhoneticFilter;
+import org.apache.lucene.analysis.util.InitializationException;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link PhoneticFilter}.
@@ -55,7 +57,7 @@ import org.apache.lucene.analysis.phonetic.PhoneticFilter;
  * 
  * @see PhoneticFilter
  */
-public class PhoneticFilterFactory extends BaseTokenFilterFactory 
+public class PhoneticFilterFactory extends TokenFilterFactory
 {
   public static final String ENCODER = "encoder";
   public static final String INJECT = "inject"; // boolean
diff --git a/solr/core/src/java/org/apache/solr/analysis/PorterStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/PorterStemFilterFactory.java
index 64f0afb..04b0dcb 100644
--- a/solr/core/src/java/org/apache/solr/analysis/PorterStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/PorterStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.en.PorterStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link PorterStemFilter}.
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.en.PorterStemFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class PorterStemFilterFactory extends BaseTokenFilterFactory {
+public class PorterStemFilterFactory extends TokenFilterFactory {
   public PorterStemFilter create(TokenStream input) {
     return new PorterStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/PortugueseLightStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/PortugueseLightStemFilterFactory.java
index 3da115a..89c3a05 100644
--- a/solr/core/src/java/org/apache/solr/analysis/PortugueseLightStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/PortugueseLightStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.pt.PortugueseLightStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link PortugueseLightStemFilter}.
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.pt.PortugueseLightStemFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class PortugueseLightStemFilterFactory extends BaseTokenFilterFactory {
+public class PortugueseLightStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new PortugueseLightStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/PortugueseMinimalStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/PortugueseMinimalStemFilterFactory.java
index 21aad29..57f86d6 100644
--- a/solr/core/src/java/org/apache/solr/analysis/PortugueseMinimalStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/PortugueseMinimalStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.pt.PortugueseMinimalStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link PortugueseMinimalStemFilter}.
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.pt.PortugueseMinimalStemFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class PortugueseMinimalStemFilterFactory extends BaseTokenFilterFactory {
+public class PortugueseMinimalStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new PortugueseMinimalStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/PortugueseStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/PortugueseStemFilterFactory.java
index df0477b..9b0f9b7 100644
--- a/solr/core/src/java/org/apache/solr/analysis/PortugueseStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/PortugueseStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.pt.PortugueseStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link PortugueseStemFilter}. 
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.pt.PortugueseStemFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class PortugueseStemFilterFactory extends BaseTokenFilterFactory {
+public class PortugueseStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new PortugueseStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/PositionFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/PositionFilterFactory.java
index f304809..444503a 100644
--- a/solr/core/src/java/org/apache/solr/analysis/PositionFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/PositionFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.position.PositionFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 import java.util.Map;
 
@@ -38,7 +39,7 @@ import java.util.Map;
  * @see org.apache.lucene.analysis.position.PositionFilter
  * @since solr 1.4
  */
-public class PositionFilterFactory extends BaseTokenFilterFactory {
+public class PositionFilterFactory extends TokenFilterFactory {
   private int positionIncrement;
 
   @Override
diff --git a/solr/core/src/java/org/apache/solr/analysis/RemoveDuplicatesTokenFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/RemoveDuplicatesTokenFilterFactory.java
index e26ae5f..56aefb2 100644
--- a/solr/core/src/java/org/apache/solr/analysis/RemoveDuplicatesTokenFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/RemoveDuplicatesTokenFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.miscellaneous.RemoveDuplicatesTokenFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link RemoveDuplicatesTokenFilter}.
@@ -31,7 +32,7 @@ import org.apache.lucene.analysis.miscellaneous.RemoveDuplicatesTokenFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class RemoveDuplicatesTokenFilterFactory extends BaseTokenFilterFactory {
+public class RemoveDuplicatesTokenFilterFactory extends TokenFilterFactory {
   public RemoveDuplicatesTokenFilter create(TokenStream input) {
     return new RemoveDuplicatesTokenFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/ReverseStringFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/ReverseStringFilterFactory.java
index 65d8f54..d23127a 100644
--- a/solr/core/src/java/org/apache/solr/analysis/ReverseStringFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/ReverseStringFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.reverse.ReverseStringFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link ReverseStringFilter}.
@@ -33,7 +34,7 @@ import org.apache.lucene.analysis.reverse.ReverseStringFilter;
  *
  * @since solr 1.4
  */
-public class ReverseStringFilterFactory extends BaseTokenFilterFactory {
+public class ReverseStringFilterFactory extends TokenFilterFactory {
   public ReverseStringFilter create(TokenStream in) {
     assureMatchVersion();
     return new ReverseStringFilter(luceneMatchVersion,in);
diff --git a/solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory.java
index 22cba33..22500fe 100644
--- a/solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory.java
@@ -20,6 +20,7 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.reverse.ReverseStringFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link ReversedWildcardFilter}-s. When this factory is
@@ -61,7 +62,7 @@ import org.apache.lucene.analysis.reverse.ReverseStringFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class ReversedWildcardFilterFactory extends BaseTokenFilterFactory {
+public class ReversedWildcardFilterFactory extends TokenFilterFactory {
   
   private char markerChar = ReverseStringFilter.START_OF_HEADING_MARKER;
   private boolean withOriginal;
diff --git a/solr/core/src/java/org/apache/solr/analysis/RussianLetterTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/RussianLetterTokenizerFactory.java
index dc3dae8..340dfc0 100644
--- a/solr/core/src/java/org/apache/solr/analysis/RussianLetterTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/RussianLetterTokenizerFactory.java
@@ -21,6 +21,8 @@ import java.io.Reader;
 import java.util.Map;
 
 import org.apache.lucene.analysis.ru.RussianLetterTokenizer;
+import org.apache.lucene.analysis.util.InitializationException;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -28,7 +30,7 @@ import org.slf4j.LoggerFactory;
  *  This tokenizer has no Russian-specific functionality.
  */
 @Deprecated
-public class RussianLetterTokenizerFactory extends BaseTokenizerFactory {
+public class RussianLetterTokenizerFactory extends TokenizerFactory {
 
   private static final Logger log = LoggerFactory.getLogger(RussianLetterTokenizerFactory.class);
 
diff --git a/solr/core/src/java/org/apache/solr/analysis/RussianLightStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/RussianLightStemFilterFactory.java
index 6a11a3c..0ff5d7c 100644
--- a/solr/core/src/java/org/apache/solr/analysis/RussianLightStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/RussianLightStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.ru.RussianLightStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link RussianLightStemFilter}.
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.ru.RussianLightStemFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class RussianLightStemFilterFactory extends BaseTokenFilterFactory {
+public class RussianLightStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new RussianLightStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/ShingleFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/ShingleFilterFactory.java
index 1d01f65..e1932d0 100644
--- a/solr/core/src/java/org/apache/solr/analysis/ShingleFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/ShingleFilterFactory.java
@@ -21,6 +21,8 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.shingle.ShingleFilter;
 import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.util.InitializationException;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 import java.util.Map;
 
@@ -36,7 +38,7 @@ import java.util.Map;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class ShingleFilterFactory extends BaseTokenFilterFactory {
+public class ShingleFilterFactory extends TokenFilterFactory {
   private int minShingleSize;
   private int maxShingleSize;
   private boolean outputUnigrams;
diff --git a/solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilterFactory.java
index 806869c..b898a03 100644
--- a/solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilterFactory.java
@@ -19,9 +19,8 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
-import org.apache.lucene.analysis.util.ResourceLoader;
+import org.apache.lucene.analysis.util.*;
 import org.apache.solr.common.util.StrUtils;
-import org.apache.lucene.analysis.util.ResourceLoaderAware;
 
 import java.io.File;
 import java.io.IOException;
@@ -29,7 +28,6 @@ import java.io.Reader;
 import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Map;
 
 /**
  * Factory for {@link SlowSynonymFilter} (only used with luceneMatchVersion < 3.4)
@@ -44,7 +42,7 @@ import java.util.Map;
  * @deprecated (3.4) use {@link SynonymFilterFactory} instead. only for precise index backwards compatibility. this factory will be removed in Lucene 5.0
  */
 @Deprecated
-final class SlowSynonymFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware {
+final class SlowSynonymFilterFactory extends TokenFilterFactory implements ResourceLoaderAware {
 
   public void inform(ResourceLoader loader) {
     String synonyms = args.get("synonyms");
diff --git a/solr/core/src/java/org/apache/solr/analysis/SlowSynonymMap.java b/solr/core/src/java/org/apache/solr/analysis/SlowSynonymMap.java
index bbc7ea5..8082281 100644
--- a/solr/core/src/java/org/apache/solr/analysis/SlowSynonymMap.java
+++ b/solr/core/src/java/org/apache/solr/analysis/SlowSynonymMap.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.Token;
 import org.apache.lucene.analysis.util.CharArrayMap;
+import org.apache.lucene.analysis.util.InitializationException;
 import org.apache.lucene.util.Version;
 
 import java.util.*;
diff --git a/solr/core/src/java/org/apache/solr/analysis/SnowballPorterFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/SnowballPorterFilterFactory.java
index 7856679..17711ff 100644
--- a/solr/core/src/java/org/apache/solr/analysis/SnowballPorterFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/SnowballPorterFilterFactory.java
@@ -23,9 +23,7 @@ import org.apache.lucene.analysis.miscellaneous.KeywordMarkerFilter;
 import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.snowball.SnowballFilter;
-import org.apache.lucene.analysis.util.CharArraySet;
-import org.apache.lucene.analysis.util.ResourceLoader;
-import org.apache.lucene.analysis.util.ResourceLoaderAware;
+import org.apache.lucene.analysis.util.*;
 import org.tartarus.snowball.SnowballProgram;
 
 /**
@@ -43,7 +41,7 @@ import org.tartarus.snowball.SnowballProgram;
  * 
  *
  */
-public class SnowballPorterFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware {
+public class SnowballPorterFilterFactory extends TokenFilterFactory implements ResourceLoaderAware {
   public static final String PROTECTED_TOKENS = "protected";
 
   private String language = "English";
diff --git a/solr/core/src/java/org/apache/solr/analysis/SpanishLightStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/SpanishLightStemFilterFactory.java
index 9e706cd..0f40a1c 100644
--- a/solr/core/src/java/org/apache/solr/analysis/SpanishLightStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/SpanishLightStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.es.SpanishLightStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link SpanishLightStemFilter}.
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.es.SpanishLightStemFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class SpanishLightStemFilterFactory extends BaseTokenFilterFactory {
+public class SpanishLightStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new SpanishLightStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/StandardFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/StandardFilterFactory.java
index 9c52108..1943a19 100644
--- a/solr/core/src/java/org/apache/solr/analysis/StandardFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/StandardFilterFactory.java
@@ -21,6 +21,7 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.standard.StandardFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link StandardFilter}.
@@ -33,7 +34,7 @@ import org.apache.lucene.analysis.standard.StandardFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class StandardFilterFactory extends BaseTokenFilterFactory {
+public class StandardFilterFactory extends TokenFilterFactory {
   @Override
   public void init(Map<String,String> args) {
     super.init(args);
diff --git a/solr/core/src/java/org/apache/solr/analysis/StandardTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/StandardTokenizerFactory.java
index 14a0900..b4fbd30 100644
--- a/solr/core/src/java/org/apache/solr/analysis/StandardTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/StandardTokenizerFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.analysis.standard.StandardTokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 
 import java.io.Reader;
 import java.util.Map;
@@ -34,7 +35,7 @@ import java.util.Map;
  *
  */
 
-public class StandardTokenizerFactory extends BaseTokenizerFactory {
+public class StandardTokenizerFactory extends TokenizerFactory {
   
   private int maxTokenLength;
   
diff --git a/solr/core/src/java/org/apache/solr/analysis/StemmerOverrideFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/StemmerOverrideFilterFactory.java
index 3a81101..e6e861d 100644
--- a/solr/core/src/java/org/apache/solr/analysis/StemmerOverrideFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/StemmerOverrideFilterFactory.java
@@ -22,10 +22,8 @@ import java.util.List;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.miscellaneous.StemmerOverrideFilter;
-import org.apache.lucene.analysis.util.CharArrayMap;
-import org.apache.lucene.analysis.util.ResourceLoader;
+import org.apache.lucene.analysis.util.*;
 import org.apache.solr.common.util.StrUtils;
-import org.apache.lucene.analysis.util.ResourceLoaderAware;
 
 /**
  * Factory for {@link StemmerOverrideFilter}.
@@ -38,7 +36,7 @@ import org.apache.lucene.analysis.util.ResourceLoaderAware;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class StemmerOverrideFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware {
+public class StemmerOverrideFilterFactory extends TokenFilterFactory implements ResourceLoaderAware {
   private CharArrayMap<String> dictionary = null;
   private boolean ignoreCase;
 
diff --git a/solr/core/src/java/org/apache/solr/analysis/StopFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/StopFilterFactory.java
index 5a0b7a6..4dd04b9 100644
--- a/solr/core/src/java/org/apache/solr/analysis/StopFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/StopFilterFactory.java
@@ -17,12 +17,10 @@
 
 package org.apache.solr.analysis;
 
-import org.apache.lucene.analysis.util.ResourceLoader;
-import org.apache.lucene.analysis.util.ResourceLoaderAware;
+import org.apache.lucene.analysis.util.*;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.core.StopAnalyzer;
 import org.apache.lucene.analysis.core.StopFilter;
-import org.apache.lucene.analysis.util.CharArraySet;
 
 import java.util.Map;
 import java.io.IOException;
@@ -39,7 +37,7 @@ import java.io.IOException;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class StopFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware {
+public class StopFilterFactory extends TokenFilterFactory implements ResourceLoaderAware {
 
   @Override
   public void init(Map<String,String> args) {
diff --git a/solr/core/src/java/org/apache/solr/analysis/SwedishLightStemFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/SwedishLightStemFilterFactory.java
index 2e208a4..119618e 100644
--- a/solr/core/src/java/org/apache/solr/analysis/SwedishLightStemFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/SwedishLightStemFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.sv.SwedishLightStemFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link SwedishLightStemFilter}.
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.sv.SwedishLightStemFilter;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class SwedishLightStemFilterFactory extends BaseTokenFilterFactory {
+public class SwedishLightStemFilterFactory extends TokenFilterFactory {
   public TokenStream create(TokenStream input) {
     return new SwedishLightStemFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory.java
index 4ee7c27..df0a93e 100644
--- a/solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory.java
@@ -21,9 +21,11 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.synonym.SynonymFilter;
+import org.apache.lucene.analysis.util.InitializationException;
 import org.apache.lucene.util.Version;
 import org.apache.lucene.analysis.util.ResourceLoader;
 import org.apache.lucene.analysis.util.ResourceLoaderAware;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link SynonymFilter}.
@@ -37,8 +39,8 @@ import org.apache.lucene.analysis.util.ResourceLoaderAware;
  *   &lt;/analyzer&gt;
  * &lt;/fieldType&gt;</pre>
  */
-public class SynonymFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware {
-  private BaseTokenFilterFactory delegator;
+public class SynonymFilterFactory extends TokenFilterFactory implements ResourceLoaderAware {
+  private TokenFilterFactory delegator;
 
   @Override
   public void init(Map<String,String> args) {
diff --git a/solr/core/src/java/org/apache/solr/analysis/ThaiWordFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/ThaiWordFilterFactory.java
index 3f4c366..474d89b 100644
--- a/solr/core/src/java/org/apache/solr/analysis/ThaiWordFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/ThaiWordFilterFactory.java
@@ -21,6 +21,7 @@ package org.apache.solr.analysis;
 import org.apache.lucene.analysis.th.ThaiWordFilter;
 
 import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link ThaiWordFilter}.
@@ -33,7 +34,7 @@ import org.apache.lucene.analysis.TokenStream;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class ThaiWordFilterFactory extends BaseTokenFilterFactory {
+public class ThaiWordFilterFactory extends TokenFilterFactory {
   public ThaiWordFilter create(TokenStream input) {
     assureMatchVersion();
     return new ThaiWordFilter(luceneMatchVersion, input);
diff --git a/solr/core/src/java/org/apache/solr/analysis/TokenFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/TokenFilterFactory.java
deleted file mode 100644
index 1b28299..0000000
--- a/solr/core/src/java/org/apache/solr/analysis/TokenFilterFactory.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.analysis;
-
-import org.apache.lucene.analysis.TokenStream;
-import org.apache.lucene.util.Version;
-
-import java.util.Map;
-
-/**
- * A <code>TokenFilterFactory</code> creates a 
- * <code>TokenFilter</code> to transform one <code>TokenStream</code> 
- * into another.
- *
- * <p>
- * TokenFilterFactories are registered for <code>FieldType</code>s with the
- * <code>IndexSchema</code> through the <code>schema.xml</code> file.
- * </p>
- * <p>
- * Example <code>schema.xml</code> entry to register a TokenFilterFactory 
- * implementation to transform tokens in a field of type "cool"
- * </p>
- * <pre>
- *  &lt;fieldtype name="cool" class="solr.TextField"&gt;
- *      &lt;analyzer&gt;
- *      ...
- *      &lt;filter class="foo.MyTokenFilterFactory"/&gt;
- *      ...
- * </pre>
- * <p>
- * A single instance of any registered TokenFilterFactory is created
- * via the default constructor and is reused for each FieldType.
- * </p>
- *
- */
-
-public interface TokenFilterFactory {
-  /** <code>init</code> will be called just once, immediately after creation.
-   * <p>The args are user-level initialization parameters that
-   * may be specified when declaring the factory in the
-   * schema.xml
-   */
-  public void init(Map<String,String> args);
-
-  public void setLuceneMatchVersion(Version luceneMatchVersion);
-  
-  /**
-   * Accessor method for reporting the args used to initialize this factory.
-   * <p>
-   * Implementations are <strong>strongly</strong> encouraged to return 
-   * the contents of the Map passed to to the init method
-   * </p>
-   */
-  public Map<String,String> getArgs();
-  
-  /** Transform the specified input TokenStream */
-  public TokenStream create(TokenStream input);
-}
-
diff --git a/solr/core/src/java/org/apache/solr/analysis/TokenOffsetPayloadTokenFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/TokenOffsetPayloadTokenFilterFactory.java
index f13dcde..9a5e3e9 100644
--- a/solr/core/src/java/org/apache/solr/analysis/TokenOffsetPayloadTokenFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/TokenOffsetPayloadTokenFilterFactory.java
@@ -21,6 +21,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.payloads.TokenOffsetPayloadTokenFilter;
 import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link TokenOffsetPayloadTokenFilter}.
@@ -33,7 +34,7 @@ import org.apache.lucene.analysis.TokenStream;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class TokenOffsetPayloadTokenFilterFactory extends BaseTokenFilterFactory {
+public class TokenOffsetPayloadTokenFilterFactory extends TokenFilterFactory {
   public TokenOffsetPayloadTokenFilter create(TokenStream input) {
     return new TokenOffsetPayloadTokenFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/TokenizerChain.java b/solr/core/src/java/org/apache/solr/analysis/TokenizerChain.java
index d8a5522..8643ec2 100644
--- a/solr/core/src/java/org/apache/solr/analysis/TokenizerChain.java
+++ b/solr/core/src/java/org/apache/solr/analysis/TokenizerChain.java
@@ -18,6 +18,9 @@
 package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.*;
+import org.apache.lucene.analysis.util.CharFilterFactory;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 
 import java.io.IOException;
 import java.io.Reader;
diff --git a/solr/core/src/java/org/apache/solr/analysis/TokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/TokenizerFactory.java
deleted file mode 100644
index 1c56eae..0000000
--- a/solr/core/src/java/org/apache/solr/analysis/TokenizerFactory.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.analysis;
-
-import java.io.*;
-import java.util.Map;
-import org.apache.lucene.analysis.*;
-import org.apache.lucene.util.Version;
-
-
-/**
- * A <code>TokenizerFactory</code> breaks up a stream of characters 
- * into tokens.
- *
- * <p>
- * TokenizerFactories are registered for <code>FieldType</code>s with the
- * <code>IndexSchema</code> through the <code>schema.xml</code> file.
- * </p>
- * <p>
- * Example <code>schema.xml</code> entry to register a TokenizerFactory 
- * implementation to tokenize fields of type "cool"
- * </p>
- * <pre>
- *  &lt;fieldtype name="cool" class="solr.TextField"&gt;
- *      &lt;analyzer&gt;
- *      &lt;tokenizer class="solr.StandardTokenizerFactory"/&gt;
- *      ...
- * </pre>
- * <p>
- * A single instance of any registered TokenizerFactory is created
- * via the default constructor and is reused for each FieldType.
- * </p>
- *
- */
-public interface TokenizerFactory {
-  /** <code>init</code> will be called just once, immediately after creation.
-   * <p>The args are user-level initialization parameters that
-   * may be specified when declaring a the factory in the
-   * schema.xml
-   */
-  public void init(Map<String,String> args);
-
-  public void setLuceneMatchVersion(Version luceneMatchVersion);
-  
-  /**
-   * Accessor method for reporting the args used to initialize this factory.
-   * <p>
-   * Implementations are <strong>strongly</strong> encouraged to return 
-   * the contents of the Map passed to to the init method
-   * </p>
-   */
-  public Map<String,String> getArgs();
-  
-  /** Creates a TokenStream of the specified input */
-  public Tokenizer create(Reader input);
-}
-
diff --git a/solr/core/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java
index b4d2564..e017811 100644
--- a/solr/core/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 import org.apache.lucene.analysis.NumericTokenStream;
 import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
 import org.apache.lucene.analysis.Tokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.schema.DateField;
 import static org.apache.solr.schema.TrieField.TrieTypes;
@@ -38,7 +39,7 @@ import java.io.Reader;
  * @see org.apache.solr.schema.TrieField
  * @since solr 1.4
  */
-public class TrieTokenizerFactory extends BaseTokenizerFactory {
+public class TrieTokenizerFactory extends TokenizerFactory {
   protected final int precisionStep;
   protected final TrieTypes type;
 
diff --git a/solr/core/src/java/org/apache/solr/analysis/TrimFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/TrimFilterFactory.java
index 345db66..917dd79 100644
--- a/solr/core/src/java/org/apache/solr/analysis/TrimFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/TrimFilterFactory.java
@@ -21,6 +21,8 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.miscellaneous.TrimFilter;
+import org.apache.lucene.analysis.util.InitializationException;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link TrimFilter}.
@@ -34,7 +36,7 @@ import org.apache.lucene.analysis.miscellaneous.TrimFilter;
  *
  * @see TrimFilter
  */
-public class TrimFilterFactory extends BaseTokenFilterFactory {
+public class TrimFilterFactory extends TokenFilterFactory {
   
   protected boolean updateOffsets = false;
   
diff --git a/solr/core/src/java/org/apache/solr/analysis/TurkishLowerCaseFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/TurkishLowerCaseFilterFactory.java
index b360434..d540199 100644
--- a/solr/core/src/java/org/apache/solr/analysis/TurkishLowerCaseFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/TurkishLowerCaseFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.tr.TurkishLowerCaseFilter;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link TurkishLowerCaseFilter}.
@@ -31,7 +32,7 @@ import org.apache.lucene.analysis.tr.TurkishLowerCaseFilter;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class TurkishLowerCaseFilterFactory extends BaseTokenFilterFactory  implements MultiTermAwareComponent {
+public class TurkishLowerCaseFilterFactory extends TokenFilterFactory  implements MultiTermAwareComponent {
   public TokenStream create(TokenStream input) {
     return new TurkishLowerCaseFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/TypeAsPayloadTokenFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/TypeAsPayloadTokenFilterFactory.java
index b06a9a1..550bcc9 100644
--- a/solr/core/src/java/org/apache/solr/analysis/TypeAsPayloadTokenFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/TypeAsPayloadTokenFilterFactory.java
@@ -21,6 +21,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilter;
 import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
  * Factory for {@link TypeAsPayloadTokenFilter}.
@@ -33,7 +34,7 @@ import org.apache.lucene.analysis.TokenStream;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class TypeAsPayloadTokenFilterFactory extends BaseTokenFilterFactory {
+public class TypeAsPayloadTokenFilterFactory extends TokenFilterFactory {
   public TypeAsPayloadTokenFilter create(TokenStream input) {
     return new TypeAsPayloadTokenFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory.java
index 0ee19b5..62c7912 100644
--- a/solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory.java
@@ -19,9 +19,11 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.core.TypeTokenFilter;
+import org.apache.lucene.analysis.util.InitializationException;
 import org.apache.lucene.analysis.util.ResourceLoader;
 import org.apache.solr.common.util.StrUtils;
 import org.apache.lucene.analysis.util.ResourceLoaderAware;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 import java.io.IOException;
 import java.util.HashSet;
@@ -39,7 +41,7 @@ import java.util.Set;
  *   &lt;/analyzer&gt;
  * &lt;/fieldType&gt;</pre>
  */
-public class TypeTokenFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware {
+public class TypeTokenFilterFactory extends TokenFilterFactory implements ResourceLoaderAware {
 
   @Override
   public void inform(ResourceLoader loader) {
diff --git a/solr/core/src/java/org/apache/solr/analysis/UAX29URLEmailTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/UAX29URLEmailTokenizerFactory.java
index 0e0bdf7..3a6a171 100644
--- a/solr/core/src/java/org/apache/solr/analysis/UAX29URLEmailTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/UAX29URLEmailTokenizerFactory.java
@@ -22,6 +22,7 @@ package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 
 import java.io.Reader;
 import java.util.Map;
@@ -38,7 +39,7 @@ import java.util.Map;
  * 
  */
 
-public class UAX29URLEmailTokenizerFactory extends BaseTokenizerFactory {
+public class UAX29URLEmailTokenizerFactory extends TokenizerFactory {
 
   private int maxTokenLength;
 
diff --git a/solr/core/src/java/org/apache/solr/analysis/WhitespaceTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/WhitespaceTokenizerFactory.java
index 0946e2a..dd1ef98 100644
--- a/solr/core/src/java/org/apache/solr/analysis/WhitespaceTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/WhitespaceTokenizerFactory.java
@@ -18,6 +18,7 @@
 package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.core.WhitespaceTokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 
 import java.io.Reader;
 import java.util.Map;
@@ -32,7 +33,7 @@ import java.util.Map;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class WhitespaceTokenizerFactory extends BaseTokenizerFactory {
+public class WhitespaceTokenizerFactory extends TokenizerFactory {
   @Override
   public void init(Map<String,String> args) {
     super.init(args);
diff --git a/solr/core/src/java/org/apache/solr/analysis/WikipediaTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/WikipediaTokenizerFactory.java
index 49df72a..a1eb583 100644
--- a/solr/core/src/java/org/apache/solr/analysis/WikipediaTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/WikipediaTokenizerFactory.java
@@ -20,6 +20,7 @@ package org.apache.solr.analysis;
 import java.io.Reader;
 
 import org.apache.lucene.analysis.Tokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 import org.apache.lucene.analysis.wikipedia.WikipediaTokenizer;
 
 /** 
@@ -32,7 +33,7 @@ import org.apache.lucene.analysis.wikipedia.WikipediaTokenizer;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class WikipediaTokenizerFactory extends BaseTokenizerFactory {
+public class WikipediaTokenizerFactory extends TokenizerFactory {
   // TODO: add support for WikipediaTokenizer's advanced options.
   public Tokenizer create(Reader input) {
     return new WikipediaTokenizer(input);
diff --git a/solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory.java
index 8cea6de..0cd5779 100644
--- a/solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory.java
@@ -20,10 +20,8 @@ package org.apache.solr.analysis;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;
 import org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator;
-import org.apache.lucene.analysis.util.CharArraySet;
+import org.apache.lucene.analysis.util.*;
 
-import org.apache.lucene.analysis.util.ResourceLoaderAware;
-import org.apache.lucene.analysis.util.ResourceLoader;
 import org.apache.solr.common.util.StrUtils;
 
 import java.util.ArrayList;
@@ -53,7 +51,7 @@ import static org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.*;
  * &lt;/fieldType&gt;</pre> 
  *
  */
-public class WordDelimiterFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware {
+public class WordDelimiterFilterFactory extends TokenFilterFactory implements ResourceLoaderAware {
   public static final String PROTECTED_TOKENS = "protected";
   public static final String TYPES = "types";
   
diff --git a/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java b/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
index 27e05e5..8cf3446 100644
--- a/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
+++ b/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
@@ -30,7 +30,10 @@ import java.net.URLClassLoader;
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
 
+import org.apache.lucene.analysis.util.CharFilterFactory;
 import org.apache.lucene.analysis.util.ResourceLoaderAware;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 import org.apache.solr.common.ResourceLoader;
 import org.apache.solr.handler.admin.CoreAdminHandler;
 import org.apache.solr.handler.component.ShardHandlerFactory;
@@ -47,9 +50,6 @@ import javax.naming.InitialContext;
 import javax.naming.NamingException;
 import javax.naming.NoInitialContextException;
 
-import org.apache.solr.analysis.CharFilterFactory;
-import org.apache.solr.analysis.TokenFilterFactory;
-import org.apache.solr.analysis.TokenizerFactory;
 import org.apache.solr.util.FileUtils;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.handler.component.SearchComponent;
diff --git a/solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java b/solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
index cae8372..b59b781 100644
--- a/solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
+++ b/solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
@@ -22,6 +22,9 @@ import org.apache.lucene.analysis.CharReader;
 import org.apache.lucene.analysis.CharStream;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.tokenattributes.*;
+import org.apache.lucene.analysis.util.CharFilterFactory;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.index.Payload;
 import org.apache.lucene.util.Attribute;
@@ -30,10 +33,7 @@ import org.apache.lucene.util.AttributeSource;
 import org.apache.lucene.util.AttributeReflector;
 import org.apache.lucene.util.CharsRef;
 import org.apache.lucene.util.ArrayUtil;
-import org.apache.solr.analysis.CharFilterFactory;
-import org.apache.solr.analysis.TokenFilterFactory;
 import org.apache.solr.analysis.TokenizerChain;
-import org.apache.solr.analysis.TokenizerFactory;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.common.util.SimpleOrderedMap;
 import org.apache.solr.common.SolrException;
diff --git a/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java b/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
index 0c38edf..5839edd 100644
--- a/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
@@ -23,6 +23,9 @@ import java.net.URL;
 import java.util.*;
 
 import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.util.CharFilterFactory;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.index.*;
@@ -33,10 +36,7 @@ import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
 import org.apache.lucene.util.PriorityQueue;
 import org.apache.lucene.util.UnicodeUtil;
-import org.apache.solr.analysis.CharFilterFactory;
-import org.apache.solr.analysis.TokenFilterFactory;
 import org.apache.solr.analysis.TokenizerChain;
-import org.apache.solr.analysis.TokenizerFactory;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.SolrException.ErrorCode;
 import org.apache.solr.common.luke.FieldFlag;
diff --git a/solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader.java b/solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader.java
index 50b14a64..f63f6d4 100644
--- a/solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader.java
+++ b/solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader.java
@@ -19,9 +19,14 @@ package org.apache.solr.schema;
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.core.KeywordAnalyzer;
+import org.apache.lucene.analysis.util.CharFilterFactory;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 import org.apache.lucene.util.Version;
-import org.apache.solr.analysis.*;
 import org.apache.lucene.analysis.util.ResourceLoader;
+import org.apache.solr.analysis.KeywordTokenizerFactory;
+import org.apache.solr.analysis.MultiTermAwareComponent;
+import org.apache.solr.analysis.TokenizerChain;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.util.DOMUtil;
 import org.apache.solr.core.Config;
diff --git a/solr/core/src/java/org/apache/solr/schema/TrieField.java b/solr/core/src/java/org/apache/solr/schema/TrieField.java
index 3787c73..9844bc7 100644
--- a/solr/core/src/java/org/apache/solr/schema/TrieField.java
+++ b/solr/core/src/java/org/apache/solr/schema/TrieField.java
@@ -21,6 +21,8 @@ import java.util.Date;
 import java.util.Locale;
 import java.util.Map;
 
+import org.apache.lucene.analysis.util.CharFilterFactory;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 import org.apache.lucene.document.DoubleField;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.FieldType.NumericType;
@@ -39,7 +41,8 @@ import org.apache.lucene.util.CharsRef;
 import org.apache.lucene.util.NumericUtils;
 import org.apache.lucene.util.mutable.MutableValueDate;
 import org.apache.lucene.util.mutable.MutableValueLong;
-import org.apache.solr.analysis.*;
+import org.apache.solr.analysis.TokenizerChain;
+import org.apache.solr.analysis.TrieTokenizerFactory;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.response.TextResponseWriter;
 import org.apache.solr.search.QParser;
diff --git a/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
index 4c69852..40f1702 100755
--- a/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
@@ -32,6 +32,7 @@ import java.util.Map;
 import java.util.Set;
 
 import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 import org.apache.lucene.queries.function.BoostedQuery;
 import org.apache.lucene.queries.function.FunctionQuery;
 import org.apache.lucene.queries.function.ValueSource;
@@ -40,6 +41,8 @@ import org.apache.lucene.queries.function.valuesource.QueryValueSource;
 import org.apache.lucene.queryparser.classic.ParseException;
 import org.apache.lucene.queryparser.classic.QueryParser;
 import org.apache.lucene.search.*;
+import org.apache.solr.analysis.StopFilterFactory;
+import org.apache.solr.analysis.TokenizerChain;
 import org.apache.solr.search.SolrQueryParser.MagicFieldName;
 import org.apache.solr.common.params.DisMaxParams;
 import org.apache.solr.common.params.SolrParams;
@@ -47,7 +50,6 @@ import org.apache.solr.common.util.NamedList;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.schema.FieldType;
 import org.apache.solr.util.SolrPluginUtils;
-import org.apache.solr.analysis.*;
 
 /**
  * An advanced multi-field query parser.
diff --git a/solr/core/src/java/org/apache/solr/search/SolrQueryParser.java b/solr/core/src/java/org/apache/solr/search/SolrQueryParser.java
index 630c6ad..e30579e 100644
--- a/solr/core/src/java/org/apache/solr/search/SolrQueryParser.java
+++ b/solr/core/src/java/org/apache/solr/search/SolrQueryParser.java
@@ -22,6 +22,7 @@ import java.util.HashMap;
 import java.util.Map;
 import java.util.Map.Entry;
 
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.queryparser.classic.ParseException;
 import org.apache.lucene.queryparser.classic.QueryParser;
@@ -32,7 +33,8 @@ import org.apache.lucene.util.automaton.BasicAutomata;
 import org.apache.lucene.util.automaton.BasicOperations;
 import org.apache.lucene.util.automaton.SpecialOperations;
 import org.apache.lucene.analysis.Analyzer;
-import org.apache.solr.analysis.*;
+import org.apache.solr.analysis.ReversedWildcardFilterFactory;
+import org.apache.solr.analysis.TokenizerChain;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.schema.FieldType;
 import org.apache.solr.schema.IndexSchema;
diff --git a/solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion.java b/solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion.java
index 89a8b9d..0521f7f 100644
--- a/solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion.java
+++ b/solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion.java
@@ -18,6 +18,7 @@ package org.apache.solr.analysis;
 
 import java.lang.reflect.Field;
 
+import org.apache.lucene.analysis.util.TokenizerFactory;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.core.Config;
 import org.apache.solr.schema.IndexSchema;
@@ -48,13 +49,13 @@ public class TestLuceneMatchVersion extends SolrTestCaseJ4 {
     
     FieldType type = schema.getFieldType("textDefault");
     TokenizerChain ana = (TokenizerChain) type.getAnalyzer();
-    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);
-    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);
+    assertEquals(DEFAULT_VERSION, (ana.getTokenizerFactory()).getLuceneMatchVersion());
+    assertEquals(DEFAULT_VERSION, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());
 
     type = schema.getFieldType("text30");
     ana = (TokenizerChain) type.getAnalyzer();
-    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);
-    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);
+    assertEquals(Version.LUCENE_30, (ana.getTokenizerFactory()).getLuceneMatchVersion());
+    assertEquals(Version.LUCENE_31, (ana.getTokenFilterFactories()[2]).getLuceneMatchVersion());
 
     // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(
     final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField("matchVersion");
diff --git a/solr/core/src/test/org/apache/solr/analysis/TestMappingCharFilterFactory.java b/solr/core/src/test/org/apache/solr/analysis/TestMappingCharFilterFactory.java
index 90443cf..1a8fe6d 100644
--- a/solr/core/src/test/org/apache/solr/analysis/TestMappingCharFilterFactory.java
+++ b/solr/core/src/test/org/apache/solr/analysis/TestMappingCharFilterFactory.java
@@ -17,6 +17,7 @@
 
 package org.apache.solr.analysis;
 
+import org.apache.lucene.analysis.util.InitializationException;
 import org.apache.lucene.util.LuceneTestCase;
 
 public class TestMappingCharFilterFactory extends LuceneTestCase {
diff --git a/solr/core/src/test/org/apache/solr/analysis/TestSynonymMap.java b/solr/core/src/test/org/apache/solr/analysis/TestSynonymMap.java
index 740a7a5..2449b43 100644
--- a/solr/core/src/test/org/apache/solr/analysis/TestSynonymMap.java
+++ b/solr/core/src/test/org/apache/solr/analysis/TestSynonymMap.java
@@ -25,6 +25,8 @@ import java.util.List;
 import java.util.Map;
 
 import org.apache.lucene.analysis.Token;
+import org.apache.lucene.analysis.util.InitializationException;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.util.ResourceLoader;
 
@@ -41,7 +43,7 @@ public class TestSynonymMap extends LuceneTestCase {
     rules.add( "a=>b=>c" );
     try{
         SlowSynonymFilterFactory.parseRules( rules, synMap, "=>", ",", true, null);
-        fail( "RuntimeException must be thrown." );
+        fail( "InitializationException must be thrown." );
     }
     catch(InitializationException expected) {}
   }
@@ -245,7 +247,7 @@ public class TestSynonymMap extends LuceneTestCase {
 	SlowSynonymMap synMap;
 	
 	// prepare bi-gram tokenizer factory
-	BaseTokenizerFactory tf = new NGramTokenizerFactory();
+	TokenizerFactory tf = new NGramTokenizerFactory();
 	Map<String, String> args = new HashMap<String, String>();
 	args.put("minGramSize","2");
 	args.put("maxGramSize","2");
diff --git a/solr/core/src/test/org/apache/solr/analysis/TestTypeTokenFilterFactory.java b/solr/core/src/test/org/apache/solr/analysis/TestTypeTokenFilterFactory.java
index fd0308c..a1bc5f7 100644
--- a/solr/core/src/test/org/apache/solr/analysis/TestTypeTokenFilterFactory.java
+++ b/solr/core/src/test/org/apache/solr/analysis/TestTypeTokenFilterFactory.java
@@ -18,6 +18,7 @@ package org.apache.solr.analysis;
 
 
 import org.apache.lucene.analysis.NumericTokenStream;
+import org.apache.lucene.analysis.util.InitializationException;
 import org.apache.lucene.analysis.util.ResourceLoader;
 import org.apache.solr.core.SolrResourceLoader;
 import org.junit.Test;
diff --git a/solr/core/src/test/org/apache/solr/schema/MultiTermTest.java b/solr/core/src/test/org/apache/solr/schema/MultiTermTest.java
index 792ee6d..0fb48f8 100644
--- a/solr/core/src/test/org/apache/solr/schema/MultiTermTest.java
+++ b/solr/core/src/test/org/apache/solr/schema/MultiTermTest.java
@@ -18,6 +18,7 @@ package org.apache.solr.schema;
  */
 
 import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.util.TokenFilterFactory;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.analysis.*;
 import org.junit.BeforeClass;
diff --git a/solr/test-framework/src/java/org/apache/solr/analysis/MockTokenizerFactory.java b/solr/test-framework/src/java/org/apache/solr/analysis/MockTokenizerFactory.java
index 4436961..d03a9d9 100644
--- a/solr/test-framework/src/java/org/apache/solr/analysis/MockTokenizerFactory.java
+++ b/solr/test-framework/src/java/org/apache/solr/analysis/MockTokenizerFactory.java
@@ -22,12 +22,13 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.Tokenizer;
+import org.apache.lucene.analysis.util.TokenizerFactory;
 import org.apache.lucene.util.automaton.CharacterRunAutomaton;
 
 /**
  * Factory for {@link MockTokenizer} for testing purposes.
  */
-public class MockTokenizerFactory extends BaseTokenizerFactory {
+public class MockTokenizerFactory extends TokenizerFactory {
   CharacterRunAutomaton pattern;
   boolean enableChecks;
   

