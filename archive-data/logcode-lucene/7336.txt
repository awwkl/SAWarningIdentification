GitDiffStart: 0c8d47a00e7053b1d3e419d6bc48b3325f0dd6f7 | Fri Dec 6 16:44:53 2013 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 7db6b55..a84f60e 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -191,6 +191,9 @@ Bug Fixes
 
 * SOLR-5524: Exception when using Query Function inside Scale Function.
   (Trey Grainger, yonik)
+
+* SOLR-5540: HdfsLockFactory should explicitly create the lock parent directory if 
+  necessary. (Mark Miller)
   
 Optimizations
 ----------------------
diff --git a/solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.java b/solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.java
index ecf113a..d469655 100644
--- a/solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.java
+++ b/solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.java
@@ -21,14 +21,18 @@ import java.io.IOException;
 
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FSDataOutputStream;
+import org.apache.hadoop.fs.FileAlreadyExistsException;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.lucene.store.Lock;
 import org.apache.lucene.store.LockFactory;
 import org.apache.lucene.store.LockReleaseFailedException;
 import org.apache.solr.util.IOUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class HdfsLockFactory extends LockFactory {
+  public static Logger log = LoggerFactory.getLogger(HdfsLockFactory.class);
   
   private Path lockPath;
   private Configuration configuration;
@@ -98,9 +102,14 @@ public class HdfsLockFactory extends LockFactory {
       FileSystem fs = null;
       try {
         fs = FileSystem.newInstance(lockPath.toUri(), conf);
-        
+        if (!fs.exists(lockPath)) {
+          fs.mkdirs(lockPath);
+        }
         file = fs.create(new Path(lockPath, lockName), false);
-      } catch (IOException e) {
+      } catch (FileAlreadyExistsException e) { 
+        return false;
+      }catch (IOException e) {
+        log.error("Error creating lock file", e);
         return false;
       } finally {
         IOUtils.closeQuietly(file);
diff --git a/solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest.java b/solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest.java
index 4f96374..39493db 100644
--- a/solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest.java
+++ b/solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest.java
@@ -68,7 +68,7 @@ public class HdfsLockFactoryTest extends SolrTestCaseJ4 {
   @Test
   public void testBasic() throws IOException {
     URI uri = dfsCluster.getURI();
-    Path lockPath = new Path(uri.toString(), "/lock");
+    Path lockPath = new Path(uri.toString(), "/basedir/lock");
     HdfsLockFactory lockFactory = new HdfsLockFactory(lockPath, new Configuration());
     Lock lock = lockFactory.makeLock("testlock");
     boolean success = lock.obtain();

