GitDiffStart: 3150fae20d71b4e08e5f179f65ec19e2881c5fc7 | Wed Jan 18 07:34:56 2012 +0000
diff --git a/lucene/contrib/CHANGES.txt b/lucene/contrib/CHANGES.txt
index 5a4a314..b95a297 100644
--- a/lucene/contrib/CHANGES.txt
+++ b/lucene/contrib/CHANGES.txt
@@ -189,6 +189,9 @@ Bug Fixes
  * LUCENE-3686: CategoryEnhancement must override Object.equals(Object).
    (Sivan Yogev via Shai Erera)
 
+ * LUCENE-3697: SimpleBoundaryScanner does not work well when highlighting
+   at the beginning of the text. (Shay Banon via Koji Sekiguchi)
+
 Documentation
 
  * LUCENE-3599: Javadocs for DistanceUtils.haversine() were incorrectly
diff --git a/lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.java b/lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.java
index bbfb1df..d76e8d4 100644
--- a/lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.java
+++ b/lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.java
@@ -61,6 +61,10 @@ public class SimpleBoundaryScanner implements BoundaryScanner {
       if( boundaryChars.contains( buffer.charAt( offset - 1 ) ) ) return offset;
       offset--;
     }
+    // if we scanned up to the start of the text, return it, its a "boundary"
+    if (offset == 0) {
+      return 0;
+    }
     // not found
     return start;
   }
diff --git a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScannerTest.java b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScannerTest.java
index 1728ceb..2aa3262 100644
--- a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScannerTest.java
+++ b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScannerTest.java
@@ -36,6 +36,10 @@ public class SimpleBoundaryScannerTest extends LuceneTestCase {
     start = TEXT.indexOf("formance");
     int expected = TEXT.indexOf("high-performance");
     assertEquals(expected, scanner.findStartOffset(text, start));
+    
+    start = TEXT.indexOf("che");
+    expected = TEXT.indexOf("Apache");
+    assertEquals(expected, scanner.findStartOffset(text, start));
   }
 
   public void testFindEndOffset() throws Exception {
diff --git a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest.java b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest.java
index 9ff5b98..16fe102 100644
--- a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest.java
+++ b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest.java
@@ -173,6 +173,6 @@ public class SimpleFragmentsBuilderTest extends AbstractTestCase {
     FieldFragList ffl = sflb.createFieldFragList( fpl, 100 );
     SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();
     sfb.setMultiValuedSeparator( '/' );
-    assertEquals( " b c//<b>d</b> e", sfb.createFragment( reader, 0, F, ffl ) );
+    assertEquals( "//a b c//<b>d</b> e", sfb.createFragment( reader, 0, F, ffl ) );
   }
 }

