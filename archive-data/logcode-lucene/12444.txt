GitDiffStart: a6207d9c04107dc026e0eb2e88be242b40c40f66 | Fri May 18 14:21:21 2012 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/index/MultiFields.java b/lucene/core/src/java/org/apache/lucene/index/MultiFields.java
index 93d4fe4..c933c4a 100644
--- a/lucene/core/src/java/org/apache/lucene/index/MultiFields.java
+++ b/lucene/core/src/java/org/apache/lucene/index/MultiFields.java
@@ -252,7 +252,7 @@ public final class MultiFields extends Fields {
     for(AtomicReader subReader : subReaders) {
       fieldInfos.add(subReader.getFieldInfos());
     }
-    return fieldInfos.asReadOnly();
+    return fieldInfos.finish();
   }
 
   public static Collection<String> getIndexedFields(IndexReader reader) {
diff --git a/lucene/core/src/java/org/apache/lucene/index/MutableFieldInfos.java b/lucene/core/src/java/org/apache/lucene/index/MutableFieldInfos.java
index efb8446..8202bd0 100644
--- a/lucene/core/src/java/org/apache/lucene/index/MutableFieldInfos.java
+++ b/lucene/core/src/java/org/apache/lucene/index/MutableFieldInfos.java
@@ -26,6 +26,8 @@ import java.util.TreeMap;
 
 import org.apache.lucene.index.FieldInfo.IndexOptions;
 
+// nocommit: fix DWPT and change this to a more minimal FieldInfos.Builder that 
+// does *not* extend fieldinfos
 final class MutableFieldInfos extends FieldInfos {
   static final class FieldNumberBiMap {
     
@@ -265,7 +267,6 @@ final class MutableFieldInfos extends FieldInfos {
     return fi;
   }
 
-  @Override
   public FieldInfo fieldInfo(String fieldName) {
     return byName.get(fieldName);
   }
@@ -276,12 +277,10 @@ final class MutableFieldInfos extends FieldInfos {
    * @return the FieldInfo object or null when the given fieldNumber
    * doesn't exist.
    */
-  @Override
   public FieldInfo fieldInfo(int fieldNumber) {
     return (fieldNumber >= 0) ? byNumber.get(fieldNumber) : null;
   }
 
-  @Override
   public Iterator<FieldInfo> iterator() {
     return byNumber.values().iterator();
   }
@@ -289,7 +288,6 @@ final class MutableFieldInfos extends FieldInfos {
   /**
    * @return number of fields
    */
-  @Override
   public int size() {
     assert byNumber.size() == byName.size();
     return byNumber.size();
@@ -299,11 +297,10 @@ final class MutableFieldInfos extends FieldInfos {
     return version;
   }
   
-  // nocommit
-  final ReadOnlyFieldInfos asReadOnly() {
+  final ReadOnlyFieldInfos finish() {
     FieldInfo infos[] = new FieldInfo[size()];
     int upto = 0;
-    for (FieldInfo info : this) {
+    for (FieldInfo info : byNumber.values()) {
       infos[upto++] = info.clone();
     }
     return new ReadOnlyFieldInfos(infos);
diff --git a/lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java b/lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java
index e4ebdbd..57abcad 100644
--- a/lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java
+++ b/lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java
@@ -115,7 +115,7 @@ public final class ParallelAtomicReader extends AtomicReader {
         }
       }
     }
-    fieldInfos = builder.asReadOnly();
+    fieldInfos = builder.finish();
     
     // build Fields instance
     for (final AtomicReader reader : this.parallelReaders) {
diff --git a/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java b/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java
index 48580ee..2ed4c95 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java
@@ -54,11 +54,11 @@ final class SegmentMerger {
   private final IOContext context;
   
   private final MergeState mergeState = new MergeState();
-
-  SegmentMerger(InfoStream infoStream, Directory dir, int termIndexInterval, String name, MergeState.CheckAbort checkAbort, PayloadProcessorProvider payloadProcessorProvider, MutableFieldInfos fieldInfos, Codec codec, IOContext context) {
+  private final MutableFieldInfos fieldInfosBuilder;
+  
+  SegmentMerger(InfoStream infoStream, Directory dir, int termIndexInterval, String name, MergeState.CheckAbort checkAbort, PayloadProcessorProvider payloadProcessorProvider, MutableFieldInfos fieldInfosBuilder, Codec codec, IOContext context) {
     mergeState.infoStream = infoStream;
     mergeState.readers = new ArrayList<MergeState.IndexReaderAndLiveDocs>();
-    mergeState.fieldInfos = fieldInfos;
     mergeState.checkAbort = checkAbort;
     mergeState.payloadProcessorProvider = payloadProcessorProvider;
     directory = dir;
@@ -66,6 +66,7 @@ final class SegmentMerger {
     this.termIndexInterval = termIndexInterval;
     this.codec = codec;
     this.context = context;
+    this.fieldInfosBuilder = fieldInfosBuilder;
   }
 
   /**
@@ -195,6 +196,7 @@ final class SegmentMerger {
     fieldInfosWriter.write(directory, segment, mergeState.fieldInfos, context);
   }
 
+  // NOTE: this is actually merging all the fieldinfos
   public void mergeDocValuesAndNormsFieldInfos() throws IOException {
     // mapping from all docvalues fields found to their promoted types
     // this is because FieldInfos does not store the valueSize
@@ -205,8 +207,7 @@ final class SegmentMerger {
       final AtomicReader reader = readerAndLiveDocs.reader;
       FieldInfos readerFieldInfos = reader.getFieldInfos();
       for (FieldInfo fi : readerFieldInfos) {
-        // nocommit: ugly
-        FieldInfo merged = ((MutableFieldInfos)mergeState.fieldInfos).add(fi);
+        FieldInfo merged = fieldInfosBuilder.add(fi);
         // update the type promotion mapping for this reader
         if (fi.hasDocValues()) {
           TypePromoter previous = docValuesTypes.get(merged);
@@ -220,6 +221,7 @@ final class SegmentMerger {
     }
     updatePromoted(normValuesTypes, true);
     updatePromoted(docValuesTypes, false);
+    mergeState.fieldInfos = fieldInfosBuilder.finish();
   }
   
   protected void updatePromoted(Map<FieldInfo,TypePromoter> infoAndPromoter, boolean norms) {

