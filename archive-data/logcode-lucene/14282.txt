GitDiffStart: 481d3b1cd39f7c131513fc51aff5bd2c00acf321 | Sat Dec 10 13:28:27 2011 +0000
diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexReaderClone.java b/lucene/src/test/org/apache/lucene/index/TestIndexReaderClone.java
index 0b961e3..0b3c762 100644
--- a/lucene/src/test/org/apache/lucene/index/TestIndexReaderClone.java
+++ b/lucene/src/test/org/apache/lucene/index/TestIndexReaderClone.java
@@ -30,11 +30,37 @@ import org.apache.lucene.util.LuceneTestCase;
  */
 public class TestIndexReaderClone extends LuceneTestCase {
 
-  private void assertDelDocsRefCountEquals(int refCount, SegmentReader reader) {
-    assertEquals(refCount, reader.liveDocsRef.get());
+  public void testDirectoryReader() throws Exception {
+    final Directory dir = createIndex(0);
+    performDefaultTests(IndexReader.open(dir));
+    dir.close();
   }
-
-  public void testCloseStoredFields() throws Exception {
+  
+  public void testMultiReader() throws Exception {
+    final Directory dir1 = createIndex(0);
+    final IndexReader r1 = IndexReader.open(dir1);
+    final Directory dir2 = createIndex(0);
+    final IndexReader r2 = IndexReader.open(dir2);
+    final MultiReader mr = new MultiReader(r1, r2);
+    performDefaultTests(mr);
+    dir1.close();
+    dir2.close();
+  }
+  
+  public void testParallelReader() throws Exception {
+    final Directory dir1 = createIndex(0);
+    final IndexReader r1 = IndexReader.open(dir1);
+    final Directory dir2 = createIndex(1);
+    final IndexReader r2 = IndexReader.open(dir2);
+    final ParallelReader pr = new ParallelReader();
+    pr.add(r1);
+    pr.add(r2);
+    performDefaultTests(pr);
+    dir1.close();
+    dir2.close();
+  }
+  
+  private Directory createIndex(int no) throws Exception {
     final Directory dir = newDirectory();
     IndexWriter w = new IndexWriter(
         dir,
@@ -42,13 +68,19 @@ public class TestIndexReaderClone extends LuceneTestCase {
             setMergePolicy(newLogMergePolicy(false))
     );
     Document doc = new Document();
-    doc.add(newField("field", "yes it's stored", TextField.TYPE_STORED));
+    doc.add(newField("field"+no, "yes it's stored", TextField.TYPE_STORED));
     w.addDocument(doc);
     w.close();
-    IndexReader r1 = IndexReader.open(dir);
+    return dir;
+  }
+
+  private void performDefaultTests(IndexReader r1) throws Exception {
     IndexReader r2 = (IndexReader) r1.clone();
+    assertTrue(r1 != r2);
+    TestIndexReader.assertIndexEquals(r1, r2);
     r1.close();
     r2.close();
-    dir.close();
+    TestIndexReaderReopen.assertReaderClosed(r1, true, true);
+    TestIndexReaderReopen.assertReaderClosed(r2, true, true);
   }
 }
diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen.java b/lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen.java
index c94c083..74bdfb8 100644
--- a/lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen.java
+++ b/lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen.java
@@ -757,7 +757,7 @@ public class TestIndexReaderReopen extends LuceneTestCase {
     }
   }  
   
-  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {
+  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {
     assertEquals(0, reader.getRefCount());
     
     if (checkNormsClosed && reader instanceof SegmentReader) {

