GitDiffStart: 603d6d8a7e9d6be2523c4681f833bb9bda4f9f71 | Tue Nov 17 16:45:22 2009 +0000
diff --git a/src/java/org/apache/solr/search/function/distance/GeohashFunction.java b/src/java/org/apache/solr/search/function/distance/GeohashFunction.java
index 6b203a1..6102356 100644
--- a/src/java/org/apache/solr/search/function/distance/GeohashFunction.java
+++ b/src/java/org/apache/solr/search/function/distance/GeohashFunction.java
@@ -85,11 +85,11 @@ public class GeohashFunction extends ValueSource {
   @Override
   public int hashCode() {
     int result = lat.hashCode();
-    result = 31 * result + lon.hashCode();
-    result = 31 * name().hashCode();
+    result = 29 * result - lon.hashCode();
     return result;
   }
 
+  @Override  
   public String description() {
     StringBuilder sb = new StringBuilder();
     sb.append(name()).append('(');
diff --git a/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction.java b/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction.java
index 8e5b57d..d7d7a23 100644
--- a/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction.java
+++ b/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction.java
@@ -108,6 +108,7 @@ public class GeohashHaversineFunction extends ValueSource {
     geoHash2.createWeight(context, searcher);
   }
 
+  @Override
   public boolean equals(Object o) {
     if (this.getClass() != o.getClass()) return false;
     GeohashHaversineFunction other = (GeohashHaversineFunction) o;
@@ -120,15 +121,15 @@ public class GeohashHaversineFunction extends ValueSource {
   @Override
   public int hashCode() {
     int result;
-    long temp;
     result = geoHash1.hashCode();
     result = 31 * result + geoHash2.hashCode();
     result = 31 * result + name().hashCode();
-    temp = radius != +0.0d ? Double.doubleToLongBits(radius) : 0L;
+    long temp =Double.doubleToRawLongBits(radius);
     result = 31 * result + (int) (temp ^ (temp >>> 32));
     return result;
   }
 
+  @Override
   public String description() {
     StringBuilder sb = new StringBuilder();
     sb.append(name()).append('(');
diff --git a/src/java/org/apache/solr/search/function/distance/HaversineFunction.java b/src/java/org/apache/solr/search/function/distance/HaversineFunction.java
index 5186e45..a5998ac 100644
--- a/src/java/org/apache/solr/search/function/distance/HaversineFunction.java
+++ b/src/java/org/apache/solr/search/function/distance/HaversineFunction.java
@@ -126,6 +126,7 @@ public class HaversineFunction extends ValueSource {
     y2.createWeight(context, searcher);
   }
 
+  @Override
   public boolean equals(Object o) {
     if (this.getClass() != o.getClass()) return false;
     HaversineFunction other = (HaversineFunction) o;
@@ -145,7 +146,7 @@ public class HaversineFunction extends ValueSource {
     result = 31 * result + x2.hashCode();
     result = 31 * result + y2.hashCode();
     result = 31 * result + name().hashCode();
-    temp = radius != +0.0d ? Double.doubleToLongBits(radius) : 0L;
+    temp = Double.doubleToRawLongBits(radius);
     result = 31 * result + (int) (temp ^ (temp >>> 32));
     return result;
   }
diff --git a/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java b/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java
index 2a0cc5c..426d3b7 100644
--- a/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java
+++ b/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java
@@ -57,7 +57,7 @@ public class VectorDistanceFunction extends ValueSource {
 
   protected String name() {
     return "dist";
-  };
+  }
 
   /**
    * Calculate the distance
@@ -129,7 +129,7 @@ public class VectorDistanceFunction extends ValueSource {
       }
 
       public double doubleVal(int doc) {
-        return (double) distance(doc, valsArr1, valsArr2);
+        return distance(doc, valsArr1, valsArr2);
       }
 
       public String strVal(int doc) {
@@ -187,10 +187,11 @@ public class VectorDistanceFunction extends ValueSource {
   public int hashCode() {
     int result = sources1.hashCode();
     result = 31 * result + sources2.hashCode();
-    result = 31 * result + (power != +0.0f ? Float.floatToIntBits(power) : 0);
+    result = 31 * result + Float.floatToRawIntBits(power);
     return result;
   }
 
+  @Override
   public String description() {
     StringBuilder sb = new StringBuilder();
     sb.append(name()).append('(').append(power).append(',');

