GitDiffStart: 9d784a6693496e46aeddbb25193cb1e8ec0b54b2 | Tue Aug 9 15:04:05 2016 +0100
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index baae0e2..6bac627 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -245,6 +245,8 @@ Other Changes
 
 * SOLR-9392: Fixed CDCR Test failures which were due to leaked resources. (shalin)
 
+* SOLR-9385: Add QParser.getParser(String,SolrQueryRequest) variant. (Christine Poerschke)
+
 ==================  6.1.0 ==================
 
 Consult the LUCENE_CHANGES.txt file for additional, low level, changes in this release.
diff --git a/solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.java b/solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.java
index 03392f0..d8828a6 100644
--- a/solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.java
+++ b/solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator.java
@@ -604,7 +604,7 @@ public class FacetingAccumulator extends BasicAccumulator implements FacetValueA
         QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);
         final Query q;
         try {
-          q = QParser.getParser(query, null, queryRequest).getQuery();
+          q = QParser.getParser(query, queryRequest).getQuery();
         } catch( SyntaxError e ){
           throw new SolrException(ErrorCode.BAD_REQUEST,"Invalid query '"+query+"'",e);
         }
diff --git a/solr/core/src/java/org/apache/solr/handler/BlobHandler.java b/solr/core/src/java/org/apache/solr/handler/BlobHandler.java
index 4b71187..25b3b14 100644
--- a/solr/core/src/java/org/apache/solr/handler/BlobHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/BlobHandler.java
@@ -160,7 +160,7 @@ public class BlobHandler extends RequestHandlerBase implements PluginInfoInitial
         } else {
           String q = "blobName:{0}";
           if (version != -1) q = "id:{0}/{1}";
-          QParser qparser = QParser.getParser(StrUtils.formatString(q, blobName, version), "lucene", req);
+          QParser qparser = QParser.getParser(StrUtils.formatString(q, blobName, version), req);
           final TopDocs docs = req.getSearcher().search(qparser.parse(), 1, new Sort(new SortField("version", SortField.Type.LONG, true)));
           if (docs.totalHits > 0) {
             rsp.add(ReplicationHandler.FILE_STREAM, new SolrCore.RawWriter() {
diff --git a/solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.java b/solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.java
index 3f231b2..dcd70f4 100644
--- a/solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.java
@@ -125,7 +125,7 @@ public class MoreLikeThisHandler extends RequestHandlerBase
             filters = new ArrayList<>();
             for (String fq : fqs) {
               if (fq != null && fq.trim().length() != 0) {
-                QParser fqp = QParser.getParser(fq, null, req);
+                QParser fqp = QParser.getParser(fq, req);
                 filters.add(fqp.getQuery());
               }
             }
diff --git a/solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.java b/solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.java
index 76b38fa..eb22d90 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.java
@@ -176,7 +176,7 @@ public class ExpandComponent extends SearchComponent implements PluginInfoInitia
       query = rb.getQuery();
     } else {
       try {
-        QParser parser = QParser.getParser(qs, null, req);
+        QParser parser = QParser.getParser(qs, req);
         query = parser.getQuery();
       } catch (Exception e) {
         throw new IOException(e);
@@ -198,7 +198,7 @@ public class ExpandComponent extends SearchComponent implements PluginInfoInitia
       try {
         for (String fq : fqs) {
           if (fq != null && fq.trim().length() != 0 && !fq.equals("*:*")) {
-            QParser fqp = QParser.getParser(fq, null, req);
+            QParser fqp = QParser.getParser(fq, req);
             newFilters.add(fqp.getQuery());
           }
         }
diff --git a/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java b/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
index 931d362..0e37439 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
@@ -202,7 +202,7 @@ public class QueryComponent extends SearchComponent
         filters = filters == null ? new ArrayList<Query>(fqs.length) : new ArrayList<>(filters);
         for (String fq : fqs) {
           if (fq != null && fq.trim().length()!=0) {
-            QParser fqp = QParser.getParser(fq, null, req);
+            QParser fqp = QParser.getParser(fq, req);
             filters.add(fqp.getQuery());
           }
         }
diff --git a/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java b/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java
index ee0a51c..88dbc9d 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java
@@ -158,7 +158,7 @@ public class RealTimeGetComponent extends SearchComponent
         filters = filters == null ? new ArrayList<Query>(fqs.length) : new ArrayList<>(filters);
         for (String fq : fqs) {
           if (fq != null && fq.trim().length()!=0) {
-            QParser fqp = QParser.getParser(fq, null, req);
+            QParser fqp = QParser.getParser(fq, req);
             filters.add(fqp.getQuery());
           }
         }
diff --git a/solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.java b/solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.java
index 2e1bebe..2e457dd 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.java
@@ -242,7 +242,7 @@ public class SpellCheckComponent extends SearchComponent implements SolrCoreAwar
         try {
           if (maxResultsFilterQueryString != null) {
             // Get the default Lucene query parser
-            QParser parser = QParser.getParser(maxResultsFilterQueryString, QParserPlugin.DEFAULT_QTYPE, rb.req);              
+            QParser parser = QParser.getParser(maxResultsFilterQueryString, rb.req);
             DocSet s = searcher.getDocSet(parser.getQuery());
             maxResultsByFilters = s.size();
           } else {
diff --git a/solr/core/src/java/org/apache/solr/request/SimpleFacets.java b/solr/core/src/java/org/apache/solr/request/SimpleFacets.java
index 017deb4..c2f68f9 100644
--- a/solr/core/src/java/org/apache/solr/request/SimpleFacets.java
+++ b/solr/core/src/java/org/apache/solr/request/SimpleFacets.java
@@ -321,7 +321,7 @@ public class SimpleFacets {
   public void getFacetQueryCount(ParsedParams parsed, NamedList<Integer> res) throws SyntaxError, IOException {
     // TODO: slight optimization would prevent double-parsing of any localParams
     // TODO: SOLR-7753
-    Query qobj = QParser.getParser(parsed.facetValue, null, req).getQuery();
+    Query qobj = QParser.getParser(parsed.facetValue, req).getQuery();
 
     if (qobj == null) {
       res.add(parsed.key, 0);
diff --git a/solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory.java b/solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory.java
index 973151f..e829e03 100644
--- a/solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory.java
+++ b/solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory.java
@@ -77,7 +77,7 @@ public class ChildDocTransformerFactory extends TransformerFactory {
 
     BitSetProducer parentsFilter = null;
     try {
-      Query parentFilterQuery = QParser.getParser( parentFilter, null, req).getQuery();
+      Query parentFilterQuery = QParser.getParser( parentFilter, req).getQuery();
       parentsFilter = new QueryBitSetProducer(new QueryWrapperFilter(parentFilterQuery));
     } catch (SyntaxError syntaxError) {
       throw new SolrException( ErrorCode.BAD_REQUEST, "Failed to create correct parent filter query" );
@@ -86,7 +86,7 @@ public class ChildDocTransformerFactory extends TransformerFactory {
     Query childFilterQuery = null;
     if(childFilter != null) {
       try {
-        childFilterQuery = QParser.getParser( childFilter, null, req).getQuery();
+        childFilterQuery = QParser.getParser( childFilter, req).getQuery();
       } catch (SyntaxError syntaxError) {
         throw new SolrException( ErrorCode.BAD_REQUEST, "Failed to create correct child filter query" );
       }
diff --git a/solr/core/src/java/org/apache/solr/search/Grouping.java b/solr/core/src/java/org/apache/solr/search/Grouping.java
index 1ebf574..80a6aeb 100644
--- a/solr/core/src/java/org/apache/solr/search/Grouping.java
+++ b/solr/core/src/java/org/apache/solr/search/Grouping.java
@@ -223,7 +223,7 @@ public class Grouping {
   }
 
   public void addQueryCommand(String groupByStr, SolrQueryRequest request) throws SyntaxError {
-    QParser parser = QParser.getParser(groupByStr, null, request);
+    QParser parser = QParser.getParser(groupByStr, request);
     Query gq = parser.getQuery();
     Grouping.CommandQuery gc = new CommandQuery();
     gc.query = gq;
diff --git a/solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java
index de96c96..e0bb09b 100644
--- a/solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java
@@ -98,7 +98,7 @@ public class JoinQParserPlugin extends QParserPlugin {
           RefCounted<SolrIndexSearcher> fromHolder = null;
           LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);
           try {
-            QParser parser = QParser.getParser(v, "lucene", otherReq);
+            QParser parser = QParser.getParser(v, otherReq);
             fromQuery = parser.getQuery();
             fromHolder = fromCore.getRegisteredSearcher();
             if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();
diff --git a/solr/core/src/java/org/apache/solr/search/QParser.java b/solr/core/src/java/org/apache/solr/search/QParser.java
index 45b698e..898fdf1 100644
--- a/solr/core/src/java/org/apache/solr/search/QParser.java
+++ b/solr/core/src/java/org/apache/solr/search/QParser.java
@@ -264,6 +264,17 @@ public abstract class QParser {
   }
 
   /** Create a <code>QParser</code> to parse <code>qstr</code>,
+   * using the "lucene" (QParserPlugin.DEFAULT_QTYPE) query parser.
+   * The query parser may be overridden by local parameters in the query
+   * string itself.  For example if
+   * qstr=<code>{!prefix f=myfield}foo</code>
+   * then the prefix query parser will be used.
+   */
+  public static QParser getParser(String qstr, SolrQueryRequest req) throws SyntaxError {
+    return getParser(qstr, QParserPlugin.DEFAULT_QTYPE, req);
+  }
+
+  /** Create a <code>QParser</code> to parse <code>qstr</code>,
    * assuming that the default query parser is <code>defaultParser</code>.
    * The query parser may be overridden by local parameters in the query
    * string itself.  For example if defaultParser=<code>"dismax"</code>
diff --git a/solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.java
index faa6825..3f0bb0e 100644
--- a/solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.java
@@ -83,7 +83,7 @@ public class ReRankQParserPlugin extends QParserPlugin {
       if (reRankQueryString == null || reRankQueryString.trim().length() == 0)  {
         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, RERANK_QUERY+" parameter is mandatory");
       }
-      QParser reRankParser = QParser.getParser(reRankQueryString, null, req);
+      QParser reRankParser = QParser.getParser(reRankQueryString, req);
       Query reRankQuery = reRankParser.parse();
 
       int reRankDocs  = localParams.getInt(RERANK_DOCS, RERANK_DOCS_DEFAULT);
diff --git a/solr/core/src/java/org/apache/solr/search/facet/FacetProcessor.java b/solr/core/src/java/org/apache/solr/search/facet/FacetProcessor.java
index 37013b0..b1281f4 100644
--- a/solr/core/src/java/org/apache/solr/search/facet/FacetProcessor.java
+++ b/solr/core/src/java/org/apache/solr/search/facet/FacetProcessor.java
@@ -96,7 +96,7 @@ public class FacetProcessor<FacetRequestT extends FacetRequest>  {
     String parentStr = freq.domain.parents;
     Query parentQuery;
     try {
-      QParser parser = QParser.getParser(parentStr, null, fcontext.req);
+      QParser parser = QParser.getParser(parentStr, fcontext.req);
       parentQuery = parser.getQuery();
     } catch (SyntaxError err) {
       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Error parsing block join parent specification: " + parentStr);
diff --git a/solr/core/src/java/org/apache/solr/search/facet/FacetRequest.java b/solr/core/src/java/org/apache/solr/search/facet/FacetRequest.java
index 4c14ab8..0446202 100644
--- a/solr/core/src/java/org/apache/solr/search/facet/FacetRequest.java
+++ b/solr/core/src/java/org/apache/solr/search/facet/FacetRequest.java
@@ -478,7 +478,7 @@ class FacetQueryParser extends FacetParser<FacetQuery> {
     // TODO: substats that are from defaults!!!
 
     if (qstring != null) {
-      QParser parser = QParser.getParser(qstring, null, getSolrRequest());
+      QParser parser = QParser.getParser(qstring, getSolrRequest());
       facet.q = parser.getQuery();
     }
 
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand.java b/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand.java
index a30ff83..86fe729 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand.java
@@ -62,7 +62,7 @@ public class QueryCommand implements Command<QueryCommandResult> {
      * @return this
      */
     public Builder setQuery(String groupQueryString, SolrQueryRequest request) throws SyntaxError {
-      QParser parser = QParser.getParser(groupQueryString, null, request);
+      QParser parser = QParser.getParser(groupQueryString, request);
       this.queryString = groupQueryString;
       return setQuery(parser.getQuery());
     }
diff --git a/solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin.java
index cced17e..999cd64 100644
--- a/solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin.java
@@ -236,7 +236,7 @@ public class ScoreJoinQParserPlugin extends QParserPlugin {
           LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);
 
           try {
-            QParser fromQueryParser = QParser.getParser(fromQueryStr, "lucene", otherReq);
+            QParser fromQueryParser = QParser.getParser(fromQueryStr, otherReq);
             Query fromQuery = fromQueryParser.getQuery();
 
             fromHolder = fromCore.getRegisteredSearcher();
diff --git a/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java b/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
index f0794a6..0bdefa7 100644
--- a/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
+++ b/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
@@ -399,7 +399,7 @@ public class DirectUpdateHandler2 extends UpdateHandler implements SolrCoreState
     Query q;
     try {
       // move this higher in the stack?
-      QParser parser = QParser.getParser(cmd.getQuery(), "lucene", cmd.req);
+      QParser parser = QParser.getParser(cmd.getQuery(), cmd.req);
       q = parser.getQuery();
       q = QueryUtils.makeQueryable(q);
 
diff --git a/solr/core/src/java/org/apache/solr/util/SolrPluginUtils.java b/solr/core/src/java/org/apache/solr/util/SolrPluginUtils.java
index c12104f..374e901 100644
--- a/solr/core/src/java/org/apache/solr/util/SolrPluginUtils.java
+++ b/solr/core/src/java/org/apache/solr/util/SolrPluginUtils.java
@@ -486,7 +486,7 @@ public class SolrPluginUtils {
 
     String qs = commands.size() >= 1 ? commands.get(0) : "";
     try {
-    Query query = QParser.getParser(qs, null, req).getQuery();
+    Query query = QParser.getParser(qs, req).getQuery();
 
     // If the first non-query, non-filter command is a simple sort on an indexed field, then
     // we can use the Lucene sort ability.
@@ -978,7 +978,7 @@ public class SolrPluginUtils {
     List<Query> out = new ArrayList<>(queries.length);
     for (String q : queries) {
       if (null != q && 0 != q.trim().length()) {
-        out.add(QParser.getParser(q, null, req).getQuery());
+        out.add(QParser.getParser(q, req).getQuery());
       }
     }
     return out;
diff --git a/solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory.java b/solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory.java
index 289a75f..269a2c5 100644
--- a/solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory.java
+++ b/solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory.java
@@ -131,7 +131,7 @@ public class TestReversedWildcardFilterFactory extends SolrTestCaseJ4 {
         "//result[@numFound=1]");
 
     SolrQueryRequest req = req();
-    QParser qparser = QParser.getParser("id:1", "lucene", req);
+    QParser qparser = QParser.getParser("id:1", req);
 
     SolrQueryParser parserTwo = new SolrQueryParser(qparser, "two");
     assertTrue(parserTwo.getAllowLeadingWildcard());
diff --git a/solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType.java b/solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType.java
index 42b0d37..15012cc 100644
--- a/solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType.java
+++ b/solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType.java
@@ -133,7 +133,7 @@ public class TestOverriddenPrefixQueryForCustomFieldType extends SolrTestCaseJ4
       SolrQueryResponse rsp = new SolrQueryResponse();
       SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));
       for (int i = 0; i < inputs.length; i++) {
-        queries[i] = (QParser.getParser(inputs[i], null, req).getQuery());
+        queries[i] = (QParser.getParser(inputs[i], req).getQuery());
       }
     } finally {
       SolrRequestInfo.clearRequestInfo();
diff --git a/solr/core/src/test/org/apache/solr/search/TestSearchPerf.java b/solr/core/src/test/org/apache/solr/search/TestSearchPerf.java
index 42d13ad..8ad807c 100644
--- a/solr/core/src/test/org/apache/solr/search/TestSearchPerf.java
+++ b/solr/core/src/test/org/apache/solr/search/TestSearchPerf.java
@@ -198,10 +198,10 @@ public class TestSearchPerf extends AbstractSolrTestCase {
     String u=t((int)(indexSize*10*fractionCovered));   
 
     SolrQueryRequest req = lrf.makeRequest();
-    QParser parser = QParser.getParser("foomany_s:[" + l + " TO " + u + "]", null, req);
+    QParser parser = QParser.getParser("foomany_s:[" + l + " TO " + u + "]", req);
     Query range = parser.getQuery();
                                      
-    QParser parser2 = QParser.getParser("{!frange l="+l+" u="+u+"}foomany_s", null, req);
+    QParser parser2 = QParser.getParser("{!frange l="+l+" u="+u+"}foomany_s", req);
     Query frange = parser2.getQuery();
     req.close();
 
@@ -224,13 +224,13 @@ public class TestSearchPerf extends AbstractSolrTestCase {
 
     SolrQueryRequest req = lrf.makeRequest();
 
-    QParser parser = QParser.getParser("foomany_s:[" + l + " TO " + u + "]", null, req);
+    QParser parser = QParser.getParser("foomany_s:[" + l + " TO " + u + "]", req);
     Query rangeQ = parser.getQuery();
     List<Query> filters = new ArrayList<>();
     filters.add(rangeQ);
     req.close();
 
-    parser = QParser.getParser("{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}"+ t(0) + ' ' + t(1) + ' ' + t(2), null, req);
+    parser = QParser.getParser("{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}"+ t(0) + ' ' + t(1) + ' ' + t(2), req);
     Query q= parser.getQuery();
 
     // SolrIndexSearcher searcher = req.getSearcher();
diff --git a/solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java b/solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java
index 5ee1f7f..0b9c0f0 100644
--- a/solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java
+++ b/solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java
@@ -169,13 +169,13 @@ public class TestSolrQueryParser extends SolrTestCaseJ4 {
   public void testCSQ() throws Exception {
     SolrQueryRequest req = req();
 
-    QParser qParser = QParser.getParser("text:x^=3", "lucene", req);
+    QParser qParser = QParser.getParser("text:x^=3", req);
     Query q = qParser.getQuery();
     assertTrue(q instanceof BoostQuery);
     assertTrue(((BoostQuery) q).getQuery() instanceof ConstantScoreQuery);
     assertEquals(3.0, ((BoostQuery) q).getBoost(), 0.0f);
 
-    qParser = QParser.getParser("(text:x text:y)^=-3", "lucene", req);
+    qParser = QParser.getParser("(text:x text:y)^=-3", req);
     q = qParser.getQuery();
     assertTrue(q instanceof BoostQuery);
     assertTrue(((BoostQuery) q).getQuery() instanceof ConstantScoreQuery);
diff --git a/solr/core/src/test/org/apache/solr/search/TestStandardQParsers.java b/solr/core/src/test/org/apache/solr/search/TestStandardQParsers.java
index 4c7c4c1..ff9ffff 100644
--- a/solr/core/src/test/org/apache/solr/search/TestStandardQParsers.java
+++ b/solr/core/src/test/org/apache/solr/search/TestStandardQParsers.java
@@ -79,4 +79,13 @@ public class TestStandardQParsers extends LuceneTestCase {
 
   }
 
+  /**
+   * Test that "lucene" is the default query parser.
+   */
+  @Test
+  public void testDefaultQType() throws Exception {
+    assertEquals(LuceneQParserPlugin.NAME, QParserPlugin.DEFAULT_QTYPE);
+    assertEquals("lucene", LuceneQParserPlugin.NAME);
+  }
+
 }
diff --git a/solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore.java b/solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore.java
index 52b139c..3b23be8 100644
--- a/solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore.java
+++ b/solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore.java
@@ -168,7 +168,7 @@ public class TestScoreJoinQPNoScore extends SolrTestCaseJ4 {
       SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));
       
       {
-        final Query query = QParser.getParser(req.getParams().get("q"), null, req).getQuery();
+        final Query query = QParser.getParser(req.getParams().get("q"), req).getQuery();
         final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());
         assertTrue(
             rewrittenQuery+" should be Lucene's",
@@ -178,7 +178,7 @@ public class TestScoreJoinQPNoScore extends SolrTestCaseJ4 {
       {
         final Query query = QParser.getParser(
             "{!join from=dept_id_s to=dept_ss}text_t:develop"
-            , null, req).getQuery();
+            , req).getQuery();
         final Query rewrittenQuery = query.rewrite(req.getSearcher().getIndexReader());
         assertEquals(rewrittenQuery+" is expected to be from Solr",
               JoinQParserPlugin.class.getPackage().getName(), 
diff --git a/solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore.java b/solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore.java
index a674d50..51039d6 100644
--- a/solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore.java
+++ b/solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore.java
@@ -187,7 +187,7 @@ public class TestScoreJoinQPScore extends SolrTestCaseJ4 {
 
     final SolrQueryRequest req = req("q", "{!join from=movieId_s to=id score=" + score + " b=200}title:movie", "fl", "id,score", "omitHeader", "true");
     SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, new SolrQueryResponse()));
-    final Query luceneQ = QParser.getParser(req.getParams().get("q"), null, req).getQuery().rewrite(req.getSearcher().getLeafReader());
+    final Query luceneQ = QParser.getParser(req.getParams().get("q"), req).getQuery().rewrite(req.getSearcher().getLeafReader());
     assertTrue(luceneQ instanceof BoostQuery);
     float boost = ((BoostQuery) luceneQ).getBoost();
     assertEquals("" + luceneQ, Float.floatToIntBits(200), Float.floatToIntBits(boost));

