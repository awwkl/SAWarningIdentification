GitDiffStart: 995c5b9ef13b56648e87c70a25aa2f186a926b5b | Wed Feb 1 11:03:17 2012 +0000
diff --git a/lucene/contrib/CHANGES.txt b/lucene/contrib/CHANGES.txt
index 93e1dce..9b71342 100644
--- a/lucene/contrib/CHANGES.txt
+++ b/lucene/contrib/CHANGES.txt
@@ -142,6 +142,9 @@ New Features
  * LUCENE-3305: Added Kuromoji morphological analyzer for Japanese.
    (Christian Moen, Masaru Hasegawa, Simon Willnauer, Uwe Schindler, Mike McCandless, Robert Muir)
 
+ * LUCENE-3730: Refine Kuromoji search mode (Mode.SEARCH) decompounding
+   heuristics.  (Christian Moen via Robert Muir)
+
  * LUCENE-3685: Add ToChildBlockJoinQuery and renamed previous
    BlockJoinQuery to ToParentBlockJoinQuery, so that you can now do
    joins in both parent to child and child to parent directions.
diff --git a/modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/viterbi/Viterbi.java b/modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/viterbi/Viterbi.java
index e442351..11b2a8d 100644
--- a/modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/viterbi/Viterbi.java
+++ b/modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/viterbi/Viterbi.java
@@ -54,11 +54,13 @@ public class Viterbi {
   
   private static final int DEFAULT_COST = 10000000;
   
-  private static final int SEARCH_MODE_LENGTH_KANJI = 3;
-  
-  private static final int SEARCH_MODE_LENGTH = 7;
-  
-  private static final int SEARCH_MODE_PENALTY = 10000;
+  private static final int SEARCH_MODE_KANJI_LENGTH = 2;
+
+  private static final int SEARCH_MODE_OTHER_LENGTH = 7; // Must be >= SEARCH_MODE_KANJI_LENGTH
+
+  private static final int SEARCH_MODE_KANJI_PENALTY = 3000;
+
+  private static final int SEARCH_MODE_OTHER_PENALTY = 1700;
   
   private static final char[] BOS = "BOS".toCharArray();
   
@@ -137,7 +139,7 @@ public class Viterbi {
             char[] surfaceForm = node.getSurfaceForm();
             int offset = node.getOffset();
             int length = node.getLength();
-            if (length > SEARCH_MODE_LENGTH_KANJI) {
+            if (length > SEARCH_MODE_KANJI_LENGTH) {
               boolean allKanji = true;
               // check if node consists of only kanji
               for (int pos = 0; pos < length; pos++) {
@@ -148,9 +150,9 @@ public class Viterbi {
               }
               
               if (allKanji) {	// Process only Kanji keywords
-                pathCost += (length - SEARCH_MODE_LENGTH_KANJI) * SEARCH_MODE_PENALTY;
-              } else if (length > SEARCH_MODE_LENGTH) {
-                pathCost += (length - SEARCH_MODE_LENGTH) * SEARCH_MODE_PENALTY;								
+                pathCost += (length - SEARCH_MODE_KANJI_LENGTH) * SEARCH_MODE_KANJI_PENALTY;
+              } else if (length > SEARCH_MODE_OTHER_LENGTH) {
+                pathCost += (length - SEARCH_MODE_OTHER_LENGTH) * SEARCH_MODE_OTHER_PENALTY;								
               }
             }
           }
diff --git a/modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/TestExtendedMode.java b/modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/TestExtendedMode.java
index 1212f00..ed9e2c1 100644
--- a/modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/TestExtendedMode.java
+++ b/modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/TestExtendedMode.java
@@ -1,18 +1,5 @@
 package org.apache.lucene.analysis.kuromoji;
 
-import java.io.IOException;
-import java.io.Reader;
-import java.io.StringReader;
-
-import org.apache.lucene.analysis.Analyzer;
-import org.apache.lucene.analysis.BaseTokenStreamTestCase;
-import org.apache.lucene.analysis.TokenStream;
-import org.apache.lucene.analysis.Tokenizer;
-import org.apache.lucene.analysis.kuromoji.Segmenter.Mode;
-import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
-import org.apache.lucene.util.UnicodeUtil;
-import org.apache.lucene.util._TestUtil;
-
 /**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -30,6 +17,19 @@ import org.apache.lucene.util._TestUtil;
  * limitations under the License.
  */
 
+import java.io.IOException;
+import java.io.Reader;
+import java.io.StringReader;
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.BaseTokenStreamTestCase;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.Tokenizer;
+import org.apache.lucene.analysis.kuromoji.Segmenter.Mode;
+import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
+import org.apache.lucene.util.UnicodeUtil;
+import org.apache.lucene.util._TestUtil;
+
 public class TestExtendedMode extends BaseTokenStreamTestCase {
   private final Segmenter segmenter = new Segmenter(Mode.EXTENDED);
   private final Analyzer analyzer = new Analyzer() {
diff --git a/modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/TestSearchMode.java b/modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/TestSearchMode.java
new file mode 100644
index 0000000..f774982
--- /dev/null
+++ b/modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/TestSearchMode.java
@@ -0,0 +1,72 @@
+package org.apache.lucene.analysis.kuromoji;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.LineNumberReader;
+import java.io.Reader;
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.BaseTokenStreamTestCase;
+import org.apache.lucene.analysis.Tokenizer;
+import org.apache.lucene.analysis.kuromoji.Segmenter.Mode;
+import org.apache.lucene.util.IOUtils;
+
+public class TestSearchMode extends BaseTokenStreamTestCase {
+  private final static String SEGMENTATION_FILENAME = "search-segmentation-tests.txt";
+  private final Segmenter segmenter = new Segmenter(Mode.SEARCH);
+  private final Analyzer analyzer = new Analyzer() {
+    @Override
+    protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
+      Tokenizer tokenizer = new KuromojiTokenizer(segmenter, reader);
+      return new TokenStreamComponents(tokenizer, tokenizer);
+    }
+  };
+  
+  /** Test search mode segmentation */
+  public void testSearchSegmentation() throws IOException {
+    InputStream is = TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);
+    if (is == null) {
+      throw new FileNotFoundException("Cannot find " + SEGMENTATION_FILENAME + " in test classpath");
+    }
+    try {
+      LineNumberReader reader = new LineNumberReader(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));
+      String line = null;
+      while ((line = reader.readLine()) != null) {
+        // Remove comments
+        line = line.replaceAll("#.*$", "");
+        // Skip empty lines or comment lines
+        if (line.trim().isEmpty()) {
+          continue;
+        }
+        if (VERBOSE) {
+          System.out.println("Line no. " + reader.getLineNumber() + ": " + line);
+        }
+        String[] fields = line.split("\t", 2);
+        String sourceText = fields[0];
+        String[] expectedTokens = fields[1].split("\\s+");
+        assertAnalyzesTo(analyzer, sourceText, expectedTokens);
+      }
+    } finally {
+      is.close();
+    }
+  }
+}
diff --git a/modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/search-segmentation-tests.txt b/modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/search-segmentation-tests.txt
new file mode 100644
index 0000000..d217b4e
--- /dev/null
+++ b/modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/search-segmentation-tests.txt
@@ -0,0 +1,140 @@
+###
+### Tests for Kuromoji's search mode heuristic
+###
+### In search-mode, Kuromoji uses a heuristic to do extra splitting of words
+### to get a decompounding effect useful for search.  This file includes tests
+### for this heuristic and demonstrates its usefulness, but also weaknesses.
+###
+### This file's format is as follows:
+###	  <text><tab><token1> <token2> ... <token>
+###
+### This file should use UTF-8 encoding and there is one test per line.  The
+### text to be segmented and its expected surface form token sequence is 
+### separated by a tab ('\t').  Tokens are  separated by a half-width space.
+### Whitespace lines and lines starting with a '#' are ignored.  Comments
+### are not allowed on entry line.
+###
+### NOTE: These tests depends on IPADIC
+###
+### Revision history:
+###  - 2012-01-29: Initial version
+###
+
+##
+## Organizations
+##
+
+# Kansai Internationl Airport
+?¢è¥¿?½é?ç©ºæ¸¯	?¢è¥¿ ?½é? ç©ºæ¸¯
+# Narita Airport
+???ç©ºæ¸¯	??? ç©ºæ¸¯
+# Haneda Airport
+ç¾½ç?ç©ºæ¸¯	ç¾½ç? ç©ºæ¸¯
+# Nara Institute of Science and Technology
+å¥?????ç§????è¡?¤§å­??å¤§å?	å¥?? ??? ç§?? ??è¡? å¤§å??? å¤§å?
+# Tokyo University
+?±äº¬å¤§å?	?±äº¬ å¤§å?
+# Kyoto University
+äº??å¤§å?	äº?? å¤§å?
+# Kyoto University Baseball Club
+äº??å¤§å?ç¡???????	äº?? å¤§å? ç¡?? ??? ??
+
+##
+## Katakana titles
+##
+
+# Senior Software Engineer
+?·ã??????????????³ã????	?·ã??? ?½ã?????§ã? ?¨ã??¸ã???
+# Software Engineer
+?½ã?????§ã??¨ã??¸ã???	?½ã?????§ã? ?¨ã??¸ã???
+# Senior Project Manager
+?·ã????????§ã????????£ã?	?·ã??? ????¸ã???? ????¸ã???
+# Project Manager
+????¸ã????????¸ã???	????¸ã???? ????¸ã???
+# Senior Sales Engineer
+?·ã?????¼ã??¹ã??³ã????	?·ã??? ?»ã???? ?¨ã??¸ã???
+# System Architect
+?·ã?????????????	?·ã???? ?????????
+# Senior System Architect
+?·ã?????¹ã?????¼ã??????	?·ã??? ?·ã???? ?????????
+# System Administrator
+?·ã???????????¹ã??????	?·ã???? ???????¹ã??????
+?·ã???????????¹ã?????¿ã?	?·ã???? ???????¹ã?????¿ã?
+# Senior System Administrator
+?·ã?????¹ã??????????????¼ã???	?·ã??? ?·ã???? ???????¹ã?????¿ã?
+
+##
+## Company names (several are fictitious)
+##
+
+# SoftBank Mobile
+?½ã?????³ã?????¤ã?	?½ã?????³ã? ????¤ã?
+# Alpine Materials
+???????³ã?????????	???????? ?????????
+# Sapporo Holdings
+?µã???????????£ã??°ã?	?µã???? ???????£ã??°ã?
+# Yamada Corporation
+?¤ã????³ã?????¼ã??§ã?	?¤ã??? ?³ã?????¼ã??§ã?
+# Canon Semiconductor equipement	NOTE: Semiconductor becomes semi + conductor
+???????»ã??³ã???????¼ã????????¡ã???	?????? ?»ã? ?³ã???????? ?¨ã??£ã?????³ã?
+# Orental Chain
+????¨ã??¿ã??????	????¨ã??¿ã? ?????
+# Ally Projects Japan	NOTE: Becomes one token as ????¸ã???? is not in IPADIC
+??????????¸ã?????¸ã????	??????????¸ã?????¸ã????
+# Peter Pan Corporation
+????¿ã?????³ã?????¼ã??§ã?	????¿ã? ??? ?³ã?????¼ã??§ã?
+# AIM Create
+?¨ã????????¤ã?	?¨ã????????¤ã?
+# Mars Engineering
+????¹ã??³ã?????????	????? ?¨ã??¸ã?????³ã?
+# Fuji Protein Technology
+??????????³ã?????????	??? ???????? ???????¸ã?
+
+##
+## Person names
+##
+
+# Michael Jackson
+????±ã??¸ã??????	????±ã? ?¸ã??????
+# Steve Jobs
+?¹ã??£ã?????§ã???	?¹ã??£ã??? ?¸ã????
+# Harry Potter	NOTE: Becomes one token (short word)
+????¼ã??????	????¼ã??????
+# Bill Gates	NOTE: Becomes one token (short work)
+????²ã???	????²ã???
+# Sean Connery	NOTE: Becomes one token (okay)
+?·ã??¼ã??³ã????	?·ã??¼ã??³ã????
+
+##
+## Other nouns
+##
+
+# Holdings
+???????£ã??°ã?	???????£ã??°ã?
+# Engineering
+?¨ã??¸ã?????³ã?	?¨ã??¸ã?????³ã?
+# Software Engineering
+?½ã?????§ã??¨ã??¸ã?????³ã?	?½ã?????§ã? ?¨ã??¸ã?????³ã?
+# Shopping center
+?·ã?????³ã??»ã??¿ã?	?·ã?????³ã? ?»ã??¿ã?
+# Game center (arcade)	NOTE: One token because of short word
+?²ã?????³ã???	?²ã?????³ã???
+# Christmas shopping
+????¹ã??¹ã??§ã??????	????¹ã??? ?·ã?????³ã?
+# Download file
+????????????¡ã???	?????????? ????¤ã?
+# Technology
+???????¸ã?	???????¸ã?
+# Lillehammer Olympics
+???????¡ã?????³ã????	???????¡ã? ????³ã????
+
+##
+## Problematic terms
+##
+
+# JT Engineering	NOTE: Becomes J Tien ginia ring (substrings are in IPADIC)
+?¸ã??¤ã??£ã??³ã?????????	?¸ã??? ????¨ã? ?¸ã??? ?????
+# Anchovy pasta	NOTE: Become Anch yvipasta
+??????????¹ã?	????? ?§ã??????
+# Surprise gift	NOTE: Becomes one token (surprise not in IPADIC)
+?µã??©ã??ºã????	?µã??©ã??ºã????

