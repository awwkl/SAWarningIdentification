GitDiffStart: 625600da1cb5d76dc80d07800e951c1af6e3e5c3 | Tue Jun 18 21:52:14 2013 +0000
diff --git a/solr/core/src/java/org/apache/solr/update/UpdateHandler.java b/solr/core/src/java/org/apache/solr/update/UpdateHandler.java
index 380c251..26267d9 100644
--- a/solr/core/src/java/org/apache/solr/update/UpdateHandler.java
+++ b/solr/core/src/java/org/apache/solr/update/UpdateHandler.java
@@ -52,7 +52,7 @@ public abstract class UpdateHandler implements SolrInfoMBean {
   protected Vector<SolrEventListener> softCommitCallbacks = new Vector<SolrEventListener>();
   protected Vector<SolrEventListener> optimizeCallbacks = new Vector<SolrEventListener>();
 
-  protected UpdateLog ulog;
+  protected final UpdateLog ulog;
 
   private void parseEventListeners() {
     final Class<SolrEventListener> clazz = SolrEventListener.class;
@@ -71,18 +71,6 @@ public abstract class UpdateHandler implements SolrInfoMBean {
     }
   }
 
-
-  private void initLog(PluginInfo ulogPluginInfo, UpdateLog existingUpdateLog) {
-    ulog = existingUpdateLog;
-    if (ulog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled()) {
-      ulog = new UpdateLog();
-      ulog.init(ulogPluginInfo);
-      // ulog = core.createInitInstance(ulogPluginInfo, UpdateLog.class, "update log", "solr.NullUpdateLog");
-      ulog.init(this, core);
-    }
-    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor
-  }
-
   // not thread safe - for startup
   private void clearLog(PluginInfo ulogPluginInfo) {
     if (ulogPluginInfo == null) return;
@@ -132,7 +120,16 @@ public abstract class UpdateHandler implements SolrInfoMBean {
     if (!core.isReloaded() && !core.getDirectoryFactory().isPersistent()) {
       clearLog(ulogPluginInfo);
     }
-    initLog(ulogPluginInfo, updateLog);
+
+    if (updateLog == null && ulogPluginInfo != null && ulogPluginInfo.isEnabled()) {
+      ulog = new UpdateLog();
+      ulog.init(ulogPluginInfo);
+      // ulog = core.createInitInstance(ulogPluginInfo, UpdateLog.class, "update log", "solr.NullUpdateLog");
+      ulog.init(this, core);
+    } else {
+      ulog = updateLog;
+    }
+    // ulog.init() when reusing an existing log is deferred (currently at the end of the DUH2 constructor
   }
 
   /**

