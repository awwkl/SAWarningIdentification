GitDiffStart: 12fb9eda87508affa3a601e1ad955951798c25f1 | Mon Aug 3 16:53:55 2015 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 0b6c4e3..22588f7 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -40,6 +40,9 @@ API Changes
   abstract and has no reflection-based default implementation anymore.
   (Uwe Schindler)
 
+* LUCENE-6706: PayloadTermQuery and PayloadNearQuery have been removed.
+  Instead, use PayloadScoreQuery to wrap any SpanQuery. (Alan Woodward)
+
 ======================= Lucene 5.3.0 =======================
 
 New Features
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.java
index eb920b1..4d4b3c8 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.java
@@ -1,11 +1,12 @@
 package org.apache.lucene.queryparser.xml.builders;
 
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.payloads.AveragePayloadFunction;
-import org.apache.lucene.search.payloads.PayloadTermQuery;
-import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.queryparser.xml.DOMUtils;
 import org.apache.lucene.queryparser.xml.ParserException;
+import org.apache.lucene.search.payloads.AveragePayloadFunction;
+import org.apache.lucene.search.payloads.PayloadScoreQuery;
+import org.apache.lucene.search.spans.SpanQuery;
+import org.apache.lucene.search.spans.SpanTermQuery;
 import org.w3c.dom.Element;
 
 /*
@@ -26,7 +27,7 @@ import org.w3c.dom.Element;
  */
 
 /**
- * Builder for {@link PayloadTermQuery}
+ * Builder for {@link PayloadScoreQuery}
  */
 public class BoostingTermBuilder extends SpanBuilderBase {
 
@@ -35,7 +36,8 @@ public class BoostingTermBuilder extends SpanBuilderBase {
     String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, "fieldName");
     String value = DOMUtils.getNonBlankTextOrFail(e);
 
-    PayloadTermQuery btq = new PayloadTermQuery(new Term(fieldName, value), new AveragePayloadFunction());
+    PayloadScoreQuery btq = new PayloadScoreQuery(new SpanTermQuery(new Term(fieldName, value)),
+        new AveragePayloadFunction());
     btq.setBoost(DOMUtils.getAttribute(e, "boost", 1.0f));
     return btq;
   }

