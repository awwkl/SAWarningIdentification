GitDiffStart: bb64899936468dbe997c8698fa70ba33bad43870 | Thu Jul 17 13:16:13 2008 +0000
diff --git a/src/java/org/apache/solr/search/BoostQParserPlugin.java b/src/java/org/apache/solr/search/BoostQParserPlugin.java
index 818989f..a74db15 100755
--- a/src/java/org/apache/solr/search/BoostQParserPlugin.java
+++ b/src/java/org/apache/solr/search/BoostQParserPlugin.java
@@ -29,7 +29,7 @@ import org.apache.solr.search.function.ValueSource;
 /**
  * Create a boosted query from the input value.  The main value is the query to be boosted.
  * <br>Other parameters: <code>b</code>, the function query to use as the boost.
- * <br>Example: <code>&lt;!boost b=log(popularity)&gt;foo</code> creates a query "foo"
+ * <br>Example: <code>{!boost b=log(popularity)}foo</code> creates a query "foo"
  * which is boosted (scores are multiplied) by the function query <code>log(popularity</code>.
  * The query to be boosted may be of any type.
  */
diff --git a/src/java/org/apache/solr/search/DisMaxQParserPlugin.java b/src/java/org/apache/solr/search/DisMaxQParserPlugin.java
index e69d892..eab4292 100755
--- a/src/java/org/apache/solr/search/DisMaxQParserPlugin.java
+++ b/src/java/org/apache/solr/search/DisMaxQParserPlugin.java
@@ -37,7 +37,7 @@ import java.util.Map;
  * Create a dismax query from the input value.
  * <br>Other parameters: all main query related parameters from the {@link org.apache.solr.handler.DisMaxRequestHandler} are supported.
  * localParams are checked before global request params.
- * <br>Example: <code>&lt;!dismax qf=myfield,mytitle^2&gt;foo</code> creates a dismax query across
+ * <br>Example: <code>{!dismax qf=myfield,mytitle^2}foo</code> creates a dismax query across
  * across myfield and mytitle, with a higher weight on mytitle.
  */
 public class DisMaxQParserPlugin extends QParserPlugin {
diff --git a/src/java/org/apache/solr/search/FieldQParserPlugin.java b/src/java/org/apache/solr/search/FieldQParserPlugin.java
index 32ba3f9..ed3c5ba 100644
--- a/src/java/org/apache/solr/search/FieldQParserPlugin.java
+++ b/src/java/org/apache/solr/search/FieldQParserPlugin.java
@@ -36,9 +36,9 @@ import java.util.ArrayList;
 /**
  * Create a field query from the input value, applying text analysis and constructing a phrase query if appropriate.
  * <br>Other parameters: <code>f</code>, the field
- * <br>Example: <code>&lt;!field f=myfield&gt;Foo Bar</code> creates a phrase query with "foo" followed by "bar"
+ * <br>Example: <code>{!field f=myfield}Foo Bar</code> creates a phrase query with "foo" followed by "bar"
  * if the analyzer for myfield is a text field with an analyzer that splits on whitespace and lowercases terms.
- * This is generally equivalent to the lucene query parser expression <code>myfield:"Foo Bar"</code>
+ * This is generally equivalent to the Lucene query parser expression <code>myfield:"Foo Bar"</code>
  */
 public class FieldQParserPlugin extends QParserPlugin {
   public static String NAME = "field";
diff --git a/src/java/org/apache/solr/search/FunctionQParserPlugin.java b/src/java/org/apache/solr/search/FunctionQParserPlugin.java
index 75f1344..0f66ec2 100644
--- a/src/java/org/apache/solr/search/FunctionQParserPlugin.java
+++ b/src/java/org/apache/solr/search/FunctionQParserPlugin.java
@@ -23,7 +23,7 @@ import org.apache.solr.request.SolrQueryRequest;
 /**
  * Create a function query from the input value.
  * <br>Other parameters: none
- * <br>Example: <code>&lt;!func&gt;log(foo)</code>
+ * <br>Example: <code>{!func}log(foo)</code>
  */
 public class FunctionQParserPlugin extends QParserPlugin {
   public static String NAME = "func";
diff --git a/src/java/org/apache/solr/search/LuceneQParserPlugin.java b/src/java/org/apache/solr/search/LuceneQParserPlugin.java
index 80c1603..33a1fbe 100755
--- a/src/java/org/apache/solr/search/LuceneQParserPlugin.java
+++ b/src/java/org/apache/solr/search/LuceneQParserPlugin.java
@@ -34,7 +34,7 @@ import java.util.List;
  * <li>q.op - the default operator "OR" or "AND"</li>
  * <li>df - the default field name</li>
  * </ul>
- * <br>Example: <code>&lt;!lucene q.op=AND df=text sort='price asc'&gt;myfield:foo +bar -baz</code>
+ * <br>Example: <code>{!lucene q.op=AND df=text sort='price asc'}myfield:foo +bar -baz</code>
  */
 public class LuceneQParserPlugin extends QParserPlugin {
   public static String NAME = "lucene";
diff --git a/src/java/org/apache/solr/search/OldLuceneQParserPlugin.java b/src/java/org/apache/solr/search/OldLuceneQParserPlugin.java
index e4a8b8b..a9c33cc 100755
--- a/src/java/org/apache/solr/search/OldLuceneQParserPlugin.java
+++ b/src/java/org/apache/solr/search/OldLuceneQParserPlugin.java
@@ -23,7 +23,7 @@ import org.apache.solr.request.SolrQueryRequest;
 /**
  * Parse Solr's variant of Lucene QueryParser syntax, including the
  * deprecated sort specification after the query.
- * <br>Example: <code>&lt;!lucenePlusSort&gt;myfield:foo +bar -baz;price asc</code>
+ * <br>Example: <code>{!lucenePlusSort}myfield:foo +bar -baz;price asc</code>
  */
 public class OldLuceneQParserPlugin extends QParserPlugin {
   public static String NAME = "lucenePlusSort";
diff --git a/src/java/org/apache/solr/search/PrefixQParserPlugin.java b/src/java/org/apache/solr/search/PrefixQParserPlugin.java
index cf24dba..82b3358 100755
--- a/src/java/org/apache/solr/search/PrefixQParserPlugin.java
+++ b/src/java/org/apache/solr/search/PrefixQParserPlugin.java
@@ -27,8 +27,8 @@ import org.apache.solr.request.SolrQueryRequest;
  * Create a prefix query from the input value.  Currently no analysis or
  * value transformation is done to create this prefix query (subject to change).
  * <br>Other parameters: <code>f</code>, the field
- * <br>Example: <code>&lt;!prefix f=myfield&gt;foo</code> is generally equivalent
- * to the lucene query parser expression <code>myfield:foo*</code>
+ * <br>Example: <code>{!prefix f=myfield}foo</code> is generally equivalent
+ * to the Lucene query parser expression <code>myfield:foo*</code>
  */
 public class PrefixQParserPlugin extends QParserPlugin {
   public static String NAME = "prefix";
diff --git a/src/java/org/apache/solr/search/RawQParserPlugin.java b/src/java/org/apache/solr/search/RawQParserPlugin.java
index 2391d85..a56b0e6 100644
--- a/src/java/org/apache/solr/search/RawQParserPlugin.java
+++ b/src/java/org/apache/solr/search/RawQParserPlugin.java
@@ -27,7 +27,7 @@ import org.apache.solr.request.SolrQueryRequest;
 /**
  * Create a term query from the input value without any text analysis or transformation whatsoever.
  * <br>Other parameters: <code>f</code>, the field
- * <br>Example: <code>&lt;!raw f=myfield&gt;Foo Bar</code> creates <code>TermQuery(Term("myfield","Foo Bar"))</code>
+ * <br>Example: <code>{!raw f=myfield}Foo Bar</code> creates <code>TermQuery(Term("myfield","Foo Bar"))</code>
  */
 public class RawQParserPlugin extends QParserPlugin {
   public static String NAME = "raw";

