GitDiffStart: 4c5700cdc972744c9faf22f9bd02a4edd6b5bf19 | Fri May 30 01:28:56 2008 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index 95cc62f..3256e6f 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -281,6 +281,10 @@ New Features
       ignoreCase="true" tokenizerFactory="solr.CJKTokenizerFactory"/>
     (koji)
 
+50. SOLR-515: Added SimilarityFactory capability to schema.xml,
+    making config file parameters usable in the construction of
+    the global Lucene Similarity implementation.
+    (ehatcher)
     
 Changes in runtime behavior
  1. SOLR-559: use Lucene updateDocument, deleteDocuments methods.  This
diff --git a/example/solr/conf/schema.xml b/example/solr/conf/schema.xml
index 6356aea..b8365ea 100755
--- a/example/solr/conf/schema.xml
+++ b/example/solr/conf/schema.xml
@@ -361,5 +361,15 @@
       A custom similarity may be specified here, but the default is fine
       for most applications.  -->
  <!-- <similarity class="org.apache.lucene.search.DefaultSimilarity"/> -->
+ <!-- ... OR ...
+      Specify a SimilarityFactory class name implementation
+      allowing parameters to be used.
+ -->
+ <!--
+ <similarity class="com.example.solr.CustomSimilarityFactory">
+   <str name="paramkey">param value</str>
+ </similarity>
+ -->
+
 
 </schema>
diff --git a/src/java/org/apache/solr/schema/IndexSchema.java b/src/java/org/apache/solr/schema/IndexSchema.java
index 7425fac..dd6d6b1 100644
--- a/src/java/org/apache/solr/schema/IndexSchema.java
+++ b/src/java/org/apache/solr/schema/IndexSchema.java
@@ -20,11 +20,11 @@ package org.apache.solr.schema;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.document.Fieldable;
-import org.apache.lucene.search.DefaultSimilarity;
 import org.apache.lucene.search.Similarity;
 import org.apache.lucene.queryParser.QueryParser;
 import org.apache.solr.common.ResourceLoader;
 import org.apache.solr.common.SolrException;
+import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.DOMUtil;
 import org.apache.solr.core.SolrConfig;
 import org.apache.solr.core.Config;
@@ -34,10 +34,7 @@ import org.apache.solr.analysis.TokenizerChain;
 import org.apache.solr.analysis.TokenizerFactory;
 import org.apache.solr.search.SolrQueryParser;
 import org.apache.solr.util.plugin.AbstractPluginLoader;
-import org.w3c.dom.Document;
-import org.w3c.dom.NamedNodeMap;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
+import org.w3c.dom.*;
 
 import javax.xml.xpath.XPath;
 import javax.xml.xpath.XPathConstants;
@@ -179,12 +176,17 @@ public final class IndexSchema {
    */
   public Collection<SchemaField> getRequiredFields() { return requiredFields; }
 
-  private Similarity similarity;
+  private SimilarityFactory similarityFactory;
 
   /**
    * Returns the Similarity used for this index
    */
-  public Similarity getSimilarity() { return similarity; }
+  public Similarity getSimilarity() { return similarityFactory.getSimilarity(); }
+
+  /**
+   * Returns the SimilarityFactory used for this index
+   */
+  public SimilarityFactory getSimilarityFactory() { return similarityFactory; }
 
   private Analyzer analyzer;
 
@@ -496,13 +498,30 @@ public final class IndexSchema {
     dynamicFields = (DynamicField[])dFields.toArray(new DynamicField[dFields.size()]);
 
 
-    Node node = (Node) xpath.evaluate("/schema/similarity/@class", document, XPathConstants.NODE);
+    Node node = (Node) xpath.evaluate("/schema/similarity", document, XPathConstants.NODE);
     if (node==null) {
-      similarity = new DefaultSimilarity();
+      similarityFactory = new SimilarityFactory() {
+        public Similarity getSimilarity() {
+          return Similarity.getDefault();
+        }
+      };
       log.fine("using default similarity");
     } else {
-      similarity = (Similarity)solrConfig.getResourceLoader().newInstance(node.getNodeValue().trim());
-      log.fine("using similarity " + similarity.getClass().getName());
+      final Object obj = solrConfig.getResourceLoader().newInstance(((Element) node).getAttribute("class"));
+      if (obj instanceof SimilarityFactory) {
+        // configure a factory, get a similarity back
+        SolrParams params = SolrParams.toSolrParams(DOMUtil.childNodesToNamedList(node));
+        similarityFactory = (SimilarityFactory)obj;
+        similarityFactory.init(params);
+      } else {
+        // just like always, assume it's a Similarlity and get an ClassCastException - reasonable error handling
+        similarityFactory = new SimilarityFactory() {
+          public Similarity getSimilarity() {
+            return (Similarity) obj;
+          }
+        };
+      }
+      log.fine("using similarity factory" + similarityFactory.getClass().getName());
     }
 
     node = (Node) xpath.evaluate("/schema/defaultSearchField/text()", document, XPathConstants.NODE);
diff --git a/src/java/org/apache/solr/schema/SimilarityFactory.java b/src/java/org/apache/solr/schema/SimilarityFactory.java
new file mode 100644
index 0000000..7cefcc4
--- /dev/null
+++ b/src/java/org/apache/solr/schema/SimilarityFactory.java
@@ -0,0 +1,13 @@
+package org.apache.solr.schema;
+
+import org.apache.lucene.search.Similarity;
+import org.apache.solr.common.params.SolrParams;
+
+public abstract class SimilarityFactory {
+  protected SolrParams params;
+
+  public void init(SolrParams params) { this.params = params; }
+  public SolrParams getParams() { return params; }
+
+  public abstract Similarity getSimilarity();
+}
diff --git a/src/test/org/apache/solr/schema/CustomSimilarityFactory.java b/src/test/org/apache/solr/schema/CustomSimilarityFactory.java
new file mode 100644
index 0000000..b5f551f
--- /dev/null
+++ b/src/test/org/apache/solr/schema/CustomSimilarityFactory.java
@@ -0,0 +1,9 @@
+package org.apache.solr.schema;
+
+import org.apache.lucene.search.Similarity;
+
+public class CustomSimilarityFactory extends SimilarityFactory {
+  public Similarity getSimilarity() {
+    return new MockConfigurableSimilarity(params.get("echo"));
+  }
+}
diff --git a/src/test/org/apache/solr/schema/IndexSchemaTest.java b/src/test/org/apache/solr/schema/IndexSchemaTest.java
index 5d495a2..8720f10 100644
--- a/src/test/org/apache/solr/schema/IndexSchemaTest.java
+++ b/src/test/org/apache/solr/schema/IndexSchemaTest.java
@@ -26,6 +26,7 @@ import org.apache.solr.core.SolrCore;
 import org.apache.solr.request.LocalSolrQueryRequest;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.util.AbstractSolrTestCase;
+import org.apache.lucene.search.Similarity;
 
 
 public class IndexSchemaTest extends AbstractSolrTestCase {
@@ -82,4 +83,11 @@ public class IndexSchemaTest extends AbstractSolrTestCase {
             ,"//result/doc[1]/int[@name='id'][.='10']"
             );
   }
+
+  public void testSimilarityFactory() {
+    SolrCore core = h.getCore();
+    Similarity similarity = core.getSchema().getSimilarity();
+    assertTrue("wrong class", similarity instanceof MockConfigurableSimilarity);
+    assertEquals("is there an echo?", ((MockConfigurableSimilarity)similarity).getPassthrough());
+  }
 }
diff --git a/src/test/org/apache/solr/schema/MockConfigurableSimilarity.java b/src/test/org/apache/solr/schema/MockConfigurableSimilarity.java
new file mode 100644
index 0000000..ee416f3
--- /dev/null
+++ b/src/test/org/apache/solr/schema/MockConfigurableSimilarity.java
@@ -0,0 +1,15 @@
+package org.apache.solr.schema;
+
+import org.apache.lucene.search.DefaultSimilarity;
+
+public class MockConfigurableSimilarity extends DefaultSimilarity {
+  private String passthrough;
+
+  public MockConfigurableSimilarity(String passthrough) {
+    this.passthrough = passthrough;
+  }
+
+  public String getPassthrough() {
+    return passthrough;
+  }
+}
diff --git a/src/test/test-files/solr/conf/schema.xml b/src/test/test-files/solr/conf/schema.xml
index 59aa31f..f0c6aac 100644
--- a/src/test/test-files/solr/conf/schema.xml
+++ b/src/test/test-files/solr/conf/schema.xml
@@ -446,6 +446,8 @@
       A custom similarity may be specified here, but the default is fine
       for most applications.
  -->
- <!-- <similarity class="org.apache.lucene.search.DefaultSimilarity"/> -->
+ <similarity class="org.apache.solr.schema.CustomSimilarityFactory">
+   <str name="echo">is there an echo?</str>
+ </similarity>
 
 </schema>

