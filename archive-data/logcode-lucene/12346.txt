GitDiffStart: 92f3b3aee2b2be481147212705353ea88fa43639 | Fri May 25 02:18:33 2012 +0000
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory.java
index c1bee17..987ce8e 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory.java
@@ -31,6 +31,8 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import java.util.regex.Pattern;
+import java.util.regex.PatternSyntaxException;
 
 /**
  * Abstract parent class for analysis factories {@link TokenizerFactory},
@@ -102,6 +104,20 @@ public abstract class AbstractAnalysisFactory {
     return Boolean.parseBoolean(s);
   }
 
+  protected Pattern getPattern(String name) {
+    try {
+      String pat = args.get(name);
+      if (null == pat) {
+        throw new InitializationException("Configuration Error: missing parameter '" + name + "'");
+      }
+      return Pattern.compile(args.get(name));
+    } catch (PatternSyntaxException e) {
+      throw new InitializationException
+        ("Configuration Error: '" + name + "' can not be parsed in " +
+         this.getClass().getSimpleName(), e);
+    }
+  }
+
   protected CharArraySet getWordSet(ResourceLoader loader,
       String wordFiles, boolean ignoreCase) throws IOException {
     assureMatchVersion();
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 0850854..0d78bf7 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -435,6 +435,10 @@ Bug Fixes
 * SOLR-3454: Exception when using result grouping with main=true and using
   wt=javabin. (Ludovic Boutros, Martijn van Groningen)
 
+* SOLR-3446: Better errors when PatternTokenizerFactory is configured with 
+  an invalid pattern, and include the 'name' whenever possible in plugin init 
+  error messages. (hossman)
+
 Other Changes
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/analysis/PatternReplaceCharFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/PatternReplaceCharFilterFactory.java
index c0a5dfa..0801893 100644
--- a/solr/core/src/java/org/apache/solr/analysis/PatternReplaceCharFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/PatternReplaceCharFilterFactory.java
@@ -50,13 +50,7 @@ public class PatternReplaceCharFilterFactory extends CharFilterFactory {
   @Override
   public void init(Map<String, String> args) {
     super.init( args );
-    try {
-      p = Pattern.compile(args.get("pattern"));
-    } catch (PatternSyntaxException e) {
-      throw new InitializationException
-        ("Configuration Error: 'pattern' can not be parsed in " +
-         this.getClass().getName(), e);
-    }
+    p = getPattern("pattern");
     replacement = args.get( "replacement" );
     if( replacement == null )
       replacement = "";
diff --git a/solr/core/src/java/org/apache/solr/analysis/PatternReplaceFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/PatternReplaceFilterFactory.java
index 2883a7b..40654b5 100644
--- a/solr/core/src/java/org/apache/solr/analysis/PatternReplaceFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/PatternReplaceFilterFactory.java
@@ -46,14 +46,7 @@ public class PatternReplaceFilterFactory extends TokenFilterFactory {
   @Override
   public void init(Map<String, String> args) {
     super.init(args);
-    try {
-      p = Pattern.compile(args.get("pattern"));
-    } catch (PatternSyntaxException e) {
-      throw new InitializationException
-        ("Configuration Error: 'pattern' can not be parsed in " +
-         this.getClass().getName(), e);
-    }
-    
+    p = getPattern("pattern");
     replacement = args.get("replacement");
     
     String r = args.get("replace");
diff --git a/solr/core/src/java/org/apache/solr/analysis/PatternTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/PatternTokenizerFactory.java
index d5b005a..5fac340 100644
--- a/solr/core/src/java/org/apache/solr/analysis/PatternTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/PatternTokenizerFactory.java
@@ -79,13 +79,8 @@ public class PatternTokenizerFactory extends TokenizerFactory
   @Override
   public void init(Map<String,String> args) 
   {
-    this.args = args;
-    String regex = args.get( PATTERN );
-    if( regex == null ) {
-      throw new InitializationException("missing required argument: " + PATTERN);
-    }
-    int flags = 0; // TODO? -- read flags from config CASE_INSENSITIVE, etc
-    pattern = Pattern.compile( regex, flags );
+    super.init(args);
+    pattern = getPattern( PATTERN );
     
     group = -1;  // use 'split'
     String g = args.get( GROUP );
diff --git a/solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java b/solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java
index a5ac493..3dd6906 100644
--- a/solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java
+++ b/solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java
@@ -133,10 +133,9 @@ public abstract class AbstractPluginLoader<T>
       for (int i=0; i<nodes.getLength(); i++) {
         Node node = nodes.item(i);
   
-        // In a production environment, we can tolerate an error in some request handlers, 
-        // still load the others, and have a working system.
+        String name = null;
         try {
-          String name       = DOMUtil.getAttr(node,"name", requireName?type:null);
+          name              = DOMUtil.getAttr(node,"name", requireName?type:null);
           String className  = DOMUtil.getAttr(node,"class", type);
           String defaultStr = DOMUtil.getAttr(node,"default", null );
             
@@ -168,7 +167,9 @@ public abstract class AbstractPluginLoader<T>
         catch (Exception ex) {
           SolrException e = new SolrException
             (ErrorCode.SERVER_ERROR,
-             "Plugin init failure for " + type + ":" + ex.getMessage(), ex);
+             "Plugin init failure for " + type + 
+             (null != name ? (" \"" + name + "\"") : "") +
+             ": " + ex.getMessage(), ex);
           throw e;
         }
       }

