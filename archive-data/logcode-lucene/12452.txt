GitDiffStart: 373dc4a2df872769be02ee96971202ad79592a81 | Thu May 17 19:16:27 2012 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/index/FieldInfos.java b/lucene/core/src/java/org/apache/lucene/index/FieldInfos.java
index 134f2d8..e617935 100644
--- a/lucene/core/src/java/org/apache/lucene/index/FieldInfos.java
+++ b/lucene/core/src/java/org/apache/lucene/index/FieldInfos.java
@@ -25,15 +25,9 @@ import org.apache.lucene.index.FieldInfo.IndexOptions;
  * Collection of {@link FieldInfo}s (accessible by number or by name).
  *  @lucene.experimental
  */
-public abstract class FieldInfos implements Cloneable,Iterable<FieldInfo> {
+public abstract class FieldInfos implements Iterable<FieldInfo> {
  
   /**
-   * Returns a deep clone of this FieldInfos instance.
-   */
-  @Override
-  public abstract FieldInfos clone();
-
-  /**
    * Return the fieldinfo object referenced by the field name
    * @return the FieldInfo object or null when the given fieldName
    * doesn't exist.
diff --git a/lucene/core/src/java/org/apache/lucene/index/MutableFieldInfos.java b/lucene/core/src/java/org/apache/lucene/index/MutableFieldInfos.java
index 0bf303f..efb8446 100644
--- a/lucene/core/src/java/org/apache/lucene/index/MutableFieldInfos.java
+++ b/lucene/core/src/java/org/apache/lucene/index/MutableFieldInfos.java
@@ -133,19 +133,6 @@ final class MutableFieldInfos extends FieldInfos {
         + " already taken";
     return fieldNumber;
   }
-
-  /**
-   * Returns a deep clone of this FieldInfos instance.
-   */
-  @Override
-  synchronized public MutableFieldInfos clone() {
-    MutableFieldInfos fis = new MutableFieldInfos(globalFieldNumbers);
-    for (FieldInfo fi : this) {
-      FieldInfo clone = fi.clone();
-      fis.putInternal(clone);
-    }
-    return fis;
-  }
   
   /**
    * Assumes the fields are not storing term vectors.
diff --git a/lucene/core/src/java/org/apache/lucene/index/ReadOnlyFieldInfos.java b/lucene/core/src/java/org/apache/lucene/index/ReadOnlyFieldInfos.java
index cb1d575..08a5f10 100644
--- a/lucene/core/src/java/org/apache/lucene/index/ReadOnlyFieldInfos.java
+++ b/lucene/core/src/java/org/apache/lucene/index/ReadOnlyFieldInfos.java
@@ -112,16 +112,4 @@ public final class ReadOnlyFieldInfos extends FieldInfos {
   public FieldInfo fieldInfo(int fieldNumber) {
     return (fieldNumber >= 0) ? byNumber.get(fieldNumber) : null;
   }
-
-  // nocommit: probably unnecessary
-  @Override
-  public ReadOnlyFieldInfos clone() {
-    FieldInfo infos[] = new FieldInfo[size()];
-    int upto = 0;
-    for (FieldInfo info : this) {
-      infos[upto++] = info.clone();
-    }
-    return new ReadOnlyFieldInfos(infos);
-  }
-
 }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestFieldInfos.java b/lucene/core/src/test/org/apache/lucene/index/TestFieldInfos.java
index b32cbaa..a25f1e1 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestFieldInfos.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestFieldInfos.java
@@ -104,10 +104,6 @@ public class TestFieldInfos extends LuceneTestCase {
     FieldInfos fieldInfos = createAndWriteFieldInfos(dir, name);
     FieldInfos readOnly = readFieldInfos(dir, name);
     assertReadOnly(readOnly, fieldInfos);
-    FieldInfos readOnlyClone = readOnly.clone();
-    assertNotSame(readOnly, readOnlyClone);
-    // clone is also read only - no global field map
-    assertReadOnly(readOnlyClone, fieldInfos);
     dir.close();
   }
   

