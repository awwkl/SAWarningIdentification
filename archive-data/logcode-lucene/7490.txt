GitDiffStart: f7d1b43c9ec9631304d8018c1d3f570a73fa1730 | Thu Nov 21 06:27:11 2013 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 216b125..fca3198 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -94,6 +94,10 @@ New Features
 * SOLR-5208: Support for the setting of core.properties key/values at create-time on 
   Collections API (Erick Erickson)
 
+* SOLR-5428: New 'stats.calcdistinct' parameter in StatsComponent returns
+  set of distinct values and their count. This can also be specified per field
+  e.g. 'f.field.stats.calcdistinct'. (Elran Dvir via shalin)
+
 Bug Fixes
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats.java b/solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats.java
index 6cd9a19..0a8703e 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats.java
@@ -48,6 +48,7 @@ public class FieldFacetStats {
   public final String name;
   final SchemaField facet_sf;
   final SchemaField field_sf;
+  final boolean calcDistinct;
 
   public final Map<String, StatsValues> facetStatsValues;
 
@@ -63,10 +64,11 @@ public class FieldFacetStats {
 
   private final BytesRef tempBR = new BytesRef();
 
-  public FieldFacetStats(SolrIndexSearcher searcher, String name, SchemaField field_sf, SchemaField facet_sf) {
+  public FieldFacetStats(SolrIndexSearcher searcher, String name, SchemaField field_sf, SchemaField facet_sf, boolean calcDistinct) {
     this.name = name;
     this.field_sf = field_sf;
     this.facet_sf = facet_sf;
+    this.calcDistinct = calcDistinct;
 
     topLevelReader = searcher.getAtomicReader();
     valueSource = facet_sf.getType().getValueSource(facet_sf, null);
@@ -78,7 +80,7 @@ public class FieldFacetStats {
   private StatsValues getStatsValues(String key) throws IOException {
     StatsValues stats = facetStatsValues.get(key);
     if (stats == null) {
-      stats = StatsValuesFactory.createStatsValues(field_sf);
+      stats = StatsValuesFactory.createStatsValues(field_sf, calcDistinct);
       facetStatsValues.put(key, stats);
       stats.setNextReader(context);
     }
@@ -139,7 +141,7 @@ public class FieldFacetStats {
       String key = (String) pairs.getKey();
       StatsValues facetStats = facetStatsValues.get(key);
       if (facetStats == null) {
-        facetStats = StatsValuesFactory.createStatsValues(field_sf);
+        facetStats = StatsValuesFactory.createStatsValues(field_sf, calcDistinct);
         facetStatsValues.put(key, facetStats);
       }
       Integer count = (Integer) pairs.getValue();
diff --git a/solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java b/solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java
index 11a4c82..3af0f62 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/StatsComponent.java
@@ -167,8 +167,9 @@ class StatsInfo {
     String[] statsFs = params.getParams(StatsParams.STATS_FIELD);
     if (statsFs != null) {
       for (String field : statsFs) {
+        boolean calcDistinct = params.getFieldBool(field, StatsParams.STATS_CALC_DISTINCT, false);
         SchemaField sf = rb.req.getSchema().getField(field);
-        statsFields.put(field, StatsValuesFactory.createStatsValues(sf));
+        statsFields.put(field, StatsValuesFactory.createStatsValues(sf, calcDistinct));
       }
     }
   }
@@ -207,6 +208,7 @@ class SimpleStats {
     if (null != statsFs) {
       final IndexSchema schema = searcher.getSchema();
       for (String f : statsFs) {
+        boolean calcDistinct = params.getFieldBool(f, StatsParams.STATS_CALC_DISTINCT, false);
         String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);
         if (facets == null) {
           facets = new String[0]; // make sure it is something...
@@ -218,9 +220,9 @@ class SimpleStats {
         if (sf.multiValued() || ft.multiValuedFieldCache()) {
           //use UnInvertedField for multivalued fields
           UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);
-          stv = uif.getStats(searcher, docs, facets).getStatsValues();
+          stv = uif.getStats(searcher, docs, calcDistinct, facets).getStatsValues();
         } else {
-          stv = getFieldCacheStats(f, facets);
+          stv = getFieldCacheStats(f, calcDistinct, facets);
         }
         if (isShard == true || (Long) stv.get("count") > 0) {
           res.add(f, stv);
@@ -232,11 +234,11 @@ class SimpleStats {
     return res;
   }
 
-  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet) throws IOException {
+  public NamedList<?> getFieldCacheStats(String fieldName, boolean calcDistinct, String[] facet) throws IOException {
     IndexSchema schema = searcher.getSchema();
     final SchemaField sf = schema.getField(fieldName);
 
-    final StatsValues allstats = StatsValuesFactory.createStatsValues(sf);
+    final StatsValues allstats = StatsValuesFactory.createStatsValues(sf, calcDistinct);
 
     List<FieldFacetStats> facetStats = new ArrayList<FieldFacetStats>();
     for( String facetField : facet ) {
@@ -247,7 +249,7 @@ class SimpleStats {
           "Stats can only facet on single-valued fields, not: " + facetField );
       }
 
-      facetStats.add(new FieldFacetStats(searcher, facetField, sf, fsf));
+      facetStats.add(new FieldFacetStats(searcher, facetField, sf, fsf, calcDistinct));
     }
 
     final Iterator<AtomicReaderContext> ctxIt = searcher.getIndexReader().leaves().iterator();
diff --git a/solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.java b/solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.java
index 2777a48..e4508af 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.java
@@ -18,10 +18,7 @@
 package org.apache.solr.handler.component;
 
 import java.io.IOException;
-import java.util.Collections;
-import java.util.Date;
-import java.util.Map;
-import java.util.HashMap;
+import java.util.*;
 
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.queries.function.FunctionValues;
@@ -44,7 +41,7 @@ public class StatsValuesFactory {
    * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues
    * @return Instance of StatsValues that will create statistics from values from a field of the given type
    */
-  public static StatsValues createStatsValues(SchemaField sf) {
+  public static StatsValues createStatsValues(SchemaField sf, boolean calcDistinct) {
     // TODO: allow for custom field types
     FieldType fieldType = sf.getType();
     if (DoubleField.class.isInstance(fieldType) ||
@@ -56,13 +53,13 @@ public class StatsValuesFactory {
         SortableIntField.class.isInstance(fieldType) ||
         SortableLongField.class.isInstance(fieldType) ||
         SortableFloatField.class.isInstance(fieldType)) {
-      return new NumericStatsValues(sf);
+      return new NumericStatsValues(sf, calcDistinct);
     } else if (DateField.class.isInstance(fieldType)) {
-      return new DateStatsValues(sf);
+      return new DateStatsValues(sf, calcDistinct);
     } else if (StrField.class.isInstance(fieldType)) {
-      return new StringStatsValues(sf);
+      return new StringStatsValues(sf, calcDistinct);
     } else if (sf.getType().getClass().equals(EnumField.class)) {
-      return new EnumStatsValues(sf);
+      return new EnumStatsValues(sf, calcDistinct);
     } else {
       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Field type " + fieldType + " is not currently supported");
     }
@@ -84,15 +81,20 @@ abstract class AbstractStatsValues<T> implements StatsValues {
   protected T min;
   protected long missing;
   protected long count;
+  protected long countDistinct;
+  protected Set<T> distinctValues;
   private ValueSource valueSource;
   protected FunctionValues values;
+  protected boolean calcDistinct = false;
   
   // facetField   facetValue
   protected Map<String, Map<String, StatsValues>> facets = new HashMap<String, Map<String, StatsValues>>();
 
-  protected AbstractStatsValues(SchemaField sf) {
+  protected AbstractStatsValues(SchemaField sf, boolean calcDistinct) {
     this.sf = sf;
     this.ft = sf.getType();
+    this.distinctValues = new TreeSet<T>();
+    this.calcDistinct = calcDistinct;
   }
 
   /**
@@ -102,6 +104,10 @@ abstract class AbstractStatsValues<T> implements StatsValues {
   public void accumulate(NamedList stv) {
     count += (Long) stv.get("count");
     missing += (Long) stv.get("missing");
+    if (calcDistinct) {
+      distinctValues.addAll((Collection<T>) stv.get("distinctValues"));
+      countDistinct = distinctValues.size();
+    }
 
     updateMinMax((T) stv.get("min"), (T) stv.get("max"));
     updateTypeSpecificStats(stv);
@@ -123,7 +129,7 @@ abstract class AbstractStatsValues<T> implements StatsValues {
         String val = vals.getName(j);
         StatsValues vvals = addTo.get(val);
         if (vvals == null) {
-          vvals = StatsValuesFactory.createStatsValues(sf);
+          vvals = StatsValuesFactory.createStatsValues(sf, calcDistinct);
           addTo.put(val, vvals);
         }
         vvals.accumulate((NamedList) vals.getVal(j));
@@ -142,6 +148,10 @@ abstract class AbstractStatsValues<T> implements StatsValues {
 
   public void accumulate(T value, int count) {
     this.count += count;
+    if (calcDistinct) {
+      distinctValues.add(value);
+      countDistinct = distinctValues.size();
+    }
     updateMinMax(value, value);
     updateTypeSpecificStats(value, count);
   }
@@ -181,6 +191,11 @@ abstract class AbstractStatsValues<T> implements StatsValues {
     res.add("max", max);
     res.add("count", count);
     res.add("missing", missing);
+    if (calcDistinct) {
+      res.add("distinctValues", distinctValues);
+      res.add("countDistinct", countDistinct);
+    }
+
     addTypeSpecificStats(res);
 
      // add the facet stats
@@ -242,8 +257,8 @@ class NumericStatsValues extends AbstractStatsValues<Number> {
   double sum;
   double sumOfSquares;
 
-  public NumericStatsValues(SchemaField sf) {
-    super(sf);
+  public NumericStatsValues(SchemaField sf, boolean calcDistinct) {
+    super(sf, calcDistinct);
     min = Double.POSITIVE_INFINITY;
     max = Double.NEGATIVE_INFINITY;
   }
@@ -317,8 +332,8 @@ class NumericStatsValues extends AbstractStatsValues<Number> {
  */
 class EnumStatsValues extends AbstractStatsValues<EnumFieldValue> {
 
-  public EnumStatsValues(SchemaField sf) {
-    super(sf);
+  public EnumStatsValues(SchemaField sf, boolean calcDistinct) {
+    super(sf, calcDistinct);
   }
 
   /**
@@ -386,8 +401,8 @@ class DateStatsValues extends AbstractStatsValues<Date> {
   private long sum = -1;
   double sumOfSquares = 0;
 
-  public DateStatsValues(SchemaField sf) {
-    super(sf);
+  public DateStatsValues(SchemaField sf, boolean calcDistinct) {
+    super(sf, calcDistinct);
   }
 
   @Override
@@ -469,8 +484,8 @@ class DateStatsValues extends AbstractStatsValues<Date> {
  */
 class StringStatsValues extends AbstractStatsValues<String> {
 
-  public StringStatsValues(SchemaField sf) {
-    super(sf);
+  public StringStatsValues(SchemaField sf, boolean calcDistinct) {
+    super(sf, calcDistinct);
   }
 
   @Override
diff --git a/solr/core/src/java/org/apache/solr/request/UnInvertedField.java b/solr/core/src/java/org/apache/solr/request/UnInvertedField.java
index 1939b63..1a33b8a 100644
--- a/solr/core/src/java/org/apache/solr/request/UnInvertedField.java
+++ b/solr/core/src/java/org/apache/solr/request/UnInvertedField.java
@@ -464,11 +464,12 @@ public class UnInvertedField extends DocTermOrds {
    *
    * @param searcher The Searcher to use to gather the statistics
    * @param baseDocs The {@link org.apache.solr.search.DocSet} to gather the stats on
+   * @param calcDistinct whether distinct values should be collected and counted
    * @param facet One or more fields to facet on.
    * @return The {@link org.apache.solr.handler.component.StatsValues} collected
    * @throws IOException If there is a low-level I/O error.
    */
-  public StatsValues getStats(SolrIndexSearcher searcher, DocSet baseDocs, String[] facet) throws IOException {
+  public StatsValues getStats(SolrIndexSearcher searcher, DocSet baseDocs, boolean calcDistinct, String[] facet) throws IOException {
     //this function is ripped off nearly wholesale from the getCounts function to use
     //for multiValued fields within the StatsComponent.  may be useful to find common
     //functionality between the two and refactor code somewhat
@@ -477,7 +478,7 @@ public class UnInvertedField extends DocTermOrds {
     SchemaField sf = searcher.getSchema().getField(field);
    // FieldType ft = sf.getType();
 
-    StatsValues allstats = StatsValuesFactory.createStatsValues(sf);
+    StatsValues allstats = StatsValuesFactory.createStatsValues(sf, calcDistinct);
 
 
     DocSet docs = baseDocs;
@@ -494,7 +495,7 @@ public class UnInvertedField extends DocTermOrds {
     SortedDocValues si;
     for (String f : facet) {
       SchemaField facet_sf = searcher.getSchema().getField(f);
-      finfo[i] = new FieldFacetStats(searcher, f, sf, facet_sf);
+      finfo[i] = new FieldFacetStats(searcher, f, sf, facet_sf, calcDistinct);
       i++;
     }
 
diff --git a/solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java b/solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java
index 98bf0dd..338ee57 100644
--- a/solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java
+++ b/solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java
@@ -80,12 +80,14 @@ public class StatsComponentTest extends AbstractSolrTestCase {
     assertU(adoc("id", "4", f, "-40"));
     assertU(commit());
 
-    assertQ("test statistics values", req("q","*:*", "stats","true", "stats.field",f)
+    assertQ("test statistics values", req("q", "*:*", "stats", "true", "stats.field", f, "stats.calcdistinct", "true")
             , "//double[@name='min'][.='-40.0']"
             , "//double[@name='max'][.='-10.0']"
             , "//double[@name='sum'][.='-100.0']"
             , "//long[@name='count'][.='4']"
             , "//long[@name='missing'][.='0']"
+            , "//long[@name='countDistinct'][.='4']"
+            , "count(//arr[@name='distinctValues']/*)='4'"
             , "//double[@name='sumOfSquares'][.='3000.0']"
             , "//double[@name='mean'][.='-25.0']"
             , "//double[@name='stddev'][.='12.909944487358056']"
@@ -101,45 +103,53 @@ public class StatsComponentTest extends AbstractSolrTestCase {
     assertU(adoc("id", "5", "active_s", "false"));
     assertU(commit());
 
-    assertQ("test statistics values", req("q","*:*", "stats","true", "stats.field",f)
+    assertQ("test statistics values", req("q", "*:*", "stats", "true", "stats.field", f, "stats.calcdistinct", "true")
             , "//double[@name='min'][.='-100.0']"
             , "//double[@name='max'][.='200.0']"
             , "//double[@name='sum'][.='9.0']"
             , "//long[@name='count'][.='8']"
             , "//long[@name='missing'][.='1']"
+            , "//long[@name='countDistinct'][.='8']"
+            , "count(//arr[@name='distinctValues']/*)='8'"
             , "//double[@name='sumOfSquares'][.='53101.0']"
             , "//double[@name='mean'][.='1.125']"
             , "//double[@name='stddev'][.='87.08852228787508']"
     );
 
-    assertQ("test statistics values", req("q","*:*", "stats","true", "stats.field",f, "stats.facet","active_s")
+    assertQ("test statistics values", req("q", "*:*", "stats", "true", "stats.field", f, "stats.facet", "active_s", "stats.calcdistinct", "true")
             , "//double[@name='min'][.='-100.0']"
             , "//double[@name='max'][.='200.0']"
             , "//double[@name='sum'][.='9.0']"
             , "//long[@name='count'][.='8']"
             , "//long[@name='missing'][.='1']"
+            , "//long[@name='countDistinct'][.='8']"
+            , "count(//lst[@name='" + f + "']/arr[@name='distinctValues']/*)='8'"
             , "//double[@name='sumOfSquares'][.='53101.0']"
             , "//double[@name='mean'][.='1.125']"
             , "//double[@name='stddev'][.='87.08852228787508']"
     );
 
-    assertQ("test value for active_s=true", req("q","*:*", "stats","true", "stats.field",f, "stats.facet","active_s")
+    assertQ("test value for active_s=true", req("q", "*:*", "stats", "true", "stats.field", f, "stats.facet", "active_s", "stats.calcdistinct", "true")
             , "//lst[@name='true']/double[@name='min'][.='-100.0']"
             , "//lst[@name='true']/double[@name='max'][.='200.0']"
             , "//lst[@name='true']/double[@name='sum'][.='70.0']"
             , "//lst[@name='true']/long[@name='count'][.='4']"
             , "//lst[@name='true']/long[@name='missing'][.='0']"
+            , "//lst[@name='true']//long[@name='countDistinct'][.='4']"
+            , "count(//lst[@name='true']/arr[@name='distinctValues']/*)='4'"
             , "//lst[@name='true']/double[@name='sumOfSquares'][.='50500.0']"
             , "//lst[@name='true']/double[@name='mean'][.='17.5']"
             , "//lst[@name='true']/double[@name='stddev'][.='128.16005617976296']"
     );
 
-    assertQ("test value for active_s=false", req("q","*:*", "stats","true", "stats.field",f, "stats.facet","active_s", "indent","true")
+    assertQ("test value for active_s=false", req("q", "*:*", "stats", "true", "stats.field", f, "stats.facet", "active_s", "stats.calcdistinct", "true", "indent", "true")
             , "//lst[@name='false']/double[@name='min'][.='-40.0']"
             , "//lst[@name='false']/double[@name='max'][.='10.0']"
             , "//lst[@name='false']/double[@name='sum'][.='-61.0']"
             , "//lst[@name='false']/long[@name='count'][.='4']"
             , "//lst[@name='false']/long[@name='missing'][.='1']"
+            , "//lst[@name='true']//long[@name='countDistinct'][.='4']"
+            , "count(//lst[@name='true']/arr[@name='distinctValues']/*)='4'"
             , "//lst[@name='false']/double[@name='sumOfSquares'][.='2601.0']"
             , "//lst[@name='false']/double[@name='mean'][.='-15.25']"
             , "//lst[@name='false']/double[@name='stddev'][.='23.59908190304586']"
@@ -160,6 +170,7 @@ public class StatsComponentTest extends AbstractSolrTestCase {
     args.put(CommonParams.Q, "*:*");
     args.put(StatsParams.STATS, "true");
     args.put(StatsParams.STATS_FIELD, "active_s");
+    args.put("f.active_s.stats.calcdistinct","true");
     args.put("indent", "true");
     SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));
 
@@ -167,7 +178,9 @@ public class StatsComponentTest extends AbstractSolrTestCase {
             "//str[@name='min'][.='string1']",
             "//str[@name='max'][.='string3']",
             "//long[@name='count'][.='3']",
-            "//long[@name='missing'][.='1']");
+            "//long[@name='missing'][.='1']",
+            "//long[@name='countDistinct'][.='3']",
+            "count(//arr[@name='distinctValues']/str)='3'");
   }
 
   public void testFieldStatisticsResultsDateField() throws Exception {
@@ -188,6 +201,7 @@ public class StatsComponentTest extends AbstractSolrTestCase {
     args.put(CommonParams.Q, "*:*");
     args.put(StatsParams.STATS, "true");
     args.put(StatsParams.STATS_FIELD, "active_dt");
+    args.put("f.active_dt.stats.calcdistinct","true");
     args.put("indent", "true");
     SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));
 
@@ -195,14 +209,15 @@ public class StatsComponentTest extends AbstractSolrTestCase {
             "//long[@name='count'][.='2']",
             "//long[@name='missing'][.='1']",
             "//date[@name='min'][.='1970-01-02T10:17:36Z']",
-            "//date[@name='max'][.='1970-01-12T10:20:54Z']"
+            "//date[@name='max'][.='1970-01-12T10:20:54Z']",
+            "//long[@name='countDistinct'][.='2']",
+            "count(//arr[@name='distinctValues']/date)='2'"
         //  "//date[@name='sum'][.='1970-01-13T20:38:30Z']",  // sometimes 29.999Z
         //  "//date[@name='mean'][.='1970-01-07T10:19:15Z']"  // sometiems 14.999Z
             );
   }
 
 
-
   public void doTestFieldStatisticsMissingResult(String f) throws Exception {
     assertU(adoc("id", "1", f, "-10"));
     assertU(adoc("id", "2", f, "-20"));
@@ -211,12 +226,14 @@ public class StatsComponentTest extends AbstractSolrTestCase {
     assertU(adoc("id", "4", f, "-40"));
     assertU(commit());
 
-    assertQ("test statistics values", req("q","*:*", "stats","true", "stats.field",f)
+    assertQ("test statistics values", req("q", "*:*", "stats", "true", "stats.field", f, "stats.calcdistinct", "true")
             , "//double[@name='min'][.='-40.0']"
             , "//double[@name='max'][.='-10.0']"
             , "//double[@name='sum'][.='-70.0']"
             , "//long[@name='count'][.='3']"
             , "//long[@name='missing'][.='1']"
+            , "//long[@name='countDistinct'][.='3']"
+            , "count(//arr[@name='distinctValues']/*)='3'"
             , "//double[@name='sumOfSquares'][.='2100.0']"
             , "//double[@name='mean'][.='-23.333333333333332']"
             , "//double[@name='stddev'][.='15.275252316519467']"
@@ -233,24 +250,28 @@ public class StatsComponentTest extends AbstractSolrTestCase {
     
     final String pre = "//lst[@name='stats_fields']/lst[@name='"+f+"']/lst[@name='facets']/lst[@name='active_s']";
 
-    assertQ("test value for active_s=true", req("q","*:*", "stats","true", "stats.field",f, "stats.facet","active_s","stats.facet","other_s","indent","true")
+    assertQ("test value for active_s=true", req("q", "*:*", "stats", "true", "stats.field", f, "stats.facet", "active_s", "stats.facet", "other_s", "stats.calcdistinct", "true", "indent", "true")
             , "*[count("+pre+")=1]"
             , pre+"/lst[@name='true']/double[@name='min'][.='10.0']"
             , pre+"/lst[@name='true']/double[@name='max'][.='20.0']"
             , pre+"/lst[@name='true']/double[@name='sum'][.='30.0']"
             , pre+"/lst[@name='true']/long[@name='count'][.='2']"
             , pre+"/lst[@name='true']/long[@name='missing'][.='0']"
+            , pre + "/lst[@name='true']/long[@name='countDistinct'][.='2']"
+            , "count(" + pre + "/lst[@name='true']/arr[@name='distinctValues']/*)='2'"
             , pre+"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']"
             , pre+"/lst[@name='true']/double[@name='mean'][.='15.0']"
             , pre+"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']"
     );
 
-    assertQ("test value for active_s=false", req("q","*:*", "stats","true", "stats.field",f, "stats.facet","active_s")
+    assertQ("test value for active_s=false", req("q", "*:*", "stats", "true", "stats.field", f, "stats.facet", "active_s", "stats.calcdistinct", "true")
             , pre+"/lst[@name='false']/double[@name='min'][.='30.0']"
             , pre+"/lst[@name='false']/double[@name='max'][.='40.0']"
             , pre+"/lst[@name='false']/double[@name='sum'][.='70.0']"
             , pre+"/lst[@name='false']/long[@name='count'][.='2']"
             , pre+"/lst[@name='false']/long[@name='missing'][.='0']"
+            , pre + "/lst[@name='true']/long[@name='countDistinct'][.='2']"
+            , "count(" + pre + "/lst[@name='true']/arr[@name='distinctValues']/*)='2'"
             , pre+"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']"
             , pre+"/lst[@name='false']/double[@name='mean'][.='35.0']"
             , pre+"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']"
@@ -265,23 +286,27 @@ public class StatsComponentTest extends AbstractSolrTestCase {
       assertU(adoc("id", "4", f, "40", "active_s", "false"));
       assertU(commit());
 
-      assertQ("test value for active_s=true", req("q","*:*", "stats","true", "stats.field",f, "stats.facet","active_s")
+    assertQ("test value for active_s=true", req("q", "*:*", "stats", "true", "stats.field", f, "stats.facet", "active_s", "stats.calcdistinct", "true")
               , "//lst[@name='true']/double[@name='min'][.='10.0']"
               , "//lst[@name='true']/double[@name='max'][.='20.0']"
               , "//lst[@name='true']/double[@name='sum'][.='30.0']"
               , "//lst[@name='true']/long[@name='count'][.='2']"
               , "//lst[@name='true']/long[@name='missing'][.='0']"
+              , "//lst[@name='true']/long[@name='countDistinct'][.='2']"
+              , "count(//lst[@name='true']/arr[@name='distinctValues']/*)='2'"
               , "//lst[@name='true']/double[@name='sumOfSquares'][.='500.0']"
               , "//lst[@name='true']/double[@name='mean'][.='15.0']"
               , "//lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']"
       );
 
-      assertQ("test value for active_s=false", req("q","*:*", "stats","true", "stats.field",f, "stats.facet","active_s")
+    assertQ("test value for active_s=false", req("q", "*:*", "stats", "true", "stats.field", f, "stats.facet", "active_s", "stats.calcdistinct", "true")
               , "//lst[@name='false']/double[@name='min'][.='40.0']"
               , "//lst[@name='false']/double[@name='max'][.='40.0']"
               , "//lst[@name='false']/double[@name='sum'][.='40.0']"
               , "//lst[@name='false']/long[@name='count'][.='1']"
               , "//lst[@name='false']/long[@name='missing'][.='1']"
+              , "//lst[@name='false']/long[@name='countDistinct'][.='1']"
+              , "count(//lst[@name='false']/arr[@name='distinctValues']/*)='1'"
               , "//lst[@name='false']/double[@name='sumOfSquares'][.='1600.0']"
               , "//lst[@name='false']/double[@name='mean'][.='40.0']"
               , "//lst[@name='false']/double[@name='stddev'][.='0.0']"
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/SolrQuery.java b/solr/solrj/src/java/org/apache/solr/client/solrj/SolrQuery.java
index 0e933dd..f510c47 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/SolrQuery.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/SolrQuery.java
@@ -782,6 +782,14 @@ public class SolrQuery extends ModifiableSolrParams
     }
   }
 
+  public void addStatsFieldCalcDistinct(String field, boolean calcDistinct) {
+    if (field == null) {
+      this.add(StatsParams.STATS_CALC_DISTINCT, Boolean.toString(calcDistinct));
+    } else {
+      this.add("f." + field + "." + StatsParams.STATS_CALC_DISTINCT, Boolean.toString(calcDistinct));
+    }
+  }
+
   public SolrQuery setFilterQueries(String ... fq) {
     this.set(CommonParams.FQ, fq);
     return this;
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo.java b/solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo.java
index 3e3f216..b56938b 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo.java
@@ -20,6 +20,7 @@ import org.apache.solr.common.util.NamedList;
 
 import java.io.Serializable;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -37,6 +38,8 @@ public class FieldStatsInfo implements Serializable {
   Object max;
   Object sum;
   Long count;
+  Long countDistinct;
+  Collection<Object> distinctValues;
   Long missing;
   Object mean = null;
   Double sumOfSquares = null;
@@ -61,6 +64,12 @@ public class FieldStatsInfo implements Serializable {
       else if( "count".equals( entry.getKey() ) ) {
         count = (Long)entry.getValue();
       }
+      else if ("countDistinct".equals(entry.getKey())) {
+        countDistinct = (Long) entry.getValue();
+      }
+      else if ("distinctValues".equals(entry.getKey())) {
+        distinctValues = (Collection<Object>) entry.getValue();
+      }
       else if( "missing".equals( entry.getKey() ) ) {
         missing = (Long)entry.getValue();
       }
@@ -112,6 +121,12 @@ public class FieldStatsInfo implements Serializable {
     if( count != null ) {
       sb.append( " count:").append( count );
     }
+    if (countDistinct != null) {
+      sb.append(" countDistinct:").append(countDistinct);
+    }
+    if (distinctValues != null) {
+      sb.append(" distinctValues:").append(distinctValues);
+    }
     if( missing != null ) {
       sb.append( " missing:").append( missing );
     }
@@ -145,6 +160,14 @@ public class FieldStatsInfo implements Serializable {
     return count;
   }
 
+  public Long getCountDistinct() {
+    return countDistinct;
+  }
+
+  public Collection<Object> getDistinctValues() {
+    return distinctValues;
+  }
+
   public Long getMissing() {
     return missing;
   }
diff --git a/solr/solrj/src/java/org/apache/solr/common/params/StatsParams.java b/solr/solrj/src/java/org/apache/solr/common/params/StatsParams.java
index 628b549..6fb7935 100644
--- a/solr/solrj/src/java/org/apache/solr/common/params/StatsParams.java
+++ b/solr/solrj/src/java/org/apache/solr/common/params/StatsParams.java
@@ -24,4 +24,5 @@ public interface StatsParams {
   public static final String STATS = "stats";
   public static final String STATS_FIELD = STATS + ".field";
   public static final String STATS_FACET = STATS + ".facet";
+  public static final String STATS_CALC_DISTINCT = STATS + ".calcdistinct";
 }

