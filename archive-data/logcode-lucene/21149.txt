GitDiffStart: b88b6a73ad19b9dd65bde1d78a45b4edc576fbd0 | Tue Sep 16 14:24:17 2008 +0000
diff --git a/src/java/org/apache/lucene/util/CloseableThreadLocal.java b/src/java/org/apache/lucene/util/CloseableThreadLocal.java
index 23fe527..b936c56 100644
--- a/src/java/org/apache/lucene/util/CloseableThreadLocal.java
+++ b/src/java/org/apache/lucene/util/CloseableThreadLocal.java
@@ -42,17 +42,26 @@ import java.lang.ref.WeakReference;
  *  references are cleared and then GC is freely able to
  *  reclaim space by objects stored in it. */
 
-public final class CloseableThreadLocal {
+public class CloseableThreadLocal {
 
   private ThreadLocal t = new ThreadLocal();
 
   private Map hardRefs = new HashMap();
-
+  
+  protected Object initialValue() {
+    return null;
+  }
+  
   public Object get() {
     WeakReference weakRef = (WeakReference) t.get();
-    if (weakRef == null)
-      return null;
-    else {
+    if (weakRef == null) {
+      Object iv = initialValue();
+      if (iv != null) {
+        set(iv);
+        return iv;
+      } else
+        return null;
+    } else {
       Object v = weakRef.get();
       // This can never be null, because we hold a hard
       // reference to the underlying object:
diff --git a/src/test/org/apache/lucene/index/TestCloseableThreadLocal.java b/src/test/org/apache/lucene/index/TestCloseableThreadLocal.java
new file mode 100644
index 0000000..3a37603
--- /dev/null
+++ b/src/test/org/apache/lucene/index/TestCloseableThreadLocal.java
@@ -0,0 +1,20 @@
+package org.apache.lucene.index;
+
+import org.apache.lucene.util.CloseableThreadLocal;
+import org.apache.lucene.util.LuceneTestCase;
+
+public class TestCloseableThreadLocal extends LuceneTestCase {
+  public static final String TEST_VALUE = "initvaluetest";
+  
+  public void testInitValue() {
+    InitValueThreadLocal tl = new InitValueThreadLocal();
+    String str = (String)tl.get();
+    assertEquals(TEST_VALUE, str);
+  }
+  
+  public class InitValueThreadLocal extends CloseableThreadLocal {
+    protected Object initialValue() {
+      return TEST_VALUE;
+    } 
+  }
+}

