GitDiffStart: e127db28f93894b3d8634d5e28a5fe8c7bdf7d4b | Mon Jan 18 23:19:26 2016 +0000
diff --git a/lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java b/lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java
index b3e2c40..2308acf 100644
--- a/lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java
+++ b/lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java
@@ -23,9 +23,11 @@ import java.util.Arrays;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Set;
 
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.BinaryDocValuesField;
@@ -290,20 +292,27 @@ public class AllGroupHeadsCollectorTest extends LuceneTestCase {
       }
 
       final IndexSearcher s = newSearcher(r);
-      
+
+      Set<Integer> seenIDs = new HashSet<>();
       for (int contentID = 0; contentID < 3; contentID++) {
         final ScoreDoc[] hits = s.search(new TermQuery(new Term("content", "real" + contentID)), numDocs).scoreDocs;
         for (ScoreDoc hit : hits) {
-          final GroupDoc gd = groupDocs[(int) docIdToFieldId.get(hit.doc)];
+          int idValue = (int) docIdToFieldId.get(hit.doc);
+          final GroupDoc gd = groupDocs[idValue];
+          assertEquals(gd.id, idValue);
+          seenIDs.add(idValue);
           assertTrue(gd.score == 0.0);
           gd.score = hit.score;
-          int docId = gd.id;
-          assertEquals(docId, docIdToFieldId.get(hit.doc));
         }
       }
-      
+
+      // make sure all groups were seen across the hits
+      assertEquals(groupDocs.length, seenIDs.size());
+
+      // make sure scores are sane
       for (GroupDoc gd : groupDocs) {
-        assertTrue(gd.score != 0.0);
+        assertTrue(Float.isFinite(gd.score));
+        assertTrue(gd.score >= 0.0);
       }
       
       for (int searchIter = 0; searchIter < 100; searchIter++) {

