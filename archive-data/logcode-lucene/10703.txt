GitDiffStart: e4fc1282abb99cf0d3b17b0778e54525fa2d283d | Sat Oct 27 05:29:53 2012 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index a6ecc0a..24c9aae 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -122,6 +122,9 @@ Bug Fixes
 * SOLR-3995: Recovery may never finish on SolrCore shutdown if the last reference to 
   a SolrCore is closed by the recovery process. (Mark Miller)
 
+* SOLR-3998: Atomic update on uniqueKey field itself causes duplicate document.
+  (Eric Spencer, yonik)
+
 Other Changes
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java b/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
index d6d7f5a..a2b14e4 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
@@ -603,11 +603,15 @@ public class DistributedUpdateProcessor extends UpdateRequestProcessor {
         for (Entry<String,Object> entry : ((Map<String,Object>) val).entrySet()) {
           String key = entry.getKey();
           Object fieldVal = entry.getValue();
+          boolean updateField = false;
           if ("add".equals(key)) {
+            updateField = true;
             oldDoc.addField( sif.getName(), fieldVal, sif.getBoost());
           } else if ("set".equals(key)) {
+            updateField = true;
             oldDoc.setField(sif.getName(),  fieldVal, sif.getBoost());
           } else if ("inc".equals(key)) {
+            updateField = true;
             SolrInputField numericField = oldDoc.get(sif.getName());
             if (numericField == null) {
               oldDoc.setField(sif.getName(),  fieldVal, sif.getBoost());
@@ -636,6 +640,12 @@ public class DistributedUpdateProcessor extends UpdateRequestProcessor {
             }
 
           }
+
+          // validate that the field being modified is not the id field.
+          if (updateField && idField.getName().equals(sif.getName())) {
+            throw new SolrException(ErrorCode.BAD_REQUEST, "Invalid update of id field: " + sif);
+          }
+
         }
       } else {
         // normal fields are treated as a "set"
diff --git a/solr/core/src/test/org/apache/solr/update/TestUpdate.java b/solr/core/src/test/org/apache/solr/update/TestUpdate.java
index 2f035ad..381231f 100644
--- a/solr/core/src/test/org/apache/solr/update/TestUpdate.java
+++ b/solr/core/src/test/org/apache/solr/update/TestUpdate.java
@@ -16,34 +16,12 @@
  */
 package org.apache.solr.update;
 
-
-import org.apache.lucene.analysis.MockAnalyzer;
-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
-import org.apache.lucene.document.FieldType;
-import org.apache.lucene.index.*;
-import org.apache.lucene.search.DocIdSetIterator;
-import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.store.Directory;
-import org.apache.lucene.util.BytesRef;
-import org.apache.noggit.ObjectBuilder;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.common.SolrException;
-import org.apache.solr.common.SolrInputDocument;
-import org.apache.solr.request.SolrQueryRequest;
-import org.apache.solr.util.TestHarness;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import java.io.IOException;
-import java.util.*;
-import java.util.concurrent.*;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.atomic.AtomicLong;
-import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantLock;
-
-import static org.apache.solr.core.SolrCore.verbose;
+import java.util.concurrent.Callable;
 
 public class TestUpdate extends SolrTestCaseJ4 {
   @BeforeClass
@@ -220,6 +198,49 @@ public class TestUpdate extends SolrTestCaseJ4 {
         ,"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}"
     );
 
+
+    // remove some fields
+    version = addAndGetVersion(sdoc(
+        "id", "1",
+        "val_is", map("set",null),
+        "val2_f", map("set",null)
+    ),
+        null);
+
+    afterUpdate.call();
+
+    assertJQ(req("qt","/get", "id","1", "fl","id,val*")
+        ,"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}"
+    );
+
+    // test that updating a unique id results in failure.
+    try {
+      ignoreException("Invalid update of id field");
+      version = addAndGetVersion(sdoc(
+          "id", map("set","1"),
+          "val_is", map("inc","2000000000")
+      ),
+          null);
+
+      fail();
+    } catch (SolrException se) {
+      resetExceptionIgnores();
+      assertEquals(400, se.code());
+      assertTrue(se.getMessage().indexOf("Invalid update of id field") >= 0);
+    }
+
+    afterUpdate.call();
+
+    assertJQ(req("qt","/get", "id","1", "fl","id,val*")
+        ,"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}"
+    );
+
+   // nothing should have changed - check with a normal query that we didn't create a duplicate
+    assertU(commit("softCommit","false"));
+    assertJQ(req("q","id:1", "fl","id")
+        ,"/response/numFound==1"
+    );
+
   }
 
 }

