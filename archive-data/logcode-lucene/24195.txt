GitDiffStart: 4114147eddd435e0b7579957642511fbec212f7e | Sat Jun 4 19:17:51 2005 +0000
diff --git a/src/java/org/apache/lucene/index/IndexReader.java b/src/java/org/apache/lucene/index/IndexReader.java
index 026b297..aff527e 100644
--- a/src/java/org/apache/lucene/index/IndexReader.java
+++ b/src/java/org/apache/lucene/index/IndexReader.java
@@ -344,8 +344,8 @@ public abstract class IndexReader {
   public abstract int numDocs();
 
   /** Returns one greater than the largest possible document number.
-   This may be used to, e.g., determine how big to allocate an array which
-   will have an element for every document number in an index.
+   * This may be used to, e.g., determine how big to allocate an array which
+   * will have an element for every document number in an index.
    */
   public abstract int maxDoc();
 
@@ -406,16 +406,15 @@ public abstract class IndexReader {
     setNorm(doc, field, Similarity.encodeNorm(value));
   }
 
-
   /** Returns an enumeration of all the terms in the index.
-   The enumeration is ordered by Term.compareTo().  Each term
-   is greater than all that precede it in the enumeration.
+   * The enumeration is ordered by Term.compareTo().  Each term
+   * is greater than all that precede it in the enumeration.
    */
   public abstract TermEnum terms() throws IOException;
 
   /** Returns an enumeration of all terms after a given term.
-   The enumeration is ordered by Term.compareTo().  Each term
-   is greater than all that precede it in the enumeration.
+   * The enumeration is ordered by Term.compareTo().  Each term
+   * is greater than all that precede it in the enumeration.
    */
   public abstract TermEnum terms(Term t) throws IOException;
 
@@ -423,14 +422,14 @@ public abstract class IndexReader {
   public abstract int docFreq(Term t) throws IOException;
 
   /** Returns an enumeration of all the documents which contain
-   <code>term</code>. For each document, the document number, the frequency of
-   the term in that document is also provided, for use in search scoring.
-   Thus, this method implements the mapping:
-   <p><ul>
-   Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>
-   </ul>
-   <p>The enumeration is ordered by document number.  Each document number
-   is greater than all that precede it in the enumeration.
+   * <code>term</code>. For each document, the document number, the frequency of
+   * the term in that document is also provided, for use in search scoring.
+   * Thus, this method implements the mapping:
+   * <p><ul>
+   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>
+   * </ul>
+   * <p>The enumeration is ordered by document number.  Each document number
+   * is greater than all that precede it in the enumeration.
    */
   public TermDocs termDocs(Term term) throws IOException {
     TermDocs termDocs = termDocs();
@@ -442,20 +441,20 @@ public abstract class IndexReader {
   public abstract TermDocs termDocs() throws IOException;
 
   /** Returns an enumeration of all the documents which contain
-   <code>term</code>.  For each document, in addition to the document number
-   and frequency of the term in that document, a list of all of the ordinal
-   positions of the term in the document is available.  Thus, this method
-   implements the mapping:
-
-   <p><ul>
-   Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,
-   &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...
-   pos<sub>freq-1</sub>&gt;
-   &gt;<sup>*</sup>
-   </ul>
-   <p> This positional information faciliates phrase and proximity searching.
-   <p>The enumeration is ordered by document number.  Each document number is
-   greater than all that precede it in the enumeration.
+   * <code>term</code>.  For each document, in addition to the document number
+   * and frequency of the term in that document, a list of all of the ordinal
+   * positions of the term in the document is available.  Thus, this method
+   * implements the mapping:
+   *
+   * <p><ul>
+   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq,
+   * &lt;pos<sub>1</sub>, pos<sub>2</sub>, ...
+   * pos<sub>freq-1</sub>&gt;
+   * &gt;<sup>*</sup>
+   * </ul>
+   * <p> This positional information faciliates phrase and proximity searching.
+   * <p>The enumeration is ordered by document number.  Each document number is
+   * greater than all that precede it in the enumeration.
    */
   public TermPositions termPositions(Term term) throws IOException {
     TermPositions termPositions = termPositions();
@@ -494,11 +493,11 @@ public abstract class IndexReader {
   }
   
   /** Deletes the document numbered <code>docNum</code>.  Once a document is
-   deleted it will not appear in TermDocs or TermPostitions enumerations.
-   Attempts to read its field with the {@link #document}
-   method will result in an error.  The presence of this document may still be
-   reflected in the {@link #docFreq} statistic, though
-   this will be corrected eventually as the index is further modified.
+   * deleted it will not appear in TermDocs or TermPostitions enumerations.
+   * Attempts to read its field with the {@link #document}
+   * method will result in an error.  The presence of this document may still be
+   * reflected in the {@link #docFreq} statistic, though
+   * this will be corrected eventually as the index is further modified.
    */
   public final synchronized void delete(int docNum) throws IOException {
     if(directoryOwner)
@@ -513,12 +512,13 @@ public abstract class IndexReader {
   protected abstract void doDelete(int docNum) throws IOException;
 
   /** Deletes all documents containing <code>term</code>.
-   This is useful if one uses a document field to hold a unique ID string for
-   the document.  Then to delete such a document, one merely constructs a
-   term with the appropriate field and the unique ID string as its text and
-   passes it to this method.  Returns the number of documents deleted.
-   See {@link #delete(int)} for information about when this deletion will 
-   become effective.
+   * This is useful if one uses a document field to hold a unique ID string for
+   * the document.  Then to delete such a document, one merely constructs a
+   * term with the appropriate field and the unique ID string as its text and
+   * passes it to this method.
+   * See {@link #delete(int)} for information about when this deletion will 
+   * become effective.
+   * @return the number of documents deleted
    */
   public final int delete(Term term) throws IOException {
     TermDocs docs = termDocs(term);
diff --git a/src/java/org/apache/lucene/index/IndexWriter.java b/src/java/org/apache/lucene/index/IndexWriter.java
index d6fd755..3bacea2 100644
--- a/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/src/java/org/apache/lucene/index/IndexWriter.java
@@ -446,7 +446,7 @@ public class IndexWriter {
 
   /**
    * Adds a document to this index.  If the document contains more than
-   * {@link #maxFieldLength} terms for a given field, the remainder are
+   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are
    * discarded.
    */
   public void addDocument(Document doc) throws IOException {
@@ -456,7 +456,7 @@ public class IndexWriter {
   /**
    * Adds a document to this index, using the provided analyzer instead of the
    * value of {@link #getAnalyzer()}.  If the document contains more than
-   * {@link #maxFieldLength} terms for a given field, the remainder are
+   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are
    * discarded.
    */
   public void addDocument(Document doc, Analyzer analyzer) throws IOException {

