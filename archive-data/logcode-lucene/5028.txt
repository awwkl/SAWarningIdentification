GitDiffStart: 35375d57b9b140e75dc1fc941607ef88641a1d27 | Tue Nov 4 12:09:47 2014 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 1016e1e..9a7e4e7 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -204,6 +204,9 @@ Bug Fixes
 * LUCENE-6041: Remove sugar methods FieldInfo.isIndexed and
   FieldInfo.hasDocValues.  (Robert Muir, Mike McCandless)
 
+* LUCENE-6042: CustomScoreQuery explain was incorrect in some cases,
+  such as when nested inside a boolean query. (Denis Lantsman via Robert Muir)
+
 Documentation
 
 * LUCENE-5392: Add/improve analysis package documentation to reflect
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations.java b/lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations.java
index 37c9e65..22b2815 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations.java
@@ -27,7 +27,7 @@ import org.apache.lucene.search.spans.*;
  * on the assumption that if the explanations work out right for them,
  * they should work for anything.
  */
-public class TestComplexExplanations extends TestExplanations {
+public class TestComplexExplanations extends BaseExplanationTestCase {
 
   /**
    * Override the Similarity used in our searcher with one that plays
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestExplanations.java b/lucene/core/src/test/org/apache/lucene/search/TestExplanations.java
deleted file mode 100644
index faf1240..0000000
--- a/lucene/core/src/test/org/apache/lucene/search/TestExplanations.java
+++ /dev/null
@@ -1,222 +0,0 @@
-package org.apache.lucene.search;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import org.apache.lucene.analysis.MockAnalyzer;
-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
-import org.apache.lucene.document.SortedDocValuesField;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.RandomIndexWriter;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.search.spans.SpanFirstQuery;
-import org.apache.lucene.search.spans.SpanNearQuery;
-import org.apache.lucene.search.spans.SpanNotQuery;
-import org.apache.lucene.search.spans.SpanOrQuery;
-import org.apache.lucene.search.spans.SpanQuery;
-import org.apache.lucene.search.spans.SpanTermQuery;
-import org.apache.lucene.store.Directory;
-import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.util.LuceneTestCase;
-import org.junit.AfterClass;
-import org.junit.BeforeClass;
-
-/**
- * Tests primitive queries (ie: that rewrite to themselves) to
- * insure they match the expected set of docs, and that the score of each
- * match is equal to the value of the scores explanation.
- *
- * <p>
- * The assumption is that if all of the "primitive" queries work well,
- * then anything that rewrites to a primitive will work well also.
- * </p>
- *
- * @see "Subclasses for actual tests"
- */
-public class TestExplanations extends LuceneTestCase {
-  protected static IndexSearcher searcher;
-  protected static IndexReader reader;
-  protected static Directory directory;
-  
-  public static final String KEY = "KEY";
-  // boost on this field is the same as the iterator for the doc
-  public static final String FIELD = "field";
-  // same contents, but no field boost
-  public static final String ALTFIELD = "alt";
-  
-  @AfterClass
-  public static void afterClassTestExplanations() throws Exception {
-    searcher = null;
-    reader.close();
-    reader = null;
-    directory.close();
-    directory = null;
-  }
-  
-  @BeforeClass
-  public static void beforeClassTestExplanations() throws Exception {
-    directory = newDirectory();
-    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));
-    for (int i = 0; i < docFields.length; i++) {
-      Document doc = new Document();
-      doc.add(newStringField(KEY, ""+i, Field.Store.NO));
-      doc.add(new SortedDocValuesField(KEY, new BytesRef(""+i)));
-      Field f = newTextField(FIELD, docFields[i], Field.Store.NO);
-      f.setBoost(i);
-      doc.add(f);
-      doc.add(newTextField(ALTFIELD, docFields[i], Field.Store.NO));
-      writer.addDocument(doc);
-    }
-    reader = writer.getReader();
-    writer.close();
-    searcher = newSearcher(reader);
-  }
-
-  protected static final String[] docFields = {
-    "w1 w2 w3 w4 w5",
-    "w1 w3 w2 w3 zz",
-    "w1 xx w2 yy w3",
-    "w1 w3 xx w2 yy w3 zz"
-  };
-  
-  /** check the expDocNrs first, then check the query (and the explanations) */
-  public void qtest(Query q, int[] expDocNrs) throws Exception {
-    CheckHits.checkHitCollector(random(), q, FIELD, searcher, expDocNrs);
-  }
-
-  /**
-   * Tests a query using qtest after wrapping it with both optB and reqB
-   * @see #qtest
-   * @see #reqB
-   * @see #optB
-   */
-  public void bqtest(Query q, int[] expDocNrs) throws Exception {
-    qtest(reqB(q), expDocNrs);
-    qtest(optB(q), expDocNrs);
-  }
-  
-  /** 
-   * Convenience subclass of FieldCacheTermsFilter
-   */
-  public static class ItemizedFilter extends DocValuesTermsFilter {
-    private static String[] int2str(int [] terms) {
-      String [] out = new String[terms.length];
-      for (int i = 0; i < terms.length; i++) {
-        out[i] = ""+terms[i];
-      }
-      return out;
-    }
-    public ItemizedFilter(int [] keys) {
-      super(KEY, int2str(keys));
-    }
-  }
-
-  /** helper for generating MultiPhraseQueries */
-  public static Term[] ta(String[] s) {
-    Term[] t = new Term[s.length];
-    for (int i = 0; i < s.length; i++) {
-      t[i] = new Term(FIELD, s[i]);
-    }
-    return t;
-  }
-
-  /** MACRO for SpanTermQuery */
-  public SpanTermQuery st(String s) {
-    return new SpanTermQuery(new Term(FIELD,s));
-  }
-  
-  /** MACRO for SpanNotQuery */
-  public SpanNotQuery snot(SpanQuery i, SpanQuery e) {
-    return new SpanNotQuery(i,e);
-  }
-
-  /** MACRO for SpanOrQuery containing two SpanTerm queries */
-  public SpanOrQuery sor(String s, String e) {
-    return sor(st(s), st(e));
-  }
-  /** MACRO for SpanOrQuery containing two SpanQueries */
-  public SpanOrQuery sor(SpanQuery s, SpanQuery e) {
-    return new SpanOrQuery(s, e);
-  }
-  
-  /** MACRO for SpanOrQuery containing three SpanTerm queries */
-  public SpanOrQuery sor(String s, String m, String e) {
-    return sor(st(s), st(m), st(e));
-  }
-  /** MACRO for SpanOrQuery containing two SpanQueries */
-  public SpanOrQuery sor(SpanQuery s, SpanQuery m, SpanQuery e) {
-    return new SpanOrQuery(s, m, e);
-  }
-  
-  /** MACRO for SpanNearQuery containing two SpanTerm queries */
-  public SpanNearQuery snear(String s, String e, int slop, boolean inOrder) {
-    return snear(st(s), st(e), slop, inOrder);
-  }
-  /** MACRO for SpanNearQuery containing two SpanQueries */
-  public SpanNearQuery snear(SpanQuery s, SpanQuery e,
-                             int slop, boolean inOrder) {
-    return new SpanNearQuery(new SpanQuery[] { s, e }, slop, inOrder);
-  }
-  
-  
-  /** MACRO for SpanNearQuery containing three SpanTerm queries */
-  public SpanNearQuery snear(String s, String m, String e,
-                             int slop, boolean inOrder) {
-    return snear(st(s), st(m), st(e), slop, inOrder);
-  }
-  /** MACRO for SpanNearQuery containing three SpanQueries */
-  public SpanNearQuery snear(SpanQuery s, SpanQuery m, SpanQuery e,
-                             int slop, boolean inOrder) {
-    return new SpanNearQuery(new SpanQuery[] { s, m, e }, slop, inOrder);
-  }
-  
-  /** MACRO for SpanFirst(SpanTermQuery) */
-  public SpanFirstQuery sf(String s, int b) {
-    return new SpanFirstQuery(st(s), b);
-  }
-
-  /**
-   * MACRO: Wraps a Query in a BooleanQuery so that it is optional, along
-   * with a second prohibited clause which will never match anything
-   */
-  public Query optB(Query q) throws Exception {
-    BooleanQuery bq = new BooleanQuery(true);
-    bq.add(q, BooleanClause.Occur.SHOULD);
-    bq.add(new TermQuery(new Term("NEVER","MATCH")), BooleanClause.Occur.MUST_NOT);
-    return bq;
-  }
-
-  /**
-   * MACRO: Wraps a Query in a BooleanQuery so that it is required, along
-   * with a second optional clause which will match everything
-   */
-  public Query reqB(Query q) throws Exception {
-    BooleanQuery bq = new BooleanQuery(true);
-    bq.add(q, BooleanClause.Occur.MUST);
-    bq.add(new TermQuery(new Term(FIELD,"w1")), BooleanClause.Occur.SHOULD);
-    return bq;
-  }
-  
-  /**
-   * Placeholder: JUnit freaks if you don't have one test ... making
-   * class abstract doesn't help
-   */
-  public void testNoop() {
-    /* NOOP */
-  }
-}
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations.java b/lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations.java
index e863da5..afbabc2 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanations.java
@@ -22,7 +22,7 @@ import org.apache.lucene.index.Term;
 /**
  * TestExplanations subclass focusing on basic query types
  */
-public class TestSimpleExplanations extends TestExplanations {
+public class TestSimpleExplanations extends BaseExplanationTestCase {
 
   // we focus on queries that don't rewrite to other queries.
   // if we get those covered well, then the ones that rewrite should
diff --git a/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadExplanations.java b/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadExplanations.java
index e98e334..91a62de 100644
--- a/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadExplanations.java
+++ b/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadExplanations.java
@@ -20,14 +20,14 @@ package org.apache.lucene.search.payloads;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.similarities.DefaultSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
-import org.apache.lucene.search.TestExplanations;
+import org.apache.lucene.search.BaseExplanationTestCase;
 import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.util.BytesRef;
 
 /**
  * TestExplanations subclass focusing on payload queries
  */
-public class TestPayloadExplanations extends TestExplanations {
+public class TestPayloadExplanations extends BaseExplanationTestCase {
   private PayloadFunction functions[] = new PayloadFunction[] { 
       new AveragePayloadFunction(),
       new MinPayloadFunction(),
diff --git a/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanExplanations.java b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanExplanations.java
index e752f1d..aab5a9e 100644
--- a/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanExplanations.java
+++ b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanExplanations.java
@@ -23,7 +23,7 @@ import org.apache.lucene.search.*;
 /**
  * TestExplanations subclass focusing on span queries
  */
-public class TestSpanExplanations extends TestExplanations {
+public class TestSpanExplanations extends BaseExplanationTestCase {
 
   /* simple SpanTermQueries */
   
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java
index 6e6727a..e48e8f2 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.java
@@ -263,11 +263,11 @@ public class CustomScoreQuery extends Query {
         valSrcExpls[i] = valSrcWeights[i].explain(info, doc);
       }
       Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(info).customExplain(doc,subQueryExpl,valSrcExpls);
-      float sc = getBoost() * customExp.getValue();
+      float sc = queryWeight * customExp.getValue();
       Explanation res = new ComplexExplanation(
         true, sc, CustomScoreQuery.this.toString() + ", product of:");
       res.addDetail(customExp);
-      res.addDetail(new Explanation(getBoost(), "queryBoost")); // actually using the q boost as q weight (== weight value)
+      res.addDetail(new Explanation(queryWeight, "queryWeight"));
       return res;
     }
 
diff --git a/lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreExplanations.java b/lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreExplanations.java
new file mode 100644
index 0000000..537f9f2
--- /dev/null
+++ b/lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreExplanations.java
@@ -0,0 +1,53 @@
+package org.apache.lucene.queries;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.index.Term;
+import org.apache.lucene.queries.function.FunctionQuery;
+import org.apache.lucene.queries.function.valuesource.ConstValueSource;
+import org.apache.lucene.search.BaseExplanationTestCase;
+import org.apache.lucene.search.BooleanClause;
+import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.MatchAllDocsQuery;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.TermQuery;
+
+public class TestCustomScoreExplanations extends BaseExplanationTestCase {
+  public void testOneTerm() throws Exception {
+    Query q = new TermQuery(new Term(FIELD, "w1"));
+    CustomScoreQuery csq = new CustomScoreQuery(q, new FunctionQuery(new ConstValueSource(5)));
+    qtest(csq, new int[] { 0,1,2,3 });
+  }
+  
+  public void testBoost() throws Exception {
+    Query q = new TermQuery(new Term(FIELD, "w1"));
+    CustomScoreQuery csq = new CustomScoreQuery(q, new FunctionQuery(new ConstValueSource(5)));
+    csq.setBoost(4);
+    qtest(csq, new int[] { 0,1,2,3 });
+  }
+  
+  public void testTopLevelBoost() throws Exception {
+    Query q = new TermQuery(new Term(FIELD, "w1"));
+    CustomScoreQuery csq = new CustomScoreQuery(q, new FunctionQuery(new ConstValueSource(5)));
+    BooleanQuery bq = new BooleanQuery();
+    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);
+    bq.add(csq, BooleanClause.Occur.MUST);
+    bq.setBoost(6);
+    qtest(bq, new int[] { 0,1,2,3 });
+  }
+}
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase.java b/lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase.java
new file mode 100644
index 0000000..525d846
--- /dev/null
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase.java
@@ -0,0 +1,214 @@
+package org.apache.lucene.search;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.MockAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.SortedDocValuesField;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.RandomIndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.spans.SpanFirstQuery;
+import org.apache.lucene.search.spans.SpanNearQuery;
+import org.apache.lucene.search.spans.SpanNotQuery;
+import org.apache.lucene.search.spans.SpanOrQuery;
+import org.apache.lucene.search.spans.SpanQuery;
+import org.apache.lucene.search.spans.SpanTermQuery;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.LuceneTestCase;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+
+/**
+ * Tests primitive queries (ie: that rewrite to themselves) to
+ * insure they match the expected set of docs, and that the score of each
+ * match is equal to the value of the scores explanation.
+ *
+ * <p>
+ * The assumption is that if all of the "primitive" queries work well,
+ * then anything that rewrites to a primitive will work well also.
+ * </p>
+ *
+ * @see "Subclasses for actual tests"
+ */
+public abstract class BaseExplanationTestCase extends LuceneTestCase {
+  protected static IndexSearcher searcher;
+  protected static IndexReader reader;
+  protected static Directory directory;
+  
+  public static final String KEY = "KEY";
+  // boost on this field is the same as the iterator for the doc
+  public static final String FIELD = "field";
+  // same contents, but no field boost
+  public static final String ALTFIELD = "alt";
+  
+  @AfterClass
+  public static void afterClassTestExplanations() throws Exception {
+    searcher = null;
+    reader.close();
+    reader = null;
+    directory.close();
+    directory = null;
+  }
+  
+  @BeforeClass
+  public static void beforeClassTestExplanations() throws Exception {
+    directory = newDirectory();
+    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));
+    for (int i = 0; i < docFields.length; i++) {
+      Document doc = new Document();
+      doc.add(newStringField(KEY, ""+i, Field.Store.NO));
+      doc.add(new SortedDocValuesField(KEY, new BytesRef(""+i)));
+      Field f = newTextField(FIELD, docFields[i], Field.Store.NO);
+      f.setBoost(i);
+      doc.add(f);
+      doc.add(newTextField(ALTFIELD, docFields[i], Field.Store.NO));
+      writer.addDocument(doc);
+    }
+    reader = writer.getReader();
+    writer.close();
+    searcher = newSearcher(reader);
+  }
+
+  protected static final String[] docFields = {
+    "w1 w2 w3 w4 w5",
+    "w1 w3 w2 w3 zz",
+    "w1 xx w2 yy w3",
+    "w1 w3 xx w2 yy w3 zz"
+  };
+  
+  /** check the expDocNrs first, then check the query (and the explanations) */
+  public void qtest(Query q, int[] expDocNrs) throws Exception {
+    CheckHits.checkHitCollector(random(), q, FIELD, searcher, expDocNrs);
+  }
+
+  /**
+   * Tests a query using qtest after wrapping it with both optB and reqB
+   * @see #qtest
+   * @see #reqB
+   * @see #optB
+   */
+  public void bqtest(Query q, int[] expDocNrs) throws Exception {
+    qtest(reqB(q), expDocNrs);
+    qtest(optB(q), expDocNrs);
+  }
+  
+  /** 
+   * Convenience subclass of FieldCacheTermsFilter
+   */
+  public static class ItemizedFilter extends DocValuesTermsFilter {
+    private static String[] int2str(int [] terms) {
+      String [] out = new String[terms.length];
+      for (int i = 0; i < terms.length; i++) {
+        out[i] = ""+terms[i];
+      }
+      return out;
+    }
+    public ItemizedFilter(int [] keys) {
+      super(KEY, int2str(keys));
+    }
+  }
+
+  /** helper for generating MultiPhraseQueries */
+  public static Term[] ta(String[] s) {
+    Term[] t = new Term[s.length];
+    for (int i = 0; i < s.length; i++) {
+      t[i] = new Term(FIELD, s[i]);
+    }
+    return t;
+  }
+
+  /** MACRO for SpanTermQuery */
+  public SpanTermQuery st(String s) {
+    return new SpanTermQuery(new Term(FIELD,s));
+  }
+  
+  /** MACRO for SpanNotQuery */
+  public SpanNotQuery snot(SpanQuery i, SpanQuery e) {
+    return new SpanNotQuery(i,e);
+  }
+
+  /** MACRO for SpanOrQuery containing two SpanTerm queries */
+  public SpanOrQuery sor(String s, String e) {
+    return sor(st(s), st(e));
+  }
+  /** MACRO for SpanOrQuery containing two SpanQueries */
+  public SpanOrQuery sor(SpanQuery s, SpanQuery e) {
+    return new SpanOrQuery(s, e);
+  }
+  
+  /** MACRO for SpanOrQuery containing three SpanTerm queries */
+  public SpanOrQuery sor(String s, String m, String e) {
+    return sor(st(s), st(m), st(e));
+  }
+  /** MACRO for SpanOrQuery containing two SpanQueries */
+  public SpanOrQuery sor(SpanQuery s, SpanQuery m, SpanQuery e) {
+    return new SpanOrQuery(s, m, e);
+  }
+  
+  /** MACRO for SpanNearQuery containing two SpanTerm queries */
+  public SpanNearQuery snear(String s, String e, int slop, boolean inOrder) {
+    return snear(st(s), st(e), slop, inOrder);
+  }
+  /** MACRO for SpanNearQuery containing two SpanQueries */
+  public SpanNearQuery snear(SpanQuery s, SpanQuery e,
+                             int slop, boolean inOrder) {
+    return new SpanNearQuery(new SpanQuery[] { s, e }, slop, inOrder);
+  }
+  
+  
+  /** MACRO for SpanNearQuery containing three SpanTerm queries */
+  public SpanNearQuery snear(String s, String m, String e,
+                             int slop, boolean inOrder) {
+    return snear(st(s), st(m), st(e), slop, inOrder);
+  }
+  /** MACRO for SpanNearQuery containing three SpanQueries */
+  public SpanNearQuery snear(SpanQuery s, SpanQuery m, SpanQuery e,
+                             int slop, boolean inOrder) {
+    return new SpanNearQuery(new SpanQuery[] { s, m, e }, slop, inOrder);
+  }
+  
+  /** MACRO for SpanFirst(SpanTermQuery) */
+  public SpanFirstQuery sf(String s, int b) {
+    return new SpanFirstQuery(st(s), b);
+  }
+
+  /**
+   * MACRO: Wraps a Query in a BooleanQuery so that it is optional, along
+   * with a second prohibited clause which will never match anything
+   */
+  public Query optB(Query q) throws Exception {
+    BooleanQuery bq = new BooleanQuery(true);
+    bq.add(q, BooleanClause.Occur.SHOULD);
+    bq.add(new TermQuery(new Term("NEVER","MATCH")), BooleanClause.Occur.MUST_NOT);
+    return bq;
+  }
+
+  /**
+   * MACRO: Wraps a Query in a BooleanQuery so that it is required, along
+   * with a second optional clause which will match everything
+   */
+  public Query reqB(Query q) throws Exception {
+    BooleanQuery bq = new BooleanQuery(true);
+    bq.add(q, BooleanClause.Occur.MUST);
+    bq.add(new TermQuery(new Term(FIELD,"w1")), BooleanClause.Occur.SHOULD);
+    return bq;
+  }
+}

