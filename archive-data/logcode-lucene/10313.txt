GitDiffStart: 5cb909b11f03aee9a241f4bec455d22f8b3ce41f | Thu Dec 6 21:51:32 2012 +0000
diff --git a/solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner.java b/solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner.java
index 263a6b2..6662b59 100644
--- a/solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner.java
+++ b/solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner.java
@@ -115,12 +115,17 @@ public class TestHashPartitioner extends SolrTestCaseJ4 {
     doId(coll, "d!baz", "shard3");
     doId(coll, "e!qux", "shard4");
 
-    // syntax to specify bits
+    // syntax to specify bits.  Anything over 2 should give the same results as above (since only top 2 bits
+    // affect our 4 slice collection).
     doId(coll, "b/2!foo", "shard1");
     doId(coll, "c/2!bar", "shard2");
     doId(coll, "d/2!baz", "shard3");
     doId(coll, "e/2!qux", "shard4");
 
+    doId(coll, "b/32!foo", "shard1");
+    doId(coll, "c/32!bar", "shard2");
+    doId(coll, "d/32!baz", "shard3");
+    doId(coll, "e/32!qux", "shard4");
   }
 
   /***
diff --git a/solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter.java b/solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter.java
index 40f5215..7718a42 100644
--- a/solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter.java
+++ b/solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter.java
@@ -41,10 +41,11 @@ public class CompositeIdRouter extends HashBasedRouter {
   private int mask1 = 0xffff0000;
   private int mask2 = 0x0000ffff;
 
-  protected void setBits(int bits) {
-    this.bits = bits;
-    mask1 = -1 << (32-bits);
-    mask2 = -1 >>> bits;
+  protected void setBits(int firstBits) {
+    this.bits = firstBits;
+    // java can't shift 32 bits
+    mask1 = firstBits==0 ? 0 : (-1 << (32-firstBits));
+    mask2 = firstBits==32 ? 0 : (-1 >>> firstBits);
   }
 
   protected int getBits(String firstPart, int commaIdx) {
@@ -72,8 +73,8 @@ public class CompositeIdRouter extends HashBasedRouter {
     if (commaIdx > 0) {
       int firstBits = getBits(part1, commaIdx);
       if (firstBits >= 0) {
-        m1 = -1 << (32-firstBits);
-        m2 = -1 >>> firstBits;
+        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));
+        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);
         part1 = part1.substring(0, commaIdx);
       }
     }
@@ -108,8 +109,8 @@ public class CompositeIdRouter extends HashBasedRouter {
     if (bitsSepIdx > 0) {
       int firstBits = getBits(part1, bitsSepIdx);
       if (firstBits >= 0) {
-        m1 = -1 << (32-firstBits);
-        m2 = -1 >>> firstBits;
+        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));
+        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);
         part1 = part1.substring(0, bitsSepIdx);
       }
     }

