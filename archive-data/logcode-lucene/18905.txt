GitDiffStart: 786eb6ce0d19c6459f204b5d4ab0dc72245888cb | Sun Nov 8 12:45:12 2009 +0000
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer.java
index 6ee69ed..0f10524 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer.java
@@ -152,6 +152,7 @@ public final class ArabicAnalyzer extends Analyzer {
    * 			{@link LowerCaseFilter}, {@link StopFilter}, {@link ArabicNormalizationFilter}
    *            and {@link ArabicStemFilter}.
    */
+  @Override
   public final TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new ArabicLetterTokenizer( reader );
     result = new LowerCaseFilter(result);
@@ -177,6 +178,7 @@ public final class ArabicAnalyzer extends Analyzer {
    *            {@link LowerCaseFilter}, {@link StopFilter}, {@link ArabicNormalizationFilter}
    *            and {@link ArabicStemFilter}.
    */
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
     SavedStreams streams = (SavedStreams) getPreviousTokenStream();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicLetterTokenizer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicLetterTokenizer.java
index 018509c..c9baff0 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicLetterTokenizer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicLetterTokenizer.java
@@ -47,6 +47,7 @@ public class ArabicLetterTokenizer extends LetterTokenizer {
    * Allows for Letter category or NonspacingMark category
    * @see org.apache.lucene.analysis.LetterTokenizer#isTokenChar(char)
    */
+  @Override
   protected boolean isTokenChar(char c) {
     return super.isTokenChar(c) || Character.getType(c) == Character.NON_SPACING_MARK;
   }
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicNormalizationFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicNormalizationFilter.java
index 6c51163..937911b 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicNormalizationFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicNormalizationFilter.java
@@ -39,6 +39,7 @@ public final class ArabicNormalizationFilter extends TokenFilter {
     termAtt = addAttribute(TermAttribute.class);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       int newlen = normalizer.normalize(termAtt.termBuffer(), termAtt.termLength());
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicStemFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicStemFilter.java
index c989569..566d882 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicStemFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicStemFilter.java
@@ -39,6 +39,7 @@ public final class ArabicStemFilter extends TokenFilter {
     termAtt = addAttribute(TermAttribute.class);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       int newlen = stemmer.stem(termAtt.termBuffer(), termAtt.termLength());
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianAnalyzer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianAnalyzer.java
index 01e98f5..75c8719 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianAnalyzer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianAnalyzer.java
@@ -146,6 +146,7 @@ public final class BrazilianAnalyzer extends Analyzer {
 	 * 			{@link LowerCaseFilter}, {@link StandardFilter}, {@link StopFilter}, and 
 	 *          {@link BrazilianStemFilter}.
 	 */
+	@Override
 	public final TokenStream tokenStream(String fieldName, Reader reader) {
                 TokenStream result = new StandardTokenizer( matchVersion, reader );
 		result = new LowerCaseFilter( result );
@@ -169,6 +170,7 @@ public final class BrazilianAnalyzer extends Analyzer {
      *          {@link LowerCaseFilter}, {@link StandardFilter}, {@link StopFilter}, and 
      *          {@link BrazilianStemFilter}.
      */
+    @Override
     public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
       SavedStreams streams = (SavedStreams) getPreviousTokenStream();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianStemFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianStemFilter.java
index 5d07629..9d5faf8 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianStemFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianStemFilter.java
@@ -48,6 +48,7 @@ public final class BrazilianStemFilter extends TokenFilter {
     this.exclusions = exclusiontable;
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       String term = termAtt.term();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKAnalyzer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKAnalyzer.java
index 9232821..79d3f1c 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKAnalyzer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKAnalyzer.java
@@ -89,6 +89,7 @@ public class CJKAnalyzer extends Analyzer {
    * @return A {@link TokenStream} built from {@link CJKTokenizer}, filtered with
    *    {@link StopFilter}
    */
+  @Override
   public final TokenStream tokenStream(String fieldName, Reader reader) {
     return new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),
                           new CJKTokenizer(reader), stopTable);
@@ -108,6 +109,7 @@ public class CJKAnalyzer extends Analyzer {
    * @return A {@link TokenStream} built from {@link CJKTokenizer}, filtered with
    *    {@link StopFilter}
    */
+  @Override
   public final TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
     /* tokenStream() is final, no back compat issue */
     SavedStreams streams = (SavedStreams) getPreviousTokenStream();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java
index fad8cb7..a3d0353 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java
@@ -145,6 +145,7 @@ public final class CJKTokenizer extends Tokenizer {
      *         happened in the InputStream
      *
      */
+    @Override
     public boolean incrementToken() throws IOException {
         clearAttributes();
         /** how many character(s) has been stored in buffer */
@@ -297,12 +298,14 @@ public final class CJKTokenizer extends Tokenizer {
       }
     }
     
+    @Override
     public final void end() {
       // set final offset
       final int finalOffset = offset;
       this.offsetAtt.setOffset(finalOffset, finalOffset);
     }
     
+    @Override
     public void reset() throws IOException {
       super.reset();
       offset = bufferIndex = dataLen = 0;
@@ -310,6 +313,7 @@ public final class CJKTokenizer extends Tokenizer {
       tokenType = WORD_TYPE;
     }
     
+    @Override
     public void reset(Reader reader) throws IOException {
       super.reset(reader);
       reset();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseAnalyzer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseAnalyzer.java
index 1024e7b..6a80fb7 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseAnalyzer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseAnalyzer.java
@@ -40,6 +40,7 @@ public class ChineseAnalyzer extends Analyzer {
     * @return  A {@link TokenStream} built from a {@link ChineseTokenizer} 
     *   filtered with {@link ChineseFilter}.
     */
+    @Override
     public final TokenStream tokenStream(String fieldName, Reader reader) {
         TokenStream result = new ChineseTokenizer(reader);
         result = new ChineseFilter(result);
@@ -58,6 +59,7 @@ public class ChineseAnalyzer extends Analyzer {
     * @return A {@link TokenStream} built from a {@link ChineseTokenizer} 
     *   filtered with {@link ChineseFilter}.
     */
+    @Override
     public final TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
       /* tokenStream() is final, no back compat issue */
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter.java
index 97b2a9a..8adc321 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter.java
@@ -67,6 +67,7 @@ public final class ChineseFilter extends TokenFilter {
         termAtt = addAttribute(TermAttribute.class);
     }
 
+    @Override
     public boolean incrementToken() throws IOException {
 
         while (input.incrementToken()) {
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer.java
index aa43a8d..1efd5da 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer.java
@@ -111,6 +111,7 @@ public final class ChineseTokenizer extends Tokenizer {
             return false;
     }
 
+    @Override
     public boolean incrementToken() throws IOException {
         clearAttributes();
 
@@ -158,17 +159,20 @@ public final class ChineseTokenizer extends Tokenizer {
         }
     }
     
+    @Override
     public final void end() {
       // set final offset
       final int finalOffset = offset;
       this.offsetAtt.setOffset(finalOffset, finalOffset);
     }
 
+    @Override
     public void reset() throws IOException {
       super.reset();
       offset = bufferIndex = dataLen = 0;
     }
     
+    @Override
     public void reset(Reader input) throws IOException {
       super.reset(input);
       reset();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.java
index 2645f6e..5db0402 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.java
@@ -137,6 +137,7 @@ public abstract class CompoundWordTokenFilterBase extends TokenFilter {
     payloadAtt.setPayload(token.getPayload());
   }
   
+  @Override
   public final boolean incrementToken() throws IOException {
     if (tokens.size() > 0) {
       setToken((Token)tokens.removeFirst());
@@ -205,6 +206,7 @@ public abstract class CompoundWordTokenFilterBase extends TokenFilter {
   
   protected abstract void decomposeInternal(final Token token);
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     tokens.clear();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.java
index 15d17e0..5fb1c01 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.java
@@ -81,6 +81,7 @@ public class DictionaryCompoundWordTokenFilter extends CompoundWordTokenFilterBa
     super(input, dictionary, minWordSize, minSubwordSize, maxSubwordSize, onlyLongestMatch);
   }
 
+  @Override
   protected void decomposeInternal(final Token token) {
     // Only words longer than minWordSize get processed
     if (token.termLength() < this.minWordSize) {
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java
index a41072b..3f5536d 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java
@@ -149,6 +149,7 @@ public class HyphenationCompoundWordTokenFilter extends
     return tree;
   }
 
+  @Override
   protected void decomposeInternal(final Token token) {
     // get the hyphenation points
     Hyphenation hyphens = hyphenator.hyphenate(token.termBuffer(), 0, token
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/CharVector.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/CharVector.java
index 0052180..380aa44 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/CharVector.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/CharVector.java
@@ -81,6 +81,7 @@ public class CharVector implements Cloneable, Serializable {
     n = 0;
   }
 
+  @Override
   public Object clone() {
     CharVector cv = new CharVector((char[]) array.clone(), blockSize);
     cv.n = this.n;
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/Hyphen.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/Hyphen.java
index 1d048fc..7ecbdf3 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/Hyphen.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/Hyphen.java
@@ -51,6 +51,7 @@ public class Hyphen implements Serializable {
     postBreak = null;
   }
 
+  @Override
   public String toString() {
     if (noBreak == null && postBreak == null && preBreak != null
         && preBreak.equals("-")) {
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.java
index c361b2d..c2d88eb 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.java
@@ -466,6 +466,7 @@ public class HyphenationTree extends TernaryTree implements PatternConsumer,
     insert(pattern, (char) k);
   }
 
+  @Override
   public void printStats() {
     System.out.println("Value space size = "
         + Integer.toString(vspace.length()));
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java
index 1a2ca37..4d39145 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java
@@ -266,6 +266,7 @@ public class PatternParser extends DefaultHandler implements PatternConsumer {
   //
   // EntityResolver methods
   //
+  @Override
   public InputSource resolveEntity(String publicId, String systemId) {
     return HyphenationDTDGenerator.generateDTD();
   }
@@ -278,6 +279,7 @@ public class PatternParser extends DefaultHandler implements PatternConsumer {
    * @see org.xml.sax.ContentHandler#startElement(java.lang.String,
    *      java.lang.String, java.lang.String, org.xml.sax.Attributes)
    */
+  @Override
   public void startElement(String uri, String local, String raw,
       Attributes attrs) {
     if (local.equals("hyphen-char")) {
@@ -307,6 +309,7 @@ public class PatternParser extends DefaultHandler implements PatternConsumer {
    * @see org.xml.sax.ContentHandler#endElement(java.lang.String,
    *      java.lang.String, java.lang.String)
    */
+  @Override
   public void endElement(String uri, String local, String raw) {
 
     if (token.length() > 0) {
@@ -343,6 +346,7 @@ public class PatternParser extends DefaultHandler implements PatternConsumer {
   /**
    * @see org.xml.sax.ContentHandler#characters(char[], int, int)
    */
+  @Override
   public void characters(char ch[], int start, int length) {
     StringBuffer chars = new StringBuffer(length);
     chars.append(ch, start, length);
@@ -376,6 +380,7 @@ public class PatternParser extends DefaultHandler implements PatternConsumer {
   /**
    * @see org.xml.sax.ErrorHandler#warning(org.xml.sax.SAXParseException)
    */
+  @Override
   public void warning(SAXParseException ex) {
     errMsg = "[Warning] " + getLocationString(ex) + ": " + ex.getMessage();
   }
@@ -383,6 +388,7 @@ public class PatternParser extends DefaultHandler implements PatternConsumer {
   /**
    * @see org.xml.sax.ErrorHandler#error(org.xml.sax.SAXParseException)
    */
+  @Override
   public void error(SAXParseException ex) {
     errMsg = "[Error] " + getLocationString(ex) + ": " + ex.getMessage();
   }
@@ -390,6 +396,7 @@ public class PatternParser extends DefaultHandler implements PatternConsumer {
   /**
    * @see org.xml.sax.ErrorHandler#fatalError(org.xml.sax.SAXParseException)
    */
+  @Override
   public void fatalError(SAXParseException ex) throws SAXException {
     errMsg = "[Fatal Error] " + getLocationString(ex) + ": " + ex.getMessage();
     throw ex;
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java
index 6d97a45..59a2268 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java
@@ -348,6 +348,7 @@ public class TernaryTree implements Cloneable, Serializable {
     return length;
   }
 
+  @Override
   public Object clone() {
     TernaryTree t = new TernaryTree();
     t.lo = (char[]) this.lo.clone();
@@ -483,6 +484,7 @@ public class TernaryTree implements Cloneable, Serializable {
         child = c;
       }
 
+      @Override
       public Object clone() {
         return new Item(parent, child);
       }
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer.java
index 908b630..f0f65df 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer.java
@@ -140,6 +140,7 @@ public final class CzechAnalyzer extends Analyzer {
 	 * @return  A {@link TokenStream} built from a {@link StandardTokenizer} filtered with
 	 * 			{@link StandardFilter}, {@link LowerCaseFilter}, and {@link StopFilter}
 	 */
+	@Override
 	public final TokenStream tokenStream( String fieldName, Reader reader ) {
                 TokenStream result = new StandardTokenizer( matchVersion, reader );
 		result = new StandardFilter( result );
@@ -161,6 +162,7 @@ public final class CzechAnalyzer extends Analyzer {
      * @return  A {@link TokenStream} built from a {@link StandardTokenizer} filtered with
      *          {@link StandardFilter}, {@link LowerCaseFilter}, and {@link StopFilter}
      */
+	@Override
 	public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
       SavedStreams streams = (SavedStreams) getPreviousTokenStream();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java
index 631596d..1192d6a 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java
@@ -149,6 +149,7 @@ public class GermanAnalyzer extends Analyzer {
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}, and
    *         {@link GermanStemFilter}
    */
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new StandardTokenizer(matchVersion, reader);
     result = new StandardFilter(result);
@@ -172,6 +173,7 @@ public class GermanAnalyzer extends Analyzer {
    *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}, and
    *         {@link GermanStemFilter}
    */
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
     if (overridesTokenStreamMethod) {
       // LUCENE-1678: force fallback to tokenStream() if we
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanStemFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanStemFilter.java
index 29601ff..fdcaeb5 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanStemFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanStemFilter.java
@@ -61,6 +61,7 @@ public final class GermanStemFilter extends TokenFilter
     /**
      * @return  Returns true for next token in the stream, or false at EOS
      */
+    @Override
     public boolean incrementToken() throws IOException {
       if (input.incrementToken()) {
         String term = termAtt.term();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekAnalyzer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekAnalyzer.java
index 745cd86..e85cf62 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekAnalyzer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekAnalyzer.java
@@ -99,6 +99,7 @@ public final class GreekAnalyzer extends Analyzer
      * @return  A {@link TokenStream} built from a {@link StandardTokenizer} filtered with
      *                  {@link GreekLowerCaseFilter} and {@link StopFilter}
      */
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader)
     {
         TokenStream result = new StandardTokenizer(matchVersion, reader);
@@ -120,6 +121,7 @@ public final class GreekAnalyzer extends Analyzer
      * @return  A {@link TokenStream} built from a {@link StandardTokenizer} filtered with
      *                  {@link GreekLowerCaseFilter} and {@link StopFilter}
      */
+    @Override
     public TokenStream reusableTokenStream(String fieldName, Reader reader) 
       throws IOException {
       SavedStreams streams = (SavedStreams) getPreviousTokenStream();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter.java
index 9784190..53da0b8 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter.java
@@ -37,6 +37,7 @@ public final class GreekLowerCaseFilter extends TokenFilter
     	termAtt = addAttribute(TermAttribute.class);
     }
 
+    @Override
     public boolean incrementToken() throws IOException {
       if (input.incrementToken()) {
         char[] chArray = termAtt.termBuffer();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer.java
index 44adbc7..3c62efd 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer.java
@@ -152,6 +152,7 @@ public final class PersianAnalyzer extends Analyzer {
    *         {@link ArabicNormalizationFilter},
    *         {@link PersianNormalizationFilter} and Persian Stop words
    */
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new ArabicLetterTokenizer(reader);
     result = new LowerCaseFilter(result);
@@ -181,6 +182,7 @@ public final class PersianAnalyzer extends Analyzer {
    *         {@link ArabicNormalizationFilter},
    *         {@link PersianNormalizationFilter} and Persian Stop words
    */
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
     SavedStreams streams = (SavedStreams) getPreviousTokenStream();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianNormalizationFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianNormalizationFilter.java
index db0ce04..3ea5bd6 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianNormalizationFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianNormalizationFilter.java
@@ -40,6 +40,7 @@ public final class PersianNormalizationFilter extends TokenFilter {
     termAtt = addAttribute(TermAttribute.class);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       final int newlen = normalizer.normalize(termAtt.termBuffer(), termAtt
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter.java
index 46f6dcf..aa3c489 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter.java
@@ -78,6 +78,7 @@ public final class ElisionFilter extends TokenFilter {
   /**
    * Increments the {@link TokenStream} with a {@link TermAttribute} without elisioned start
    */
+  @Override
   public final boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       char[] termBuffer = termAtt.termBuffer();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java
index 7ec3d98..d13b26a 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java
@@ -155,6 +155,7 @@ public final class FrenchAnalyzer extends Analyzer {
    *         filtered with {@link StandardFilter}, {@link StopFilter}, 
    *         {@link FrenchStemFilter} and {@link LowerCaseFilter}
    */
+  @Override
   public final TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new StandardTokenizer(matchVersion, reader);
     result = new StandardFilter(result);
@@ -179,6 +180,7 @@ public final class FrenchAnalyzer extends Analyzer {
    *         filtered with {@link StandardFilter}, {@link StopFilter}, 
    *         {@link FrenchStemFilter} and {@link LowerCaseFilter}
    */
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
     SavedStreams streams = (SavedStreams) getPreviousTokenStream();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter.java
index fb5817a..74322e7 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter.java
@@ -59,6 +59,7 @@ public final class FrenchStemFilter extends TokenFilter {
 	/**
 	 * @return  Returns true for the next token in the stream, or false at EOS
 	 */
+	@Override
 	public boolean incrementToken() throws IOException {
 	  if (input.incrementToken()) {
 	    String term = termAtt.term();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/EmptyTokenStream.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/EmptyTokenStream.java
index f7735bd..8684254 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/EmptyTokenStream.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/EmptyTokenStream.java
@@ -27,6 +27,7 @@ import java.io.IOException;
  */
 public final class EmptyTokenStream extends TokenStream {
 
+  @Override
   public final boolean incrementToken() throws IOException {
     return false;
   }
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.java
index e32a7eb..6c59a12 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.java
@@ -216,6 +216,7 @@ public class PatternAnalyzer extends Analyzer {
    *            the reader delivering the text
    * @return a new token stream
    */
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     if (reader instanceof FastStringReader) { // fast path
       return tokenStream(fieldName, ((FastStringReader)reader).getString());
@@ -236,6 +237,7 @@ public class PatternAnalyzer extends Analyzer {
    *            the reference object with which to compare.
    * @return true if equal, false otherwise
    */
+  @Override
   public boolean equals(Object other) {
     if (this  == other) return true;
     if (this  == DEFAULT_ANALYZER && other == EXTENDED_ANALYZER) return false;
@@ -256,6 +258,7 @@ public class PatternAnalyzer extends Analyzer {
    * 
    * @return the hash code.
    */
+  @Override
   public int hashCode() {
     if (this == DEFAULT_ANALYZER) return -1218418418; // fast path
     if (this == EXTENDED_ANALYZER) return 1303507063; // fast path
@@ -335,6 +338,7 @@ public class PatternAnalyzer extends Analyzer {
       this.toLowerCase = toLowerCase;
     }
 
+    @Override
     public final boolean incrementToken() {
       if (matcher == null) return false;
       clearAttributes();
@@ -361,6 +365,7 @@ public class PatternAnalyzer extends Analyzer {
       }
     }
     
+    @Override
     public final void end() {
       // set final offset
       final int finalOffset = str.length();
@@ -394,6 +399,7 @@ public class PatternAnalyzer extends Analyzer {
       this.stopWords = stopWords;
     }
 
+    @Override
     public boolean incrementToken() {
       clearAttributes();
       // cache loop instance vars (performance)
@@ -442,6 +448,7 @@ public class PatternAnalyzer extends Analyzer {
       return true;
     }
     
+    @Override
     public final void end() {
       // set final offset
       final int finalOffset = str.length();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAndSuffixAwareTokenFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAndSuffixAwareTokenFilter.java
index de63c26..7f30c9f 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAndSuffixAwareTokenFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAndSuffixAwareTokenFilter.java
@@ -35,11 +35,13 @@ public class PrefixAndSuffixAwareTokenFilter extends TokenStream {
   public PrefixAndSuffixAwareTokenFilter(TokenStream prefix, TokenStream input, TokenStream suffix) {
     super(suffix);
     prefix = new PrefixAwareTokenFilter(prefix, input) {
+      @Override
       public Token updateSuffixToken(Token suffixToken, Token lastInputToken) {
         return PrefixAndSuffixAwareTokenFilter.this.updateInputToken(suffixToken, lastInputToken);
       }
     };
     this.suffix = new PrefixAwareTokenFilter(prefix, suffix) {
+      @Override
       public Token updateSuffixToken(Token suffixToken, Token lastInputToken) {
         return PrefixAndSuffixAwareTokenFilter.this.updateSuffixToken(suffixToken, lastInputToken);
       }
@@ -59,15 +61,18 @@ public class PrefixAndSuffixAwareTokenFilter extends TokenStream {
   }
 
 
+  @Override
   public final boolean incrementToken() throws IOException {
     return suffix.incrementToken();
   }
 
+  @Override
   public void reset() throws IOException {
     suffix.reset();
   }
 
 
+  @Override
   public void close() throws IOException {
     suffix.close();
   }
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter.java
index 1a56ebe..f43b3ec 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter.java
@@ -84,6 +84,7 @@ public class PrefixAwareTokenFilter extends TokenStream {
 
   private boolean prefixExhausted;
 
+  @Override
   public final boolean incrementToken() throws IOException {
     if (!prefixExhausted) {
       Token nextToken = getNextPrefixInputToken(reusableToken);
@@ -156,11 +157,13 @@ public class PrefixAwareTokenFilter extends TokenStream {
     return suffixToken;
   }
 
+  @Override
   public void close() throws IOException {
     prefix.close();
     suffix.close();
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     if (prefix != null) {
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/SingleTokenTokenStream.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/SingleTokenTokenStream.java
index 92f2a38..05de91a 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/SingleTokenTokenStream.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/SingleTokenTokenStream.java
@@ -45,6 +45,7 @@ public final class SingleTokenTokenStream extends TokenStream {
     assert (tokenAtt instanceof Token);
   }
 
+  @Override
   public final boolean incrementToken() throws IOException {
     if (exhausted) {
       return false;
@@ -56,6 +57,7 @@ public final class SingleTokenTokenStream extends TokenStream {
     }
   }
 
+  @Override
   public void reset() throws IOException {
     exhausted = false;
   }
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.java
index a878284..eceef3f 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.java
@@ -39,10 +39,16 @@ public final class EdgeNGramTokenFilter extends TokenFilter {
   public static enum Side {
 
     /** Get the n-gram from the front of the input */
-    FRONT { public String getLabel() { return "front"; } },
+    FRONT {
+      @Override
+      public String getLabel() { return "front"; }
+    },
 
     /** Get the n-gram from the end of the input */
-    BACK  { public String getLabel() { return "back"; } };
+    BACK  {
+      @Override
+      public String getLabel() { return "back"; }
+    };
 
     public abstract String getLabel();
 
@@ -117,6 +123,7 @@ public final class EdgeNGramTokenFilter extends TokenFilter {
     this(input, Side.getSide(sideLabel), minGram, maxGram);
   }
 
+  @Override
   public final boolean incrementToken() throws IOException {
     while (true) {
       if (curTermBuffer == null) {
@@ -144,6 +151,7 @@ public final class EdgeNGramTokenFilter extends TokenFilter {
     }
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     curTermBuffer = null;
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.java
index 1a9a32a..efb49a9 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.java
@@ -44,10 +44,16 @@ public final class EdgeNGramTokenizer extends Tokenizer {
   public static enum Side {
 
     /** Get the n-gram from the front of the input */
-    FRONT { public String getLabel() { return "front"; } },
+    FRONT {
+      @Override
+      public String getLabel() { return "front"; }
+    },
 
     /** Get the n-gram from the end of the input */
-    BACK  { public String getLabel() { return "back"; } };
+    BACK  {
+      @Override
+      public String getLabel() { return "back"; }
+    };
 
     public abstract String getLabel();
 
@@ -174,6 +180,7 @@ public final class EdgeNGramTokenizer extends Tokenizer {
   }
 
   /** Returns the next token in the stream, or null at EOS. */
+  @Override
   public final boolean incrementToken() throws IOException {
     clearAttributes();
     // if we are just starting, read the whole input
@@ -205,17 +212,20 @@ public final class EdgeNGramTokenizer extends Tokenizer {
     return true;
   }
   
+  @Override
   public final void end() {
     // set final offset
     final int finalOffset = inLen;
     this.offsetAtt.setOffset(finalOffset, finalOffset);
   }    
 
+  @Override
   public void reset(Reader input) throws IOException {
     super.reset(input);
     reset();
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     started = false;
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter.java
index 14d887f..a418688 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter.java
@@ -72,6 +72,7 @@ public final class NGramTokenFilter extends TokenFilter {
   }
 
   /** Returns the next token in the stream, or null at EOS. */
+  @Override
   public final boolean incrementToken() throws IOException {
     while (true) {
       if (curTermBuffer == null) {
@@ -98,6 +99,7 @@ public final class NGramTokenFilter extends TokenFilter {
     }
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     curTermBuffer = null;
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer.java
index 76c78fd..371e2a5 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer.java
@@ -101,6 +101,7 @@ public final class NGramTokenizer extends Tokenizer {
   }
 
   /** Returns the next token in the stream, or null at EOS. */
+  @Override
   public final boolean incrementToken() throws IOException {
     clearAttributes();
     if (!started) {
@@ -128,17 +129,20 @@ public final class NGramTokenizer extends Tokenizer {
     return true;
   }
   
+  @Override
   public final void end() {
     // set final offset
     final int finalOffset = inLen;
     this.offsetAtt.setOffset(finalOffset, finalOffset);
   }    
   
+  @Override
   public void reset(Reader input) throws IOException {
     super.reset(input);
     reset();
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     started = false;
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer.java
index ebd6e97..39f0313 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer.java
@@ -188,6 +188,7 @@ public class DutchAnalyzer extends Analyzer {
    *   filtered with {@link StandardFilter}, {@link StopFilter}, 
    *   and {@link DutchStemFilter}
    */
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new StandardTokenizer(matchVersion, reader);
     result = new StandardFilter(result);
@@ -210,6 +211,7 @@ public class DutchAnalyzer extends Analyzer {
    *   filtered with {@link StandardFilter}, {@link StopFilter}, 
    *   and {@link DutchStemFilter}
    */
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
     if (overridesTokenStreamMethod) {
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchStemFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchStemFilter.java
index a7c5644..0ef67fc 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchStemFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchStemFilter.java
@@ -69,6 +69,7 @@ public final class DutchStemFilter extends TokenFilter {
   /**
    * Returns the next token in the stream, or null at EOS
    */
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       String term = termAtt.term();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.java
index 49bc9e9..cfe9319 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.java
@@ -59,6 +59,7 @@ public final class DelimitedPayloadTokenFilter extends TokenFilter {
     this.encoder = encoder;
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     boolean result = false;
     if (input.incrementToken()) {
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.java
index b57f5b1..3444b02 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.java
@@ -48,6 +48,7 @@ public class NumericPayloadTokenFilter extends TokenFilter {
     typeAtt = addAttribute(TypeAttribute.class);
   }
 
+  @Override
   public final boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       if (typeAtt.type().equals(typeMatch))
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.java
index fd10860..457913e 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.java
@@ -43,6 +43,7 @@ public class TokenOffsetPayloadTokenFilter extends TokenFilter {
     payAtt = addAttribute(PayloadAttribute.class);
   }
 
+  @Override
   public final boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       byte[] data = new byte[8];
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.java
index f822839..fe13321 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.java
@@ -44,6 +44,7 @@ public class TypeAsPayloadTokenFilter extends TokenFilter {
   }
 
 
+  @Override
   public final boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       String type = typeAtt.type();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/position/PositionFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/position/PositionFilter.java
index 39423bf..0757aaf 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/position/PositionFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/position/PositionFilter.java
@@ -62,6 +62,7 @@ public final class PositionFilter extends TokenFilter {
     this.positionIncrement = positionIncrement;
   }
 
+  @Override
   public final boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       if (firstTokenPositioned) {
@@ -75,6 +76,7 @@ public final class PositionFilter extends TokenFilter {
     }
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     firstTokenPositioned = false;
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java
index 6fb5ebb..7cb8662 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java
@@ -169,6 +169,7 @@ public class QueryAutoStopWordAnalyzer extends Analyzer {
     return stopWords.size();
   }
 
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result;
     try {
@@ -195,6 +196,7 @@ public class QueryAutoStopWordAnalyzer extends Analyzer {
     TokenStream withStopFilter;
   };
   
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
     if (overridesTokenStreamMethod) {
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter.java
index ecca817..6bbf63b 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter.java
@@ -88,6 +88,7 @@ public final class ReverseStringFilter extends TokenFilter {
     termAtt = addAttribute(TermAttribute.class);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       int len = termAtt.termLength();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer.java
index d901795..f3b3b19 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer.java
@@ -97,6 +97,7 @@ public final class RussianAnalyzer extends Analyzer
      *   {@link RussianLowerCaseFilter}, {@link StopFilter}, 
      *   and {@link RussianStemFilter}
      */
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader)
     {
         TokenStream result = new RussianLetterTokenizer(reader);
@@ -121,6 +122,7 @@ public final class RussianAnalyzer extends Analyzer
      *   {@link RussianLowerCaseFilter}, {@link StopFilter}, 
      *   and {@link RussianStemFilter}
      */
+    @Override
     public TokenStream reusableTokenStream(String fieldName, Reader reader) 
       throws IOException {
     SavedStreams streams = (SavedStreams) getPreviousTokenStream();
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer.java
index bd346f3..be7da5c 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer.java
@@ -49,6 +49,7 @@ public class RussianLetterTokenizer extends CharTokenizer
      * Collects only characters which satisfy
      * {@link Character#isLetter(char)}.
      */
+    @Override
     protected boolean isTokenChar(char c)
     {
         if (Character.isLetter(c) || (c >= '0' && c <= '9'))
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLowerCaseFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLowerCaseFilter.java
index 1e6ffa6..a773dca 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLowerCaseFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLowerCaseFilter.java
@@ -39,6 +39,7 @@ public final class RussianLowerCaseFilter extends TokenFilter
         termAtt = addAttribute(TermAttribute.class);
     }
 
+    @Override
     public final boolean incrementToken() throws IOException
     {
       if (input.incrementToken()) {
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianStemFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianStemFilter.java
index 55cdf4e..b956493 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianStemFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianStemFilter.java
@@ -51,6 +51,7 @@ public final class RussianStemFilter extends TokenFilter
     /**
      * Returns the next token in the stream, or null at EOS
      */
+    @Override
     public final boolean incrementToken() throws IOException
     {
       if (input.incrementToken()) {
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.java
index 89282f6..2410a0b 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.java
@@ -98,6 +98,7 @@ public class ShingleAnalyzerWrapper extends Analyzer {
     this.outputUnigrams = outputUnigrams;
   }
 
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream wrapped;
     try {
@@ -116,6 +117,7 @@ public class ShingleAnalyzerWrapper extends Analyzer {
     ShingleFilter shingle;
   };
   
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
     if (overridesTokenStreamMethod) {
       // LUCENE-1678: force fallback to tokenStream() if we
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.java
index a441a96..9bb8121 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.java
@@ -163,6 +163,7 @@ public final class ShingleFilter extends TokenFilter {
   /* (non-Javadoc)
    * @see org.apache.lucene.analysis.TokenStream#next()
    */
+  @Override
   public final boolean incrementToken() throws IOException {
     while (true) {
       if (nextToken == null) {
@@ -328,6 +329,7 @@ public final class ShingleFilter extends TokenFilter {
     return true;
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     nextToken = null;
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.java
index f6ce36b..c1b99e6 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.java
@@ -345,6 +345,7 @@ public final class ShingleMatrixFilter extends TokenStream {
   private Set<List<Token>> shinglesSeen = new HashSet<List<Token>>();
 
 
+  @Override
   public void reset() throws IOException {
     permutations = null;
     shinglesSeen.clear();
@@ -355,6 +356,7 @@ public final class ShingleMatrixFilter extends TokenStream {
 
   private Token reusableToken = new Token();
 
+  @Override
   public final boolean incrementToken() throws IOException {
     if (matrix == null) {
       matrix = new Matrix();
@@ -743,6 +745,7 @@ public final class ShingleMatrixFilter extends TokenStream {
         return Matrix.this.columns.indexOf(this);
       }
 
+      @Override
       public String toString() {
         return "Column{" +
             "first=" + first +
@@ -807,6 +810,7 @@ public final class ShingleMatrixFilter extends TokenStream {
 //          return ret;
 //        }
 
+        @Override
         public String toString() {
           return "Row{" +
               "index=" + getIndex() +
@@ -863,6 +867,7 @@ public final class ShingleMatrixFilter extends TokenStream {
       };
     }
 
+    @Override
     public String toString() {
       return "Matrix{" +
           "columns=" + columns +
@@ -920,17 +925,21 @@ public final class ShingleMatrixFilter extends TokenStream {
    */
   public static class OneDimensionalNonWeightedTokenSettingsCodec extends TokenSettingsCodec {
 
+    @Override
     public TokenPositioner getTokenPositioner(Token token) throws IOException {
       return TokenPositioner.newColumn;
     }
 
+    @Override
     public void setTokenPositioner(Token token, TokenPositioner tokenPositioner) {
     }
 
+    @Override
     public float getWeight(Token token) {
       return 1f;
     }
 
+    @Override
     public void setWeight(Token token, float weight) {
     }
 
@@ -944,6 +953,7 @@ public final class ShingleMatrixFilter extends TokenStream {
    */
   public static class TwoDimensionalNonWeightedSynonymTokenSettingsCodec extends TokenSettingsCodec {
 
+    @Override
     public TokenPositioner getTokenPositioner(Token token) throws IOException {
       if (token.getPositionIncrement() == 0) {
         return TokenPositioner.newRow;
@@ -952,14 +962,17 @@ public final class ShingleMatrixFilter extends TokenStream {
       }
     }
 
+    @Override
     public void setTokenPositioner(Token token, TokenPositioner tokenPositioner) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
     public float getWeight(Token token) {
       return 1f;
     }
 
+    @Override
     public void setWeight(Token token, float weight) {
     }
 
@@ -981,6 +994,7 @@ public final class ShingleMatrixFilter extends TokenStream {
      * @return the token flags int value as TokenPosition
      * @throws IOException
      */
+    @Override
     public TokenPositioner getTokenPositioner(Token token) throws IOException {
       switch (token.getFlags()) {
         case 0:
@@ -999,6 +1013,7 @@ public final class ShingleMatrixFilter extends TokenStream {
      * @param token
      * @param tokenPositioner
      */
+    @Override
     public void setTokenPositioner(Token token, TokenPositioner tokenPositioner) {
       token.setFlags(tokenPositioner.getIndex());
     }
@@ -1009,6 +1024,7 @@ public final class ShingleMatrixFilter extends TokenStream {
      * @param token
      * @return 32 bit float
      */
+    @Override
     public float getWeight(Token token) {
       if (token.getPayload() == null || token.getPayload().getData() == null) {
         return 1f;
@@ -1022,6 +1038,7 @@ public final class ShingleMatrixFilter extends TokenStream {
      * @param token
      * @param weight
      */
+    @Override
     public void setWeight(Token token, float weight) {
       if (weight == 1f) {
         token.setPayload(null);
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/DateRecognizerSinkFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/DateRecognizerSinkFilter.java
index 34ad7bf..6e14931 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/DateRecognizerSinkFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/DateRecognizerSinkFilter.java
@@ -49,6 +49,7 @@ public class DateRecognizerSinkFilter extends SinkFilter {
     this.dateFormat = dateFormat; 
   }
 
+  @Override
   public boolean accept(AttributeSource source) {
     if (termAtt == null) {
       termAtt = source.addAttribute(TermAttribute.class);
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/TokenRangeSinkFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/TokenRangeSinkFilter.java
index abaf84f..e38ac8a 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/TokenRangeSinkFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/TokenRangeSinkFilter.java
@@ -37,6 +37,7 @@ public class TokenRangeSinkFilter extends SinkFilter {
   }
 
   
+  @Override
   public boolean accept(AttributeSource source) {
     try {
       if (count >= lower && count < upper){
@@ -48,6 +49,7 @@ public class TokenRangeSinkFilter extends SinkFilter {
     }
   }
 
+  @Override
   public void reset() throws IOException {
     count = 0;
   }
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/TokenTypeSinkFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/TokenTypeSinkFilter.java
index 69a7093..f618bc5 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/TokenTypeSinkFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/TokenTypeSinkFilter.java
@@ -29,6 +29,7 @@ public class TokenTypeSinkFilter extends SinkFilter {
     this.typeToMatch = typeToMatch;
   }
 
+  @Override
   public boolean accept(AttributeSource source) {
     if (typeAtt == null) {
       typeAtt = source.addAttribute(TypeAttribute.class);
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer.java
index 4789583..e9763b8 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer.java
@@ -43,6 +43,7 @@ public class ThaiAnalyzer extends Analyzer {
     this.matchVersion = matchVersion;
   }
   
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream ts = new StandardTokenizer(matchVersion, reader);
     ts = new StandardFilter(ts);
@@ -57,6 +58,7 @@ public class ThaiAnalyzer extends Analyzer {
     TokenStream result;
   };
   
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
     if (overridesTokenStreamMethod) {
       // LUCENE-1678: force fallback to tokenStream() if we
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter.java
index 3670474..c554742 100644
--- a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter.java
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter.java
@@ -48,6 +48,7 @@ public final class ThaiWordFilter extends TokenFilter {
     offsetAtt = addAttribute(OffsetAttribute.class);
   }
   
+  @Override
   public final boolean incrementToken() throws IOException {
     if (thaiState != null) {
       int start = breaker.current();
@@ -82,6 +83,7 @@ public final class ThaiWordFilter extends TokenFilter {
     return false;
   }
   
+  @Override
   public void reset() throws IOException {
     super.reset();
     thaiState = null;
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer.java
index 160227c..63e4552 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer.java
@@ -65,6 +65,7 @@ public class TestChineseTokenizer extends BaseTokenStreamTestCase
      * convenience to show the behavior of the tokenizer
      */
     private class JustChineseTokenizerAnalyzer extends Analyzer {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new ChineseTokenizer(reader);
       }   
@@ -75,6 +76,7 @@ public class TestChineseTokenizer extends BaseTokenStreamTestCase
      * convenience to show the behavior of the filter.
      */
     private class JustChineseFilterAnalyzer extends Analyzer {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new ChineseFilter(new WhitespaceTokenizer(reader));
       }
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter.java
index 448d30e..6d740de 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter.java
@@ -51,6 +51,7 @@ public class TestCompoundWordTokenFilter extends BaseTokenStreamTestCase {
 
   private static byte[] patternsFileContent;
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     getHyphenationPatternFileContents();
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechAnalyzer.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechAnalyzer.java
index 7305303..4e40fd9 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechAnalyzer.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechAnalyzer.java
@@ -51,6 +51,7 @@ public class TestCzechAnalyzer extends BaseTokenStreamTestCase {
    * An input stream that always throws IOException for testing.
    */
   private class UnreliableInputStream extends InputStream {
+    @Override
     public int read() throws IOException {
       throw new IOException();
     }
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter.java
index 9b9bdf3..dd12268 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter.java
@@ -76,6 +76,7 @@ public class TestGermanStemFilter extends BaseTokenStreamTestCase {
       super(matchVersion);
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       return new WhitespaceTokenizer(reader);
     }
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest.java
index f3f970d..7d7f7b9 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest.java
@@ -29,6 +29,7 @@ import java.io.StringReader;
 public class EdgeNGramTokenFilterTest extends BaseTokenStreamTestCase {
   private TokenStream input;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     input = new WhitespaceTokenizer(new StringReader("abcde"));
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest.java
index c2d267e..56e6e88 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest.java
@@ -28,6 +28,7 @@ import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 public class EdgeNGramTokenizerTest extends BaseTokenStreamTestCase {
   private StringReader input;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     input = new StringReader("abcde");
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest.java
index d6d4b93..ba9f553 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest.java
@@ -30,6 +30,7 @@ import java.io.StringReader;
 public class NGramTokenFilterTest extends BaseTokenStreamTestCase {
     private TokenStream input;
     
+    @Override
     public void setUp() throws Exception {
         super.setUp();
         input = new WhitespaceTokenizer(new StringReader("abcde"));
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest.java
index ab7d92f..5843330 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest.java
@@ -30,6 +30,7 @@ import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 public class NGramTokenizerTest extends BaseTokenStreamTestCase {
     private StringReader input;
     
+    @Override
     public void setUp() throws Exception {
         super.setUp();
         input = new StringReader("abcde");
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/nl/TestDutchStemmer.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/nl/TestDutchStemmer.java
index 1063d09..aa737ec 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/nl/TestDutchStemmer.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/nl/TestDutchStemmer.java
@@ -134,6 +134,7 @@ public class TestDutchStemmer extends BaseTokenStreamTestCase {
     public DutchSubclassAnalyzer(Version matchVersion) {
       super(matchVersion);
     }
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       return new WhitespaceTokenizer(reader);
     }
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest.java
index 1ab3315..8470eae 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest.java
@@ -69,6 +69,7 @@ public class NumericPayloadTokenFilterTest extends BaseTokenStreamTestCase {
       typeAtt = addAttribute(TypeAttribute.class);
     }
     
+    @Override
     public boolean incrementToken() throws IOException {
       if (input.incrementToken()) {
         if (termAtt.term().equals("dogs"))
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest.java
index 14f9269..78672ee 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest.java
@@ -65,6 +65,7 @@ public class TypeAsPayloadTokenFilterTest extends BaseTokenStreamTestCase {
       typeAtt = addAttribute(TypeAttribute.class);
     }
 
+    @Override
     public boolean incrementToken() throws IOException {
       if (input.incrementToken()) {
         typeAtt.setType(String.valueOf(Character.toUpperCase(termAtt.termBuffer()[0])));
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/position/PositionFilterTest.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/position/PositionFilterTest.java
index a2ffd8e..ed12a7f 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/position/PositionFilterTest.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/position/PositionFilterTest.java
@@ -38,6 +38,7 @@ public class PositionFilterTest extends BaseTokenStreamTestCase {
       termAtt = addAttribute(TermAttribute.class);
     }
 
+    @Override
     public final boolean incrementToken() throws IOException {
       clearAttributes();
       if (index < testToken.length) {
@@ -47,6 +48,7 @@ public class PositionFilterTest extends BaseTokenStreamTestCase {
         return false;
       }
     }
+    @Override
     public void reset() {
       index = 0;
     }
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzerTest.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzerTest.java
index e9302df..be2f4c9 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzerTest.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzerTest.java
@@ -47,6 +47,7 @@ public class QueryAutoStopWordAnalyzerTest extends BaseTokenStreamTestCase {
   IndexReader reader;
   QueryAutoStopWordAnalyzer protectedAnalyzer;
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     dir = new RAMDirectory();
@@ -66,6 +67,7 @@ public class QueryAutoStopWordAnalyzerTest extends BaseTokenStreamTestCase {
     protectedAnalyzer = new QueryAutoStopWordAnalyzer(Version.LUCENE_CURRENT, appAnalyzer);
   }
 
+  @Override
   protected void tearDown() throws Exception {
     reader.close();
     super.tearDown();
@@ -154,6 +156,7 @@ public class QueryAutoStopWordAnalyzerTest extends BaseTokenStreamTestCase {
       super(matchVersion, new WhitespaceAnalyzer());
     }
     
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       return new WhitespaceTokenizer(reader);
     }    
@@ -172,6 +175,7 @@ public class QueryAutoStopWordAnalyzerTest extends BaseTokenStreamTestCase {
    */
   private class NonreusableAnalyzer extends Analyzer {
     int invocationCount = 0;
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       if (++invocationCount % 2 == 0)
         return new WhitespaceTokenizer(reader);
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer.java
index b8a9bdc..52c8646 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer.java
@@ -42,6 +42,7 @@ public class TestRussianAnalyzer extends BaseTokenStreamTestCase
 
     private File dataDir;
 
+    @Override
     protected void setUp() throws Exception
     {
       super.setUp();
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem.java
index 7eb0f74..3617a75 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianStem.java
@@ -37,6 +37,7 @@ public class TestRussianStem extends LuceneTestCase
     /**
      * @see TestCase#setUp()
      */
+    @Override
     protected void setUp() throws Exception
     {
         super.setUp();
@@ -73,6 +74,7 @@ public class TestRussianStem extends LuceneTestCase
     /**
      * @see TestCase#tearDown()
      */
+    @Override
     protected void tearDown() throws Exception
     {
         super.tearDown();
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest.java
index 2a1c662..09d280e 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest.java
@@ -221,6 +221,7 @@ public class ShingleAnalyzerWrapperTest extends BaseTokenStreamTestCase {
       super(org.apache.lucene.util.Version.LUCENE_CURRENT);
     }
   
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       return new WhitespaceTokenizer(reader);
     }  
@@ -240,6 +241,7 @@ public class ShingleAnalyzerWrapperTest extends BaseTokenStreamTestCase {
    */
   private class NonreusableAnalyzer extends Analyzer {
     int invocationCount = 0;
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       if (++invocationCount % 2 == 0)
         return new WhitespaceTokenizer(reader);
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest.java
index bda48c6..8d4f561 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest.java
@@ -48,6 +48,7 @@ public class ShingleFilterTest extends BaseTokenStreamTestCase {
       this.typeAtt = addAttribute(TypeAttribute.class);
     }
 
+    @Override
     public final boolean incrementToken() throws IOException {
       clearAttributes();
       if (index < testToken.length) {
@@ -201,6 +202,7 @@ public class ShingleFilterTest extends BaseTokenStreamTestCase {
   };
 
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     testTokenWithHoles = new Token[] {
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.java
index 167435c..ea75f6e 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.java
@@ -537,6 +537,7 @@ public class TestShingleMatrixFilter extends BaseTokenStreamTestCase {
 
     private Iterator iterator;
 
+    @Override
     public boolean incrementToken() throws IOException {
       if (iterator == null) {
         iterator = tokens.iterator();
@@ -556,6 +557,7 @@ public class TestShingleMatrixFilter extends BaseTokenStreamTestCase {
     }
 
 
+    @Override
     public void reset() throws IOException {
       iterator = null;
     }
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/TokenTypeSinkTokenizerTest.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/TokenTypeSinkTokenizerTest.java
index 6ba2790..3ec31cd 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/TokenTypeSinkTokenizerTest.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/TokenTypeSinkTokenizerTest.java
@@ -76,6 +76,7 @@ public class TokenTypeSinkTokenizerTest extends BaseTokenStreamTestCase {
       typeAtt = addAttribute(TypeAttribute.class);
     }
 
+    @Override
     public final boolean incrementToken() throws IOException {
       if (!input.incrementToken()) return false;
       
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer.java
index cf8a09a..8c7334a 100644
--- a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer.java
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer.java
@@ -132,6 +132,7 @@ public class TestThaiAnalyzer extends BaseTokenStreamTestCase {
           public ThaiSubclassAnalyzer(Version matchVersion) {
             super(matchVersion);
           }
+	  @Override
 	  public TokenStream tokenStream(String fieldName, Reader reader) {
 	    return new WhitespaceTokenizer(reader);
 	  }
diff --git a/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer.java b/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer.java
index d5567ad..9ed925c 100644
--- a/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer.java
+++ b/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer.java
@@ -73,6 +73,7 @@ public final class SentenceTokenizer extends Tokenizer {
     typeAtt = addAttribute(TypeAttribute.class);    
   }
   
+  @Override
   public boolean incrementToken() throws IOException {
     clearAttributes();
     buffer.setLength(0);
@@ -122,11 +123,13 @@ public final class SentenceTokenizer extends Tokenizer {
     }
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     tokenStart = tokenEnd = 0;
   }
 
+  @Override
   public void reset(Reader input) throws IOException {
     super.reset(input);
     reset();
diff --git a/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseAnalyzer.java b/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseAnalyzer.java
index 8729a51..06d0ec2 100644
--- a/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseAnalyzer.java
+++ b/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseAnalyzer.java
@@ -144,6 +144,7 @@ public class SmartChineseAnalyzer extends Analyzer {
     this.matchVersion = matchVersion;
   }
 
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new SentenceTokenizer(reader);
     result = new WordTokenFilter(result);
@@ -163,6 +164,7 @@ public class SmartChineseAnalyzer extends Analyzer {
     TokenStream filteredTokenStream;
   }
   
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
     SavedStreams streams = (SavedStreams) getPreviousTokenStream();
diff --git a/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter.java b/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter.java
index 369ff05..501d92a 100644
--- a/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter.java
+++ b/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter.java
@@ -61,6 +61,7 @@ public final class WordTokenFilter extends TokenFilter {
     typeAtt = addAttribute(TypeAttribute.class);
   }
   
+  @Override
   public boolean incrementToken() throws IOException {   
     if (tokenIter == null || !tokenIter.hasNext()) {
       // there are no remaining tokens from the current sentence... are there more sentences?
@@ -88,6 +89,7 @@ public final class WordTokenFilter extends TokenFilter {
     return true;
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     tokenIter = null;
diff --git a/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph.java b/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph.java
index 1243f12..12c18f6 100644
--- a/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph.java
+++ b/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph.java
@@ -221,6 +221,7 @@ class BiSegGraph {
 
   }
 
+  @Override
   public String toString() {
     StringBuilder sb = new StringBuilder();
     Collection<ArrayList<SegTokenPair>>  values = tokenPairListTable.values();
diff --git a/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/PathNode.java b/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/PathNode.java
index e424666..043235f 100644
--- a/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/PathNode.java
+++ b/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/PathNode.java
@@ -45,6 +45,7 @@ class PathNode implements Comparable<PathNode> {
   /**
    * @see java.lang.Object#hashCode()
    */
+  @Override
   public int hashCode() {
     final int prime = 31;
     int result = 1;
@@ -58,6 +59,7 @@ class PathNode implements Comparable<PathNode> {
   /**
    * @see java.lang.Object#equals(java.lang.Object)
    */
+  @Override
   public boolean equals(Object obj) {
     if (this == obj)
       return true;
diff --git a/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph.java b/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph.java
index 04d22b5..45ea900 100644
--- a/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph.java
+++ b/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegGraph.java
@@ -136,6 +136,7 @@ class SegGraph {
     return result;
   }
 
+  @Override
   public String toString() {
     List<SegToken> tokenList = this.toTokenList();
     StringBuilder sb = new StringBuilder();
diff --git a/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegToken.java b/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegToken.java
index ba38673..68013be 100644
--- a/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegToken.java
+++ b/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegToken.java
@@ -80,6 +80,7 @@ public class SegToken {
   /**
    * @see java.lang.Object#hashCode()
    */
+  @Override
   public int hashCode() {
     final int prime = 31;
     int result = 1;
@@ -97,6 +98,7 @@ public class SegToken {
   /**
    * @see java.lang.Object#equals(java.lang.Object)
    */
+  @Override
   public boolean equals(Object obj) {
     if (this == obj)
       return true;
diff --git a/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegTokenPair.java b/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegTokenPair.java
index 11729bb..f9e24b7 100644
--- a/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegTokenPair.java
+++ b/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegTokenPair.java
@@ -53,6 +53,7 @@ class SegTokenPair {
   /**
    * @see java.lang.Object#hashCode()
    */
+  @Override
   public int hashCode() {
     final int prime = 31;
     int result = 1;
@@ -70,6 +71,7 @@ class SegTokenPair {
   /**
    * @see java.lang.Object#equals(java.lang.Object)
    */
+  @Override
   public boolean equals(Object obj) {
     if (this == obj)
       return true;
diff --git a/contrib/ant/src/java/org/apache/lucene/ant/DocumentHandlerException.java b/contrib/ant/src/java/org/apache/lucene/ant/DocumentHandlerException.java
index 2ceb81e..2973ae2 100644
--- a/contrib/ant/src/java/org/apache/lucene/ant/DocumentHandlerException.java
+++ b/contrib/ant/src/java/org/apache/lucene/ant/DocumentHandlerException.java
@@ -53,10 +53,12 @@ public class DocumentHandlerException extends Exception {
         return cause;
     }
 
+    @Override
     public void printStackTrace() {
         printStackTrace(System.err);
     }
 
+    @Override
     public void printStackTrace(PrintStream ps) {
         synchronized (ps) {
             super.printStackTrace(ps);
@@ -67,6 +69,7 @@ public class DocumentHandlerException extends Exception {
         }
     }
 
+    @Override
     public void printStackTrace(PrintWriter pw) {
         synchronized (pw) {
             super.printStackTrace(pw);
diff --git a/contrib/ant/src/java/org/apache/lucene/ant/IndexTask.java b/contrib/ant/src/java/org/apache/lucene/ant/IndexTask.java
index f4a3003..9df5eb1 100644
--- a/contrib/ant/src/java/org/apache/lucene/ant/IndexTask.java
+++ b/contrib/ant/src/java/org/apache/lucene/ant/IndexTask.java
@@ -220,6 +220,7 @@ public class IndexTask extends Task {
    *@exception  BuildException  If an error occurs indexing the
    *      fileset
    */
+  @Override
   public void execute() throws BuildException {
 
     // construct handler and analyzer dynamically
@@ -426,6 +427,7 @@ public class IndexTask extends Task {
     /**
      * @see EnumeratedAttribute#getValues
      */
+    @Override
     public String[] getValues() {
       Set keys = analyzerLookup.keySet();
       return (String[]) keys.toArray(new String[0]);
diff --git a/contrib/ant/src/test/org/apache/lucene/ant/HtmlDocumentTest.java b/contrib/ant/src/test/org/apache/lucene/ant/HtmlDocumentTest.java
index 5373b90..80eeea8 100644
--- a/contrib/ant/src/test/org/apache/lucene/ant/HtmlDocumentTest.java
+++ b/contrib/ant/src/test/org/apache/lucene/ant/HtmlDocumentTest.java
@@ -30,6 +30,7 @@ public class HtmlDocumentTest extends DocumentTestCase
     
     HtmlDocument doc;
     
+    @Override
     public void setUp() throws IOException {
         doc = new HtmlDocument(getFile("test.html"));
     }
@@ -39,6 +40,7 @@ public class HtmlDocumentTest extends DocumentTestCase
         assertTrue("Body", doc.getBody().startsWith("This is some test"));
     }
     
+    @Override
     public void tearDown() {
         doc = null;
     }
diff --git a/contrib/ant/src/test/org/apache/lucene/ant/IndexTaskTest.java b/contrib/ant/src/test/org/apache/lucene/ant/IndexTaskTest.java
index ad225ee..d9ecdd2 100644
--- a/contrib/ant/src/test/org/apache/lucene/ant/IndexTaskTest.java
+++ b/contrib/ant/src/test/org/apache/lucene/ant/IndexTaskTest.java
@@ -54,6 +54,7 @@ public class IndexTaskTest extends TestCase {
      *
      *@exception  IOException  Description of Exception
      */
+    @Override
     public void setUp() throws Exception {
         Project project = new Project();
 
@@ -86,6 +87,7 @@ public class IndexTaskTest extends TestCase {
      *  The teardown method for JUnit
      * TODO: remove indexDir?
      */
+    @Override
     public void tearDown() throws IOException {
         searcher.close();
         dir.close();
diff --git a/contrib/ant/src/test/org/apache/lucene/ant/TextDocumentTest.java b/contrib/ant/src/test/org/apache/lucene/ant/TextDocumentTest.java
index fafeff4..0d099dd 100644
--- a/contrib/ant/src/test/org/apache/lucene/ant/TextDocumentTest.java
+++ b/contrib/ant/src/test/org/apache/lucene/ant/TextDocumentTest.java
@@ -30,6 +30,7 @@ public class TextDocumentTest extends DocumentTestCase
     
     TextDocument doc;
     
+    @Override
     public void setUp() throws IOException {
         doc = new TextDocument(getFile("test.txt"));
     }
@@ -38,6 +39,7 @@ public class TextDocumentTest extends DocumentTestCase
         assertEquals("Contents", "Test Contents", doc.getContents());
     }
     
+    @Override
     public void tearDown() {
         doc = null;
     }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java
index 3f04eae..8d2a193 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java
@@ -174,10 +174,12 @@ public class DirContentSource extends ContentSource {
     return dfi.df.parse(dateStr.trim(), dfi.pos);
   }
 
+  @Override
   public void close() throws IOException {
     inputFiles = null;
   }
   
+  @Override
   public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {
     File f = null;
     String name = null;
@@ -219,12 +221,14 @@ public class DirContentSource extends ContentSource {
     return docData;
   }
   
+  @Override
   public synchronized void resetInputs() throws IOException {
     super.resetInputs();
     inputFiles = new Iterator(dataDir);
     iteration = 0;
   }
 
+  @Override
   public void setConfig(Config config) {
     super.setConfig(config);
     
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java
index a9c5aea..84922a3 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java
@@ -103,10 +103,12 @@ public class EnwikiContentSource extends ContentSource {
       return buffer.toString();
     }
     
+    @Override
     public void characters(char[] ch, int start, int length) {
       contents.append(ch, start, length);
     }
 
+    @Override
     public void endElement(String namespace, String simple, String qualified)
       throws SAXException {
       int elemType = getElementType(qualified);
@@ -197,6 +199,7 @@ public class EnwikiContentSource extends ContentSource {
       }
     }
 
+    @Override
     public void startElement(String namespace, String simple, String qualified,
                              Attributes attributes) {
       int elemType = getElementType(qualified);
@@ -257,6 +260,7 @@ public class EnwikiContentSource extends ContentSource {
   private InputStream is;
   private Parser parser = new Parser();
   
+  @Override
   public void close() throws IOException {
     synchronized (EnwikiContentSource.this) {
       if (is != null) {
@@ -266,6 +270,7 @@ public class EnwikiContentSource extends ContentSource {
     }
   }
   
+  @Override
   public synchronized DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {
     String[] tuple = parser.next();
     docData.clear();
@@ -276,11 +281,13 @@ public class EnwikiContentSource extends ContentSource {
     return docData;
   }
 
+  @Override
   public void resetInputs() throws IOException {
     super.resetInputs();
     is = getInputStream(file);
   }
   
+  @Override
   public void setConfig(Config config) {
     super.setConfig(config);
     keepImages = config.get("keep.image.only.docs", true);
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiDocMaker.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiDocMaker.java
index 96a01da..d52ce07 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiDocMaker.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiDocMaker.java
@@ -26,6 +26,7 @@ import org.apache.lucene.benchmark.byTask.utils.Config;
  * @deprecated Please use {@link DocMaker} instead, with content.source=EnwikiContentSource
  */
 public class EnwikiDocMaker extends DocMaker {
+  @Override
   public void setConfig(Config config) {
     super.setConfig(config);
     // Override whatever content source was set in the config
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiQueryMaker.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiQueryMaker.java
index babf678..106c6c3 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiQueryMaker.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiQueryMaker.java
@@ -122,6 +122,7 @@ public class EnwikiQueryMaker extends AbstractQueryMaker implements
     return queries.toArray(new Query[0]);
   }
 
+  @Override
   protected Query[] prepareQueries() throws Exception {
     // analyzer (default is standard analyzer)
     Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get("analyzer", StandardAnalyzer.class.getName()));
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker.java
index 848550f..8cb0f95 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker.java
@@ -44,6 +44,7 @@ import java.util.List;
 public class FileBasedQueryMaker extends AbstractQueryMaker implements QueryMaker{
 
 
+  @Override
   protected Query[] prepareQueries() throws Exception {
 
     Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get("analyzer",
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocMaker.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocMaker.java
index 01d529d..5c59625 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocMaker.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocMaker.java
@@ -39,6 +39,7 @@ import org.apache.lucene.benchmark.byTask.utils.Config;
  * @deprecated Please use {@link DocMaker} instead, with content.source=LineDocSource
  */
 public class LineDocMaker extends DocMaker {
+  @Override
   public void setConfig(Config config) {
     super.setConfig(config);
     source = new LineDocSource();
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource.java
index d1e947a..af271d2 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource.java
@@ -61,6 +61,7 @@ public class LineDocSource extends ContentSource {
     }
   }
 
+  @Override
   public void close() throws IOException {
     if (reader != null) {
       reader.close();
@@ -68,6 +69,7 @@ public class LineDocSource extends ContentSource {
     }
   }
   
+  @Override
   public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {
     String line;
     synchronized(this) {
@@ -100,11 +102,13 @@ public class LineDocSource extends ContentSource {
     return docData;
   }
 
+  @Override
   public void resetInputs() throws IOException {
     super.resetInputs();
     openFile();
   }
   
+  @Override
   public void setConfig(Config config) {
     super.setConfig(config);
     String fileName = config.get("docs.file", null);
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersContentSource.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersContentSource.java
index 9e00615..066d9bd 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersContentSource.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersContentSource.java
@@ -53,6 +53,7 @@ public class ReutersContentSource extends ContentSource {
   private int nextFile = 0;
   private int iteration = 0;
   
+  @Override
   public void setConfig(Config config) {
     super.setConfig(config);
     File workDir = new File(config.get("work.dir", "work"));
@@ -89,10 +90,12 @@ public class ReutersContentSource extends ContentSource {
   }
 
 
+  @Override
   public void close() throws IOException {
     // TODO implement?
   }
   
+  @Override
   public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {
     File f = null;
     String name = null;
@@ -138,6 +141,7 @@ public class ReutersContentSource extends ContentSource {
     }
   }
 
+  @Override
   public synchronized void resetInputs() throws IOException {
     super.resetInputs();
     nextFile = 0;
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker.java
index 76bcb64..c12ed07 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker.java
@@ -102,6 +102,7 @@ public class ReutersQueryMaker extends AbstractQueryMaker implements QueryMaker
     return queries.toArray(new Query[0]);
   }
   
+  @Override
   protected Query[] prepareQueries() throws Exception {
     // analyzer (default is standard analyzer)
     Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get("analyzer",
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker.java
index dedb2f3..c550f33 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker.java
@@ -42,6 +42,7 @@ public class SimpleQueryMaker extends AbstractQueryMaker implements QueryMaker {
    * @return prepared queries.
    * @throws Exception if cannot prepare the queries.
    */
+  @Override
   protected Query[] prepareQueries() throws Exception {
     // analyzer (default is standard analyzer)
     Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get("analyzer",
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleSloppyPhraseQueryMaker.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleSloppyPhraseQueryMaker.java
index 7163513..84930b6 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleSloppyPhraseQueryMaker.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleSloppyPhraseQueryMaker.java
@@ -32,6 +32,7 @@ public class SimpleSloppyPhraseQueryMaker extends SimpleQueryMaker {
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker#prepareQueries()
    */
+  @Override
   protected Query[] prepareQueries() throws Exception {
     // extract some 100 words from doc text to an array
     String words[];
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SingleDocSource.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SingleDocSource.java
index 04d7fce..547b17f 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SingleDocSource.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SingleDocSource.java
@@ -50,8 +50,10 @@ public class SingleDocSource extends ContentSource {
     return docID++;
   }
 
+  @Override
   public void close() throws IOException {}
   
+  @Override
   public DocData getNextDocData(DocData docData) throws NoMoreDataException {
     int id = newdocid();
     addBytes(DOC_TEXT.length());
@@ -61,6 +63,7 @@ public class SingleDocSource extends ContentSource {
     return docData;
   }
 
+  @Override
   public synchronized void resetInputs() throws IOException {
     super.resetInputs();
     docID = 0;
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SortableSingleDocSource.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SortableSingleDocSource.java
index efcd75e..a7da954 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SortableSingleDocSource.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SortableSingleDocSource.java
@@ -78,6 +78,7 @@ public class SortableSingleDocSource extends SingleDocSource {
   private int sortRange;
   private Random r;
 
+  @Override
   public DocData getNextDocData(DocData docData) throws NoMoreDataException {
     docData = super.getNextDocData(docData);
     Properties props = new Properties();
@@ -103,6 +104,7 @@ public class SortableSingleDocSource extends SingleDocSource {
     return start + r.nextInt(end - start);
   }
 
+  @Override
   public void setConfig(Config config) {
     super.setConfig(config);
     sortRange = config.get("sort.rng", 20000);
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource.java
index 990f375..adc3a3f 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource.java
@@ -216,6 +216,7 @@ public class TrecContentSource extends ContentSource {
     return null; 
   }
   
+  @Override
   public void close() throws IOException {
     if (reader == null) {
       return;
@@ -232,6 +233,7 @@ public class TrecContentSource extends ContentSource {
     reader = null;
   }
 
+  @Override
   public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {
     String dateStr = null, name = null;
     Reader r = null;
@@ -306,6 +308,7 @@ public class TrecContentSource extends ContentSource {
     return docData;
   }
 
+  @Override
   public void resetInputs() throws IOException {
     synchronized (lock) {
       super.resetInputs();
@@ -315,6 +318,7 @@ public class TrecContentSource extends ContentSource {
     }
   }
 
+  @Override
   public void setConfig(Config config) {
     super.setConfig(config);
     File workDir = new File(config.get("work.dir", "work"));
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats.java
index 61f94ca..d537097 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats.java
@@ -102,6 +102,7 @@ public class TaskStats implements Cloneable {
   /* (non-Javadoc)
    * @see java.lang.Object#toString()
    */
+  @Override
   public String toString() {
     StringBuffer res = new StringBuffer(task.getName());
     res.append(" ");
@@ -178,6 +179,7 @@ public class TaskStats implements Cloneable {
   /* (non-Javadoc)
    * @see java.lang.Object#clone()
    */
+  @Override
   public Object clone() throws CloneNotSupportedException {
     return super.clone();
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/AddDocTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/AddDocTask.java
index 433e663..672d736 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/AddDocTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/AddDocTask.java
@@ -37,6 +37,7 @@ public class AddDocTask extends PerfTask {
   // volatile data passed between setup(), doLogic(), tearDown().
   private Document doc = null;
   
+  @Override
   public void setup() throws Exception {
     super.setup();
     DocMaker docMaker = getRunData().getDocMaker();
@@ -47,15 +48,18 @@ public class AddDocTask extends PerfTask {
     }
   }
 
+  @Override
   public void tearDown() throws Exception {
     doc = null;
     super.tearDown();
   }
 
+  @Override
   protected String getLogMessage(int recsCount) {
     return "added " + recsCount + " docs";
   }
   
+  @Override
   public int doLogic() throws Exception {
     getRunData().getIndexWriter().addDocument(doc);
     return 1;
@@ -65,6 +69,7 @@ public class AddDocTask extends PerfTask {
    * Set the params (docSize only)
    * @param params docSize, or 0 for no limit.
    */
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     docSize = (int) Float.parseFloat(params); 
@@ -73,6 +78,7 @@ public class AddDocTask extends PerfTask {
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#supportsParams()
    */
+  @Override
   public boolean supportsParams() {
     return true;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ClearStatsTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ClearStatsTask.java
index b7d2316..d1172d8 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ClearStatsTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ClearStatsTask.java
@@ -29,6 +29,7 @@ public class ClearStatsTask extends PerfTask {
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     getRunData().getPoints().clearData();
     return 0;
@@ -37,6 +38,7 @@ public class ClearStatsTask extends PerfTask {
   /* (non-Javadoc)
    * @see PerfTask#shouldNotRecordStats()
    */
+  @Override
   protected boolean shouldNotRecordStats() {
     return true;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseIndexTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseIndexTask.java
index a036477..992a3e59 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseIndexTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseIndexTask.java
@@ -36,6 +36,7 @@ public class CloseIndexTask extends PerfTask {
 
   boolean doWait = true;
 
+  @Override
   public int doLogic() throws IOException {
     IndexWriter iw = getRunData().getIndexWriter();
     if (iw != null) {
@@ -51,11 +52,13 @@ public class CloseIndexTask extends PerfTask {
     return 1;
   }
 
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     doWait = Boolean.valueOf(params).booleanValue();
   }
 
+  @Override
   public boolean supportsParams() {
     return true;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseReaderTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseReaderTask.java
index 7b827c8..635fff6 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseReaderTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CloseReaderTask.java
@@ -33,6 +33,7 @@ public class CloseReaderTask extends PerfTask {
     super(runData);
   }
 
+  @Override
   public int doLogic() throws IOException {
     IndexReader reader= getRunData().getIndexReader();
     if (reader!=null) {
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CommitIndexTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CommitIndexTask.java
index 8fecc60..ba6b99f 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CommitIndexTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CommitIndexTask.java
@@ -34,15 +34,18 @@ public class CommitIndexTask extends PerfTask {
     super(runData);
   }
   
+  @Override
   public boolean supportsParams() {
     return true;
   }
   
+  @Override
   public void setParams(String params) {
     commitUserData = new HashMap<String,String>();
     commitUserData.put(OpenReaderTask.USER_DATA, params);
   }
   
+  @Override
   public int doLogic() throws Exception {
     IndexWriter iw = getRunData().getIndexWriter();
     if (iw != null) {
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ConsumeContentSourceTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ConsumeContentSourceTask.java
index a73aabf..5dbed92 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ConsumeContentSourceTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ConsumeContentSourceTask.java
@@ -50,15 +50,18 @@ public class ConsumeContentSourceTask extends PerfTask {
     }
   }
 
+  @Override
   protected String getLogMessage(int recsCount) {
     return "read " + recsCount + " documents from the content source";
   }
   
+  @Override
   public void close() throws Exception {
     source.close();
     super.close();
   }
 
+  @Override
   public int doLogic() throws Exception {
     dd = source.getNextDocData(dd);
     return 1;
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java
index 7f86fb5..666ccb5 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java
@@ -122,6 +122,7 @@ public class CreateIndexTask extends PerfTask {
     return indexDeletionPolicy;
   }
   
+  @Override
   public int doLogic() throws IOException {
     PerfRunData runData = getRunData();
     Config config = runData.getConfig();
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask.java
index 29bfb88..8a052da 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask.java
@@ -49,19 +49,23 @@ public class DeleteByPercentTask extends PerfTask {
     random = new Random(runData.getConfig().get("delete.percent.rand.seed", 1717));
   }
   
+  @Override
   public void setup() throws Exception {
     super.setup();
   }
 
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     percent = Double.parseDouble(params)/100;
   }
 
+  @Override
   public boolean supportsParams() {
     return true;
   }
 
+  @Override
   public int doLogic() throws Exception {
     IndexReader r = getRunData().getIndexReader();
     int maxDoc = r.maxDoc();
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteDocTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteDocTask.java
index 64fdf45..67a00c5 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteDocTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteDocTask.java
@@ -40,6 +40,7 @@ public class DeleteDocTask extends PerfTask {
   private int docid = -1;
   private boolean byStep = true;
   
+  @Override
   public int doLogic() throws Exception {
     getRunData().getIndexReader().deleteDocument(docid);
     lastDeleted = docid;
@@ -49,6 +50,7 @@ public class DeleteDocTask extends PerfTask {
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#setup()
    */
+  @Override
   public void setup() throws Exception {
     super.setup();
     if (deleteStep<0) {
@@ -58,6 +60,7 @@ public class DeleteDocTask extends PerfTask {
     docid = (byStep ? lastDeleted + deleteStep : docid);
   }
 
+  @Override
   protected String getLogMessage(int recsCount) {
     return "deleted " + recsCount + " docs, last deleted: " + lastDeleted;
   }
@@ -66,6 +69,7 @@ public class DeleteDocTask extends PerfTask {
    * Set the params (docid only)
    * @param params docid to delete, or -1 for deleting by delete gap settings.
    */
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     docid = (int) Float.parseFloat(params);
@@ -75,6 +79,7 @@ public class DeleteDocTask extends PerfTask {
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#supportsParams()
    */
+  @Override
   public boolean supportsParams() {
     return true;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/FlushReaderTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/FlushReaderTask.java
index cb47dbb..ce1adc9 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/FlushReaderTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/FlushReaderTask.java
@@ -31,15 +31,18 @@ public class FlushReaderTask extends PerfTask {
     super(runData);
   }
   
+  @Override
   public boolean supportsParams() {
     return true;
   }
   
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     userData = params;
   }
   
+  @Override
   public int doLogic() throws IOException {
     IndexReader reader = getRunData().getIndexReader();
     if (userData != null) {
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask.java
index 821526b..a89e919 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask.java
@@ -59,6 +59,7 @@ public class NearRealtimeReaderTask extends PerfTask {
       setDaemon(true);
     }
 
+    @Override
     public void run() {
 
       IndexReader reader = null;
@@ -106,6 +107,7 @@ public class NearRealtimeReaderTask extends PerfTask {
     super(runData);
   }
 
+  @Override
   public int doLogic() throws IOException {
     if (t == null) {
       IndexWriter w = getRunData().getIndexWriter();
@@ -115,16 +117,19 @@ public class NearRealtimeReaderTask extends PerfTask {
     return 1;
   }
 
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     pauseSec = Float.parseFloat(params);
   }
 
+  @Override
   public boolean supportsParams() {
     return true;
   }
 
   // Close the thread
+  @Override
   public void close() throws InterruptedException {
     if (t != null) {
       t.done = true;
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask.java
index fb3dce3..6d30114 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask.java
@@ -50,6 +50,7 @@ public class NewAnalyzerTask extends PerfTask {
     }
   }
 
+  @Override
   public int doLogic() throws IOException {
     String className = null;
     try {
@@ -81,6 +82,7 @@ public class NewAnalyzerTask extends PerfTask {
    * Example Declaration: {"NewAnalyzer" NewAnalyzer(WhitespaceAnalyzer, SimpleAnalyzer, StopAnalyzer, standard.StandardAnalyzer) >
    * @param params analyzerClassName, or empty for the StandardAnalyzer
    */
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     for (StringTokenizer tokenizer = new StringTokenizer(params, ","); tokenizer.hasMoreTokens();) {
@@ -92,6 +94,7 @@ public class NewAnalyzerTask extends PerfTask {
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#supportsParams()
    */
+  @Override
   public boolean supportsParams() {
     return true;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewRoundTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewRoundTask.java
index 826d347..ec16979 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewRoundTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewRoundTask.java
@@ -30,6 +30,7 @@ public class NewRoundTask extends PerfTask {
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     getRunData().getConfig().newRound();
     return 0;
@@ -38,6 +39,7 @@ public class NewRoundTask extends PerfTask {
   /* (non-Javadoc)
    * @see PerfTask#shouldNotRecordStats()
    */
+  @Override
   protected boolean shouldNotRecordStats() {
     return true;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask.java
index 9ae11a2..0a7cb30 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask.java
@@ -42,6 +42,7 @@ public class OpenIndexTask extends PerfTask {
     super(runData);
   }
 
+  @Override
   public int doLogic() throws IOException {
     PerfRunData runData = getRunData();
     Config config = runData.getConfig();
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask.java
index 2b73483..a21ed7f 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenReaderTask.java
@@ -42,6 +42,7 @@ public class OpenReaderTask extends PerfTask {
     super(runData);
   }
 
+  @Override
   public int doLogic() throws IOException {
     Directory dir = getRunData().getDirectory();
     Config config = getRunData().getConfig();
@@ -75,6 +76,7 @@ public class OpenReaderTask extends PerfTask {
     return r;
   }
   
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     if (params != null) {
@@ -88,6 +90,7 @@ public class OpenReaderTask extends PerfTask {
     }
   }
 
+  @Override
   public boolean supportsParams() {
     return true;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OptimizeTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OptimizeTask.java
index c2c22a8..19947b6 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OptimizeTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OptimizeTask.java
@@ -32,6 +32,7 @@ public class OptimizeTask extends PerfTask {
 
   int maxNumSegments = 1;
 
+  @Override
   public int doLogic() throws Exception {
     IndexWriter iw = getRunData().getIndexWriter();
     iw.optimize(maxNumSegments);
@@ -39,11 +40,13 @@ public class OptimizeTask extends PerfTask {
     return 1;
   }
 
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     maxNumSegments = Double.valueOf(params).intValue();
   }
 
+  @Override
   public boolean supportsParams() {
     return true;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask.java
index fe4968f..f7b3932 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask.java
@@ -117,6 +117,7 @@ public abstract class PerfTask implements Cloneable {
     checkObsoleteSettings(config);
   }
   
+  @Override
   protected Object clone() throws CloneNotSupportedException {
     // tasks having non primitive data structures should override this.
     // otherwise parallel running of a task sequence might not run correctly. 
@@ -208,6 +209,7 @@ public abstract class PerfTask implements Cloneable {
   /* (non-Javadoc)
    * @see java.lang.Object#toString()
    */
+  @Override
   public String toString() {
     String padd = getPadding();
     StringBuffer sb = new StringBuffer(padd);
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PrintReaderTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PrintReaderTask.java
index 2be81f2..f7d3bf6 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PrintReaderTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PrintReaderTask.java
@@ -29,15 +29,18 @@ public class PrintReaderTask extends PerfTask {
     super(runData);
   }
   
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     userData = params;
   }
   
+  @Override
   public boolean supportsParams() {
     return true;
   }
   
+  @Override
   public int doLogic() throws Exception {
     Directory dir = getRunData().getDirectory();
     Config config = getRunData().getConfig();
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask.java
index bc11930..038e0d2 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask.java
@@ -63,6 +63,7 @@ public abstract class ReadTask extends PerfTask {
   public ReadTask(PerfRunData runData) {
     super(runData);
   }
+  @Override
   public int doLogic() throws Exception {
     int res = 0;
     boolean closeReader = false;
@@ -224,6 +225,7 @@ public abstract class ReadTask extends PerfTask {
   static final int DEFAULT_SEARCH_NUM_HITS = 10;
   private int numHits;
 
+  @Override
   public void setup() throws Exception {
     super.setup();
     numHits = getRunData().getConfig().get("search.num.hits", DEFAULT_SEARCH_NUM_HITS);
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTokensTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTokensTask.java
index 1c0face..f47d304 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTokensTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTokensTask.java
@@ -43,21 +43,25 @@ public class ReadTokensTask extends PerfTask {
   // volatile data passed between setup(), doLogic(), tearDown().
   private Document doc = null;
   
+  @Override
   public void setup() throws Exception {
     super.setup();
     DocMaker docMaker = getRunData().getDocMaker();
     doc = docMaker.makeDocument();
   }
 
+  @Override
   protected String getLogMessage(int recsCount) {
     return "read " + recsCount + " docs; " + totalTokenCount + " tokens";
   }
   
+  @Override
   public void tearDown() throws Exception {
     doc = null;
     super.tearDown();
   }
 
+  @Override
   public int doLogic() throws Exception {
     List<Fieldable> fields = doc.getFields();
     Analyzer analyzer = getRunData().getAnalyzer();
@@ -112,9 +116,11 @@ public class ReadTokensTask extends PerfTask {
       left = s.length();
       this.upto = 0;
     }
+    @Override
     public int read(char[] c) {
       return read(c, 0, c.length);
     }
+    @Override
     public int read(char[] c, int off, int len) {
       if (left > len) {
         s.getChars(upto, upto+len, c, off);
@@ -131,6 +137,7 @@ public class ReadTokensTask extends PerfTask {
         return r;
       }
     }
+    @Override
     public void close() {};
   }
 }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReopenReaderTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReopenReaderTask.java
index 487da42..a8fa2e1 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReopenReaderTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReopenReaderTask.java
@@ -31,6 +31,7 @@ public class ReopenReaderTask extends PerfTask {
     super(runData);
   }
 
+  @Override
   public int doLogic() throws IOException {
     IndexReader ir = getRunData().getIndexReader();
     IndexReader or = ir;
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepAllTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepAllTask.java
index ca7791c..27b5ff2 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepAllTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepAllTask.java
@@ -33,6 +33,7 @@ public class RepAllTask extends ReportTask {
     super(runData);
    }
 
+  @Override
   public int doLogic() throws Exception {
     Report rp = reportAll(getRunData().getPoints().taskStats());
     
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask.java
index 775777d..2da9c57 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask.java
@@ -33,6 +33,7 @@ public class RepSelectByPrefTask extends RepSumByPrefTask {
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     Report rp = reportSelectByPrefix(getRunData().getPoints().taskStats());
     
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameRoundTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameRoundTask.java
index 1092af7..2fd31f3 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameRoundTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameRoundTask.java
@@ -34,6 +34,7 @@ public class RepSumByNameRoundTask extends ReportTask {
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     Report rp = reportSumByNameRound(getRunData().getPoints().taskStats());
 
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameTask.java
index 3a1d069..a55d26d 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByNameTask.java
@@ -34,6 +34,7 @@ public class RepSumByNameTask extends ReportTask {
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     Report rp = reportSumByName(getRunData().getPoints().taskStats());
 
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask.java
index 7a9acb9..070927b 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask.java
@@ -34,6 +34,7 @@ public class RepSumByPrefRoundTask extends RepSumByPrefTask {
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     Report rp = reportSumByPrefixRound(getRunData().getPoints().taskStats());
     
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask.java
index ff16834..610f282 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask.java
@@ -36,6 +36,7 @@ public class RepSumByPrefTask extends ReportTask {
 
   protected String prefix;
 
+  @Override
   public int doLogic() throws Exception {
     Report rp = reportSumByPrefix(getRunData().getPoints().taskStats());
     
@@ -81,6 +82,7 @@ public class RepSumByPrefTask extends ReportTask {
   /* (non-Javadoc)
    * @see PerfTask#toString()
    */
+  @Override
   public String toString() {
     return super.toString()+" "+prefix;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask.java
index 56c3aee..20475e8 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask.java
@@ -36,6 +36,7 @@ public abstract class ReportTask extends PerfTask {
   /* (non-Javadoc)
    * @see PerfTask#shouldNeverLogAtStart()
    */
+  @Override
   protected boolean shouldNeverLogAtStart() {
     return true;
   }
@@ -43,6 +44,7 @@ public abstract class ReportTask extends PerfTask {
   /* (non-Javadoc)
    * @see PerfTask#shouldNotRecordStats()
    */
+  @Override
   protected boolean shouldNotRecordStats() {
     return true;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetInputsTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetInputsTask.java
index 4bbc115..57f7b69 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetInputsTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetInputsTask.java
@@ -31,6 +31,7 @@ public class ResetInputsTask extends PerfTask {
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     getRunData().resetInputs();
     return 0;
@@ -40,6 +41,7 @@ public class ResetInputsTask extends PerfTask {
    * (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#shouldNotRecordStats()
    */
+  @Override
   protected boolean shouldNotRecordStats() {
     return true;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetSystemEraseTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetSystemEraseTask.java
index f9a9a4c..ba6dc66 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetSystemEraseTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetSystemEraseTask.java
@@ -34,6 +34,7 @@ public class ResetSystemEraseTask extends ResetSystemSoftTask {
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     getRunData().reinit(true);
     return 0;
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetSystemSoftTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetSystemSoftTask.java
index f0bb219..80087ed 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetSystemSoftTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ResetSystemSoftTask.java
@@ -34,6 +34,7 @@ public class ResetSystemSoftTask extends ResetInputsTask {
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     getRunData().reinit(false);
     return 0;
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTask.java
index 8234e19..da5aa92 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTask.java
@@ -32,22 +32,27 @@ public class SearchTask extends ReadTask {
     super(runData);
   }
 
+  @Override
   public boolean withRetrieve() {
     return false;
   }
 
+  @Override
   public boolean withSearch() {
     return true;
   }
 
+  @Override
   public boolean withTraverse() {
     return false;
   }
 
+  @Override
   public boolean withWarm() {
     return false;
   }
 
+  @Override
   public QueryMaker getQueryMaker() {
     return getRunData().getQueryMaker(this);
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask.java
index 2e8605b..5f89b34 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask.java
@@ -73,6 +73,7 @@ public class SearchTravRetHighlightTask extends SearchTravTask {
     super(runData);
   }
 
+  @Override
   public void setup() throws Exception {
     super.setup();
     //check to make sure either the doc is being stored
@@ -83,18 +84,22 @@ public class SearchTravRetHighlightTask extends SearchTravTask {
     maxDocCharsToAnalyze = data.getConfig().get("highlighter.maxDocCharsToAnalyze", Highlighter.DEFAULT_MAX_CHARS_TO_ANALYZE);
   }
 
+  @Override
   public boolean withRetrieve() {
     return true;
   }
 
+  @Override
   public int numToHighlight() {
     return numToHighlight;
   }
   
+  @Override
   protected BenchmarkHighlighter getBenchmarkHighlighter(Query q){
     highlighter = new Highlighter(new SimpleHTMLFormatter(), new QueryScorer(q));
     highlighter.setMaxDocCharsToAnalyze(maxDocCharsToAnalyze);
     return new BenchmarkHighlighter(){
+      @Override
       public int doHighlight(IndexReader reader, int doc, String field,
           Document document, Analyzer analyzer, String text) throws Exception {
         TokenStream ts = TokenSources.getAnyTokenStream(reader, doc, field, document, analyzer);
@@ -104,6 +109,7 @@ public class SearchTravRetHighlightTask extends SearchTravTask {
     };
   }
 
+  @Override
   protected Collection<String> getFieldsToHighlight(Document document) {
     Collection<String> result = super.getFieldsToHighlight(document);
     //if stored is false, then result will be empty, in which case just get all the param fields
@@ -115,6 +121,7 @@ public class SearchTravRetHighlightTask extends SearchTravTask {
     return result;
   }
 
+  @Override
   public void setParams(String params) {
     String [] splits = params.split(",");
     for (int i = 0; i < splits.length; i++) {
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetLoadFieldSelectorTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetLoadFieldSelectorTask.java
index 39657ea..26050b4 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetLoadFieldSelectorTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetLoadFieldSelectorTask.java
@@ -47,15 +47,18 @@ public class SearchTravRetLoadFieldSelectorTask extends SearchTravTask {
     
   }
 
+  @Override
   public boolean withRetrieve() {
     return true;
   }
 
 
+  @Override
   protected Document retrieveDoc(IndexReader ir, int id) throws IOException {
     return ir.document(id, fieldSelector);
   }
 
+  @Override
   public void setParams(String params) {
     this.params = params; // cannot just call super.setParams(), b/c it's params differ.
     Set<String> fieldsToLoad = new HashSet<String>();
@@ -70,6 +73,7 @@ public class SearchTravRetLoadFieldSelectorTask extends SearchTravTask {
   /* (non-Javadoc)
   * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#supportsParams()
   */
+  @Override
   public boolean supportsParams() {
     return true;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetTask.java
index 1ebdc1c..fc450a3 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetTask.java
@@ -37,6 +37,7 @@ public class SearchTravRetTask extends SearchTravTask {
     super(runData);
   }
 
+  @Override
   public boolean withRetrieve() {
     return true;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetVectorHighlightTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetVectorHighlightTask.java
index f788765..c9664ba 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetVectorHighlightTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetVectorHighlightTask.java
@@ -66,6 +66,7 @@ public class SearchTravRetVectorHighlightTask extends SearchTravTask {
     super(runData);
   }
 
+  @Override
   public void setup() throws Exception {
     super.setup();
     //check to make sure either the doc is being stored
@@ -81,18 +82,22 @@ public class SearchTravRetVectorHighlightTask extends SearchTravTask {
     }
   }
 
+  @Override
   public boolean withRetrieve() {
     return true;
   }
 
+  @Override
   public int numToHighlight() {
     return numToHighlight;
   }
   
+  @Override
   protected BenchmarkHighlighter getBenchmarkHighlighter(Query q){
     highlighter = new FastVectorHighlighter( false, false );
     final FieldQuery fq = highlighter.getFieldQuery( q );
     return new BenchmarkHighlighter(){
+      @Override
       public int doHighlight(IndexReader reader, int doc, String field,
           Document document, Analyzer analyzer, String text) throws Exception {
         String[] fragments = highlighter.getBestFragments(fq, reader, doc, field, fragSize, maxFrags);
@@ -101,6 +106,7 @@ public class SearchTravRetVectorHighlightTask extends SearchTravTask {
     };
   }
 
+  @Override
   protected Collection<String> getFieldsToHighlight(Document document) {
     Collection<String> result = super.getFieldsToHighlight(document);
     //if stored is false, then result will be empty, in which case just get all the param fields
@@ -112,6 +118,7 @@ public class SearchTravRetVectorHighlightTask extends SearchTravTask {
     return result;
   }
 
+  @Override
   public void setParams(String params) {
     String [] splits = params.split(",");
     for (int i = 0; i < splits.length; i++) {
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravTask.java
index 393bd39..56893fd 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravTask.java
@@ -38,32 +38,39 @@ public class SearchTravTask extends ReadTask {
     super(runData);
   }
 
+  @Override
   public boolean withRetrieve() {
     return false;
   }
 
+  @Override
   public boolean withSearch() {
     return true;
   }
 
+  @Override
   public boolean withTraverse() {
     return true;
   }
 
+  @Override
   public boolean withWarm() {
     return false;
   }
 
   
 
+  @Override
   public QueryMaker getQueryMaker() {
     return getRunData().getQueryMaker(this);
   }
 
+  @Override
   public int traversalSize() {
     return traversalSize;
   }
 
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     traversalSize = (int)Float.parseFloat(params);
@@ -72,6 +79,7 @@ public class SearchTravTask extends ReadTask {
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#supportsParams()
    */
+  @Override
   public boolean supportsParams() {
     return true;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask.java
index c542549..e00583f 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask.java
@@ -46,6 +46,7 @@ public class SearchWithSortTask extends ReadTask {
    * name:string,page:int,subject:string
    * 
    */
+  @Override
   public void setParams(String sortField) {
     super.setParams(sortField);
     String[] fields = sortField.split(",");
@@ -112,38 +113,47 @@ public class SearchWithSortTask extends ReadTask {
     return type;
   }
 
+  @Override
   public boolean supportsParams() {
     return true;
   }
 
+  @Override
   public QueryMaker getQueryMaker() {
     return getRunData().getQueryMaker(this);
   }
 
+  @Override
   public boolean withRetrieve() {
     return false;
   }
 
+  @Override
   public boolean withSearch() {
     return true;
   }
 
+  @Override
   public boolean withTraverse() {
     return false;
   }
 
+  @Override
   public boolean withWarm() {
     return false;
   }
 
+  @Override
   public boolean withScore() {
     return doScore;
   }
 
+  @Override
   public boolean withMaxScore() {
     return doMaxScore;
   }
   
+  @Override
   public Sort getSort() {
     if (sort == null) {
       throw new IllegalStateException("No sort field was set");
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SetPropTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SetPropTask.java
index e9baf69..23c2799 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SetPropTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SetPropTask.java
@@ -37,6 +37,7 @@ public class SetPropTask extends PerfTask {
   private String name;
   private String value;
   
+  @Override
   public int doLogic() throws Exception {
     if (name==null || value==null) {
       throw new Exception(getName()+" - undefined name or value: name="+name+" value="+value);
@@ -49,6 +50,7 @@ public class SetPropTask extends PerfTask {
    * Set the params (property name and value).
    * @param params property name and value separated by ','.
    */
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     int k = params.indexOf(",");
@@ -59,6 +61,7 @@ public class SetPropTask extends PerfTask {
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#supportsParams()
    */
+  @Override
   public boolean supportsParams() {
     return true;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java
index 1f3b842..23afd4e 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence.java
@@ -56,6 +56,7 @@ public class TaskSequence extends PerfTask {
     tasks = new ArrayList<PerfTask>();
   }
 
+  @Override
   public void close() throws Exception {
     initTasksArray();
     for(int i=0;i<tasksArray.length;i++) {
@@ -124,6 +125,7 @@ public class TaskSequence extends PerfTask {
    * (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#doLogic()
    */
+  @Override
   public int doLogic() throws Exception {
     exhausted = resetExhausted = false;
     return ( parallel ? doParallelTasks() : doSerialTasks());
@@ -212,6 +214,7 @@ public class TaskSequence extends PerfTask {
       for (int i = 0; i < tasksArray.length; i++) {
         final PerfTask task = (PerfTask) tasksArray[i].clone();
         t[indx++] = new Thread() {
+          @Override
           public void run() {
             try {
               int n = task.runAndMaybeStats(letChildReport);
@@ -273,6 +276,7 @@ public class TaskSequence extends PerfTask {
   /* (non-Javadoc)
    * @see java.lang.Object#toString()
    */
+  @Override
   public String toString() {
     String padd = getPadding();
     StringBuffer sb = new StringBuffer(super.toString());
@@ -342,6 +346,7 @@ public class TaskSequence extends PerfTask {
     }
   }
 
+  @Override
   public String getName() {
     return seqName; // override to include more info 
   }
@@ -356,6 +361,7 @@ public class TaskSequence extends PerfTask {
   /* (non-Javadoc)
    * @see java.lang.Object#clone()
    */
+  @Override
   protected Object clone() throws CloneNotSupportedException {
     TaskSequence res = (TaskSequence) super.clone();
     res.tasks = new ArrayList<PerfTask>();
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/UpdateDocTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/UpdateDocTask.java
index e1b391d..d7ee6b0 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/UpdateDocTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/UpdateDocTask.java
@@ -39,6 +39,7 @@ public class UpdateDocTask extends PerfTask {
   // volatile data passed between setup(), doLogic(), tearDown().
   private Document doc = null;
   
+  @Override
   public void setup() throws Exception {
     super.setup();
     DocMaker docMaker = getRunData().getDocMaker();
@@ -49,11 +50,13 @@ public class UpdateDocTask extends PerfTask {
     }
   }
 
+  @Override
   public void tearDown() throws Exception {
     doc = null;
     super.tearDown();
   }
 
+  @Override
   public int doLogic() throws Exception {
     final String docID = doc.get(DocMaker.ID_FIELD);
     if (docID == null) {
@@ -63,6 +66,7 @@ public class UpdateDocTask extends PerfTask {
     return 1;
   }
 
+  @Override
   protected String getLogMessage(int recsCount) {
     return "updated " + recsCount + " docs";
   }
@@ -71,6 +75,7 @@ public class UpdateDocTask extends PerfTask {
    * Set the params (docSize only)
    * @param params docSize, or 0 for no limit.
    */
+  @Override
   public void setParams(String params) {
     super.setParams(params);
     docSize = (int) Float.parseFloat(params); 
@@ -79,6 +84,7 @@ public class UpdateDocTask extends PerfTask {
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#supportsParams()
    */
+  @Override
   public boolean supportsParams() {
     return true;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WarmTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WarmTask.java
index e0e1c75..ba1a666 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WarmTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WarmTask.java
@@ -36,22 +36,27 @@ public class WarmTask extends ReadTask {
     super(runData);
   }
 
+  @Override
   public boolean withRetrieve() {
     return false;
   }
 
+  @Override
   public boolean withSearch() {
     return false;
   }
 
+  @Override
   public boolean withTraverse() {
     return false;
   }
 
+  @Override
   public boolean withWarm() {
     return true;
   }
 
+  @Override
   public QueryMaker getQueryMaker() {
     return null; // not required for this task.
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask.java
index 3f883ce..902de5b 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask.java
@@ -89,10 +89,12 @@ public class WriteLineDocTask extends PerfTask {
     docMaker = runData.getDocMaker();
   }
 
+  @Override
   protected String getLogMessage(int recsCount) {
     return "Wrote " + recsCount + " line docs";
   }
   
+  @Override
   public int doLogic() throws Exception {
     Document doc = docSize > 0 ? docMaker.makeDocument(docSize) : docMaker.makeDocument();
 
@@ -117,6 +119,7 @@ public class WriteLineDocTask extends PerfTask {
     return 1;
   }
 
+  @Override
   public void close() throws Exception {
     lineFileOut.close();
     super.close();
@@ -126,6 +129,7 @@ public class WriteLineDocTask extends PerfTask {
    * Set the params (docSize only)
    * @param params docSize, or 0 for no limit.
    */
+  @Override
   public void setParams(String params) {
     if (super.supportsParams()) {
       super.setParams(params);
@@ -133,6 +137,7 @@ public class WriteLineDocTask extends PerfTask {
     docSize = (int) Float.parseFloat(params); 
   }
 
+  @Override
   public boolean supportsParams() {
     return true;
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java
index 8889177..58f9ca8 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java
@@ -228,6 +228,7 @@ public class Algorithm {
   /* (non-Javadoc)
    * @see java.lang.Object#toString()
    */
+  @Override
   public String toString() {
     String newline = System.getProperty("line.separator");
     StringBuffer sb = new StringBuffer();
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBufferReader.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBufferReader.java
index 3aef8c8..d8f56fb 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBufferReader.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBufferReader.java
@@ -72,6 +72,7 @@ public class StringBufferReader extends Reader {
     }
   }
 
+  @Override
   public void close() {
     synchronized (lock) {
       sb = null;
@@ -89,6 +90,7 @@ public class StringBufferReader extends Reader {
    * @exception IllegalArgumentException If readAheadLimit is < 0
    * @exception IOException If an I/O error occurs
    */
+  @Override
   public void mark(int readAheadLimit) throws IOException {
     if (readAheadLimit < 0){
       throw new IllegalArgumentException("Read-ahead limit cannpt be negative: " + readAheadLimit);
@@ -99,10 +101,12 @@ public class StringBufferReader extends Reader {
     }
   }
 
+  @Override
   public boolean markSupported() {
     return true;
   }
 
+  @Override
   public int read() throws IOException {
     synchronized (lock) {
       ensureOpen();
@@ -110,6 +114,7 @@ public class StringBufferReader extends Reader {
     }
   }
 
+  @Override
   public int read(char cbuf[], int off, int len) throws IOException {
     synchronized (lock) {
       ensureOpen();
@@ -134,6 +139,7 @@ public class StringBufferReader extends Reader {
     }
   }
 
+  @Override
   public boolean ready() throws IOException {
     synchronized (lock) {
       ensureOpen();
@@ -141,6 +147,7 @@ public class StringBufferReader extends Reader {
     }
   }
 
+  @Override
   public void reset() throws IOException {
     synchronized (lock) {
       ensureOpen();
@@ -155,6 +162,7 @@ public class StringBufferReader extends Reader {
       length = sb.length();
     }
   }
+  @Override
   public long skip(long ns) throws IOException {
     synchronized (lock) {
       ensureOpen();
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder.java
index 6329ba8..263d339 100755
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder.java
@@ -125,6 +125,7 @@ public class QualityQueriesFinder {
     TermsDfQueue (int maxSize) {
       initialize(maxSize);
     }
+    @Override
     protected boolean lessThan(TermDf tf1, TermDf tf2) {
       return tf1.df < tf2.df;
     }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/MemUsage.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/MemUsage.java
index 84002ea..6697289 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/MemUsage.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/MemUsage.java
@@ -24,6 +24,7 @@ public class MemUsage {
 
   public long maxTotal, minTotal, avgTotal;
 
+  @Override
   public String toString() {
     return toScaledString(1, "B");
   }
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/QueryData.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/QueryData.java
index c9899fe..cdf7f52 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/QueryData.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/QueryData.java
@@ -71,6 +71,7 @@ public class QueryData {
     return "# Query data: R-reopen, W-warmup, T-retrieve, N-no";
   }
 
+  @Override
   public String toString() {
     return id + " " + (reopen ? "R" : "NR") + " " + (warmup ? "W" : "NW") +
       " " + (retrieve ? "T" : "NT") + " [" + q.toString() + "]";
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData.java
index 8f4532e..ee97bb0 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData.java
@@ -426,6 +426,7 @@ public class TestData
         return res.toArray(new TestData[0]);
     }
 
+    @Override
     protected Object clone()
     {
         TestData cl = new TestData();
@@ -442,6 +443,7 @@ public class TestData
         return cl;
     }
 
+    @Override
     public String toString()
     {
         StringBuffer res = new StringBuffer();
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData.java
index 3954b0d..d42e37e 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData.java
@@ -160,6 +160,7 @@ public class TestRunData {
   }
 
   /** Return a string representation. */
+  @Override
   public String toString() {
     StringBuffer sb = new StringBuffer();
     for (final String label : getLabels()) {
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TimeData.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TimeData.java
index e037778..f3a843f 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TimeData.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TimeData.java
@@ -64,6 +64,7 @@ public class TimeData {
     delta = elapsed;
   }
 
+  @Override
   protected Object clone() {
     TimeData td = new TimeData(name);
     td.name = name;
@@ -86,6 +87,7 @@ public class TimeData {
     return "# count\telapsed\trec/s\tfreeMem\ttotalMem";
   }
 
+  @Override
   public String toString() { return toString(true); }
   /**
    * Return a tab-separated string containing this data.
diff --git a/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java b/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java
index f0019c7..fc25c24 100755
--- a/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java
+++ b/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java
@@ -518,6 +518,7 @@ public class TestPerfTasksLogic extends TestCase {
   public static class Reuters20ContentSource extends ReutersContentSource {
     private int nDocs = 0;
 
+    @Override
     public synchronized DocData getNextDocData(DocData docData)
         throws NoMoreDataException, IOException {
       if (nDocs >= 20 && !forever) {
@@ -527,6 +528,7 @@ public class TestPerfTasksLogic extends TestCase {
       return super.getNextDocData(docData);
     }
 
+    @Override
     public synchronized void resetInputs() throws IOException {
       super.resetInputs();
       nDocs = 0;
diff --git a/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest.java b/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest.java
index ec8b3b6..1598aec 100644
--- a/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest.java
+++ b/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest.java
@@ -41,9 +41,11 @@ public class DocMakerTest extends BenchmarkTestCase {
 
     private boolean finish = false;
     
+    @Override
     public void close() throws IOException {
     }
 
+    @Override
     public DocData getNextDocData(DocData docData) throws NoMoreDataException,
         IOException {
       if (finish) {
diff --git a/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest.java b/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest.java
index c86c13e..8540e14 100644
--- a/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest.java
+++ b/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest.java
@@ -40,6 +40,7 @@ public class TrecContentSourceTest extends TestCase {
       this.forever = forever;
     }
     
+    @Override
     void openNextFile() throws NoMoreDataException, IOException {
       if (reader != null) {
         if (!forever) {
@@ -51,6 +52,7 @@ public class TrecContentSourceTest extends TestCase {
       reader = new BufferedReader(new StringReader(docs));
     }
     
+    @Override
     public void setConfig(Config config) {
       htmlParser = new DemoHTMLParser();
     }
diff --git a/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/CountingHighlighterTestTask.java b/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/CountingHighlighterTestTask.java
index 7729f86..357af06 100644
--- a/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/CountingHighlighterTestTask.java
+++ b/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/CountingHighlighterTestTask.java
@@ -43,6 +43,7 @@ public class CountingHighlighterTestTask extends SearchTravRetHighlightTask {
     super(runData);
   }
 
+  @Override
   protected Document retrieveDoc(IndexReader ir, int id) throws IOException {
     Document document = ir.document(id);
     if (document != null) {
@@ -51,9 +52,11 @@ public class CountingHighlighterTestTask extends SearchTravRetHighlightTask {
     return document;
   }
 
+  @Override
   public BenchmarkHighlighter getBenchmarkHighlighter(Query q) {
     highlighter = new Highlighter(new SimpleHTMLFormatter(), new QueryScorer(q));
     return new BenchmarkHighlighter() {
+      @Override
       public int doHighlight(IndexReader reader, int doc, String field, Document document, Analyzer analyzer, String text) throws Exception {
         TokenStream ts = TokenSources.getAnyTokenStream(reader, doc, field, document, analyzer);
         TextFragment[] frag = highlighter.getBestTextFragments(ts, text, mergeContiguous, maxFrags);
diff --git a/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/CountingSearchTestTask.java b/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/CountingSearchTestTask.java
index 40b0052..7125723 100755
--- a/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/CountingSearchTestTask.java
+++ b/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/CountingSearchTestTask.java
@@ -33,6 +33,7 @@ public class CountingSearchTestTask extends SearchTask {
     super(runData);
   }
 
+  @Override
   public int doLogic() throws Exception {
     int res = super.doLogic();
     incrNumSearches();
diff --git a/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/PerfTaskTest.java b/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/PerfTaskTest.java
index bccbb39..d5dad08 100644
--- a/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/PerfTaskTest.java
+++ b/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/PerfTaskTest.java
@@ -32,6 +32,7 @@ public class PerfTaskTest extends BenchmarkTestCase {
       super(runData);
     }
 
+    @Override
     public int doLogic() throws Exception {
       return 0;
     }
diff --git a/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest.java b/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest.java
index 08549c5..ee93b96 100644
--- a/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest.java
+++ b/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest.java
@@ -40,6 +40,7 @@ public class WriteLineDocTaskTest extends BenchmarkTestCase {
   // class has to be public so that Class.forName.newInstance() will work
   public static final class WriteLineDocMaker extends DocMaker {
   
+    @Override
     public Document makeDocument() throws Exception {
       Document doc = new Document();
       doc.add(new Field(BODY_FIELD, "body", Store.NO, Index.NOT_ANALYZED_NO_NORMS));
@@ -53,6 +54,7 @@ public class WriteLineDocTaskTest extends BenchmarkTestCase {
   // class has to be public so that Class.forName.newInstance() will work
   public static final class NewLinesDocMaker extends DocMaker {
   
+    @Override
     public Document makeDocument() throws Exception {
       Document doc = new Document();
       doc.add(new Field(BODY_FIELD, "body\r\ntext\ttwo", Store.NO, Index.NOT_ANALYZED_NO_NORMS));
@@ -65,6 +67,7 @@ public class WriteLineDocTaskTest extends BenchmarkTestCase {
   
   // class has to be public so that Class.forName.newInstance() will work
   public static final class NoBodyDocMaker extends DocMaker {
+    @Override
     public Document makeDocument() throws Exception {
       Document doc = new Document();
       doc.add(new Field(TITLE_FIELD, "title", Store.NO, Index.NOT_ANALYZED_NO_NORMS));
@@ -75,6 +78,7 @@ public class WriteLineDocTaskTest extends BenchmarkTestCase {
   
   // class has to be public so that Class.forName.newInstance() will work
   public static final class NoTitleDocMaker extends DocMaker {
+    @Override
     public Document makeDocument() throws Exception {
       Document doc = new Document();
       doc.add(new Field(BODY_FIELD, "body", Store.NO, Index.NOT_ANALYZED_NO_NORMS));
@@ -85,6 +89,7 @@ public class WriteLineDocTaskTest extends BenchmarkTestCase {
   
   // class has to be public so that Class.forName.newInstance() will work
   public static final class JustDateDocMaker extends DocMaker {
+    @Override
     public Document makeDocument() throws Exception {
       Document doc = new Document();
       doc.add(new Field(DATE_FIELD, "date", Store.NO, Index.NOT_ANALYZED_NO_NORMS));
diff --git a/contrib/collation/src/java/org/apache/lucene/collation/CollationKeyAnalyzer.java b/contrib/collation/src/java/org/apache/lucene/collation/CollationKeyAnalyzer.java
index ff1c380..397a06b 100644
--- a/contrib/collation/src/java/org/apache/lucene/collation/CollationKeyAnalyzer.java
+++ b/contrib/collation/src/java/org/apache/lucene/collation/CollationKeyAnalyzer.java
@@ -82,6 +82,7 @@ public class CollationKeyAnalyzer extends Analyzer {
     this.collator = collator;
   }
 
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new KeywordTokenizer(reader);
     result = new CollationKeyFilter(result, collator);
@@ -93,6 +94,7 @@ public class CollationKeyAnalyzer extends Analyzer {
     TokenStream result;
   }
   
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader) 
     throws IOException {
     
diff --git a/contrib/collation/src/java/org/apache/lucene/collation/CollationKeyFilter.java b/contrib/collation/src/java/org/apache/lucene/collation/CollationKeyFilter.java
index c183a75..96d5ef1 100644
--- a/contrib/collation/src/java/org/apache/lucene/collation/CollationKeyFilter.java
+++ b/contrib/collation/src/java/org/apache/lucene/collation/CollationKeyFilter.java
@@ -88,6 +88,7 @@ public final class CollationKeyFilter extends TokenFilter {
     termAtt = addAttribute(TermAttribute.class);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       char[] termBuffer = termAtt.termBuffer();
diff --git a/contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyAnalyzer.java b/contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyAnalyzer.java
index 6a03a11..387288a 100644
--- a/contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyAnalyzer.java
+++ b/contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyAnalyzer.java
@@ -76,6 +76,7 @@ public class ICUCollationKeyAnalyzer extends Analyzer {
     this.collator = collator;
   }
 
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new KeywordTokenizer(reader);
     result = new ICUCollationKeyFilter(result, collator);
@@ -87,6 +88,7 @@ public class ICUCollationKeyAnalyzer extends Analyzer {
     TokenStream result;
   }
   
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader) 
     throws IOException {
     
diff --git a/contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyFilter.java b/contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyFilter.java
index 01dbb0b..a008814 100644
--- a/contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyFilter.java
+++ b/contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyFilter.java
@@ -86,6 +86,7 @@ public final class ICUCollationKeyFilter extends TokenFilter {
     termAtt = addAttribute(TermAttribute.class);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       char[] termBuffer = termAtt.termBuffer();
diff --git a/contrib/collation/src/test/org/apache/lucene/collation/TestCollationKeyFilter.java b/contrib/collation/src/test/org/apache/lucene/collation/TestCollationKeyFilter.java
index a462c46..3ffd5ac 100644
--- a/contrib/collation/src/test/org/apache/lucene/collation/TestCollationKeyFilter.java
+++ b/contrib/collation/src/test/org/apache/lucene/collation/TestCollationKeyFilter.java
@@ -52,6 +52,7 @@ public class TestCollationKeyFilter extends CollationTestBase {
       this.collator = collator;
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new KeywordTokenizer(reader);
       result = new CollationKeyFilter(result, collator);
diff --git a/contrib/collation/src/test/org/apache/lucene/collation/TestICUCollationKeyFilter.java b/contrib/collation/src/test/org/apache/lucene/collation/TestICUCollationKeyFilter.java
index f8d0fa5..b7e7c82 100644
--- a/contrib/collation/src/test/org/apache/lucene/collation/TestICUCollationKeyFilter.java
+++ b/contrib/collation/src/test/org/apache/lucene/collation/TestICUCollationKeyFilter.java
@@ -49,6 +49,7 @@ public class TestICUCollationKeyFilter extends CollationTestBase {
       this.collator = collator;
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new KeywordTokenizer(reader);
       result = new ICUCollationKeyFilter(result, collator);
diff --git a/contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEDirectory.java b/contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEDirectory.java
index 001c35c..02b9391 100644
--- a/contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEDirectory.java
+++ b/contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEDirectory.java
@@ -89,6 +89,7 @@ public class JEDirectory extends Directory {
         this(txn, files, blocks, 0);
     }
 
+    @Override
     public void close() throws IOException {
         flush();
     }
@@ -110,18 +111,22 @@ public class JEDirectory extends Directory {
         }
     }
 
+    @Override
     public IndexOutput createOutput(String name) throws IOException {
         return new JEIndexOutput(this, name, true);
     }
 
+    @Override
     public void deleteFile(String name) throws IOException {
         new File(name).delete(this);
     }
 
+    @Override
     public boolean fileExists(String name) throws IOException {
         return new File(name).exists(this);
     }
 
+    @Override
     public long fileLength(String name) throws IOException {
         File file = new File(name);
 
@@ -131,6 +136,7 @@ public class JEDirectory extends Directory {
         throw new IOException("File does not exist: " + name);
     }
 
+    @Override
     public long fileModified(String name) throws IOException {
         File file = new File(name);
 
@@ -140,6 +146,7 @@ public class JEDirectory extends Directory {
         throw new IOException("File does not exist: " + name);
     }
 
+    @Override
     public String[] listAll() throws IOException {
         Cursor cursor = null;
         List list = new ArrayList();
@@ -182,14 +189,17 @@ public class JEDirectory extends Directory {
         return (String[]) list.toArray(new String[list.size()]);
     }
 
+    @Override
     public IndexInput openInput(String name) throws IOException {
         return new JEIndexInput(this, name);
     }
 
+    @Override
     public Lock makeLock(String name) {
         return new JELock();
     }
 
+    @Override
     public void touchFile(String name) throws IOException {
         File file = new File(name);
         long length = 0L;
diff --git a/contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEIndexInput.java b/contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEIndexInput.java
index 75a3e69..ae6c3a9 100644
--- a/contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEIndexInput.java
+++ b/contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEIndexInput.java
@@ -51,6 +51,7 @@ public class JEIndexInput extends IndexInput {
         block.get(directory);
     }
 
+    @Override
     public Object clone() {
         try {
             JEIndexInput clone = (JEIndexInput) super.clone();
@@ -65,13 +66,16 @@ public class JEIndexInput extends IndexInput {
         }
     }
 
+    @Override
     public void close() throws IOException {
     }
 
+    @Override
     public long length() {
         return length;
     }
 
+    @Override
     public byte readByte() throws IOException {
         if (position + 1 > length)
             throw new IOException(file.getName() + ": Reading past end of file");
@@ -87,6 +91,7 @@ public class JEIndexInput extends IndexInput {
         return b;
     }
 
+    @Override
     public void readBytes(byte[] b, int offset, int len) throws IOException {
         if (position + len > length)
             throw new IOException("Reading past end of file");
@@ -116,6 +121,7 @@ public class JEIndexInput extends IndexInput {
         }
     }
 
+    @Override
     public void seek(long pos) throws IOException {
         if (pos > length)
             throw new IOException("seeking past end of file");
@@ -128,6 +134,7 @@ public class JEIndexInput extends IndexInput {
         position = pos;
     }
 
+    @Override
     public long getFilePointer() {
         return position;
     }
diff --git a/contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEIndexOutput.java b/contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEIndexOutput.java
index 31de434..3c68f46 100644
--- a/contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEIndexOutput.java
+++ b/contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JEIndexOutput.java
@@ -62,6 +62,7 @@ public class JEIndexOutput extends IndexOutput {
         directory.openFiles.add(this);
     }
 
+    @Override
     public void close() throws IOException {
         flush();
         file.modify(directory, length, System.currentTimeMillis());
@@ -69,11 +70,13 @@ public class JEIndexOutput extends IndexOutput {
         directory.openFiles.remove(this);
     }
 
+    @Override
     public void flush() throws IOException {
         if (length > 0)
             block.put(directory);
     }
 
+    @Override
     public void writeByte(byte b) throws IOException {
         int blockPos = (int) (position++ & BLOCK_MASK);
 
@@ -89,6 +92,7 @@ public class JEIndexOutput extends IndexOutput {
             length = position;
     }
 
+    @Override
     public void writeBytes(byte[] b, int offset, int len) throws IOException {
         int blockPos = (int) (position & BLOCK_MASK);
 
@@ -116,10 +120,12 @@ public class JEIndexOutput extends IndexOutput {
             length = position;
     }
 
+    @Override
     public long length() throws IOException {
         return length;
     }
 
+    @Override
     public void seek(long pos) throws IOException {
         if (pos > length)
             throw new IOException("seeking past end of file");
@@ -134,6 +140,7 @@ public class JEIndexOutput extends IndexOutput {
         }
     }
 
+    @Override
     public long getFilePointer() {
         return position;
     }
diff --git a/contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JELock.java b/contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JELock.java
index 5eaaf39..24a6105 100644
--- a/contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JELock.java
+++ b/contrib/db/bdb-je/src/java/org/apache/lucene/store/je/JELock.java
@@ -32,16 +32,19 @@ public class JELock extends Lock {
     {
     }
 
+    @Override
     public boolean obtain()
     {
         return (isLocked = true);
     }
 
+    @Override
     public void release()
     {
         isLocked = false;
     }
 
+    @Override
     public boolean isLocked()
     {
         return isLocked;
diff --git a/contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest.java b/contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest.java
index cf2c5de..96b4d10 100644
--- a/contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest.java
+++ b/contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest.java
@@ -52,6 +52,7 @@ public class JEStoreTest extends LuceneTestCase {
 
     protected Database index, blocks;
 
+    @Override
     public void setUp() throws Exception {
 
         if (!dbHome.exists())
@@ -97,6 +98,7 @@ public class JEStoreTest extends LuceneTestCase {
         }
     }
 
+    @Override
     public void tearDown() throws Exception {
 
         if (index != null)
diff --git a/contrib/db/bdb/src/java/org/apache/lucene/store/db/DbDirectory.java b/contrib/db/bdb/src/java/org/apache/lucene/store/db/DbDirectory.java
index c8a83f6..604f94f 100644
--- a/contrib/db/bdb/src/java/org/apache/lucene/store/db/DbDirectory.java
+++ b/contrib/db/bdb/src/java/org/apache/lucene/store/db/DbDirectory.java
@@ -97,6 +97,7 @@ public class DbDirectory extends Directory {
         this(txn, files, blocks, 0);
     }
 
+    @Override
     public void close()
         throws IOException
     {
@@ -118,24 +119,28 @@ public class DbDirectory extends Directory {
             ((IndexOutput) iterator.next()).flush();
     }
 
+    @Override
     public IndexOutput createOutput(String name)
         throws IOException
     {
         return new DbIndexOutput(this, name, true);
     }
 
+    @Override
     public void deleteFile(String name)
         throws IOException
     {
         new File(name).delete(this);
     }
 
+    @Override
     public boolean fileExists(String name)
         throws IOException
     {
         return new File(name).exists(this);
     }
 
+    @Override
     public long fileLength(String name)
         throws IOException
     {
@@ -147,6 +152,7 @@ public class DbDirectory extends Directory {
         throw new IOException("File does not exist: " + name);
     }
     
+    @Override
     public long fileModified(String name)
         throws IOException
     {
@@ -158,6 +164,7 @@ public class DbDirectory extends Directory {
         throw new IOException("File does not exist: " + name);
     }
 
+    @Override
     public String[] listAll()
         throws IOException
     {
@@ -205,17 +212,20 @@ public class DbDirectory extends Directory {
         return (String[]) list.toArray(new String[list.size()]);
     }
 
+    @Override
     public IndexInput openInput(String name)
         throws IOException
     {
         return new DbIndexInput(this, name);
     }
 
+    @Override
     public Lock makeLock(String name)
     {
         return new DbLock();
     }
 
+    @Override
     public void touchFile(String name)
         throws IOException
     {
diff --git a/contrib/db/bdb/src/java/org/apache/lucene/store/db/DbIndexInput.java b/contrib/db/bdb/src/java/org/apache/lucene/store/db/DbIndexInput.java
index ee38f27..b41203e 100644
--- a/contrib/db/bdb/src/java/org/apache/lucene/store/db/DbIndexInput.java
+++ b/contrib/db/bdb/src/java/org/apache/lucene/store/db/DbIndexInput.java
@@ -47,6 +47,7 @@ public class DbIndexInput extends IndexInput {
         block.get(directory);
     }
 
+    @Override
     public Object clone()
     {
         try {
@@ -62,16 +63,19 @@ public class DbIndexInput extends IndexInput {
         }
     }
 
+    @Override
     public void close()
         throws IOException
     {
     }
 
+    @Override
     public long length()
     {
         return length;
     }
 
+    @Override
     public byte readByte()
         throws IOException
     {
@@ -90,6 +94,7 @@ public class DbIndexInput extends IndexInput {
         return b;
     }
 
+    @Override
     public void readBytes(byte[] b, int offset, int len)
         throws IOException
     {
@@ -122,6 +127,7 @@ public class DbIndexInput extends IndexInput {
         }
     }
 
+    @Override
     public void seek(long pos)
         throws IOException
     {
@@ -138,6 +144,7 @@ public class DbIndexInput extends IndexInput {
         position = pos;
     }
 
+    @Override
     public long getFilePointer()
     {
         return position;
diff --git a/contrib/db/bdb/src/java/org/apache/lucene/store/db/DbIndexOutput.java b/contrib/db/bdb/src/java/org/apache/lucene/store/db/DbIndexOutput.java
index 2a8825b..5e3a9e1 100644
--- a/contrib/db/bdb/src/java/org/apache/lucene/store/db/DbIndexOutput.java
+++ b/contrib/db/bdb/src/java/org/apache/lucene/store/db/DbIndexOutput.java
@@ -55,6 +55,7 @@ public class DbIndexOutput extends IndexOutput {
         directory.openFiles.add(this);
     }
 
+    @Override
     public void close()
         throws IOException
     {
@@ -64,6 +65,7 @@ public class DbIndexOutput extends IndexOutput {
         directory.openFiles.remove(this);
     }
 
+    @Override
     public void flush()
         throws IOException
     {
@@ -71,6 +73,7 @@ public class DbIndexOutput extends IndexOutput {
             block.put(directory);
     }
 
+    @Override
     public void writeByte(byte b)
         throws IOException
     {
@@ -89,6 +92,7 @@ public class DbIndexOutput extends IndexOutput {
             length = position;
     }
 
+    @Override
     public void writeBytes(byte[] b, int offset, int len)
         throws IOException
     {
@@ -119,12 +123,14 @@ public class DbIndexOutput extends IndexOutput {
             length = position;
     }
 
+    @Override
     public long length()
         throws IOException
     {
         return length;
     }
 
+    @Override
     public void seek(long pos)
         throws IOException
     {
@@ -142,6 +148,7 @@ public class DbIndexOutput extends IndexOutput {
         }
     }
 
+    @Override
     public long getFilePointer()
     {
         return position;
diff --git a/contrib/db/bdb/src/java/org/apache/lucene/store/db/DbLock.java b/contrib/db/bdb/src/java/org/apache/lucene/store/db/DbLock.java
index eaa73db..7c6c2c1 100644
--- a/contrib/db/bdb/src/java/org/apache/lucene/store/db/DbLock.java
+++ b/contrib/db/bdb/src/java/org/apache/lucene/store/db/DbLock.java
@@ -34,16 +34,19 @@ public class DbLock extends Lock {
     {
     }
 
+    @Override
     public boolean obtain()
     {
         return (isLocked = true);
     }
 
+    @Override
     public void release()
     {
         isLocked = false;
     }
 
+    @Override
     public boolean isLocked()
     {
         return isLocked;
diff --git a/contrib/db/bdb/src/test/org/apache/lucene/store/db/DbStoreTest.java b/contrib/db/bdb/src/test/org/apache/lucene/store/db/DbStoreTest.java
index 5e96531..cfa6a72 100644
--- a/contrib/db/bdb/src/test/org/apache/lucene/store/db/DbStoreTest.java
+++ b/contrib/db/bdb/src/test/org/apache/lucene/store/db/DbStoreTest.java
@@ -47,6 +47,7 @@ public class DbStoreTest extends LuceneTestCase {
     protected Environment env;
     protected Database index, blocks;
     
+    @Override
     public void setUp()
         throws Exception
     {
@@ -99,6 +100,7 @@ public class DbStoreTest extends LuceneTestCase {
         }
     }
 
+    @Override
     public void tearDown()
         throws Exception
     {
diff --git a/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java b/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java
index aea06a4..5c5ac96 100644
--- a/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java
+++ b/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java
@@ -70,6 +70,7 @@ public class FieldFragList {
       }
     }
     
+    @Override
     public String toString(){
       StringBuilder sb = new StringBuilder();
       sb.append( "subInfos=(" );
@@ -90,6 +91,7 @@ public class FieldFragList {
         this.seqnum = seqnum;
       }
       
+      @Override
       public String toString(){
         StringBuilder sb = new StringBuilder();
         sb.append( text ).append( '(' );
diff --git a/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java b/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java
index 01d8b3e..4adbdbb 100644
--- a/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java
+++ b/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java
@@ -153,6 +153,7 @@ public class FieldPhraseList {
       return false;
     }
     
+    @Override
     public String toString(){
       StringBuilder sb = new StringBuilder();
       sb.append( text ).append( '(' ).append( boost ).append( ")(" );
@@ -173,6 +174,7 @@ public class FieldPhraseList {
       void setEndOffset( int endOffset ){
         this.endOffset = endOffset;
       }
+      @Override
       public String toString(){
         StringBuilder sb = new StringBuilder();
         sb.append( '(' ).append( startOffset ).append( ',' ).append( endOffset ).append( ')' );
diff --git a/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java b/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java
index c355a68..a45fcc9 100644
--- a/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java
+++ b/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java
@@ -159,6 +159,7 @@ public class FieldTermStack {
     public int getEndOffset(){ return endOffset; }
     public int getPosition(){ return position; }
     
+    @Override
     public String toString(){
       StringBuilder sb = new StringBuilder();
       sb.append( text ).append( '(' ).append(startOffset).append( ',' ).append( endOffset ).append( ',' ).append( position ).append( ')' );
diff --git a/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java b/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java
index 04edd12..aac72e3 100644
--- a/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java
+++ b/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java
@@ -48,6 +48,7 @@ public class ScoreOrderFragmentsBuilder extends BaseFragmentsBuilder {
   /**
    * Sort by score the list of WeightedFragInfo
    */
+  @Override
   public List<WeightedFragInfo> getWeightedFragInfoList( List<WeightedFragInfo> src ) {
     Collections.sort( src, new ScoreComparator() );
     return src;
diff --git a/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder.java b/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder.java
index 3c83b43..378d692 100644
--- a/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder.java
+++ b/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder.java
@@ -47,6 +47,7 @@ public class SimpleFragmentsBuilder extends BaseFragmentsBuilder {
   /**
    * do nothing. return the source list.
    */
+  @Override
   public List<WeightedFragInfo> getWeightedFragInfoList( List<WeightedFragInfo> src ) {
     return src;
   }
diff --git a/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java b/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java
index 90aaa02..ea6d1bf 100644
--- a/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java
+++ b/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java
@@ -76,6 +76,7 @@ public abstract class AbstractTestCase extends TestCase {
     "\nWhen you talk about processing speed, the"
   };
 
+  @Override
   protected void setUp() throws Exception {
     analyzerW = new WhitespaceAnalyzer();
     analyzerB = new BigramAnalyzer();
@@ -84,6 +85,7 @@ public abstract class AbstractTestCase extends TestCase {
     dir = new RAMDirectory();
   }
   
+  @Override
   protected void tearDown() throws Exception {
     if( reader != null ){
       reader.close();
@@ -147,6 +149,7 @@ public abstract class AbstractTestCase extends TestCase {
   }
 
   static class BigramAnalyzer extends Analyzer {
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       return new BasicNGramTokenizer( reader );
     }
@@ -198,6 +201,7 @@ public abstract class AbstractTestCase extends TestCase {
 
     TermAttribute termAtt = addAttribute(TermAttribute.class);
     OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
+    @Override
     public boolean incrementToken() throws IOException {
       if( !getNextPartialSnippet() )
         return false;
@@ -211,6 +215,7 @@ public abstract class AbstractTestCase extends TestCase {
       return nextStartOffset;
     }
     
+    @Override
     public final void end(){
       offsetAtt.setOffset(getFinalOffset(),getFinalOffset());
     }
diff --git a/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest.java b/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest.java
index 40d96b6..1134d38 100644
--- a/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest.java
+++ b/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest.java
@@ -298,11 +298,13 @@ public class IndexTimeSynonymTest extends AbstractTestCase {
       this.tokens = tokens;
     }
     
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {      
       TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {
         final AttributeImpl reusableToken = (AttributeImpl) addAttribute(TermAttribute.class);
         int p = 0;
         
+        @Override
         public boolean incrementToken() throws IOException {
           if( p >= tokens.length ) return false;
           clearAttributes();
diff --git a/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java b/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java
index 0edc6a9..5b679ba 100644
--- a/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java
+++ b/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java
@@ -574,6 +574,7 @@ class FragmentQueue extends PriorityQueue<TextFragment>
 		initialize(size);
 	}
 
+	@Override
 	public final boolean lessThan(TextFragment fragA, TextFragment fragB)
 	{
 		if (fragA.getScore() == fragB.getScore())
diff --git a/contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanGradientFormatter.java b/contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanGradientFormatter.java
index d76c583..9e53cf7 100755
--- a/contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanGradientFormatter.java
+++ b/contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanGradientFormatter.java
@@ -39,6 +39,7 @@ public class SpanGradientFormatter
 	
 
 	
+	@Override
 	public String highlightTerm(String originalText, TokenGroup tokenGroup)
     {
         if (tokenGroup.getTotalScore() == 0)
diff --git a/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TextFragment.java b/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TextFragment.java
index 0660b66..24eff72 100644
--- a/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TextFragment.java
+++ b/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TextFragment.java
@@ -79,6 +79,7 @@ public class TextFragment
 
 	/* Returns the marked-up text for this text fragment 
 	 */
+	@Override
 	public String toString() {
 		return markedUpText.subSequence(textStartPos, textEndPos).toString();
 	}
diff --git a/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java b/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java
index 2704eae..89e2ec0 100644
--- a/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java
+++ b/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java
@@ -151,6 +151,7 @@ public class TokenSources
             offsetAtt = addAttribute(OffsetAttribute.class);
           }
     
+          @Override
           public boolean incrementToken() throws IOException {
             if (currentToken >= tokens.length) {
               return false;
diff --git a/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java b/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
index b479e82..534ecdd 100644
--- a/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
+++ b/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
@@ -504,6 +504,7 @@ public class WeightedSpanTermExtractor {
    */
   static private class PositionCheckingMap<K> extends HashMap<K,WeightedSpanTerm> {
 
+    @Override
     public void putAll(Map m) {
       Iterator<Map.Entry<K, WeightedSpanTerm>> it = m.entrySet().iterator();
       while (it.hasNext()) {
@@ -512,6 +513,7 @@ public class WeightedSpanTermExtractor {
       }
     }
 
+    @Override
     public WeightedSpanTerm put(K key, WeightedSpanTerm value) {
       WeightedSpanTerm prev = super.put(key, value);
       if (prev == null) return prev;
diff --git a/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java b/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
index a98d0b1..a9dc2d4 100644
--- a/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
+++ b/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
@@ -503,6 +503,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
 
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         mode = QUERY;
         doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);
@@ -545,6 +546,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
     doSearching(bquery);
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         mode = QUERY;
         doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);
@@ -563,6 +565,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
         new Term(FIELD_NAME, "john"))));
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         mode = QUERY;
         doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);
@@ -577,6 +580,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testGetBestFragmentsSimpleQuery() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("Kennedy");
@@ -592,6 +596,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testGetFuzzyFragments() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("Kinnedy~");
@@ -607,6 +612,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testGetWildCardFragments() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("K?nnedy");
@@ -622,6 +628,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testGetMidWildCardFragments() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("K*dy");
@@ -637,6 +644,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testGetRangeFragments() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         String queryString = FIELD_NAME + ":[kannedy TO kznnedy]";
@@ -753,6 +761,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testGetBestFragmentsPhrase() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("\"John Kennedy\"");
@@ -769,6 +778,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testGetBestFragmentsQueryScorer() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         SpanQuery clauses[] = { new SpanTermQuery(new Term("contents", "john")),
@@ -789,6 +799,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testOffByOne() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         TermQuery query = new TermQuery(new Term("data", "help"));
         Highlighter hg = new Highlighter(new SimpleHTMLFormatter(), new QueryTermScorer(query));
@@ -807,6 +818,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testGetBestFragmentsFilteredQuery() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         TermRangeFilter rf = new TermRangeFilter("contents", "john", "john", true, true);
@@ -829,6 +841,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testGetBestFragmentsFilteredPhraseQuery() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         TermRangeFilter rf = new TermRangeFilter("contents", "john", "john", true, true);
@@ -851,6 +864,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testGetBestFragmentsMultiTerm() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("John Kenn*");
@@ -866,6 +880,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testGetBestFragmentsWithOr() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("JFK OR Kennedy");
@@ -881,6 +896,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
 
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         doSearching("Kennedy");
         numHighlights = 0;
@@ -932,6 +948,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
 
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];
         wTerms[0] = new WeightedSpanTerm(10f, "hello");
@@ -977,6 +994,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testOverlapAnalyzer() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         HashMap synonyms = new HashMap();
         synonyms.put("football", "soccer,footie");
@@ -1009,6 +1027,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testGetSimpleHighlight() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("Kennedy");
@@ -1032,6 +1051,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testGetTextFragments() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
 
         doSearching("Kennedy");
@@ -1068,6 +1088,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testMaxSizeHighlight() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         doSearching("meat");
@@ -1090,6 +1111,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testMaxSizeHighlightTruncates() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         String goodWord = "goodtoken";
         Set stopWords = new HashSet(1);
@@ -1135,6 +1157,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   
   public void testMaxSizeEndHighlight() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
+      @Override
       public void run() throws Exception {
         Set stopWords = new HashSet();
         stopWords.add("in");
@@ -1159,6 +1182,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testUnRewrittenQuery() throws Exception {
     final TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         numHighlights = 0;
         // test to show how rewritten query can still be used
@@ -1206,6 +1230,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testNoFragments() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         doSearching("AnInvalidQueryWhichShouldYieldNoResults");
 
@@ -1330,6 +1355,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testFieldSpecificHighlighting() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         String docMainText = "fred is one of the people";
         QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);
@@ -1403,6 +1429,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
         iter = lst.iterator();
       }
 
+      @Override
       public boolean incrementToken() throws IOException {
         if(iter.hasNext()) {
           Token token = (Token) iter.next();
@@ -1450,6 +1477,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
         iter = lst.iterator();
       }
 
+      @Override
       public boolean incrementToken() throws IOException {
         if(iter.hasNext()) {
           Token token = (Token) iter.next();
@@ -1466,6 +1494,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
   public void testOverlapAnalyzer2() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
+      @Override
       public void run() throws Exception {
         String s = "Hi-Speed10 foo";
 
@@ -1664,6 +1693,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
     }
   }
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     ramDir = new RAMDirectory();
@@ -1705,6 +1735,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
 
   }
 
+  @Override
   protected void tearDown() throws Exception {
     super.tearDown();
   }
@@ -1741,6 +1772,7 @@ class SynonymAnalyzer extends Analyzer {
    * @see org.apache.lucene.analysis.Analyzer#tokenStream(java.lang.String,
    *      java.io.Reader)
    */
+  @Override
   public TokenStream tokenStream(String arg0, Reader arg1) {
     LowerCaseTokenizer stream = new LowerCaseTokenizer(arg1);
     stream.addAttribute(TermAttribute.class);
@@ -1779,6 +1811,7 @@ class SynonymTokenizer extends TokenStream {
     offsetAtt = addAttribute(OffsetAttribute.class);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
 
     if (currentRealToken == null) {
diff --git a/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/FieldSetting.java b/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/FieldSetting.java
index 5bf06b1..50435f3 100644
--- a/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/FieldSetting.java
+++ b/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/FieldSetting.java
@@ -42,6 +42,7 @@ class FieldSetting implements Serializable {
     this.fieldName = fieldName;
   }
 
+  @Override
   public boolean equals(Object o) {
     if (this == o)
       return true;
@@ -54,6 +55,7 @@ class FieldSetting implements Serializable {
 
   }
 
+  @Override
   public int hashCode() {
     return fieldName.hashCode();
   }
diff --git a/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedDocument.java b/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedDocument.java
index 3f2999e..a62e7c5 100644
--- a/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedDocument.java
+++ b/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedDocument.java
@@ -73,6 +73,7 @@ public class InstantiatedDocument
   }
 
 
+  @Override
   public String toString() {
     return document.toString();
   }
diff --git a/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader.java b/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader.java
index 31c2750..ae1bf84 100644
--- a/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader.java
+++ b/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader.java
@@ -58,6 +58,7 @@ public class InstantiatedIndexReader extends IndexReader {
   /**
    * @return always true.
    */
+  @Override
   public boolean isOptimized() {
     return true;
   }
@@ -68,10 +69,12 @@ public class InstantiatedIndexReader extends IndexReader {
    * 
    * @return output from {@link InstantiatedIndex#getVersion()} in associated instantiated index.
    */
+  @Override
   public long getVersion() {
     return index.getVersion();
   }
 
+  @Override
   public Directory directory() {
     throw new UnsupportedOperationException();
   }
@@ -93,6 +96,7 @@ public class InstantiatedIndexReader extends IndexReader {
    * @throws IOException if there is a low-level IO error
    * @throws UnsupportedOperationException unless overridden in subclass
    */
+  @Override
   public boolean isCurrent() throws IOException {
     return true;
   }
@@ -115,22 +119,27 @@ public class InstantiatedIndexReader extends IndexReader {
     }
   }
 
+  @Override
   public int numDocs() {
     return getIndex().getDocumentsByNumber().length - index.getDeletedDocuments().size() - deletedDocuments.size();
   }
 
+  @Override
   public int maxDoc() {
     return getIndex().getDocumentsByNumber().length;
   }
 
+  @Override
   public boolean isDeleted(int n) {
     return getIndex().getDeletedDocuments().contains(n) || deletedDocumentNumbers.contains(n);
   }
 
+  @Override
   public boolean hasDeletions() {
     return getIndex().getDeletedDocuments().size() > 0 || deletedDocumentNumbers.size() > 0;
   }
 
+  @Override
   protected void doDelete(int docNum) throws IOException {
     if (!getIndex().getDeletedDocuments().contains(docNum)) {
       if (deletedDocumentNumbers.add(docNum)) {
@@ -139,11 +148,13 @@ public class InstantiatedIndexReader extends IndexReader {
     }
   }
 
+  @Override
   protected void doUndeleteAll() throws IOException {
     deletedDocumentNumbers.clear();
     deletedDocuments.clear();
   }
 
+  @Override
   protected void doCommit(Map commitUserData) throws IOException {
     // todo: read/write lock
 
@@ -177,11 +188,13 @@ public class InstantiatedIndexReader extends IndexReader {
     // todo unlock read/writelock
   }
 
+  @Override
   protected void doClose() throws IOException {
     // ignored
     // todo perhaps release all associated instances?
   }
 
+  @Override
   public Collection getFieldNames(FieldOption fieldOption) {
     Set<String> fieldSet = new HashSet<String>();
     for (FieldSetting fi : index.getFieldSettings().values()) {
@@ -245,6 +258,7 @@ public class InstantiatedIndexReader extends IndexReader {
    * @see org.apache.lucene.document.SetBasedFieldSelector
    * @see org.apache.lucene.document.LoadFirstFieldSelector
    */
+  @Override
   public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {
     return document(n);
   }
@@ -270,6 +284,7 @@ public class InstantiatedIndexReader extends IndexReader {
    * @throws IOException if there is a low-level IO error
    */
 
+  @Override
   public Document document(int n) throws IOException {
     return isDeleted(n) ? null : getIndex().getDocumentsByNumber()[n].getDocument();
   }
@@ -278,6 +293,7 @@ public class InstantiatedIndexReader extends IndexReader {
    * never ever touch these values. it is the true values, unless norms have
    * been touched.
    */
+  @Override
   public byte[] norms(String field) throws IOException {
     byte[] norms = getIndex().getNormsByFieldNameAndDocumentNumber().get(field);
     if (norms == null) {
@@ -295,6 +311,7 @@ public class InstantiatedIndexReader extends IndexReader {
     return norms;
   }
 
+  @Override
   public void norms(String field, byte[] bytes, int offset) throws IOException {
     byte[] norms = getIndex().getNormsByFieldNameAndDocumentNumber().get(field);
     if (norms == null) {
@@ -303,6 +320,7 @@ public class InstantiatedIndexReader extends IndexReader {
     System.arraycopy(norms, 0, bytes, offset, norms.length);
   }
 
+  @Override
   protected void doSetNorm(int doc, String field, byte value) throws IOException {
     if (updatedNormsByFieldNameAndDocumentNumber == null) {
       updatedNormsByFieldNameAndDocumentNumber = new HashMap<String,List<NormUpdate>>(getIndex().getNormsByFieldNameAndDocumentNumber().size());
@@ -315,6 +333,7 @@ public class InstantiatedIndexReader extends IndexReader {
     list.add(new NormUpdate(doc, value));
   }
 
+  @Override
   public int docFreq(Term t) throws IOException {
     InstantiatedTerm term = getIndex().findTerm(t);
     if (term == null) {
@@ -324,10 +343,12 @@ public class InstantiatedIndexReader extends IndexReader {
     }
   }
 
+  @Override
   public TermEnum terms() throws IOException {
     return new InstantiatedTermEnum(this);
   }
 
+  @Override
   public TermEnum terms(Term t) throws IOException {
     InstantiatedTerm it = getIndex().findTerm(t);
     if (it != null) {
@@ -341,14 +362,17 @@ public class InstantiatedIndexReader extends IndexReader {
     }
   }
 
+  @Override
   public TermDocs termDocs() throws IOException {
     return new InstantiatedTermDocs(this);
   }
 
+  @Override
   public TermPositions termPositions() throws IOException {
     return new InstantiatedTermPositions(this);
   }
 
+  @Override
   public TermFreqVector[] getTermFreqVectors(int docNumber) throws IOException {
     InstantiatedDocument doc = getIndex().getDocumentsByNumber()[docNumber];
     if (doc.getVectorSpace() == null) {
@@ -362,6 +386,7 @@ public class InstantiatedIndexReader extends IndexReader {
     return ret;
   }
 
+  @Override
   public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {
     InstantiatedDocument doc = getIndex().getDocumentsByNumber()[docNumber];
     if (doc.getVectorSpace() == null || doc.getVectorSpace().get(field) == null) {
@@ -371,6 +396,7 @@ public class InstantiatedIndexReader extends IndexReader {
     }
   }
 
+  @Override
   public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException {
     InstantiatedDocument doc = getIndex().getDocumentsByNumber()[docNumber];
     if (doc.getVectorSpace() != null && doc.getVectorSpace().get(field) == null) {
@@ -382,6 +408,7 @@ public class InstantiatedIndexReader extends IndexReader {
     }
   }
 
+  @Override
   public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException {
     InstantiatedDocument doc = getIndex().getDocumentsByNumber()[docNumber];
     for (Map.Entry<String,List<InstantiatedTermDocumentInformation>> e : doc.getVectorSpace().entrySet()) {
diff --git a/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTerm.java b/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTerm.java
index 6b609e5..b5f33c0 100644
--- a/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTerm.java
+++ b/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTerm.java
@@ -235,6 +235,7 @@ public class InstantiatedTerm
     return term.text();
   }
 
+  @Override
   public String toString() {
     return term.toString();
   }
diff --git a/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermEnum.java b/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermEnum.java
index 9d008b8..31d2efc 100644
--- a/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermEnum.java
+++ b/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermEnum.java
@@ -47,6 +47,7 @@ public class InstantiatedTermEnum
   /**
    * Increments the enumeration to the next element.  True if one exists.
    */
+  @Override
   public boolean next() {
     if (reader.getIndex().getOrderedTerms().length <= nextTermIndex) {
       return false;
@@ -60,6 +61,7 @@ public class InstantiatedTermEnum
   /**
    * Returns the current Term in the enumeration.
    */
+  @Override
   public Term term() {
     return term == null ? null : term.getTerm();
   }
@@ -67,6 +69,7 @@ public class InstantiatedTermEnum
   /**
    * Returns the docFreq of the current Term in the enumeration.
    */
+  @Override
   public int docFreq() {
     return term.getAssociatedDocuments().length;
   }
@@ -74,6 +77,7 @@ public class InstantiatedTermEnum
   /**
    * Closes the enumeration to further activity, freeing resources.
    */
+  @Override
   public void close() {
   }
 
diff --git a/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector.java b/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector.java
index d34a2c9..b31d6c0 100644
--- a/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector.java
+++ b/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector.java
@@ -57,6 +57,7 @@ public class InstantiatedTermFreqVector
     return field;
   }
 
+  @Override
   public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append('{');
diff --git a/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals.java b/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals.java
index 84f73ec..5bb97c3 100644
--- a/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals.java
+++ b/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals.java
@@ -179,6 +179,7 @@ public class TestIndicesEquals extends TestCase {
                 final AttributeImpl reusableToken = (AttributeImpl) addAttribute(TermAttribute.class);
                 Iterator<Token> it = tokens.iterator();
                 
+                @Override
                 public final boolean incrementToken() throws IOException {
                   if (!it.hasNext()) {
                     return false;
@@ -188,6 +189,7 @@ public class TestIndicesEquals extends TestCase {
                   return true;
                 }
 
+                @Override
                 public void reset() throws IOException {
                   it = tokens.iterator();
                 }
diff --git a/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestRealTime.java b/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestRealTime.java
index 070b9ad..c3ed1ec 100644
--- a/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestRealTime.java
+++ b/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestRealTime.java
@@ -64,9 +64,13 @@ public class TestRealTime extends TestCase {
 
   public static class Collector extends org.apache.lucene.search.Collector {
     private int hits = 0;
+    @Override
     public void setScorer(Scorer scorer) {}
+    @Override
     public void setNextReader(IndexReader reader, int docBase) {}
+    @Override
     public boolean acceptsDocsOutOfOrder() { return true; }
+    @Override
     public void collect(int doc) {
       hits++;
     }
diff --git a/contrib/lucli/src/java/lucli/LuceneMethods.java b/contrib/lucli/src/java/lucli/LuceneMethods.java
index 36cf521..bdf9649 100644
--- a/contrib/lucli/src/java/lucli/LuceneMethods.java
+++ b/contrib/lucli/src/java/lucli/LuceneMethods.java
@@ -224,12 +224,16 @@ class LuceneMethods {
   final static class CountingCollector extends Collector {
     public int numHits = 0;
     
+    @Override
     public void setScorer(Scorer scorer) throws IOException {}
+    @Override
     public void collect(int doc) throws IOException {
       numHits++;
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) {}
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }    
diff --git a/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java b/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
index 8ccda84..6926c39 100644
--- a/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
+++ b/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
@@ -278,6 +278,7 @@ public class MemoryIndex implements Serializable {
       private TermAttribute termAtt = addAttribute(TermAttribute.class);
       private OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
       
+      @Override
       public boolean incrementToken() {
         if (!iter.hasNext()) return false;
         
@@ -416,18 +417,22 @@ public class MemoryIndex implements Serializable {
       searcher.search(query, new Collector() {
         private Scorer scorer;
 
+        @Override
         public void collect(int doc) throws IOException {
           scores[0] = scorer.score();
         }
 
+        @Override
         public void setScorer(Scorer scorer) throws IOException {
           this.scorer = scorer;
         }
 
+        @Override
         public boolean acceptsDocsOutOfOrder() {
           return true;
         }
 
+        @Override
         public void setNextReader(IndexReader reader, int docBase) { }
       });
       float score = scores[0];
@@ -515,6 +520,7 @@ public class MemoryIndex implements Serializable {
    * 
    * @return the string representation
    */
+  @Override
   public String toString() {
     StringBuilder result = new StringBuilder(256);    
     sortFields();   
@@ -735,6 +741,7 @@ public class MemoryIndex implements Serializable {
       return sortedFields[pos].getValue();
     }
     
+    @Override
     public int docFreq(Term term) {
       Info info = getInfo(term.field());
       int freq = 0;
@@ -743,11 +750,13 @@ public class MemoryIndex implements Serializable {
       return freq;
     }
   
+    @Override
     public TermEnum terms() {
       if (DEBUG) System.err.println("MemoryIndexReader.terms()");
       return terms(MATCH_ALL_TERM);
     }
     
+    @Override
     public TermEnum terms(Term term) {
       if (DEBUG) System.err.println("MemoryIndexReader.terms: " + term);
   
@@ -786,6 +795,7 @@ public class MemoryIndex implements Serializable {
         private int i = ix; // index into info.sortedTerms
         private int j = jx; // index into sortedFields
           
+        @Override
         public boolean next() {
           if (DEBUG) System.err.println("TermEnum.next");
           if (j >= sortedFields.length) return false;
@@ -800,6 +810,7 @@ public class MemoryIndex implements Serializable {
           return true;
         }
   
+        @Override
         public Term term() {
           if (DEBUG) System.err.println("TermEnum.term: " + i);
           if (j >= sortedFields.length) return null;
@@ -809,6 +820,7 @@ public class MemoryIndex implements Serializable {
           return createTerm(info, j, info.sortedTerms[i].getKey());
         }
         
+        @Override
         public int docFreq() {
           if (DEBUG) System.err.println("TermEnum.docFreq");
           if (j >= sortedFields.length) return 0;
@@ -817,6 +829,7 @@ public class MemoryIndex implements Serializable {
           return numPositions(info.getPositions(i));
         }
   
+        @Override
         public void close() {
           if (DEBUG) System.err.println("TermEnum.close");
         }
@@ -837,6 +850,7 @@ public class MemoryIndex implements Serializable {
       };
     }
   
+    @Override
     public TermPositions termPositions() {
       if (DEBUG) System.err.println("MemoryIndexReader.termPositions");
       
@@ -932,11 +946,13 @@ public class MemoryIndex implements Serializable {
       };
     }
   
+    @Override
     public TermDocs termDocs() {
       if (DEBUG) System.err.println("MemoryIndexReader.termDocs");
       return termPositions();
     }
   
+    @Override
     public TermFreqVector[] getTermFreqVectors(int docNumber) {
       if (DEBUG) System.err.println("MemoryIndexReader.getTermFreqVectors");
       TermFreqVector[] vectors = new TermFreqVector[fields.size()];
@@ -948,6 +964,7 @@ public class MemoryIndex implements Serializable {
       return vectors;
     }
 
+      @Override
       public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException
       {
           if (DEBUG) System.err.println("MemoryIndexReader.getTermFreqVectors");
@@ -959,6 +976,7 @@ public class MemoryIndex implements Serializable {
           }
       }
 
+      @Override
       public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException
       {
         if (DEBUG) System.err.println("MemoryIndexReader.getTermFreqVector");
@@ -986,6 +1004,7 @@ public class MemoryIndex implements Serializable {
           }
       }
 
+      @Override
       public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {
       if (DEBUG) System.err.println("MemoryIndexReader.getTermFreqVector");
       final Info info = getInfo(fieldName);
@@ -1072,6 +1091,7 @@ public class MemoryIndex implements Serializable {
     private String cachedFieldName;
     private Similarity cachedSimilarity;
     
+    @Override
     public byte[] norms(String fieldName) {
       byte[] norms = cachedNorms;
       Similarity sim = getSimilarity();
@@ -1094,64 +1114,77 @@ public class MemoryIndex implements Serializable {
       return norms;
     }
   
+    @Override
     public void norms(String fieldName, byte[] bytes, int offset) {
       if (DEBUG) System.err.println("MemoryIndexReader.norms*: " + fieldName);
       byte[] norms = norms(fieldName);
       System.arraycopy(norms, 0, bytes, offset, norms.length);
     }
   
+    @Override
     protected void doSetNorm(int doc, String fieldName, byte value) {
       throw new UnsupportedOperationException();
     }
   
+    @Override
     public int numDocs() {
       if (DEBUG) System.err.println("MemoryIndexReader.numDocs");
       return fields.size() > 0 ? 1 : 0;
     }
   
+    @Override
     public int maxDoc() {
       if (DEBUG) System.err.println("MemoryIndexReader.maxDoc");
       return 1;
     }
   
+    @Override
     public Document document(int n) {
       if (DEBUG) System.err.println("MemoryIndexReader.document");
       return new Document(); // there are no stored fields
     }
 
     //When we convert to JDK 1.5 make this Set<String>
+    @Override
     public Document document(int n, FieldSelector fieldSelector) throws IOException {
       if (DEBUG) System.err.println("MemoryIndexReader.document");
       return new Document(); // there are no stored fields
     }
 
+    @Override
     public boolean isDeleted(int n) {
       if (DEBUG) System.err.println("MemoryIndexReader.isDeleted");
       return false;
     }
   
+    @Override
     public boolean hasDeletions() {
       if (DEBUG) System.err.println("MemoryIndexReader.hasDeletions");
       return false;
     }
   
+    @Override
     protected void doDelete(int docNum) {
       throw new UnsupportedOperationException();
     }
   
+    @Override
     protected void doUndeleteAll() {
       throw new UnsupportedOperationException();
     }
   
+    @Override
     protected void doCommit(Map<String,String> commitUserData) {
       if (DEBUG) System.err.println("MemoryIndexReader.doCommit");
     }
   
+    @Override
     protected void doClose() {
       if (DEBUG) System.err.println("MemoryIndexReader.doClose");
     }
     
     // lucene >= 1.9 (remove this method for lucene-1.4.3)
+    @Override
     public Collection<String> getFieldNames(FieldOption fieldOption) {
       if (DEBUG) System.err.println("MemoryIndexReader.getFieldNamesOption");
       if (fieldOption == FieldOption.UNINDEXED) 
diff --git a/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java b/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
index 658cbf3..75d5ee2 100644
--- a/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
+++ b/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
@@ -216,6 +216,7 @@ public class MemoryIndexTest extends BaseTokenStreamTestCase {
 
   /* all files will be open relative to this */
   public String fileDir;
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     fileDir = System.getProperty("lucene.common.dir", null);
@@ -430,18 +431,22 @@ public class MemoryIndexTest extends BaseTokenStreamTestCase {
       searcher.search(query, new Collector() {
         private Scorer scorer;
 
+        @Override
         public void collect(int doc) throws IOException {
           scores[0] = scorer.score();
         }
 
+        @Override
         public void setScorer(Scorer scorer) throws IOException {
           this.scorer = scorer;
         }
 
+        @Override
         public boolean acceptsDocsOutOfOrder() {
           return true;
         }
 
+        @Override
         public void setNextReader(IndexReader reader, int docBase) { }
       });
       float score = scores[0];
diff --git a/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy.java b/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy.java
index abfff96..7798812 100644
--- a/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy.java
+++ b/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy.java
@@ -55,6 +55,7 @@ public class BalancedSegmentMergePolicy extends LogByteSizeMergePolicy
     }
   }
   
+  @Override
   protected long size(SegmentInfo info) throws IOException {
     long byteSize = info.sizeInBytes();
     float delRatio = (info.docCount <= 0 ? 0.0f : ((float)info.getDelCount() / (float)info.docCount));
diff --git a/contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor.java b/contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor.java
index cd3600a..293c37a 100644
--- a/contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor.java
+++ b/contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor.java
@@ -138,25 +138,30 @@ public class TermVectorAccessor {
 
     private TermVectorMapper decorated;
 
+    @Override
     public boolean isIgnoringPositions() {
       return decorated.isIgnoringPositions();
     }
 
+    @Override
     public boolean isIgnoringOffsets() {
       return decorated.isIgnoringOffsets();
     }
 
     private boolean termVectorStored = false;
 
+    @Override
     public void setExpectations(String field, int numTerms, boolean storeOffsets, boolean storePositions) {
       decorated.setExpectations(field, numTerms, storeOffsets, storePositions);
       termVectorStored = true;
     }
 
+    @Override
     public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {
       decorated.map(term, frequency, offsets, positions);
     }
 
+    @Override
     public void setDocumentNumber(int documentNumber) {
       decorated.setDocumentNumber(documentNumber);
     }
diff --git a/contrib/misc/src/java/org/apache/lucene/misc/ChainedFilter.java b/contrib/misc/src/java/org/apache/lucene/misc/ChainedFilter.java
index d55813d..fed3198 100644
--- a/contrib/misc/src/java/org/apache/lucene/misc/ChainedFilter.java
+++ b/contrib/misc/src/java/org/apache/lucene/misc/ChainedFilter.java
@@ -96,6 +96,7 @@ public class ChainedFilter extends Filter
     /**
      * {@link Filter#getDocIdSet}.
      */
+    @Override
     public DocIdSet getDocIdSet(IndexReader reader) throws IOException
     {
         int[] index = new int[1]; // use array as reference to modifiable int; 
@@ -199,6 +200,7 @@ public class ChainedFilter extends Filter
         return finalResult(result, reader.maxDoc());
     }
 
+    @Override
     public String toString()
     {
         StringBuilder sb = new StringBuilder();
diff --git a/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java b/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java
index 144de82..915f7b0 100644
--- a/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java
+++ b/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java
@@ -92,6 +92,7 @@ final class TermInfoQueue extends PriorityQueue<TermInfo> {
   TermInfoQueue(int size) {
     initialize(size);
   }
+  @Override
   protected final boolean lessThan(TermInfo termInfoA, TermInfo termInfoB) {
     return termInfoA.docFreq < termInfoB.docFreq;
   }
diff --git a/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java b/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java
index ab41402..00a60eb 100644
--- a/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java
+++ b/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java
@@ -134,6 +134,7 @@ public class SweetSpotSimilarity extends DefaultSimilarity {
    * numTokens does not count overlap tokens if
    * discountOverlaps is true by default or true for this
    * specific field. */
+  @Override
   public float computeNorm(String fieldName, FieldInvertState state) {
     final int numTokens;
     boolean overlaps = discountOverlaps;
@@ -166,6 +167,7 @@ public class SweetSpotSimilarity extends DefaultSimilarity {
    *
    * @see #setLengthNormFactors
    */
+  @Override
   public float lengthNorm(String fieldName, int numTerms) {
     int l = ln_min;
     int h = ln_max;
@@ -199,6 +201,7 @@ public class SweetSpotSimilarity extends DefaultSimilarity {
    *
    * @see #baselineTf
    */
+  @Override
   public float tf(int freq) {
     return baselineTf(freq);
   }
diff --git a/contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser.java b/contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser.java
index 397043b..1dac672 100644
--- a/contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser.java
+++ b/contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser.java
@@ -74,6 +74,7 @@ public class AnalyzingQueryParser extends org.apache.lucene.queryParser.QueryPar
    * @return Resulting {@link Query} built for the term
    * @throws ParseException
    */
+  @Override
   protected Query getWildcardQuery(String field, String termStr) throws ParseException {
     List<String> tlist = new ArrayList<String>();
     List<String> wlist = new ArrayList<String>();
@@ -184,6 +185,7 @@ public class AnalyzingQueryParser extends org.apache.lucene.queryParser.QueryPar
    * @return Resulting {@link Query} built for the term
    * @throws ParseException
    */
+  @Override
   protected Query getPrefixQuery(String field, String termStr) throws ParseException {
     // get Analyzer from superclass and tokenize the term
     TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));
@@ -230,6 +232,7 @@ public class AnalyzingQueryParser extends org.apache.lucene.queryParser.QueryPar
    * @return Resulting {@link Query} built for the term
    * @exception ParseException
    */
+  @Override
   protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)
       throws ParseException {
     // get Analyzer from superclass and tokenize the term
@@ -265,6 +268,7 @@ public class AnalyzingQueryParser extends org.apache.lucene.queryParser.QueryPar
    * Overrides super class, by passing terms through analyzer.
    * @exception ParseException
    */
+  @Override
   protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)
       throws ParseException {
     // get Analyzer from superclass and tokenize the terms
diff --git a/contrib/misc/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser.java b/contrib/misc/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser.java
index 541bcfa..6359faf 100644
--- a/contrib/misc/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser.java
+++ b/contrib/misc/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser.java
@@ -72,6 +72,7 @@ public class ComplexPhraseQueryParser extends QueryParser {
     super(matchVersion, f, a);
   }
 
+  @Override
   protected Query getFieldQuery(String field, String queryText, int slop) {
     ComplexPhraseQuery cpq = new ComplexPhraseQuery(field, queryText, slop);
     complexPhrases.add(cpq); // add to list of phrases to be parsed once
@@ -80,6 +81,7 @@ public class ComplexPhraseQueryParser extends QueryParser {
     return cpq;
   }
 
+  @Override
   public Query parse(String query) throws ParseException {
     if (isPass2ResolvingPhrases) {
       MultiTermQuery.RewriteMethod oldMethod = getMultiTermRewriteMethod();
@@ -126,6 +128,7 @@ public class ComplexPhraseQueryParser extends QueryParser {
   // unfortunately need
   // to throw a runtime exception here if a term for another field is embedded
   // in phrase query
+  @Override
   protected Query newTermQuery(Term term) {
     if (isPass2ResolvingPhrases) {
       try {
@@ -147,6 +150,7 @@ public class ComplexPhraseQueryParser extends QueryParser {
     }
   }
 
+  @Override
   protected Query getWildcardQuery(String field, String termStr)
       throws ParseException {
     if (isPass2ResolvingPhrases) {
@@ -155,6 +159,7 @@ public class ComplexPhraseQueryParser extends QueryParser {
     return super.getWildcardQuery(field, termStr);
   }
 
+  @Override
   protected Query getRangeQuery(String field, String part1, String part2,
       boolean inclusive) throws ParseException {
     if (isPass2ResolvingPhrases) {
@@ -163,6 +168,7 @@ public class ComplexPhraseQueryParser extends QueryParser {
     return super.getRangeQuery(field, part1, part2, inclusive);
   }
 
+  @Override
   protected Query newRangeQuery(String field, String part1, String part2,
       boolean inclusive) {
     if (isPass2ResolvingPhrases) {
@@ -176,6 +182,7 @@ public class ComplexPhraseQueryParser extends QueryParser {
     return super.newRangeQuery(field, part1, part2, inclusive);
   }
 
+  @Override
   protected Query getFuzzyQuery(String field, String termStr,
       float minSimilarity) throws ParseException {
     if (isPass2ResolvingPhrases) {
@@ -218,6 +225,7 @@ public class ComplexPhraseQueryParser extends QueryParser {
       contents = qp.parse(phrasedQueryStringContents);
     }
 
+    @Override
     public Query rewrite(IndexReader reader) throws IOException {
       // ArrayList spanClauses = new ArrayList();
       if (contents instanceof TermQuery) {
@@ -348,10 +356,12 @@ public class ComplexPhraseQueryParser extends QueryParser {
       }
     }
 
+    @Override
     public String toString(String field) {
       return "\"" + phrasedQueryStringContents + "\"";
     }
 
+    @Override
     public int hashCode() {
       final int prime = 31;
       int result = 1;
@@ -364,6 +374,7 @@ public class ComplexPhraseQueryParser extends QueryParser {
       return result;
     }
 
+    @Override
     public boolean equals(Object obj) {
       if (this == obj)
         return true;
diff --git a/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier.java b/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier.java
index ebda433..db64956 100644
--- a/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier.java
+++ b/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier.java
@@ -53,11 +53,13 @@ public class TestFieldNormModifier extends TestCase {
   
   /** inverts the normal notion of lengthNorm */
   public static Similarity s = new DefaultSimilarity() {
+    @Override
     public float lengthNorm(String fieldName, int numTokens) {
       return numTokens;
     }
   };
   
+  @Override
   public void setUp() throws Exception {
     IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, MaxFieldLength.UNLIMITED);
     
@@ -125,15 +127,19 @@ public class TestFieldNormModifier extends TestCase {
       private int docBase = 0;
       private Scorer scorer;
       
+      @Override
       public final void collect(int doc) throws IOException {
         scores[doc + docBase] = scorer.score();
       }
+      @Override
       public void setNextReader(IndexReader reader, int docBase) {
         this.docBase = docBase;
       }
+      @Override
       public void setScorer(Scorer scorer) throws IOException {
         this.scorer = scorer;
       }
+      @Override
       public boolean acceptsDocsOutOfOrder() {
         return true;
       }
@@ -156,15 +162,19 @@ public class TestFieldNormModifier extends TestCase {
     searcher.search(new TermQuery(new Term("field", "word")),  new Collector() {
       private int docBase = 0;
       private Scorer scorer;
+      @Override
       public final void collect(int doc) throws IOException {
         scores[doc + docBase] = scorer.score();
       }
+      @Override
       public void setNextReader(IndexReader reader, int docBase) {
         this.docBase = docBase;
       }
+      @Override
       public void setScorer(Scorer scorer) throws IOException {
         this.scorer = scorer;
       }
+      @Override
       public boolean acceptsDocsOutOfOrder() {
         return true;
       }
@@ -204,15 +214,19 @@ public class TestFieldNormModifier extends TestCase {
     searcher.search(new TermQuery(new Term("untokfield", "20061212")), new Collector() {
       private int docBase = 0;
       private Scorer scorer;
+      @Override
       public final void collect(int doc) throws IOException {
         scores[doc + docBase] = scorer.score();
       }
+      @Override
       public void setNextReader(IndexReader reader, int docBase) {
         this.docBase = docBase;
       }
+      @Override
       public void setScorer(Scorer scorer) throws IOException {
         this.scorer = scorer;
       }
+      @Override
       public boolean acceptsDocsOutOfOrder() {
         return true;
       }
diff --git a/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java b/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java
index b7c8ab7..8da3da3 100644
--- a/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java
+++ b/contrib/misc/src/test/org/apache/lucene/index/TestMultiPassIndexSplitter.java
@@ -29,6 +29,7 @@ public class TestMultiPassIndexSplitter extends TestCase {
   IndexReader input;
   int NUM_DOCS = 11;
 
+  @Override
   public void setUp() throws Exception {
     RAMDirectory dir = new RAMDirectory();
     IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true,
diff --git a/contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest.java b/contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest.java
index 8a3f987..2ff0cef 100644
--- a/contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest.java
+++ b/contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest.java
@@ -54,6 +54,7 @@ public class ChainedFilterTest extends TestCase {
   private QueryWrapperFilter bobFilter;
   private QueryWrapperFilter sueFilter;
 
+  @Override
   public void setUp() throws Exception {
     directory = new RAMDirectory();
     IndexWriter writer =
diff --git a/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java b/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java
index 31f25d7..55d513a 100644
--- a/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java
+++ b/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java
@@ -182,6 +182,7 @@ public class SweetSpotSimilarityTest extends TestCase {
   public void testHyperbolicSweetSpot() {
   
     SweetSpotSimilarity ss = new SweetSpotSimilarity() {
+        @Override
         public float tf(int freq) {
           return hyperbolicTf(freq);
         }
diff --git a/contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier.java b/contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier.java
index 7e73972..1a3a082 100644
--- a/contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier.java
+++ b/contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier.java
@@ -56,11 +56,13 @@ public class TestLengthNormModifier extends TestCase {
 
     /** inverts the normal notion of lengthNorm */
     public static Similarity s = new DefaultSimilarity() {
+	    @Override
 	    public float lengthNorm(String fieldName, int numTokens) {
 		return numTokens;
 	    }
 	};
     
+    @Override
     public void setUp() throws Exception {
 	IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, MaxFieldLength.UNLIMITED);
 	
@@ -132,15 +134,19 @@ public class TestLengthNormModifier extends TestCase {
   searcher.search(new TermQuery(new Term("field", "word")), new Collector() {
     private int docBase = 0;
     private Scorer scorer;
+    @Override
     public final void collect(int doc) throws IOException {
       scores[doc + docBase] = scorer.score();
     }
+    @Override
     public void setNextReader(IndexReader reader, int docBase) {
       this.docBase = docBase;
     }
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       this.scorer = scorer;
     }
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }
@@ -157,6 +163,7 @@ public class TestLengthNormModifier extends TestCase {
 
 	// override the norms to be inverted
 	Similarity s = new DefaultSimilarity() {
+		@Override
 		public float lengthNorm(String fieldName, int numTokens) {
 		    return numTokens;
 		}
@@ -169,15 +176,19 @@ public class TestLengthNormModifier extends TestCase {
 	searcher.search(new TermQuery(new Term("field", "word")), new Collector() {
       private int docBase = 0;
       private Scorer scorer;
+      @Override
       public final void collect(int doc) throws IOException {
         scores[doc + docBase] = scorer.score();
       }
+      @Override
       public void setNextReader(IndexReader reader, int docBase) {
         this.docBase = docBase;
       }
+      @Override
       public void setScorer(Scorer scorer) throws IOException {
         this.scorer = scorer;
       }
+      @Override
       public boolean acceptsDocsOutOfOrder() {
         return true;
       }
diff --git a/contrib/misc/src/test/org/apache/lucene/queryParser/analyzing/TestAnalyzingQueryParser.java b/contrib/misc/src/test/org/apache/lucene/queryParser/analyzing/TestAnalyzingQueryParser.java
index f28c217..f570728 100644
--- a/contrib/misc/src/test/org/apache/lucene/queryParser/analyzing/TestAnalyzingQueryParser.java
+++ b/contrib/misc/src/test/org/apache/lucene/queryParser/analyzing/TestAnalyzingQueryParser.java
@@ -46,6 +46,7 @@ public class TestAnalyzingQueryParser extends TestCase {
   private String[] fuzzyInput;
   private String[] fuzzyExpected;
 
+  @Override
   public void setUp() {
     wildcardInput = new String[] { "übersetzung über*ung",
         "Mötley Cr\u00fce Mötl?* Crü?", "Renée Zellweger Ren?? Zellw?ger" };
@@ -109,6 +110,7 @@ class ASCIIAnalyzer extends org.apache.lucene.analysis.Analyzer {
   public ASCIIAnalyzer() {
   }
 
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new StandardTokenizer(Version.LUCENE_CURRENT, reader);
     result = new StandardFilter(result);
diff --git a/contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery.java b/contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery.java
index f97aaea..f8a0c6c 100644
--- a/contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery.java
+++ b/contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery.java
@@ -111,6 +111,7 @@ public class TestComplexPhraseQuery extends TestCase {
 
   }
 
+  @Override
   protected void setUp() throws Exception {
     RAMDirectory rd = new RAMDirectory();
     IndexWriter w = new IndexWriter(rd, analyzer, MaxFieldLength.UNLIMITED);
@@ -126,6 +127,7 @@ public class TestComplexPhraseQuery extends TestCase {
     searcher = new IndexSearcher(rd, true);
   }
 
+  @Override
   protected void tearDown() throws Exception {
     searcher.close();
   }
diff --git a/contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.java b/contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.java
index dd01aaa..9aa89b9 100644
--- a/contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.java
+++ b/contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.java
@@ -71,6 +71,7 @@ public class TestPrecedenceQueryParser extends LocalizedTestCase {
     TermAttribute termAtt = addAttribute(TermAttribute.class);
     OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
     
+    @Override
     public boolean incrementToken() throws IOException {
       if (inPhrase) {
         inPhrase = false;
@@ -95,6 +96,7 @@ public class TestPrecedenceQueryParser extends LocalizedTestCase {
   public static class QPTestAnalyzer extends Analyzer {
 
     /** Filters LowerCaseTokenizer with StopFilter. */
+    @Override
     public final TokenStream tokenStream(String fieldName, Reader reader) {
       return new QPTestFilter(new LowerCaseTokenizer(reader));
     }
@@ -105,10 +107,12 @@ public class TestPrecedenceQueryParser extends LocalizedTestCase {
       super(f, a);
     }
 
+    @Override
     protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException {
       throw new ParseException("Fuzzy queries not allowed");
     }
 
+    @Override
     protected Query getWildcardQuery(String field, String termStr) throws ParseException {
       throw new ParseException("Wildcard queries not allowed");
     }
@@ -116,6 +120,7 @@ public class TestPrecedenceQueryParser extends LocalizedTestCase {
 
   private int originalMaxClauses;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     originalMaxClauses = BooleanQuery.getMaxClauseCount();
@@ -593,6 +598,7 @@ public class TestPrecedenceQueryParser extends LocalizedTestCase {
   }
 
 
+  @Override
   public void tearDown() {
     BooleanQuery.setMaxClauseCount(originalMaxClauses);
   }
diff --git a/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java b/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java
index 6af7d15..94d3e55 100644
--- a/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java
+++ b/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter.java
@@ -52,6 +52,7 @@ public class BooleanFilter extends Filter
    * Returns the a DocIdSetIterator representing the Boolean composition
    * of the filters that have been added.
    */
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) throws IOException
   {
     OpenBitSetDISI res = null;
@@ -156,6 +157,7 @@ public class BooleanFilter extends Filter
               ((filters1 != null) && filters1.equals(filters2));
   }
   
+  @Override
   public boolean equals(Object obj)
   {
     if (this == obj)
@@ -170,6 +172,7 @@ public class BooleanFilter extends Filter
         && equalFilters(shouldFilters, other.shouldFilters);
   }
 
+  @Override
   public int hashCode()
   {
     int hash=7;
@@ -180,6 +183,7 @@ public class BooleanFilter extends Filter
   }
   
   /** Prints a user-readable version of this query. */
+  @Override
   public String toString()
   {
     StringBuilder buffer = new StringBuilder();
diff --git a/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery.java b/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery.java
index e0ef099..104e2b2 100644
--- a/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery.java
+++ b/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery.java
@@ -53,12 +53,15 @@ public class BoostingQuery extends Query {
       this.context.setBoost(0.0f);                      // ignore context-only matches
     }
 
+    @Override
     public Query rewrite(IndexReader reader) throws IOException {
       BooleanQuery result = new BooleanQuery() {
 
+        @Override
         public Similarity getSimilarity(Searcher searcher) {
           return new DefaultSimilarity() {
 
+            @Override
             public float coord(int overlap, int max) {
               switch (overlap) {
 
@@ -83,6 +86,7 @@ public class BoostingQuery extends Query {
       return result;
     }
 
+    @Override
     public int hashCode() {
       final int prime = 31;
       int result = 1;
@@ -92,6 +96,7 @@ public class BoostingQuery extends Query {
       return result;
     }
 
+    @Override
     public boolean equals(Object obj) {
       if (this == obj)
         return true;
@@ -115,6 +120,7 @@ public class BoostingQuery extends Query {
       return true;
     }
 
+    @Override
     public String toString(String field) {
       return match.toString(field) + "/" + context.toString(field);
     }
diff --git a/contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter.java b/contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter.java
index ef6e269..58838fe 100644
--- a/contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter.java
+++ b/contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter.java
@@ -67,6 +67,7 @@ public class DuplicateFilter extends Filter
 		this.processingMode = processingMode;
 	}
 
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) throws IOException
 	{
 		if(processingMode==PM_FAST_INVALIDATION)
@@ -186,6 +187,7 @@ public class DuplicateFilter extends Filter
 	}
 
 
+	@Override
 	public boolean equals(Object obj)
 	{
 		if(this == obj)
@@ -200,6 +202,7 @@ public class DuplicateFilter extends Filter
 
 
 
+	@Override
 	public int hashCode()
 	{
 		int hash = 217;
diff --git a/contrib/queries/src/java/org/apache/lucene/search/FuzzyLikeThisQuery.java b/contrib/queries/src/java/org/apache/lucene/search/FuzzyLikeThisQuery.java
index a7aa808..7083b02 100644
--- a/contrib/queries/src/java/org/apache/lucene/search/FuzzyLikeThisQuery.java
+++ b/contrib/queries/src/java/org/apache/lucene/search/FuzzyLikeThisQuery.java
@@ -60,6 +60,7 @@ public class FuzzyLikeThisQuery extends Query
     boolean ignoreTF=false;
     private int maxNumTerms;
 
+    @Override
     public int hashCode() {
       final int prime = 31;
       int result = 1;
@@ -71,6 +72,7 @@ public class FuzzyLikeThisQuery extends Query
       return result;
     }
 
+    @Override
     public boolean equals(Object obj) {
       if (this == obj)
         return true;
@@ -123,6 +125,7 @@ public class FuzzyLikeThisQuery extends Query
 			this.queryString = queryString;
 		}
 
+    @Override
     public int hashCode() {
       final int prime = 31;
       int result = 1;
@@ -135,6 +138,7 @@ public class FuzzyLikeThisQuery extends Query
       return result;
     }
 
+    @Override
     public boolean equals(Object obj) {
       if (this == obj)
         return true;
@@ -244,6 +248,7 @@ public class FuzzyLikeThisQuery extends Query
         }     
     }
             
+    @Override
     public Query rewrite(IndexReader reader) throws IOException
     {
         if(rewrittenQuery!=null)
@@ -334,6 +339,7 @@ public class FuzzyLikeThisQuery extends Query
         /* (non-Javadoc)
          * @see org.apache.lucene.util.PriorityQueue#lessThan(java.lang.Object, java.lang.Object)
          */
+        @Override
         protected boolean lessThan(ScoreTerm termA, ScoreTerm termB) {
           if (termA.score== termB.score)
             return termA.term.compareTo(termB.term) > 0;
@@ -352,11 +358,13 @@ public class FuzzyLikeThisQuery extends Query
         	  super(t);
         	  this.ignoreTF=ignoreTF;
           }
+          @Override
           public Similarity getSimilarity(Searcher searcher)
           {            
               Similarity result = super.getSimilarity(searcher);
               result = new SimilarityDelegator(result) {
                   
+                  @Override
                   public float tf(float freq)
                   {
                 	  if(ignoreTF)
@@ -365,6 +373,7 @@ public class FuzzyLikeThisQuery extends Query
                 	  }
             		  return super.tf(freq);
                   }
+                  @Override
                   public float idf(int docFreq, int numDocs)
                   {
                       //IDF is already factored into individual term boosts
@@ -380,6 +389,7 @@ public class FuzzyLikeThisQuery extends Query
     /* (non-Javadoc)
      * @see org.apache.lucene.search.Query#toString(java.lang.String)
      */
+    @Override
     public String toString(String field)
     {
         return null;
diff --git a/contrib/queries/src/java/org/apache/lucene/search/TermsFilter.java b/contrib/queries/src/java/org/apache/lucene/search/TermsFilter.java
index 2adc892..24a6370 100644
--- a/contrib/queries/src/java/org/apache/lucene/search/TermsFilter.java
+++ b/contrib/queries/src/java/org/apache/lucene/search/TermsFilter.java
@@ -52,6 +52,7 @@ public class TermsFilter extends Filter
 /* (non-Javadoc)
    * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)
 	 */
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) throws IOException
 	{
     OpenBitSet result=new OpenBitSet(reader.maxDoc());
@@ -75,6 +76,7 @@ public class TermsFilter extends Filter
         return result;
 	}
 	
+	@Override
 	public boolean equals(Object obj)
 	{
 		if(this == obj)
@@ -86,6 +88,7 @@ public class TermsFilter extends Filter
 					 (terms != null && terms.equals(test.terms)));
 	}
 
+	@Override
 	public int hashCode()
 	{
 		int hash=9;
diff --git a/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis.java b/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis.java
index 16bfe91..1bec770 100644
--- a/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis.java
+++ b/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis.java
@@ -1015,6 +1015,7 @@ public final class MoreLikeThis {
             initialize(s);
         }
 
+        @Override
         protected boolean lessThan(Object[] aa, Object[] bb) {
             Float fa = (Float) aa[2];
             Float fb = (Float) bb[2];
diff --git a/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThisQuery.java b/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThisQuery.java
index 126c497..babe98c 100644
--- a/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThisQuery.java
+++ b/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThisQuery.java
@@ -60,6 +60,7 @@ public class MoreLikeThisQuery extends Query
         this.analyzer=analyzer;
     }
     
+    @Override
     public Query rewrite(IndexReader reader) throws IOException
     {
         MoreLikeThis mlt=new MoreLikeThis(reader);
@@ -82,6 +83,7 @@ public class MoreLikeThisQuery extends Query
     /* (non-Javadoc)
      * @see org.apache.lucene.search.Query#toString(java.lang.String)
      */
+    @Override
     public String toString(String field)
     {       
         return "like:"+likeText;
diff --git a/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest.java b/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest.java
index 5f84dee..53ba6c6 100644
--- a/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest.java
+++ b/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest.java
@@ -34,6 +34,7 @@ public class BooleanFilterTest extends TestCase
 	private RAMDirectory directory;
 	private IndexReader reader;
 
+	@Override
 	protected void setUp() throws Exception
 	{
 		directory = new RAMDirectory();
diff --git a/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest.java b/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest.java
index 1c824b2..3bccd7d 100644
--- a/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest.java
+++ b/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest.java
@@ -39,6 +39,7 @@ public class DuplicateFilterTest extends TestCase
 	TermQuery tq=new TermQuery(new Term("text","lucene"));
 	private IndexSearcher searcher;
 
+	@Override
 	protected void setUp() throws Exception
 	{
 		directory = new RAMDirectory();
@@ -60,6 +61,7 @@ public class DuplicateFilterTest extends TestCase
 		
 	}
 	
+	@Override
 	protected void tearDown() throws Exception
 	{
 		reader.close();
diff --git a/contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest.java b/contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest.java
index 76e1eff..f5fcabe 100644
--- a/contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest.java
+++ b/contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest.java
@@ -37,6 +37,7 @@ public class FuzzyLikeThisQueryTest extends TestCase
 	private IndexSearcher searcher;
 	private Analyzer analyzer=new WhitespaceAnalyzer();
 
+	@Override
 	protected void setUp() throws Exception
 	{
 		directory = new RAMDirectory();
diff --git a/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis.java b/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis.java
index b8c689f..601bd83 100644
--- a/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis.java
+++ b/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis.java
@@ -41,6 +41,7 @@ public class TestMoreLikeThis extends LuceneTestCase {
     private IndexReader reader;
     private IndexSearcher searcher;
 
+    @Override
     protected void setUp() throws Exception {
 	directory = new RAMDirectory();
 	IndexWriter writer = new IndexWriter(directory, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),
@@ -56,6 +57,7 @@ public class TestMoreLikeThis extends LuceneTestCase {
 
     }
 
+    @Override
     protected void tearDown() throws Exception {
 	reader.close();
 	searcher.close();
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/QueryNodeException.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/QueryNodeException.java
index 907df6e..9a7223b 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/QueryNodeException.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/QueryNodeException.java
@@ -68,10 +68,12 @@ public class QueryNodeException extends Exception implements NLSException {
     return this.message;
   }
 
+  @Override
   public String getMessage() {
     return getLocalizedMessage();
   }
 
+  @Override
   public String getLocalizedMessage() {
     return getLocalizedMessage(Locale.getDefault());
   }
@@ -80,6 +82,7 @@ public class QueryNodeException extends Exception implements NLSException {
     return this.message.getLocalizedMessage(locale);
   }
 
+  @Override
   public String toString() {
     return this.message.getKey() + ": " + getLocalizedMessage();
   }
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/config/FieldConfig.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/config/FieldConfig.java
index d715d36..1036a86 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/config/FieldConfig.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/config/FieldConfig.java
@@ -57,6 +57,7 @@ public class FieldConfig extends AttributeSource {
     return this.fieldName;
   }
   
+  @Override
   public String toString(){
     return "<fieldconfig name=\"" + this.fieldName + "\" attributes=\"" + super.toString() + "\"/>";
   }
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/AndQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/AndQueryNode.java
index a94e79e..5cdd2f7 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/AndQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/AndQueryNode.java
@@ -41,6 +41,7 @@ public class AndQueryNode extends BooleanQueryNode {
     }
   }
 
+  @Override
   public String toString() {
     if (getChildren() == null || getChildren().size() == 0)
       return "<boolean operation='and'/>";
@@ -55,6 +56,7 @@ public class AndQueryNode extends BooleanQueryNode {
     return sb.toString();
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     if (getChildren() == null || getChildren().size() == 0)
       return "";
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/AnyQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/AnyQueryNode.java
index 1571c3b..80818d8 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/AnyQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/AnyQueryNode.java
@@ -95,6 +95,7 @@ public class AnyQueryNode extends AndQueryNode {
     this.field = field;
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     AnyQueryNode clone = (AnyQueryNode) super.cloneTree();
 
@@ -104,6 +105,7 @@ public class AnyQueryNode extends AndQueryNode {
     return clone;
   }
 
+  @Override
   public String toString() {
     if (getChildren() == null || getChildren().size() == 0)
       return "<any field='" + this.field + "'  matchelements="
@@ -119,6 +121,7 @@ public class AnyQueryNode extends AndQueryNode {
     return sb.toString();
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     String anySTR = "ANY " + this.minimumMatchingmElements;
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BooleanQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BooleanQueryNode.java
index 3750a23..8a18325 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BooleanQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BooleanQueryNode.java
@@ -40,6 +40,7 @@ public class BooleanQueryNode extends QueryNodeImpl {
     set(clauses);
   }
 
+  @Override
   public String toString() {
     if (getChildren() == null || getChildren().size() == 0)
       return "<boolean operation='default'/>";
@@ -72,6 +73,7 @@ public class BooleanQueryNode extends QueryNodeImpl {
       return "( " + sb.toString() + " )";
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     BooleanQueryNode clone = (BooleanQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BoostQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BoostQueryNode.java
index 7c7156b..b337be4 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BoostQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/BoostQueryNode.java
@@ -99,6 +99,7 @@ public class BoostQueryNode extends QueryNodeImpl {
 
   }
 
+  @Override
   public String toString() {
     return "<boost value='" + getValueString() + "'>" + "\n"
         + getChild().toString() + "\n</boost>";
@@ -111,6 +112,7 @@ public class BoostQueryNode extends QueryNodeImpl {
         + getValueString();
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     BoostQueryNode clone = (BoostQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/DeletedQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/DeletedQueryNode.java
index 8e52e40..daa7d69 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/DeletedQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/DeletedQueryNode.java
@@ -37,10 +37,12 @@ public class DeletedQueryNode extends QueryNodeImpl {
     return "[DELETEDCHILD]";
   }
 
+  @Override
   public String toString() {
     return "<deleted/>";
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     DeletedQueryNode clone = (DeletedQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/FieldQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/FieldQueryNode.java
index e5abe5c..f39016c 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/FieldQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/FieldQueryNode.java
@@ -91,6 +91,7 @@ public class FieldQueryNode extends QueryNodeImpl implements TextableQueryNode,
     }
   }
 
+  @Override
   public String toString() {
     return "<field start='" + this.begin + "' end='" + this.end + "' field='"
         + this.field + "' text='" + this.text + "'/>";
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/FuzzyQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/FuzzyQueryNode.java
index 30a0dc8..c3e4ade 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/FuzzyQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/FuzzyQueryNode.java
@@ -64,6 +64,7 @@ public class FuzzyQueryNode extends FieldQueryNode {
     return this.prefixLength;
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escaper) {
     if (isDefaultField(this.field)) {
       return getTermEscaped(escaper) + "~" + this.similarity;
@@ -72,6 +73,7 @@ public class FuzzyQueryNode extends FieldQueryNode {
     }
   }
 
+  @Override
   public String toString() {
     return "<fuzzy field='" + this.field + "' similarity='" + this.similarity
         + "' term='" + this.text + "'/>";
@@ -81,6 +83,7 @@ public class FuzzyQueryNode extends FieldQueryNode {
     this.similarity = similarity;
   }
 
+  @Override
   public FuzzyQueryNode cloneTree() throws CloneNotSupportedException {
     FuzzyQueryNode clone = (FuzzyQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/GroupQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/GroupQueryNode.java
index 14ae263..60e1f14 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/GroupQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/GroupQueryNode.java
@@ -54,6 +54,7 @@ public class GroupQueryNode extends QueryNodeImpl {
     return getChildren().get(0);
   }
 
+  @Override
   public String toString() {
     return "<group>" + "\n" + getChild().toString() + "\n</group>";
   }
@@ -65,6 +66,7 @@ public class GroupQueryNode extends QueryNodeImpl {
     return "( " + getChild().toQueryString(escapeSyntaxParser) + " )";
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     GroupQueryNode clone = (GroupQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/MatchAllDocsQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/MatchAllDocsQueryNode.java
index 58575d9..dd7ac1a 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/MatchAllDocsQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/MatchAllDocsQueryNode.java
@@ -31,6 +31,7 @@ public class MatchAllDocsQueryNode extends QueryNodeImpl {
     // empty constructor
   }
 
+  @Override
   public String toString() {
     return "<matchAllDocs field='*' term='*'>";
   }
@@ -39,6 +40,7 @@ public class MatchAllDocsQueryNode extends QueryNodeImpl {
     return "*:*";
   }
 
+  @Override
   public MatchAllDocsQueryNode cloneTree() throws CloneNotSupportedException {
     MatchAllDocsQueryNode clone = (MatchAllDocsQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/MatchNoDocsQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/MatchNoDocsQueryNode.java
index 582ba8a..f7ce910 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/MatchNoDocsQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/MatchNoDocsQueryNode.java
@@ -30,6 +30,7 @@ public class MatchNoDocsQueryNode extends DeletedQueryNode {
     // empty constructor
   }
 
+  @Override
   public String toString() {
     return "<matchNoDocsQueryNode/>";
   }
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ModifierQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ModifierQueryNode.java
index 9faff8d..829f53f 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ModifierQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ModifierQueryNode.java
@@ -41,6 +41,7 @@ public class ModifierQueryNode extends QueryNodeImpl {
   public enum Modifier {
     MOD_NONE, MOD_NOT, MOD_REQ;
 
+    @Override
     public String toString() {
       switch (this) {
       case MOD_NONE:
@@ -111,6 +112,7 @@ public class ModifierQueryNode extends QueryNodeImpl {
     return this.modifier;
   }
 
+  @Override
   public String toString() {
     return "<modifier operation='" + this.modifier.toString() + "'>" + "\n"
         + getChild().toString() + "\n</modifier>";
@@ -137,6 +139,7 @@ public class ModifierQueryNode extends QueryNodeImpl {
     }
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     ModifierQueryNode clone = (ModifierQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/NoTokenFoundQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/NoTokenFoundQueryNode.java
index 3554c64..057f6af 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/NoTokenFoundQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/NoTokenFoundQueryNode.java
@@ -31,14 +31,17 @@ public class NoTokenFoundQueryNode extends DeletedQueryNode {
     super();
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escaper) {
     return "[NTF]";
   }
 
+  @Override
   public String toString() {
     return "<notokenfound/>";
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     NoTokenFoundQueryNode clone = (NoTokenFoundQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/OpaqueQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/OpaqueQueryNode.java
index 293ec6b..5ca0b72 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/OpaqueQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/OpaqueQueryNode.java
@@ -46,6 +46,7 @@ public class OpaqueQueryNode extends QueryNodeImpl {
 
   }
 
+  @Override
   public String toString() {
     return "<opaque schema='" + this.schema + "' value='" + this.value + "'/>";
   }
@@ -54,6 +55,7 @@ public class OpaqueQueryNode extends QueryNodeImpl {
     return "@" + this.schema + ":'" + this.value + "'";
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     OpaqueQueryNode clone = (OpaqueQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/OrQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/OrQueryNode.java
index e88d37b..e93c18e 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/OrQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/OrQueryNode.java
@@ -43,6 +43,7 @@ public class OrQueryNode extends BooleanQueryNode {
     }
   }
 
+  @Override
   public String toString() {
     if (getChildren() == null || getChildren().size() == 0)
       return "<boolean operation='or'/>";
@@ -57,6 +58,7 @@ public class OrQueryNode extends BooleanQueryNode {
     return sb.toString();
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     if (getChildren() == null || getChildren().size() == 0)
       return "";
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricQueryNode.java
index 4d9a305..8ccebf6 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricQueryNode.java
@@ -30,12 +30,30 @@ public class ParametricQueryNode extends FieldQueryNode {
   private CompareOperator operator;
 
   public enum CompareOperator {
-    LE { public String toString() { return "<="; } },
-    LT { public String toString() { return "<";  } },
-    GE { public String toString() { return ">="; } },
-    GT { public String toString() { return ">";  } },
-    EQ { public String toString() { return "=";  } },
-    NE { public String toString() { return "!="; } };
+    LE { 
+      @Override
+      public String toString() { return "<="; }
+    },
+    LT {
+      @Override
+      public String toString() { return "<";  }
+    },
+    GE {
+      @Override
+      public String toString() { return ">="; }
+    },
+    GT {
+      @Override
+      public String toString() { return ">";  }
+    },
+    EQ {
+      @Override
+      public String toString() { return "=";  }
+    },
+    NE {
+      @Override
+      public String toString() { return "!="; }
+    };
   }
 
   /**
@@ -61,15 +79,18 @@ public class ParametricQueryNode extends FieldQueryNode {
     return getText();
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     return this.field + "" + this.operator.toString() + "\"" + this.text + "\"";
   }
 
+  @Override
   public String toString() {
     return "<parametric field='" + this.field + "' operator='"
         + this.operator.toString() + "' text='" + this.text + "'/>";
   }
 
+  @Override
   public ParametricQueryNode cloneTree() throws CloneNotSupportedException {
     ParametricQueryNode clone = (ParametricQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricRangeQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricRangeQueryNode.java
index 2405c3a..240d601 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricRangeQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricRangeQueryNode.java
@@ -91,6 +91,7 @@ public class ParametricRangeQueryNode extends QueryNodeImpl implements
 
   }
 
+  @Override
   public ParametricRangeQueryNode cloneTree() throws CloneNotSupportedException {
     ParametricRangeQueryNode clone = (ParametricRangeQueryNode) super
         .cloneTree();
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PathQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PathQueryNode.java
index 8a4681c..7364cbd 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PathQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PathQueryNode.java
@@ -70,6 +70,7 @@ public class PathQueryNode extends QueryNodeImpl {
       this.end = end;
     }
 
+    @Override
     public QueryText clone() throws CloneNotSupportedException {
       QueryText clone = (QueryText) super.clone();
       clone.value = this.value;
@@ -99,6 +100,7 @@ public class PathQueryNode extends QueryNodeImpl {
       return end;
     }
 
+    @Override
     public String toString() {
       return value + ", " + begin + ", " + end;
     }
@@ -191,6 +193,7 @@ public class PathQueryNode extends QueryNodeImpl {
     return path.toString();
   }
 
+  @Override
   public String toString() {
     QueryText text = this.values.get(0);
 
@@ -198,6 +201,7 @@ public class PathQueryNode extends QueryNodeImpl {
         + getPathString() + "'/>";
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     PathQueryNode clone = (PathQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PhraseSlopQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PhraseSlopQueryNode.java
index 75f388f..882c29f 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PhraseSlopQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/PhraseSlopQueryNode.java
@@ -66,6 +66,7 @@ public class PhraseSlopQueryNode extends QueryNodeImpl implements FieldableNode
 
   }
 
+  @Override
   public String toString() {
     return "<phraseslop value='" + getValueString() + "'>" + "\n"
         + getChild().toString() + "\n</phraseslop>";
@@ -78,6 +79,7 @@ public class PhraseSlopQueryNode extends QueryNodeImpl implements FieldableNode
         + getValueString();
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     PhraseSlopQueryNode clone = (PhraseSlopQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode.java
index b8e73fd..b100b1a 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode.java
@@ -36,9 +36,18 @@ public class ProximityQueryNode extends BooleanQueryNode {
   private static final long serialVersionUID = 9018220596680832916L;
 
   public enum Type {
-    PARAGRAPH { CharSequence toQueryString() { return "WITHIN PARAGRAPH"; } },
-    SENTENCE  { CharSequence toQueryString() { return "WITHIN SENTENCE";  } },
-    NUMBER    { CharSequence toQueryString() { return "WITHIN";           } };
+    PARAGRAPH {
+      @Override
+      CharSequence toQueryString() { return "WITHIN PARAGRAPH"; } 
+    },
+    SENTENCE  { 
+      @Override
+      CharSequence toQueryString() { return "WITHIN SENTENCE";  }
+    },
+    NUMBER    {
+      @Override
+      CharSequence toQueryString() { return "WITHIN";           }
+    };
 
     abstract CharSequence toQueryString();
   }
@@ -131,6 +140,7 @@ public class ProximityQueryNode extends BooleanQueryNode {
     return this.proximityType;
   }
 
+  @Override
   public String toString() {
     String distanceSTR = ((this.distance == -1) ? ("")
         : (" distance='" + this.distance) + "'");
@@ -150,6 +160,7 @@ public class ProximityQueryNode extends BooleanQueryNode {
     return sb.toString();
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     String withinSTR = this.proximityType.toQueryString()
         + ((this.distance == -1) ? ("") : (" " + this.distance))
@@ -173,6 +184,7 @@ public class ProximityQueryNode extends BooleanQueryNode {
     }
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     ProximityQueryNode clone = (ProximityQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/QueryNodeImpl.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/QueryNodeImpl.java
index ad2bfd2..8de5adc 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/QueryNodeImpl.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/QueryNodeImpl.java
@@ -131,6 +131,7 @@ public abstract class QueryNodeImpl implements QueryNode, Cloneable {
     return clone;
   }
 
+  @Override
   public Object clone() throws CloneNotSupportedException {
     return cloneTree();
   }
@@ -209,6 +210,7 @@ public abstract class QueryNodeImpl implements QueryNode, Cloneable {
    * 
    * @see org.apache.lucene.queryParser.core.nodes.QueryNode#toString()
    */
+  @Override
   public String toString() {
     return super.toString();
   }
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/QuotedFieldQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/QuotedFieldQueryNode.java
index 08d88a3..3daf42c 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/QuotedFieldQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/QuotedFieldQueryNode.java
@@ -42,6 +42,7 @@ public class QuotedFieldQueryNode extends FieldQueryNode {
     super(field, text, begin, end);
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escaper) {
     if (isDefaultField(this.field)) {
       return "\"" + getTermEscapeQuoted(escaper) + "\"";
@@ -50,11 +51,13 @@ public class QuotedFieldQueryNode extends FieldQueryNode {
     }
   }
 
+  @Override
   public String toString() {
     return "<quotedfield start='" + this.begin + "' end='" + this.end
         + "' field='" + this.field + "' term='" + this.text + "'/>";
   }
 
+  @Override
   public QuotedFieldQueryNode cloneTree() throws CloneNotSupportedException {
     QuotedFieldQueryNode clone = (QuotedFieldQueryNode) super.cloneTree();
     // nothing to do here
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/SlopQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/SlopQueryNode.java
index 2b1a6a2..6b83580 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/SlopQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/SlopQueryNode.java
@@ -73,6 +73,7 @@ public class SlopQueryNode extends QueryNodeImpl implements FieldableNode {
 
   }
 
+  @Override
   public String toString() {
     return "<slop value='" + getValueString() + "'>" + "\n"
         + getChild().toString() + "\n</slop>";
@@ -85,6 +86,7 @@ public class SlopQueryNode extends QueryNodeImpl implements FieldableNode {
         + getValueString();
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     SlopQueryNode clone = (SlopQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/TokenizedPhraseQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/TokenizedPhraseQueryNode.java
index 36cd1ee..d90c17e 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/TokenizedPhraseQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/TokenizedPhraseQueryNode.java
@@ -35,6 +35,7 @@ public class TokenizedPhraseQueryNode extends QueryNodeImpl implements
     allocate();
   }
 
+  @Override
   public String toString() {
     if (getChildren() == null || getChildren().size() == 0)
       return "<tokenizedphrase/>";
@@ -63,6 +64,7 @@ public class TokenizedPhraseQueryNode extends QueryNodeImpl implements
     return "[TP[" + sb.toString() + "]]";
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     TokenizedPhraseQueryNode clone = (TokenizedPhraseQueryNode) super
         .cloneTree();
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/processors/NoChildOptimizationQueryNodeProcessor.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/processors/NoChildOptimizationQueryNodeProcessor.java
index a34b9ab..c08a7a8 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/processors/NoChildOptimizationQueryNodeProcessor.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/processors/NoChildOptimizationQueryNodeProcessor.java
@@ -46,6 +46,7 @@ public class NoChildOptimizationQueryNodeProcessor extends
     // empty constructor
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof BooleanQueryNode || node instanceof BoostQueryNode
@@ -74,12 +75,14 @@ public class NoChildOptimizationQueryNodeProcessor extends
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/processors/RemoveDeletedQueryNodesProcessor.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/processors/RemoveDeletedQueryNodesProcessor.java
index e19df6b..dcb3335 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/processors/RemoveDeletedQueryNodesProcessor.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/processors/RemoveDeletedQueryNodesProcessor.java
@@ -37,6 +37,7 @@ public class RemoveDeletedQueryNodesProcessor extends QueryNodeProcessorImpl {
     // empty constructor
   }
 
+  @Override
   public QueryNode process(QueryNode queryTree) throws QueryNodeException {
     queryTree = super.process(queryTree);
 
@@ -51,6 +52,7 @@ public class RemoveDeletedQueryNodesProcessor extends QueryNodeProcessorImpl {
 
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (!node.isLeaf()) {
@@ -85,6 +87,7 @@ public class RemoveDeletedQueryNodesProcessor extends QueryNodeProcessorImpl {
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
@@ -100,6 +103,7 @@ public class RemoveDeletedQueryNodesProcessor extends QueryNodeProcessorImpl {
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/util/UnescapedCharSequence.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/util/UnescapedCharSequence.java
index 82b1754..1c64b44 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/util/UnescapedCharSequence.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/util/UnescapedCharSequence.java
@@ -85,6 +85,7 @@ public final class UnescapedCharSequence implements CharSequence {
         newLength);
   }
 
+  @Override
   public String toString() {
     return new String(this.chars);
   }
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser.java
index e737dc3..30229f2 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser.java
@@ -150,6 +150,7 @@ public class StandardQueryParser extends QueryParserHelper {
     this.setAnalyzer(analyzer);
   }
   
+  @Override
   public String toString(){
     return "<StandardQueryParser config=\"" + this.getQueryConfigHandler() + "\"/>";
   }
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/StandardQueryTreeBuilder.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/StandardQueryTreeBuilder.java
index ba1dfc4..d462aec 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/StandardQueryTreeBuilder.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/StandardQueryTreeBuilder.java
@@ -71,6 +71,7 @@ public class StandardQueryTreeBuilder extends QueryTreeBuilder implements
 
   }
 
+  @Override
   public Query build(QueryNode queryNode) throws QueryNodeException {
     return (Query) super.build(queryNode);
   }
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/AllowLeadingWildcardAttributeImpl.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/AllowLeadingWildcardAttributeImpl.java
index 85bd521..c4f167b 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/AllowLeadingWildcardAttributeImpl.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/AllowLeadingWildcardAttributeImpl.java
@@ -43,14 +43,17 @@ public class AllowLeadingWildcardAttributeImpl extends AttributeImpl
     return this.allowLeadingWildcard;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof AllowLeadingWildcardAttributeImpl
@@ -64,10 +67,12 @@ public class AllowLeadingWildcardAttributeImpl extends AttributeImpl
 
   }
 
+  @Override
   public int hashCode() {
     return this.allowLeadingWildcard ? -1 : Integer.MAX_VALUE;
   }
 
+  @Override
   public String toString() {
     return "<allowLeadingWildcard allowLeadingWildcard="
         + this.allowLeadingWildcard + "/>";
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/AnalyzerAttributeImpl.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/AnalyzerAttributeImpl.java
index 761e77e..a9185bb 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/AnalyzerAttributeImpl.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/AnalyzerAttributeImpl.java
@@ -49,14 +49,17 @@ public class AnalyzerAttributeImpl extends AttributeImpl
     return this.analyzer;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof AnalyzerAttributeImpl) {
@@ -76,10 +79,12 @@ public class AnalyzerAttributeImpl extends AttributeImpl
 
   }
 
+  @Override
   public int hashCode() {
     return (this.analyzer == null) ? 0 : this.analyzer.hashCode();
   }
 
+  @Override
   public String toString() {
     return "<analyzerAttribute analyzer='" + this.analyzer + "'/>";
   }
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/BoostAttributeImpl.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/BoostAttributeImpl.java
index b77a052..c7c2f80 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/BoostAttributeImpl.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/BoostAttributeImpl.java
@@ -49,14 +49,17 @@ public class BoostAttributeImpl extends AttributeImpl
     return this.boost;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof BoostAttributeImpl && other != null
@@ -70,10 +73,12 @@ public class BoostAttributeImpl extends AttributeImpl
 
   }
 
+  @Override
   public int hashCode() {
     return Float.valueOf(this.boost).hashCode();
   }
 
+  @Override
   public String toString() {
     return "<boostAttribute boost=" + this.boost + "/>";
   }
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DateResolutionAttributeImpl.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DateResolutionAttributeImpl.java
index f869def..621d907 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DateResolutionAttributeImpl.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DateResolutionAttributeImpl.java
@@ -49,14 +49,17 @@ public class DateResolutionAttributeImpl extends AttributeImpl
     return this.dateResolution;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof DateResolutionAttributeImpl) {
@@ -75,10 +78,12 @@ public class DateResolutionAttributeImpl extends AttributeImpl
 
   }
 
+  @Override
   public int hashCode() {
     return (this.dateResolution == null) ? 0 : this.dateResolution.hashCode();
   }
 
+  @Override
   public String toString() {
     return "<dateResolutionAttribute dateResolution='" + this.dateResolution
         + "'/>";
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DefaultOperatorAttributeImpl.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DefaultOperatorAttributeImpl.java
index f31104e..e99022d 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DefaultOperatorAttributeImpl.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DefaultOperatorAttributeImpl.java
@@ -54,14 +54,17 @@ public class DefaultOperatorAttributeImpl extends AttributeImpl
     return this.operator;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof DefaultOperatorAttributeImpl) {
@@ -78,10 +81,12 @@ public class DefaultOperatorAttributeImpl extends AttributeImpl
 
   }
 
+  @Override
   public int hashCode() {
     return getOperator().hashCode() * 31;
   }
 
+  @Override
   public String toString() {
     return "<defaultOperatorAttribute operator=" + this.operator.name() + "/>";
   }
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DefaultPhraseSlopAttributeImpl.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DefaultPhraseSlopAttributeImpl.java
index cb974c0..fdc24a8 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DefaultPhraseSlopAttributeImpl.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/DefaultPhraseSlopAttributeImpl.java
@@ -48,14 +48,17 @@ public class DefaultPhraseSlopAttributeImpl extends AttributeImpl
     return this.defaultPhraseSlop;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof DefaultPhraseSlopAttributeImpl
@@ -70,10 +73,12 @@ public class DefaultPhraseSlopAttributeImpl extends AttributeImpl
 
   }
 
+  @Override
   public int hashCode() {
     return Integer.valueOf(this.defaultPhraseSlop).hashCode();
   }
 
+  @Override
   public String toString() {
     return "<defaultPhraseSlop defaultPhraseSlop=" + this.defaultPhraseSlop
         + "/>";
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldBoostMapAttributeImpl.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldBoostMapAttributeImpl.java
index c4d797f..df04e63 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldBoostMapAttributeImpl.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldBoostMapAttributeImpl.java
@@ -53,14 +53,17 @@ public class FieldBoostMapAttributeImpl extends AttributeImpl
     return this.boosts;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof FieldBoostMapAttributeImpl && other != null
@@ -74,6 +77,7 @@ public class FieldBoostMapAttributeImpl extends AttributeImpl
 
   }
 
+  @Override
   public int hashCode() {
     final int prime = 97;
     if (this.boosts != null) 
@@ -82,6 +86,7 @@ public class FieldBoostMapAttributeImpl extends AttributeImpl
       return Float.valueOf(prime).hashCode();
   }
 
+  @Override
   public String toString() {
     return "<fieldBoostMapAttribute map=" + this.boosts + "/>";
   }
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldDateResolutionMapAttributeImpl.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldDateResolutionMapAttributeImpl.java
index 1247c86..76a2a78 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldDateResolutionMapAttributeImpl.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldDateResolutionMapAttributeImpl.java
@@ -50,14 +50,17 @@ public class FieldDateResolutionMapAttributeImpl extends AttributeImpl
     return this.dateRes;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof FieldDateResolutionMapAttributeImpl && other != null
@@ -71,6 +74,7 @@ public class FieldDateResolutionMapAttributeImpl extends AttributeImpl
 
   }
 
+  @Override
   public int hashCode() {
     final int prime = 97;
     if (this.dateRes != null) 
@@ -79,6 +83,7 @@ public class FieldDateResolutionMapAttributeImpl extends AttributeImpl
       return Float.valueOf(prime).hashCode();
   }
 
+  @Override
   public String toString() {
     return "<fieldDateResolutionMapAttribute map=" + this.dateRes + "/>";
   }
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FuzzyAttributeImpl.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FuzzyAttributeImpl.java
index c6e80b6..5bd1602 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FuzzyAttributeImpl.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FuzzyAttributeImpl.java
@@ -59,14 +59,17 @@ public class FuzzyAttributeImpl extends AttributeImpl
     return this.minSimilarity;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof FuzzyAttributeImpl && other != null
@@ -80,10 +83,12 @@ public class FuzzyAttributeImpl extends AttributeImpl
 
   }
 
+  @Override
   public int hashCode() {
     return Integer.valueOf(this.prefixLength).hashCode();
   }
 
+  @Override
   public String toString() {
     return "<fuzzyAttribute prefixLength=" + this.prefixLength + "/>";
   }
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/LocaleAttributeImpl.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/LocaleAttributeImpl.java
index 1f9c608..495ab2a 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/LocaleAttributeImpl.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/LocaleAttributeImpl.java
@@ -49,14 +49,17 @@ public class LocaleAttributeImpl extends AttributeImpl
     return this.locale;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof LocaleAttributeImpl) {
@@ -76,10 +79,12 @@ public class LocaleAttributeImpl extends AttributeImpl
 
   }
 
+  @Override
   public int hashCode() {
     return (this.locale == null) ? 0 : this.locale.hashCode();
   }
 
+  @Override
   public String toString() {
     return "<localeAttribute locale=" + this.locale + "/>";
   }
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/LowercaseExpandedTermsAttributeImpl.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/LowercaseExpandedTermsAttributeImpl.java
index 2961488..a18c8e2 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/LowercaseExpandedTermsAttributeImpl.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/LowercaseExpandedTermsAttributeImpl.java
@@ -49,14 +49,17 @@ public class LowercaseExpandedTermsAttributeImpl extends AttributeImpl
     return this.lowercaseExpandedTerms;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof LowercaseExpandedTermsAttributeImpl
@@ -70,10 +73,12 @@ public class LowercaseExpandedTermsAttributeImpl extends AttributeImpl
 
   }
 
+  @Override
   public int hashCode() {
     return this.lowercaseExpandedTerms ? -1 : Integer.MAX_VALUE;
   }
 
+  @Override
   public String toString() {
     return "<lowercaseExpandedTerms lowercaseExpandedTerms="
         + this.lowercaseExpandedTerms + "/>";
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/MultiFieldAttributeImpl.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/MultiFieldAttributeImpl.java
index 1d0b391..7890a01 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/MultiFieldAttributeImpl.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/MultiFieldAttributeImpl.java
@@ -49,14 +49,17 @@ public class MultiFieldAttributeImpl extends AttributeImpl
     return this.fields;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof MultiFieldAttributeImpl) {
@@ -70,10 +73,12 @@ public class MultiFieldAttributeImpl extends AttributeImpl
 
   }
 
+  @Override
   public int hashCode() {
     return Arrays.hashCode(this.fields);
   }
 
+  @Override
   public String toString() {
     return "<fieldsAttribute fields=" + Arrays.toString(this.fields) + "/>";
   }
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/MultiTermRewriteMethodAttributeImpl.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/MultiTermRewriteMethodAttributeImpl.java
index cf79efd..a6dda51 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/MultiTermRewriteMethodAttributeImpl.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/MultiTermRewriteMethodAttributeImpl.java
@@ -50,14 +50,17 @@ public class MultiTermRewriteMethodAttributeImpl extends AttributeImpl
     return multiTermRewriteMethod;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof MultiTermRewriteMethodAttributeImpl
@@ -71,10 +74,12 @@ public class MultiTermRewriteMethodAttributeImpl extends AttributeImpl
 
   }
 
+  @Override
   public int hashCode() {
     return multiTermRewriteMethod.hashCode();
   }
 
+  @Override
   public String toString() {
     return "<multiTermRewriteMethod multiTermRewriteMethod="
         + this.multiTermRewriteMethod + "/>";
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/PositionIncrementsAttributeImpl.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/PositionIncrementsAttributeImpl.java
index 2682808..495b931 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/PositionIncrementsAttributeImpl.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/PositionIncrementsAttributeImpl.java
@@ -47,14 +47,17 @@ public class PositionIncrementsAttributeImpl extends AttributeImpl
     return this.positionIncrementsEnabled;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof PositionIncrementsAttributeImpl
@@ -69,10 +72,12 @@ public class PositionIncrementsAttributeImpl extends AttributeImpl
 
   }
 
+  @Override
   public int hashCode() {
     return this.positionIncrementsEnabled ? -1 : Integer.MAX_VALUE;
   }
 
+  @Override
   public String toString() {
     return "<positionIncrements positionIncrementsEnabled="
         + this.positionIncrementsEnabled + "/>";
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/RangeCollatorAttributeImpl.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/RangeCollatorAttributeImpl.java
index cd4f48a..70ac5e6 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/RangeCollatorAttributeImpl.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/RangeCollatorAttributeImpl.java
@@ -51,14 +51,17 @@ public class RangeCollatorAttributeImpl extends AttributeImpl
     return this.rangeCollator;
   }
 
+  @Override
   public void clear() {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public boolean equals(Object other) {
 
     if (other instanceof RangeCollatorAttributeImpl) {
@@ -77,10 +80,12 @@ public class RangeCollatorAttributeImpl extends AttributeImpl
 
   }
 
+  @Override
   public int hashCode() {
     return (this.rangeCollator == null) ? 0 : this.rangeCollator.hashCode();
   }
 
+  @Override
   public String toString() {
     return "<rangeCollatorAttribute rangeCollator='" + this.rangeCollator
         + "'/>";
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/MultiPhraseQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/MultiPhraseQueryNode.java
index 3518e96..38c5f3d 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/MultiPhraseQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/MultiPhraseQueryNode.java
@@ -41,6 +41,7 @@ public class MultiPhraseQueryNode extends QueryNodeImpl implements
 
   }
 
+  @Override
   public String toString() {
     if (getChildren() == null || getChildren().size() == 0)
       return "<multiPhrase/>";
@@ -68,6 +69,7 @@ public class MultiPhraseQueryNode extends QueryNodeImpl implements
     return "[MTP[" + sb.toString() + "]]";
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     MultiPhraseQueryNode clone = (MultiPhraseQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/PrefixWildcardQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/PrefixWildcardQueryNode.java
index 17ce946..b1cc262 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/PrefixWildcardQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/PrefixWildcardQueryNode.java
@@ -48,11 +48,13 @@ public class PrefixWildcardQueryNode extends WildcardQueryNode {
     this(fqn.getField(), fqn.getText(), fqn.getBegin(), fqn.getEnd());
   }
 
+  @Override
   public String toString() {
     return "<prefixWildcard field='" + this.field + "' term='" + this.text
         + "'/>";
   }
 
+  @Override
   public PrefixWildcardQueryNode cloneTree() throws CloneNotSupportedException {
     PrefixWildcardQueryNode clone = (PrefixWildcardQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/RangeQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/RangeQueryNode.java
index aa9a177..62a52d3 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/RangeQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/RangeQueryNode.java
@@ -49,6 +49,7 @@ public class RangeQueryNode extends ParametricRangeQueryNode {
 
   }
 
+  @Override
   public String toString() {
     StringBuilder sb = new StringBuilder("<range>\n\t");
     sb.append(this.getUpperBound()).append("\n\t");
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/WildcardQueryNode.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/WildcardQueryNode.java
index c73eb9b..525cf96 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/WildcardQueryNode.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/nodes/WildcardQueryNode.java
@@ -46,6 +46,7 @@ public class WildcardQueryNode extends FieldQueryNode {
     this(fqn.getField(), fqn.getText(), fqn.getBegin(), fqn.getEnd());
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escaper) {
     if (isDefaultField(this.field)) {
       return getTermEscaped(escaper);
@@ -54,10 +55,12 @@ public class WildcardQueryNode extends FieldQueryNode {
     }
   }
 
+  @Override
   public String toString() {
     return "<wildcard field='" + this.field + "' term='" + this.text + "'/>";
   }
 
+  @Override
   public WildcardQueryNode cloneTree() throws CloneNotSupportedException {
     WildcardQueryNode clone = (WildcardQueryNode) super.cloneTree();
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor.java
index a3075e0..9226c8d 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor.java
@@ -45,6 +45,7 @@ public class AllowLeadingWildcardProcessor extends QueryNodeProcessorImpl {
     // empty constructor
   }
 
+  @Override
   public QueryNode process(QueryNode queryTree) throws QueryNodeException {
 
     if (getQueryConfigHandler().hasAttribute(AllowLeadingWildcardAttribute.class)) {
@@ -59,6 +60,7 @@ public class AllowLeadingWildcardProcessor extends QueryNodeProcessorImpl {
     return queryTree;
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof WildcardQueryNode) {
@@ -85,12 +87,14 @@ public class AllowLeadingWildcardProcessor extends QueryNodeProcessorImpl {
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor.java
index 14d28a7..7be5c9a 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor.java
@@ -76,6 +76,7 @@ public class AnalyzerQueryNodeProcessor extends QueryNodeProcessorImpl {
     // empty constructor
   }
 
+  @Override
   public QueryNode process(QueryNode queryTree) throws QueryNodeException {
 
     if (getQueryConfigHandler().hasAttribute(AnalyzerAttribute.class)) {
@@ -323,12 +324,14 @@ public class AnalyzerQueryNodeProcessor extends QueryNodeProcessorImpl {
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor.java
index 8580d6c..beb3c64 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor.java
@@ -42,6 +42,7 @@ public class BooleanSingleChildOptimizationQueryNodeProcessor extends
     // empty constructor
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof BooleanQueryNode) {
@@ -72,12 +73,14 @@ public class BooleanSingleChildOptimizationQueryNodeProcessor extends
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/DefaultPhraseSlopQueryNodeProcessor.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/DefaultPhraseSlopQueryNodeProcessor.java
index 7834eaa..a36fe71 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/DefaultPhraseSlopQueryNodeProcessor.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/DefaultPhraseSlopQueryNodeProcessor.java
@@ -49,6 +49,7 @@ public class DefaultPhraseSlopQueryNodeProcessor extends QueryNodeProcessorImpl
     // empty constructor
   }
 
+  @Override
   public QueryNode process(QueryNode queryTree) throws QueryNodeException {
     QueryConfigHandler queryConfig = getQueryConfigHandler();
 
@@ -68,6 +69,7 @@ public class DefaultPhraseSlopQueryNodeProcessor extends QueryNodeProcessorImpl
 
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof TokenizedPhraseQueryNode
@@ -81,6 +83,7 @@ public class DefaultPhraseSlopQueryNodeProcessor extends QueryNodeProcessorImpl
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof SlopQueryNode) {
@@ -92,6 +95,7 @@ public class DefaultPhraseSlopQueryNodeProcessor extends QueryNodeProcessorImpl
 
   }
 
+  @Override
   protected void processChildren(QueryNode queryTree) throws QueryNodeException {
 
     if (this.processChildren) {
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/LowercaseExpandedTermsQueryNodeProcessor.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/LowercaseExpandedTermsQueryNodeProcessor.java
index ff4623c..843b31a 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/LowercaseExpandedTermsQueryNodeProcessor.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/LowercaseExpandedTermsQueryNodeProcessor.java
@@ -47,6 +47,7 @@ public class LowercaseExpandedTermsQueryNodeProcessor extends
     // empty constructor
   }
 
+  @Override
   public QueryNode process(QueryNode queryTree) throws QueryNodeException {
 
     if (getQueryConfigHandler().hasAttribute(
@@ -65,6 +66,7 @@ public class LowercaseExpandedTermsQueryNodeProcessor extends
 
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof WildcardQueryNode || node instanceof FuzzyQueryNode
@@ -78,12 +80,14 @@ public class LowercaseExpandedTermsQueryNodeProcessor extends
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MatchAllDocsQueryNodeProcessor.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MatchAllDocsQueryNodeProcessor.java
index a418ac0..2927a4a 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MatchAllDocsQueryNodeProcessor.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MatchAllDocsQueryNodeProcessor.java
@@ -40,6 +40,7 @@ public class MatchAllDocsQueryNodeProcessor extends QueryNodeProcessorImpl {
     // empty constructor
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof FieldQueryNode) {
@@ -58,12 +59,14 @@ public class MatchAllDocsQueryNodeProcessor extends QueryNodeProcessorImpl {
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiFieldQueryNodeProcessor.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiFieldQueryNodeProcessor.java
index 4efa98e..6f51808 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiFieldQueryNodeProcessor.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiFieldQueryNodeProcessor.java
@@ -51,12 +51,14 @@ public class MultiFieldQueryNodeProcessor extends QueryNodeProcessorImpl {
     // empty constructor
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected void processChildren(QueryNode queryTree) throws QueryNodeException {
 
     if (this.processChildren) {
@@ -68,6 +70,7 @@ public class MultiFieldQueryNodeProcessor extends QueryNodeProcessorImpl {
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof FieldableNode) {
@@ -121,6 +124,7 @@ public class MultiFieldQueryNodeProcessor extends QueryNodeProcessorImpl {
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor.java
index af10caf..2e3c598 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor.java
@@ -34,6 +34,7 @@ import org.apache.lucene.search.MultiTermQuery;
  */
 public class MultiTermRewriteMethodProcessor extends QueryNodeProcessorImpl {
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) {
 
     // set setMultiTermRewriteMethod for WildcardQueryNode and
@@ -61,10 +62,12 @@ public class MultiTermRewriteMethodProcessor extends QueryNodeProcessorImpl {
     return node;
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) {
     return node;
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children) {
     return children;
   }
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor.java
index 2f66c50..5207ed7 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor.java
@@ -72,6 +72,7 @@ public class ParametricRangeQueryNodeProcessor extends QueryNodeProcessorImpl {
     // empty constructor
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof ParametricRangeQueryNode) {
@@ -165,12 +166,14 @@ public class ParametricRangeQueryNodeProcessor extends QueryNodeProcessorImpl {
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/PhraseSlopQueryNodeProcessor.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/PhraseSlopQueryNodeProcessor.java
index b3c0504..148af47 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/PhraseSlopQueryNodeProcessor.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/PhraseSlopQueryNodeProcessor.java
@@ -39,6 +39,7 @@ public class PhraseSlopQueryNodeProcessor extends QueryNodeProcessorImpl {
     // empty constructor
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     if (node instanceof SlopQueryNode) {
@@ -55,12 +56,14 @@ public class PhraseSlopQueryNodeProcessor extends QueryNodeProcessorImpl {
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor.java
index c692201..0f182a9 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor.java
@@ -48,6 +48,7 @@ public class RemoveEmptyNonLeafQueryNodeProcessor extends
     // empty constructor
   }
 
+  @Override
   public QueryNode process(QueryNode queryTree) throws QueryNodeException {
     queryTree = super.process(queryTree);
 
@@ -65,18 +66,21 @@ public class RemoveEmptyNonLeafQueryNodeProcessor extends
 
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
diff --git a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor.java b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor.java
index 2bef4bd..9f8ef3a 100644
--- a/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor.java
+++ b/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor.java
@@ -48,6 +48,7 @@ public class WildcardQueryNodeProcessor extends QueryNodeProcessorImpl {
     // empty constructor
   }
 
+  @Override
   protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
 
     // the old Lucene Parser ignores FuzzyQueryNode that are also PrefixWildcardQueryNode or WildcardQueryNode
@@ -120,12 +121,14 @@ public class WildcardQueryNodeProcessor extends QueryNodeProcessorImpl {
     return false;
   }
 
+  @Override
   protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {
 
     return node;
 
   }
 
+  @Override
   protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
       throws QueryNodeException {
 
diff --git a/contrib/queryparser/src/test/org/apache/lucene/queryParser/spans/SpansQueryTreeBuilder.java b/contrib/queryparser/src/test/org/apache/lucene/queryParser/spans/SpansQueryTreeBuilder.java
index 5b80705..8d0f7d6 100644
--- a/contrib/queryparser/src/test/org/apache/lucene/queryParser/spans/SpansQueryTreeBuilder.java
+++ b/contrib/queryparser/src/test/org/apache/lucene/queryParser/spans/SpansQueryTreeBuilder.java
@@ -44,6 +44,7 @@ public class SpansQueryTreeBuilder extends QueryTreeBuilder implements
 
   }
 
+  @Override
   public SpanQuery build(QueryNode queryTree) throws QueryNodeException {
     return (SpanQuery) super.build(queryTree);
   }
diff --git a/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper.java b/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper.java
index 45633cb..e27ac76 100644
--- a/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper.java
+++ b/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper.java
@@ -154,6 +154,7 @@ public class TestMultiAnalyzerQPHelper extends LuceneTestCase {
     public MultiAnalyzer() {
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new StandardTokenizer(Version.LUCENE_CURRENT, reader);
       result = new TestFilter(result);
@@ -182,6 +183,7 @@ public class TestMultiAnalyzerQPHelper extends LuceneTestCase {
 
     }
 
+    @Override
     public final boolean incrementToken() throws java.io.IOException {
       if (multiToken > 0) {
         termAtt.setTermBuffer("multi" + (multiToken + 1));
@@ -222,6 +224,7 @@ public class TestMultiAnalyzerQPHelper extends LuceneTestCase {
     public PosIncrementAnalyzer() {
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new StandardTokenizer(Version.LUCENE_CURRENT, reader);
       result = new TestPosIncrementFilter(result);
@@ -241,6 +244,7 @@ public class TestMultiAnalyzerQPHelper extends LuceneTestCase {
       posIncrAtt = addAttribute(PositionIncrementAttribute.class);
     }
 
+    @Override
     public final boolean incrementToken() throws java.io.IOException {
       while (input.incrementToken()) {
         if (termAtt.term().equals("the")) {
diff --git a/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerWrapper.java b/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerWrapper.java
index 51f890b..c953e63 100644
--- a/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerWrapper.java
+++ b/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerWrapper.java
@@ -148,6 +148,7 @@ public class TestMultiAnalyzerWrapper extends LuceneTestCase {
     public MultiAnalyzer() {
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new StandardTokenizer(Version.LUCENE_CURRENT, reader);
       result = new TestFilter(result);
@@ -176,6 +177,7 @@ public class TestMultiAnalyzerWrapper extends LuceneTestCase {
 
     }
 
+    @Override
     public final boolean incrementToken() throws java.io.IOException {
       if (multiToken > 0) {
         termAtt.setTermBuffer("multi" + (multiToken + 1));
@@ -216,6 +218,7 @@ public class TestMultiAnalyzerWrapper extends LuceneTestCase {
     public PosIncrementAnalyzer() {
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new StandardTokenizer(Version.LUCENE_CURRENT, reader);
       result = new TestPosIncrementFilter(result);
@@ -235,6 +238,7 @@ public class TestMultiAnalyzerWrapper extends LuceneTestCase {
       posIncrAtt = addAttribute(PositionIncrementAttribute.class);
     }
 
+    @Override
     public final boolean incrementToken() throws java.io.IOException {
       while (input.incrementToken()) {
         if (termAtt.term().equals("the")) {
diff --git a/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper.java b/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper.java
index 0537f02..a37d3e0 100644
--- a/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper.java
+++ b/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper.java
@@ -350,6 +350,7 @@ public class TestMultiFieldQPHelper extends LuceneTestCase {
     public AnalyzerReturningNull() {
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       if ("f1".equals(fieldName)) {
         return new EmptyTokenStream();
@@ -359,6 +360,7 @@ public class TestMultiFieldQPHelper extends LuceneTestCase {
     }
 
     private static class EmptyTokenStream extends TokenStream {
+      @Override
       public boolean incrementToken() {
         return false;
       }
diff --git a/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper.java b/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper.java
index 8cc0633..9166580 100644
--- a/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper.java
+++ b/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper.java
@@ -348,6 +348,7 @@ public class TestMultiFieldQueryParserWrapper extends LuceneTestCase {
     public AnalyzerReturningNull() {
     }
 
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       if ("f1".equals(fieldName)) {
         return new EmptyTokenStream();
@@ -357,6 +358,7 @@ public class TestMultiFieldQueryParserWrapper extends LuceneTestCase {
     }
 
     private static class EmptyTokenStream extends TokenStream {
+      @Override
       public boolean incrementToken() {
         return false;
       }
diff --git a/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.java b/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.java
index 05ed226..746e65d 100644
--- a/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.java
+++ b/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.java
@@ -115,6 +115,7 @@ public class TestQPHelper extends LocalizedTestCase {
     boolean inPhrase = false;
     int savedStart = 0, savedEnd = 0;
 
+    @Override
     public boolean incrementToken() throws IOException {
       if (inPhrase) {
         inPhrase = false;
@@ -140,6 +141,7 @@ public class TestQPHelper extends LocalizedTestCase {
   public static class QPTestAnalyzer extends Analyzer {
 
     /** Filters LowerCaseTokenizer with StopFilter. */
+    @Override
     public final TokenStream tokenStream(String fieldName, Reader reader) {
       return new QPTestFilter(new LowerCaseTokenizer(reader));
     }
@@ -156,6 +158,7 @@ public class TestQPHelper extends LocalizedTestCase {
     private static class QPTestParserQueryNodeProcessor extends
         QueryNodeProcessorImpl {
 
+      @Override
       protected QueryNode postProcessNode(QueryNode node)
           throws QueryNodeException {
 
@@ -163,6 +166,7 @@ public class TestQPHelper extends LocalizedTestCase {
 
       }
 
+      @Override
       protected QueryNode preProcessNode(QueryNode node)
           throws QueryNodeException {
 
@@ -177,6 +181,7 @@ public class TestQPHelper extends LocalizedTestCase {
 
       }
 
+      @Override
       protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
           throws QueryNodeException {
 
@@ -190,6 +195,7 @@ public class TestQPHelper extends LocalizedTestCase {
 
   private int originalMaxClauses;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     originalMaxClauses = BooleanQuery.getMaxClauseCount();
@@ -1145,6 +1151,7 @@ public class TestQPHelper extends LocalizedTestCase {
     iw.addDocument(d);
   }
 
+  @Override
   public void tearDown() throws Exception {
     super.tearDown();
     BooleanQuery.setMaxClauseCount(originalMaxClauses);
@@ -1154,6 +1161,7 @@ public class TestQPHelper extends LocalizedTestCase {
     private int upto = 0;
     final PositionIncrementAttribute posIncr = addAttribute(PositionIncrementAttribute.class);
     final TermAttribute term = addAttribute(TermAttribute.class);
+    @Override
     public boolean incrementToken() {
       if (upto == 4) {
         return false;
@@ -1177,6 +1185,7 @@ public class TestQPHelper extends LocalizedTestCase {
   }
 
   private class CannedAnalyzer extends Analyzer {
+    @Override
     public TokenStream tokenStream(String ignored, Reader alsoIgnored) {
       return new CannedTokenStream();
     }
diff --git a/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper.java b/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper.java
index 7e63df7..b78e8a1 100644
--- a/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper.java
+++ b/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper.java
@@ -110,6 +110,7 @@ public class TestQueryParserWrapper extends LocalizedTestCase {
     boolean inPhrase = false;
     int savedStart = 0, savedEnd = 0;
 
+    @Override
     public boolean incrementToken() throws IOException {
       if (inPhrase) {
         inPhrase = false;
@@ -135,6 +136,7 @@ public class TestQueryParserWrapper extends LocalizedTestCase {
   public static class QPTestAnalyzer extends Analyzer {
 
     /** Filters LowerCaseTokenizer with StopFilter. */
+    @Override
     public final TokenStream tokenStream(String fieldName, Reader reader) {
       return new QPTestFilter(new LowerCaseTokenizer(reader));
     }
@@ -154,11 +156,13 @@ public class TestQueryParserWrapper extends LocalizedTestCase {
 
     }
 
+    @Override
     protected Query getFuzzyQuery(String field, String termStr,
         float minSimilarity) throws ParseException {
       throw new ParseException("Fuzzy queries not allowed");
     }
 
+    @Override
     protected Query getWildcardQuery(String field, String termStr)
         throws ParseException {
       throw new ParseException("Wildcard queries not allowed");
@@ -167,6 +171,7 @@ public class TestQueryParserWrapper extends LocalizedTestCase {
     private static class QPTestParserQueryNodeProcessor extends
         QueryNodeProcessorImpl {
 
+      @Override
       protected QueryNode postProcessNode(QueryNode node)
           throws QueryNodeException {
 
@@ -174,6 +179,7 @@ public class TestQueryParserWrapper extends LocalizedTestCase {
 
       }
 
+      @Override
       protected QueryNode preProcessNode(QueryNode node)
           throws QueryNodeException {
 
@@ -188,6 +194,7 @@ public class TestQueryParserWrapper extends LocalizedTestCase {
 
       }
 
+      @Override
       protected List<QueryNode> setChildrenOrder(List<QueryNode> children)
           throws QueryNodeException {
 
@@ -201,6 +208,7 @@ public class TestQueryParserWrapper extends LocalizedTestCase {
 
   private int originalMaxClauses;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     originalMaxClauses = BooleanQuery.getMaxClauseCount();
@@ -1115,6 +1123,7 @@ public class TestQueryParserWrapper extends LocalizedTestCase {
     iw.addDocument(d);
   }
 
+  @Override
   public void tearDown() throws Exception {
     super.tearDown();
     BooleanQuery.setMaxClauseCount(originalMaxClauses);
diff --git a/contrib/regex/src/java/org/apache/lucene/search/regex/JakartaRegexpCapabilities.java b/contrib/regex/src/java/org/apache/lucene/search/regex/JakartaRegexpCapabilities.java
index 830b6d4..9c69bb9 100644
--- a/contrib/regex/src/java/org/apache/lucene/search/regex/JakartaRegexpCapabilities.java
+++ b/contrib/regex/src/java/org/apache/lucene/search/regex/JakartaRegexpCapabilities.java
@@ -72,6 +72,7 @@ public class JakartaRegexpCapabilities implements RegexCapabilities {
     return prefix == null ? null : new String(prefix);
   }
 
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (o == null || getClass() != o.getClass()) return false;
@@ -83,6 +84,7 @@ public class JakartaRegexpCapabilities implements RegexCapabilities {
     return true;
   }
 
+  @Override
   public int hashCode() {
     return (regexp != null ? regexp.hashCode() : 0);
   }
diff --git a/contrib/regex/src/java/org/apache/lucene/search/regex/JavaUtilRegexCapabilities.java b/contrib/regex/src/java/org/apache/lucene/search/regex/JavaUtilRegexCapabilities.java
index 8121cf8..9bb32b7 100644
--- a/contrib/regex/src/java/org/apache/lucene/search/regex/JavaUtilRegexCapabilities.java
+++ b/contrib/regex/src/java/org/apache/lucene/search/regex/JavaUtilRegexCapabilities.java
@@ -78,6 +78,7 @@ public class JavaUtilRegexCapabilities implements RegexCapabilities {
     return null;
   }
 
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (o == null || getClass() != o.getClass()) return false;
@@ -89,6 +90,7 @@ public class JavaUtilRegexCapabilities implements RegexCapabilities {
     return true;
   }
 
+  @Override
   public int hashCode() {
     return (pattern != null ? pattern.hashCode() : 0);
   }
diff --git a/contrib/regex/src/java/org/apache/lucene/search/regex/RegexQuery.java b/contrib/regex/src/java/org/apache/lucene/search/regex/RegexQuery.java
index fd2ff9b..9562d5a 100644
--- a/contrib/regex/src/java/org/apache/lucene/search/regex/RegexQuery.java
+++ b/contrib/regex/src/java/org/apache/lucene/search/regex/RegexQuery.java
@@ -58,10 +58,12 @@ public class RegexQuery extends MultiTermQuery implements RegexQueryCapable {
     return regexImpl;
   }
 
+  @Override
   protected FilteredTermEnum getEnum(IndexReader reader) throws IOException {
     return new RegexTermEnum(reader, term, regexImpl);
   }
 
+  @Override
   public String toString(String field) {
     StringBuilder buffer = new StringBuilder();
     if (!term.field().equals(field)) {
@@ -74,6 +76,7 @@ public class RegexQuery extends MultiTermQuery implements RegexQueryCapable {
   }
 
   /* generated by IntelliJ IDEA */
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (o == null || getClass() != o.getClass()) return false;
@@ -85,6 +88,7 @@ public class RegexQuery extends MultiTermQuery implements RegexQueryCapable {
   }
 
   /* generated by IntelliJ IDEA */
+  @Override
   public int hashCode() {
     int result = super.hashCode();
     result = 29 * result + regexImpl.hashCode();
diff --git a/contrib/regex/src/java/org/apache/lucene/search/regex/RegexTermEnum.java b/contrib/regex/src/java/org/apache/lucene/search/regex/RegexTermEnum.java
index 8130acc..ae814aa 100644
--- a/contrib/regex/src/java/org/apache/lucene/search/regex/RegexTermEnum.java
+++ b/contrib/regex/src/java/org/apache/lucene/search/regex/RegexTermEnum.java
@@ -52,6 +52,7 @@ public class RegexTermEnum extends FilteredTermEnum {
     setEnum(reader.terms(new Term(term.field(), pre)));
   }
 
+  @Override
   protected final boolean termCompare(Term term) {
     if (field == term.field()) {
       String searchText = term.text();
@@ -63,15 +64,18 @@ public class RegexTermEnum extends FilteredTermEnum {
     return false;
   }
 
+  @Override
   public final float difference() {
 // TODO: adjust difference based on distance of searchTerm.text() and term().text()
     return 1.0f;
   }
 
+  @Override
   public final boolean endEnum() {
     return endEnum;
   }
 
+  @Override
   public void close() throws IOException {
     super.close();
     field = null;
diff --git a/contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery.java b/contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery.java
index dcadbd5..2e2e678 100644
--- a/contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery.java
+++ b/contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery.java
@@ -47,6 +47,7 @@ public class SpanRegexQuery extends SpanQuery implements RegexQueryCapable {
 
   public Term getTerm() { return term; }
 
+  @Override
   public Query rewrite(IndexReader reader) throws IOException {
     RegexQuery orig = new RegexQuery(term);
     orig.setRegexImplementation(regexImpl);
@@ -71,10 +72,12 @@ public class SpanRegexQuery extends SpanQuery implements RegexQueryCapable {
     return query;
   }
 
+  @Override
   public Spans getSpans(IndexReader reader) throws IOException {
     throw new UnsupportedOperationException("Query should have been rewritten");
   }
 
+  @Override
   public String getField() {
     return term.field();
   }
@@ -86,6 +89,7 @@ public class SpanRegexQuery extends SpanQuery implements RegexQueryCapable {
   }
 
   /* generated by IntelliJ IDEA */
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (o == null || getClass() != o.getClass()) return false;
@@ -99,6 +103,7 @@ public class SpanRegexQuery extends SpanQuery implements RegexQueryCapable {
   }
 
   /* generated by IntelliJ IDEA */
+  @Override
   public int hashCode() {
     int result;
     result = regexImpl.hashCode();
@@ -106,6 +111,7 @@ public class SpanRegexQuery extends SpanQuery implements RegexQueryCapable {
     return result;
   }
 
+  @Override
   public String toString(String field) {
     StringBuilder buffer = new StringBuilder();
     buffer.append("spanRegexQuery(");
diff --git a/contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery.java b/contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery.java
index a4c6d92..4126b55 100644
--- a/contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery.java
+++ b/contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery.java
@@ -35,6 +35,7 @@ public class TestRegexQuery extends TestCase {
   private final String FN = "field";
 
 
+  @Override
   public void setUp() {
     RAMDirectory directory = new RAMDirectory();
     try {
@@ -51,6 +52,7 @@ public class TestRegexQuery extends TestCase {
     }
   }
 
+  @Override
   public void tearDown() {
     try {
       searcher.close();
diff --git a/contrib/remote/src/java/org/apache/lucene/search/RemoteCachingWrapperFilter.java b/contrib/remote/src/java/org/apache/lucene/search/RemoteCachingWrapperFilter.java
index 7fecdf0..9b58370 100644
--- a/contrib/remote/src/java/org/apache/lucene/search/RemoteCachingWrapperFilter.java
+++ b/contrib/remote/src/java/org/apache/lucene/search/RemoteCachingWrapperFilter.java
@@ -51,6 +51,7 @@ public class RemoteCachingWrapperFilter extends Filter {
    * @param reader the index reader for the Filter
    * @return the DocIdSet
    */
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
     Filter cachedFilter = FilterManager.getInstance().getFilter(filter);
     return cachedFilter.getDocIdSet(reader);
diff --git a/contrib/remote/src/test/org/apache/lucene/search/RemoteCachingWrapperFilterHelper.java b/contrib/remote/src/test/org/apache/lucene/search/RemoteCachingWrapperFilterHelper.java
index eb5ef17..f240f19 100644
--- a/contrib/remote/src/test/org/apache/lucene/search/RemoteCachingWrapperFilterHelper.java
+++ b/contrib/remote/src/test/org/apache/lucene/search/RemoteCachingWrapperFilterHelper.java
@@ -41,6 +41,7 @@ public class RemoteCachingWrapperFilterHelper extends RemoteCachingWrapperFilter
     this.shouldHaveCache = shouldHaveCache;
   }
 
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
     Filter cachedFilter = FilterManager.getInstance().getFilter(filter);
     
diff --git a/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort.java b/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort.java
index 89dfba8..39c91f4 100644
--- a/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort.java
+++ b/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort.java
@@ -174,6 +174,7 @@ public class TestRemoteSort extends LuceneTestCase implements Serializable {
     return randInt;
   }
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     full = getFullIndex();
@@ -194,22 +195,27 @@ public class TestRemoteSort extends LuceneTestCase implements Serializable {
       slotValues = new int[numHits];
     }
 
+    @Override
     public void copy(int slot, int doc) {
       slotValues[slot] = docValues[doc];
     }
 
+    @Override
     public int compare(int slot1, int slot2) {
       return slotValues[slot1] - slotValues[slot2];
     }
 
+    @Override
     public int compareBottom(int doc) {
       return bottomValue - docValues[doc];
     }
 
+    @Override
     public void setBottom(int bottom) {
       bottomValue = slotValues[bottom];
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) throws IOException {
       docValues = FieldCache.DEFAULT.getInts(reader, "parser", new FieldCache.IntParser() {
           public final int parseInt(final String val) {
@@ -218,12 +224,14 @@ public class TestRemoteSort extends LuceneTestCase implements Serializable {
         });
     }
 
+    @Override
     public Comparable value(int slot) {
       return Integer.valueOf(slotValues[slot]);
     }
   }
 
   static class MyFieldComparatorSource extends FieldComparatorSource {
+    @Override
     public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {
       return new MyFieldComparator(numHits);
     }
diff --git a/contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer.java b/contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer.java
index 80be887..86982b4 100644
--- a/contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer.java
+++ b/contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer.java
@@ -56,6 +56,7 @@ public class SnowballAnalyzer extends Analyzer {
   /** Constructs a {@link StandardTokenizer} filtered by a {@link
       StandardFilter}, a {@link LowerCaseFilter}, a {@link StopFilter},
       and a {@link SnowballFilter} */
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     TokenStream result = new StandardTokenizer(matchVersion, reader);
     result = new StandardFilter(result);
@@ -75,6 +76,7 @@ public class SnowballAnalyzer extends Analyzer {
   /** Returns a (possibly reused) {@link StandardTokenizer} filtered by a 
    * {@link StandardFilter}, a {@link LowerCaseFilter}, 
    * a {@link StopFilter}, and a {@link SnowballFilter} */
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader)
       throws IOException {
     if (overridesTokenStreamMethod) {
diff --git a/contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter.java b/contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter.java
index f175425..1a660d7 100644
--- a/contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter.java
+++ b/contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter.java
@@ -64,6 +64,7 @@ public final class SnowballFilter extends TokenFilter {
   }
 
   /** Returns the next input Token, after being stemmed */
+  @Override
   public final boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       String originalTerm = termAtt.term();
diff --git a/contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java b/contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java
index 0c11b07..9a88d12 100644
--- a/contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java
+++ b/contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java
@@ -57,6 +57,7 @@ public class TestSnowball extends BaseTokenStreamTestCase {
       super(Version.LUCENE_CURRENT, name);
     }
     
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       return new WhitespaceTokenizer(reader);
     }
@@ -106,6 +107,7 @@ public class TestSnowball extends BaseTokenStreamTestCase {
       flagsAtt = addAttribute(FlagsAttribute.class);
     }
     
+    @Override
     public boolean incrementToken() {
       termAtt.setTermBuffer("accents");
       offsetAtt.setOffset(2, 7);
diff --git a/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter.java b/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter.java
index 41acb6b..0bbb8ac 100644
--- a/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter.java
+++ b/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter.java
@@ -68,6 +68,7 @@ public class GeoHashDistanceFilter extends DistanceFilter {
     nextDocBase += reader.maxDoc();
 
     return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {
+      @Override
       public boolean match(int doc) {
         
         String geoHash = geoHashValues[doc];
diff --git a/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/LatLng.java b/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/LatLng.java
index 08def8a..b2128ab 100644
--- a/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/LatLng.java
+++ b/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/LatLng.java
@@ -152,7 +152,9 @@ public abstract class LatLng {
    */
   public abstract LatLng calculateMidpoint(LatLng other);
   
+  @Override
   public abstract int hashCode();
 
+  @Override
   public abstract boolean equals(Object obj);
 }
diff --git a/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceFilter.java b/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceFilter.java
index df88401..497c45e 100644
--- a/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceFilter.java
+++ b/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceFilter.java
@@ -88,9 +88,11 @@ public abstract class DistanceFilter extends Filter {
   }
 
   /** Returns true if <code>o</code> is equal to this. */
+  @Override
   public abstract boolean equals(Object o);
 
   /** Returns a hash code value for this object.*/
+  @Override
   public abstract int hashCode();
 
   /*
diff --git a/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter.java b/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter.java
index 3526c27..52f9d5c 100644
--- a/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter.java
+++ b/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter.java
@@ -72,6 +72,7 @@ public class LatLongDistanceFilter extends DistanceFilter {
     nextDocBase += reader.maxDoc();
 
     return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {
+      @Override
       protected boolean match(int doc) {
         double x = latIndex[doc];
         double y = lngIndex[doc];
diff --git a/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java b/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java
index 25813de..dcc919f 100644
--- a/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java
+++ b/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java
@@ -72,6 +72,7 @@ public class TestCartesian extends TestCase{
   
 
 
+  @Override
   protected void setUp() throws IOException {
     directory = new RAMDirectory();
 
diff --git a/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SuggestWordQueue.java b/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SuggestWordQueue.java
index 5870f4b..c1c9dfd 100755
--- a/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SuggestWordQueue.java
+++ b/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SuggestWordQueue.java
@@ -31,6 +31,7 @@ final class SuggestWordQueue extends PriorityQueue<SuggestWord> {
     initialize(size);
   }
 
+  @Override
   protected final boolean lessThan (SuggestWord wa, SuggestWord wb) {
     int val = wa.compareTo(wb);
     return val < 0;
diff --git a/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary.java b/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary.java
index 8dd3525..9e88fa2 100644
--- a/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary.java
+++ b/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLuceneDictionary.java
@@ -45,6 +45,7 @@ public class TestLuceneDictionary extends TestCase {
   private LuceneDictionary ld;
   private Iterator it;
 
+  @Override
   public void setUp() throws Exception {
 
     IndexWriter writer = new IndexWriter(store, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);
diff --git a/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker.java b/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker.java
index b08512e..995ee1a 100755
--- a/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker.java
+++ b/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker.java
@@ -41,6 +41,7 @@ public class TestSpellChecker extends TestCase {
   private SpellChecker spellChecker;
   private Directory userindex, spellindex;
 
+  @Override
   protected void setUp() throws Exception {
     super.setUp();
     
diff --git a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/AndQuery.java b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/AndQuery.java
index 125804b..af6a1cd 100644
--- a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/AndQuery.java
+++ b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/AndQuery.java
@@ -26,6 +26,7 @@ public class AndQuery extends ComposedQuery {
     super(queries, inf, opName);
   }
   
+  @Override
   public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {
     return SrndBooleanQuery.makeBooleanQuery( /* subqueries can be individually boosted */
       makeLuceneSubQueriesField(fieldName, qf), BooleanClause.Occur.MUST);
diff --git a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/ComposedQuery.java b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/ComposedQuery.java
index 39b6101..890e394 100644
--- a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/ComposedQuery.java
+++ b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/ComposedQuery.java
@@ -56,6 +56,7 @@ public abstract class ComposedQuery extends SrndQuery {
     return luceneSubQueries;
   }
 
+  @Override
   public String toString() {
     StringBuilder r = new StringBuilder();
     if (isOperatorInfix()) {
@@ -103,6 +104,7 @@ public abstract class ComposedQuery extends SrndQuery {
   }
   
   
+  @Override
   public boolean isFieldsSubQueryAcceptable() {
     /* at least one subquery should be acceptable */
     Iterator sqi = getSubQueriesIterator();
diff --git a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/DistanceQuery.java b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/DistanceQuery.java
index f963e63..06b2b8e 100644
--- a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/DistanceQuery.java
+++ b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/DistanceQuery.java
@@ -71,13 +71,16 @@ public class DistanceQuery extends ComposedQuery implements DistanceSubQuery {
     sncf.addSpanNearQuery(snq);
   }
 
+  @Override
   public Query makeLuceneQueryFieldNoBoost(final String fieldName, final BasicQueryFactory qf) {
     return new Query () {
       
+      @Override
       public String toString(String fn) {
         return getClass().toString() + " " + fieldName + " (" + fn + "?)";
       }
       
+      @Override
       public Query rewrite(IndexReader reader) throws IOException {
         return getSpanNearQuery(reader, fieldName, getBoost(), qf);
       }
diff --git a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery.java b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery.java
index 300c514..0fc1887 100644
--- a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery.java
+++ b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery.java
@@ -41,6 +41,7 @@ public class FieldsQuery extends SrndQuery { /* mostly untested */
     this.fieldOp = fieldOp;
   }
   
+  @Override
   public boolean isFieldsSubQueryAcceptable() {
     return false;
   }
@@ -65,6 +66,7 @@ public class FieldsQuery extends SrndQuery { /* mostly untested */
     }
   }
 
+  @Override
   public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {
     return makeLuceneQueryNoBoost(qf); /* use this.fieldNames instead of fieldName */
   }
@@ -74,6 +76,7 @@ public class FieldsQuery extends SrndQuery { /* mostly untested */
 
   public char getFieldOperator() { return fieldOp;}
   
+  @Override
   public String toString() {
     StringBuilder r = new StringBuilder();
     r.append("(");
diff --git a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/NotQuery.java b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/NotQuery.java
index 8fed918..54c0596 100644
--- a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/NotQuery.java
+++ b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/NotQuery.java
@@ -24,6 +24,7 @@ import org.apache.lucene.search.BooleanClause;
 public class NotQuery extends ComposedQuery { 
   public NotQuery(List queries, String opName) { super(queries, true /* infix */, opName); }
   
+  @Override
   public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {
     List luceneSubQueries = makeLuceneSubQueriesField(fieldName, qf);
     BooleanQuery bq = new BooleanQuery();
diff --git a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/OrQuery.java b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/OrQuery.java
index dc4a556..d41f59a 100644
--- a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/OrQuery.java
+++ b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/OrQuery.java
@@ -28,6 +28,7 @@ public class OrQuery extends ComposedQuery implements DistanceSubQuery {
     super(queries, infix, opName);
   }
   
+  @Override
   public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {
     return SrndBooleanQuery.makeBooleanQuery(
       /* subqueries can be individually boosted */
diff --git a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SimpleTerm.java b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SimpleTerm.java
index be7edc6..794e8ad 100644
--- a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SimpleTerm.java
+++ b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SimpleTerm.java
@@ -46,6 +46,7 @@ public abstract class SimpleTerm
   
   protected void suffixToString(StringBuilder r) {;} /* override for prefix query */
   
+  @Override
   public String toString() {
     StringBuilder r = new StringBuilder();
     if (isQuoted()) {
@@ -72,12 +73,15 @@ public abstract class SimpleTerm
   public String distanceSubQueryNotAllowed() {return null;}
 
   
+  @Override
   public Query makeLuceneQueryFieldNoBoost(final String fieldName, final BasicQueryFactory qf) {
     return new Query() {
+      @Override
       public String toString(String fn) {
         return getClass().toString() + " " + fieldName + " (" + fn + "?)";
       }
       
+      @Override
       public Query rewrite(IndexReader reader) throws IOException {
         final List luceneSubQueries = new ArrayList();
         visitMatchingTerms( reader, fieldName,
diff --git a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndPrefixQuery.java b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndPrefixQuery.java
index f7facc4..87beb5a 100644
--- a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndPrefixQuery.java
+++ b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndPrefixQuery.java
@@ -40,10 +40,13 @@ public class SrndPrefixQuery extends SimpleTerm {
     return new Term(fieldName, getPrefix());
   }
   
+  @Override
   public String toStringUnquoted() {return getPrefix();}
   
+  @Override
   protected void suffixToString(StringBuilder r) {r.append(getSuffixOperator());}
   
+  @Override
   public void visitMatchingTerms(
     IndexReader reader,
     String fieldName,
diff --git a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndQuery.java b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndQuery.java
index cc2cc88..523c076 100644
--- a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndQuery.java
+++ b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndQuery.java
@@ -53,10 +53,12 @@ public abstract class SrndQuery implements Cloneable {
   
   public abstract Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf);
   
+  @Override
   public abstract String toString();
   
   public boolean isFieldsSubQueryAcceptable() {return true;}
     
+  @Override
   public Object clone() {
     try {
       return super.clone();
@@ -67,12 +69,15 @@ public abstract class SrndQuery implements Cloneable {
   
 /* An empty Lucene query */
   public final static Query theEmptyLcnQuery = new BooleanQuery() { /* no changes allowed */
+    @Override
     public void setBoost(float boost) {
       throw new UnsupportedOperationException();
     }
+    @Override
     public void add(BooleanClause clause) {
       throw new UnsupportedOperationException();
     }
+    @Override
     public void add(Query query, BooleanClause.Occur occur) {
       throw new UnsupportedOperationException();
     }
diff --git a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTermQuery.java b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTermQuery.java
index d64aee7..1812295 100644
--- a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTermQuery.java
+++ b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTermQuery.java
@@ -36,8 +36,10 @@ public class SrndTermQuery extends SimpleTerm {
     return new Term(fieldName, getTermText());
   }
   
+  @Override
   public String toStringUnquoted() {return getTermText();}
   
+  @Override
   public void visitMatchingTerms(
     IndexReader reader,
     String fieldName,
diff --git a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery.java b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery.java
index 21e4dc3..55a41f2 100644
--- a/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery.java
+++ b/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery.java
@@ -45,6 +45,7 @@ public class SrndTruncQuery extends SimpleTerm {
   
   public String getTruncated() {return truncated;}
   
+  @Override
   public String toStringUnquoted() {return getTruncated();}
 
   
@@ -76,6 +77,7 @@ public class SrndTruncQuery extends SimpleTerm {
     pattern = Pattern.compile(re.toString());
   }
   
+  @Override
   public void visitMatchingTerms(
     IndexReader reader,
     String fieldName,
diff --git a/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.java b/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.java
index ba5663b..f632419 100644
--- a/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.java
+++ b/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.java
@@ -67,18 +67,22 @@ public class BooleanQueryTst {
       encountered = new boolean[expectedDocNrs.length];
     }
 
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       this.scorer = scorer;
     }
 
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) throws IOException {
       this.docBase = docBase;
     }
     
+    @Override
     public void collect(int docNr) throws IOException {
       float score = scorer.score();
       docNr += docBase;
diff --git a/contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher.java b/contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher.java
index 9499e21..eeeb569 100644
--- a/contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher.java
+++ b/contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher.java
@@ -183,12 +183,16 @@ public class ListSearcher extends AbstractListModel {
     final static class CountingCollector extends Collector {
       public int numHits = 0;
       
+      @Override
       public void setScorer(Scorer scorer) throws IOException {}
+      @Override
       public void collect(int doc) throws IOException {
         numHits++;
       }
 
+      @Override
       public void setNextReader(IndexReader reader, int docBase) {}
+      @Override
       public boolean acceptsDocsOutOfOrder() {
         return true;
       }    
diff --git a/contrib/swing/src/java/org/apache/lucene/swing/models/TableSearcher.java b/contrib/swing/src/java/org/apache/lucene/swing/models/TableSearcher.java
index 897da88..4f8d71d 100644
--- a/contrib/swing/src/java/org/apache/lucene/swing/models/TableSearcher.java
+++ b/contrib/swing/src/java/org/apache/lucene/swing/models/TableSearcher.java
@@ -310,14 +310,17 @@ public class TableSearcher extends AbstractTableModel {
         return (tableModel == null) ? 0 : tableModel.getColumnCount();
     }
 
+    @Override
     public String getColumnName(int column) {
         return tableModel.getColumnName(column);
     }
 
+    @Override
     public Class getColumnClass(int column) {
         return tableModel.getColumnClass(column);
     }
 
+    @Override
     public boolean isCellEditable(int row, int column) {
         return tableModel.isCellEditable(getModelRow(row), column);
     }
@@ -326,6 +329,7 @@ public class TableSearcher extends AbstractTableModel {
         return tableModel.getValueAt(getModelRow(row), column);
     }
 
+    @Override
     public void setValueAt(Object aValue, int row, int column) {
         tableModel.setValueAt(aValue, getModelRow(row), column);
     }
diff --git a/contrib/swing/src/test/org/apache/lucene/swing/models/BaseTableModel.java b/contrib/swing/src/test/org/apache/lucene/swing/models/BaseTableModel.java
index 6e87c5b..1093bfd 100644
--- a/contrib/swing/src/test/org/apache/lucene/swing/models/BaseTableModel.java
+++ b/contrib/swing/src/test/org/apache/lucene/swing/models/BaseTableModel.java
@@ -60,10 +60,12 @@ public class BaseTableModel extends AbstractTableModel {
         fireTableDataChanged();
     }
 
+    @Override
     public boolean isCellEditable(int rowIndex, int columnIndex) {
         return false;
     }
 
+    @Override
     public Class getColumnClass(int columnIndex) {
         return String.class;
     }
@@ -89,10 +91,12 @@ public class BaseTableModel extends AbstractTableModel {
         }
     }
 
+    @Override
     public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
         //no op
     }
 
+    @Override
     public String getColumnName(int columnIndex) {
         return columnNames.get(columnIndex).toString();
     }
diff --git a/contrib/swing/src/test/org/apache/lucene/swing/models/RestaurantInfo.java b/contrib/swing/src/test/org/apache/lucene/swing/models/RestaurantInfo.java
index 6dad564..b932e32 100644
--- a/contrib/swing/src/test/org/apache/lucene/swing/models/RestaurantInfo.java
+++ b/contrib/swing/src/test/org/apache/lucene/swing/models/RestaurantInfo.java
@@ -93,6 +93,7 @@ public class RestaurantInfo {
         this.type = type;
     }
 
+    @Override
     public String toString() {
         return getName() + " - " + getPhone();
     }
diff --git a/contrib/swing/src/test/org/apache/lucene/swing/models/TestBasicList.java b/contrib/swing/src/test/org/apache/lucene/swing/models/TestBasicList.java
index ac19c21..107b58c 100644
--- a/contrib/swing/src/test/org/apache/lucene/swing/models/TestBasicList.java
+++ b/contrib/swing/src/test/org/apache/lucene/swing/models/TestBasicList.java
@@ -30,6 +30,7 @@ public class TestBasicList extends TestCase {
     private ListSearcher listSearcher;
     private List list;
 
+    @Override
     protected void setUp() throws Exception {
         list = new ArrayList();
         list.add(DataStore.canolis);
diff --git a/contrib/swing/src/test/org/apache/lucene/swing/models/TestBasicTable.java b/contrib/swing/src/test/org/apache/lucene/swing/models/TestBasicTable.java
index 603bb84..260ccfa 100644
--- a/contrib/swing/src/test/org/apache/lucene/swing/models/TestBasicTable.java
+++ b/contrib/swing/src/test/org/apache/lucene/swing/models/TestBasicTable.java
@@ -29,6 +29,7 @@ public class TestBasicTable extends TestCase {
     private TableSearcher tableSearcher;
     private List list;
 
+    @Override
     protected void setUp() throws Exception {
         list = new ArrayList();
         list.add(DataStore.canolis);
diff --git a/contrib/swing/src/test/org/apache/lucene/swing/models/TestSearchingList.java b/contrib/swing/src/test/org/apache/lucene/swing/models/TestSearchingList.java
index 6f74a20..adc52f5 100644
--- a/contrib/swing/src/test/org/apache/lucene/swing/models/TestSearchingList.java
+++ b/contrib/swing/src/test/org/apache/lucene/swing/models/TestSearchingList.java
@@ -26,6 +26,7 @@ public class TestSearchingList extends TestCase {
     private ListModel baseListModel;
     private ListSearcher listSearcher;
 
+    @Override
     protected void setUp() throws Exception {
         baseListModel = new BaseListModel(DataStore.getRestaurants());
         listSearcher = new ListSearcher(baseListModel);
diff --git a/contrib/swing/src/test/org/apache/lucene/swing/models/TestSearchingTable.java b/contrib/swing/src/test/org/apache/lucene/swing/models/TestSearchingTable.java
index 6f91080..c06753f 100644
--- a/contrib/swing/src/test/org/apache/lucene/swing/models/TestSearchingTable.java
+++ b/contrib/swing/src/test/org/apache/lucene/swing/models/TestSearchingTable.java
@@ -25,6 +25,7 @@ public class TestSearchingTable extends TestCase {
     private TableModel baseTableModel;
     private TableSearcher tableSearcher;
 
+    @Override
     protected void setUp() throws Exception {
         baseTableModel = new BaseTableModel(DataStore.getRestaurants());
         tableSearcher = new TableSearcher(baseTableModel);
diff --git a/contrib/swing/src/test/org/apache/lucene/swing/models/TestUpdatingList.java b/contrib/swing/src/test/org/apache/lucene/swing/models/TestUpdatingList.java
index 7334f10..42a853c 100644
--- a/contrib/swing/src/test/org/apache/lucene/swing/models/TestUpdatingList.java
+++ b/contrib/swing/src/test/org/apache/lucene/swing/models/TestUpdatingList.java
@@ -25,6 +25,7 @@ public class TestUpdatingList extends TestCase {
 
     RestaurantInfo infoToAdd1, infoToAdd2;
 
+    @Override
     protected void setUp() throws Exception {
         baseListModel = new BaseListModel(DataStore.getRestaurants());
         listSearcher = new ListSearcher(baseListModel);
diff --git a/contrib/swing/src/test/org/apache/lucene/swing/models/TestUpdatingTable.java b/contrib/swing/src/test/org/apache/lucene/swing/models/TestUpdatingTable.java
index 17d1b90..2730a44 100644
--- a/contrib/swing/src/test/org/apache/lucene/swing/models/TestUpdatingTable.java
+++ b/contrib/swing/src/test/org/apache/lucene/swing/models/TestUpdatingTable.java
@@ -25,6 +25,7 @@ public class TestUpdatingTable extends TestCase {
 
     RestaurantInfo infoToAdd1, infoToAdd2;
 
+    @Override
     protected void setUp() throws Exception {
         baseTableModel = new BaseTableModel(DataStore.getRestaurants());
         tableSearcher = new TableSearcher(baseTableModel);
diff --git a/contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer.java b/contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer.java
index 0bb269e..9f13000 100644
--- a/contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer.java
+++ b/contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer.java
@@ -191,6 +191,7 @@ public final class WikipediaTokenizer extends Tokenizer {
   *
   * @see org.apache.lucene.analysis.TokenStream#next()
   */
+  @Override
   public final boolean incrementToken() throws IOException {
     if (tokens != null && tokens.hasNext()){
       AttributeSource.State state = (AttributeSource.State) tokens.next();
@@ -307,11 +308,13 @@ public final class WikipediaTokenizer extends Tokenizer {
   *
   * @see org.apache.lucene.analysis.TokenStream#reset()
   */
+  @Override
   public void reset() throws IOException {
     super.reset();
     scanner.yyreset(input);
   }
 
+  @Override
   public void reset(Reader reader) throws IOException {
     super.reset(reader);
     reset();
diff --git a/contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil.java b/contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil.java
index a2ed9ab..5d598b7 100644
--- a/contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil.java
+++ b/contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil.java
@@ -72,6 +72,7 @@ public class AnalyzerUtil {
       throw new IllegalArgumentException("logStream must not be null");
 
     return new Analyzer() {
+      @Override
       public TokenStream tokenStream(final String fieldName, Reader reader) {
         return new TokenFilter(child.tokenStream(fieldName, reader)) {
           private int position = -1;
@@ -80,6 +81,7 @@ public class AnalyzerUtil {
           private OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
           private TypeAttribute typeAtt = addAttribute(TypeAttribute.class);
          
+          @Override
           public boolean incrementToken() throws IOException {
             boolean hasNext = input.incrementToken();
             log.println(toString(hasNext));
@@ -124,10 +126,12 @@ public class AnalyzerUtil {
       return child; // no need to wrap
   
     return new Analyzer() {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new TokenFilter(child.tokenStream(fieldName, reader)) {
           private int todo = maxTokens;
           
+          @Override
           public boolean incrementToken() throws IOException {
             return --todo >= 0 ? input.incrementToken() : false;
           }
@@ -163,6 +167,7 @@ public class AnalyzerUtil {
       throw new IllegalArgumentException("child analyzer must not be null");
   
     return new Analyzer() {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new PorterStemFilter(
             child.tokenStream(fieldName, reader));
@@ -201,6 +206,7 @@ public class AnalyzerUtil {
       return child; // no need to wrap
   
     return new Analyzer() {
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new SynonymTokenFilter(
           child.tokenStream(fieldName, reader), synonyms, maxSynonyms);
@@ -240,12 +246,14 @@ public class AnalyzerUtil {
 
       private final HashMap<String,ArrayList<AttributeSource.State>> cache = new HashMap<String,ArrayList<AttributeSource.State>>();
 
+      @Override
       public TokenStream tokenStream(String fieldName, Reader reader) {
         final ArrayList<AttributeSource.State> tokens = cache.get(fieldName);
         if (tokens == null) { // not yet cached
           final ArrayList<AttributeSource.State> tokens2 = new ArrayList<AttributeSource.State>();
           TokenStream tokenStream = new TokenFilter(child.tokenStream(fieldName, reader)) {
 
+            @Override
             public boolean incrementToken() throws IOException {
               boolean hasNext = input.incrementToken();
               if (hasNext) tokens2.add(captureState());
@@ -260,6 +268,7 @@ public class AnalyzerUtil {
 
             private Iterator<AttributeSource.State> iter = tokens.iterator();
 
+            @Override
             public boolean incrementToken() {
               if (!iter.hasNext()) return false;
               restoreState(iter.next());
@@ -356,6 +365,7 @@ public class AnalyzerUtil {
     public MutableInteger(int value) { this.value = value; }
     public int intValue() { return value; }
     public void setValue(int value) { this.value = value; }
+    @Override
     public String toString() { return String.valueOf(value); }
   };
   
diff --git a/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup.java b/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup.java
index a999c29..09ccdde 100644
--- a/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup.java
+++ b/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup.java
@@ -52,12 +52,16 @@ public class SynLookup {
   final static class CountingCollector extends Collector {
     public int numHits = 0;
     
+    @Override
     public void setScorer(Scorer scorer) throws IOException {}
+    @Override
     public void collect(int doc) throws IOException {
       numHits++;
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) {}
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }    
diff --git a/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap.java b/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap.java
index 450b2bf..be5a521 100644
--- a/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap.java
+++ b/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap.java
@@ -121,6 +121,7 @@ public class SynonymMap {
    * 
    * @return a String representation
    */
+  @Override
   public String toString() {
     StringBuilder buf = new StringBuilder();
     Iterator<String> iter = new TreeMap<String,String[]>(table).keySet().iterator();
diff --git a/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymTokenFilter.java b/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymTokenFilter.java
index cc26c3e..47af190 100644
--- a/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymTokenFilter.java
+++ b/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymTokenFilter.java
@@ -78,6 +78,7 @@ public class SynonymTokenFilter extends TokenFilter {
   }
   
   /** Returns the next token in the stream, or null at EOS. */
+  @Override
   public final boolean incrementToken() throws IOException {
     while (todo > 0 && index < stack.length) { // pop from stack
       if (createToken(stack[index++], current)) {
@@ -140,6 +141,7 @@ public class SynonymTokenFilter extends TokenFilter {
     }   
   }
 
+  @Override
   public void reset() throws IOException {
     super.reset();
     stack = null;
diff --git a/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestSynonymTokenFilter.java b/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestSynonymTokenFilter.java
index ccbab5c..a288c46 100644
--- a/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestSynonymTokenFilter.java
+++ b/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestSynonymTokenFilter.java
@@ -93,6 +93,7 @@ public class TestSynonymTokenFilter extends BaseTokenStreamTestCase {
       this.maxSynonyms = maxSynonyms;
     }
     
+    @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream ts = new WhitespaceTokenizer(reader);
       ts = new LowerCaseFilter(ts);
@@ -105,6 +106,7 @@ public class TestSynonymTokenFilter extends BaseTokenStreamTestCase {
       TokenStream result;
     };
     
+    @Override
     public TokenStream reusableTokenStream(String fieldName, Reader reader)
         throws IOException {
       SavedStreams streams = (SavedStreams) getPreviousTokenStream();
diff --git a/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo.java b/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo.java
index 4eea93e..e13e7d4 100644
--- a/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo.java
+++ b/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo.java
@@ -53,6 +53,7 @@ public class FormBasedXmlQueryDemo extends HttpServlet {
 	private IndexSearcher searcher;
 	private Analyzer analyzer=new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);
 
+	@Override
 	public void init(ServletConfig config) throws ServletException {
 		super.init(config);
 		try {
@@ -74,6 +75,7 @@ public class FormBasedXmlQueryDemo extends HttpServlet {
 		}
 	}
 
+	@Override
 	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
 		//Take all completed form fields and add to a Properties object
 		Properties completedFormFields=new Properties();
diff --git a/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/CachedFilterBuilder.java b/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/CachedFilterBuilder.java
index 8280a2c..33aa0e3 100644
--- a/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/CachedFilterBuilder.java
+++ b/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/CachedFilterBuilder.java
@@ -119,6 +119,7 @@ public class CachedFilterBuilder implements FilterBuilder {
 
 	    protected int maxsize;
 
+	    @Override
 	    protected boolean removeEldestEntry(Entry eldest)
 	    {
 	        return size() > maxsize;
diff --git a/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser.java b/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser.java
index 33df0c6..e282627 100644
--- a/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser.java
+++ b/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser.java
@@ -51,6 +51,7 @@ public class TestParser extends TestCase {
 	/*
 	 * @see TestCase#setUp()
 	 */
+	@Override
 	protected void setUp() throws Exception {
 		super.setUp();
 		
@@ -86,6 +87,7 @@ public class TestParser extends TestCase {
 	
 	
 	
+	@Override
 	protected void tearDown() throws Exception {
 		reader.close();
 		searcher.close();
diff --git a/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager.java b/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager.java
index dd967e6..969713b 100644
--- a/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager.java
+++ b/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager.java
@@ -135,6 +135,7 @@ public class TestQueryTemplateManager extends TestCase {
 	/*
 	 * @see TestCase#setUp()
 	 */
+	@Override
 	protected void setUp() throws Exception {
 		super.setUp();
 		
@@ -156,6 +157,7 @@ public class TestQueryTemplateManager extends TestCase {
 	}
 	
 	
+	@Override
 	protected void tearDown() throws Exception {
 		searcher.close();
 	}
diff --git a/src/demo/org/apache/lucene/demo/SearchFiles.java b/src/demo/org/apache/lucene/demo/SearchFiles.java
index 9f80e92..65629fe 100644
--- a/src/demo/org/apache/lucene/demo/SearchFiles.java
+++ b/src/demo/org/apache/lucene/demo/SearchFiles.java
@@ -56,6 +56,7 @@ public class SearchFiles {
       this.field = field;
     }
 
+    @Override
     public byte[] norms(String field) throws IOException {
       return in.norms(this.field);
     }
@@ -176,19 +177,23 @@ public class SearchFiles {
       private int docBase;
       
       // simply print docId and score of every matching document
+      @Override
       public void collect(int doc) throws IOException {
         System.out.println("doc=" + doc + docBase + " score=" + scorer.score());
       }
 
+      @Override
       public boolean acceptsDocsOutOfOrder() {
         return true;
       }
 
+      @Override
       public void setNextReader(IndexReader reader, int docBase)
           throws IOException {
         this.docBase = docBase;
       }
 
+      @Override
       public void setScorer(Scorer scorer) throws IOException {
         this.scorer = scorer;
       }
diff --git a/src/demo/org/apache/lucene/demo/html/ParserThread.java b/src/demo/org/apache/lucene/demo/html/ParserThread.java
index 1319dc9..88fa41a 100644
--- a/src/demo/org/apache/lucene/demo/html/ParserThread.java
+++ b/src/demo/org/apache/lucene/demo/html/ParserThread.java
@@ -26,6 +26,7 @@ class ParserThread extends Thread {
     parser = p;
   }
 
+  @Override
   public void run() {				  // convert pipeOut to pipeIn
     try {
       try {					  // parse document to pipeOut

