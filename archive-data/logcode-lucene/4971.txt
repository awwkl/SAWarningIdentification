GitDiffStart: 88f2ebd5d0b4e5586635d1e82449f71d9786ee23 | Wed Nov 12 08:40:02 2014 +0000
diff --git a/lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java b/lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java
index f778726..ec812d7 100644
--- a/lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java
+++ b/lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier.java
@@ -16,6 +16,14 @@
  */
 package org.apache.lucene.classification;
 
+import java.io.IOException;
+import java.io.StringReader;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.index.LeafReader;
 import org.apache.lucene.index.Term;
@@ -29,14 +37,6 @@ import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.search.WildcardQuery;
 import org.apache.lucene.util.BytesRef;
 
-import java.io.IOException;
-import java.io.StringReader;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
 /**
  * A k-Nearest Neighbor classifier (see <code>http://en.wikipedia.org/wiki/K-nearest_neighbors</code>) based
  * on {@link MoreLikeThis}
@@ -82,14 +82,14 @@ public class KNearestNeighborClassifier implements Classifier<BytesRef> {
    */
   @Override
   public ClassificationResult<BytesRef> assignClass(String text) throws IOException {
-    TopDocs topDocs=knnSearcher(text);
-    List<ClassificationResult<BytesRef>> doclist=buildListFromTopDocs(topDocs);
-    ClassificationResult<BytesRef> retval=null;
-    double maxscore=-Double.MAX_VALUE;
-    for(ClassificationResult<BytesRef> element:doclist){
-      if(element.getScore()>maxscore){
-        retval=element;
-        maxscore=element.getScore();
+    TopDocs topDocs = knnSearch(text);
+    List<ClassificationResult<BytesRef>> doclist = buildListFromTopDocs(topDocs);
+    ClassificationResult<BytesRef> retval = null;
+    double maxscore = -Double.MAX_VALUE;
+    for (ClassificationResult<BytesRef> element : doclist) {
+      if (element.getScore() > maxscore) {
+        retval = element;
+        maxscore = element.getScore();
       }
     }
     return retval;
@@ -100,24 +100,24 @@ public class KNearestNeighborClassifier implements Classifier<BytesRef> {
    */
   @Override
   public List<ClassificationResult<BytesRef>> getClasses(String text) throws IOException {
-    TopDocs topDocs=knnSearcher(text);
-    List<ClassificationResult<BytesRef>> doclist=buildListFromTopDocs(topDocs);
+    TopDocs topDocs = knnSearch(text);
+    List<ClassificationResult<BytesRef>> doclist = buildListFromTopDocs(topDocs);
     Collections.sort(doclist);
     return doclist;
   }
-  
+
   /**
    * {@inheritDoc}
    */
   @Override
   public List<ClassificationResult<BytesRef>> getClasses(String text, int max) throws IOException {
-    TopDocs topDocs=knnSearcher(text);
-    List<ClassificationResult<BytesRef>> doclist=buildListFromTopDocs(topDocs);
+    TopDocs topDocs = knnSearch(text);
+    List<ClassificationResult<BytesRef>> doclist = buildListFromTopDocs(topDocs);
     Collections.sort(doclist);
     return doclist.subList(0, max);
   }
 
-  private TopDocs knnSearcher(String text) throws IOException{
+  private TopDocs knnSearch(String text) throws IOException {
     if (mlt == null) {
       throw new IOException("You must first call Classifier#train");
     }
@@ -132,31 +132,30 @@ public class KNearestNeighborClassifier implements Classifier<BytesRef> {
     }
     return indexSearcher.search(mltQuery, k);
   }
-  
+
   private List<ClassificationResult<BytesRef>> buildListFromTopDocs(TopDocs topDocs) throws IOException {
     Map<BytesRef, Integer> classCounts = new HashMap<>();
     for (ScoreDoc scoreDoc : topDocs.scoreDocs) {
-        BytesRef cl = new BytesRef(indexSearcher.doc(scoreDoc.doc).getField(classFieldName).stringValue());
-        Integer count = classCounts.get(cl);
-        if (count != null) {
-            classCounts.put(cl, count + 1);
-        } else {
-            classCounts.put(cl, 1);
-        }
+      BytesRef cl = new BytesRef(indexSearcher.doc(scoreDoc.doc).getField(classFieldName).stringValue());
+      Integer count = classCounts.get(cl);
+      if (count != null) {
+        classCounts.put(cl, count + 1);
+      } else {
+        classCounts.put(cl, 1);
+      }
     }
     List<ClassificationResult<BytesRef>> returnList = new ArrayList<>();
-    int sumdoc=0;
+    int sumdoc = 0;
     for (Map.Entry<BytesRef, Integer> entry : classCounts.entrySet()) {
-        Integer count = entry.getValue();
-        returnList.add(new ClassificationResult<>(entry.getKey().clone(), count / (double) k));
-        sumdoc+=count;
-
+      Integer count = entry.getValue();
+      returnList.add(new ClassificationResult<>(entry.getKey().clone(), count / (double) k));
+      sumdoc += count;
     }
-    
+
     //correction
-    if(sumdoc<k){
-      for(ClassificationResult<BytesRef> cr:returnList){
-        cr.setScore(cr.getScore()*(double)k/(double)sumdoc);
+    if (sumdoc < k) {
+      for (ClassificationResult<BytesRef> cr : returnList) {
+        cr.setScore(cr.getScore() * (double) k / (double) sumdoc);
       }
     }
     return returnList;
diff --git a/lucene/classification/src/java/org/apache/lucene/classification/package.html b/lucene/classification/src/java/org/apache/lucene/classification/package.html
index b68c198..f5141fd 100644
--- a/lucene/classification/src/java/org/apache/lucene/classification/package.html
+++ b/lucene/classification/src/java/org/apache/lucene/classification/package.html
@@ -17,7 +17,6 @@
 <html>
 <body>
 Uses already seen data (the indexed documents) to classify new documents.
-Currently only contains a (simplistic) Lucene based Naive Bayes classifier,
-a k-Nearest Neighbor classifier and a Perceptron based classifier
+Currently contains a (simplistic) Naive Bayes classifier, a k-Nearest Neighbor classifier and a Perceptron based classifier
 </body>
 </html>
diff --git a/lucene/classification/src/java/org/apache/lucene/classification/utils/DatasetSplitter.java b/lucene/classification/src/java/org/apache/lucene/classification/utils/DatasetSplitter.java
index 84fa73b..4f0ca17 100644
--- a/lucene/classification/src/java/org/apache/lucene/classification/utils/DatasetSplitter.java
+++ b/lucene/classification/src/java/org/apache/lucene/classification/utils/DatasetSplitter.java
@@ -17,14 +17,16 @@ package org.apache.lucene.classification.utils;
  * limitations under the License.
  */
 
+import java.io.IOException;
+
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.TextField;
-import org.apache.lucene.index.LeafReader;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.IndexWriterConfig;
+import org.apache.lucene.index.LeafReader;
 import org.apache.lucene.index.StorableField;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.MatchAllDocsQuery;
@@ -32,8 +34,6 @@ import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.Directory;
 
-import java.io.IOException;
-
 /**
  * Utility class for creating training / test / cross validation indexes from the original index.
  */
diff --git a/lucene/classification/src/java/org/apache/lucene/classification/utils/DocToDoubleVectorUtils.java b/lucene/classification/src/java/org/apache/lucene/classification/utils/DocToDoubleVectorUtils.java
index c2db61e..9ac7d9a 100644
--- a/lucene/classification/src/java/org/apache/lucene/classification/utils/DocToDoubleVectorUtils.java
+++ b/lucene/classification/src/java/org/apache/lucene/classification/utils/DocToDoubleVectorUtils.java
@@ -16,12 +16,12 @@
  */
 package org.apache.lucene.classification.utils;
 
+import java.io.IOException;
+
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.util.BytesRef;
 
-import java.io.IOException;
-
 /**
  * utility class for converting Lucene {@link org.apache.lucene.document.Document}s to <code>Double</code> vectors.
  */
diff --git a/lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest.java b/lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest.java
index dec2874..f2fabee 100644
--- a/lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest.java
+++ b/lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest.java
@@ -33,7 +33,6 @@ import java.io.Reader;
 /**
  * Testcase for {@link SimpleNaiveBayesClassifier}
  */
-// TODO : eventually remove this if / when fallback methods exist for all un-supportable codec methods (see LUCENE-4872)
 public class SimpleNaiveBayesClassifierTest extends ClassificationTestBase<BytesRef> {
 
   @Test

