GitDiffStart: bdbf4cea57110e893c1a0ec0f1436fc3f20a2f7b | Mon Aug 24 19:43:48 2015 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 7240d0d..64286d9 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -98,6 +98,9 @@ Other
 
 * LUCENE-6755: more tests of ToChildBlockJoinScorer.advance (hossman)
 
+* LUCENE-6571: fix some private access level javadoc errors and warnings
+  (Cao Manh Dat, Christine Poerschke)
+
 Build
 
 * LUCENE-6732: Improve checker for invalid source patterns to also
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java b/lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java
index 882f5cd..701b40d 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java
@@ -40,7 +40,7 @@ import org.apache.lucene.util.StringHelper;
 /** Used in the first pass when writing a segment to locate
  *  "appropriate" auto-prefix terms to pre-compile into the index.
  *  This visits every term in the index to find prefixes that
- *  match >= min and <= max number of terms. */
+ *  match {@code >= min} and {@code <= max} number of terms. */
 
 class AutoPrefixTermsWriter {
 
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java b/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java
index dd32083..9da6d40 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java
@@ -341,7 +341,6 @@ public final class CompressingStoredFieldsWriter extends StoredFieldsWriter {
    *    <li>Bytes --&gt; Potential additional bytes to read depending on the
    *       header.
    * </ul>
-   * <p>
    */
   static void writeZFloat(DataOutput out, float f) throws IOException {
     int intVal = (int) f;
@@ -380,7 +379,6 @@ public final class CompressingStoredFieldsWriter extends StoredFieldsWriter {
    *    <li>Bytes --&gt; Potential additional bytes to read depending on the
    *       header.
    * </ul>
-   * <p>
    */
   static void writeZDouble(DataOutput out, double d) throws IOException {
     int intVal = (int) d;
@@ -431,7 +429,6 @@ public final class CompressingStoredFieldsWriter extends StoredFieldsWriter {
    *    <li>Bytes --&gt; Potential additional bytes to read depending on the
    *       header.
    * </ul>
-   * <p>
    */
   // T for "timestamp"
   static void writeTLong(DataOutput out, long l) throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java b/lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java
index 558f38f..90c59c0 100644
--- a/lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java
+++ b/lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig.java
@@ -260,7 +260,6 @@ public final class IndexWriterConfig extends LiveIndexWriterConfig {
 
   /** Expert: Sets the {@link DocumentsWriterPerThreadPool} instance used by the
    * IndexWriter to assign thread-states to incoming indexing threads.
-   * </p>
    * <p>
    * NOTE: The given {@link DocumentsWriterPerThreadPool} instance must not be used with
    * other {@link IndexWriter} instances once it has been initialized / associated with an
diff --git a/lucene/core/src/java/org/apache/lucene/search/TermScorer.java b/lucene/core/src/java/org/apache/lucene/search/TermScorer.java
index 94951dc..5c00be8 100644
--- a/lucene/core/src/java/org/apache/lucene/search/TermScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/TermScorer.java
@@ -36,7 +36,7 @@ final class TermScorer extends Scorer {
    * @param td
    *          An iterator over the documents matching the <code>Term</code>.
    * @param docScorer
-   *          The </code>Similarity.SimScorer</code> implementation
+   *          The <code>Similarity.SimScorer</code> implementation
    *          to be used for score computations.
    */
   TermScorer(Weight weight, PostingsEnum td, Similarity.SimScorer docScorer) {
diff --git a/lucene/core/src/java/org/apache/lucene/util/fst/FST.java b/lucene/core/src/java/org/apache/lucene/util/fst/FST.java
index 06bebf9..88cbf7c 100644
--- a/lucene/core/src/java/org/apache/lucene/util/fst/FST.java
+++ b/lucene/core/src/java/org/apache/lucene/util/fst/FST.java
@@ -43,7 +43,6 @@ import org.apache.lucene.util.ArrayUtil;
 import org.apache.lucene.util.Constants;
 import org.apache.lucene.util.PriorityQueue;
 import org.apache.lucene.util.RamUsageEstimator;
-import org.apache.lucene.util.fst.Builder.UnCompiledNode;
 import org.apache.lucene.util.packed.GrowableWriter;
 import org.apache.lucene.util.packed.PackedInts;
 
@@ -104,17 +103,17 @@ public final class FST<T> implements Accountable {
   private static final byte ARCS_AS_FIXED_ARRAY = BIT_ARC_HAS_FINAL_OUTPUT;
 
   /**
-   * @see #shouldExpand(Builder, UnCompiledNode)
+   * @see #shouldExpand(Builder, Builder.UnCompiledNode)
    */
   static final int FIXED_ARRAY_SHALLOW_DISTANCE = 3; // 0 => only root node.
 
   /**
-   * @see #shouldExpand(Builder, UnCompiledNode)
+   * @see #shouldExpand(Builder, Builder.UnCompiledNode)
    */
   static final int FIXED_ARRAY_NUM_ARCS_SHALLOW = 5;
 
   /**
-   * @see #shouldExpand(Builder, UnCompiledNode)
+   * @see #shouldExpand(Builder, Builder.UnCompiledNode)
    */
   static final int FIXED_ARRAY_NUM_ARCS_DEEP = 10;
 
@@ -1332,7 +1331,7 @@ public final class FST<T> implements Accountable {
    * @see #FIXED_ARRAY_NUM_ARCS_DEEP
    * @see Builder.UnCompiledNode#depth
    */
-  private boolean shouldExpand(Builder<T> builder, UnCompiledNode<T> node) {
+  private boolean shouldExpand(Builder<T> builder, Builder.UnCompiledNode<T> node) {
     return builder.allowArrayArcs &&
       ((node.depth <= FIXED_ARRAY_SHALLOW_DISTANCE && node.numArcs >= FIXED_ARRAY_NUM_ARCS_SHALLOW) || 
        node.numArcs >= FIXED_ARRAY_NUM_ARCS_DEEP);
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/Packed64.java b/lucene/core/src/java/org/apache/lucene/util/packed/Packed64.java
index 88ba7a0..7991647 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/Packed64.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/Packed64.java
@@ -26,11 +26,11 @@ import org.apache.lucene.util.RamUsageEstimator;
 /**
  * Space optimized random access capable array of values with a fixed number of
  * bits/value. Values are packed contiguously.
- * </p><p>
+ * <p>
  * The implementation strives to perform as fast as possible under the
  * constraint of contiguous bits, by avoiding expensive operations. This comes
  * at the cost of code clarity.
- * </p><p>
+ * <p>
  * Technical details: This implementation is a refinement of a non-branching
  * version. The non-branching get and set methods meant that 2 or 4 atomics in
  * the underlying array were always accessed, even for the cases where only

