GitDiffStart: 91f42897a5111ca72cddf7e5b40632b836ec0625 | Tue Dec 1 18:29:47 2015 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 4d4d131..b7d4395 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -480,6 +480,9 @@ Bug Fixes
 * SOLR-8340: Fixed NullPointerException in HighlightComponent.
   (zengjie via Christine Poerschke)
 
+* SOLR-8355: update permissions were failing node recovery (noble , Anshum Gupta)
+
+
 Optimizations
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin.java b/solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin.java
index 0da1a87..209d0c2 100644
--- a/solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin.java
+++ b/solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin.java
@@ -142,6 +142,7 @@ public class RuleBasedAuthorizationPlugin implements AuthorizationPlugin, Config
         return MatchStatus.PERMITTED;
       }
       if (principal == null) {
+        log.info("request has come without principal. failed permission {} ",permission);
         //this resource needs a principal but the request has come without
         //any credential.
         return MatchStatus.USER_REQUIRED;
@@ -151,8 +152,10 @@ public class RuleBasedAuthorizationPlugin implements AuthorizationPlugin, Config
         Set<String> userRoles = usersVsRoles.get(principal.getName());
         if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;
       }
+      log.info("This resource is configured to have a permission {}, The principal {} does not have the right role ", permission, principal);
       return MatchStatus.FORBIDDEN;
     }
+    log.debug("No permissions configured for the resource {} . So allowed to access", context.getResource());
     return MatchStatus.NO_PERMISSIONS_FOUND;
   }
 
diff --git a/solr/core/src/java/org/apache/solr/servlet/HttpSolrCall.java b/solr/core/src/java/org/apache/solr/servlet/HttpSolrCall.java
index 73c0fd5..6aa4d89 100644
--- a/solr/core/src/java/org/apache/solr/servlet/HttpSolrCall.java
+++ b/solr/core/src/java/org/apache/solr/servlet/HttpSolrCall.java
@@ -424,6 +424,7 @@ public class HttpSolrCall {
           log.debug("USER_REQUIRED "+req.getHeader("Authorization")+" "+ req.getUserPrincipal());
         }
         if (!(authResponse.statusCode == HttpStatus.SC_ACCEPTED) && !(authResponse.statusCode == HttpStatus.SC_OK)) {
+          log.info("USER_REQUIRED auth header {} context : {} ", req.getHeader("Authorization"), context);
           sendError(authResponse.statusCode,
               "Unauthorized request, Response code: " + authResponse.statusCode);
           return RETURN;
@@ -489,8 +490,10 @@ public class HttpSolrCall {
   private boolean shouldAuthorize() {
     if(PKIAuthenticationPlugin.PATH.equals(path)) return false;
     //admin/info/key is the path where public key is exposed . it is always unsecured
-    if( cores.getPkiAuthenticationPlugin() != null && req.getUserPrincipal() != null){
-      return cores.getPkiAuthenticationPlugin().needsAuthorization(req);
+    if (cores.getPkiAuthenticationPlugin() != null && req.getUserPrincipal() != null) {
+      boolean b = cores.getPkiAuthenticationPlugin().needsAuthorization(req);
+      log.debug("PkiAuthenticationPlugin says authorization required : {} ", b);
+      return b;
     }
     return true;
   }
@@ -997,6 +1000,7 @@ public class HttpSolrCall {
           response.delete(response.length() - 1, response.length());
         
         response.append("], Path: [").append(resource).append("]");
+        response.append(" path : ").append(path).append(" params :").append(solrReq.getParams());
         return response.toString();
       }
 
diff --git a/solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java b/solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java
index b20e369..c3ef447 100644
--- a/solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java
+++ b/solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java
@@ -18,14 +18,16 @@ package org.apache.solr.update;
  */
 
 import java.io.IOException;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 
 import org.apache.lucene.index.IndexWriter;
-import org.apache.solr.cloud.RecoveryStrategy;
 import org.apache.solr.cloud.ActionThrottle;
+import org.apache.solr.cloud.RecoveryStrategy;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.SolrException.ErrorCode;
 import org.apache.solr.core.CoreContainer;
@@ -57,6 +59,7 @@ public final class DefaultSolrCoreState extends SolrCoreState implements Recover
 
   private volatile boolean recoveryRunning;
   private RecoveryStrategy recoveryStrat;
+  private Future future;
   private volatile boolean lastReplicationSuccess = true;
 
   // will we attempt recovery as if we just started up (i.e. use starting versions rather than recent versions for peersync
@@ -281,7 +284,7 @@ public final class DefaultSolrCoreState extends SolrCoreState implements Recover
         
         recoveryStrat = new RecoveryStrategy(cc, cd, this);
         recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);
-        recoveryStrat.start();
+        future = cc.getUpdateShardHandler().getUpdateExecutor().submit(recoveryStrat);
         recoveryRunning = true;
       }
     } finally {
@@ -296,10 +299,12 @@ public final class DefaultSolrCoreState extends SolrCoreState implements Recover
         recoveryStrat.close();
         while (true) {
           try {
-            recoveryStrat.join();
+            future.get();
           } catch (InterruptedException e) {
             // not interruptible - keep waiting
             continue;
+          } catch (ExecutionException e) {
+            break;
           }
           break;
         }

