GitDiffStart: 17c461e26d1617235a324d1514b32975a7385966 | Wed Jan 23 19:31:31 2008 +0000
diff --git a/client/java/solrj/CHANGES.txt b/client/java/solrj/CHANGES.txt
index d2c5fe5..16a9c5f 100644
--- a/client/java/solrj/CHANGES.txt
+++ b/client/java/solrj/CHANGES.txt
@@ -36,6 +36,9 @@ Changes in runtime behavior
     creating a new HttpClient on each request.  If your existing code overrides 
     getHttpConnection(), you will now need to override createHttpClient()
     (Sean Timm via ryan)
+    
+ 4. SOLR-436: To make future changes easier, SolrServer changed from an
+    interface to an abstract super class. (ryan)
 
 Bug Fixes
 
diff --git a/client/java/solrj/src/org/apache/solr/client/solrj/SolrServer.java b/client/java/solrj/src/org/apache/solr/client/solrj/SolrServer.java
index 3e7ca01..17544e1 100644
--- a/client/java/solrj/src/org/apache/solr/client/solrj/SolrServer.java
+++ b/client/java/solrj/src/org/apache/solr/client/solrj/SolrServer.java
@@ -20,6 +20,9 @@ package org.apache.solr.client.solrj;
 import java.io.IOException;
 import java.util.Collection;
 
+import org.apache.solr.client.solrj.request.QueryRequest;
+import org.apache.solr.client.solrj.request.SolrPing;
+import org.apache.solr.client.solrj.request.UpdateRequest;
 import org.apache.solr.client.solrj.response.QueryResponse;
 import org.apache.solr.client.solrj.response.SolrPingResponse;
 import org.apache.solr.client.solrj.response.UpdateResponse;
@@ -28,29 +31,83 @@ import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.NamedList;
 
 /**
- * 
  * @version $Id$
  * @since solr 1.3
  */
-public interface SolrServer 
+public abstract class SolrServer 
 {
-  // A general method to allow various methods 
-  NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException;
+  protected String defaultCore = null;
   
-  void setDefaultCore( String core );
-  String getDefaultCore();
+  public UpdateResponse add(Collection<SolrInputDocument> docs, boolean overwrite ) throws SolrServerException, IOException {
+    UpdateRequest req = new UpdateRequest();
+    req.add(docs);
+    req.setOverwrite(overwrite);
+    return req.process(this);
+  }
+
+  public UpdateResponse add(SolrInputDocument doc, boolean overwrite ) throws SolrServerException, IOException {
+    UpdateRequest req = new UpdateRequest();
+    req.add(doc);
+    req.setOverwrite(overwrite);
+    return req.process(this);
+  }
+
+  public UpdateResponse add(SolrInputDocument doc) throws SolrServerException, IOException {
+    return add(doc, true);
+  }
+
+  public UpdateResponse add(Collection<SolrInputDocument> docs) throws SolrServerException, IOException {
+    return add(docs, true);
+  }
+
+  /** waitFlush=true and waitSearcher=true to be inline with the defaults for plain HTTP access
+   * @throws IOException 
+   */
+  public UpdateResponse commit( ) throws SolrServerException, IOException {
+    return commit(true, true);
+  }
+
+  /** waitFlush=true and waitSearcher=true to be inline with the defaults for plain HTTP access
+   * @throws IOException 
+   */
+  public UpdateResponse optimize( ) throws SolrServerException, IOException {
+    return optimize(true, true);
+  }
+  
+  public UpdateResponse commit( boolean waitFlush, boolean waitSearcher ) throws SolrServerException, IOException {
+    return new UpdateRequest().setAction( UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher ).process( this );
+  }
+
+  public UpdateResponse optimize( boolean waitFlush, boolean waitSearcher ) throws SolrServerException, IOException {
+    return new UpdateRequest().setAction( UpdateRequest.ACTION.OPTIMIZE, waitFlush, waitSearcher ).process( this );
+  }
+
+  public UpdateResponse deleteById(String id) throws SolrServerException, IOException {
+    return new UpdateRequest().deleteById( id ).process( this );
+  }
+
+  public UpdateResponse deleteByQuery(String query) throws SolrServerException, IOException {
+    return new UpdateRequest().deleteByQuery( query ).process( this );
+  }
+
+  public SolrPingResponse ping() throws SolrServerException, IOException {
+    return new SolrPing().process( this );
+  }
+
+  public QueryResponse query(SolrParams params) throws SolrServerException {
+    return new QueryRequest( params ).process( this );
+  }
+
+  public String getDefaultCore() {
+    return defaultCore;
+  }
+
+  public void setDefaultCore(String defaultCore) {
+    this.defaultCore = defaultCore;
+  }
   
-  // Standard methods
-  UpdateResponse add( SolrInputDocument doc ) throws SolrServerException, IOException;
-  UpdateResponse add( Collection<SolrInputDocument> docs ) throws SolrServerException, IOException;
-  UpdateResponse add( SolrInputDocument doc, boolean overwrite ) throws SolrServerException, IOException;
-  UpdateResponse add( Collection<SolrInputDocument> docs, boolean overwrite ) throws SolrServerException, IOException;
-  UpdateResponse deleteById( String id ) throws SolrServerException, IOException;
-  UpdateResponse deleteByQuery( String query ) throws SolrServerException, IOException;
-  UpdateResponse commit( boolean waitFlush, boolean waitSearcher ) throws SolrServerException, IOException;
-  UpdateResponse optimize( boolean waitFlush, boolean waitSearcher ) throws SolrServerException, IOException;
-  UpdateResponse commit( ) throws SolrServerException, IOException;
-  UpdateResponse optimize( ) throws SolrServerException, IOException;
-  QueryResponse query( SolrParams params ) throws SolrServerException, IOException;
-  SolrPingResponse ping() throws SolrServerException, IOException;
+  /**
+   * SolrServer implementations need to implement a how a request is actually processed
+   */ 
+  public abstract NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException; 
 }
\ No newline at end of file
diff --git a/client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java b/client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java
index 4ad3ee9..23407e7 100644
--- a/client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java
+++ b/client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java
@@ -23,8 +23,8 @@ import java.io.StringWriter;
 
 import org.apache.solr.client.solrj.ResponseParser;
 import org.apache.solr.client.solrj.SolrRequest;
+import org.apache.solr.client.solrj.SolrServer;
 import org.apache.solr.client.solrj.SolrServerException;
-import org.apache.solr.client.solrj.impl.BaseSolrServer;
 import org.apache.solr.client.solrj.impl.XMLResponseParser;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.params.CommonParams;
@@ -49,7 +49,7 @@ import org.apache.solr.servlet.SolrRequestParsers;
  * @version $Id$
  * @since solr 1.3
  */
-public class EmbeddedSolrServer extends BaseSolrServer 
+public class EmbeddedSolrServer extends SolrServer
 {
   protected ModifiableSolrParams _invariantParams;
   protected ResponseParser _processor;
diff --git a/client/java/solrj/src/org/apache/solr/client/solrj/impl/BaseSolrServer.java b/client/java/solrj/src/org/apache/solr/client/solrj/impl/BaseSolrServer.java
deleted file mode 100644
index 79edfe5..0000000
--- a/client/java/solrj/src/org/apache/solr/client/solrj/impl/BaseSolrServer.java
+++ /dev/null
@@ -1,111 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.client.solrj.impl;
-
-import java.io.IOException;
-import java.util.Collection;
-
-import org.apache.solr.client.solrj.SolrServer;
-import org.apache.solr.client.solrj.SolrServerException;
-import org.apache.solr.client.solrj.request.QueryRequest;
-import org.apache.solr.client.solrj.request.SolrPing;
-import org.apache.solr.client.solrj.request.UpdateRequest;
-import org.apache.solr.client.solrj.response.QueryResponse;
-import org.apache.solr.client.solrj.response.SolrPingResponse;
-import org.apache.solr.client.solrj.response.UpdateResponse;
-import org.apache.solr.common.SolrInputDocument;
-import org.apache.solr.common.params.SolrParams;
-
-/**
- * Base class that converts the server request into the more verbose general request framework.
- * 
- * @version $Id$
- * @since solr 1.3
- */
-public abstract class BaseSolrServer implements SolrServer 
-{
-  protected String defaultCore = null;
-  
-  public UpdateResponse add(Collection<SolrInputDocument> docs, boolean overwrite ) throws SolrServerException, IOException {
-    UpdateRequest req = new UpdateRequest();
-    req.add(docs);
-    req.setOverwrite(overwrite);
-    return req.process(this);
-  }
-
-  public UpdateResponse add(SolrInputDocument doc, boolean overwrite ) throws SolrServerException, IOException {
-    UpdateRequest req = new UpdateRequest();
-    req.add(doc);
-    req.setOverwrite(overwrite);
-    return req.process(this);
-  }
-
-  public UpdateResponse add(SolrInputDocument doc) throws SolrServerException, IOException {
-    return add(doc, true);
-  }
-
-  public UpdateResponse add(Collection<SolrInputDocument> docs) throws SolrServerException, IOException {
-    return add(docs, true);
-  }
-
-  /** waitFlush=true and waitSearcher=true to be inline with the defaults for plain HTTP access
-   * @throws IOException 
-   */
-  public UpdateResponse commit( ) throws SolrServerException, IOException {
-    return commit(true, true);
-  }
-
-  /** waitFlush=true and waitSearcher=true to be inline with the defaults for plain HTTP access
-   * @throws IOException 
-   */
-  public UpdateResponse optimize( ) throws SolrServerException, IOException {
-    return optimize(true, true);
-  }
-  
-  public UpdateResponse commit( boolean waitFlush, boolean waitSearcher ) throws SolrServerException, IOException {
-    return new UpdateRequest().setAction( UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher ).process( this );
-  }
-
-  public UpdateResponse optimize( boolean waitFlush, boolean waitSearcher ) throws SolrServerException, IOException {
-    return new UpdateRequest().setAction( UpdateRequest.ACTION.OPTIMIZE, waitFlush, waitSearcher ).process( this );
-  }
-
-  public UpdateResponse deleteById(String id) throws SolrServerException, IOException {
-    return new UpdateRequest().deleteById( id ).process( this );
-  }
-
-  public UpdateResponse deleteByQuery(String query) throws SolrServerException, IOException {
-    return new UpdateRequest().deleteByQuery( query ).process( this );
-  }
-
-  public SolrPingResponse ping() throws SolrServerException, IOException {
-    return new SolrPing().process( this );
-  }
-
-  public QueryResponse query(SolrParams params) throws SolrServerException {
-    return new QueryRequest( params ).process( this );
-  }
-
-  public String getDefaultCore() {
-    return defaultCore;
-  }
-
-  public void setDefaultCore(String defaultCore) {
-    this.defaultCore = defaultCore;
-  }
-}
diff --git a/client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer.java b/client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer.java
index 2bf253c..685bf73 100644
--- a/client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer.java
+++ b/client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer.java
@@ -46,6 +46,7 @@ import org.apache.commons.httpclient.methods.multipart.PartBase;
 import org.apache.commons.io.IOUtils;
 import org.apache.solr.client.solrj.ResponseParser;
 import org.apache.solr.client.solrj.SolrRequest;
+import org.apache.solr.client.solrj.SolrServer;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.util.ClientUtils;
 import org.apache.solr.common.SolrException;
@@ -61,7 +62,7 @@ import org.apache.solr.common.util.NamedList;
  * @version $Id$
  * @since solr 1.3
  */
-public class CommonsHttpSolrServer extends BaseSolrServer 
+public class CommonsHttpSolrServer extends SolrServer 
 {
   public static final String AGENT = "Solr["+CommonsHttpSolrServer.class.getName()+"] 1.0"; 
   

