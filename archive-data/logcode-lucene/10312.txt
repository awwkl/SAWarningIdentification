GitDiffStart: c08e5eaf2011cbb5da96d0216b7713e6d0c24983 | Thu Dec 6 22:36:52 2012 +0000
diff --git a/solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner.java b/solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner.java
index 6662b59..5f96b27 100644
--- a/solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner.java
+++ b/solr/core/src/test/org/apache/solr/cloud/TestHashPartitioner.java
@@ -17,6 +17,7 @@ package org.apache.solr.cloud;
  * the License.
  */
 
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -97,6 +98,15 @@ public class TestHashPartitioner extends SolrTestCaseJ4 {
     DocRouter router = coll.getRouter();
     Slice target = router.getTargetSlice(id, null, null, coll);
     assertEquals(expectedShard, target.getName());
+
+    Collection<Slice> slices = router.getSearchSlices(id, null, coll);
+if (slices.size() != 1) { // nocommit
+  slices = router.getSearchSlices(id, null, coll);
+}
+
+    assertEquals(1, slices.size());
+    target = slices.iterator().next();
+    assertEquals(expectedShard, target.getName());
   }
 
 
diff --git a/solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter.java b/solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter.java
index 7718a42..8d89694 100644
--- a/solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter.java
+++ b/solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter.java
@@ -122,16 +122,18 @@ public class CompositeIdRouter extends HashBasedRouter {
     int upperBits = hash1 & m1;
     int lowerBound = upperBits;
     int upperBound = upperBits | m2;
+
+    // lowerBound will be greater than upperBound if we are in the negatives
     Range completeRange = new Range(lowerBound, upperBound);
 
-    List<Slice> slices = new ArrayList(1);
-    for (Slice slice : slices) {
+    List<Slice> targetSlices = new ArrayList<Slice>(1);
+    for (Slice slice : collection.getSlices()) {
       Range range = slice.getRange();
       if (range != null && range.overlaps(completeRange)) {
-        slices.add(slice);
+        targetSlices.add(slice);
       }
     }
 
-    return slices;
+    return targetSlices;
   }
 }

