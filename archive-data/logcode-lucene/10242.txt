GitDiffStart: e2f54df3ca7639f143b195f75adbc5ee97187b92 | Tue Dec 11 14:31:01 2012 +0000
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ar/ArabicNormalizationFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ar/ArabicNormalizationFilterFactory.java
index 780d70f..98c4d88 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ar/ArabicNormalizationFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ar/ArabicNormalizationFilterFactory.java
@@ -37,6 +37,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  */
 public class ArabicNormalizationFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
 
+  @Override
   public ArabicNormalizationFilter create(TokenStream input) {
     return new ArabicNormalizationFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ar/ArabicStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ar/ArabicStemFilterFactory.java
index 94dda71..1690b74 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ar/ArabicStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ar/ArabicStemFilterFactory.java
@@ -37,6 +37,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
 public class ArabicStemFilterFactory extends TokenFilterFactory {
 
 
+  @Override
   public ArabicStemFilter create(TokenStream input) {
     return new ArabicStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/bg/BulgarianStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/bg/BulgarianStemFilterFactory.java
index fdee644..95af6e4 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/bg/BulgarianStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/bg/BulgarianStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class BulgarianStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new BulgarianStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianStemFilterFactory.java
index fde9ebe..4add369 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class BrazilianStemFilterFactory extends TokenFilterFactory {
+  @Override
   public BrazilianStemFilter create(TokenStream in) {
     return new BrazilianStemFilter(in);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterFactory.java
index 82381b2..9267ea3 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterFactory.java
@@ -43,6 +43,7 @@ import java.util.regex.Pattern;
   Set<String> escapedTags = null;
   Pattern TAG_NAME_PATTERN = Pattern.compile("[^\\s,]+");
 
+  @Override
   public HTMLStripCharFilter create(Reader input) {
     HTMLStripCharFilter charFilter;
     if (null == escapedTags) {
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory.java
index c0d8d5b..2b3c31a 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory.java
@@ -50,6 +50,7 @@ public class MappingCharFilterFactory extends CharFilterFactory implements
   private String mapping;
 
   // TODO: this should use inputstreams from the loader, not File!
+  @Override
   public void inform(ResourceLoader loader) throws IOException {
     mapping = args.get("mapping");
 
@@ -77,6 +78,7 @@ public class MappingCharFilterFactory extends CharFilterFactory implements
     }
   }
 
+  @Override
   public Reader create(Reader input) {
     // if the map is null, it means there's actually no mappings... just return the original stream
     // as there is nothing to do here.
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKWidthFilter.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKWidthFilter.java
index 7a47983..d01bae4 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKWidthFilter.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKWidthFilter.java
@@ -58,6 +58,7 @@ public final class CJKWidthFilter extends TokenFilter {
     super(input);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       char text[] = termAtt.buffer();
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilterFactory.java
index 20c371a..1861f0b 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilterFactory.java
@@ -42,6 +42,7 @@ import org.apache.lucene.analysis.util.*;
 public class CommonGramsFilterFactory extends TokenFilterFactory implements
     ResourceLoaderAware {
 
+  @Override
   public void inform(ResourceLoader loader) throws IOException {
     String commonWordFiles = args.get("words");
     ignoreCase = getBoolean("ignoreCase", false);
@@ -69,6 +70,7 @@ public class CommonGramsFilterFactory extends TokenFilterFactory implements
     return commonWords;
   }
 
+  @Override
   public CommonGramsFilter create(TokenStream input) {
     CommonGramsFilter commonGrams = new CommonGramsFilter(luceneMatchVersion, input, commonWords);
     return commonGrams;
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactory.java
index a9e4a73..2db6917 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactory.java
@@ -50,6 +50,7 @@ public class CommonGramsQueryFilterFactory extends TokenFilterFactory
     assureMatchVersion();
   }
 
+  @Override
   public void inform(ResourceLoader loader) throws IOException {
     String commonWordFiles = args.get("words");
     ignoreCase = getBoolean("ignoreCase", false);
@@ -82,6 +83,7 @@ public class CommonGramsQueryFilterFactory extends TokenFilterFactory
   /**
    * Create a CommonGramsFilter and wrap it with a CommonGramsQueryFilter
    */
+  @Override
   public CommonGramsQueryFilter create(TokenStream input) {
     CommonGramsFilter commonGrams = new CommonGramsFilter(luceneMatchVersion, input, commonWords);
     CommonGramsQueryFilter commonGramsQuery = new CommonGramsQueryFilter(
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory.java
index d5b30ae..5a86ecd 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory.java
@@ -56,9 +56,11 @@ public class DictionaryCompoundWordTokenFilterFactory extends TokenFilterFactory
     maxSubwordSize= getInt("maxSubwordSize",CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);
     onlyLongestMatch = getBoolean("onlyLongestMatch",true);
   }
+  @Override
   public void inform(ResourceLoader loader) throws IOException {
     dictionary = super.getWordSet(loader, dictFile, false);
   }
+  @Override
   public TokenStream create(TokenStream input) {
     // if the dictionary is null, it means it was empty
     return dictionary == null ? input : new DictionaryCompoundWordTokenFilter(luceneMatchVersion,input,dictionary,minWordSize,minSubwordSize,maxSubwordSize,onlyLongestMatch);
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory.java
index 9a932c7..1a6d586 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory.java
@@ -85,6 +85,7 @@ public class HyphenationCompoundWordTokenFilterFactory extends TokenFilterFactor
     onlyLongestMatch = getBoolean("onlyLongestMatch", false);
   }
   
+  @Override
   public void inform(ResourceLoader loader) throws IOException {
     InputStream stream = null;
     try {
@@ -102,6 +103,7 @@ public class HyphenationCompoundWordTokenFilterFactory extends TokenFilterFactor
     }
   }
   
+  @Override
   public HyphenationCompoundWordTokenFilter create(TokenStream input) {
     return new HyphenationCompoundWordTokenFilter(luceneMatchVersion, input, hyphenator, dictionary, minWordSize, minSubwordSize, maxSubwordSize, onlyLongestMatch);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.java
index b37ef9b..b988c46 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.java
@@ -414,6 +414,7 @@ public class HyphenationTree extends TernaryTree implements PatternConsumer {
    * case characters, in this case a class for letter 'a', for example, should
    * be defined as "aA", the first character being the normalization char.
    */
+  @Override
   public void addClass(String chargroup) {
     if (chargroup.length() > 0) {
       char equivChar = chargroup.charAt(0);
@@ -435,6 +436,7 @@ public class HyphenationTree extends TernaryTree implements PatternConsumer {
    * @param hyphenatedword a vector of alternating strings and
    *        {@link Hyphen hyphen} objects.
    */
+  @Override
   public void addException(String word, ArrayList<Object> hyphenatedword) {
     stoplist.put(word, hyphenatedword);
   }
@@ -449,6 +451,7 @@ public class HyphenationTree extends TernaryTree implements PatternConsumer {
    *        priority of hyphenating at a given point within the pattern. It
    *        should contain only digit characters. (i.e. '0' to '9').
    */
+  @Override
   public void addPattern(String pattern, String ivalue) {
     int k = ivalues.find(ivalue);
     if (k <= 0) {
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java
index b2e9873..a48c571 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java
@@ -515,6 +515,7 @@ public class TernaryTree implements Cloneable {
       run();
     }
 
+    @Override
     public String nextElement() {
       String res = new String(curkey);
       cur = up();
@@ -529,6 +530,7 @@ public class TernaryTree implements Cloneable {
       return 0;
     }
 
+    @Override
     public boolean hasMoreElements() {
       return (cur != -1);
     }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/KeywordTokenizerFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/KeywordTokenizerFactory.java
index 1a733fc..526025d 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/KeywordTokenizerFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/KeywordTokenizerFactory.java
@@ -33,6 +33,7 @@ import java.io.Reader;
  *
  */
 public class KeywordTokenizerFactory extends TokenizerFactory {
+  @Override
   public KeywordTokenizer create(Reader input) {
     return new KeywordTokenizer(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/LetterTokenizerFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/LetterTokenizerFactory.java
index e304a9e..7a3cb69 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/LetterTokenizerFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/LetterTokenizerFactory.java
@@ -41,6 +41,7 @@ public class LetterTokenizerFactory extends TokenizerFactory {
     assureMatchVersion();
   }
 
+  @Override
   public LetterTokenizer create(Reader input) {
     return new LetterTokenizer(luceneMatchVersion, input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/LowerCaseFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/LowerCaseFilterFactory.java
index 3f7e179..af17e6c 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/LowerCaseFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/LowerCaseFilterFactory.java
@@ -43,6 +43,7 @@ public class LowerCaseFilterFactory extends TokenFilterFactory implements MultiT
     assureMatchVersion();
   }
 
+  @Override
   public LowerCaseFilter create(TokenStream input) {
     return new LowerCaseFilter(luceneMatchVersion,input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/LowerCaseTokenizerFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/LowerCaseTokenizerFactory.java
index f2d78f1..d669c04 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/LowerCaseTokenizerFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/LowerCaseTokenizerFactory.java
@@ -42,6 +42,7 @@ public class LowerCaseTokenizerFactory extends TokenizerFactory implements Multi
     assureMatchVersion();
   }
 
+  @Override
   public LowerCaseTokenizer create(Reader input) {
     return new LowerCaseTokenizer(luceneMatchVersion,input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/WhitespaceTokenizerFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/WhitespaceTokenizerFactory.java
index 6844e3c..3372ced 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/WhitespaceTokenizerFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/core/WhitespaceTokenizerFactory.java
@@ -40,6 +40,7 @@ public class WhitespaceTokenizerFactory extends TokenizerFactory {
     assureMatchVersion();
   }
 
+  @Override
   public WhitespaceTokenizer create(Reader input) {
     return new WhitespaceTokenizer(luceneMatchVersion,input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/cz/CzechStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/cz/CzechStemFilterFactory.java
index f177d53..c64d107 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/cz/CzechStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/cz/CzechStemFilterFactory.java
@@ -33,6 +33,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  * &lt;/fieldType&gt;</pre>
  */
 public class CzechStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new CzechStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanLightStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanLightStemFilterFactory.java
index 1bf90f2..f6f6962 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanLightStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanLightStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class GermanLightStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new GermanLightStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanMinimalStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanMinimalStemFilterFactory.java
index c01c33f..37fc1cb 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanMinimalStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanMinimalStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class GermanMinimalStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new GermanMinimalStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanNormalizationFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanNormalizationFilterFactory.java
index 863f578..81e8e42 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanNormalizationFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanNormalizationFilterFactory.java
@@ -36,6 +36,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  */
 public class GermanNormalizationFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
 
+  @Override
   public TokenStream create(TokenStream input) {
     return new GermanNormalizationFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanStemFilterFactory.java
index 2ae5770..857c934 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class GermanStemFilterFactory extends TokenFilterFactory {
+  @Override
   public GermanStemFilter create(TokenStream in) {
     return new GermanStemFilter(in);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilterFactory.java
index 4c92d5d..fc126b0 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilterFactory.java
@@ -48,10 +48,12 @@ public class GreekLowerCaseFilterFactory extends TokenFilterFactory implements M
           + "Please process your documents as Unicode instead.");
   }
 
+  @Override
   public GreekLowerCaseFilter create(TokenStream in) {
     return new GreekLowerCaseFilter(luceneMatchVersion, in);
   }
 
+  @Override
   public AbstractAnalysisFactory getMultiTermComponent() {
     return this;
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekStemFilterFactory.java
index e6b5395..8e363b8 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekStemFilterFactory.java
@@ -35,6 +35,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  */
 public class GreekStemFilterFactory extends TokenFilterFactory {
 
+  @Override
   public TokenStream create(TokenStream input) {
     return new GreekStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishMinimalStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishMinimalStemFilterFactory.java
index 830b0f9..dd648d3 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishMinimalStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishMinimalStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class EnglishMinimalStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new EnglishMinimalStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishPossessiveFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishPossessiveFilterFactory.java
index e1c7447..f10c56b 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishPossessiveFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishPossessiveFilterFactory.java
@@ -43,6 +43,7 @@ public class EnglishPossessiveFilterFactory extends TokenFilterFactory {
     assureMatchVersion();
   }
   
+  @Override
   public TokenStream create(TokenStream input) {
     return new EnglishPossessiveFilter(luceneMatchVersion, input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilterFactory.java
index f8647d3..ca579d4 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilterFactory.java
@@ -27,6 +27,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  */
 public class KStemFilterFactory extends TokenFilterFactory {
 
+  @Override
   public TokenFilter create(TokenStream input) {
     return new KStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemFilterFactory.java
index b04a585..cbe0c4d 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class PorterStemFilterFactory extends TokenFilterFactory {
+  @Override
   public PorterStemFilter create(TokenStream input) {
     return new PorterStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/es/SpanishLightStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/es/SpanishLightStemFilterFactory.java
index b0c8542..c99ad96 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/es/SpanishLightStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/es/SpanishLightStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class SpanishLightStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new SpanishLightStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianNormalizationFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianNormalizationFilterFactory.java
index 304aa64..9c3506d 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianNormalizationFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianNormalizationFilterFactory.java
@@ -36,6 +36,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class PersianNormalizationFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
+  @Override
   public PersianNormalizationFilter create(TokenStream input) {
     return new PersianNormalizationFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/fi/FinnishLightStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/fi/FinnishLightStemFilterFactory.java
index 6f9b852..6a11fa7 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/fi/FinnishLightStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/fi/FinnishLightStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class FinnishLightStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new FinnishLightStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchLightStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchLightStemFilterFactory.java
index 37f71a5..addac97 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchLightStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchLightStemFilterFactory.java
@@ -35,6 +35,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class FrenchLightStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new FrenchLightStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchMinimalStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchMinimalStemFilterFactory.java
index 20f51e7..b49b2b8 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchMinimalStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchMinimalStemFilterFactory.java
@@ -35,6 +35,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class FrenchMinimalStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new FrenchMinimalStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/gl/GalicianMinimalStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/gl/GalicianMinimalStemFilterFactory.java
index 0a39b07..1256d49 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/gl/GalicianMinimalStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/gl/GalicianMinimalStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class GalicianMinimalStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new GalicianMinimalStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/gl/GalicianStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/gl/GalicianStemFilterFactory.java
index 5ad7d3c..5730cd3 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/gl/GalicianStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/gl/GalicianStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class GalicianStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new GalicianStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/hi/HindiNormalizationFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/hi/HindiNormalizationFilterFactory.java
index 1067a05..c1774d1 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/hi/HindiNormalizationFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/hi/HindiNormalizationFilterFactory.java
@@ -35,6 +35,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class HindiNormalizationFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
+  @Override
   public TokenStream create(TokenStream input) {
     return new HindiNormalizationFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/hi/HindiStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/hi/HindiStemFilterFactory.java
index db6e352..2de90b4 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/hi/HindiStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/hi/HindiStemFilterFactory.java
@@ -33,6 +33,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class HindiStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new HindiStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/hu/HungarianLightStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/hu/HungarianLightStemFilterFactory.java
index 35a4719..3938d4f 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/hu/HungarianLightStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/hu/HungarianLightStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class HungarianLightStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new HungarianLightStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary.java
index b04e380..7abf1b0 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary.java
@@ -447,6 +447,7 @@ public class HunspellDictionary {
     /**
      * {@inheritDoc}
      */
+    @Override
     public char[] parseFlags(String rawFlags) {
       return rawFlags.toCharArray();
     }
@@ -460,6 +461,7 @@ public class HunspellDictionary {
     /**
      * {@inheritDoc}
      */
+    @Override
     public char[] parseFlags(String rawFlags) {
       String[] rawFlagParts = rawFlags.trim().split(",");
       char[] flags = new char[rawFlagParts.length];
@@ -484,6 +486,7 @@ public class HunspellDictionary {
     /**
      * {@inheritDoc}
      */
+    @Override
     public char[] parseFlags(String rawFlags) {
       if (rawFlags.length() == 0) {
         return new char[0];
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory.java
index c602675..593b997 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory.java
@@ -67,6 +67,7 @@ public class HunspellStemFilterFactory extends TokenFilterFactory implements Res
    *  
    * @param loader ResourceLoader used to load the files
    */
+  @Override
   public void inform(ResourceLoader loader) throws IOException {
     assureMatchVersion();
     String dictionaryArg = args.get(PARAM_DICTIONARY);
@@ -116,6 +117,7 @@ public class HunspellStemFilterFactory extends TokenFilterFactory implements Res
    * @param tokenStream TokenStream that will be filtered
    * @return HunspellStemFilter that filters the TokenStream 
    */
+  @Override
   public TokenStream create(TokenStream tokenStream) {
     return new HunspellStemFilter(tokenStream, dictionary);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianStemFilterFactory.java
index 966026d..91d3d32 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianStemFilterFactory.java
@@ -44,6 +44,7 @@ public class IndonesianStemFilterFactory extends TokenFilterFactory {
     stemDerivational = getBoolean("stemDerivational", true);
   }
 
+  @Override
   public TokenStream create(TokenStream input) {
     return new IndonesianStemFilter(input, stemDerivational);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/in/IndicNormalizationFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/in/IndicNormalizationFilterFactory.java
index cad729a..103fefa 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/in/IndicNormalizationFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/in/IndicNormalizationFilterFactory.java
@@ -35,6 +35,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class IndicNormalizationFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
+  @Override
   public TokenStream create(TokenStream input) {
     return new IndicNormalizationFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/it/ItalianLightStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/it/ItalianLightStemFilterFactory.java
index 1d2c971..c1d10dd 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/it/ItalianLightStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/it/ItalianLightStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class ItalianLightStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new ItalianLightStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemFilterFactory.java
index 7e3cc1b..cbae0c3 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/lv/LatvianStemFilterFactory.java
@@ -33,6 +33,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  * &lt;/fieldType&gt;</pre>
  */
 public class LatvianStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new LatvianStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory.java
index b575666..d07c998 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory.java
@@ -35,6 +35,7 @@ import org.apache.lucene.analysis.TokenStream;
  *
  */
 public class ASCIIFoldingFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
+  @Override
   public ASCIIFoldingFilter create(TokenStream input) {
     return new ASCIIFoldingFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory.java
index d0aec16..c02dd7c 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory.java
@@ -133,6 +133,7 @@ public class CapitalizationFilterFactory extends TokenFilterFactory {
     }
   }
 
+  @Override
   public CapitalizationFilter create(TokenStream input) {
     return new CapitalizationFilter(input, onlyFirstWord, keep, 
       forceFirstLetter, okPrefix, minWordLength, maxWordCount, maxTokenLength);
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilterFactory.java
index 225551c..0477810 100755
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilterFactory.java
@@ -33,6 +33,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class HyphenatedWordsFilterFactory extends TokenFilterFactory {
+  @Override
   public HyphenatedWordsFilter create(TokenStream input) {
     return new HyphenatedWordsFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/KeepWordFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/KeepWordFilterFactory.java
index b0c7796..7bc7c54 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/KeepWordFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/KeepWordFilterFactory.java
@@ -44,6 +44,7 @@ public class KeepWordFilterFactory extends TokenFilterFactory implements Resourc
     assureMatchVersion();
   }
 
+  @Override
   public void inform(ResourceLoader loader) throws IOException {
     String wordFiles = args.get("words");
     ignoreCase = getBoolean("ignoreCase", false);
@@ -85,6 +86,7 @@ public class KeepWordFilterFactory extends TokenFilterFactory implements Resourc
     return words;
   }
 
+  @Override
   public TokenStream create(TokenStream input) {
     // if the set is null, it means it was empty
     return words == null ? input : new KeepWordFilter(enablePositionIncrements, input, words);
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilterFactory.java
index 40a1045..c726927 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilterFactory.java
@@ -39,6 +39,7 @@ public class KeywordMarkerFilterFactory extends TokenFilterFactory implements Re
   private CharArraySet protectedWords;
   private boolean ignoreCase;
   
+  @Override
   public void inform(ResourceLoader loader) throws IOException {
     String wordFiles = args.get(PROTECTED_TOKENS);
     ignoreCase = getBoolean("ignoreCase", false);
@@ -51,6 +52,7 @@ public class KeywordMarkerFilterFactory extends TokenFilterFactory implements Re
     return ignoreCase;
   }
 
+  @Override
   public TokenStream create(TokenStream input) {
     return protectedWords == null ? input : new KeywordMarkerFilter(input, protectedWords);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory.java
index 45f529c..20ea023 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory.java
@@ -53,6 +53,7 @@ public class LengthFilterFactory extends TokenFilterFactory {
     enablePositionIncrements = getBoolean("enablePositionIncrements",false);
   }
   
+  @Override
   public LengthFilter create(TokenStream input) {
     return new LengthFilter(enablePositionIncrements, input,min,max);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilterFactory.java
index b5bf8d7..06a885c 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilterFactory.java
@@ -33,6 +33,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class RemoveDuplicatesTokenFilterFactory extends TokenFilterFactory {
+  @Override
   public RemoveDuplicatesTokenFilter create(TokenStream input) {
     return new RemoveDuplicatesTokenFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory.java
index 1270b2e..ed0ab57 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory.java
@@ -39,6 +39,7 @@ public class StemmerOverrideFilterFactory extends TokenFilterFactory implements
   private CharArrayMap<String> dictionary = null;
   private boolean ignoreCase;
 
+  @Override
   public void inform(ResourceLoader loader) throws IOException {
     String dictionaryFiles = args.get("dictionary");
     ignoreCase = getBoolean("ignoreCase", false);
@@ -63,6 +64,7 @@ public class StemmerOverrideFilterFactory extends TokenFilterFactory implements
     return ignoreCase;
   }
 
+  @Override
   public TokenStream create(TokenStream input) {
     return dictionary == null ? input : new StemmerOverrideFilter(luceneMatchVersion, input, dictionary);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilterFactory.java
index f3dd127..c81461b 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilterFactory.java
@@ -49,6 +49,7 @@ public class TrimFilterFactory extends TokenFilterFactory {
     }
   }
   
+  @Override
   public TrimFilter create(TokenStream input) {
     return new TrimFilter(input, updateOffsets);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.java
index 527eb53..38dba6e 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.java
@@ -202,6 +202,7 @@ public final class WordDelimiterFilter extends TokenFilter {
     this(in, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE, configurationFlags, protWords);
   }
 
+  @Override
   public boolean incrementToken() throws IOException {
     while (true) {
       if (!hasSavedState) {
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory.java
index 0b4601d..b68ca71 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory.java
@@ -53,6 +53,7 @@ public class WordDelimiterFilterFactory extends TokenFilterFactory implements Re
   public static final String PROTECTED_TOKENS = "protected";
   public static final String TYPES = "types";
   
+  @Override
   public void inform(ResourceLoader loader) throws IOException {
     String wordFiles = args.get(PROTECTED_TOKENS);
     if (wordFiles != null) {  
@@ -106,6 +107,7 @@ public class WordDelimiterFilterFactory extends TokenFilterFactory implements Re
     }
   }
 
+  @Override
   public WordDelimiterFilter create(TokenStream input) {
     return new WordDelimiterFilter(input, typeTable == null ? WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE : typeTable,
                                    flags, protectedWords);
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramFilterFactory.java
index 78a20ea..ac60062 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramFilterFactory.java
@@ -57,6 +57,7 @@ public class EdgeNGramFilterFactory extends TokenFilterFactory {
     }
   }
 
+  @Override
   public EdgeNGramTokenFilter create(TokenStream input) {
     return new EdgeNGramTokenFilter(input, side, minGramSize, maxGramSize);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerFactory.java
index be0be2c..67e95af 100755
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerFactory.java
@@ -55,6 +55,7 @@ public class EdgeNGramTokenizerFactory extends TokenizerFactory {
     }
   }
   
+  @Override
   public EdgeNGramTokenizer create(Reader input) {
     return new EdgeNGramTokenizer(input, side, minGramSize, maxGramSize);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramFilterFactory.java
index d202fcf..3708c48 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramFilterFactory.java
@@ -51,6 +51,7 @@ public class NGramFilterFactory extends TokenFilterFactory {
         : NGramTokenFilter.DEFAULT_MIN_NGRAM_SIZE);
   }
 
+  @Override
   public NGramTokenFilter create(TokenStream input) {
     return new NGramTokenFilter(input, minGramSize, maxGramSize);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizerFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizerFactory.java
index 0f5c625..01c2072 100755
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizerFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizerFactory.java
@@ -50,6 +50,7 @@ public class NGramTokenizerFactory extends TokenizerFactory {
   }
   
   /** Creates the {@link TokenStream} of n-grams from the given {@link Reader}. */
+  @Override
   public NGramTokenizer create(Reader input) {
     return new NGramTokenizer(input, minGramSize, maxGramSize);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianLightStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianLightStemFilterFactory.java
index 771d37b..99a11d6 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianLightStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianLightStemFilterFactory.java
@@ -33,6 +33,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  * &lt;/fieldType&gt;</pre>
  */
 public class NorwegianLightStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new NorwegianLightStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianMinimalStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianMinimalStemFilterFactory.java
index 2ce8a97..5caed3c 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianMinimalStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianMinimalStemFilterFactory.java
@@ -33,6 +33,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  * &lt;/fieldType&gt;</pre>
  */
 public class NorwegianMinimalStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new NorwegianMinimalStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/path/PathHierarchyTokenizerFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/path/PathHierarchyTokenizerFactory.java
index 9cffac8..28b7301 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/path/PathHierarchyTokenizerFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/path/PathHierarchyTokenizerFactory.java
@@ -120,6 +120,7 @@ public class PathHierarchyTokenizerFactory extends TokenizerFactory {
     }
   }
 
+  @Override
   public Tokenizer create(Reader input) {
     if( reverse ) {
       return new ReversePathHierarchyTokenizer(input, delimiter, replacement, skip);
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilterFactory.java
index ce2772b..90ca0ca 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilterFactory.java
@@ -54,6 +54,7 @@ public class PatternReplaceCharFilterFactory extends CharFilterFactory {
     // TODO: throw exception if you set maxBlockChars or blockDelimiters ?
   }
 
+  @Override
   public CharFilter create(Reader input) {
     return new PatternReplaceCharFilter( p, replacement, input );
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceFilterFactory.java
index d7d7268..c522530 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceFilterFactory.java
@@ -65,6 +65,7 @@ public class PatternReplaceFilterFactory extends TokenFilterFactory {
     }
 
   }
+  @Override
   public PatternReplaceFilter create(TokenStream input) {
     return new PatternReplaceFilter(input, p, replacement, all);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizerFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizerFactory.java
index ac0e32f..250a46a 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizerFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizerFactory.java
@@ -90,6 +90,7 @@ public class PatternTokenizerFactory extends TokenizerFactory
   /**
    * Split the input using configured pattern
    */
+  @Override
   public Tokenizer create(final Reader in) {
     try {
       return new PatternTokenizer(in, pattern, group);
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/AbstractEncoder.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/AbstractEncoder.java
index 8ed1d37..f7ddd55 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/AbstractEncoder.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/AbstractEncoder.java
@@ -26,6 +26,7 @@ import org.apache.lucene.util.BytesRef;
  *
  **/
 public abstract class AbstractEncoder implements PayloadEncoder {
+  @Override
   public BytesRef encode(char[] buffer) {
     return encode(buffer, 0, buffer.length);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterFactory.java
index 3996170..f95ec31 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterFactory.java
@@ -49,6 +49,7 @@ public class DelimitedPayloadTokenFilterFactory extends TokenFilterFactory imple
   private PayloadEncoder encoder;
   private char delimiter = '|';
 
+  @Override
   public DelimitedPayloadTokenFilter create(TokenStream input) {
     return new DelimitedPayloadTokenFilter(input, delimiter, encoder);
   }
@@ -58,6 +59,7 @@ public class DelimitedPayloadTokenFilterFactory extends TokenFilterFactory imple
     super.init(args);
   }
 
+  @Override
   public void inform(ResourceLoader loader) {
     String encoderClass = args.get(ENCODER_ATTR);
     if (encoderClass == null) {
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/FloatEncoder.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/FloatEncoder.java
index e7b10e8..5319a5e 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/FloatEncoder.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/FloatEncoder.java
@@ -27,6 +27,7 @@ import org.apache.lucene.util.BytesRef;
  **/
 public class FloatEncoder extends AbstractEncoder implements PayloadEncoder {
 
+  @Override
   public BytesRef encode(char[] buffer, int offset, int length) {
     float payload = Float.parseFloat(new String(buffer, offset, length));//TODO: improve this so that we don't have to new Strings
     byte[] bytes = PayloadHelper.encodeFloat(payload);
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/IdentityEncoder.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/IdentityEncoder.java
index ff5219d..cc5939c 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/IdentityEncoder.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/IdentityEncoder.java
@@ -37,6 +37,7 @@ public class IdentityEncoder extends AbstractEncoder implements PayloadEncoder{
     this.charset = charset;
   }
 
+  @Override
   public BytesRef encode(char[] buffer, int offset, int length) {
     final ByteBuffer bb = charset.encode(CharBuffer.wrap(buffer, offset, length));
     if (bb.hasArray()) {
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/IntegerEncoder.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/IntegerEncoder.java
index 820e501..2f1de16 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/IntegerEncoder.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/IntegerEncoder.java
@@ -28,6 +28,7 @@ import org.apache.lucene.util.BytesRef;
  **/
 public class IntegerEncoder extends AbstractEncoder implements PayloadEncoder {
 
+  @Override
   public BytesRef encode(char[] buffer, int offset, int length) {
     int payload = ArrayUtil.parseInt(buffer, offset, length);//TODO: improve this so that we don't have to new Strings
     byte[] bytes = PayloadHelper.encodeInt(payload);
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterFactory.java
index abb115c..f88c3b5 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterFactory.java
@@ -46,6 +46,7 @@ public class NumericPayloadTokenFilterFactory extends TokenFilterFactory {
     }
     payload = Float.parseFloat(payloadArg);
   }
+  @Override
   public NumericPayloadTokenFilter create(TokenStream input) {
     return new NumericPayloadTokenFilter(input,payload,typeMatch);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterFactory.java
index 9cf7eaf..1c15fcf 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterFactory.java
@@ -33,6 +33,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class TokenOffsetPayloadTokenFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenOffsetPayloadTokenFilter create(TokenStream input) {
     return new TokenOffsetPayloadTokenFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterFactory.java
index 30d03c3..6b403ac 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterFactory.java
@@ -33,6 +33,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class TypeAsPayloadTokenFilterFactory extends TokenFilterFactory {
+  @Override
   public TypeAsPayloadTokenFilter create(TokenStream input) {
     return new TypeAsPayloadTokenFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilterFactory.java
index a15618c..6606c46 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilterFactory.java
@@ -48,6 +48,7 @@ public class PositionFilterFactory extends TokenFilterFactory {
     positionIncrement = getInt("positionIncrement", 0);
   }
 
+  @Override
   public PositionFilter create(TokenStream input) {
     return new PositionFilter(input, positionIncrement);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseLightStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseLightStemFilterFactory.java
index e1ef9d1..f4b4de1 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseLightStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseLightStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class PortugueseLightStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new PortugueseLightStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseMinimalStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseMinimalStemFilterFactory.java
index b934b62..a71ba29 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseMinimalStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseMinimalStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class PortugueseMinimalStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new PortugueseMinimalStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseStemFilterFactory.java
index 632cef2..dd5cf6d 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class PortugueseStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new PortugueseStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilterFactory.java
index 4dbea0c..833f560 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilterFactory.java
@@ -35,6 +35,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  * @since solr 1.4
  */
 public class ReverseStringFilterFactory extends TokenFilterFactory {
+  @Override
   public ReverseStringFilter create(TokenStream in) {
     assureMatchVersion();
     return new ReverseStringFilter(luceneMatchVersion,in);
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ru/RussianLightStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ru/RussianLightStemFilterFactory.java
index 934c5a9..70397b1 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/ru/RussianLightStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/ru/RussianLightStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class RussianLightStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new RussianLightStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilterFactory.java
index 41fb3f0..7507da6 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilterFactory.java
@@ -68,6 +68,7 @@ public class ShingleFilterFactory extends TokenFilterFactory {
                      ? args.get("tokenSeparator")
                      : ShingleFilter.TOKEN_SEPARATOR;
   }
+  @Override
   public ShingleFilter create(TokenStream input) {
     ShingleFilter r = new ShingleFilter(input, minShingleSize, maxShingleSize);
     r.setOutputUnigrams(outputUnigrams);
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballPorterFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballPorterFilterFactory.java
index 72a0cd9..8fe4c0d 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballPorterFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballPorterFilterFactory.java
@@ -64,6 +64,7 @@ public class SnowballPorterFilterFactory extends TokenFilterFactory implements R
     }
   }
 
+  @Override
   public TokenFilter create(TokenStream input) {
     SnowballProgram program;
     try {
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicFilterFactory.java
index 68d3318..265945b 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicFilterFactory.java
@@ -35,6 +35,7 @@ import org.apache.lucene.analysis.standard.ClassicFilter;
  *
  */
 public class ClassicFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenFilter create(TokenStream input) {
     return new ClassicFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerFactory.java
index 1142433..89f8252 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerFactory.java
@@ -49,6 +49,7 @@ public class ClassicTokenizerFactory extends TokenizerFactory {
                             StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH);
   }
 
+  @Override
   public Tokenizer create(Reader input) {
     ClassicTokenizer tokenizer = new ClassicTokenizer(luceneMatchVersion, input); 
     tokenizer.setMaxTokenLength(maxTokenLength);
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerImpl.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerImpl.java
index e90e5d2..90c70f8 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerImpl.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerImpl.java
@@ -359,6 +359,7 @@ public static final int ACRONYM_DEP       = StandardTokenizer.ACRONYM_DEP;
 
 public static final String [] TOKEN_TYPES = StandardTokenizer.TOKEN_TYPES;
 
+@Override
 public final int yychar()
 {
     return yychar;
@@ -367,6 +368,7 @@ public final int yychar()
 /**
  * Fills CharTermAttribute with the current token text.
  */
+@Override
 public final void getText(CharTermAttribute t) {
   t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
 }
@@ -482,6 +484,7 @@ public final void getText(CharTermAttribute t) {
    *
    * @param reader   the new input stream 
    */
+  @Override
   public final void yyreset(java.io.Reader reader) {
     zzReader = reader;
     zzAtBOL  = true;
@@ -541,6 +544,7 @@ public final void getText(CharTermAttribute t) {
   /**
    * Returns the length of the matched text region.
    */
+  @Override
   public final int yylength() {
     return zzMarkedPos-zzStartRead;
   }
@@ -596,6 +600,7 @@ public final void getText(CharTermAttribute t) {
    * @return      the next token
    * @exception   java.io.IOException  if any I/O-Error occurs
    */
+  @Override
   public int getNextToken() throws java.io.IOException {
     int zzInput;
     int zzAction;
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardFilterFactory.java
index 47868c0..8ed6655 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardFilterFactory.java
@@ -41,6 +41,7 @@ public class StandardFilterFactory extends TokenFilterFactory {
     assureMatchVersion();
   }
   
+  @Override
   public StandardFilter create(TokenStream input) {
     return new StandardFilter(luceneMatchVersion, input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerFactory.java
index 3075fb4..385a3f8 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerFactory.java
@@ -47,6 +47,7 @@ public class StandardTokenizerFactory extends TokenizerFactory {
                             StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH);
   }
 
+  @Override
   public StandardTokenizer create(Reader input) {
     StandardTokenizer tokenizer
       = new StandardTokenizer(luceneMatchVersion, input); 
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java
index 7191c42..20081ae 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java
@@ -843,6 +843,7 @@ public final class StandardTokenizerImpl implements StandardTokenizerInterface {
   
   public static final int HANGUL_TYPE = StandardTokenizer.HANGUL;
 
+  @Override
   public final int yychar()
   {
     return yychar;
@@ -851,6 +852,7 @@ public final class StandardTokenizerImpl implements StandardTokenizerInterface {
   /**
    * Fills CharTermAttribute with the current token text.
    */
+  @Override
   public final void getText(CharTermAttribute t) {
     t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
   }
@@ -965,6 +967,7 @@ public final class StandardTokenizerImpl implements StandardTokenizerInterface {
    *
    * @param reader   the new input stream 
    */
+  @Override
   public final void yyreset(java.io.Reader reader) {
     zzReader = reader;
     zzAtBOL  = true;
@@ -1024,6 +1027,7 @@ public final class StandardTokenizerImpl implements StandardTokenizerInterface {
   /**
    * Returns the length of the matched text region.
    */
+  @Override
   public final int yylength() {
     return zzMarkedPos-zzStartRead;
   }
@@ -1079,6 +1083,7 @@ public final class StandardTokenizerImpl implements StandardTokenizerInterface {
    * @return      the next token
    * @exception   java.io.IOException  if any I/O-Error occurs
    */
+  @Override
   public int getNextToken() throws java.io.IOException {
     int zzInput;
     int zzAction;
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory.java
index a83b714..53acea2 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory.java
@@ -48,6 +48,7 @@ public class UAX29URLEmailTokenizerFactory extends TokenizerFactory {
                             StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH);
   }
 
+  @Override
   public UAX29URLEmailTokenizer create(Reader input) {
     UAX29URLEmailTokenizer tokenizer = new UAX29URLEmailTokenizer(luceneMatchVersion, input); 
     tokenizer.setMaxTokenLength(maxTokenLength);
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl.java
index 04fdd0b..764c5f1 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl.java
@@ -4033,6 +4033,7 @@ public final class UAX29URLEmailTokenizerImpl implements StandardTokenizerInterf
   
   public static final int URL_TYPE = UAX29URLEmailTokenizer.URL;
 
+  @Override
   public final int yychar()
   {
     return yychar;
@@ -4041,6 +4042,7 @@ public final class UAX29URLEmailTokenizerImpl implements StandardTokenizerInterf
   /**
    * Fills CharTermAttribute with the current token text.
    */
+  @Override
   public final void getText(CharTermAttribute t) {
     t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
   }
@@ -4155,6 +4157,7 @@ public final class UAX29URLEmailTokenizerImpl implements StandardTokenizerInterf
    *
    * @param reader   the new input stream 
    */
+  @Override
   public final void yyreset(java.io.Reader reader) {
     zzReader = reader;
     zzAtBOL  = true;
@@ -4214,6 +4217,7 @@ public final class UAX29URLEmailTokenizerImpl implements StandardTokenizerInterf
   /**
    * Returns the length of the matched text region.
    */
+  @Override
   public final int yylength() {
     return zzMarkedPos-zzStartRead;
   }
@@ -4269,6 +4273,7 @@ public final class UAX29URLEmailTokenizerImpl implements StandardTokenizerInterf
    * @return      the next token
    * @exception   java.io.IOException  if any I/O-Error occurs
    */
+  @Override
   public int getNextToken() throws java.io.IOException {
     int zzInput;
     int zzAction;
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/sv/SwedishLightStemFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/sv/SwedishLightStemFilterFactory.java
index 122e402..8f480f1 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/sv/SwedishLightStemFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/sv/SwedishLightStemFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class SwedishLightStemFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenStream create(TokenStream input) {
     return new SwedishLightStemFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilterFactory.java
index f08eead..dad67df 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilterFactory.java
@@ -34,6 +34,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class ThaiWordFilterFactory extends TokenFilterFactory {
+  @Override
   public ThaiWordFilter create(TokenStream input) {
     assureMatchVersion();
     return new ThaiWordFilter(luceneMatchVersion, input);
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/tr/TurkishLowerCaseFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/tr/TurkishLowerCaseFilterFactory.java
index c9cda8c..4336428 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/tr/TurkishLowerCaseFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/tr/TurkishLowerCaseFilterFactory.java
@@ -35,6 +35,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  *
  */
 public class TurkishLowerCaseFilterFactory extends TokenFilterFactory  implements MultiTermAwareComponent {
+  @Override
   public TokenStream create(TokenStream input) {
     return new TurkishLowerCaseFilter(input);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayIterator.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayIterator.java
index 667dbf4..3ec213f 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayIterator.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayIterator.java
@@ -59,34 +59,41 @@ public abstract class CharArrayIterator implements CharacterIterator {
     this.limit = start + length;
   }
 
+  @Override
   public char current() {
     return (index == limit) ? DONE : jreBugWorkaround(array[index]);
   }
   
   protected abstract char jreBugWorkaround(char ch);
 
+  @Override
   public char first() {
     index = start;
     return current();
   }
 
+  @Override
   public int getBeginIndex() {
     return 0;
   }
 
+  @Override
   public int getEndIndex() {
     return length;
   }
 
+  @Override
   public int getIndex() {
     return index - start;
   }
 
+  @Override
   public char last() {
     index = (limit == start) ? limit : limit - 1;
     return current();
   }
 
+  @Override
   public char next() {
     if (++index >= limit) {
       index = limit;
@@ -96,6 +103,7 @@ public abstract class CharArrayIterator implements CharacterIterator {
     }
   }
 
+  @Override
   public char previous() {
     if (--index < start) {
       index = start;
@@ -105,6 +113,7 @@ public abstract class CharArrayIterator implements CharacterIterator {
     }
   }
 
+  @Override
   public char setIndex(int position) {
     if (position < getBeginIndex() || position > getEndIndex())
       throw new IllegalArgumentException("Illegal Position: " + position);
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap.java
index 9ebfd62..cd8d9a7 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap.java
@@ -421,6 +421,7 @@ public class CharArrayMap<V> extends AbstractMap<Object,V> {
       while (pos < keys.length && keys[pos] == null) pos++;
     }
 
+    @Override
     public boolean hasNext() {
       return pos < keys.length;
     }
@@ -451,11 +452,13 @@ public class CharArrayMap<V> extends AbstractMap<Object,V> {
     }
 
     /** use nextCharArray() + currentValue() for better efficiency. */
+    @Override
     public Map.Entry<Object,V> next() {
       goNext();
       return new MapEntry(lastPos, allowModify);
     }
 
+    @Override
     public void remove() {
       throw new UnsupportedOperationException();
     }
@@ -470,16 +473,19 @@ public class CharArrayMap<V> extends AbstractMap<Object,V> {
       this.allowModify = allowModify;
     }
 
+    @Override
     public Object getKey() {
       // we must clone here, as putAll to another CharArrayMap
       // with other case sensitivity flag would corrupt the keys
       return keys[pos].clone();
     }
 
+    @Override
     public V getValue() {
       return values[pos];
     }
 
+    @Override
     public V setValue(V value) {
       if (!allowModify)
         throw new UnsupportedOperationException();
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/ElisionFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/ElisionFilterFactory.java
index 08d32e0..a56bdbe 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/ElisionFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/ElisionFilterFactory.java
@@ -38,6 +38,7 @@ public class ElisionFilterFactory extends TokenFilterFactory implements Resource
 
   private CharArraySet articles;
 
+  @Override
   public void inform(ResourceLoader loader) throws IOException {
     String articlesFile = args.get("articles");
     boolean ignoreCase = getBoolean("ignoreCase", false);
@@ -50,6 +51,7 @@ public class ElisionFilterFactory extends TokenFilterFactory implements Resource
     }
   }
 
+  @Override
   public ElisionFilter create(TokenStream input) {
     return new ElisionFilter(input, articles);
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/OpenStringBuilder.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/OpenStringBuilder.java
index 5e79022..d8c428c 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/OpenStringBuilder.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/OpenStringBuilder.java
@@ -45,13 +45,16 @@ public class OpenStringBuilder implements Appendable, CharSequence {
 
   public char[] getArray() { return buf; }
   public int size() { return len; }
+  @Override
   public int length() { return len; }
   public int capacity() { return buf.length; }
 
+  @Override
   public Appendable append(CharSequence csq) {
     return append(csq, 0, csq.length());
   }
 
+  @Override
   public Appendable append(CharSequence csq, int start, int end) {
     reserve(end-start);
     for (int i=start; i<end; i++) {
@@ -60,11 +63,13 @@ public class OpenStringBuilder implements Appendable, CharSequence {
     return this;
   }
 
+  @Override
   public Appendable append(char c) {
     write(c);
     return this;
   }
 
+  @Override
   public char charAt(int index) {
     return buf[index];
   }
@@ -73,6 +78,7 @@ public class OpenStringBuilder implements Appendable, CharSequence {
     buf[index] = ch;    
   }
 
+  @Override
   public CharSequence subSequence(int start, int end) {
     throw new UnsupportedOperationException(); // todo
   }
@@ -139,6 +145,7 @@ public class OpenStringBuilder implements Appendable, CharSequence {
     return newbuf;
   }
 
+  @Override
   public String toString() {
     return new String(buf, 0, size());
   }
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerFactory.java
index fc7967a..2f5d2a6 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerFactory.java
@@ -35,6 +35,7 @@ import org.apache.lucene.analysis.wikipedia.WikipediaTokenizer;
  */
 public class WikipediaTokenizerFactory extends TokenizerFactory {
   // TODO: add support for WikipediaTokenizer's advanced options.
+  @Override
   public Tokenizer create(Reader input) {
     return new WikipediaTokenizer(input);
   }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/ArmenianStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/ArmenianStemmer.java
index 22101f9..1adbda3 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/ArmenianStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/ArmenianStemmer.java
@@ -425,6 +425,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -502,10 +503,12 @@ private static final long serialVersionUID = 1L;
                     cursor = limit_backward;                    return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof ArmenianStemmer;
         }
 
+        @Override
         public int hashCode() {
             return ArmenianStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/BasqueStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/BasqueStemmer.java
index 84d6cd3..643e572 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/BasqueStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/BasqueStemmer.java
@@ -863,6 +863,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -925,10 +926,12 @@ private static final long serialVersionUID = 1L;
                     cursor = limit_backward;                    return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof BasqueStemmer;
         }
 
+        @Override
         public int hashCode() {
             return BasqueStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/CatalanStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/CatalanStemmer.java
index 3c4e716..7d3cfab 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/CatalanStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/CatalanStemmer.java
@@ -977,6 +977,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -1055,10 +1056,12 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof CatalanStemmer;
         }
 
+        @Override
         public int hashCode() {
             return CatalanStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/DanishStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/DanishStemmer.java
index 820c391..66c5f4a 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/DanishStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/DanishStemmer.java
@@ -363,6 +363,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -426,10 +427,12 @@ private static final long serialVersionUID = 1L;
                     cursor = limit_backward;                    return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof DanishStemmer;
         }
 
+        @Override
         public int hashCode() {
             return DanishStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/DutchStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/DutchStemmer.java
index 0ef6318..149e13a 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/DutchStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/DutchStemmer.java
@@ -789,6 +789,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -840,10 +841,12 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof DutchStemmer;
         }
 
+        @Override
         public int hashCode() {
             return DutchStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/EnglishStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/EnglishStemmer.java
index b3b7890..5253acc 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/EnglishStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/EnglishStemmer.java
@@ -1147,6 +1147,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -1317,10 +1318,12 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof EnglishStemmer;
         }
 
+        @Override
         public int hashCode() {
             return EnglishStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/FinnishStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/FinnishStemmer.java
index 26f3ce1..0729f68 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/FinnishStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/FinnishStemmer.java
@@ -924,6 +924,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -1037,10 +1038,12 @@ private static final long serialVersionUID = 1L;
                     cursor = limit_backward;                    return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof FinnishStemmer;
         }
 
+        @Override
         public int hashCode() {
             return FinnishStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/FrenchStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/FrenchStemmer.java
index 4f5cac3..a7072e2 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/FrenchStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/FrenchStemmer.java
@@ -1348,6 +1348,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -1504,10 +1505,12 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof FrenchStemmer;
         }
 
+        @Override
         public int hashCode() {
             return FrenchStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/German2Stemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/German2Stemmer.java
index e0501bb..ce38090 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/German2Stemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/German2Stemmer.java
@@ -678,6 +678,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -729,10 +730,12 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof German2Stemmer;
         }
 
+        @Override
         public int hashCode() {
             return German2Stemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/GermanStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/GermanStemmer.java
index 8558270..3b1e125 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/GermanStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/GermanStemmer.java
@@ -640,6 +640,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -691,10 +692,12 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof GermanStemmer;
         }
 
+        @Override
         public int hashCode() {
             return GermanStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/HungarianStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/HungarianStemmer.java
index f730187..f47f719 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/HungarianStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/HungarianStemmer.java
@@ -1043,6 +1043,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -1161,10 +1162,12 @@ private static final long serialVersionUID = 1L;
                     cursor = limit_backward;                    return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof HungarianStemmer;
         }
 
+        @Override
         public int hashCode() {
             return HungarianStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/IrishStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/IrishStemmer.java
index 4a2788a..f212e22 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/IrishStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/IrishStemmer.java
@@ -510,6 +510,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -573,10 +574,12 @@ private static final long serialVersionUID = 1L;
                     cursor = limit_backward;                    return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof IrishStemmer;
         }
 
+        @Override
         public int hashCode() {
             return IrishStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/ItalianStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/ItalianStemmer.java
index b349a98..237e144 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/ItalianStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/ItalianStemmer.java
@@ -1094,6 +1094,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -1183,10 +1184,12 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof ItalianStemmer;
         }
 
+        @Override
         public int hashCode() {
             return ItalianStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/KpStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/KpStemmer.java
index 9ddf7e6..fe2804c 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/KpStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/KpStemmer.java
@@ -1856,6 +1856,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -2184,10 +2185,12 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof KpStemmer;
         }
 
+        @Override
         public int hashCode() {
             return KpStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/LovinsStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/LovinsStemmer.java
index 8300459..618d2cb 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/LovinsStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/LovinsStemmer.java
@@ -1870,6 +1870,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -1911,10 +1912,12 @@ private static final long serialVersionUID = 1L;
                     cursor = limit_backward;                    return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof LovinsStemmer;
         }
 
+        @Override
         public int hashCode() {
             return LovinsStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/NorwegianStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/NorwegianStemmer.java
index 0ce96f6..4ce2be3 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/NorwegianStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/NorwegianStemmer.java
@@ -309,6 +309,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -361,10 +362,12 @@ private static final long serialVersionUID = 1L;
                     cursor = limit_backward;                    return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof NorwegianStemmer;
         }
 
+        @Override
         public int hashCode() {
             return NorwegianStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/PorterStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/PorterStemmer.java
index 7d17c7f..2420012 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/PorterStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/PorterStemmer.java
@@ -610,6 +610,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -909,10 +910,12 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof PorterStemmer;
         }
 
+        @Override
         public int hashCode() {
             return PorterStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/PortugueseStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/PortugueseStemmer.java
index d230c23..6e0cc78 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/PortugueseStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/PortugueseStemmer.java
@@ -989,6 +989,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -1119,10 +1120,12 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof PortugueseStemmer;
         }
 
+        @Override
         public int hashCode() {
             return PortugueseStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/RomanianStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/RomanianStemmer.java
index 1e09068..d73a6cb 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/RomanianStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/RomanianStemmer.java
@@ -927,6 +927,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -1027,10 +1028,12 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof RomanianStemmer;
         }
 
+        @Override
         public int hashCode() {
             return RomanianStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/RussianStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/RussianStemmer.java
index 7629b5d..a6b850e 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/RussianStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/RussianStemmer.java
@@ -596,6 +596,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -730,10 +731,12 @@ private static final long serialVersionUID = 1L;
                     cursor = limit_backward;                    return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof RussianStemmer;
         }
 
+        @Override
         public int hashCode() {
             return RussianStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/SpanishStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/SpanishStemmer.java
index d660178..e16f554 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/SpanishStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/SpanishStemmer.java
@@ -1098,6 +1098,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -1185,10 +1186,12 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof SpanishStemmer;
         }
 
+        @Override
         public int hashCode() {
             return SpanishStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/SwedishStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/SwedishStemmer.java
index 26f53de..8fec971 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/SwedishStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/SwedishStemmer.java
@@ -300,6 +300,7 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -352,10 +353,12 @@ private static final long serialVersionUID = 1L;
                     cursor = limit_backward;                    return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof SwedishStemmer;
         }
 
+        @Override
         public int hashCode() {
             return SwedishStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer.java b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer.java
index 7ea4d6d..5275e98 100644
--- a/lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer.java
+++ b/lucene/analysis/common/src/java/org/tartarus/snowball/ext/TurkishStemmer.java
@@ -3086,6 +3086,7 @@ private static final long serialVersionUID = 1L;
                     cursor = limit_backward;                    return true;
                 }
 
+                @Override
                 public boolean stem() {
             int v_1;
             int v_2;
@@ -3133,10 +3134,12 @@ private static final long serialVersionUID = 1L;
                     return true;
                 }
 
+        @Override
         public boolean equals( Object o ) {
             return o instanceof TurkishStemmer;
         }
 
+        @Override
         public int hashCode() {
             return TurkishStemmer.class.getName().hashCode();
         }
diff --git a/lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter.java b/lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter.java
index dd4429b..d3ee9a9 100644
--- a/lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter.java
+++ b/lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter.java
@@ -275,9 +275,11 @@ public class TestCompoundWordTokenFilter extends BaseTokenStreamTestCase {
     public void clear() {
       retain = false;
     }
+    @Override
     public boolean getRetain() {
       return retain;
     }
+    @Override
     public void setRetain(boolean retain) {
       this.retain = retain;
     }
diff --git a/lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers.java b/lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers.java
index b7a6caa..c8e1ea1 100644
--- a/lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers.java
+++ b/lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers.java
@@ -47,6 +47,7 @@ import org.apache.lucene.util.automaton.Transition;
 public class TestDuelingAnalyzers extends LuceneTestCase {
   private CharacterRunAutomaton jvmLetter;
   
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     // build an automaton matching this jvm's letter definition
diff --git a/lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest.java b/lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest.java
index f1f0867..c0b207d 100644
--- a/lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest.java
+++ b/lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest.java
@@ -38,51 +38,63 @@ public class HunspellDictionaryTest extends LuceneTestCase {
       this.delegate = delegate;
     }
 
+    @Override
     public int read() throws IOException {
       return delegate.read();
     }
 
+    @Override
     public int hashCode() {
       return delegate.hashCode();
     }
 
+    @Override
     public int read(byte[] b) throws IOException {
       return delegate.read(b);
     }
 
+    @Override
     public boolean equals(Object obj) {
       return delegate.equals(obj);
     }
 
+    @Override
     public int read(byte[] b, int off, int len) throws IOException {
       return delegate.read(b, off, len);
     }
 
+    @Override
     public long skip(long n) throws IOException {
       return delegate.skip(n);
     }
 
+    @Override
     public String toString() {
       return delegate.toString();
     }
 
+    @Override
     public int available() throws IOException {
       return delegate.available();
     }
 
+    @Override
     public void close() throws IOException {
       this.closed = true;
       delegate.close();
     }
 
+    @Override
     public void mark(int readlimit) {
       delegate.mark(readlimit);
     }
 
+    @Override
     public void reset() throws IOException {
       delegate.reset();
     }
 
+    @Override
     public boolean markSupported() {
       return delegate.markSupported();
     }
diff --git a/lucene/analysis/common/src/test/org/apache/lucene/analysis/util/StringMockResourceLoader.java b/lucene/analysis/common/src/test/org/apache/lucene/analysis/util/StringMockResourceLoader.java
index 6ab8a1f..6c8b12f 100644
--- a/lucene/analysis/common/src/test/org/apache/lucene/analysis/util/StringMockResourceLoader.java
+++ b/lucene/analysis/common/src/test/org/apache/lucene/analysis/util/StringMockResourceLoader.java
@@ -29,6 +29,7 @@ public class StringMockResourceLoader implements ResourceLoader {
     this.text = text;
   }
 
+  @Override
   public <T> T newInstance(String cname, Class<T> expectedType) {
     try {
       Class<? extends T> clazz = Class.forName(cname).asSubclass(expectedType);
@@ -38,6 +39,7 @@ public class StringMockResourceLoader implements ResourceLoader {
     }
   }
 
+  @Override
   public InputStream openResource(String resource) throws IOException {
     return new ByteArrayInputStream(text.getBytes("UTF-8"));
   }
diff --git a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUFoldingFilterFactory.java b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUFoldingFilterFactory.java
index 5d711fb..8bc76b7 100644
--- a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUFoldingFilterFactory.java
+++ b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUFoldingFilterFactory.java
@@ -34,6 +34,7 @@ public class ICUFoldingFilterFactory extends TokenFilterFactory implements Multi
     return new ICUFoldingFilter(input);
   }
 
+  @Override
   public AbstractAnalysisFactory getMultiTermComponent() {
     return this;
   }
diff --git a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory.java b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory.java
index ab58c8c..6022a5b 100644
--- a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory.java
+++ b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory.java
@@ -79,10 +79,12 @@ public class ICUNormalizer2FilterFactory extends TokenFilterFactory implements M
     }
   }
   
+  @Override
   public TokenStream create(TokenStream input) {
     return new ICUNormalizer2Filter(input, normalizer);
   }
 
+  @Override
   public AbstractAnalysisFactory getMultiTermComponent() {
     return this;
   }
diff --git a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilter.java b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilter.java
index 0b423aa..4256672 100644
--- a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilter.java
+++ b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilter.java
@@ -124,32 +124,39 @@ public final class ICUTransformFilter extends TokenFilter {
       this.length = token.length();
     }
 
+    @Override
     public int char32At(int pos) {
       return UTF16.charAt(buffer, 0, length, pos);
     }
 
+    @Override
     public char charAt(int pos) {
       return buffer[pos];
     }
 
+    @Override
     public void copy(int start, int limit, int dest) {
       char text[] = new char[limit - start];
       getChars(start, limit, text, 0);
       replace(dest, dest, text, 0, limit - start);
     }
 
+    @Override
     public void getChars(int srcStart, int srcLimit, char[] dst, int dstStart) {
       System.arraycopy(buffer, srcStart, dst, dstStart, srcLimit - srcStart);
     }
 
+    @Override
     public boolean hasMetaData() {
       return false;
     }
 
+    @Override
     public int length() {
       return length;
     }
 
+    @Override
     public void replace(int start, int limit, String text) {
       final int charsLen = text.length();
       final int newLength = shiftForReplace(start, limit, charsLen);
@@ -158,6 +165,7 @@ public final class ICUTransformFilter extends TokenFilter {
       token.setLength(length = newLength);
     }
 
+    @Override
     public void replace(int start, int limit, char[] text, int charsStart,
         int charsLen) {
       // shift text if necessary for the replacement
diff --git a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilterFactory.java b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilterFactory.java
index ea8091e..6d18db9 100644
--- a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilterFactory.java
+++ b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilterFactory.java
@@ -64,6 +64,7 @@ public class ICUTransformFilterFactory extends TokenFilterFactory implements Mul
     transliterator = Transliterator.getInstance(id, dir);
   }
 
+  @Override
   public TokenStream create(TokenStream input) {
     return new ICUTransformFilter(input, transliterator);
   }
diff --git a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/CharArrayIterator.java b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/CharArrayIterator.java
index 12820a8..260e836 100644
--- a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/CharArrayIterator.java
+++ b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/CharArrayIterator.java
@@ -57,32 +57,39 @@ final class CharArrayIterator implements CharacterIterator {
     this.limit = start + length;
   }
 
+  @Override
   public char current() {
     return (index == limit) ? DONE : array[index];
   }
 
+  @Override
   public char first() {
     index = start;
     return current();
   }
 
+  @Override
   public int getBeginIndex() {
     return 0;
   }
 
+  @Override
   public int getEndIndex() {
     return length;
   }
 
+  @Override
   public int getIndex() {
     return index - start;
   }
 
+  @Override
   public char last() {
     index = (limit == start) ? limit : limit - 1;
     return current();
   }
 
+  @Override
   public char next() {
     if (++index >= limit) {
       index = limit;
@@ -92,6 +99,7 @@ final class CharArrayIterator implements CharacterIterator {
     }
   }
 
+  @Override
   public char previous() {
     if (--index < start) {
       index = start;
@@ -101,6 +109,7 @@ final class CharArrayIterator implements CharacterIterator {
     }
   }
 
+  @Override
   public char setIndex(int position) {
     if (position < getBeginIndex() || position > getEndIndex())
       throw new IllegalArgumentException("Illegal Position: " + position);
diff --git a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/tokenattributes/ScriptAttributeImpl.java b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/tokenattributes/ScriptAttributeImpl.java
index d6a5997..9e5ac47 100644
--- a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/tokenattributes/ScriptAttributeImpl.java
+++ b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/tokenattributes/ScriptAttributeImpl.java
@@ -33,18 +33,22 @@ public class ScriptAttributeImpl extends AttributeImpl implements ScriptAttribut
   /** Initializes this attribute with <code>UScript.COMMON</code> */
   public ScriptAttributeImpl() {}
   
+  @Override
   public int getCode() {
     return code;
   }
   
+  @Override
   public void setCode(int code) {
     this.code = code;
   }
 
+  @Override
   public String getName() {
     return UScript.getName(code);
   }
 
+  @Override
   public String getShortName() {
     return UScript.getShortName(code);
   }
diff --git a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseKatakanaStemFilterFactory.java b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseKatakanaStemFilterFactory.java
index 9f3a1b2..8560d37 100644
--- a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseKatakanaStemFilterFactory.java
+++ b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseKatakanaStemFilterFactory.java
@@ -48,6 +48,7 @@ public class JapaneseKatakanaStemFilterFactory extends TokenFilterFactory {
     }
   }
 
+  @Override
   public TokenStream create(TokenStream input) {
     return new JapaneseKatakanaStemFilter(input, minimumLength);
   }
diff --git a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapanesePartOfSpeechStopFilterFactory.java b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapanesePartOfSpeechStopFilterFactory.java
index fc40548..3ee1e17 100644
--- a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapanesePartOfSpeechStopFilterFactory.java
+++ b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapanesePartOfSpeechStopFilterFactory.java
@@ -42,6 +42,7 @@ public class JapanesePartOfSpeechStopFilterFactory extends TokenFilterFactory im
   private boolean enablePositionIncrements;
   private Set<String> stopTags;
 
+  @Override
   public void inform(ResourceLoader loader) throws IOException {
     String stopTagFiles = args.get("tags");
     enablePositionIncrements = getBoolean("enablePositionIncrements", false);
@@ -56,6 +57,7 @@ public class JapanesePartOfSpeechStopFilterFactory extends TokenFilterFactory im
     }
   }
 
+  @Override
   public TokenStream create(TokenStream stream) {
     // if stoptags is null, it means the file is empty
     return stopTags == null ? stream : new JapanesePartOfSpeechStopFilter(enablePositionIncrements, stream, stopTags);
diff --git a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseReadingFormFilterFactory.java b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseReadingFormFilterFactory.java
index 2d984d9..4813a95 100644
--- a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseReadingFormFilterFactory.java
+++ b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseReadingFormFilterFactory.java
@@ -45,6 +45,7 @@ public class JapaneseReadingFormFilterFactory extends TokenFilterFactory {
     useRomaji = getBoolean(ROMAJI_PARAM, false);
   }
 
+  @Override
   public TokenStream create(TokenStream input) {
     return new JapaneseReadingFormFilter(input, useRomaji);
   }
diff --git a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/tokenattributes/BaseFormAttributeImpl.java b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/tokenattributes/BaseFormAttributeImpl.java
index 1f78327..1e3f789 100644
--- a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/tokenattributes/BaseFormAttributeImpl.java
+++ b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/tokenattributes/BaseFormAttributeImpl.java
@@ -27,10 +27,12 @@ import org.apache.lucene.util.AttributeReflector;
 public class BaseFormAttributeImpl extends AttributeImpl implements BaseFormAttribute, Cloneable {
   private Token token;
   
+  @Override
   public String getBaseForm() {
     return token == null ? null : token.getBaseForm();
   }
   
+  @Override
   public void setToken(Token token) {
     this.token = token;
   }
diff --git a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/tokenattributes/InflectionAttributeImpl.java b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/tokenattributes/InflectionAttributeImpl.java
index a4f48ba..e4e226d 100644
--- a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/tokenattributes/InflectionAttributeImpl.java
+++ b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/tokenattributes/InflectionAttributeImpl.java
@@ -28,14 +28,17 @@ import org.apache.lucene.util.AttributeReflector;
 public class InflectionAttributeImpl extends AttributeImpl implements InflectionAttribute, Cloneable {
   private Token token;
   
+  @Override
   public String getInflectionType() {
     return token == null ? null : token.getInflectionType();
   }
   
+  @Override
   public String getInflectionForm() {
     return token == null ? null : token.getInflectionForm();
   }
   
+  @Override
   public void setToken(Token token) {
     this.token = token;
   }
diff --git a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/tokenattributes/PartOfSpeechAttributeImpl.java b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/tokenattributes/PartOfSpeechAttributeImpl.java
index 1e61262..62100f7 100644
--- a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/tokenattributes/PartOfSpeechAttributeImpl.java
+++ b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/tokenattributes/PartOfSpeechAttributeImpl.java
@@ -28,10 +28,12 @@ import org.apache.lucene.util.AttributeReflector;
 public class PartOfSpeechAttributeImpl extends AttributeImpl implements PartOfSpeechAttribute, Cloneable {
   private Token token;
   
+  @Override
   public String getPartOfSpeech() {
     return token == null ? null : token.getPartOfSpeech();
   }
   
+  @Override
   public void setToken(Token token) {
     this.token = token;
   }
diff --git a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/tokenattributes/ReadingAttributeImpl.java b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/tokenattributes/ReadingAttributeImpl.java
index cca113e..7a89e03 100644
--- a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/tokenattributes/ReadingAttributeImpl.java
+++ b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/tokenattributes/ReadingAttributeImpl.java
@@ -28,14 +28,17 @@ import org.apache.lucene.util.AttributeReflector;
 public class ReadingAttributeImpl extends AttributeImpl implements ReadingAttribute, Cloneable {
   private Token token;
   
+  @Override
   public String getReading() {
     return token == null ? null : token.getReading();
   }
   
+  @Override
   public String getPronunciation() {
     return token == null ? null : token.getPronunciation();
   }
   
+  @Override
   public void setToken(Token token) {
     this.token = token;
   }
diff --git a/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/StringMockResourceLoader.java b/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/StringMockResourceLoader.java
index 03191c4..01dde78 100644
--- a/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/StringMockResourceLoader.java
+++ b/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/StringMockResourceLoader.java
@@ -33,6 +33,7 @@ class StringMockResourceLoader implements ResourceLoader {
     this.text = text;
   }
 
+  @Override
   public <T> T newInstance(String cname, Class<T> expectedType) {
     try {
       Class<? extends T> clazz = Class.forName(cname).asSubclass(expectedType);
@@ -42,6 +43,7 @@ class StringMockResourceLoader implements ResourceLoader {
     }
   }
 
+  @Override
   public InputStream openResource(String resource) throws IOException {
     return new ByteArrayInputStream(text.getBytes("UTF-8"));
   }
diff --git a/lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorphosyntacticTagsAttributeImpl.java b/lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorphosyntacticTagsAttributeImpl.java
index 4ed0c6e..700e3f2 100644
--- a/lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorphosyntacticTagsAttributeImpl.java
+++ b/lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorphosyntacticTagsAttributeImpl.java
@@ -47,10 +47,12 @@ public class MorphosyntacticTagsAttributeImpl extends AttributeImpl
     return tags;
   }
 
+  @Override
   public void clear() {
     tags = null;
   }
 
+  @Override
   public boolean equals(Object other) {
     if (other instanceof MorphosyntacticTagsAttribute) {
       return equal(this.getTags(), ((MorphosyntacticTagsAttribute) other).getTags());
@@ -62,6 +64,7 @@ public class MorphosyntacticTagsAttributeImpl extends AttributeImpl
     return l1 == null ? (l2 == null) : (l1.equals(l2));
   }
 
+  @Override
   public int hashCode() {
     return this.tags == null ? 0 : tags.hashCode();
   }
@@ -75,6 +78,7 @@ public class MorphosyntacticTagsAttributeImpl extends AttributeImpl
     this.tags = tags;
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     List<StringBuilder> cloned = null;
     if (tags != null) {
@@ -86,6 +90,7 @@ public class MorphosyntacticTagsAttributeImpl extends AttributeImpl
     ((MorphosyntacticTagsAttribute) target).setTags(cloned);
   }
 
+  @Override
   public MorphosyntacticTagsAttributeImpl clone() {
     MorphosyntacticTagsAttributeImpl cloned = new MorphosyntacticTagsAttributeImpl();
     this.copyTo(cloned);
diff --git a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilterFactory.java b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilterFactory.java
index 1433397..0d44846 100644
--- a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilterFactory.java
+++ b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilterFactory.java
@@ -51,6 +51,7 @@ public class BeiderMorseFilterFactory extends TokenFilterFactory {
   /** Sole constructor. See {@link AbstractAnalysisFactory} for initialization lifecycle. */
   public BeiderMorseFilterFactory() {}
   
+  @Override
   public void init(Map<String,String> args) {
     super.init(args);
     
diff --git a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterFactory.java b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterFactory.java
index 3168090..36f694d 100644
--- a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterFactory.java
+++ b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterFactory.java
@@ -61,6 +61,7 @@ public class DoubleMetaphoneFilterFactory extends TokenFilterFactory
     }
   }
 
+  @Override
   public DoubleMetaphoneFilter create(TokenStream input) {
     return new DoubleMetaphoneFilter(input, maxCodeLength, inject);
   }
diff --git a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory.java b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory.java
index 658cfac..d51d53a 100644
--- a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory.java
+++ b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory.java
@@ -148,6 +148,7 @@ public class PhoneticFilterFactory extends TokenFilterFactory
     }
   }
 
+  @Override
   public PhoneticFilter create(TokenStream input) {
     return new PhoneticFilter(input, getEncoder(), inject);
   }
diff --git a/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseSentenceTokenizerFactory.java b/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseSentenceTokenizerFactory.java
index f02adc4..99e6155 100644
--- a/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseSentenceTokenizerFactory.java
+++ b/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseSentenceTokenizerFactory.java
@@ -28,6 +28,7 @@ import org.apache.lucene.analysis.util.TokenizerFactory;
  * @lucene.experimental
  */
 public class SmartChineseSentenceTokenizerFactory extends TokenizerFactory {
+  @Override
   public Tokenizer create(Reader input) {
     return new SentenceTokenizer(input);
   }
diff --git a/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseWordTokenFilterFactory.java b/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseWordTokenFilterFactory.java
index 8fdb73b..f1a082f 100644
--- a/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseWordTokenFilterFactory.java
+++ b/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SmartChineseWordTokenFilterFactory.java
@@ -32,6 +32,7 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  * @lucene.experimental
  */
 public class SmartChineseWordTokenFilterFactory extends TokenFilterFactory {
+  @Override
   public TokenFilter create(TokenStream input) {
       return new WordTokenFilter(input);
   }
diff --git a/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/PathNode.java b/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/PathNode.java
index 7e6b25e..573c679 100644
--- a/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/PathNode.java
+++ b/lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/PathNode.java
@@ -29,6 +29,7 @@ class PathNode implements Comparable<PathNode> {
 
   public int preNode;
 
+  @Override
   public int compareTo(PathNode pn) {
     if (weight < pn.weight)
       return -1;
diff --git a/lucene/analysis/stempel/src/java/org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory.java b/lucene/analysis/stempel/src/java/org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory.java
index 73fecca..c56a3d8 100644
--- a/lucene/analysis/stempel/src/java/org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory.java
+++ b/lucene/analysis/stempel/src/java/org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory.java
@@ -32,6 +32,7 @@ public class StempelPolishStemFilterFactory extends TokenFilterFactory {
   /** Sole constructor. See {@link AbstractAnalysisFactory} for initialization lifecycle. */
   public StempelPolishStemFilterFactory() {}
 
+  @Override
   public TokenStream create(TokenStream input) {
     return new StempelFilter(input, new StempelStemmer(PolishAnalyzer.getDefaultTable()));
   }
diff --git a/lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizer.java b/lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizer.java
index 4525531..423a796 100644
--- a/lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizer.java
+++ b/lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizer.java
@@ -47,6 +47,7 @@ public final class UIMAAnnotationsTokenizer extends BaseUIMATokenizer {
     this.offsetAttr = addAttribute(OffsetAttribute.class);
   }
 
+  @Override
   protected void initializeIterator() throws IOException {
     try {
       analyzeInput();
diff --git a/lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMATypeAwareAnnotationsTokenizer.java b/lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMATypeAwareAnnotationsTokenizer.java
index 1246274..281c7d5 100644
--- a/lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMATypeAwareAnnotationsTokenizer.java
+++ b/lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMATypeAwareAnnotationsTokenizer.java
@@ -59,6 +59,7 @@ public final class UIMATypeAwareAnnotationsTokenizer extends BaseUIMATokenizer {
     this.typeAttributeFeaturePath = typeAttributeFeaturePath;
   }
 
+  @Override
   protected void initializeIterator() throws IOException {
     try {
       analyzeInput();
diff --git a/lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMABaseAnalyzerTest.java b/lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMABaseAnalyzerTest.java
index e51e5af..307e344 100644
--- a/lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMABaseAnalyzerTest.java
+++ b/lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMABaseAnalyzerTest.java
@@ -44,12 +44,14 @@ public class UIMABaseAnalyzerTest extends BaseTokenStreamTestCase {
 
   private UIMABaseAnalyzer analyzer;
 
+  @Override
   @Before
   public void setUp() throws Exception {
     super.setUp();
     analyzer = new UIMABaseAnalyzer("/uima/AggregateSentenceAE.xml", "org.apache.uima.TokenAnnotation");
   }
 
+  @Override
   @After
   public void tearDown() throws Exception {
     analyzer.close();
diff --git a/lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMATypeAwareAnalyzerTest.java b/lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMATypeAwareAnalyzerTest.java
index 16444e3..50faccb 100644
--- a/lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMATypeAwareAnalyzerTest.java
+++ b/lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMATypeAwareAnalyzerTest.java
@@ -32,6 +32,7 @@ public class UIMATypeAwareAnalyzerTest extends BaseTokenStreamTestCase {
 
   private UIMATypeAwareAnalyzer analyzer;
 
+  @Override
   @Before
   public void setUp() throws Exception {
     super.setUp();
@@ -39,6 +40,7 @@ public class UIMATypeAwareAnalyzerTest extends BaseTokenStreamTestCase {
         "org.apache.uima.TokenAnnotation", "posTag");
   }
 
+  @Override
   @After
   public void tearDown() throws Exception {
     analyzer.close();
diff --git a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/AbstractQueryMaker.java b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/AbstractQueryMaker.java
index a9c1c0d..eb356a8 100644
--- a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/AbstractQueryMaker.java
+++ b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/AbstractQueryMaker.java
@@ -28,17 +28,20 @@ public abstract class AbstractQueryMaker implements QueryMaker {
   protected Query[] queries;
   protected Config config;
 
+  @Override
   public void resetInputs() {
     qnum = 0;
   }
 
   protected abstract Query[] prepareQueries() throws Exception;
 
+  @Override
   public void setConfig(Config config) throws Exception {
     this.config = config;
     queries = prepareQueries();
   }
 
+  @Override
   public String printQueries() {
     String newline = System.getProperty("line.separator");
     StringBuilder sb = new StringBuilder();
@@ -51,6 +54,7 @@ public abstract class AbstractQueryMaker implements QueryMaker {
     return sb.toString();
   }
 
+  @Override
   public Query makeQuery() throws Exception {
     return queries[nextQnum()];
   }
@@ -66,6 +70,7 @@ public abstract class AbstractQueryMaker implements QueryMaker {
   *  (non-Javadoc)
   * @see org.apache.lucene.benchmark.byTask.feeds.QueryMaker#makeQuery(int)
   */
+  @Override
   public Query makeQuery(int size) throws Exception {
     throw new Exception(this+".makeQuery(int size) is not supported!");
   }
diff --git a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentItemsSource.java b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentItemsSource.java
index 01b5e56..9c71787 100644
--- a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentItemsSource.java
+++ b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentItemsSource.java
@@ -107,6 +107,7 @@ public abstract class ContentItemsSource implements Closeable {
   }
 
   /** Called when reading from this content source is no longer required. */
+  @Override
   public abstract void close() throws IOException;
   
   /** Returns the number of bytes generated since last reset. */
diff --git a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java
index 2e97f26..9bf7cc8 100644
--- a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java
+++ b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java
@@ -57,6 +57,7 @@ public class DirContentSource extends ContentSource {
   public static class Iterator implements java.util.Iterator<File> {
 
     static class Comparator implements java.util.Comparator<File> {
+      @Override
       public int compare(File _a, File _b) {
         String a = _a.toString();
         String b = _b.toString();
@@ -106,12 +107,14 @@ public class DirContentSource extends ContentSource {
     void push(File f) {
       push(f.listFiles(new FileFilter() {
 
+        @Override
         public boolean accept(File file) {
           return file.isDirectory();
         }
       }));
       push(f.listFiles(new FileFilter() {
 
+        @Override
         public boolean accept(File file) {
           return file.getName().endsWith(".txt");
         }
@@ -131,10 +134,12 @@ public class DirContentSource extends ContentSource {
       return count;
     }
 
+    @Override
     public boolean hasNext() {
       return stack.size() > 0;
     }
     
+    @Override
     public File next() {
       assert hasNext();
       count++;
@@ -144,6 +149,7 @@ public class DirContentSource extends ContentSource {
       return object;
     }
 
+    @Override
     public void remove() {
       throw new RuntimeException("cannot");
     }
diff --git a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java
index 09745cb..8c82628 100644
--- a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java
+++ b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.java
@@ -170,6 +170,7 @@ public class EnwikiContentSource extends ContentSource {
       }
     }
 
+    @Override
     public void run() {
 
       try {
diff --git a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource.java b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource.java
index eb5c889..a1737e2 100644
--- a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource.java
+++ b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource.java
@@ -72,6 +72,7 @@ public class LineDocSource extends ContentSource {
     public SimpleLineParser(String[] header) {
       super(header);
     }
+    @Override
     public void parseLine(DocData docData, String line) {
       int k1 = 0;
       int k2 = line.indexOf(WriteLineDocTask.SEP, k1);
@@ -122,6 +123,7 @@ public class LineDocSource extends ContentSource {
       }
     }
     
+    @Override
     public void parseLine(DocData docData, String line) {
       int n = 0;
       int k1 = 0;
diff --git a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LongToEnglishQueryMaker.java b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LongToEnglishQueryMaker.java
index 81cbed2..e76926e 100644
--- a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LongToEnglishQueryMaker.java
+++ b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LongToEnglishQueryMaker.java
@@ -40,10 +40,12 @@ public class LongToEnglishQueryMaker implements QueryMaker {
   private final RuleBasedNumberFormat rnbf = new RuleBasedNumberFormat(Locale.ROOT,
                                                                        RuleBasedNumberFormat.SPELLOUT);
 
+  @Override
   public Query makeQuery(int size) throws Exception {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public synchronized Query makeQuery() throws Exception {
     return parser.parse("" + rnbf.format(getNextCounter()) + "");
   }
@@ -55,15 +57,18 @@ public class LongToEnglishQueryMaker implements QueryMaker {
     return counter++;
   }
 
+  @Override
   public void setConfig(Config config) throws Exception {
     Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get("analyzer", StandardAnalyzer.class.getName()));
     parser = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD, anlzr);
   }
 
+  @Override
   public void resetInputs() {
     counter = Long.MIN_VALUE + 10;
   }
 
+  @Override
   public String printQueries() {
     return "LongToEnglish: [" + Long.MIN_VALUE + " TO " + counter + "]";
   }
diff --git a/lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityQuery.java b/lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityQuery.java
index 484b788..25ea850 100755
--- a/lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityQuery.java
+++ b/lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityQuery.java
@@ -71,6 +71,7 @@ public class QualityQuery implements Comparable<QualityQuery> {
 
   /* for a nicer sort of input queries before running them.
    * Try first as ints, fall back to string if not int. */ 
+  @Override
   public int compareTo(QualityQuery other) {
     try {
       // compare as ints when ids ints
diff --git a/lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge.java b/lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge.java
index e239b3b..a82af99 100644
--- a/lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge.java
+++ b/lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge.java
@@ -83,6 +83,7 @@ public class TrecJudge implements Judge {
   }
   
   // inherit javadocs
+  @Override
   public boolean isRelevant(String docName, QualityQuery query) {
     QRelJudgement qrj = judgements.get(query.getQueryID());
     return qrj!=null && qrj.isRelevant(docName);
@@ -112,6 +113,7 @@ public class TrecJudge implements Judge {
   }
 
   // inherit javadocs
+  @Override
   public boolean validateData(QualityQuery[] qq, PrintWriter logger) {
     HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);
     ArrayList<String> missingJudgements = new ArrayList<String>();
@@ -146,6 +148,7 @@ public class TrecJudge implements Judge {
   }
 
   // inherit javadocs
+  @Override
   public int maxRecall(QualityQuery query) {
     QRelJudgement qrj = judgements.get(query.getQueryID());
     if (qrj!=null) {
diff --git a/lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser.java b/lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser.java
index 9ac485a..1add4ff 100755
--- a/lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser.java
+++ b/lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser.java
@@ -59,6 +59,7 @@ public class SimpleQQParser implements QualityQueryParser {
   /* (non-Javadoc)
    * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)
    */
+  @Override
   public Query parse(QualityQuery qq) throws ParseException {
     QueryParser qp = queryParser.get();
     if (qp==null) {
diff --git a/lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java b/lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java
index 1322f8a..e0fe7a6 100644
--- a/lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java
+++ b/lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java
@@ -51,6 +51,7 @@ public class ExtractReuters {
 
   public void extract() {
     File[] sgmFiles = reutersDir.listFiles(new FileFilter() {
+      @Override
       public boolean accept(File file) {
         return file.getName().endsWith(".sgm");
       }
diff --git a/lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse.java b/lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse.java
index 36734bd..2f8a555 100755
--- a/lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse.java
+++ b/lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse.java
@@ -94,14 +94,17 @@ public class TestPerfTasksParse extends LuceneTestCase {
   }
   
   public static class MockContentSource extends ContentSource {
+    @Override
     public DocData getNextDocData(DocData docData)
         throws NoMoreDataException, IOException {
       return docData;
     }
+    @Override
     public void close() throws IOException { }
   }
 
   public static class MockQueryMaker extends AbstractQueryMaker {
+    @Override
     protected Query[] prepareQueries() throws Exception {
       return new Query[0];
     }
@@ -113,6 +116,7 @@ public class TestPerfTasksParse extends LuceneTestCase {
     boolean foundFiles = false;
     final File examplesDir = new File(ConfLoader.class.getResource(".").toURI());
     for (File algFile : examplesDir.listFiles(new FileFilter() {
+      @Override
       public boolean accept(File pathname) { return pathname.isFile() && pathname.getName().endsWith(".alg"); }
     })) {
       try {
diff --git a/lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/utils/StreamUtilsTest.java b/lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/utils/StreamUtilsTest.java
index 6bd7ee2..7a291a8 100644
--- a/lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/utils/StreamUtilsTest.java
+++ b/lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/utils/StreamUtilsTest.java
@@ -133,6 +133,7 @@ public class StreamUtilsTest extends BenchmarkTestCase {
     r.close();
   }
   
+  @Override
   @Before
   public void setUp() throws Exception {
     super.setUp();
@@ -141,6 +142,7 @@ public class StreamUtilsTest extends BenchmarkTestCase {
     assertTrue(testDir.mkdirs());
   }
 
+  @Override
   @After
   public void tearDown() throws Exception {
     _TestUtil.rmDir(testDir);
diff --git a/lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase.java b/lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase.java
index 5352e21..968eaff 100644
--- a/lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase.java
+++ b/lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase.java
@@ -38,6 +38,7 @@ public abstract class ClassificationTestBase extends LuceneTestCase {
   private String classFieldName;
   private Directory dir;
 
+  @Override
   @Before
   public void setUp() throws Exception {
     super.setUp();
@@ -47,6 +48,7 @@ public abstract class ClassificationTestBase extends LuceneTestCase {
     classFieldName = "cat";
   }
 
+  @Override
   @After
   public void tearDown() throws Exception {
     super.tearDown();
diff --git a/lucene/classification/src/test/org/apache/lucene/classification/utils/DataSplitterTest.java b/lucene/classification/src/test/org/apache/lucene/classification/utils/DataSplitterTest.java
index 31a8704..d966611 100644
--- a/lucene/classification/src/test/org/apache/lucene/classification/utils/DataSplitterTest.java
+++ b/lucene/classification/src/test/org/apache/lucene/classification/utils/DataSplitterTest.java
@@ -52,6 +52,7 @@ public class DataSplitterTest extends LuceneTestCase {
   private String classFieldName = "class";
   private String idFieldName = "id";
 
+  @Override
   @Before
   public void setUp() throws Exception {
     super.setUp();
@@ -81,6 +82,7 @@ public class DataSplitterTest extends LuceneTestCase {
 
   }
 
+  @Override
   @After
   public void tearDown() throws Exception {
     originalIndex.close();
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter.java b/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter.java
index 2e375b7..b270fcc 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter.java
@@ -212,6 +212,7 @@ public class FixedGapTermsIndexWriter extends TermsIndexWriterBase {
     }
   }
 
+  @Override
   public void close() throws IOException {
     boolean success = false;
     try {
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/TermsIndexReaderBase.java b/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/TermsIndexReaderBase.java
index 81b7c41..0461bd4 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/TermsIndexReaderBase.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/TermsIndexReaderBase.java
@@ -42,6 +42,7 @@ public abstract class TermsIndexReaderBase implements Closeable {
 
   public abstract FieldIndexEnum getFieldEnum(FieldInfo fieldInfo);
 
+  @Override
   public abstract void close() throws IOException;
 
   public abstract boolean supportsOrd();
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.java b/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.java
index c52b8b7..65a0b7e 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.java
@@ -288,6 +288,7 @@ public class VariableGapTermsIndexWriter extends TermsIndexWriterBase {
     }
   }
 
+  @Override
   public void close() throws IOException {
     try {
     final long dirStart = out.getFilePointer();
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java b/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java
index ff4472b..0388593 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java
@@ -133,6 +133,7 @@ public final class BloomFilteringPostingsFormat extends PostingsFormat {
     super(BLOOM_CODEC_NAME);
   }
   
+  @Override
   public FieldsConsumer fieldsConsumer(SegmentWriteState state)
       throws IOException {
     if (delegatePostingsFormat == null) {
@@ -144,6 +145,7 @@ public final class BloomFilteringPostingsFormat extends PostingsFormat {
         delegatePostingsFormat);
   }
   
+  @Override
   public FieldsProducer fieldsProducer(SegmentReadState state)
       throws IOException {
     return new BloomFilteredFieldsProducer(state);
@@ -188,14 +190,17 @@ public final class BloomFilteringPostingsFormat extends PostingsFormat {
       }
     }
     
+    @Override
     public Iterator<String> iterator() {
       return delegateFieldsProducer.iterator();
     }
     
+    @Override
     public void close() throws IOException {
       delegateFieldsProducer.close();
     }
     
+    @Override
     public Terms terms(String field) throws IOException {
       FuzzySet filter = bloomsByFieldName.get(field);
       if (filter == null) {
@@ -209,6 +214,7 @@ public final class BloomFilteringPostingsFormat extends PostingsFormat {
       }
     }
     
+    @Override
     public int size() {
       return delegateFieldsProducer.size();
     }
@@ -460,10 +466,12 @@ public final class BloomFilteringPostingsFormat extends PostingsFormat {
       this.bloomFilter = bloomFilter;
     }
     
+    @Override
     public PostingsConsumer startTerm(BytesRef text) throws IOException {
       return delegateTermsConsumer.startTerm(text);
     }
     
+    @Override
     public void finishTerm(BytesRef text, TermStats stats) throws IOException {
       
       // Record this term in our BloomFilter
@@ -473,11 +481,13 @@ public final class BloomFilteringPostingsFormat extends PostingsFormat {
       delegateTermsConsumer.finishTerm(text, stats);
     }
     
+    @Override
     public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount)
         throws IOException {
       delegateTermsConsumer.finish(sumTotalTermFreq, sumDocFreq, docCount);
     }
     
+    @Override
     public Comparator<BytesRef> getComparator() throws IOException {
       return delegateTermsConsumer.getComparator();
     }
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
index 936d4ed..64cb5e1 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java
@@ -637,6 +637,7 @@ public final class DirectPostingsFormat extends PostingsFormat {
         termOrd = -1;
       }
 
+      @Override
       public Comparator<BytesRef> getComparator() {
         return BytesRef.getUTF8SortedAsUnicodeComparator();
       }
@@ -1032,6 +1033,7 @@ public final class DirectPostingsFormat extends PostingsFormat {
         }
       }
 
+      @Override
       public Comparator<BytesRef> getComparator() {
         return BytesRef.getUTF8SortedAsUnicodeComparator();
       }
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java b/lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java
index 76fa37a..914f236 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java
@@ -609,6 +609,7 @@ public class PulsingPostingsReader extends PostingsReaderBase {
     private final Map<PulsingPostingsReader,DocsEnum> enums = 
       new IdentityHashMap<PulsingPostingsReader,DocsEnum>();
       
+    @Override
     public Map<PulsingPostingsReader,DocsEnum> enums() {
       return enums;
     }
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/sep/IntIndexInput.java b/lucene/codecs/src/java/org/apache/lucene/codecs/sep/IntIndexInput.java
index 93640e0..216f590 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/sep/IntIndexInput.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/sep/IntIndexInput.java
@@ -31,6 +31,7 @@ public abstract class IntIndexInput implements Closeable {
 
   public abstract Reader reader() throws IOException;
 
+  @Override
   public abstract void close() throws IOException;
 
   public abstract Index index() throws IOException;
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/sep/IntIndexOutput.java b/lucene/codecs/src/java/org/apache/lucene/codecs/sep/IntIndexOutput.java
index fd1eb49..e2ab76f 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/sep/IntIndexOutput.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/sep/IntIndexOutput.java
@@ -56,5 +56,6 @@ public abstract class IntIndexOutput implements Closeable {
    *  this and interact with the returned IndexWriter. */
   public abstract Index index() throws IOException;
 
+  @Override
   public abstract void close() throws IOException;
 }
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.java b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.java
index df68818..c05e69f 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.java
@@ -79,6 +79,7 @@ public class SimpleTextPerDocProducer extends PerDocProducerBase {
     return docValues;
   }
 
+  @Override
   protected DocValues loadDocValues(int docCount, Directory dir, String id,
       DocValues.Type type, IOContext context) throws IOException {
     return new SimpleTextDocValues(dir, context, type, id, docCount, comp, segmentSuffix);
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java b/lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java
index 613d77f..dd48520 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java
@@ -186,6 +186,7 @@ public abstract class Analyzer implements Closeable {
   }
 
   /** Frees persistent resources used by this Analyzer */
+  @Override
   public void close() {
     reuseStrategy.close();
   }
@@ -334,6 +335,7 @@ public abstract class Analyzer implements Closeable {
     /**
      * Closes the ReuseStrategy, freeing any resources
      */
+    @Override
     public void close() {
       if (storedValue != null) {
         storedValue.close();
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.java b/lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.java
index f2c230b..29dc1c1 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.java
@@ -153,10 +153,12 @@ public final class NumericTokenStream extends TokenStream {
      */
     public NumericTermAttributeImpl() {}
 
+    @Override
     public BytesRef getBytesRef() {
       return bytes;
     }
     
+    @Override
     public int fillBytesRef() {
       try {
         assert valueSize == 64 || valueSize == 32;
@@ -170,15 +172,21 @@ public final class NumericTokenStream extends TokenStream {
       }
     }
 
+    @Override
     public int getShift() { return shift; }
+    @Override
     public void setShift(int shift) { this.shift = shift; }
+    @Override
     public int incShift() {
       return (shift += precisionStep);
     }
 
+    @Override
     public long getRawValue() { return value  & ~((1L << shift) - 1L); }
+    @Override
     public int getValueSize() { return valueSize; }
 
+    @Override
     public void init(long value, int valueSize, int precisionStep, int shift) {
       this.value = value;
       this.valueSize = valueSize;
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/Token.java b/lucene/core/src/java/org/apache/lucene/analysis/Token.java
index 9a5f1a4..22b5676 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/Token.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/Token.java
@@ -242,6 +242,7 @@ public class Token extends CharTermAttributeImpl
    * {@inheritDoc}
    * @see PositionIncrementAttribute
    */
+  @Override
   public void setPositionIncrement(int positionIncrement) {
     if (positionIncrement < 0)
       throw new IllegalArgumentException
@@ -253,6 +254,7 @@ public class Token extends CharTermAttributeImpl
    * {@inheritDoc}
    * @see PositionIncrementAttribute
    */
+  @Override
   public int getPositionIncrement() {
     return positionIncrement;
   }
@@ -279,6 +281,7 @@ public class Token extends CharTermAttributeImpl
    * {@inheritDoc}
    * @see OffsetAttribute
    */
+  @Override
   public final int startOffset() {
     return startOffset;
   }
@@ -287,6 +290,7 @@ public class Token extends CharTermAttributeImpl
    * {@inheritDoc}
    * @see OffsetAttribute
    */
+  @Override
   public final int endOffset() {
     return endOffset;
   }
@@ -295,6 +299,7 @@ public class Token extends CharTermAttributeImpl
    * {@inheritDoc}
    * @see OffsetAttribute
    */
+  @Override
   public void setOffset(int startOffset, int endOffset) {
     checkOffsets(startOffset, endOffset);
     this.startOffset = startOffset;
@@ -305,6 +310,7 @@ public class Token extends CharTermAttributeImpl
    * {@inheritDoc}
    * @see TypeAttribute
    */
+  @Override
   public final String type() {
     return type;
   }
@@ -313,6 +319,7 @@ public class Token extends CharTermAttributeImpl
    * {@inheritDoc}
    * @see TypeAttribute
    */
+  @Override
   public final void setType(String type) {
     this.type = type;
   }
@@ -321,6 +328,7 @@ public class Token extends CharTermAttributeImpl
    * {@inheritDoc}
    * @see FlagsAttribute
    */
+  @Override
   public int getFlags() {
     return flags;
   }
@@ -329,6 +337,7 @@ public class Token extends CharTermAttributeImpl
    * {@inheritDoc}
    * @see FlagsAttribute
    */
+  @Override
   public void setFlags(int flags) {
     this.flags = flags;
   }
@@ -337,6 +346,7 @@ public class Token extends CharTermAttributeImpl
    * {@inheritDoc}
    * @see PayloadAttribute
    */
+  @Override
   public BytesRef getPayload() {
     return this.payload;
   }
@@ -345,6 +355,7 @@ public class Token extends CharTermAttributeImpl
    * {@inheritDoc}
    * @see PayloadAttribute
    */
+  @Override
   public void setPayload(BytesRef payload) {
     this.payload = payload;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/TokenStream.java b/lucene/core/src/java/org/apache/lucene/analysis/TokenStream.java
index 5b961d6..fc88325 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/TokenStream.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/TokenStream.java
@@ -176,6 +176,7 @@ public abstract class TokenStream extends AttributeSource implements Closeable {
   public void reset() throws IOException {}
   
   /** Releases resources associated with this stream. */
+  @Override
   public void close() throws IOException {}
   
 }
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttribute.java b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttribute.java
index 3c4b9ff..a8f5b9c 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttribute.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttribute.java
@@ -68,8 +68,11 @@ public interface CharTermAttribute extends Attribute, CharSequence, Appendable {
   public CharTermAttribute setEmpty();
   
   // the following methods are redefined to get rid of IOException declaration:
+  @Override
   public CharTermAttribute append(CharSequence csq);
+  @Override
   public CharTermAttribute append(CharSequence csq, int start, int end);
+  @Override
   public CharTermAttribute append(char c);
 
   /** Appends the specified {@code String} to this character sequence. 
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.java b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.java
index 8cab986..273102c 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.java
@@ -36,16 +36,19 @@ public class CharTermAttributeImpl extends AttributeImpl implements CharTermAttr
   /** Initialize this attribute with empty term text */
   public CharTermAttributeImpl() {}
 
+  @Override
   public final void copyBuffer(char[] buffer, int offset, int length) {
     growTermBuffer(length);
     System.arraycopy(buffer, offset, termBuffer, 0, length);
     termLength = length;
   }
 
+  @Override
   public final char[] buffer() {
     return termBuffer;
   }
   
+  @Override
   public final char[] resizeBuffer(int newSize) {
     if(termBuffer.length < newSize){
       // Not big enough; create a new array with slight
@@ -65,6 +68,7 @@ public class CharTermAttributeImpl extends AttributeImpl implements CharTermAttr
     }
   }
 
+  @Override
   public final CharTermAttribute setLength(int length) {
     if (length > termBuffer.length)
       throw new IllegalArgumentException("length " + length + " exceeds the size of the termBuffer (" + termBuffer.length + ")");
@@ -72,6 +76,7 @@ public class CharTermAttributeImpl extends AttributeImpl implements CharTermAttr
     return this;
   }
   
+  @Override
   public final CharTermAttribute setEmpty() {
     termLength = 0;
     return this;
@@ -81,26 +86,31 @@ public class CharTermAttributeImpl extends AttributeImpl implements CharTermAttr
   private BytesRef bytes = new BytesRef(MIN_BUFFER_SIZE);
 
   // not until java 6 @Override
+  @Override
   public int fillBytesRef() {
     return UnicodeUtil.UTF16toUTF8WithHash(termBuffer, 0, termLength, bytes);
   }
 
   // not until java 6 @Override
+  @Override
   public BytesRef getBytesRef() {
     return bytes;
   }
   
   // *** CharSequence interface ***
+  @Override
   public final int length() {
     return termLength;
   }
   
+  @Override
   public final char charAt(int index) {
     if (index >= termLength)
       throw new IndexOutOfBoundsException();
     return termBuffer[index];
   }
   
+  @Override
   public final CharSequence subSequence(final int start, final int end) {
     if (start > termLength || end > termLength)
       throw new IndexOutOfBoundsException();
@@ -109,12 +119,14 @@ public class CharTermAttributeImpl extends AttributeImpl implements CharTermAttr
   
   // *** Appendable interface ***
 
+  @Override
   public final CharTermAttribute append(CharSequence csq) {
     if (csq == null) // needed for Appendable compliance
       return appendNull();
     return append(csq, 0, csq.length());
   }
   
+  @Override
   public final CharTermAttribute append(CharSequence csq, int start, int end) {
     if (csq == null) // needed for Appendable compliance
       csq = "null";
@@ -151,6 +163,7 @@ public class CharTermAttributeImpl extends AttributeImpl implements CharTermAttr
     }
   }
   
+  @Override
   public final CharTermAttribute append(char c) {
     resizeBuffer(termLength + 1)[termLength++] = c;
     return this;
@@ -158,6 +171,7 @@ public class CharTermAttributeImpl extends AttributeImpl implements CharTermAttr
   
   // *** For performance some convenience methods in addition to CSQ's ***
   
+  @Override
   public final CharTermAttribute append(String s) {
     if (s == null) // needed for Appendable compliance
       return appendNull();
@@ -167,6 +181,7 @@ public class CharTermAttributeImpl extends AttributeImpl implements CharTermAttr
     return this;
   }
   
+  @Override
   public final CharTermAttribute append(StringBuilder s) {
     if (s == null) // needed for Appendable compliance
       return appendNull();
@@ -176,6 +191,7 @@ public class CharTermAttributeImpl extends AttributeImpl implements CharTermAttr
     return this;
   }
   
+  @Override
   public final CharTermAttribute append(CharTermAttribute ta) {
     if (ta == null) // needed for Appendable compliance
       return appendNull();
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl.java b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl.java
index 337cd02..9f583d9 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl.java
@@ -26,10 +26,12 @@ public class FlagsAttributeImpl extends AttributeImpl implements FlagsAttribute,
   /** Initialize this attribute with no bits set */
   public FlagsAttributeImpl() {}
   
+  @Override
   public int getFlags() {
     return flags;
   }
 
+  @Override
   public void setFlags(int flags) {
     this.flags = flags;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/KeywordAttributeImpl.java b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/KeywordAttributeImpl.java
index 0deaa4b..481ee74 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/KeywordAttributeImpl.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/KeywordAttributeImpl.java
@@ -53,10 +53,12 @@ public final class KeywordAttributeImpl extends AttributeImpl implements
     return keyword == other.keyword;
   }
 
+  @Override
   public boolean isKeyword() {
     return keyword;
   }
 
+  @Override
   public void setKeyword(boolean isKeyword) {
     keyword = isKeyword;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.java b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.java
index 54f4d28..d5cdf29 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.java
@@ -27,10 +27,12 @@ public class OffsetAttributeImpl extends AttributeImpl implements OffsetAttribut
   /** Initialize this attribute with startOffset and endOffset of 0. */
   public OffsetAttributeImpl() {}
 
+  @Override
   public int startOffset() {
     return startOffset;
   }
 
+  @Override
   public void setOffset(int startOffset, int endOffset) {
 
     // TODO: we could assert that this is set-once, ie,
@@ -48,6 +50,7 @@ public class OffsetAttributeImpl extends AttributeImpl implements OffsetAttribut
     this.endOffset = endOffset;
   }
   
+  @Override
   public int endOffset() {
     return endOffset;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.java b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.java
index 5a9118f..b1dccdb 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.java
@@ -36,10 +36,12 @@ public class PayloadAttributeImpl extends AttributeImpl implements PayloadAttrib
     this.payload = payload;
   }
   
+  @Override
   public BytesRef getPayload() {
     return this.payload;
   }
 
+  @Override
   public void setPayload(BytesRef payload) {
     this.payload = payload;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl.java b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl.java
index ff0c4d4..48ad2e8 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl.java
@@ -26,6 +26,7 @@ public class PositionIncrementAttributeImpl extends AttributeImpl implements Pos
   /** Initialize this attribute with position increment of 1 */
   public PositionIncrementAttributeImpl() {}
 
+  @Override
   public void setPositionIncrement(int positionIncrement) {
     if (positionIncrement < 0) {
       throw new IllegalArgumentException
@@ -34,6 +35,7 @@ public class PositionIncrementAttributeImpl extends AttributeImpl implements Pos
     this.positionIncrement = positionIncrement;
   }
 
+  @Override
   public int getPositionIncrement() {
     return positionIncrement;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PositionLengthAttributeImpl.java b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PositionLengthAttributeImpl.java
index 30d6819..6fb2898 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PositionLengthAttributeImpl.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/PositionLengthAttributeImpl.java
@@ -26,6 +26,7 @@ public class PositionLengthAttributeImpl extends AttributeImpl implements Positi
   /** Initializes this attribute with position length of 1. */
   public PositionLengthAttributeImpl() {}
   
+  @Override
   public void setPositionLength(int positionLength) {
     if (positionLength < 1) {
       throw new IllegalArgumentException
@@ -34,6 +35,7 @@ public class PositionLengthAttributeImpl extends AttributeImpl implements Positi
     this.positionLength = positionLength;
   }
 
+  @Override
   public int getPositionLength() {
     return positionLength;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl.java b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl.java
index 238c82c..4c2b971 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl.java
@@ -33,10 +33,12 @@ public class TypeAttributeImpl extends AttributeImpl implements TypeAttribute, C
     this.type = type;
   }
   
+  @Override
   public String type() {
     return type;
   }
 
+  @Override
   public void setType(String type) {
     this.type = type;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/DocValuesArraySource.java b/lucene/core/src/java/org/apache/lucene/codecs/DocValuesArraySource.java
index 8af5eda..c48f731 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/DocValuesArraySource.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/DocValuesArraySource.java
@@ -118,6 +118,7 @@ public abstract class DocValuesArraySource extends Source {
       return values;
     }
     
+    @Override
     public double getFloat(int docID) {
       return getInt(docID);
     }
@@ -140,6 +141,7 @@ public abstract class DocValuesArraySource extends Source {
       return new ByteValues((byte[]) array);
     }
 
+    @Override
     public void toBytes(long value, BytesRef bytesRef) {
       if (bytesRef.bytes.length == 0) {
         bytesRef.bytes = new byte[1];
@@ -183,6 +185,7 @@ public abstract class DocValuesArraySource extends Source {
       return values;
     }
     
+    @Override
     public double getFloat(int docID) {
       return getInt(docID);
     }
@@ -199,6 +202,7 @@ public abstract class DocValuesArraySource extends Source {
       return new ShortValues(input, numDocs);
     }
 
+    @Override
     public void toBytes(long value, BytesRef bytesRef) {
       copyShort(bytesRef, (short) (0xFFFFL & value));
     }
@@ -243,6 +247,7 @@ public abstract class DocValuesArraySource extends Source {
       return values;
     }
     
+    @Override
     public double getFloat(int docID) {
       return getInt(docID);
     }
@@ -259,6 +264,7 @@ public abstract class DocValuesArraySource extends Source {
       return new IntValues(input, numDocs);
     }
 
+    @Override
     public void toBytes(long value, BytesRef bytesRef) {
       copyInt(bytesRef, (int) (0xFFFFFFFF & value));
     }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer.java b/lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer.java
index 7e16a5f..35d54ff 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer.java
@@ -54,6 +54,7 @@ public abstract class FieldsConsumer implements Closeable {
   public abstract TermsConsumer addField(FieldInfo field) throws IOException;
   
   /** Called when we are done adding everything. */
+  @Override
   public abstract void close() throws IOException;
 
   /** Called during merging to merge all {@link Fields} from
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/PostingsReaderBase.java b/lucene/core/src/java/org/apache/lucene/codecs/PostingsReaderBase.java
index b5088d0..b8ea7f2 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/PostingsReaderBase.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/PostingsReaderBase.java
@@ -66,6 +66,7 @@ public abstract class PostingsReaderBase implements Closeable {
   public abstract DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState state, Bits skipDocs, DocsAndPositionsEnum reuse,
                                                         int flags) throws IOException;
 
+  @Override
   public abstract void close() throws IOException;
 
   /** Reads data for all terms in the next block; this
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsReader.java
index 13635b0..7bc8df3 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsReader.java
@@ -38,5 +38,6 @@ public abstract class StoredFieldsReader implements Cloneable, Closeable {
   /** Visit the stored fields for document <code>n</code> */
   public abstract void visitDocument(int n, StoredFieldVisitor visitor) throws IOException;
 
+  @Override
   public abstract StoredFieldsReader clone();
 }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsWriter.java b/lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsWriter.java
index 19ff050..5babf7b 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsWriter.java
@@ -118,5 +118,6 @@ public abstract class StoredFieldsWriter implements Closeable {
     }
   }
 
+  @Override
   public abstract void close() throws IOException;
 }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/TermVectorsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/TermVectorsReader.java
index 8f65e6d..46a7a04 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/TermVectorsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/TermVectorsReader.java
@@ -44,5 +44,6 @@ public abstract class TermVectorsReader implements Cloneable, Closeable {
 
   /** Create a clone that one caller at a time may use to
    *  read term vectors. */
+  @Override
   public abstract TermVectorsReader clone();
 }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter.java b/lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter.java
index 3dbec07..f6fcb86 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter.java
@@ -285,5 +285,6 @@ public abstract class TermVectorsWriter implements Closeable {
    *  before feeding to this API. */
   public abstract Comparator<BytesRef> getComparator() throws IOException;
 
+  @Override
   public abstract void close() throws IOException;
 }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector.java
index 3ed18a1..4135e0d 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector.java
@@ -109,6 +109,7 @@ final class BitVector implements Cloneable, MutableBits {
   }
 
   /** Sets the value of <code>bit</code> to zero. */
+  @Override
   public final void clear(int bit) {
     if (bit >= size) {
       throw new ArrayIndexOutOfBoundsException(bit);
@@ -138,6 +139,7 @@ final class BitVector implements Cloneable, MutableBits {
 
   /** Returns <code>true</code> if <code>bit</code> is one and
     <code>false</code> if it is zero. */
+  @Override
   public final boolean get(int bit) {
     assert bit >= 0 && bit < size: "bit " + bit + " is out of bounds 0.." + (size-1);
     return (bits[bit >> 3] & (1 << (bit & 7))) != 0;
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java
index 8d309ec..a5d7b5b 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java
@@ -124,6 +124,7 @@ public final class Lucene40StoredFieldsReader extends StoredFieldsReader impleme
    *
    * @throws IOException If an I/O error occurs
    */
+  @Override
   public final void close() throws IOException {
     if (!closed) {
       IOUtils.close(fieldsStream, indexStream);
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.java
index a80cea7..d3416c9 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.java
@@ -113,11 +113,13 @@ public final class Lucene40StoredFieldsWriter extends StoredFieldsWriter {
   // and adds a new entry for this document into the index
   // stream.  This assumes the buffer was already written
   // in the correct fields format.
+  @Override
   public void startDocument(int numStoredFields) throws IOException {
     indexStream.writeLong(fieldsStream.getFilePointer());
     fieldsStream.writeVInt(numStoredFields);
   }
 
+  @Override
   public void close() throws IOException {
     try {
       IOUtils.close(fieldsStream, indexStream);
@@ -126,6 +128,7 @@ public final class Lucene40StoredFieldsWriter extends StoredFieldsWriter {
     }
   }
 
+  @Override
   public void abort() {
     try {
       close();
@@ -135,6 +138,7 @@ public final class Lucene40StoredFieldsWriter extends StoredFieldsWriter {
         IndexFileNames.segmentFileName(segment, "", FIELDS_INDEX_EXTENSION));
   }
 
+  @Override
   public void writeField(FieldInfo info, StorableField field) throws IOException {
     fieldsStream.writeVInt(info.number);
     int bits = 0;
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.java
index 2abe64f..64f9383 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.java
@@ -469,6 +469,7 @@ public final class Bytes {
       }
     }
     
+    @Override
     public int getValueSize() {
       return size;
     }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/DirectSource.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/DirectSource.java
index 2acbb56..ba410a2 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/DirectSource.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/DirectSource.java
@@ -130,6 +130,7 @@ abstract class DirectSource extends Source {
       throw new UnsupportedOperationException("ints are not supported");
     }
 
+    @Override
     double toDouble(IndexInput input) throws IOException {
       return Float.intBitsToFloat(input.readInt());
     }
@@ -141,6 +142,7 @@ abstract class DirectSource extends Source {
       throw new UnsupportedOperationException("ints are not supported");
     }
 
+    @Override
     double toDouble(IndexInput input) throws IOException {
       return Double.longBitsToDouble(input.readLong());
     }
@@ -153,6 +155,7 @@ abstract class DirectSource extends Source {
       return input.readLong();
     }
 
+    @Override
     double toDouble(IndexInput input) {
       throw new UnsupportedOperationException("doubles are not supported");
     }
diff --git a/lucene/core/src/java/org/apache/lucene/document/Field.java b/lucene/core/src/java/org/apache/lucene/document/Field.java
index 712a0d5..979f036 100644
--- a/lucene/core/src/java/org/apache/lucene/document/Field.java
+++ b/lucene/core/src/java/org/apache/lucene/document/Field.java
@@ -266,6 +266,7 @@ public class Field implements IndexableField, StorableField {
    * binary value is used. Exactly one of stringValue(), readerValue(), and
    * getBinaryValue() must be set.
    */
+  @Override
   public String stringValue() {
     if (fieldsData instanceof String || fieldsData instanceof Number) {
       return fieldsData.toString();
@@ -279,6 +280,7 @@ public class Field implements IndexableField, StorableField {
    * binary value is used. Exactly one of stringValue(), readerValue(), and
    * getBinaryValue() must be set.
    */
+  @Override
   public Reader readerValue() {
     return fieldsData instanceof Reader ? (Reader) fieldsData : null;
   }
@@ -431,6 +433,7 @@ public class Field implements IndexableField, StorableField {
     this.tokenStream = tokenStream;
   }
   
+  @Override
   public String name() {
     return name;
   }
@@ -441,6 +444,7 @@ public class Field implements IndexableField, StorableField {
    * The default value is <code>1.0f</code> (no boost).
    * @see #setBoost(float)
    */
+  @Override
   public float boost() {
     return boost;
   }
@@ -460,6 +464,7 @@ public class Field implements IndexableField, StorableField {
     this.boost = boost;
   }
 
+  @Override
   public Number numericValue() {
     if (fieldsData instanceof Number) {
       return (Number) fieldsData;
@@ -468,6 +473,7 @@ public class Field implements IndexableField, StorableField {
     }
   }
 
+  @Override
   public BytesRef binaryValue() {
     if (fieldsData instanceof BytesRef) {
       return (BytesRef) fieldsData;
@@ -494,10 +500,12 @@ public class Field implements IndexableField, StorableField {
   }
   
   /** Returns the {@link FieldType} for this field. */
+  @Override
   public FieldType fieldType() {
     return type;
   }
 
+  @Override
   public TokenStream tokenStream(Analyzer analyzer) throws IOException {
     if (!fieldType().indexed()) {
       return null;
diff --git a/lucene/core/src/java/org/apache/lucene/document/FieldType.java b/lucene/core/src/java/org/apache/lucene/document/FieldType.java
index 7686bd9..e31925f 100644
--- a/lucene/core/src/java/org/apache/lucene/document/FieldType.java
+++ b/lucene/core/src/java/org/apache/lucene/document/FieldType.java
@@ -102,6 +102,7 @@ public class FieldType implements IndexableFieldType  {
    * The default is <code>false</code>.
    * @see #setIndexed(boolean)
    */
+  @Override
   public boolean indexed() {
     return this.indexed;
   }
@@ -124,6 +125,7 @@ public class FieldType implements IndexableFieldType  {
    * The default is <code>false</code>.
    * @see #setStored(boolean)
    */
+  @Override
   public boolean stored() {
     return this.stored;
   }
@@ -146,6 +148,7 @@ public class FieldType implements IndexableFieldType  {
    * The default is <code>true</code>.
    * @see #setTokenized(boolean)
    */
+  @Override
   public boolean tokenized() {
     return this.tokenized;
   }
@@ -169,6 +172,7 @@ public class FieldType implements IndexableFieldType  {
    * The default is <code>false</code>. 
    * @see #setStoreTermVectors(boolean)
    */
+  @Override
   public boolean storeTermVectors() {
     return this.storeTermVectors;
   }
@@ -192,6 +196,7 @@ public class FieldType implements IndexableFieldType  {
    * The default is <code>false</code>.
    * @see #setStoreTermVectorOffsets(boolean)
    */
+  @Override
   public boolean storeTermVectorOffsets() {
     return this.storeTermVectorOffsets;
   }
@@ -215,6 +220,7 @@ public class FieldType implements IndexableFieldType  {
    * The default is <code>false</code>.
    * @see #setStoreTermVectorPositions(boolean)
    */
+  @Override
   public boolean storeTermVectorPositions() {
     return this.storeTermVectorPositions;
   }
@@ -238,6 +244,7 @@ public class FieldType implements IndexableFieldType  {
    * The default is <code>false</code>.
    * @see #setStoreTermVectorPayloads(boolean) 
    */
+  @Override
   public boolean storeTermVectorPayloads() {
     return this.storeTermVectorPayloads;
   }
@@ -261,6 +268,7 @@ public class FieldType implements IndexableFieldType  {
    * The default is <code>false</code>.
    * @see #setOmitNorms(boolean)
    */
+  @Override
   public boolean omitNorms() {
     return this.omitNorms;
   }
@@ -283,6 +291,7 @@ public class FieldType implements IndexableFieldType  {
    * The default is {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS}.
    * @see #setIndexOptions(org.apache.lucene.index.FieldInfo.IndexOptions)
    */
+  @Override
   public IndexOptions indexOptions() {
     return this.indexOptions;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/index/AtomicReader.java b/lucene/core/src/java/org/apache/lucene/index/AtomicReader.java
index 8ec6052..79b847f 100644
--- a/lucene/core/src/java/org/apache/lucene/index/AtomicReader.java
+++ b/lucene/core/src/java/org/apache/lucene/index/AtomicReader.java
@@ -90,6 +90,7 @@ public abstract class AtomicReader extends IndexReader {
    * field does not exists.  This method does not take into
    * account deleted documents that have not yet been merged
    * away. */
+  @Override
   public final long totalTermFreq(Term term) throws IOException {
     final Fields fields = fields();
     if (fields == null) {
diff --git a/lucene/core/src/java/org/apache/lucene/index/BitsSlice.java b/lucene/core/src/java/org/apache/lucene/index/BitsSlice.java
index 7870072..58b3549 100644
--- a/lucene/core/src/java/org/apache/lucene/index/BitsSlice.java
+++ b/lucene/core/src/java/org/apache/lucene/index/BitsSlice.java
@@ -37,6 +37,7 @@ final class BitsSlice implements Bits {
     assert length >= 0: "length=" + length;
   }
     
+  @Override
   public boolean get(int doc) {
     if (doc >= length) {
       throw new RuntimeException("doc " + doc + " is out of bounds 0 .. " + (length-1));
@@ -45,6 +46,7 @@ final class BitsSlice implements Bits {
     return parent.get(doc+start);
   }
 
+  @Override
   public int length() {
     return length;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java b/lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
index 3e8ad9a..e62fb33 100644
--- a/lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
+++ b/lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
@@ -144,6 +144,7 @@ public class ConcurrentMergeScheduler extends MergeScheduler {
 
   /** Sorts {@link MergeThread}s; larger merges come first. */
   protected static final Comparator<MergeThread> compareByMergeDocCount = new Comparator<MergeThread>() {
+    @Override
     public int compare(MergeThread t1, MergeThread t2) {
       final MergePolicy.OneMerge m1 = t1.getCurrentMerge();
       final MergePolicy.OneMerge m2 = t2.getCurrentMerge();
diff --git a/lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor.java b/lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor.java
index eab9e32..00a1841 100644
--- a/lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor.java
+++ b/lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor.java
@@ -327,6 +327,7 @@ final class DocFieldProcessor extends DocConsumer {
   }
 
   private static final Comparator<DocFieldProcessorPerField> fieldsComp = new Comparator<DocFieldProcessorPerField>() {
+    @Override
     public int compare(DocFieldProcessorPerField o1, DocFieldProcessorPerField o2) {
       return o1.fieldInfo.name.compareTo(o2.fieldInfo.name);
     }
diff --git a/lucene/core/src/java/org/apache/lucene/index/DocValues.java b/lucene/core/src/java/org/apache/lucene/index/DocValues.java
index 7e73ec0..64c1113 100644
--- a/lucene/core/src/java/org/apache/lucene/index/DocValues.java
+++ b/lucene/core/src/java/org/apache/lucene/index/DocValues.java
@@ -163,6 +163,7 @@ public abstract class DocValues implements Closeable {
    * by the creator of this {@link DocValues} instance. API users should not
    * close {@link DocValues} instances.
    */
+  @Override
   public void close() throws IOException {
     cache.close(this);
   }
@@ -784,6 +785,7 @@ public abstract class DocValues implements Closeable {
       public DirectSourceCache() {
       }
 
+      @Override
       public synchronized Source load(DocValues values) throws IOException {
         if (ref == null) {
           ref = values.loadSource();
@@ -791,6 +793,7 @@ public abstract class DocValues implements Closeable {
         return ref;
       }
 
+      @Override
       public synchronized void invalidate(DocValues values) {
         ref = null;
         directSourceCache.close();
diff --git a/lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl.java b/lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl.java
index 7a876b2..817d08f 100644
--- a/lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl.java
+++ b/lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl.java
@@ -384,14 +384,17 @@ final class DocumentsWriterFlushControl  {
     return new Iterator<ThreadState>() {
       int i = 0;
 
+      @Override
       public boolean hasNext() {
         return i < upto;
       }
 
+      @Override
       public ThreadState next() {
         return perThreadPool.getThreadState(i++);
       }
 
+      @Override
       public void remove() {
         throw new UnsupportedOperationException("remove() not supported.");
       }
diff --git a/lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.java b/lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.java
index c44ff41..24c263c 100644
--- a/lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.java
+++ b/lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.java
@@ -178,6 +178,7 @@ class DocumentsWriterFlushQueue {
     protected GlobalDeletesTicket(FrozenBufferedDeletes frozenDeletes) {
       super(frozenDeletes);
     }
+    @Override
     protected void publish(DocumentsWriter writer) throws IOException {
       assert !published : "ticket was already publised - can not publish twice";
       published = true;
@@ -185,6 +186,7 @@ class DocumentsWriterFlushQueue {
       writer.finishFlush(null, frozenDeletes);
     }
 
+    @Override
     protected boolean canPublish() {
       return true;
     }
@@ -198,6 +200,7 @@ class DocumentsWriterFlushQueue {
       super(frozenDeletes);
     }
     
+    @Override
     protected void publish(DocumentsWriter writer) throws IOException {
       assert !published : "ticket was already publised - can not publish twice";
       published = true;
@@ -214,6 +217,7 @@ class DocumentsWriterFlushQueue {
       failed = true;
     }
 
+    @Override
     protected boolean canPublish() {
       return segment != null || failed;
     }
diff --git a/lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java b/lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java
index 272e6f0..a0ce577 100644
--- a/lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java
+++ b/lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java
@@ -637,6 +637,7 @@ class DocumentsWriterPerThread {
     }
     
     /* Allocate another int[] from the shared pool */
+    @Override
     public int[] getIntBlock() {
       int[] b = new int[IntBlockPool.INT_BLOCK_SIZE];
       bytesUsed.addAndGet(IntBlockPool.INT_BLOCK_SIZE
@@ -644,6 +645,7 @@ class DocumentsWriterPerThread {
       return b;
     }
     
+    @Override
     public void recycleIntBlocks(int[][] blocks, int offset, int length) {
       bytesUsed.addAndGet(-(length * (IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT)));
     }
diff --git a/lucene/core/src/java/org/apache/lucene/index/FieldInfos.java b/lucene/core/src/java/org/apache/lucene/index/FieldInfos.java
index d3be8a6..9b41227 100644
--- a/lucene/core/src/java/org/apache/lucene/index/FieldInfos.java
+++ b/lucene/core/src/java/org/apache/lucene/index/FieldInfos.java
@@ -131,6 +131,7 @@ public class FieldInfos implements Iterable<FieldInfo> {
    * ordered by ascending field number
    */
   // TODO: what happens if in fact a different order is used?
+  @Override
   public Iterator<FieldInfo> iterator() {
     return values.iterator();
   }
diff --git a/lucene/core/src/java/org/apache/lucene/index/Fields.java b/lucene/core/src/java/org/apache/lucene/index/Fields.java
index a7e6636..d561916 100644
--- a/lucene/core/src/java/org/apache/lucene/index/Fields.java
+++ b/lucene/core/src/java/org/apache/lucene/index/Fields.java
@@ -32,6 +32,7 @@ public abstract class Fields implements Iterable<String> {
 
   /** Returns an iterator that will step through all fields
    *  names.  This will not return null.  */
+  @Override
   public abstract Iterator<String> iterator();
 
   /** Get the {@link Terms} for this field.  This will return
diff --git a/lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java b/lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java
index 3052cd8..6fa6a73 100644
--- a/lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java
+++ b/lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java
@@ -78,6 +78,7 @@ final class FreqProxTermsWriterPerField extends TermsHashConsumerPerField implem
   @Override
   void skippingLongTerm() {}
 
+  @Override
   public int compareTo(FreqProxTermsWriterPerField other) {
     return fieldInfo.name.compareTo(other.fieldInfo.name);
   }
diff --git a/lucene/core/src/java/org/apache/lucene/index/IndexCommit.java b/lucene/core/src/java/org/apache/lucene/index/IndexCommit.java
index 238d2a4..08f7728 100644
--- a/lucene/core/src/java/org/apache/lucene/index/IndexCommit.java
+++ b/lucene/core/src/java/org/apache/lucene/index/IndexCommit.java
@@ -111,6 +111,7 @@ public abstract class IndexCommit implements Comparable<IndexCommit> {
    *  String -> String. */
   public abstract Map<String,String> getUserData() throws IOException;
   
+  @Override
   public int compareTo(IndexCommit commit) {
     if (getDirectory() != commit.getDirectory()) {
       throw new UnsupportedOperationException("cannot compare IndexCommits from different Directory instances");
diff --git a/lucene/core/src/java/org/apache/lucene/index/IndexReader.java b/lucene/core/src/java/org/apache/lucene/index/IndexReader.java
index 72c0938..54186a6 100644
--- a/lucene/core/src/java/org/apache/lucene/index/IndexReader.java
+++ b/lucene/core/src/java/org/apache/lucene/index/IndexReader.java
@@ -370,6 +370,7 @@ public abstract class IndexReader implements Closeable {
    * No other methods should be called after this has been called.
    * @throws IOException if there is a low-level IO error
    */
+  @Override
   public final synchronized void close() throws IOException {
     if (!closed) {
       decRef();
diff --git a/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
index 1d63338..d98f393 100644
--- a/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
@@ -823,6 +823,7 @@ public class IndexWriter implements Closeable, TwoPhaseCommit {
    *
    * @throws IOException if there is a low-level IO error
    */
+  @Override
   public void close() throws IOException {
     close(true);
   }
@@ -1916,6 +1917,7 @@ public class IndexWriter implements Closeable, TwoPhaseCommit {
    * call to {@link #prepareCommit}.
    * @throws IOException if there is a low-level IO error
    */
+  @Override
   public void rollback() throws IOException {
     ensureOpen();
 
@@ -2577,6 +2579,7 @@ public class IndexWriter implements Closeable, TwoPhaseCommit {
    *  you should immediately close the writer.  See <a
    *  href="#OOME">above</a> for details.</p>
    */
+  @Override
   public final void prepareCommit() throws IOException {
     ensureOpen();
     prepareCommitInternal();
@@ -2734,6 +2737,7 @@ public class IndexWriter implements Closeable, TwoPhaseCommit {
    *
    * @see #prepareCommit
    */
+  @Override
   public final void commit() throws IOException {
     ensureOpen();
     commitInternal();
diff --git a/lucene/core/src/java/org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy.java b/lucene/core/src/java/org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy.java
index 1ce48d7..49c44ea 100644
--- a/lucene/core/src/java/org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy.java
+++ b/lucene/core/src/java/org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy.java
@@ -35,6 +35,7 @@ public final class KeepOnlyLastCommitDeletionPolicy implements IndexDeletionPoli
   /**
    * Deletes all commits except the most recent one.
    */
+  @Override
   public void onInit(List<? extends IndexCommit> commits) {
     // Note that commits.size() should normally be 1:
     onCommit(commits);
@@ -43,6 +44,7 @@ public final class KeepOnlyLastCommitDeletionPolicy implements IndexDeletionPoli
   /**
    * Deletes all commits except the most recent one.
    */
+  @Override
   public void onCommit(List<? extends IndexCommit> commits) {
     // Note that commits.size() should normally be 2 (if not
     // called by onInit above):
diff --git a/lucene/core/src/java/org/apache/lucene/index/LogMergePolicy.java b/lucene/core/src/java/org/apache/lucene/index/LogMergePolicy.java
index 305519e..5918946 100644
--- a/lucene/core/src/java/org/apache/lucene/index/LogMergePolicy.java
+++ b/lucene/core/src/java/org/apache/lucene/index/LogMergePolicy.java
@@ -543,6 +543,7 @@ public abstract class LogMergePolicy extends MergePolicy {
     }
 
     // Sorts largest to smallest
+    @Override
     public int compareTo(SegmentInfoAndLevel other) {
       if (level < other.level) {
         return 1;
diff --git a/lucene/core/src/java/org/apache/lucene/index/MergePolicy.java b/lucene/core/src/java/org/apache/lucene/index/MergePolicy.java
index 9979bd1..3b8b4bf 100644
--- a/lucene/core/src/java/org/apache/lucene/index/MergePolicy.java
+++ b/lucene/core/src/java/org/apache/lucene/index/MergePolicy.java
@@ -379,6 +379,7 @@ public abstract class MergePolicy implements java.io.Closeable, Cloneable {
   /**
    * Release all resources for the policy.
    */
+  @Override
   public abstract void close();
   
   
diff --git a/lucene/core/src/java/org/apache/lucene/index/MergeScheduler.java b/lucene/core/src/java/org/apache/lucene/index/MergeScheduler.java
index 0d312c8..a1c8867 100644
--- a/lucene/core/src/java/org/apache/lucene/index/MergeScheduler.java
+++ b/lucene/core/src/java/org/apache/lucene/index/MergeScheduler.java
@@ -38,5 +38,6 @@ public abstract class MergeScheduler implements Closeable {
   public abstract void merge(IndexWriter writer) throws IOException;
 
   /** Close this MergeScheduler. */
+  @Override
   public abstract void close() throws IOException;
 }
diff --git a/lucene/core/src/java/org/apache/lucene/index/MultiBits.java b/lucene/core/src/java/org/apache/lucene/index/MultiBits.java
index cb45220..228a242 100644
--- a/lucene/core/src/java/org/apache/lucene/index/MultiBits.java
+++ b/lucene/core/src/java/org/apache/lucene/index/MultiBits.java
@@ -48,6 +48,7 @@ final class MultiBits implements Bits {
     return true;
   }
 
+  @Override
   public boolean get(int doc) {
     final int reader = ReaderUtil.subIndex(doc, starts);
     assert reader != -1;
@@ -109,6 +110,7 @@ final class MultiBits implements Bits {
     return subResult;
   }
 
+  @Override
   public int length() {
     return starts[starts.length-1];
   }
diff --git a/lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java b/lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java
index 69252d3..0d18b97 100644
--- a/lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java
+++ b/lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java
@@ -47,10 +47,12 @@ class MultiDocValues extends DocValues {
   
   private static DocValuesPuller DEFAULT_PULLER = new DocValuesPuller();
   private static final DocValuesPuller NORMS_PULLER = new DocValuesPuller() {
+    @Override
     public DocValues pull(AtomicReader reader, String field) throws IOException {
       return reader.normValues(field);
     }
     
+    @Override
     public boolean stopLoadingOnNull(AtomicReader reader, String field) {
       // for norms we drop all norms if one leaf reader has no norms and the field is present
       FieldInfos fieldInfos = reader.getFieldInfos();
@@ -263,6 +265,7 @@ class MultiDocValues extends DocValues {
       this.direct = direct;
     }
 
+    @Override
     public long getInt(int docID) {
       final int doc = ensureSource(docID);
       return current.getInt(doc);
@@ -293,11 +296,13 @@ class MultiDocValues extends DocValues {
       }
     }
 
+    @Override
     public double getFloat(int docID) {
       final int doc = ensureSource(docID);
       return current.getFloat(doc);
     }
 
+    @Override
     public BytesRef getBytes(int docID, BytesRef bytesRef) {
       final int doc = ensureSource(docID);
       return current.getBytes(doc, bytesRef);
@@ -357,6 +362,7 @@ class MultiDocValues extends DocValues {
       return docBases;
     }
     
+    @Override
     public boolean hasArray() {
       boolean oneRealSource = false;
       for (DocValuesSlice slice : slices) {
diff --git a/lucene/core/src/java/org/apache/lucene/index/NoDeletionPolicy.java b/lucene/core/src/java/org/apache/lucene/index/NoDeletionPolicy.java
index 9ea0501..3b445ab 100644
--- a/lucene/core/src/java/org/apache/lucene/index/NoDeletionPolicy.java
+++ b/lucene/core/src/java/org/apache/lucene/index/NoDeletionPolicy.java
@@ -33,8 +33,10 @@ public final class NoDeletionPolicy implements IndexDeletionPolicy {
     // keep private to avoid instantiation
   }
   
+  @Override
   public void onCommit(List<? extends IndexCommit> commits) {}
 
+  @Override
   public void onInit(List<? extends IndexCommit> commits) {}
   
 }
diff --git a/lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.java b/lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.java
index 0039045..e7b17db 100644
--- a/lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.java
+++ b/lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.java
@@ -43,6 +43,7 @@ class PrefixCodedTerms implements Iterable<Term> {
   }
   
   /** @return iterator over the bytes */
+  @Override
   public Iterator<Term> iterator() {
     return new PrefixCodedTermsIterator();
   }
@@ -61,10 +62,12 @@ class PrefixCodedTerms implements Iterable<Term> {
       }
     }
 
+    @Override
     public boolean hasNext() {
       return input.getFilePointer() < input.length();
     }
     
+    @Override
     public Term next() {
       assert hasNext();
       try {
@@ -85,6 +88,7 @@ class PrefixCodedTerms implements Iterable<Term> {
       }
     }
     
+    @Override
     public void remove() {
       throw new UnsupportedOperationException();
     }
diff --git a/lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java b/lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java
index 0feb64e..f375c79 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java
@@ -991,6 +991,7 @@ public final class SegmentInfos implements Cloneable, Iterable<SegmentInfoPerCom
   
   /** Returns an <b>unmodifiable</b> {@link Iterator} of contained segments in order. */
   // @Override (comment out until Java 6)
+  @Override
   public Iterator<SegmentInfoPerCommit> iterator() {
     return asList().iterator();
   }
diff --git a/lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy.java b/lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy.java
index d31c1ec..fa97716 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy.java
@@ -261,12 +261,14 @@ public class SnapshotDeletionPolicy implements IndexDeletionPolicy {
     return idToSnapshot.containsKey(id);
   }
 
+  @Override
   public synchronized void onCommit(List<? extends IndexCommit> commits)
       throws IOException {
     primary.onCommit(wrapCommits(commits));
     lastCommit = commits.get(commits.size() - 1);
   }
 
+  @Override
   public synchronized void onInit(List<? extends IndexCommit> commits)
       throws IOException {
     primary.onInit(wrapCommits(commits));
diff --git a/lucene/core/src/java/org/apache/lucene/index/Term.java b/lucene/core/src/java/org/apache/lucene/index/Term.java
index a630682..db43e0c 100644
--- a/lucene/core/src/java/org/apache/lucene/index/Term.java
+++ b/lucene/core/src/java/org/apache/lucene/index/Term.java
@@ -110,6 +110,7 @@ public final class Term implements Comparable<Term> {
     argument, and a positive integer if this term belongs after the argument.
 
     The ordering of terms is first by field, then by text.*/
+  @Override
   public final int compareTo(Term other) {
     if (field.equals(other.field)) {
       return bytes.compareTo(other.bytes);
diff --git a/lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.java b/lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.java
index 5d31390..dccb5cd 100644
--- a/lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.java
+++ b/lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.java
@@ -269,6 +269,7 @@ public class TieredMergePolicy extends MergePolicy {
   }
 
   private class SegmentByteSizeDescending implements Comparator<SegmentInfoPerCommit> {
+    @Override
     public int compare(SegmentInfoPerCommit o1, SegmentInfoPerCommit o2) {
       try {
         final long sz1 = size(o1);
diff --git a/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java b/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
index d0b9b5c..b0a221b 100644
--- a/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -158,6 +158,7 @@ public class BooleanQuery extends Query implements Iterable<BooleanClause> {
    * make it possible to do:
    * <pre class="prettyprint">for (BooleanClause clause : booleanQuery) {}</pre>
    */
+  @Override
   public final Iterator<BooleanClause> iterator() { return clauses().iterator(); }
 
   /**
diff --git a/lucene/core/src/java/org/apache/lucene/search/BoostAttributeImpl.java b/lucene/core/src/java/org/apache/lucene/search/BoostAttributeImpl.java
index 7552fec..125686a 100644
--- a/lucene/core/src/java/org/apache/lucene/search/BoostAttributeImpl.java
+++ b/lucene/core/src/java/org/apache/lucene/search/BoostAttributeImpl.java
@@ -25,10 +25,12 @@ import org.apache.lucene.util.AttributeImpl;
 public final class BoostAttributeImpl extends AttributeImpl implements BoostAttribute {
   private float boost = 1.0f;
 
+  @Override
   public void setBoost(float boost) {
     this.boost = boost;
   }
   
+  @Override
   public float getBoost() {
     return boost;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java b/lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java
index 24ade75..c2fa36e 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer.java
@@ -54,6 +54,7 @@ class ConjunctionScorer extends Scorer {
     // Also we use mergeSort here to be stable (so order of Scoreres that
     // match on first document keeps preserved):
     ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array
+      @Override
       public int compare(Scorer o1, Scorer o2) {
         return o1.docID() - o2.docID();
       }
diff --git a/lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer.java b/lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer.java
index 3d71e47..7fb392e 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer.java
@@ -40,6 +40,7 @@ class ConjunctionTermScorer extends Scorer {
     // Sort the array the first time to allow the least frequent DocsEnum to
     // lead the matching.
     ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {
+      @Override
       public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {
         return o1.docFreq - o2.docFreq;
       }
diff --git a/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java b/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
index ed1e26b..16645f0 100644
--- a/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
@@ -85,6 +85,7 @@ public class DisjunctionMaxQuery extends Query implements Iterable<Query> {
   }
 
   /** @return An {@code Iterator<Query>} over the disjuncts */
+  @Override
   public Iterator<Query> iterator() {
     return disjuncts.iterator();
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/FieldCache.java b/lucene/core/src/java/org/apache/lucene/search/FieldCache.java
index a1978e3..815d225 100644
--- a/lucene/core/src/java/org/apache/lucene/search/FieldCache.java
+++ b/lucene/core/src/java/org/apache/lucene/search/FieldCache.java
@@ -122,6 +122,7 @@ public interface FieldCache {
 
   /** The default parser for byte values, which are encoded by {@link Byte#toString(byte)} */
   public static final ByteParser DEFAULT_BYTE_PARSER = new ByteParser() {
+    @Override
     public byte parseByte(BytesRef term) {
       // TODO: would be far better to directly parse from
       // UTF8 bytes... but really users should use
@@ -137,6 +138,7 @@ public interface FieldCache {
 
   /** The default parser for short values, which are encoded by {@link Short#toString(short)} */
   public static final ShortParser DEFAULT_SHORT_PARSER = new ShortParser() {
+    @Override
     public short parseShort(BytesRef term) {
       // TODO: would be far better to directly parse from
       // UTF8 bytes... but really users should use
@@ -152,6 +154,7 @@ public interface FieldCache {
 
   /** The default parser for int values, which are encoded by {@link Integer#toString(int)} */
   public static final IntParser DEFAULT_INT_PARSER = new IntParser() {
+    @Override
     public int parseInt(BytesRef term) {
       // TODO: would be far better to directly parse from
       // UTF8 bytes... but really users should use
@@ -167,6 +170,7 @@ public interface FieldCache {
 
   /** The default parser for float values, which are encoded by {@link Float#toString(float)} */
   public static final FloatParser DEFAULT_FLOAT_PARSER = new FloatParser() {
+    @Override
     public float parseFloat(BytesRef term) {
       // TODO: would be far better to directly parse from
       // UTF8 bytes... but really users should use
@@ -182,6 +186,7 @@ public interface FieldCache {
 
   /** The default parser for long values, which are encoded by {@link Long#toString(long)} */
   public static final LongParser DEFAULT_LONG_PARSER = new LongParser() {
+    @Override
     public long parseLong(BytesRef term) {
       // TODO: would be far better to directly parse from
       // UTF8 bytes... but really users should use
@@ -197,6 +202,7 @@ public interface FieldCache {
 
   /** The default parser for double values, which are encoded by {@link Double#toString(double)} */
   public static final DoubleParser DEFAULT_DOUBLE_PARSER = new DoubleParser() {
+    @Override
     public double parseDouble(BytesRef term) {
       // TODO: would be far better to directly parse from
       // UTF8 bytes... but really users should use
@@ -215,6 +221,7 @@ public interface FieldCache {
    * via {@link IntField}/{@link NumericTokenStream}.
    */
   public static final IntParser NUMERIC_UTILS_INT_PARSER=new IntParser(){
+    @Override
     public int parseInt(BytesRef term) {
       if (NumericUtils.getPrefixCodedIntShift(term) > 0)
         throw new StopFillCacheException();
@@ -231,6 +238,7 @@ public interface FieldCache {
    * via {@link FloatField}/{@link NumericTokenStream}.
    */
   public static final FloatParser NUMERIC_UTILS_FLOAT_PARSER=new FloatParser(){
+    @Override
     public float parseFloat(BytesRef term) {
       if (NumericUtils.getPrefixCodedIntShift(term) > 0)
         throw new StopFillCacheException();
@@ -247,6 +255,7 @@ public interface FieldCache {
    * via {@link LongField}/{@link NumericTokenStream}.
    */
   public static final LongParser NUMERIC_UTILS_LONG_PARSER = new LongParser(){
+    @Override
     public long parseLong(BytesRef term) {
       if (NumericUtils.getPrefixCodedLongShift(term) > 0)
         throw new StopFillCacheException();
@@ -263,6 +272,7 @@ public interface FieldCache {
    * via {@link DoubleField}/{@link NumericTokenStream}.
    */
   public static final DoubleParser NUMERIC_UTILS_DOUBLE_PARSER = new DoubleParser(){
+    @Override
     public double parseDouble(BytesRef term) {
       if (NumericUtils.getPrefixCodedLongShift(term) > 0)
         throw new StopFillCacheException();
diff --git a/lucene/core/src/java/org/apache/lucene/search/FieldCacheDocIdSet.java b/lucene/core/src/java/org/apache/lucene/search/FieldCacheDocIdSet.java
index 11d88f3..3f945c9 100644
--- a/lucene/core/src/java/org/apache/lucene/search/FieldCacheDocIdSet.java
+++ b/lucene/core/src/java/org/apache/lucene/search/FieldCacheDocIdSet.java
@@ -57,18 +57,22 @@ public abstract class FieldCacheDocIdSet extends DocIdSet {
   @Override
   public final Bits bits() {
     return (acceptDocs == null) ? new Bits() {
+      @Override
       public boolean get(int docid) {
         return matchDoc(docid);
       }
 
+      @Override
       public int length() {
         return maxDoc;
       }
     } : new Bits() {
+      @Override
       public boolean get(int docid) {
         return matchDoc(docid) && acceptDocs.get(docid);
       }
 
+      @Override
       public int length() {
         return maxDoc;
       }
diff --git a/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java b/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java
index 8c93cb8..df42c0d 100644
--- a/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java
+++ b/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java
@@ -71,16 +71,19 @@ class FieldCacheImpl implements FieldCache {
     caches.put(DocsWithFieldCache.class, new DocsWithFieldCache(this));
   }
 
+  @Override
   public synchronized void purgeAllCaches() {
     init();
   }
 
+  @Override
   public synchronized void purge(AtomicReader r) {
     for(Cache c : caches.values()) {
       c.purge(r);
     }
   }
   
+  @Override
   public synchronized CacheEntry[] getCacheEntries() {
     List<CacheEntry> result = new ArrayList<CacheEntry>(17);
     for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {
@@ -319,11 +322,13 @@ class FieldCacheImpl implements FieldCache {
   }
 
   // inherit javadocs
+  @Override
   public byte[] getBytes (AtomicReader reader, String field, boolean setDocsWithField) throws IOException {
     return getBytes(reader, field, null, setDocsWithField);
   }
 
   // inherit javadocs
+  @Override
   public byte[] getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)
       throws IOException {
     return (byte[]) caches.get(Byte.TYPE).get(reader, new Entry(field, parser), setDocsWithField);
@@ -391,11 +396,13 @@ class FieldCacheImpl implements FieldCache {
   }
   
   // inherit javadocs
+  @Override
   public short[] getShorts (AtomicReader reader, String field, boolean setDocsWithField) throws IOException {
     return getShorts(reader, field, null, setDocsWithField);
   }
 
   // inherit javadocs
+  @Override
   public short[] getShorts(AtomicReader reader, String field, ShortParser parser, boolean setDocsWithField)
       throws IOException {
     return (short[]) caches.get(Short.TYPE).get(reader, new Entry(field, parser), setDocsWithField);
@@ -485,11 +492,13 @@ class FieldCacheImpl implements FieldCache {
   }
   
   // inherit javadocs
+  @Override
   public int[] getInts (AtomicReader reader, String field, boolean setDocsWithField) throws IOException {
     return getInts(reader, field, null, setDocsWithField);
   }
 
   // inherit javadocs
+  @Override
   public int[] getInts(AtomicReader reader, String field, IntParser parser, boolean setDocsWithField)
       throws IOException {
     return (int[]) caches.get(Integer.TYPE).get(reader, new Entry(field, parser), setDocsWithField);
@@ -572,6 +581,7 @@ class FieldCacheImpl implements FieldCache {
     }
   }
   
+  @Override
   public Bits getDocsWithField(AtomicReader reader, String field)
       throws IOException {
     return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new Entry(field, null), false);
@@ -633,12 +643,14 @@ class FieldCacheImpl implements FieldCache {
   }
 
   // inherit javadocs
+  @Override
   public float[] getFloats (AtomicReader reader, String field, boolean setDocsWithField)
     throws IOException {
     return getFloats(reader, field, null, setDocsWithField);
   }
 
   // inherit javadocs
+  @Override
   public float[] getFloats(AtomicReader reader, String field, FloatParser parser, boolean setDocsWithField)
     throws IOException {
 
@@ -723,11 +735,13 @@ class FieldCacheImpl implements FieldCache {
   }
 
 
+  @Override
   public long[] getLongs(AtomicReader reader, String field, boolean setDocsWithField) throws IOException {
     return getLongs(reader, field, null, setDocsWithField);
   }
   
   // inherit javadocs
+  @Override
   public long[] getLongs(AtomicReader reader, String field, FieldCache.LongParser parser, boolean setDocsWithField)
       throws IOException {
     return (long[]) caches.get(Long.TYPE).get(reader, new Entry(field, parser), setDocsWithField);
@@ -811,12 +825,14 @@ class FieldCacheImpl implements FieldCache {
   }
 
   // inherit javadocs
+  @Override
   public double[] getDoubles(AtomicReader reader, String field, boolean setDocsWithField)
     throws IOException {
     return getDoubles(reader, field, null, setDocsWithField);
   }
 
   // inherit javadocs
+  @Override
   public double[] getDoubles(AtomicReader reader, String field, FieldCache.DoubleParser parser, boolean setDocsWithField)
       throws IOException {
     return (double[]) caches.get(Double.TYPE).get(reader, new Entry(field, parser), setDocsWithField);
@@ -984,6 +1000,7 @@ class FieldCacheImpl implements FieldCache {
         }
       }
 
+      @Override
       public void seekExact(long ord) throws IOException {
         assert(ord >= 0 && ord <= numOrd);
         // TODO: if gap is small, could iterate from current position?  Or let user decide that?
@@ -1071,10 +1088,12 @@ class FieldCacheImpl implements FieldCache {
     }
   }
 
+  @Override
   public DocTermsIndex getTermsIndex(AtomicReader reader, String field) throws IOException {
     return getTermsIndex(reader, field, PackedInts.FAST);
   }
 
+  @Override
   public DocTermsIndex getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {
     return (DocTermsIndex) caches.get(DocTermsIndex.class).get(reader, new Entry(field, acceptableOverheadRatio), false);
   }
@@ -1210,10 +1229,12 @@ class FieldCacheImpl implements FieldCache {
 
   // TODO: this if DocTermsIndex was already created, we
   // should share it...
+  @Override
   public DocTerms getTerms(AtomicReader reader, String field) throws IOException {
     return getTerms(reader, field, PackedInts.FAST);
   }
 
+  @Override
   public DocTerms getTerms(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {
     return (DocTerms) caches.get(DocTerms.class).get(reader, new Entry(field, acceptableOverheadRatio), false);
   }
@@ -1293,6 +1314,7 @@ class FieldCacheImpl implements FieldCache {
     }
   }
 
+  @Override
   public DocTermOrds getDocTermOrds(AtomicReader reader, String field) throws IOException {
     return (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new Entry(field, null), false);
   }
@@ -1311,10 +1333,12 @@ class FieldCacheImpl implements FieldCache {
 
   private volatile PrintStream infoStream;
 
+  @Override
   public void setInfoStream(PrintStream stream) {
     infoStream = stream;
   }
 
+  @Override
   public PrintStream getInfoStream() {
     return infoStream;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/FilteredDocIdSet.java b/lucene/core/src/java/org/apache/lucene/search/FilteredDocIdSet.java
index 0d94ca9..5f6ba1e 100644
--- a/lucene/core/src/java/org/apache/lucene/search/FilteredDocIdSet.java
+++ b/lucene/core/src/java/org/apache/lucene/search/FilteredDocIdSet.java
@@ -60,10 +60,12 @@ public abstract class FilteredDocIdSet extends DocIdSet {
   public Bits bits() throws IOException {
     final Bits bits = _innerSet.bits();
     return (bits == null) ? null : new Bits() {
+      @Override
       public boolean get(int docid) {
         return bits.get(docid) && FilteredDocIdSet.this.match(docid);
       }
 
+      @Override
       public int length() {
         return bits.length();
       }
diff --git a/lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java b/lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java
index 4f52f36..6d58749 100644
--- a/lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java
+++ b/lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.java
@@ -412,6 +412,7 @@ public class FuzzyTermsEnum extends TermsEnum {
   public static final class LevenshteinAutomataAttributeImpl extends AttributeImpl implements LevenshteinAutomataAttribute {
     private final List<CompiledAutomaton> automata = new ArrayList<CompiledAutomaton>();
       
+    @Override
     public List<CompiledAutomaton> automata() {
       return automata;
     }
diff --git a/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java b/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
index 80af684..f6fb7c8 100644
--- a/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
+++ b/lucene/core/src/java/org/apache/lucene/search/IndexSearcher.java
@@ -688,6 +688,7 @@ public class IndexSearcher {
       this.slice = slice;
     }
 
+    @Override
     public TopDocs call() throws IOException {
       final TopDocs docs = searcher.search(Arrays.asList(slice.leaves), weight, after, nDocs);
       final ScoreDoc[] scoreDocs = docs.scoreDocs;
@@ -775,6 +776,7 @@ public class IndexSearcher {
 
     private final FakeScorer fakeScorer = new FakeScorer();
 
+    @Override
     public TopFieldDocs call() throws IOException {
       assert slice.leaves.length == 1;
       final TopFieldDocs docs = searcher.search(Arrays.asList(slice.leaves),
@@ -817,6 +819,7 @@ public class IndexSearcher {
       this.service = new ExecutorCompletionService<T>(executor);
     }
 
+    @Override
     public boolean hasNext() {
       return numTasks > 0;
     }
@@ -826,6 +829,7 @@ public class IndexSearcher {
       ++numTasks;
     }
 
+    @Override
     public T next() {
       if(!this.hasNext()) 
         throw new NoSuchElementException("next() is called but hasNext() returned false");
@@ -840,10 +844,12 @@ public class IndexSearcher {
       }
     }
 
+    @Override
     public void remove() {
       throw new UnsupportedOperationException();
     }
 
+    @Override
     public Iterator<T> iterator() {
       // use the shortcut here - this is only used in a private context
       return this;
diff --git a/lucene/core/src/java/org/apache/lucene/search/MaxNonCompetitiveBoostAttributeImpl.java b/lucene/core/src/java/org/apache/lucene/search/MaxNonCompetitiveBoostAttributeImpl.java
index e78a068..f76a383 100644
--- a/lucene/core/src/java/org/apache/lucene/search/MaxNonCompetitiveBoostAttributeImpl.java
+++ b/lucene/core/src/java/org/apache/lucene/search/MaxNonCompetitiveBoostAttributeImpl.java
@@ -27,18 +27,22 @@ public final class MaxNonCompetitiveBoostAttributeImpl extends AttributeImpl imp
   private float maxNonCompetitiveBoost = Float.NEGATIVE_INFINITY;
   private BytesRef competitiveTerm = null;
 
+  @Override
   public void setMaxNonCompetitiveBoost(final float maxNonCompetitiveBoost) {
     this.maxNonCompetitiveBoost = maxNonCompetitiveBoost;
   }
   
+  @Override
   public float getMaxNonCompetitiveBoost() {
     return maxNonCompetitiveBoost;
   }
 
+  @Override
   public void setCompetitiveTerm(final BytesRef competitiveTerm) {
     this.competitiveTerm = competitiveTerm;
   }
   
+  @Override
   public BytesRef getCompetitiveTerm() {
     return competitiveTerm;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/NRTManagerReopenThread.java b/lucene/core/src/java/org/apache/lucene/search/NRTManagerReopenThread.java
index 5317bd1..8b7677d 100644
--- a/lucene/core/src/java/org/apache/lucene/search/NRTManagerReopenThread.java
+++ b/lucene/core/src/java/org/apache/lucene/search/NRTManagerReopenThread.java
@@ -113,6 +113,7 @@ public class NRTManagerReopenThread extends Thread implements NRTManager.Waiting
     manager.addWaitingListener(this);
   }
 
+  @Override
   public synchronized void close() {
     //System.out.println("NRT: set finish");
     manager.removeWaitingListener(this);
@@ -125,6 +126,7 @@ public class NRTManagerReopenThread extends Thread implements NRTManager.Waiting
     }
   }
 
+  @Override
   public synchronized void waiting(long targetGen) {
     waitingGen = Math.max(waitingGen, targetGen);
     notify();
diff --git a/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java b/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
index 425451d..5ee4c8a 100644
--- a/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java
@@ -159,6 +159,7 @@ public class PhraseQuery extends Query {
       }
     }
 
+    @Override
     public int compareTo(PostingsAndFreq other) {
       if (docFreq != other.docFreq) {
         return docFreq - other.docFreq;
diff --git a/lucene/core/src/java/org/apache/lucene/search/ReferenceManager.java b/lucene/core/src/java/org/apache/lucene/search/ReferenceManager.java
index f781477..1973f05 100755
--- a/lucene/core/src/java/org/apache/lucene/search/ReferenceManager.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ReferenceManager.java
@@ -121,6 +121,7 @@ public abstract class ReferenceManager<G> implements Closeable {
     * @throws IOException
     *           if the underlying reader of the current reference could not be closed
    */
+  @Override
   public final synchronized void close() throws IOException {
     if (current != null) {
       // make sure we can call this more than once
diff --git a/lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java b/lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java
index 152e6a6..e5664c0 100644
--- a/lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java
@@ -51,6 +51,7 @@ public class RegexpQuery extends AutomatonQuery {
    * A provider that provides no named automata
    */
   private static AutomatonProvider defaultProvider = new AutomatonProvider() {
+    @Override
     public Automaton getAutomaton(String name) {
       return null;
     }
diff --git a/lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java b/lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
index f810af2..dca67fa 100644
--- a/lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
@@ -353,6 +353,7 @@ final class SloppyPhraseScorer extends Scorer {
   private void sortRptGroups(ArrayList<ArrayList<PhrasePositions>> rgs) {
     rptGroups = new PhrasePositions[rgs.size()][];
     Comparator<PhrasePositions> cmprtr = new Comparator<PhrasePositions>() {
+      @Override
       public int compare(PhrasePositions pp1, PhrasePositions pp2) {
         return pp1.offset - pp2.offset;
       }
diff --git a/lucene/core/src/java/org/apache/lucene/search/TopDocs.java b/lucene/core/src/java/org/apache/lucene/search/TopDocs.java
index 46e8b81..88f4263 100644
--- a/lucene/core/src/java/org/apache/lucene/search/TopDocs.java
+++ b/lucene/core/src/java/org/apache/lucene/search/TopDocs.java
@@ -91,6 +91,7 @@ public class TopDocs {
     }
 
     // Returns true if first is < second
+    @Override
     public boolean lessThan(ShardRef first, ShardRef second) {
       assert first != second;
       final float firstScore = shardHits[first.shardIndex][first.hitIndex].score;
@@ -156,6 +157,7 @@ public class TopDocs {
     }
 
     // Returns true if first is < second
+    @Override
     @SuppressWarnings({"unchecked","rawtypes"})
     public boolean lessThan(ShardRef first, ShardRef second) {
       assert first != second;
diff --git a/lucene/core/src/java/org/apache/lucene/search/TopTermsRewrite.java b/lucene/core/src/java/org/apache/lucene/search/TopTermsRewrite.java
index 15205ae..3e0cc55 100644
--- a/lucene/core/src/java/org/apache/lucene/search/TopTermsRewrite.java
+++ b/lucene/core/src/java/org/apache/lucene/search/TopTermsRewrite.java
@@ -183,6 +183,7 @@ public abstract class TopTermsRewrite<Q extends Query> extends TermCollectingRew
   
   private static final Comparator<ScoreTerm> scoreTermSortByTermComp = 
     new Comparator<ScoreTerm>() {
+      @Override
       public int compare(ScoreTerm st1, ScoreTerm st2) {
         assert st1.termComp == st2.termComp :
           "term comparator should not change between segments";
@@ -200,6 +201,7 @@ public abstract class TopTermsRewrite<Q extends Query> extends TermCollectingRew
       this.termState = termState;
     }
     
+    @Override
     public int compareTo(ScoreTerm other) {
       if (this.boost == other.boost)
         return termComp.compare(other.bytes, this.bytes);
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity.java
index 00be514..7856e7a 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity.java
@@ -28,11 +28,13 @@ public class DefaultSimilarity extends TFIDFSimilarity {
   public DefaultSimilarity() {}
   
   /** Implemented as <code>overlap / maxOverlap</code>. */
+  @Override
   public float coord(int overlap, int maxOverlap) {
     return overlap / (float)maxOverlap;
   }
 
   /** Implemented as <code>1/sqrt(sumOfSquaredWeights)</code>. */
+  @Override
   public float queryNorm(float sumOfSquaredWeights) {
     return (float)(1.0 / Math.sqrt(sumOfSquaredWeights));
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java b/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java
index 0559dc8..6ba0253 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java
@@ -73,6 +73,7 @@ public class NearSpansOrdered extends Spans {
 
   private final Spans[] subSpansByDoc;
   private final Comparator<Spans> spanDocComparator = new Comparator<Spans>() {
+    @Override
     public int compare(Spans o1, Spans o2) {
       return o1.doc() - o2.doc();
     }
diff --git a/lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter.java b/lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter.java
index a537cff..e9d668b 100644
--- a/lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter.java
@@ -123,6 +123,7 @@ final class CompoundFileWriter implements Closeable{
    *           if close() had been called before or if no file has been added to
    *           this object
    */
+  @Override
   public void close() throws IOException {
     if (closed) {
       return;
diff --git a/lucene/core/src/java/org/apache/lucene/store/Directory.java b/lucene/core/src/java/org/apache/lucene/store/Directory.java
index 4be172e..b432737 100644
--- a/lucene/core/src/java/org/apache/lucene/store/Directory.java
+++ b/lucene/core/src/java/org/apache/lucene/store/Directory.java
@@ -128,6 +128,7 @@ public abstract class Directory implements Closeable {
   }
 
   /** Closes the store. */
+  @Override
   public abstract void close()
        throws IOException;
 
diff --git a/lucene/core/src/java/org/apache/lucene/store/FSDirectory.java b/lucene/core/src/java/org/apache/lucene/store/FSDirectory.java
index b941d15..5b277fd 100644
--- a/lucene/core/src/java/org/apache/lucene/store/FSDirectory.java
+++ b/lucene/core/src/java/org/apache/lucene/store/FSDirectory.java
@@ -220,6 +220,7 @@ public abstract class FSDirectory extends Directory {
 
     // Exclude subdirs
     String[] result = dir.list(new FilenameFilter() {
+        @Override
         public boolean accept(File dir, String file) {
           return !new File(dir, file).isDirectory();
         }
diff --git a/lucene/core/src/java/org/apache/lucene/store/IndexInput.java b/lucene/core/src/java/org/apache/lucene/store/IndexInput.java
index c864ceb..94bcbd9 100644
--- a/lucene/core/src/java/org/apache/lucene/store/IndexInput.java
+++ b/lucene/core/src/java/org/apache/lucene/store/IndexInput.java
@@ -50,6 +50,7 @@ public abstract class IndexInput extends DataInput implements Cloneable,Closeabl
   }
 
   /** Closes the stream to further operations. */
+  @Override
   public abstract void close() throws IOException;
 
   /** Returns the current position in this file, where the next read will
diff --git a/lucene/core/src/java/org/apache/lucene/store/IndexOutput.java b/lucene/core/src/java/org/apache/lucene/store/IndexOutput.java
index fad7e2c..5fec7b5 100644
--- a/lucene/core/src/java/org/apache/lucene/store/IndexOutput.java
+++ b/lucene/core/src/java/org/apache/lucene/store/IndexOutput.java
@@ -35,6 +35,7 @@ public abstract class IndexOutput extends DataOutput implements Closeable {
   public abstract void flush() throws IOException;
 
   /** Closes this stream to further operations. */
+  @Override
   public abstract void close() throws IOException;
 
   /** Returns the current position in this file, where the next write will
diff --git a/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java b/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java
index 65c2d92..9b73c70 100644
--- a/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java
+++ b/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java
@@ -186,6 +186,7 @@ public class MMapDirectory extends FSDirectory {
     if (useUnmapHack) {
       try {
         AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {
+          @Override
           public Object run() throws Exception {
             final Method getCleanerMethod = buffer.getClass()
               .getMethod("cleaner");
diff --git a/lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory.java b/lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory.java
index 7fbc05b..edf66f4 100644
--- a/lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory.java
+++ b/lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory.java
@@ -80,6 +80,7 @@ public class NIOFSDirectory extends FSDirectory {
     return new NIOFSIndexInput(new File(getDirectory(), name), context, getReadChunkSize());
   }
   
+  @Override
   public IndexInputSlicer createSlicer(final String name,
       final IOContext context) throws IOException {
     ensureOpen();
diff --git a/lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory.java b/lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory.java
index 9025afd..0d54d57 100644
--- a/lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory.java
+++ b/lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory.java
@@ -233,6 +233,7 @@ public class NRTCachingDirectory extends Directory {
     }
   }
 
+  @Override
   public synchronized IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {
     ensureOpen();
     if (VERBOSE) {
diff --git a/lucene/core/src/java/org/apache/lucene/store/RateLimitedDirectoryWrapper.java b/lucene/core/src/java/org/apache/lucene/store/RateLimitedDirectoryWrapper.java
index ffa7157..a838414 100644
--- a/lucene/core/src/java/org/apache/lucene/store/RateLimitedDirectoryWrapper.java
+++ b/lucene/core/src/java/org/apache/lucene/store/RateLimitedDirectoryWrapper.java
@@ -40,26 +40,31 @@ public final class RateLimitedDirectoryWrapper extends Directory {
     this.delegate = wrapped;
   }
   
+  @Override
   public String[] listAll() throws IOException {
     ensureOpen();
     return delegate.listAll();
   }
   
+  @Override
   public boolean fileExists(String name) throws IOException {
     ensureOpen();
     return delegate.fileExists(name);
   }
   
+  @Override
   public void deleteFile(String name) throws IOException {
     ensureOpen();
     delegate.deleteFile(name);
   }
   
+  @Override
   public long fileLength(String name) throws IOException {
     ensureOpen();
     return delegate.fileLength(name);
   }
   
+  @Override
   public IndexOutput createOutput(String name, IOContext context)
       throws IOException {
     ensureOpen();
@@ -71,22 +76,26 @@ public final class RateLimitedDirectoryWrapper extends Directory {
     return output;
   }
   
+  @Override
   public void sync(Collection<String> names) throws IOException {
     ensureOpen();
     delegate.sync(names);
   }
   
+  @Override
   public IndexInput openInput(String name, IOContext context)
       throws IOException {
     ensureOpen();
     return delegate.openInput(name, context);
   }
   
+  @Override
   public void close() throws IOException {
     isOpen = false;
     delegate.close();
   }
   
+  @Override
   public IndexInputSlicer createSlicer(String name, IOContext context)
       throws IOException {
     ensureOpen();
diff --git a/lucene/core/src/java/org/apache/lucene/store/RateLimiter.java b/lucene/core/src/java/org/apache/lucene/store/RateLimiter.java
index f44647a..9fca1e8 100644
--- a/lucene/core/src/java/org/apache/lucene/store/RateLimiter.java
+++ b/lucene/core/src/java/org/apache/lucene/store/RateLimiter.java
@@ -64,6 +64,7 @@ public abstract class RateLimiter {
     /**
      * Sets an updated mb per second rate limit.
      */
+    @Override
     public void setMbPerSec(double mbPerSec) {
       this.mbPerSec = mbPerSec;
       nsPerByte = 1000000000. / (1024*1024*mbPerSec);
@@ -73,6 +74,7 @@ public abstract class RateLimiter {
     /**
      * The current mb per second rate limit.
      */
+    @Override
     public double getMbPerSec() {
       return this.mbPerSec;
     }
@@ -86,6 +88,7 @@ public abstract class RateLimiter {
      *  with a biggish count, not one byte at a time.
      *  @return the pause time in nano seconds 
      * */
+    @Override
     public long pause(long bytes) {
       if (bytes == 1) {
         return 0;
diff --git a/lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java b/lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java
index fe818da..74eaecd 100644
--- a/lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java
+++ b/lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory.java
@@ -58,6 +58,7 @@ public class SimpleFSDirectory extends FSDirectory {
     return new SimpleFSIndexInput("SimpleFSIndexInput(path=\"" + path.getPath() + "\")", path, context, getReadChunkSize());
   }
 
+  @Override
   public IndexInputSlicer createSlicer(final String name,
       final IOContext context) throws IOException {
     ensureOpen();
diff --git a/lucene/core/src/java/org/apache/lucene/util/AttributeImpl.java b/lucene/core/src/java/org/apache/lucene/util/AttributeImpl.java
index 2d64e96..0603c41 100644
--- a/lucene/core/src/java/org/apache/lucene/util/AttributeImpl.java
+++ b/lucene/core/src/java/org/apache/lucene/util/AttributeImpl.java
@@ -51,6 +51,7 @@ public abstract class AttributeImpl implements Cloneable, Attribute {
   public final String reflectAsString(final boolean prependAttClass) {
     final StringBuilder buffer = new StringBuilder();
     reflectWith(new AttributeReflector() {
+      @Override
       public void reflect(Class<? extends Attribute> attClass, String key, Object value) {
         if (buffer.length() > 0) {
           buffer.append(',');
diff --git a/lucene/core/src/java/org/apache/lucene/util/AttributeSource.java b/lucene/core/src/java/org/apache/lucene/util/AttributeSource.java
index 65f16c6..1347b2b 100644
--- a/lucene/core/src/java/org/apache/lucene/util/AttributeSource.java
+++ b/lucene/core/src/java/org/apache/lucene/util/AttributeSource.java
@@ -175,10 +175,12 @@ public class AttributeSource {
       return new Iterator<AttributeImpl>() {
         private State state = initState;
       
+        @Override
         public void remove() {
           throw new UnsupportedOperationException();
         }
         
+        @Override
         public AttributeImpl next() {
           if (state == null)
             throw new NoSuchElementException();
@@ -187,6 +189,7 @@ public class AttributeSource {
           return att;
         }
         
+        @Override
         public boolean hasNext() {
           return state != null;
         }
@@ -425,6 +428,7 @@ public class AttributeSource {
   public final String reflectAsString(final boolean prependAttClass) {
     final StringBuilder buffer = new StringBuilder();
     reflectWith(new AttributeReflector() {
+      @Override
       public void reflect(Class<? extends Attribute> attClass, String key, Object value) {
         if (buffer.length() > 0) {
           buffer.append(',');
diff --git a/lucene/core/src/java/org/apache/lucene/util/Bits.java b/lucene/core/src/java/org/apache/lucene/util/Bits.java
index 651cdd0..a5cef3b 100644
--- a/lucene/core/src/java/org/apache/lucene/util/Bits.java
+++ b/lucene/core/src/java/org/apache/lucene/util/Bits.java
@@ -47,10 +47,12 @@ public interface Bits {
       this.len = len;
     }
 
+    @Override
     public boolean get(int index) {
       return true;
     }
 
+    @Override
     public int length() {
       return len;
     }
@@ -66,10 +68,12 @@ public interface Bits {
       this.len = len;
     }
 
+    @Override
     public boolean get(int index) {
       return false;
     }
 
+    @Override
     public int length() {
       return len;
     }
diff --git a/lucene/core/src/java/org/apache/lucene/util/ByteBlockPool.java b/lucene/core/src/java/org/apache/lucene/util/ByteBlockPool.java
index 758c312..a744d87 100644
--- a/lucene/core/src/java/org/apache/lucene/util/ByteBlockPool.java
+++ b/lucene/core/src/java/org/apache/lucene/util/ByteBlockPool.java
@@ -99,6 +99,7 @@ public final class ByteBlockPool {
       this.bytesUsed = bytesUsed;
     }
 
+    @Override
     public byte[] getByteBlock() {
       bytesUsed.addAndGet(blockSize);
       return new byte[blockSize];
diff --git a/lucene/core/src/java/org/apache/lucene/util/BytesRef.java b/lucene/core/src/java/org/apache/lucene/util/BytesRef.java
index 7877b6f..0d82946 100644
--- a/lucene/core/src/java/org/apache/lucene/util/BytesRef.java
+++ b/lucene/core/src/java/org/apache/lucene/util/BytesRef.java
@@ -226,6 +226,7 @@ public final class BytesRef implements Comparable<BytesRef>,Cloneable {
   }
 
   /** Unsigned byte order comparison */
+  @Override
   public int compareTo(BytesRef other) {
     return utf8SortedAsUnicodeSortOrder.compare(this, other);
   }
@@ -240,6 +241,7 @@ public final class BytesRef implements Comparable<BytesRef>,Cloneable {
     // Only singleton
     private UTF8SortedAsUnicodeComparator() {};
 
+    @Override
     public int compare(BytesRef a, BytesRef b) {
       final byte[] aBytes = a.bytes;
       int aUpto = a.offset;
@@ -278,6 +280,7 @@ public final class BytesRef implements Comparable<BytesRef>,Cloneable {
     // Only singleton
     private UTF8SortedAsUTF16Comparator() {};
 
+    @Override
     public int compare(BytesRef a, BytesRef b) {
 
       final byte[] aBytes = a.bytes;
diff --git a/lucene/core/src/java/org/apache/lucene/util/BytesRefIterator.java b/lucene/core/src/java/org/apache/lucene/util/BytesRefIterator.java
index 3e488f8..fe9877b 100644
--- a/lucene/core/src/java/org/apache/lucene/util/BytesRefIterator.java
+++ b/lucene/core/src/java/org/apache/lucene/util/BytesRefIterator.java
@@ -54,6 +54,7 @@ public interface BytesRefIterator {
       return null;
     }
     
+    @Override
     public Comparator<BytesRef> getComparator() {
       return null;
     }
diff --git a/lucene/core/src/java/org/apache/lucene/util/CharsRef.java b/lucene/core/src/java/org/apache/lucene/util/CharsRef.java
index f874ac9..60537bf 100644
--- a/lucene/core/src/java/org/apache/lucene/util/CharsRef.java
+++ b/lucene/core/src/java/org/apache/lucene/util/CharsRef.java
@@ -118,6 +118,7 @@ public final class CharsRef implements Comparable<CharsRef>, CharSequence, Clone
   }
 
   /** Signed int order comparison */
+  @Override
   public int compareTo(CharsRef other) {
     if (this == other)
       return 0;
@@ -197,10 +198,12 @@ public final class CharsRef implements Comparable<CharsRef>, CharSequence, Clone
     return new String(chars, offset, length);
   }
 
+  @Override
   public int length() {
     return length;
   }
 
+  @Override
   public char charAt(int index) {
     // NOTE: must do a real check here to meet the specs of CharSequence
     if (index < 0 || index >= length) {
@@ -209,6 +212,7 @@ public final class CharsRef implements Comparable<CharsRef>, CharSequence, Clone
     return chars[offset + index];
   }
 
+  @Override
   public CharSequence subSequence(int start, int end) {
     // NOTE: must do a real check here to meet the specs of CharSequence
     if (start < 0 || end > length || start > end) {
@@ -233,6 +237,7 @@ public final class CharsRef implements Comparable<CharsRef>, CharSequence, Clone
     // Only singleton
     private UTF16SortedAsUTF8Comparator() {};
 
+    @Override
     public int compare(CharsRef a, CharsRef b) {
       if (a == b)
         return 0;
diff --git a/lucene/core/src/java/org/apache/lucene/util/CloseableThreadLocal.java b/lucene/core/src/java/org/apache/lucene/util/CloseableThreadLocal.java
index 4e521a2..e4436ce 100644
--- a/lucene/core/src/java/org/apache/lucene/util/CloseableThreadLocal.java
+++ b/lucene/core/src/java/org/apache/lucene/util/CloseableThreadLocal.java
@@ -128,6 +128,7 @@ public class CloseableThreadLocal<T> implements Closeable {
     }
   }
 
+  @Override
   public void close() {
     // Clear the hard refs; then, the only remaining refs to
     // all values we were storing are weak (unless somewhere
diff --git a/lucene/core/src/java/org/apache/lucene/util/FilterIterator.java b/lucene/core/src/java/org/apache/lucene/util/FilterIterator.java
index 58d0dbd..d60019e 100644
--- a/lucene/core/src/java/org/apache/lucene/util/FilterIterator.java
+++ b/lucene/core/src/java/org/apache/lucene/util/FilterIterator.java
@@ -41,10 +41,12 @@ public abstract class FilterIterator<T, InnerT extends T> implements Iterator<T>
     this.iterator = baseIterator;
   }
   
+  @Override
   public final boolean hasNext() {
     return nextIsSet || setNext();
   }
   
+  @Override
   public final T next() {
     if (!hasNext()) {
       throw new NoSuchElementException();
@@ -58,6 +60,7 @@ public abstract class FilterIterator<T, InnerT extends T> implements Iterator<T>
     }
   }
   
+  @Override
   public final void remove() {
     throw new UnsupportedOperationException();
   }
diff --git a/lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java b/lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java
index 2f26389..4405db6 100644
--- a/lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java
+++ b/lucene/core/src/java/org/apache/lucene/util/FixedBitSet.java
@@ -99,6 +99,7 @@ public final class FixedBitSet extends DocIdSet implements Bits {
     return (int) BitUtil.pop_array(bits, 0, bits.length);
   }
 
+  @Override
   public boolean get(int index) {
     assert index >= 0 && index < numBits: "index=" + index;
     int i = index >> 6;               // div 64
diff --git a/lucene/core/src/java/org/apache/lucene/util/IntsRef.java b/lucene/core/src/java/org/apache/lucene/util/IntsRef.java
index 6fa8866..a657d25 100644
--- a/lucene/core/src/java/org/apache/lucene/util/IntsRef.java
+++ b/lucene/core/src/java/org/apache/lucene/util/IntsRef.java
@@ -103,6 +103,7 @@ public final class IntsRef implements Comparable<IntsRef>, Cloneable {
   }
 
   /** Signed int order comparison */
+  @Override
   public int compareTo(IntsRef other) {
     if (this == other) return 0;
 
diff --git a/lucene/core/src/java/org/apache/lucene/util/LongsRef.java b/lucene/core/src/java/org/apache/lucene/util/LongsRef.java
index 93fee71..7236b90 100644
--- a/lucene/core/src/java/org/apache/lucene/util/LongsRef.java
+++ b/lucene/core/src/java/org/apache/lucene/util/LongsRef.java
@@ -102,6 +102,7 @@ public final class LongsRef implements Comparable<LongsRef>, Cloneable {
   }
 
   /** Signed int order comparison */
+  @Override
   public int compareTo(LongsRef other) {
     if (this == other) return 0;
 
diff --git a/lucene/core/src/java/org/apache/lucene/util/NamedSPILoader.java b/lucene/core/src/java/org/apache/lucene/util/NamedSPILoader.java
index a067bde..d0dc4d8 100644
--- a/lucene/core/src/java/org/apache/lucene/util/NamedSPILoader.java
+++ b/lucene/core/src/java/org/apache/lucene/util/NamedSPILoader.java
@@ -110,6 +110,7 @@ public final class NamedSPILoader<S extends NamedSPILoader.NamedSPI> implements
     return services.keySet();
   }
   
+  @Override
   public Iterator<S> iterator() {
     return services.values().iterator();
   }
diff --git a/lucene/core/src/java/org/apache/lucene/util/NamedThreadFactory.java b/lucene/core/src/java/org/apache/lucene/util/NamedThreadFactory.java
index 84a94c5..841743c 100644
--- a/lucene/core/src/java/org/apache/lucene/util/NamedThreadFactory.java
+++ b/lucene/core/src/java/org/apache/lucene/util/NamedThreadFactory.java
@@ -57,6 +57,7 @@ public class NamedThreadFactory implements ThreadFactory {
    * 
    * @see java.util.concurrent.ThreadFactory#newThread(java.lang.Runnable)
    */
+  @Override
   public Thread newThread(Runnable r) {
     final Thread t = new Thread(group, r, String.format(Locale.ROOT, "%s-%d",
         this.threadNamePrefix, threadNumber.getAndIncrement()), 0);
diff --git a/lucene/core/src/java/org/apache/lucene/util/OpenBitSet.java b/lucene/core/src/java/org/apache/lucene/util/OpenBitSet.java
index dd4b966..a63607e 100644
--- a/lucene/core/src/java/org/apache/lucene/util/OpenBitSet.java
+++ b/lucene/core/src/java/org/apache/lucene/util/OpenBitSet.java
@@ -162,6 +162,7 @@ public class OpenBitSet extends DocIdSet implements Bits, Cloneable {
 
 
   /** Returns true or false for the specified bit index. */
+  @Override
   public boolean get(int index) {
     int i = index >> 6;               // div 64
     // signed shift will keep a negative index and force an
diff --git a/lucene/core/src/java/org/apache/lucene/util/StringHelper.java b/lucene/core/src/java/org/apache/lucene/util/StringHelper.java
index b1e1718..60b7925 100644
--- a/lucene/core/src/java/org/apache/lucene/util/StringHelper.java
+++ b/lucene/core/src/java/org/apache/lucene/util/StringHelper.java
@@ -60,6 +60,7 @@ public abstract class StringHelper {
   }
   
   private static Comparator<String> versionComparator = new Comparator<String>() {
+    @Override
     public int compare(String a, String b) {
       StringTokenizer aTokens = new StringTokenizer(a, ".");
       StringTokenizer bTokens = new StringTokenizer(b, ".");
diff --git a/lucene/core/src/java/org/apache/lucene/util/WeakIdentityMap.java b/lucene/core/src/java/org/apache/lucene/util/WeakIdentityMap.java
index c5437ef..70d3be2 100644
--- a/lucene/core/src/java/org/apache/lucene/util/WeakIdentityMap.java
+++ b/lucene/core/src/java/org/apache/lucene/util/WeakIdentityMap.java
@@ -202,10 +202,12 @@ public final class WeakIdentityMap<K,V> {
       hash = System.identityHashCode(obj);
     }
 
+    @Override
     public int hashCode() {
       return hash;
     }
 
+    @Override
     public boolean equals(Object o) {
       if (this == o) {
         return true;
diff --git a/lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations.java b/lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations.java
index 0bb53c2..7424615 100644
--- a/lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations.java
+++ b/lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations.java
@@ -473,6 +473,7 @@ final public class BasicOperations {
     int point;
     final TransitionList ends = new TransitionList();
     final TransitionList starts = new TransitionList();
+    @Override
     public int compareTo(PointTransitions other) {
       return point - other.point;
     }
diff --git a/lucene/core/src/java/org/apache/lucene/util/automaton/State.java b/lucene/core/src/java/org/apache/lucene/util/automaton/State.java
index b59876e..fb185a3 100644
--- a/lucene/core/src/java/org/apache/lucene/util/automaton/State.java
+++ b/lucene/core/src/java/org/apache/lucene/util/automaton/State.java
@@ -68,15 +68,19 @@ public class State implements Comparable<State> {
   }
 
   private class TransitionsIterable implements Iterable<Transition> {
+    @Override
     public Iterator<Transition> iterator() {
       return new Iterator<Transition>() {
         int upto;
+        @Override
         public boolean hasNext() {
           return upto < numTransitions;
         }
+        @Override
         public Transition next() {
           return transitionsArray[upto++];
         }
+        @Override
         public void remove() {
           throw new UnsupportedOperationException();
         }
@@ -269,6 +273,7 @@ public class State implements Comparable<State> {
    * Compares this object with the specified object for order. States are
    * ordered by the time of construction.
    */
+  @Override
   public int compareTo(State s) {
     return s.id - id;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/util/automaton/Transition.java b/lucene/core/src/java/org/apache/lucene/util/automaton/Transition.java
index d03bcbc..d22c6db 100644
--- a/lucene/core/src/java/org/apache/lucene/util/automaton/Transition.java
+++ b/lucene/core/src/java/org/apache/lucene/util/automaton/Transition.java
@@ -179,6 +179,7 @@ public class Transition implements Cloneable {
   }
 
   private static final class CompareByDestThenMinMaxSingle implements Comparator<Transition> {
+    @Override
     public int compare(Transition t1, Transition t2) {
       if (t1.to != t2.to) {
         if (t1.to.number < t2.to.number) return -1;
@@ -195,6 +196,7 @@ public class Transition implements Cloneable {
   public static final Comparator<Transition> CompareByDestThenMinMax = new CompareByDestThenMinMaxSingle();
 
   private static final class CompareByMinMaxThenDestSingle implements Comparator<Transition> {
+    @Override
     public int compare(Transition t1, Transition t2) {
       if (t1.min < t2.min) return -1;
       if (t1.min > t2.min) return 1;
diff --git a/lucene/core/src/java/org/apache/lucene/util/fst/Builder.java b/lucene/core/src/java/org/apache/lucene/util/fst/Builder.java
index 76c74b8..c45d7b1 100644
--- a/lucene/core/src/java/org/apache/lucene/util/fst/Builder.java
+++ b/lucene/core/src/java/org/apache/lucene/util/fst/Builder.java
@@ -511,6 +511,7 @@ public class Builder<T> {
 
   static final class CompiledNode implements Node {
     int node;
+    @Override
     public boolean isCompiled() {
       return true;
     }
@@ -547,6 +548,7 @@ public class Builder<T> {
       this.depth = depth;
     }
 
+    @Override
     public boolean isCompiled() {
       return false;
     }
diff --git a/lucene/core/src/java/org/apache/lucene/util/fst/FST.java b/lucene/core/src/java/org/apache/lucene/util/fst/FST.java
index 0ceedc4..4853f29 100644
--- a/lucene/core/src/java/org/apache/lucene/util/fst/FST.java
+++ b/lucene/core/src/java/org/apache/lucene/util/fst/FST.java
@@ -1285,10 +1285,12 @@ public final class FST<T> {
       }
     }
 
+    @Override
     public void skip(int count) {
       pos -= count;
     }
 
+    @Override
     public void skip(int base, int count) {
       pos = base - count;
     }
@@ -1313,10 +1315,12 @@ public final class FST<T> {
       pos += len;
     }
 
+    @Override
     public void skip(int count) {
       pos += count;
     }
 
+    @Override
     public void skip(int base, int count) {
       pos = base + count;
     }
diff --git a/lucene/core/src/java/org/apache/lucene/util/mutable/MutableValue.java b/lucene/core/src/java/org/apache/lucene/util/mutable/MutableValue.java
index b98f37e..b58cd85 100755
--- a/lucene/core/src/java/org/apache/lucene/util/mutable/MutableValue.java
+++ b/lucene/core/src/java/org/apache/lucene/util/mutable/MutableValue.java
@@ -34,6 +34,7 @@ public abstract class MutableValue implements Comparable<MutableValue> {
     return exists;
   }
 
+  @Override
   public int compareTo(MutableValue other) {
     Class<? extends MutableValue> c1 = this.getClass();
     Class<? extends MutableValue> c2 = other.getClass();
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/Direct16.java b/lucene/core/src/java/org/apache/lucene/util/packed/Direct16.java
index 10c57c5..cd5e49d 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/Direct16.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/Direct16.java
@@ -54,14 +54,17 @@ final class Direct16 extends PackedInts.MutableImpl {
     return values[index] & 0xFFFFL;
   }
 
+  @Override
   public void set(final int index, final long value) {
     values[index] = (short) (value);
   }
 
+  @Override
   public long ramBytesUsed() {
     return RamUsageEstimator.sizeOf(values);
   }
 
+  @Override
   public void clear() {
     Arrays.fill(values, (short) 0L);
   }
@@ -89,6 +92,7 @@ final class Direct16 extends PackedInts.MutableImpl {
     return gets;
   }
 
+  @Override
   public int set(int index, long[] arr, int off, int len) {
     assert len > 0 : "len must be > 0 (got " + len + ")";
     assert index >= 0 && index < valueCount;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/Direct32.java b/lucene/core/src/java/org/apache/lucene/util/packed/Direct32.java
index b72408f..bb8ae0c 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/Direct32.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/Direct32.java
@@ -54,14 +54,17 @@ final class Direct32 extends PackedInts.MutableImpl {
     return values[index] & 0xFFFFFFFFL;
   }
 
+  @Override
   public void set(final int index, final long value) {
     values[index] = (int) (value);
   }
 
+  @Override
   public long ramBytesUsed() {
     return RamUsageEstimator.sizeOf(values);
   }
 
+  @Override
   public void clear() {
     Arrays.fill(values, (int) 0L);
   }
@@ -89,6 +92,7 @@ final class Direct32 extends PackedInts.MutableImpl {
     return gets;
   }
 
+  @Override
   public int set(int index, long[] arr, int off, int len) {
     assert len > 0 : "len must be > 0 (got " + len + ")";
     assert index >= 0 && index < valueCount;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/Direct64.java b/lucene/core/src/java/org/apache/lucene/util/packed/Direct64.java
index d54ad63..d065c4a 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/Direct64.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/Direct64.java
@@ -49,14 +49,17 @@ final class Direct64 extends PackedInts.MutableImpl {
     return values[index];
   }
 
+  @Override
   public void set(final int index, final long value) {
     values[index] = (value);
   }
 
+  @Override
   public long ramBytesUsed() {
     return RamUsageEstimator.sizeOf(values);
   }
 
+  @Override
   public void clear() {
     Arrays.fill(values, 0L);
   }
@@ -82,6 +85,7 @@ final class Direct64 extends PackedInts.MutableImpl {
     return gets;
   }
 
+  @Override
   public int set(int index, long[] arr, int off, int len) {
     assert len > 0 : "len must be > 0 (got " + len + ")";
     assert index >= 0 && index < valueCount;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/Direct8.java b/lucene/core/src/java/org/apache/lucene/util/packed/Direct8.java
index d6fc12a..8cd9277 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/Direct8.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/Direct8.java
@@ -52,14 +52,17 @@ final class Direct8 extends PackedInts.MutableImpl {
     return values[index] & 0xFFL;
   }
 
+  @Override
   public void set(final int index, final long value) {
     values[index] = (byte) (value);
   }
 
+  @Override
   public long ramBytesUsed() {
     return RamUsageEstimator.sizeOf(values);
   }
 
+  @Override
   public void clear() {
     Arrays.fill(values, (byte) 0L);
   }
@@ -87,6 +90,7 @@ final class Direct8 extends PackedInts.MutableImpl {
     return gets;
   }
 
+  @Override
   public int set(int index, long[] arr, int off, int len) {
     assert len > 0 : "len must be > 0 (got " + len + ")";
     assert index >= 0 && index < valueCount;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter.java b/lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter.java
index d87d434..f7bc2dd 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter.java
@@ -40,14 +40,17 @@ public class GrowableWriter implements PackedInts.Mutable {
     currentMaxValue = PackedInts.maxValue(current.getBitsPerValue());
   }
 
+  @Override
   public long get(int index) {
     return current.get(index);
   }
 
+  @Override
   public int size() {
     return current.size();
   }
 
+  @Override
   public int getBitsPerValue() {
     return current.getBitsPerValue();
   }
@@ -79,11 +82,13 @@ public class GrowableWriter implements PackedInts.Mutable {
     currentMaxValue = PackedInts.maxValue(current.getBitsPerValue());
   }
 
+  @Override
   public void set(int index, long value) {
     ensureCapacity(value);
     current.set(index, value);
   }
 
+  @Override
   public void clear() {
     current.clear();
   }
@@ -95,6 +100,7 @@ public class GrowableWriter implements PackedInts.Mutable {
     return next;
   }
 
+  @Override
   public int get(int index, long[] arr, int off, int len) {
     return current.get(index, arr, off, len);
   }
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/Packed16ThreeBlocks.java b/lucene/core/src/java/org/apache/lucene/util/packed/Packed16ThreeBlocks.java
index 701cd69..3bf2fc4 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/Packed16ThreeBlocks.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/Packed16ThreeBlocks.java
@@ -114,6 +114,7 @@ final class Packed16ThreeBlocks extends PackedInts.MutableImpl {
     Arrays.fill(blocks, (short) 0);
   }
 
+  @Override
   public long ramBytesUsed() {
     return RamUsageEstimator.sizeOf(blocks);
   }
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock.java b/lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock.java
index df9c1ef..c82df17 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock.java
@@ -58,6 +58,7 @@ abstract class Packed64SingleBlock extends PackedInts.MutableImpl {
     Arrays.fill(blocks, 0L);
   }
 
+  @Override
   public long ramBytesUsed() {
     return RamUsageEstimator.sizeOf(blocks);
   }
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/Packed8ThreeBlocks.java b/lucene/core/src/java/org/apache/lucene/util/packed/Packed8ThreeBlocks.java
index 994e726..8a9b3b5 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/Packed8ThreeBlocks.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/Packed8ThreeBlocks.java
@@ -112,6 +112,7 @@ final class Packed8ThreeBlocks extends PackedInts.MutableImpl {
     Arrays.fill(blocks, (byte) 0);
   }
 
+  @Override
   public long ramBytesUsed() {
     return RamUsageEstimator.sizeOf(blocks);
   }
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java b/lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java
index f864e28..9a98f0e 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java
@@ -576,22 +576,27 @@ public class PackedInts {
       this.valueCount = valueCount;
     }
 
+    @Override
     public int getBitsPerValue() {
       return bitsPerValue;
     }
 
+    @Override
     public int size() {
       return valueCount;
     }
 
+    @Override
     public Object getArray() {
       return null;
     }
 
+    @Override
     public boolean hasArray() {
       return false;
     }
 
+    @Override
     public int get(int index, long[] arr, int off, int len) {
       assert len > 0 : "len must be > 0 (got " + len + ")";
       assert index >= 0 && index < valueCount;
@@ -612,6 +617,7 @@ public class PackedInts {
       super(valueCount, bitsPerValue);
     }
 
+    @Override
     public int set(int index, long[] arr, int off, int len) {
       assert len > 0 : "len must be > 0 (got " + len + ")";
       assert index >= 0 && index < valueCount;
@@ -624,6 +630,7 @@ public class PackedInts {
       return len;
     }
 
+    @Override
     public void fill(int fromIndex, int toIndex, long val) {
       assert val <= maxValue(bitsPerValue);
       assert fromIndex <= toIndex;
diff --git a/lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl.java b/lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl.java
index 7b1e269..f1cfafe 100644
--- a/lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl.java
+++ b/lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl.java
@@ -224,8 +224,11 @@ public class TestCharTermAttributeImpl extends LuceneTestCase {
     // finally use a completely custom CharSequence that is not catched by instanceof checks
     final String longTestString = "012345678901234567890123456789";
     t.append(new CharSequence() {
+      @Override
       public char charAt(int i) { return longTestString.charAt(i); }
+      @Override
       public int length() { return longTestString.length(); }
+      @Override
       public CharSequence subSequence(int start, int end) { return longTestString.subSequence(start, end); }
       @Override
       public String toString() { return longTestString; }
diff --git a/lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestLZ4CompressionMode.java b/lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestLZ4CompressionMode.java
index 9576e57..d14a127 100644
--- a/lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestLZ4CompressionMode.java
+++ b/lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestLZ4CompressionMode.java
@@ -23,6 +23,7 @@ import com.carrotsearch.randomizedtesting.generators.RandomInts;
 
 public abstract class AbstractTestLZ4CompressionMode extends AbstractTestCompressionMode {
 
+  @Override
   public byte[] test(byte[] decompressed) throws IOException {
     final byte[] compressed = super.test(decompressed);
     int off = 0;
diff --git a/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat.java b/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat.java
index 6ad64de..fe7a8b8 100644
--- a/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat.java
+++ b/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat.java
@@ -66,6 +66,7 @@ public class TestCompressingStoredFieldsFormat extends LuceneTestCase {
   IndexWriterConfig iwConf;
   private RandomIndexWriter iw;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     dir = newDirectory();
@@ -75,6 +76,7 @@ public class TestCompressingStoredFieldsFormat extends LuceneTestCase {
     iw = new RandomIndexWriter(random(), dir, iwConf);
   }
 
+  @Override
   public void tearDown() throws Exception {
     super.tearDown();
     IOUtils.close(iw, dir);
diff --git a/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestFastCompressionMode.java b/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestFastCompressionMode.java
index deb867a..ab1500f 100644
--- a/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestFastCompressionMode.java
+++ b/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestFastCompressionMode.java
@@ -19,6 +19,7 @@ package org.apache.lucene.codecs.compressing;
 
 public class TestFastCompressionMode extends AbstractTestLZ4CompressionMode {
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     mode = CompressionMode.FAST;
diff --git a/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestFastDecompressionMode.java b/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestFastDecompressionMode.java
index c1bbb59..9ed7648 100644
--- a/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestFastDecompressionMode.java
+++ b/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestFastDecompressionMode.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 
 public class TestFastDecompressionMode extends AbstractTestLZ4CompressionMode {
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     mode = CompressionMode.FAST_DECOMPRESSION;
diff --git a/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestHighCompressionMode.java b/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestHighCompressionMode.java
index 8e66117..065be63 100644
--- a/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestHighCompressionMode.java
+++ b/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestHighCompressionMode.java
@@ -20,6 +20,7 @@ package org.apache.lucene.codecs.compressing;
 
 public class TestHighCompressionMode extends AbstractTestCompressionMode {
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     mode = CompressionMode.HIGH_COMPRESSION;
diff --git a/lucene/core/src/test/org/apache/lucene/index/BinaryTokenStream.java b/lucene/core/src/test/org/apache/lucene/index/BinaryTokenStream.java
index 94b6b74..09f33ad 100644
--- a/lucene/core/src/test/org/apache/lucene/index/BinaryTokenStream.java
+++ b/lucene/core/src/test/org/apache/lucene/index/BinaryTokenStream.java
@@ -58,18 +58,22 @@ public final class BinaryTokenStream extends TokenStream {
   public static class ByteTermAttributeImpl extends AttributeImpl implements ByteTermAttribute,TermToBytesRefAttribute {
     private BytesRef bytes;
     
+    @Override
     public int fillBytesRef() {
       return bytes.hashCode();
     }
     
+    @Override
     public BytesRef getBytesRef() {
       return bytes;
     }
 
+    @Override
     public void setBytesRef(BytesRef bytes) {
       this.bytes = bytes;
     }
     
+    @Override
     public void clear() {}
     
     @Override
diff --git a/lucene/core/src/test/org/apache/lucene/index/Test2BTerms.java b/lucene/core/src/test/org/apache/lucene/index/Test2BTerms.java
index 989f340..41edcdf 100644
--- a/lucene/core/src/test/org/apache/lucene/index/Test2BTerms.java
+++ b/lucene/core/src/test/org/apache/lucene/index/Test2BTerms.java
@@ -86,10 +86,12 @@ public class Test2BTerms extends LuceneTestCase {
     }
 
     private final static class MyTermAttributeImpl extends AttributeImpl implements TermToBytesRefAttribute {
+      @Override
       public int fillBytesRef() {
         return bytes.hashCode();
       }
       
+      @Override
       public BytesRef getBytesRef() {
         return bytes;
       }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestCodecs.java b/lucene/core/src/test/org/apache/lucene/index/TestCodecs.java
index b1ff1da..8b49049 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestCodecs.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestCodecs.java
@@ -100,6 +100,7 @@ public class TestCodecs extends LuceneTestCase {
       Arrays.sort(terms);
     }
 
+    @Override
     public int compareTo(final FieldData other) {
       return fieldInfo.name.compareTo(other.fieldInfo.name);
     }
@@ -145,6 +146,7 @@ public class TestCodecs extends LuceneTestCase {
       this.positions = positions;
     }
 
+    @Override
     public int compareTo(final TermData o) {
       return text.compareTo(o.text);
     }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy.java b/lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy.java
index c4ff37b..50dafb4 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy.java
@@ -61,10 +61,12 @@ public class TestDeletionPolicy extends LuceneTestCase {
     int numOnInit;
     int numOnCommit;
     Directory dir;
+    @Override
     public void onInit(List<? extends IndexCommit> commits) throws IOException {
       verifyCommitOrder(commits);
       numOnInit++;
     }
+    @Override
     public void onCommit(List<? extends IndexCommit> commits) throws IOException {
       IndexCommit lastCommit =  commits.get(commits.size()-1);
       DirectoryReader r = DirectoryReader.open(dir);
@@ -82,6 +84,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
   class KeepNoneOnInitDeletionPolicy implements IndexDeletionPolicy {
     int numOnInit;
     int numOnCommit;
+    @Override
     public void onInit(List<? extends IndexCommit> commits) throws IOException {
       verifyCommitOrder(commits);
       numOnInit++;
@@ -91,6 +94,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
         assertTrue(commit.isDeleted());
       }
     }
+    @Override
     public void onCommit(List<? extends IndexCommit> commits) throws IOException {
       verifyCommitOrder(commits);
       int size = commits.size();
@@ -113,6 +117,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
       this.numToKeep = numToKeep;
     }
 
+    @Override
     public void onInit(List<? extends IndexCommit> commits) throws IOException {
       if (VERBOSE) {
         System.out.println("TEST: onInit");
@@ -123,6 +128,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
       doDeletes(commits, false);
     }
 
+    @Override
     public void onCommit(List<? extends IndexCommit> commits) throws IOException {
       if (VERBOSE) {
         System.out.println("TEST: onCommit");
@@ -170,11 +176,13 @@ public class TestDeletionPolicy extends LuceneTestCase {
       this.expirationTimeSeconds = seconds;
     }
 
+    @Override
     public void onInit(List<? extends IndexCommit> commits) throws IOException {
       verifyCommitOrder(commits);
       onCommit(commits);
     }
 
+    @Override
     public void onCommit(List<? extends IndexCommit> commits) throws IOException {
       verifyCommitOrder(commits);
 
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java b/lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java
index 0881914..9d27f09 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java
@@ -966,6 +966,7 @@ public void testFilesOpenClose() throws IOException {
     final DirectoryReader reader = writer.getReader();
     final int[] closeCount = new int[1];
     final IndexReader.ReaderClosedListener listener = new IndexReader.ReaderClosedListener() {
+      @Override
       public void onClose(IndexReader reader) {
         closeCount[0]++;
       }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen.java b/lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen.java
index 44ef35f..f0a6a01 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen.java
@@ -533,8 +533,10 @@ public class TestDirectoryReaderReopen extends LuceneTestCase {
   }
   
   static class KeepAllCommits implements IndexDeletionPolicy {
+    @Override
     public void onInit(List<? extends IndexCommit> commits) {
     }
+    @Override
     public void onCommit(List<? extends IndexCommit> commits) {
     }
   }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.java b/lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.java
index 2985b0f..49058ab 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.java
@@ -155,6 +155,7 @@ public class TestDocumentsWriterDeleteQueue extends LuceneTestCase {
     ReentrantLock lock = (ReentrantLock) field.get(queue);
     lock.lock();
     Thread t = new Thread() {
+      @Override
       public void run() {
         queue.addDelete(new Term("foo", "bar"));
       }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterStallControl.java b/lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterStallControl.java
index 8a897e0..4069223 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterStallControl.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterStallControl.java
@@ -62,6 +62,7 @@ public class TestDocumentsWriterStallControl extends LuceneTestCase {
     for (int i = 0; i < stallThreads.length; i++) {
       final int stallProbability = 1 +random().nextInt(10);
       stallThreads[i] = new Thread() {
+        @Override
         public void run() {
 
           int iters = atLeast(1000);
@@ -220,6 +221,7 @@ public class TestDocumentsWriterStallControl extends LuceneTestCase {
       this.exceptions = exceptions;
     }
     
+    @Override
     public void run() {
       try {
         while (!stop.get()) {
@@ -261,6 +263,7 @@ public class TestDocumentsWriterStallControl extends LuceneTestCase {
       this.exceptions = exceptions;
     }
     
+    @Override
     public void run() {
       try {
        
@@ -318,6 +321,7 @@ public class TestDocumentsWriterStallControl extends LuceneTestCase {
     Thread[] array = new Thread[num];
     for (int i = 0; i < array.length; i++) {
       array[i] = new Thread() {
+        @Override
         public void run() {
           ctrl.waitIfStalled();
         }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.java b/lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.java
index cc6a5b9..a79bac6 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.java
@@ -302,6 +302,7 @@ public class TestFlushByRamOrCountsPolicy extends LuceneTestCase {
       this.doRandomCommit = doRandomCommit;
     }
 
+    @Override
     public void run() {
       try {
         long ramSize = 0;
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.java b/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.java
index da6c43ff..da04b4c 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.java
@@ -86,6 +86,7 @@ public class TestIndexWriterNRTIsCurrent extends LuceneTestCase {
       this.latch = latch;
     }
 
+    @Override
     public void run() {
       DirectoryReader currentReader = null;
       Random random = LuceneTestCase.random();
@@ -158,6 +159,7 @@ public class TestIndexWriterNRTIsCurrent extends LuceneTestCase {
       this.latch = latch;
     }
 
+    @Override
     public void run() {
       try {
         latch.await();
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestIntBlockPool.java b/lucene/core/src/test/org/apache/lucene/index/TestIntBlockPool.java
index 6d48208..8fb87b2 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestIntBlockPool.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestIntBlockPool.java
@@ -116,6 +116,7 @@ public class TestIntBlockPool extends LuceneTestCase {
       this.bytesUsed = bytesUsed;
     }
     
+    @Override
     public int[] getIntBlock() {
       bytesUsed.addAndGet(blockSize * RamUsageEstimator.NUM_BYTES_INT);
       return new int[blockSize];
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestNRTThreads.java b/lucene/core/src/test/org/apache/lucene/index/TestNRTThreads.java
index ab6ffa1..6ccd1f3 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestNRTThreads.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestNRTThreads.java
@@ -99,6 +99,7 @@ public class TestNRTThreads extends ThreadedIndexingAndSearchingTestCase {
   
   private IndexSearcher fixedSearcher;
 
+  @Override
   protected IndexSearcher getCurrentSearcher() throws Exception {
     return fixedSearcher;
   }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestOmitTf.java b/lucene/core/src/test/org/apache/lucene/index/TestOmitTf.java
index a2aa57a..9f8de3f 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestOmitTf.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestOmitTf.java
@@ -37,7 +37,9 @@ import org.apache.lucene.store.Directory;
 public class TestOmitTf extends LuceneTestCase {
   
   public static class SimpleSimilarity extends TFIDFSimilarity {
+    @Override
     public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }
+    @Override
     public float coord(int overlap, int maxOverlap) { return 1.0f; }
     @Override public float lengthNorm(FieldInvertState state) { return state.getBoost(); }
     @Override public float tf(float freq) { return freq; }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java b/lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java
index 1b1ec4d..8cdd8d4 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets.java
@@ -53,6 +53,7 @@ import org.apache.lucene.util._TestUtil;
 public class TestPostingsOffsets extends LuceneTestCase {
   IndexWriterConfig iwc;
   
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestReaderClosed.java b/lucene/core/src/test/org/apache/lucene/index/TestReaderClosed.java
index c3028d0..7e38d4b 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestReaderClosed.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestReaderClosed.java
@@ -92,6 +92,7 @@ public class TestReaderClosed extends LuceneTestCase {
     }
   }
   
+  @Override
   public void tearDown() throws Exception {
     dir.close();
     super.tearDown();
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.java b/lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.java
index 84aab03..4a37d6f 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.java
@@ -193,6 +193,7 @@ public class TestRollingUpdates extends LuceneTestCase {
       this.num = num;
     }
 
+    @Override
     public void run() {
       try {
         DirectoryReader open = null;
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java b/lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java
index 7bdea57..906f80c 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java
@@ -134,6 +134,7 @@ public class TestStressIndexing2 extends LuceneTestCase {
   static Term idTerm = new Term("id","");
   IndexingThread[] threads;
   static Comparator<GeneralField> fieldNameComparator = new Comparator<GeneralField>() {
+    @Override
     public int compare(GeneralField o1, GeneralField o2) {
       return o1.name().compareTo(o2.name());
     }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java b/lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java
index d3773b5..be4ae4c 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader.java
@@ -54,6 +54,7 @@ public class TestTermVectorsReader extends LuceneTestCase {
     int pos;
     int startOffset;
     int endOffset;
+    @Override
     public int compareTo(TestToken other) {
       return pos - other.pos;
     }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2.java b/lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2.java
index 8b9dc7e..7ef612e 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2.java
@@ -45,6 +45,7 @@ public class TestTermsEnum2 extends LuceneTestCase {
   private Automaton termsAutomaton; // automata of the same
   int numIterations;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     numIterations = atLeast(50);
@@ -73,6 +74,7 @@ public class TestTermsEnum2 extends LuceneTestCase {
     writer.close();
   }
   
+  @Override
   public void tearDown() throws Exception {
     reader.close();
     dir.close();
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.java b/lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.java
index e5d4c5c..77b0e40 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.java
@@ -163,9 +163,11 @@ public class TestTransactionRollback extends LuceneTestCase {
       this.rollbackPoint = rollbackPoint;
     }
 
+    @Override
     public void onCommit(List<? extends IndexCommit> commits) throws IOException {
     }
 
+    @Override
     public void onInit(List<? extends IndexCommit> commits) throws IOException {
       for (final IndexCommit commit : commits) {
         Map<String,String> userData=commit.getUserData();
@@ -196,8 +198,10 @@ public class TestTransactionRollback extends LuceneTestCase {
 
   class DeleteLastCommitPolicy implements IndexDeletionPolicy {
 
+    @Override
     public void onCommit(List<? extends IndexCommit> commits) throws IOException {}
 
+    @Override
     public void onInit(List<? extends IndexCommit> commits) throws IOException {
       commits.get(commits.size()-1).delete();
     }
@@ -218,7 +222,9 @@ public class TestTransactionRollback extends LuceneTestCase {
 
   // Keeps all commit points (used to build index)
   class KeepAllDeletionPolicy implements IndexDeletionPolicy {
+    @Override
     public void onCommit(List<? extends IndexCommit> commits) throws IOException {}
+    @Override
     public void onInit(List<? extends IndexCommit> commits) throws IOException {}
   }
 }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestTwoPhaseCommitTool.java b/lucene/core/src/test/org/apache/lucene/index/TestTwoPhaseCommitTool.java
index 1a62be0..2c18ece 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestTwoPhaseCommitTool.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestTwoPhaseCommitTool.java
@@ -39,6 +39,7 @@ public class TestTwoPhaseCommitTool extends LuceneTestCase {
       this.failOnRollback = failOnRollback;
     }
 
+    @Override
     public void prepareCommit() throws IOException {
       prepareCommit(null);
     }
@@ -51,6 +52,7 @@ public class TestTwoPhaseCommitTool extends LuceneTestCase {
       }
     }
 
+    @Override
     public void commit() throws IOException {
       commit(null);
     }
@@ -63,6 +65,7 @@ public class TestTwoPhaseCommitTool extends LuceneTestCase {
       }
     }
 
+    @Override
     public void rollback() throws IOException {
       rollbackCalled = true;
       if (failOnRollback) {
diff --git a/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java b/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
index 80d9c46..88ef513 100644
--- a/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
+++ b/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
@@ -91,6 +91,7 @@ final class JustCompileSearch {
   
   static final class JustCompileExtendedFieldCacheLongParser implements FieldCache.LongParser {
 
+    @Override
     public long parseLong(BytesRef string) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
@@ -99,6 +100,7 @@ final class JustCompileSearch {
   
   static final class JustCompileExtendedFieldCacheDoubleParser implements FieldCache.DoubleParser {
     
+    @Override
     public double parseDouble(BytesRef term) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java b/lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java
index dd93da5..7c913eb 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java
@@ -306,6 +306,7 @@ public class TestBooleanMinShouldMatch extends LuceneTestCase {
 
       // callback object to set a random setMinimumNumberShouldMatch
       TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {
+        @Override
         public void postCreate(BooleanQuery q) {
           BooleanClause[] c =q.getClauses();
           int opt=0;
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java b/lucene/core/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java
index 097ec92..a2a7643 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java
@@ -145,6 +145,7 @@ class MultiThreadTermVectorsReader implements Runnable {
     return t.isAlive();
   }
   
+  @Override
   public void run() {
       try {
         // run the test 100 times
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestNRTManager.java b/lucene/core/src/test/org/apache/lucene/search/TestNRTManager.java
index 4148def..e5b729a 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestNRTManager.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestNRTManager.java
@@ -307,6 +307,7 @@ public class TestNRTManager extends ThreadedIndexingAndSearchingTestCase {
     manager.maybeRefresh();
     assertFalse(gen < manager.getCurrentSearchingGen());
     Thread t = new Thread() {
+      @Override
       public void run() {
         try {
           signal.await();
@@ -340,6 +341,7 @@ public class TestNRTManager extends ThreadedIndexingAndSearchingTestCase {
     
     final AtomicBoolean finished = new AtomicBoolean(false);
     Thread waiter = new Thread() {
+      @Override
       public void run() {
         manager.waitForGeneration(lastGen);
         finished.set(true);
@@ -372,6 +374,7 @@ public class TestNRTManager extends ThreadedIndexingAndSearchingTestCase {
 
     }
 
+    @Override
     public void updateDocument(Term term,
         IndexDocument doc, Analyzer analyzer)
         throws IOException {
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery.java b/lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery.java
index 870db4f..1670563 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery.java
@@ -102,6 +102,7 @@ public class TestRegexpQuery extends LuceneTestCase {
           BasicAutomata.makeString("brown"),
           BasicAutomata.makeString("bob")));
       
+      @Override
       public Automaton getAutomaton(String name) {
         if (name.equals("quickBrown")) return quickBrownAutomaton;
         else return null;
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestSimilarity.java b/lucene/core/src/test/org/apache/lucene/search/TestSimilarity.java
index 6f201db..7ef53a8 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestSimilarity.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestSimilarity.java
@@ -40,7 +40,9 @@ import org.apache.lucene.document.Document;
 public class TestSimilarity extends LuceneTestCase {
   
   public static class SimpleSimilarity extends DefaultSimilarity {
+    @Override
     public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }
+    @Override
     public float coord(int overlap, int maxOverlap) { return 1.0f; }
     @Override public float lengthNorm(FieldInvertState state) { return state.getBoost(); }
     @Override public float tf(float freq) { return freq; }
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider.java b/lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider.java
index 1a2be6e..ab1de96 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider.java
@@ -95,6 +95,7 @@ public class TestSimilarityProvider extends LuceneTestCase {
     private Similarity sim1 = new Sim1();
     private Similarity sim2 = new Sim2();
     
+    @Override
     public Similarity get(String field) {
       if (field.equals("foo")) {
         return sim1;
@@ -106,10 +107,12 @@ public class TestSimilarityProvider extends LuceneTestCase {
   
   private class Sim1 extends TFIDFSimilarity {
     
+    @Override
     public float coord(int overlap, int maxOverlap) {
       return 1f;
     }
 
+    @Override
     public float queryNorm(float sumOfSquaredWeights) {
       return 1f;
     }
@@ -142,10 +145,12 @@ public class TestSimilarityProvider extends LuceneTestCase {
   
   private class Sim2 extends TFIDFSimilarity {
     
+    @Override
     public float coord(int overlap, int maxOverlap) {
       return 1f;
     }
 
+    @Override
     public float queryNorm(float sumOfSquaredWeights) {
       return 1f;
     }
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestSort.java b/lucene/core/src/test/org/apache/lucene/search/TestSort.java
index 39b05f8..e143d6a 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestSort.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestSort.java
@@ -577,6 +577,7 @@ public class TestSort extends LuceneTestCase {
 
 
     sort.setSort (new SortField ("parser", new FieldCache.IntParser(){
+      @Override
       public final int parseInt(final BytesRef term) {
         return (term.bytes[term.offset]-'A') * 123456;
       }
@@ -586,6 +587,7 @@ public class TestSort extends LuceneTestCase {
     fc.purgeAllCaches();
 
     sort.setSort (new SortField ("parser", new FieldCache.FloatParser(){
+      @Override
       public final float parseFloat(final BytesRef term) {
         return (float) Math.sqrt( term.bytes[term.offset] );
       }
@@ -595,6 +597,7 @@ public class TestSort extends LuceneTestCase {
     fc.purgeAllCaches();
 
     sort.setSort (new SortField ("parser", new FieldCache.LongParser(){
+      @Override
       public final long parseLong(final BytesRef term) {
         return (term.bytes[term.offset]-'A') * 1234567890L;
       }
@@ -604,6 +607,7 @@ public class TestSort extends LuceneTestCase {
     fc.purgeAllCaches();
 
     sort.setSort (new SortField ("parser", new FieldCache.DoubleParser(){
+      @Override
       public final double parseDouble(final BytesRef term) {
         return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A') );
       }
@@ -613,6 +617,7 @@ public class TestSort extends LuceneTestCase {
     fc.purgeAllCaches();
 
     sort.setSort (new SortField ("parser", new FieldCache.ByteParser(){
+      @Override
       public final byte parseByte(final BytesRef term) {
         return (byte) (term.bytes[term.offset]-'A');
       }
@@ -622,6 +627,7 @@ public class TestSort extends LuceneTestCase {
     fc.purgeAllCaches();
 
     sort.setSort (new SortField ("parser", new FieldCache.ShortParser(){
+      @Override
       public final short parseShort(final BytesRef term) {
         return (short) (term.bytes[term.offset]-'A');
       }
@@ -698,6 +704,7 @@ public class TestSort extends LuceneTestCase {
     }
 
     private static final FieldCache.IntParser testIntParser = new FieldCache.IntParser() {
+      @Override
       public final int parseInt(final BytesRef term) {
         return (term.bytes[term.offset]-'A') * 123456;
       }
diff --git a/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java b/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
index 5556a7f..2710f0c 100644
--- a/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
+++ b/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
@@ -306,10 +306,12 @@ public class TestPayloadNearQuery extends LuceneTestCase {
 
   static class BoostingSimilarity extends DefaultSimilarity {
 
+    @Override
     public float queryNorm(float sumOfSquaredWeights) {
       return 1.0f;
     }
     
+    @Override
     public float coord(int overlap, int maxOverlap) {
       return 1.0f;
     }
diff --git a/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java b/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java
index 2485063..a118746 100644
--- a/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java
+++ b/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java
@@ -295,10 +295,12 @@ public class TestPayloadTermQuery extends LuceneTestCase {
 
   static class BoostingSimilarity extends DefaultSimilarity {
 
+    @Override
     public float queryNorm(float sumOfSquaredWeights) {
       return 1;
     }
     
+    @Override
     public float coord(int overlap, int maxOverlap) {
       return 1;
     }
diff --git a/lucene/core/src/test/org/apache/lucene/store/TestDirectory.java b/lucene/core/src/test/org/apache/lucene/store/TestDirectory.java
index 6f4939c..540362d 100644
--- a/lucene/core/src/test/org/apache/lucene/store/TestDirectory.java
+++ b/lucene/core/src/test/org/apache/lucene/store/TestDirectory.java
@@ -65,6 +65,7 @@ public class TestDirectory extends LuceneTestCase {
         this.name = name;
       }
       
+      @Override
       public void run() {
         for (int i = 0; i < 3000; i++) {
           String fileName = this.name + i;
@@ -87,6 +88,7 @@ public class TestDirectory extends LuceneTestCase {
         this.name = name;
       }
       
+      @Override
       public void run() {
         for (int i = 0; i < 10000; i++) {
           try {
diff --git a/lucene/core/src/test/org/apache/lucene/util/TestArrayUtil.java b/lucene/core/src/test/org/apache/lucene/util/TestArrayUtil.java
index e00425c..3e3ea2d 100644
--- a/lucene/core/src/test/org/apache/lucene/util/TestArrayUtil.java
+++ b/lucene/core/src/test/org/apache/lucene/util/TestArrayUtil.java
@@ -211,6 +211,7 @@ public class TestArrayUtil extends LuceneTestCase {
       this.order = order;
     }
     
+    @Override
     public int compareTo(Item other) {
       return this.order - other.order;
     }
diff --git a/lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap.java b/lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap.java
index 7ff4dea..ca68ab9 100644
--- a/lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap.java
+++ b/lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap.java
@@ -177,6 +177,7 @@ public class TestWeakIdentityMap extends LuceneTestCase {
       for (int t = 0; t < threadCount; t++) {
         final Random rnd = new Random(random().nextLong());
         exec.execute(new Runnable() {
+          @Override
           public void run() {
             final int count = atLeast(rnd, 10000);
             for (int i = 0; i < count; i++) {
diff --git a/lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java b/lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java
index 8b0aedf..5f17681 100644
--- a/lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java
+++ b/lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs.java
@@ -1187,6 +1187,7 @@ public class TestFSTs extends LuceneTestCase {
   }
   
   static final Comparator<Long> minLongComparator = new Comparator<Long> () {
+    @Override
     public int compare(Long left, Long right) {
       return left.compareTo(right);
     }  
@@ -1225,6 +1226,7 @@ public class TestFSTs extends LuceneTestCase {
   
   // compares just the weight side of the pair
   static final Comparator<Pair<Long,Long>> minPairWeightComparator = new Comparator<Pair<Long,Long>> () {
+    @Override
     public int compare(Pair<Long,Long> left, Pair<Long,Long> right) {
       return left.output1.compareTo(right.output1);
     }  
diff --git a/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestBeforeAfterOverrides.java b/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestBeforeAfterOverrides.java
index 17eea60..900c33b 100644
--- a/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestBeforeAfterOverrides.java
+++ b/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestBeforeAfterOverrides.java
@@ -37,6 +37,7 @@ public class TestBeforeAfterOverrides extends WithNestedTests {
   }
   public static class Before2 extends Before1 {}
   public static class Before3 extends Before2 {
+    @Override
     @Before
     public void before() {}
   }
diff --git a/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks.java b/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks.java
index 26719c3..4457b04 100644
--- a/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks.java
+++ b/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks.java
@@ -39,6 +39,7 @@ public class TestExceptionInBeforeClassHooks extends WithNestedTests {
     @BeforeClass
     public static void beforeClass() throws Exception {
       Thread t = new Thread() {
+        @Override
         public void run() {
           throw new RuntimeException("foobar");
         }
@@ -53,6 +54,7 @@ public class TestExceptionInBeforeClassHooks extends WithNestedTests {
   public static class Nested2 extends WithNestedTests.AbstractNestedTest {
     public void test1() throws Exception {
       Thread t = new Thread() {
+        @Override
         public void run() {
           throw new RuntimeException("foobar1");
         }
@@ -63,6 +65,7 @@ public class TestExceptionInBeforeClassHooks extends WithNestedTests {
 
     public void test2() throws Exception {
       Thread t = new Thread() {
+        @Override
         public void run() {
           throw new RuntimeException("foobar2");
         }
@@ -73,6 +76,7 @@ public class TestExceptionInBeforeClassHooks extends WithNestedTests {
     
     public void test3() throws Exception {
       Thread t = new Thread() {
+        @Override
         public void run() {
           throw new RuntimeException("foobar3");
         }
@@ -86,6 +90,7 @@ public class TestExceptionInBeforeClassHooks extends WithNestedTests {
     @Before
     public void runBeforeTest() throws Exception {
       Thread t = new Thread() {
+        @Override
         public void run() {
           throw new RuntimeException("foobar");
         }
diff --git a/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestJUnitRuleOrder.java b/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestJUnitRuleOrder.java
index 8c91a57..875879f 100644
--- a/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestJUnitRuleOrder.java
+++ b/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestJUnitRuleOrder.java
@@ -60,6 +60,7 @@ public class TestJUnitRuleOrder extends WithNestedTests {
       @Override
       public Statement apply(final Statement base, Description description) {
         return new Statement() {
+          @Override
           public void evaluate() throws Throwable {
             stack.push("@Rule before");
             base.evaluate();
diff --git a/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestReproduceMessage.java b/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestReproduceMessage.java
index f635ce5..7b863b3 100644
--- a/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestReproduceMessage.java
+++ b/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestReproduceMessage.java
@@ -52,6 +52,7 @@ public class TestReproduceMessage extends WithNestedTests {
       @Override
       public Statement apply(final Statement base, Description description) {
         return new Statement() {
+          @Override
           public void evaluate() throws Throwable {
             triggerOn(SorePoint.RULE);
             base.evaluate();
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/enhancements/CategoryEnhancement.java b/lucene/facet/src/java/org/apache/lucene/facet/enhancements/CategoryEnhancement.java
index 5c74869..4493f45 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/enhancements/CategoryEnhancement.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/enhancements/CategoryEnhancement.java
@@ -128,5 +128,6 @@ public interface CategoryEnhancement {
    * used in
    * {@link EnhancementsPayloadIterator#getCategoryData(CategoryEnhancement)}.
    */
+  @Override
   public boolean equals(Object o);
 }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationEnhancement.java b/lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationEnhancement.java
index 81222c3..63ecaab 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationEnhancement.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationEnhancement.java
@@ -91,20 +91,24 @@ public class AssociationEnhancement implements CategoryEnhancement {
     return false;
   }
   
+  @Override
   public boolean generatesCategoryList() {
     return true;
   }
 
+  @Override
   public String getCategoryListTermText() {
     return CATEGORY_LIST_TERM_TEXT;
   }
 
+  @Override
   public CategoryListTokenizer getCategoryListTokenizer(
       TokenStream tokenizer, EnhancementsIndexingParams indexingParams,
       TaxonomyWriter taxonomyWriter) {
     return new AssociationListTokenizer(tokenizer, indexingParams, this);
   }
 
+  @Override
   public byte[] getCategoryTokenBytes(CategoryAttribute categoryAttribute) {
     
     AssociationProperty property = getAssociationProperty(categoryAttribute);
@@ -138,6 +142,7 @@ public class AssociationEnhancement implements CategoryEnhancement {
     return property;
   }
 
+  @Override
   public Object extractCategoryTokenData(byte[] buffer, int offset, int length) {
     if (length == 0) {
       return null;
@@ -146,6 +151,7 @@ public class AssociationEnhancement implements CategoryEnhancement {
     return i;
   }
 
+  @Override
   public Class<? extends CategoryProperty> getRetainableProperty() {
     return null;
   }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationFloatProperty.java b/lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationFloatProperty.java
index ed58c45..fed9a9b 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationFloatProperty.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationFloatProperty.java
@@ -55,6 +55,7 @@ public class AssociationFloatProperty extends AssociationProperty {
     return "AssociationFloatProperty".hashCode() * 31 + (int) association;
   }
 
+  @Override
   public void merge(CategoryProperty other) {
     AssociationFloatProperty o = (AssociationFloatProperty) other;
     this.association = Float.floatToIntBits(Float
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationIntProperty.java b/lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationIntProperty.java
index c604870..e0f7a00 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationIntProperty.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationIntProperty.java
@@ -52,6 +52,7 @@ public class AssociationIntProperty extends AssociationProperty {
     return "AssociationIntProperty".hashCode() * 31 + (int) association;
   }
 
+  @Override
   public void merge(CategoryProperty other) {
     AssociationIntProperty o = (AssociationIntProperty) other;
     this.association += o.association;
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/enhancements/params/DefaultEnhancementsIndexingParams.java b/lucene/facet/src/java/org/apache/lucene/facet/enhancements/params/DefaultEnhancementsIndexingParams.java
index 1c74a66..181cca9 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/enhancements/params/DefaultEnhancementsIndexingParams.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/enhancements/params/DefaultEnhancementsIndexingParams.java
@@ -64,6 +64,7 @@ public class DefaultEnhancementsIndexingParams extends
     addCategoryEnhancements(enhancements);
   }
 
+  @Override
   public void addCategoryEnhancements(CategoryEnhancement... enhancements) {
     if (enhancedCategories == null) {
       enhancedCategories = new ArrayList<CategoryEnhancement>();
@@ -73,6 +74,7 @@ public class DefaultEnhancementsIndexingParams extends
     }
   }
 
+  @Override
   public List<CategoryEnhancement> getCategoryEnhancements() {
     if (enhancedCategories == null || enhancedCategories.isEmpty()) {
       return null;
@@ -80,6 +82,7 @@ public class DefaultEnhancementsIndexingParams extends
     return enhancedCategories;
   }
 
+  @Override
   public List<Class<? extends CategoryProperty>> getRetainableProperties() {
     if (enhancedCategories == null) {
       return null;
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/index/CategoryContainer.java b/lucene/facet/src/java/org/apache/lucene/facet/index/CategoryContainer.java
index 22a9ea5..0d93f73 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/index/CategoryContainer.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/index/CategoryContainer.java
@@ -148,6 +148,7 @@ public class CategoryContainer implements Iterable<CategoryAttribute>, Serializa
     return map.get(categoryPath);
   }
 
+  @Override
   public Iterator<CategoryAttribute> iterator() {
     return map.values().iterator();
   }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/index/attributes/CategoryAttributeImpl.java b/lucene/facet/src/java/org/apache/lucene/facet/index/attributes/CategoryAttributeImpl.java
index b70907e..c0a43c8 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/index/attributes/CategoryAttributeImpl.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/index/attributes/CategoryAttributeImpl.java
@@ -60,6 +60,7 @@ public final class CategoryAttributeImpl extends AttributeImpl implements
     setCategoryPath(categoryPath);
   }
 
+  @Override
   public void set(CategoryAttribute other) {
     ((CategoryAttributeImpl) other).copyTo(this);
   }
@@ -70,14 +71,17 @@ public final class CategoryAttributeImpl extends AttributeImpl implements
    * @return The category path last assigned to this attribute, or null if
    *         none has been assigned.
    */
+  @Override
   public CategoryPath getCategoryPath() {
     return categoryPath;
   }
 
+  @Override
   public void setCategoryPath(CategoryPath cp) {
     categoryPath = cp;
   }
 
+  @Override
   public void addProperty(CategoryProperty property)
       throws UnsupportedOperationException {
     if (properties == null) {
@@ -91,6 +95,7 @@ public final class CategoryAttributeImpl extends AttributeImpl implements
     }
   }
 
+  @Override
   public CategoryProperty getProperty(
       Class<? extends CategoryProperty> propertyClass) {
     if (properties == null) {
@@ -99,6 +104,7 @@ public final class CategoryAttributeImpl extends AttributeImpl implements
     return properties.get(propertyClass);
   }
 
+  @Override
   public CategoryProperty getProperty(
       Collection<Class<? extends CategoryProperty>> propertyClasses) {
     if (properties == null) {
@@ -139,6 +145,7 @@ public final class CategoryAttributeImpl extends AttributeImpl implements
     clearProperties();
   }
 
+  @Override
   public void clearProperties() {
     if (properties != null) {
       properties.clear();
@@ -178,6 +185,7 @@ public final class CategoryAttributeImpl extends AttributeImpl implements
     return hashCode;
   }
 
+  @Override
   public Set<Class<? extends CategoryProperty>> getPropertyClasses() {
     if (properties == null || properties.isEmpty()) {
       return null;
@@ -185,6 +193,7 @@ public final class CategoryAttributeImpl extends AttributeImpl implements
     return properties.keySet();
   }
 
+  @Override
   public void remove(Class<? extends CategoryProperty> propertyClass) {
     properties.remove(propertyClass);
   }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/index/attributes/CategoryAttributesIterable.java b/lucene/facet/src/java/org/apache/lucene/facet/index/attributes/CategoryAttributesIterable.java
index 1ce7208..6e6aaab 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/index/attributes/CategoryAttributesIterable.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/index/attributes/CategoryAttributesIterable.java
@@ -37,6 +37,7 @@ public class CategoryAttributesIterable implements Iterable<CategoryAttribute> {
     this.inputIterable = inputIterable;
   }
 
+  @Override
   public Iterator<CategoryAttribute> iterator() {
     return new CategoryAttributesIterator(this.inputIterable);
   }
@@ -51,16 +52,19 @@ public class CategoryAttributesIterable implements Iterable<CategoryAttribute> {
       this.categoryAttributeImpl = new CategoryAttributeImpl();
     }
 
+    @Override
     public boolean hasNext() {
       return this.internalIterator.hasNext();
     }
 
+    @Override
     public CategoryAttribute next() {
       this.categoryAttributeImpl.setCategoryPath(this.internalIterator
           .next());
       return this.categoryAttributeImpl;
     }
 
+    @Override
     public void remove() {
       this.internalIterator.remove();
     }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/index/attributes/OrdinalProperty.java b/lucene/facet/src/java/org/apache/lucene/facet/index/attributes/OrdinalProperty.java
index babce00..3dea630 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/index/attributes/OrdinalProperty.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/index/attributes/OrdinalProperty.java
@@ -63,6 +63,7 @@ public class OrdinalProperty implements CategoryProperty {
     return this.ordinal;
   }
 
+  @Override
   public void merge(CategoryProperty other) {
     throw new UnsupportedOperationException(
     "Merging ordinal attributes is prohibited");
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelOrdinalPolicy.java b/lucene/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelOrdinalPolicy.java
index 3548569..0f3eec8 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelOrdinalPolicy.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelOrdinalPolicy.java
@@ -46,6 +46,7 @@ public class NonTopLevelOrdinalPolicy implements OrdinalPolicy {
    *            A relevant taxonomyWriter object, with which ordinals sent to
    *            {@link #shouldAdd(int)} are examined.
    */
+  @Override
   public void init(TaxonomyWriter taxonomyWriter) {
     this.taxonomyWriter = taxonomyWriter;
   }
@@ -55,6 +56,7 @@ public class NonTopLevelOrdinalPolicy implements OrdinalPolicy {
    * determine if a parent is root, there's a need for
    * {@link TaxonomyWriter#getParent(int)}.
    */
+  @Override
   public boolean shouldAdd(int ordinal) {
     if (ordinal > TaxonomyReader.ROOT_ORDINAL) {
       try {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelPathPolicy.java b/lucene/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelPathPolicy.java
index 5b111bf..362eb21 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelPathPolicy.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelPathPolicy.java
@@ -37,6 +37,7 @@ public class NonTopLevelPathPolicy implements PathPolicy {
    * Filters out (returns false) CategoryPaths equal or less than
    * {@link TaxonomyReader#ROOT_ORDINAL}. true otherwise.
    */
+  @Override
   public boolean shouldAdd(CategoryPath categoryPath) {
     return categoryPath.length() >= DEFAULT_MINIMAL_SUBPATH_LENGTH;
   }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/index/params/DefaultFacetIndexingParams.java b/lucene/facet/src/java/org/apache/lucene/facet/index/params/DefaultFacetIndexingParams.java
index 914564a..d725c25 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/index/params/DefaultFacetIndexingParams.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/index/params/DefaultFacetIndexingParams.java
@@ -59,10 +59,12 @@ public class DefaultFacetIndexingParams implements FacetIndexingParams {
     partitionSize = fixedPartitionSize();
   }
 
+  @Override
   public CategoryListParams getCategoryListParams(CategoryPath category) {
     return clpParams;
   }
 
+  @Override
   public int drillDownTermText(CategoryPath path, char[] buffer) {
     return path.copyToCharArray(buffer, 0, -1, getFacetDelimChar());
   }
@@ -91,6 +93,7 @@ public class DefaultFacetIndexingParams implements FacetIndexingParams {
     return PathPolicy.ALL_CATEGORIES;
   }
   
+  @Override
   public final int getPartitionSize() {
     return partitionSize;
   }
@@ -102,16 +105,19 @@ public class DefaultFacetIndexingParams implements FacetIndexingParams {
    * org.apache.lucene.facet.index.params.FacetIndexingParams#getAllCategoryListParams
    * ()
    */
+  @Override
   public Iterable<CategoryListParams> getAllCategoryListParams() {
     List<CategoryListParams> res = new ArrayList<CategoryListParams>();
     res.add(clpParams);
     return res;
   }
 
+  @Override
   public final OrdinalPolicy getOrdinalPolicy() {
     return ordinalPolicy;
   }
 
+  @Override
   public final PathPolicy getPathPolicy() {
     return pathPolicy;
   }
@@ -187,6 +193,7 @@ public class DefaultFacetIndexingParams implements FacetIndexingParams {
   /**
    * Use {@link #DEFAULT_FACET_DELIM_CHAR} as the delimiter.
    */
+  @Override
   public char getFacetDelimChar() {
     return DEFAULT_FACET_DELIM_CHAR;
   }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.java b/lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.java
index 6dd7e1d..853651f 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.java
@@ -68,9 +68,12 @@ public abstract class ScoredDocIdCollector extends Collector {
         private DocIdSetIterator docIdsIter = docIds.iterator();
         private int nextDoc;
 
+        @Override
         public int getDocID() { return nextDoc; }
+        @Override
         public float getScore() { return defaultScore; }
 
+        @Override
         public boolean next() {
           try {
             nextDoc = docIdsIter.nextDoc();
@@ -133,9 +136,12 @@ public abstract class ScoredDocIdCollector extends Collector {
         private int nextDoc;
         private int scoresIdx = -1;
 
+        @Override
         public int getDocID() { return nextDoc; }
+        @Override
         public float getScore() { return scores[scoresIdx]; }
 
+        @Override
         public boolean next() {
           try {
             nextDoc = docIdsIter.nextDoc();
@@ -203,14 +209,17 @@ public abstract class ScoredDocIdCollector extends Collector {
   public ScoredDocIDs getScoredDocIDs() {
     return new ScoredDocIDs() {
 
+      @Override
       public ScoredDocIDsIterator iterator() throws IOException {
         return scoredDocIdsIterator();
       }
 
+      @Override
       public DocIdSet getDocIDs() {
         return docIds;
       }
 
+      @Override
       public int size() {
         return numDocIds;
       }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/search/aggregator/CountingAggregator.java b/lucene/facet/src/java/org/apache/lucene/facet/search/aggregator/CountingAggregator.java
index b63b758..5dd54a0 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/search/aggregator/CountingAggregator.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/search/aggregator/CountingAggregator.java
@@ -28,10 +28,12 @@ public class CountingAggregator implements Aggregator {
 
   protected int[] counterArray;
 
+  @Override
   public void aggregate(int ordinal) {
     ++counterArray[ordinal];
   }
 
+  @Override
   public void setNextDoc(int docid, float score) {
     // There's nothing for us to do here since we only increment the count by 1
     // in this aggregator.
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/search/aggregator/ScoringAggregator.java b/lucene/facet/src/java/org/apache/lucene/facet/search/aggregator/ScoringAggregator.java
index e866d96..ef78896 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/search/aggregator/ScoringAggregator.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/search/aggregator/ScoringAggregator.java
@@ -34,6 +34,7 @@ public class ScoringAggregator implements Aggregator {
     this.hashCode = scoreArray == null ? 0 : scoreArray.hashCode();
   }
 
+  @Override
   public void aggregate(int ordinal) {
     scoreArray[ordinal] += score;
   }
@@ -52,6 +53,7 @@ public class ScoringAggregator implements Aggregator {
     return hashCode;
   }
 
+  @Override
   public void setNextDoc(int docid, float score) {
     this.score = score;
   }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/search/aggregator/association/AssociationFloatSumAggregator.java b/lucene/facet/src/java/org/apache/lucene/facet/search/aggregator/association/AssociationFloatSumAggregator.java
index 5932226..72825de 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/search/aggregator/association/AssociationFloatSumAggregator.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/search/aggregator/association/AssociationFloatSumAggregator.java
@@ -46,6 +46,7 @@ public class AssociationFloatSumAggregator implements Aggregator {
     this.sumArray = sumArray;
   }
 
+  @Override
   public void aggregate(int ordinal) {
     long association = associationsPayloadIterator.getAssociation(ordinal);
     if (association != AssociationsPayloadIterator.NO_ASSOCIATION) {
@@ -67,6 +68,7 @@ public class AssociationFloatSumAggregator implements Aggregator {
     return field.hashCode();
   }
 
+  @Override
   public void setNextDoc(int docid, float score) throws IOException {
     associationsPayloadIterator.setNextDoc(docid);
   }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/search/aggregator/association/AssociationIntSumAggregator.java b/lucene/facet/src/java/org/apache/lucene/facet/search/aggregator/association/AssociationIntSumAggregator.java
index 6c85cdd..bc5316d 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/search/aggregator/association/AssociationIntSumAggregator.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/search/aggregator/association/AssociationIntSumAggregator.java
@@ -46,6 +46,7 @@ public class AssociationIntSumAggregator implements Aggregator {
     this.sumArray = sumArray;
   }
 
+  @Override
   public void aggregate(int ordinal) {
     long association = associationsPayloadIterator.getAssociation(ordinal);
     if (association != AssociationsPayloadIterator.NO_ASSOCIATION) {
@@ -67,6 +68,7 @@ public class AssociationIntSumAggregator implements Aggregator {
     return field.hashCode();
   }
 
+  @Override
   public void setNextDoc(int docid, float score) throws IOException {
     associationsPayloadIterator.setNextDoc(docid);
   }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/search/cache/CategoryListData.java b/lucene/facet/src/java/org/apache/lucene/facet/search/cache/CategoryListData.java
index ff4a25b..cc0daa4 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/search/cache/CategoryListData.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/search/cache/CategoryListData.java
@@ -112,10 +112,12 @@ public class CategoryListData {
       dpc = docPartitionCategories;
     }
 
+    @Override
     public boolean init() throws IOException {
       return dpc!=null && dpc.length>part;
     }
 
+    @Override
     public long nextCategory() throws IOException {
       if (nextCategoryIndex >= dpc[currDoc][part].length) {
         return 1L+Integer.MAX_VALUE;
@@ -123,6 +125,7 @@ public class CategoryListData {
       return dpc[currDoc][part][nextCategoryIndex++]; 
     }
 
+    @Override
     public boolean skipTo(int docId) throws IOException {
       final boolean res = dpc.length>docId && dpc[docId]!=null && dpc[docId][part]!=null;
       if (res) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/search/results/MutableFacetResultNode.java b/lucene/facet/src/java/org/apache/lucene/facet/search/results/MutableFacetResultNode.java
index 3f508bb..75793d1 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/search/results/MutableFacetResultNode.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/search/results/MutableFacetResultNode.java
@@ -145,6 +145,7 @@ public class MutableFacetResultNode implements FacetResultNode {
    * org.apache.lucene.facet.search.results2.FacetResultNode#toString(java.lang.
    * String)
    */
+  @Override
   public String toString(String prefix) {
     StringBuilder sb = new StringBuilder(prefix);
     
@@ -171,10 +172,12 @@ public class MutableFacetResultNode implements FacetResultNode {
     return sb.toString();
   }
   
+  @Override
   public final int getOrdinal() {
     return ordinal;
   }
   
+  @Override
   public final CategoryPath getLabel() {
     return label;
   }
@@ -188,6 +191,7 @@ public class MutableFacetResultNode implements FacetResultNode {
     this.label = label;
   }
   
+  @Override
   public final double getValue() {
     return value;
   }
@@ -199,6 +203,7 @@ public class MutableFacetResultNode implements FacetResultNode {
    *          the value to set
    * @see #getValue()
    */
+  @Override
   public void setValue(double value) {
     this.value = value;
   }
@@ -212,6 +217,7 @@ public class MutableFacetResultNode implements FacetResultNode {
     this.value += addedValue;
   }
   
+  @Override
   public final double getResidue() {
     return residue;
   }
@@ -234,6 +240,7 @@ public class MutableFacetResultNode implements FacetResultNode {
     this.residue += addedResidue;
   }
   
+  @Override
   public final Iterable<? extends FacetResultNode> getSubResults() {
     return subResults != null ? subResults : EMPTY_SUB_RESULTS;
   }
@@ -308,6 +315,7 @@ public class MutableFacetResultNode implements FacetResultNode {
    * org.apache.lucene.facet.search.results.FacetResultNode#getLabel(org.apache.lucene
    * .facet.taxonomy.TaxonomyReader)
    */
+  @Override
   public final CategoryPath getLabel(TaxonomyReader taxonomyReader)
       throws IOException {
     if (label == null) {
@@ -321,6 +329,7 @@ public class MutableFacetResultNode implements FacetResultNode {
    * 
    * @see org.apache.lucene.facet.search.results.FacetResultNode#getNumSubResults()
    */
+  @Override
   public final int getNumSubResults() {
     return subResults == null ? 0 : subResults.size();
   }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer.java b/lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer.java
index 5a8106d..54d2193 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer.java
@@ -58,6 +58,7 @@ class TakmiSampleFixer implements SampleFixer {
     this.searchParams = searchParams;
   }
 
+  @Override
   public void fixResult(ScoredDocIDs origDocIds, FacetResult fres)
       throws IOException {
     FacetResultNode topRes = fres.getFacetResultNode();
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath.java b/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath.java
index db97dd8..09b7055 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath.java
@@ -1025,6 +1025,7 @@ public class CategoryPath implements Serializable, Cloneable, Comparable<Categor
    * CategoryPath lexicographically precedes, equals to, or lexicographically follows 
    * the other CategoryPath.
    */
+  @Override
   public int compareTo(CategoryPath other) {
     int minlength = (this.length() < other.length()) ? this.length() : other.length();
     int ch = 0;
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CharBlockArray.java b/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CharBlockArray.java
index f482c79..5aa67e8 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CharBlockArray.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CharBlockArray.java
@@ -78,10 +78,12 @@ class CharBlockArray implements Appendable, Serializable, CharSequence {
     return index % blockSize;
   }
 
+  @Override
   public CharBlockArray append(CharSequence chars) {
     return append(chars, 0, chars.length());
   }
 
+  @Override
   public CharBlockArray append(char c) {
     if (this.current.length == this.blockSize) {
       addBlock();
@@ -92,6 +94,7 @@ class CharBlockArray implements Appendable, Serializable, CharSequence {
     return this;
   }
 
+  @Override
   public CharBlockArray append(CharSequence chars, int start, int length) {
     int end = start + length;
     for (int i = start; i < end; i++) {
@@ -144,15 +147,18 @@ class CharBlockArray implements Appendable, Serializable, CharSequence {
     return this;
   }
 
+  @Override
   public char charAt(int index) {
     Block b = this.blocks.get(blockIndex(index));
     return b.chars[indexInBlock(index)];
   }
 
+  @Override
   public int length() {
     return this.length;
   }
 
+  @Override
   public CharSequence subSequence(int start, int end) {
     throw new UnsupportedOperationException("subsequence not implemented yet");
   }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CollisionMap.java b/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CollisionMap.java
index 7d40cf0..830abbc 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CollisionMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CollisionMap.java
@@ -239,10 +239,12 @@ public class CollisionMap {
       this.index = i;
     }
 
+    @Override
     public boolean hasNext() {
       return this.next != null;
     }
 
+    @Override
     public Entry next() { 
       Entry e = this.next;
       if (e == null) throw new NoSuchElementException();
@@ -258,6 +260,7 @@ public class CollisionMap {
       return  e;
     }
 
+    @Override
     public void remove() {
       throw new UnsupportedOperationException();
     }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/util/MultiCategoryListIterator.java b/lucene/facet/src/java/org/apache/lucene/facet/util/MultiCategoryListIterator.java
index cdea679..13fc778 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/util/MultiCategoryListIterator.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/util/MultiCategoryListIterator.java
@@ -43,6 +43,7 @@ public class MultiCategoryListIterator implements CategoryListIterator {
   }
 
   /** Fails if all given iterators fail to init */
+  @Override
   public boolean init() throws IOException {
     for (CategoryListIterator cli : iterators) {
       if (cli.init()) {
@@ -56,6 +57,7 @@ public class MultiCategoryListIterator implements CategoryListIterator {
    * Return a value larger than {@link Integer#MAX_VALUE} only if all
    * iterators are exhausted
    */
+  @Override
   public long nextCategory() throws IOException {
     while (!perDocValidIterators.isEmpty()) {
       long value = perDocValidIterators.get(0).nextCategory();
@@ -70,6 +72,7 @@ public class MultiCategoryListIterator implements CategoryListIterator {
   /**
    * Fails only if skipTo on all the provided iterators returned {@code false}
    */
+  @Override
   public boolean skipTo(int docId) throws IOException {
     perDocValidIterators.clear();
     for (CategoryListIterator cli : validIterators) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.java b/lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.java
index 49330e6..b9aebe5 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.java
@@ -144,14 +144,17 @@ public class ResultSortUtils {
       this.accending = accending;
     }
 
+    @Override
     public FacetResultNode insertWithOverflow(FacetResultNode node) {
       resultNodes.add(node);
       return null;
     }
 
+    @Override
     public FacetResultNode pop() {
       if (!isReady) {
         Collections.sort(resultNodes, new Comparator<FacetResultNode>() {
+          @Override
           public int compare(FacetResultNode o1, FacetResultNode o2) {
             int value = Double.compare(o1.getValue(), o2
                 .getValue());
@@ -170,10 +173,12 @@ public class ResultSortUtils {
       return resultNodes.remove(0);
     }
 
+    @Override
     public int size() {
       return resultNodes.size();
     }
 
+    @Override
     public FacetResultNode top() {
       if (resultNodes.size() > 0) {
         return resultNodes.get(0);
@@ -182,11 +187,13 @@ public class ResultSortUtils {
       return null;
     }
 
+    @Override
     public FacetResultNode add(FacetResultNode frn) {
       resultNodes.add(frn);
       return null;
     }
 
+    @Override
     public void clear() {
       resultNodes.clear();
     }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.java b/lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.java
index cd83769..248ec0d 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.java
@@ -118,6 +118,7 @@ public class ScoredDocIdsUtils {
 
     return new ScoredDocIDs() {
 
+      @Override
       public DocIdSet getDocIDs() {
         return new DocIdSet() {
 
@@ -155,19 +156,24 @@ public class ScoredDocIdsUtils {
         };
       }
 
+      @Override
       public ScoredDocIDsIterator iterator() {
         return new ScoredDocIDsIterator() {
 
           int next = -1;
 
+          @Override
           public boolean next() { return ++next < size; }
 
+          @Override
           public float getScore() { return scores[next]; }
 
+          @Override
           public int getDocID() { return docids[next]; }
         };
       }
 
+      @Override
       public int size() { return size; }
 
     };
@@ -191,11 +197,14 @@ public class ScoredDocIdsUtils {
   public static final ScoredDocIDs createScoredDocIds(final DocIdSet docIdSet, final int maxDoc) {
     return new ScoredDocIDs() {
       private int size = -1;
+      @Override
       public DocIdSet getDocIDs() { return docIdSet; }
 
+      @Override
       public ScoredDocIDsIterator iterator() throws IOException {
         final DocIdSetIterator docIterator = docIdSet.iterator();
         return new ScoredDocIDsIterator() {
+          @Override
           public boolean next() {
             try {
               return docIterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;
@@ -204,12 +213,15 @@ public class ScoredDocIdsUtils {
             }
           }
 
+          @Override
           public float getScore() { return DEFAULT_SCORE; }
 
+          @Override
           public int getDocID() { return docIterator.docID(); }
         };
       }
 
+      @Override
       public int size() {
         // lazy size computation
         if (size < 0) {
@@ -238,10 +250,12 @@ public class ScoredDocIdsUtils {
       this.maxDoc = reader.maxDoc();
     }
 
+    @Override
     public int size() {  
       return maxDoc;
     }
 
+    @Override
     public DocIdSet getDocIDs() {
       return new DocIdSet() {
 
@@ -279,10 +293,12 @@ public class ScoredDocIdsUtils {
       };
     }
 
+    @Override
     public ScoredDocIDsIterator iterator() {
       try {
         final DocIdSetIterator iter = getDocIDs().iterator();
         return new ScoredDocIDsIterator() {
+          @Override
           public boolean next() {
             try {
               return iter.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;
@@ -292,10 +308,12 @@ public class ScoredDocIdsUtils {
             }
           }
 
+          @Override
           public float getScore() {
             return DEFAULT_SCORE;
           }
 
+          @Override
           public int getDocID() {
             return iter.docID();
           }
@@ -324,10 +342,12 @@ public class ScoredDocIdsUtils {
       this.reader = reader;
     }
 
+    @Override
     public int size() {
       return reader.numDocs();
     }
 
+    @Override
     public DocIdSet getDocIDs() {
       return new DocIdSet() {
 
@@ -369,10 +389,12 @@ public class ScoredDocIdsUtils {
       };
     }
 
+    @Override
     public ScoredDocIDsIterator iterator() {
       try {
         final DocIdSetIterator iter = getDocIDs().iterator();
         return new ScoredDocIDsIterator() {
+          @Override
           public boolean next() {
             try {
               return iter.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;
@@ -382,10 +404,12 @@ public class ScoredDocIdsUtils {
             }
           }
 
+          @Override
           public float getScore() {
             return DEFAULT_SCORE;
           }
 
+          @Override
           public int getDocID() {
             return iter.docID();
           }
diff --git a/lucene/facet/src/java/org/apache/lucene/util/collections/ArrayHashMap.java b/lucene/facet/src/java/org/apache/lucene/util/collections/ArrayHashMap.java
index 57a9e5b..cce3808 100644
--- a/lucene/facet/src/java/org/apache/lucene/util/collections/ArrayHashMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/util/collections/ArrayHashMap.java
@@ -65,10 +65,12 @@ public class ArrayHashMap<K,V> implements Iterable<V> {
       }
     }
 
+    @Override
     public boolean hasNext() {
       return index != 0;
     }
 
+    @Override
     public int next() {
       // Save the last index visited
       lastIndex = index;
@@ -86,6 +88,7 @@ public class ArrayHashMap<K,V> implements Iterable<V> {
       return lastIndex;
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public void remove() {
       ArrayHashMap.this.remove((K) keys[lastIndex]);
@@ -99,15 +102,18 @@ public class ArrayHashMap<K,V> implements Iterable<V> {
 
     KeyIterator() { }
 
+    @Override
     public boolean hasNext() {
       return iterator.hasNext();
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public K next() {
       return (K) keys[iterator.next()];
     }
 
+    @Override
     public void remove() {
       iterator.remove();
     }
@@ -119,15 +125,18 @@ public class ArrayHashMap<K,V> implements Iterable<V> {
 
     ValueIterator() { }
 
+    @Override
     public boolean hasNext() {
       return iterator.hasNext();
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public V next() {
       return (V) values[iterator.next()];
     }
 
+    @Override
     public void remove() {
       iterator.remove();
     }
@@ -378,6 +387,7 @@ public class ArrayHashMap<K,V> implements Iterable<V> {
   }
 
   /** Returns an iterator on the mapped objects. */
+  @Override
   public Iterator<V> iterator() {
     return new ValueIterator();
   }
diff --git a/lucene/facet/src/java/org/apache/lucene/util/collections/FloatToObjectMap.java b/lucene/facet/src/java/org/apache/lucene/util/collections/FloatToObjectMap.java
index 9b321c1..c096fe4 100644
--- a/lucene/facet/src/java/org/apache/lucene/util/collections/FloatToObjectMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/util/collections/FloatToObjectMap.java
@@ -73,10 +73,12 @@ public class FloatToObjectMap<T> implements Iterable<T> {
       }
     }
 
+    @Override
     public boolean hasNext() {
       return (index != 0);
     }
 
+    @Override
     public int next() {
       // Save the last index visited
       lastIndex = index;
@@ -94,6 +96,7 @@ public class FloatToObjectMap<T> implements Iterable<T> {
       return lastIndex;
     }
 
+    @Override
     public void remove() {
       FloatToObjectMap.this.remove(keys[lastIndex]);
     }
@@ -108,14 +111,17 @@ public class FloatToObjectMap<T> implements Iterable<T> {
 
     KeyIterator() { }
 
+    @Override
     public boolean hasNext() {
       return iterator.hasNext();
     }
 
+    @Override
     public float next() {
       return keys[iterator.next()];
     }
 
+    @Override
     public void remove() {
       iterator.remove();
     }
@@ -130,15 +136,18 @@ public class FloatToObjectMap<T> implements Iterable<T> {
 
     ValueIterator() { }
 
+    @Override
     public boolean hasNext() {
       return iterator.hasNext();
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public T next() {
       return (T) values[iterator.next()];
     }
 
+    @Override
     public void remove() {
       iterator.remove();
     }
@@ -445,6 +454,7 @@ public class FloatToObjectMap<T> implements Iterable<T> {
   /**
    * Returns a new iterator for the mapped objects.
    */
+  @Override
   public Iterator<T> iterator() {
     return new ValueIterator();
   }
diff --git a/lucene/facet/src/java/org/apache/lucene/util/collections/IntHashSet.java b/lucene/facet/src/java/org/apache/lucene/util/collections/IntHashSet.java
index d2bf0bf..b9f383d 100644
--- a/lucene/facet/src/java/org/apache/lucene/util/collections/IntHashSet.java
+++ b/lucene/facet/src/java/org/apache/lucene/util/collections/IntHashSet.java
@@ -64,10 +64,12 @@ public class IntHashSet {
       }
     }
 
+    @Override
     public boolean hasNext() {
       return (index != 0);
     }
 
+    @Override
     public int next() {
       // Save the last index visited
       lastIndex = index;
@@ -85,6 +87,7 @@ public class IntHashSet {
       return lastIndex;
     }
 
+    @Override
     public void remove() {
       IntHashSet.this.remove(keys[lastIndex]);
     }
@@ -99,14 +102,17 @@ public class IntHashSet {
 
     KeyIterator() { }
     
+    @Override
     public boolean hasNext() {
       return iterator.hasNext();
     }
 
+    @Override
     public int next() {
       return keys[iterator.next()];
     }
 
+    @Override
     public void remove() {
       iterator.remove();
     }
diff --git a/lucene/facet/src/java/org/apache/lucene/util/collections/IntToDoubleMap.java b/lucene/facet/src/java/org/apache/lucene/util/collections/IntToDoubleMap.java
index ed4114b..c7b4064 100644
--- a/lucene/facet/src/java/org/apache/lucene/util/collections/IntToDoubleMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/util/collections/IntToDoubleMap.java
@@ -72,10 +72,12 @@ public class IntToDoubleMap {
       }
     }
 
+    @Override
     public boolean hasNext() {
       return (index != 0);
     }
 
+    @Override
     public int next() {
       // Save the last index visited
       lastIndex = index;
@@ -93,6 +95,7 @@ public class IntToDoubleMap {
       return lastIndex;
     }
 
+    @Override
     public void remove() {
       IntToDoubleMap.this.remove(keys[lastIndex]);
     }
@@ -107,14 +110,17 @@ public class IntToDoubleMap {
 
     KeyIterator() { }
     
+    @Override
     public boolean hasNext() {
       return iterator.hasNext();
     }
 
+    @Override
     public int next() {
       return keys[iterator.next()];
     }
 
+    @Override
     public void remove() {
       iterator.remove();
     }
@@ -129,14 +135,17 @@ public class IntToDoubleMap {
 
     ValueIterator() { }
     
+    @Override
     public boolean hasNext() {
       return iterator.hasNext();
     }
 
+    @Override
     public double next() {
       return values[iterator.next()];
     }
 
+    @Override
     public void remove() {
       iterator.remove();
     }
diff --git a/lucene/facet/src/java/org/apache/lucene/util/collections/IntToIntMap.java b/lucene/facet/src/java/org/apache/lucene/util/collections/IntToIntMap.java
index 265683c..76155a5 100644
--- a/lucene/facet/src/java/org/apache/lucene/util/collections/IntToIntMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/util/collections/IntToIntMap.java
@@ -71,10 +71,12 @@ public class IntToIntMap {
       }
     }
 
+    @Override
     public boolean hasNext() {
       return (index != 0);
     }
 
+    @Override
     public int next() {
       // Save the last index visited
       lastIndex = index;
@@ -92,6 +94,7 @@ public class IntToIntMap {
       return lastIndex;
     }
 
+    @Override
     public void remove() {
       IntToIntMap.this.remove(keys[lastIndex]);
     }
@@ -106,14 +109,17 @@ public class IntToIntMap {
 
     KeyIterator() { }
     
+    @Override
     public boolean hasNext() {
       return iterator.hasNext();
     }
 
+    @Override
     public int next() {
       return keys[iterator.next()];
     }
 
+    @Override
     public void remove() {
       iterator.remove();
     }
@@ -127,14 +133,17 @@ public class IntToIntMap {
 
     ValueIterator() { }
     
+    @Override
     public boolean hasNext() {
       return iterator.hasNext();
     }
 
+    @Override
     public int next() {
       return values[iterator.next()];
     }
 
+    @Override
     public void remove() {
       iterator.remove();
     }
diff --git a/lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap.java b/lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap.java
index 2acfaec..42d429b 100644
--- a/lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap.java
@@ -72,10 +72,12 @@ public class IntToObjectMap<T> implements Iterable<T> {
       }
     }
 
+    @Override
     public boolean hasNext() {
       return (index != 0);
     }
 
+    @Override
     public int next() {
       // Save the last index visited
       lastIndex = index;
@@ -93,6 +95,7 @@ public class IntToObjectMap<T> implements Iterable<T> {
       return lastIndex;
     }
 
+    @Override
     public void remove() {
       IntToObjectMap.this.remove(keys[lastIndex]);
     }
@@ -107,14 +110,17 @@ public class IntToObjectMap<T> implements Iterable<T> {
 
     KeyIterator() { }
     
+    @Override
     public boolean hasNext() {
       return iterator.hasNext();
     }
 
+    @Override
     public int next() {
       return keys[iterator.next()];
     }
 
+    @Override
     public void remove() {
       iterator.remove();
     }
@@ -129,15 +135,18 @@ public class IntToObjectMap<T> implements Iterable<T> {
 
     ValueIterator() { }
     
+    @Override
     public boolean hasNext() {
       return iterator.hasNext();
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public T next() {
       return (T) values[iterator.next()];
     }
 
+    @Override
     public void remove() {
       iterator.remove();
     }
@@ -445,6 +454,7 @@ public class IntToObjectMap<T> implements Iterable<T> {
   /**
    * Returns a new iterator for the mapped objects.
    */
+  @Override
   public Iterator<T> iterator() {
     return new ValueIterator();
   }
diff --git a/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap.java b/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap.java
index bc80575..602c26e 100644
--- a/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap.java
@@ -72,10 +72,12 @@ public class ObjectToFloatMap<K> {
       }
     }
 
+    @Override
     public boolean hasNext() {
       return (index != 0);
     }
 
+    @Override
     public int next() {
       // Save the last index visited
       lastIndex = index;
@@ -93,6 +95,7 @@ public class ObjectToFloatMap<K> {
       return lastIndex;
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public void remove() {
       ObjectToFloatMap.this.remove((K) keys[lastIndex]);
@@ -108,15 +111,18 @@ public class ObjectToFloatMap<K> {
 
     KeyIterator() { }
     
+    @Override
     public boolean hasNext() {
       return iterator.hasNext();
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public K next() {
       return (K) keys[iterator.next()];
     }
 
+    @Override
     public void remove() {
       iterator.remove();
     }
@@ -131,14 +137,17 @@ public class ObjectToFloatMap<K> {
 
     ValueIterator() { }
     
+    @Override
     public boolean hasNext() {
       return iterator.hasNext();
     }
 
+    @Override
     public float next() {
       return values[iterator.next()];
     }
 
+    @Override
     public void remove() {
       iterator.remove();
     }
diff --git a/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.java b/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.java
index be927e4..673f347 100644
--- a/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.java
@@ -72,10 +72,12 @@ public class ObjectToIntMap<K> {
       }
     }
 
+    @Override
     public boolean hasNext() {
       return (index != 0);
     }
 
+    @Override
     public int next() {
       // Save the last index visited
       lastIndex = index;
@@ -93,6 +95,7 @@ public class ObjectToIntMap<K> {
       return lastIndex;
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public void remove() {
       ObjectToIntMap.this.remove((K) keys[lastIndex]);
@@ -108,15 +111,18 @@ public class ObjectToIntMap<K> {
 
     KeyIterator() { }
     
+    @Override
     public boolean hasNext() {
       return iterator.hasNext();
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public K next() {
       return (K) keys[iterator.next()];
     }
 
+    @Override
     public void remove() {
       iterator.remove();
     }
@@ -131,14 +137,17 @@ public class ObjectToIntMap<K> {
 
     ValueIterator() {}
     
+    @Override
     public boolean hasNext() {
       return iterator.hasNext();
     }
 
+    @Override
     public int next() {
       return values[iterator.next()];
     }
 
+    @Override
     public void remove() {
       iterator.remove();
     }
diff --git a/lucene/facet/src/test/org/apache/lucene/facet/enhancements/CategoryEnhancementDummy1.java b/lucene/facet/src/test/org/apache/lucene/facet/enhancements/CategoryEnhancementDummy1.java
index 4261627..fc15e46 100644
--- a/lucene/facet/src/test/org/apache/lucene/facet/enhancements/CategoryEnhancementDummy1.java
+++ b/lucene/facet/src/test/org/apache/lucene/facet/enhancements/CategoryEnhancementDummy1.java
@@ -28,28 +28,34 @@ import org.apache.lucene.facet.taxonomy.TaxonomyWriter;
 
 public class CategoryEnhancementDummy1 implements CategoryEnhancement {
 
+  @Override
   public boolean generatesCategoryList() {
     return false;
   }
 
+  @Override
   public String getCategoryListTermText() {
     return null;
   }
 
+  @Override
   public CategoryListTokenizer getCategoryListTokenizer(
       TokenStream tokenizer, EnhancementsIndexingParams indexingParams,
       TaxonomyWriter taxonomyWriter) {
     return null;
   }
 
+  @Override
   public byte[] getCategoryTokenBytes(CategoryAttribute categoryAttribute) {
     return null;
   }
 
+  @Override
   public Object extractCategoryTokenData(byte[] buffer, int offset, int length) {
     return null;
   }
 
+  @Override
   public Class<? extends CategoryProperty> getRetainableProperty() {
     return null;
   }
diff --git a/lucene/facet/src/test/org/apache/lucene/facet/enhancements/CategoryEnhancementDummy2.java b/lucene/facet/src/test/org/apache/lucene/facet/enhancements/CategoryEnhancementDummy2.java
index 28349be..0bd454c 100644
--- a/lucene/facet/src/test/org/apache/lucene/facet/enhancements/CategoryEnhancementDummy2.java
+++ b/lucene/facet/src/test/org/apache/lucene/facet/enhancements/CategoryEnhancementDummy2.java
@@ -31,24 +31,29 @@ public class CategoryEnhancementDummy2 implements CategoryEnhancement {
 
   public static byte[] CATEGORY_TOKEN_BYTES = new byte[] { 3, 0, 7 };
 
+  @Override
   public boolean generatesCategoryList() {
     return false;
   }
 
+  @Override
   public String getCategoryListTermText() {
     return null;
   }
 
+  @Override
   public CategoryListTokenizer getCategoryListTokenizer(
       TokenStream tokenizer, EnhancementsIndexingParams indexingParams,
       TaxonomyWriter taxonomyWriter) {
     return null;
   }
 
+  @Override
   public byte[] getCategoryTokenBytes(CategoryAttribute categoryAttribute) {
     return CATEGORY_TOKEN_BYTES;
   }
 
+  @Override
   public Object extractCategoryTokenData(byte[] buffer, int offset, int length) {
     if (length != CATEGORY_TOKEN_BYTES.length) {
       throw new IllegalArgumentException("unexpected data length "
@@ -59,6 +64,7 @@ public class CategoryEnhancementDummy2 implements CategoryEnhancement {
     return ret;
   }
 
+  @Override
   public Class<? extends CategoryProperty> getRetainableProperty() {
     return DummyProperty.class;
   }
diff --git a/lucene/facet/src/test/org/apache/lucene/facet/enhancements/CategoryEnhancementDummy3.java b/lucene/facet/src/test/org/apache/lucene/facet/enhancements/CategoryEnhancementDummy3.java
index c19a283..b525252 100644
--- a/lucene/facet/src/test/org/apache/lucene/facet/enhancements/CategoryEnhancementDummy3.java
+++ b/lucene/facet/src/test/org/apache/lucene/facet/enhancements/CategoryEnhancementDummy3.java
@@ -30,24 +30,29 @@ public class CategoryEnhancementDummy3 implements CategoryEnhancement {
 
   public static byte[] CATEGORY_TOKEN_BYTES = new byte[] { 5, -1, 33, 8 };
 
+  @Override
   public boolean generatesCategoryList() {
     return false;
   }
 
+  @Override
   public String getCategoryListTermText() {
     return null;
   }
 
+  @Override
   public CategoryListTokenizer getCategoryListTokenizer(
       TokenStream tokenizer, EnhancementsIndexingParams indexingParams,
       TaxonomyWriter taxonomyWriter) {
     return null;
   }
 
+  @Override
   public byte[] getCategoryTokenBytes(CategoryAttribute categoryAttribute) {
     return CATEGORY_TOKEN_BYTES;
   }
 
+  @Override
   public Object extractCategoryTokenData(byte[] buffer, int offset, int length) {
     if (length != CATEGORY_TOKEN_BYTES.length) {
       throw new IllegalArgumentException("unexpected data length "
@@ -58,6 +63,7 @@ public class CategoryEnhancementDummy3 implements CategoryEnhancement {
     return ret;
   }
 
+  @Override
   public Class<? extends CategoryProperty> getRetainableProperty() {
     return null;
   }
diff --git a/lucene/facet/src/test/org/apache/lucene/facet/index/DummyProperty.java b/lucene/facet/src/test/org/apache/lucene/facet/index/DummyProperty.java
index fd2ab7a..b04ced2 100644
--- a/lucene/facet/src/test/org/apache/lucene/facet/index/DummyProperty.java
+++ b/lucene/facet/src/test/org/apache/lucene/facet/index/DummyProperty.java
@@ -37,6 +37,7 @@ public class DummyProperty implements CategoryProperty {
     return super.hashCode();
   }
   
+  @Override
   public void merge(CategoryProperty other) {
     throw new UnsupportedOperationException(
         "Merging dummy attribute is prohibited");
diff --git a/lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache.java b/lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache.java
index 1ba5473..ce28454 100644
--- a/lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache.java
+++ b/lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache.java
@@ -110,9 +110,11 @@ public class TestCategoryListCache extends FacetTestBase {
       public CategoryListIterator iterator(int partition)  throws IOException {
         final CategoryListIterator it = cld.iterator(partition);
         return new CategoryListIterator() {              
+          @Override
           public boolean skipTo(int docId) throws IOException {
             return it.skipTo(docId);
           }
+          @Override
           public long nextCategory() throws IOException {
             long res = it.nextCategory();
             if (res>Integer.MAX_VALUE) {
@@ -120,6 +122,7 @@ public class TestCategoryListCache extends FacetTestBase {
             }
             return res>1 ? res-1 : res+1;
           }
+          @Override
           public boolean init() throws IOException {
             return it.init();
           }
diff --git a/lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath.java b/lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath.java
index b796879..44a3ed2 100644
--- a/lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath.java
+++ b/lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath.java
@@ -886,12 +886,15 @@ public class TestCategoryPath extends LuceneTestCase {
       this.ca = new char[s.length()];
       s.getChars(0, s.length(), this.ca, 0);
     }
+    @Override
     public char charAt(int index) {
       return this.ca[index];
     }
+    @Override
     public int length() {
       return this.ca.length;
     }
+    @Override
     public CharSequence subSequence(int start, int end) {
       return null; // not used.
     }
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector.java
index 8e54fae..1661461 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector.java
@@ -99,6 +99,7 @@ public abstract class AbstractAllGroupHeadsCollector<GH extends AbstractAllGroup
    */
   protected abstract Collection<GH> getCollectedGroupHeads();
 
+  @Override
   public void collect(int doc) throws IOException {
     retrieveGroupHeadAndAddIfNotExist(doc);
     if (temporalResult.stop) {
@@ -125,6 +126,7 @@ public abstract class AbstractAllGroupHeadsCollector<GH extends AbstractAllGroup
     groupHead.updateDocHead(doc);
   }
 
+  @Override
   public boolean acceptsDocsOutOfOrder() {
     return true;
   }
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractAllGroupsCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractAllGroupsCollector.java
index b8ac5f8..3cd9164 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractAllGroupsCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractAllGroupsCollector.java
@@ -59,8 +59,10 @@ public abstract class AbstractAllGroupsCollector<GROUP_VALUE_TYPE> extends Colle
   public abstract Collection<GROUP_VALUE_TYPE> getGroups();
 
   // Empty not necessary
+  @Override
   public void setScorer(Scorer scorer) throws IOException {}
 
+  @Override
   public boolean acceptsDocsOutOfOrder() {
     return true;
   }
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractDistinctValuesCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractDistinctValuesCollector.java
index 419189b..c1644d8 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractDistinctValuesCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractDistinctValuesCollector.java
@@ -37,10 +37,12 @@ public abstract class AbstractDistinctValuesCollector<GC extends AbstractDistinc
    */
   public abstract List<GC> getGroups();
 
+  @Override
   public boolean acceptsDocsOutOfOrder() {
     return true;
   }
 
+  @Override
   public void setScorer(Scorer scorer) throws IOException {
   }
 
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector.java
index f4fc51b..f25b504 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector.java
@@ -297,6 +297,7 @@ abstract public class AbstractFirstPassGroupingCollector<GROUP_VALUE_TYPE> exten
 
   private void buildSortedSet() {
     final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {
+      @Override
       public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {
         for (int compIDX = 0;; compIDX++) {
           FieldComparator<?> fc = comparators[compIDX];
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractGroupFacetCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractGroupFacetCollector.java
index 0a6526f..e7e4c0e 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractGroupFacetCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractGroupFacetCollector.java
@@ -104,9 +104,11 @@ public abstract class AbstractGroupFacetCollector extends Collector {
 
   protected abstract SegmentResult createSegmentResult() throws IOException;
 
+  @Override
   public void setScorer(Scorer scorer) throws IOException {
   }
 
+  @Override
   public boolean acceptsDocsOutOfOrder() {
     return true;
   }
@@ -118,6 +120,7 @@ public abstract class AbstractGroupFacetCollector extends Collector {
 
     private final static Comparator<FacetEntry> orderByCountAndValue = new Comparator<FacetEntry>() {
 
+      @Override
       public int compare(FacetEntry a, FacetEntry b) {
         int cmp = b.count - a.count; // Highest count first!
         if (cmp != 0) {
@@ -130,6 +133,7 @@ public abstract class AbstractGroupFacetCollector extends Collector {
 
     private final static Comparator<FacetEntry> orderByValue = new Comparator<FacetEntry>() {
 
+      @Override
       public int compare(FacetEntry a, FacetEntry b) {
         return a.value.compareTo(b.value);
       }
@@ -307,6 +311,7 @@ public abstract class AbstractGroupFacetCollector extends Collector {
       super(maxSize);
     }
 
+    @Override
     protected boolean lessThan(SegmentResult a, SegmentResult b) {
       return a.mergeTerm.compareTo(b.mergeTerm) < 0;
     }
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.java
index eb4d372..0740aed 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.java
@@ -167,6 +167,7 @@ public class SearchGroup<GROUP_VALUE_TYPE> {
       }
     }
 
+    @Override
     @SuppressWarnings({"unchecked","rawtypes"})
     public int compare(MergedGroup<T> group, MergedGroup<T> other) {
       if (group == other) {
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.java
index 7bce552..ebde420 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.java
@@ -114,10 +114,12 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
       this.scorer = scorer;
     }
 
+    @Override
     public int compare(int compIDX, int doc) throws IOException {
       return comparators[compIDX].compareBottom(doc);
     }
 
+    @Override
     public void updateDocHead(int doc) throws IOException {
       for (FieldComparator<?> comparator : comparators) {
         comparator.copy(0, doc);
@@ -173,6 +175,7 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
       }
     }
 
+    @Override
     protected void retrieveGroupHeadAndAddIfNotExist(int doc) throws IOException {
       final Comparable<?> groupValue = getGroupValue(doc);
       GroupHead groupHead = groups.get(groupValue);
@@ -190,10 +193,12 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
 
     protected abstract Comparable<?> duplicate(Comparable<?> value);
 
+    @Override
     protected Collection<GroupHead> getCollectedGroupHeads() {
       return groups.values();
     }
 
+    @Override
     public void setNextReader(AtomicReaderContext context) throws IOException {
       super.setNextReader(context);
       for (GroupHead groupHead : groups.values()) {
@@ -204,6 +209,7 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
       }
     }
 
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       this.scorer = scorer;
       for (GroupHead groupHead : groups.values()) {
@@ -222,14 +228,17 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
         super(groupField, valueType, sortWithinGroup, diskResident);
       }
 
+      @Override
       protected Comparable<?> getGroupValue(int doc) {
         return source.getBytes(doc, scratchBytesRef);
       }
 
+      @Override
       protected Comparable<?> duplicate(Comparable<?> value) {
         return BytesRef.deepCopyOf((BytesRef) value);
       }
 
+      @Override
       protected void setDocValuesSources(DocValues.Source source) {
         this.source = source.asSortedSource();
       }
@@ -248,14 +257,17 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
         super(groupField, valueType, sortWithinGroup, diskResident);
       }
 
+      @Override
       protected Comparable<?> getGroupValue(int doc) {
         return source.getBytes(doc, scratchBytesRef);
       }
 
+      @Override
       protected Comparable<?> duplicate(Comparable<?> value) {
         return BytesRef.deepCopyOf((BytesRef) value);
       }
 
+      @Override
       protected void setDocValuesSources(DocValues.Source source) {
         this.source = source;
       }
@@ -270,14 +282,17 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
         super(groupField, valueType, sortWithinGroup, diskResident);
       }
 
+      @Override
       protected Comparable<?> getGroupValue(int doc) {
         return source.getInt(doc);
       }
 
+      @Override
       protected Comparable<?> duplicate(Comparable<?> value) {
         return value;
       }
 
+      @Override
       protected void setDocValuesSources(DocValues.Source source) {
         this.source = source;
       }
@@ -291,14 +306,17 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
         super(groupField, valueType, sortWithinGroup, diskResident);
       }
 
+      @Override
       protected Comparable<?> getGroupValue(int doc) {
         return source.getFloat(doc);
       }
 
+      @Override
       protected Comparable<?> duplicate(Comparable<?> value) {
         return value;
       }
 
+      @Override
       protected void setDocValuesSources(DocValues.Source source) {
         this.source = source;
       }
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector.java
index b2537c6..6ef238a 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector.java
@@ -144,6 +144,7 @@ public abstract class DVAllGroupsCollector<GROUP_VALUE_TYPE> extends AbstractAll
       super(groupField, valueType, diskResident, new TreeSet<Long>());
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       long value = source.getInt(doc);
       if (!groups.contains(value)) {
@@ -151,10 +152,12 @@ public abstract class DVAllGroupsCollector<GROUP_VALUE_TYPE> extends AbstractAll
       }
     }
 
+    @Override
     public Collection<Long> getGroups() {
       return groups;
     }
 
+    @Override
     protected void setDocValuesSources(DocValues.Source source, AtomicReaderContext readerContext) {
       this.source = source;
     }
@@ -169,6 +172,7 @@ public abstract class DVAllGroupsCollector<GROUP_VALUE_TYPE> extends AbstractAll
       super(groupField, valueType, diskResident, new TreeSet<Double>());
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       double value = source.getFloat(doc);
       if (!groups.contains(value)) {
@@ -176,10 +180,12 @@ public abstract class DVAllGroupsCollector<GROUP_VALUE_TYPE> extends AbstractAll
       }
     }
 
+    @Override
     public Collection<Double> getGroups() {
       return groups;
     }
 
+    @Override
     protected void setDocValuesSources(DocValues.Source source, AtomicReaderContext readerContext) {
       this.source = source;
     }
@@ -196,6 +202,7 @@ public abstract class DVAllGroupsCollector<GROUP_VALUE_TYPE> extends AbstractAll
       super(groupField, valueType, diskResident, new TreeSet<BytesRef>());
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       BytesRef value = source.getBytes(doc, spare);
       if (!groups.contains(value)) {
@@ -203,10 +210,12 @@ public abstract class DVAllGroupsCollector<GROUP_VALUE_TYPE> extends AbstractAll
       }
     }
 
+    @Override
     public Collection<BytesRef> getGroups() {
       return groups;
     }
 
+    @Override
     protected void setDocValuesSources(DocValues.Source source, AtomicReaderContext readerContext) {
       this.source = source;
     }
@@ -225,6 +234,7 @@ public abstract class DVAllGroupsCollector<GROUP_VALUE_TYPE> extends AbstractAll
       ordSet = new SentinelIntSet(initialSize, -1);
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       int ord = source.ord(doc);
       if (!ordSet.exists(ord)) {
@@ -234,10 +244,12 @@ public abstract class DVAllGroupsCollector<GROUP_VALUE_TYPE> extends AbstractAll
       }
     }
 
+    @Override
     public Collection<BytesRef> getGroups() {
       return groups;
     }
 
+    @Override
     protected void setDocValuesSources(DocValues.Source source, AtomicReaderContext readerContext) {
       this.source = source.asSortedSource();
 
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVDistinctValuesCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVDistinctValuesCollector.java
index 245901e..abfc918 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVDistinctValuesCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVDistinctValuesCollector.java
@@ -99,10 +99,12 @@ public abstract class DVDistinctValuesCollector<GC extends AbstractDistinctValue
       super(groupField, countField, diskResident, valueType);
     }
 
+    @Override
     public List<GroupCount> getGroups() {
       return new ArrayList<GroupCount>(groupMap.values());
     }
 
+    @Override
     public void setNextReader(AtomicReaderContext context) throws IOException {
       groupFieldSource = retrieveSource(groupField, context);
       countFieldSource = retrieveSource(countField, context);
@@ -126,6 +128,7 @@ public abstract class DVDistinctValuesCollector<GC extends AbstractDistinctValue
         }
       }
 
+      @Override
       public void collect(int doc) throws IOException {
         GroupCount groupCount = groupMap.get(groupFieldSource.getFloat(doc));
         if (groupCount != null) {
@@ -144,6 +147,7 @@ public abstract class DVDistinctValuesCollector<GC extends AbstractDistinctValue
         }
       }
 
+      @Override
       public void collect(int doc) throws IOException {
         GroupCount groupCount = groupMap.get(groupFieldSource.getInt(doc));
         if (groupCount != null) {
@@ -164,6 +168,7 @@ public abstract class DVDistinctValuesCollector<GC extends AbstractDistinctValue
         }
       }
 
+      @Override
       public void collect(int doc) throws IOException {
         GroupCount groupCount = groupMap.get(groupFieldSource.getBytes(doc, spare));
         if (groupCount != null) {
@@ -202,10 +207,12 @@ public abstract class DVDistinctValuesCollector<GC extends AbstractDistinctValue
       groupCounts = new GroupCount[ordSet.keys.length];
     }
 
+    @Override
     public List<GroupCount> getGroups() {
       return groups;
     }
 
+    @Override
     public void setNextReader(AtomicReaderContext context) throws IOException {
       groupFieldSource = retrieveSortedSource(groupField, context);
       countFieldSource = retrieveSortedSource(countField, context);
@@ -232,6 +239,7 @@ public abstract class DVDistinctValuesCollector<GC extends AbstractDistinctValue
         }
       }
 
+      @Override
       public void collect(int doc) throws IOException {
         int slot = ordSet.find(groupFieldSource.ord(doc));
         if (slot < 0) {
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVFirstPassGroupingCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVFirstPassGroupingCollector.java
index a7995be..ae9ae14 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVFirstPassGroupingCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVFirstPassGroupingCollector.java
@@ -123,14 +123,17 @@ public abstract class DVFirstPassGroupingCollector<GROUP_VALUE_TYPE> extends Abs
       super(groupSort, topNGroups, groupField, diskResident, type);
     }
 
+    @Override
     protected Long getDocGroupValue(int doc) {
       return source.getInt(doc);
     }
 
+    @Override
     protected Long copyDocGroupValue(Long groupValue, Long reuse) {
       return groupValue;
     }
 
+    @Override
     protected void setDocValuesSources(DocValues.Source source) {
       this.source = source;
     }
@@ -144,14 +147,17 @@ public abstract class DVFirstPassGroupingCollector<GROUP_VALUE_TYPE> extends Abs
       super(groupSort, topNGroups, groupField, diskResident, type);
     }
 
+    @Override
     protected Double getDocGroupValue(int doc) {
       return source.getFloat(doc);
     }
 
+    @Override
     protected Double copyDocGroupValue(Double groupValue, Double reuse) {
       return groupValue;
     }
 
+    @Override
     protected void setDocValuesSources(DocValues.Source source) {
       this.source = source;
     }
@@ -166,10 +172,12 @@ public abstract class DVFirstPassGroupingCollector<GROUP_VALUE_TYPE> extends Abs
       super(groupSort, topNGroups, groupField, diskResident, type);
     }
 
+    @Override
     protected BytesRef getDocGroupValue(int doc) {
       return source.getBytes(doc, spare);
     }
 
+    @Override
     protected BytesRef copyDocGroupValue(BytesRef groupValue, BytesRef reuse) {
       if (reuse != null) {
         reuse.copyBytes(groupValue);
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.java
index 746c018..86291a7 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.java
@@ -152,6 +152,7 @@ public abstract class DVGroupFacetCollector extends AbstractGroupFacetCollector
         super(groupField, groupDvType, groupDiskResident, facetField, facetDvType, diskResident, facetPrefix, initialSize);
       }
 
+      @Override
       public void collect(int doc) throws IOException {
         int facetOrd = facetFieldSource.ord(doc);
         if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {
@@ -176,6 +177,7 @@ public abstract class DVGroupFacetCollector extends AbstractGroupFacetCollector
         );
       }
 
+      @Override
       public void setNextReader(AtomicReaderContext context) throws IOException {
         if (segmentFacetCounts != null) {
           segmentResults.add(createSegmentResult());
@@ -218,6 +220,7 @@ public abstract class DVGroupFacetCollector extends AbstractGroupFacetCollector
         }
       }
 
+      @Override
       protected SegmentResult createSegmentResult() throws IOException {
         if (startFacetOrd == 0 && facetFieldSource.getByOrd(startFacetOrd, facetSpare).length == 0) {
           int missing = segmentFacetCounts[0];
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVSecondPassGroupingCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVSecondPassGroupingCollector.java
index dcfd78c..fd0cf9f 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVSecondPassGroupingCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVSecondPassGroupingCollector.java
@@ -141,10 +141,12 @@ public abstract class DVSecondPassGroupingCollector<GROUP_VALUE> extends Abstrac
       super(groupField, valueType, diskResident, searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);
     }
 
+    @Override
     protected SearchGroupDocs<Long> retrieveGroup(int doc) throws IOException {
       return groupMap.get(source.getInt(doc));
     }
 
+    @Override
     protected void setDocValuesSources(DocValues.Source source, AtomicReaderContext readerContext) {
       this.source = source;
     }
@@ -158,10 +160,12 @@ public abstract class DVSecondPassGroupingCollector<GROUP_VALUE> extends Abstrac
       super(groupField, valueType, diskResident, searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);
     }
 
+    @Override
     protected SearchGroupDocs<Double> retrieveGroup(int doc) throws IOException {
       return groupMap.get(source.getFloat(doc));
     }
 
+    @Override
     protected void setDocValuesSources(DocValues.Source source, AtomicReaderContext readerContext) {
       this.source = source;
     }
@@ -176,6 +180,7 @@ public abstract class DVSecondPassGroupingCollector<GROUP_VALUE> extends Abstrac
       super(groupField, valueType, diskResident, searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);
     }
 
+    @Override
     protected SearchGroupDocs<BytesRef> retrieveGroup(int doc) throws IOException {
       return groupMap.get(source.getBytes(doc, spare));
     }
@@ -200,6 +205,7 @@ public abstract class DVSecondPassGroupingCollector<GROUP_VALUE> extends Abstrac
       groupDocs = (SearchGroupDocs<BytesRef>[]) new SearchGroupDocs[ordSet.keys.length];
     }
 
+    @Override
     protected SearchGroupDocs<BytesRef> retrieveGroup(int doc) throws IOException {
       int slot = ordSet.find(source.ord(doc));
       if (slot >= 0) {
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.java
index 614659e..f96cb9d 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.java
@@ -134,10 +134,12 @@ public class FunctionAllGroupHeadsCollector extends AbstractAllGroupHeadsCollect
       }
     }
 
+    @Override
     public int compare(int compIDX, int doc) throws IOException {
       return comparators[compIDX].compareBottom(doc);
     }
 
+    @Override
     public void updateDocHead(int doc) throws IOException {
       for (FieldComparator<?> comparator : comparators) {
         comparator.copy(0, doc);
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector.java
index d7f9168..f477e11 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector.java
@@ -54,10 +54,12 @@ public class FunctionDistinctValuesCollector extends AbstractDistinctValuesColle
     }
   }
 
+  @Override
   public List<GroupCount> getGroups() {
     return new ArrayList<GroupCount>(groupMap.values());
   }
 
+  @Override
   public void collect(int doc) throws IOException {
     groupFiller.fillValue(doc);
     GroupCount groupCount = groupMap.get(groupMval);
@@ -67,6 +69,7 @@ public class FunctionDistinctValuesCollector extends AbstractDistinctValuesColle
     }
   }
 
+  @Override
   public void setNextReader(AtomicReaderContext context) throws IOException {
     FunctionValues values = groupSource.getValues(vsContext, context);
     groupFiller = values.getValueFiller();
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.java
index dd7dc30..8ec5544 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.java
@@ -122,6 +122,7 @@ public abstract class TermAllGroupHeadsCollector<GH extends AbstractAllGroupHead
       }
     }
 
+    @Override
     protected void retrieveGroupHeadAndAddIfNotExist(int doc) throws IOException {
       final int ord = groupIndex.getOrd(doc);
       final BytesRef groupValue = ord == 0 ? null : groupIndex.lookup(ord, scratchBytesRef);
@@ -136,10 +137,12 @@ public abstract class TermAllGroupHeadsCollector<GH extends AbstractAllGroupHead
       temporalResult.groupHead = groupHead;
     }
 
+    @Override
     protected Collection<GroupHead> getCollectedGroupHeads() {
       return groups.values();
     }
 
+    @Override
     public void setNextReader(AtomicReaderContext context) throws IOException {
       this.readerContext = context;
       groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);
@@ -151,6 +154,7 @@ public abstract class TermAllGroupHeadsCollector<GH extends AbstractAllGroupHead
       }
     }
 
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       this.scorer = scorer;
       for (GroupHead groupHead : groups.values()) {
@@ -177,10 +181,12 @@ public abstract class TermAllGroupHeadsCollector<GH extends AbstractAllGroupHead
         }
       }
 
+      @Override
       public int compare(int compIDX, int doc) throws IOException {
         return comparators[compIDX].compareBottom(doc);
       }
 
+      @Override
       public void updateDocHead(int doc) throws IOException {
         for (FieldComparator<?> comparator : comparators) {
           comparator.copy(0, doc);
@@ -217,14 +223,17 @@ public abstract class TermAllGroupHeadsCollector<GH extends AbstractAllGroupHead
       }
     }
 
+    @Override
     protected Collection<GroupHead> getCollectedGroupHeads() {
       return collectedGroups;
     }
 
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       this.scorer = scorer;
     }
 
+    @Override
     protected void retrieveGroupHeadAndAddIfNotExist(int doc) throws IOException {
       int key = groupIndex.getOrd(doc);
       GroupHead groupHead;
@@ -242,6 +251,7 @@ public abstract class TermAllGroupHeadsCollector<GH extends AbstractAllGroupHead
       temporalResult.groupHead = groupHead;
     }
 
+    @Override
     public void setNextReader(AtomicReaderContext context) throws IOException {
       this.readerContext = context;
       groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);
@@ -295,6 +305,7 @@ public abstract class TermAllGroupHeadsCollector<GH extends AbstractAllGroupHead
 
       }
 
+      @Override
       public int compare(int compIDX, int doc) throws IOException {
         if (fields[compIDX].getType() == SortField.Type.SCORE) {
           float score = scorer.score();
@@ -314,6 +325,7 @@ public abstract class TermAllGroupHeadsCollector<GH extends AbstractAllGroupHead
         }
       }
 
+      @Override
       public void updateDocHead(int doc) throws IOException {
         for (int i = 0; i < sortsIndex.length; i++) {
           if (fields[i].getType() == SortField.Type.SCORE) {
@@ -355,13 +367,16 @@ public abstract class TermAllGroupHeadsCollector<GH extends AbstractAllGroupHead
       }
     }
 
+    @Override
     protected Collection<GroupHead> getCollectedGroupHeads() {
       return collectedGroups;
     }
 
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
     }
 
+    @Override
     protected void retrieveGroupHeadAndAddIfNotExist(int doc) throws IOException {
       int key = groupIndex.getOrd(doc);
       GroupHead groupHead;
@@ -379,6 +394,7 @@ public abstract class TermAllGroupHeadsCollector<GH extends AbstractAllGroupHead
       temporalResult.groupHead = groupHead;
     }
 
+    @Override
     public void setNextReader(AtomicReaderContext context) throws IOException {
       this.readerContext = context;
       groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);
@@ -417,6 +433,7 @@ public abstract class TermAllGroupHeadsCollector<GH extends AbstractAllGroupHead
         }
       }
 
+      @Override
       public int compare(int compIDX, int doc) throws IOException {
         if (sortOrds[compIDX] < 0) {
           // The current segment doesn't contain the sort value we encountered before. Therefore the ord is negative.
@@ -426,6 +443,7 @@ public abstract class TermAllGroupHeadsCollector<GH extends AbstractAllGroupHead
         }
       }
 
+      @Override
       public void updateDocHead(int doc) throws IOException {
         for (int i = 0; i < sortsIndex.length; i++) {
           sortValues[i] = sortsIndex[i].getTerm(doc, sortValues[i]);
@@ -462,14 +480,17 @@ public abstract class TermAllGroupHeadsCollector<GH extends AbstractAllGroupHead
       }
     }
 
+    @Override
     protected Collection<GroupHead> getCollectedGroupHeads() {
       return collectedGroups;
     }
 
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       this.scorer = scorer;
     }
 
+    @Override
     protected void retrieveGroupHeadAndAddIfNotExist(int doc) throws IOException {
       int key = groupIndex.getOrd(doc);
       GroupHead groupHead;
@@ -487,6 +508,7 @@ public abstract class TermAllGroupHeadsCollector<GH extends AbstractAllGroupHead
       temporalResult.groupHead = groupHead;
     }
 
+    @Override
     public void setNextReader(AtomicReaderContext context) throws IOException {
       this.readerContext = context;
       groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);
@@ -516,6 +538,7 @@ public abstract class TermAllGroupHeadsCollector<GH extends AbstractAllGroupHead
         }
       }
 
+      @Override
       public int compare(int compIDX, int doc) throws IOException {
         float score = scorer.score();
         if (scores[compIDX] < score) {
@@ -526,6 +549,7 @@ public abstract class TermAllGroupHeadsCollector<GH extends AbstractAllGroupHead
         return 0;
       }
 
+      @Override
       public void updateDocHead(int doc) throws IOException {
         float score = scorer.score();
         for (int i = 0; i < scores.length; i++) {
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector.java
index 8d16479..d4071f5 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector.java
@@ -64,6 +64,7 @@ public class TermDistinctValuesCollector extends AbstractDistinctValuesCollector
     groupCounts = new GroupCount[ordSet.keys.length];
   }
 
+  @Override
   public void collect(int doc) throws IOException {
     int slot = ordSet.find(groupFieldTermIndex.getOrd(doc));
     if (slot < 0) {
@@ -96,10 +97,12 @@ public class TermDistinctValuesCollector extends AbstractDistinctValuesCollector
     return Arrays.binarySearch(ords, ord) < 0;
   }
 
+  @Override
   public List<GroupCount> getGroups() {
     return groups;
   }
 
+  @Override
   public void setNextReader(AtomicReaderContext context) throws IOException {
     groupFieldTermIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);
     countFieldTermIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), countField);
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.java
index 526590f..107d29e 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.java
@@ -82,6 +82,7 @@ public abstract class TermGroupFacetCollector extends AbstractGroupFacetCollecto
       super(groupField, facetField, facetPrefix, initialSize);
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       int facetOrd = facetFieldTermsIndex.getOrd(doc);
       if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {
@@ -106,6 +107,7 @@ public abstract class TermGroupFacetCollector extends AbstractGroupFacetCollecto
       );
     }
 
+    @Override
     public void setNextReader(AtomicReaderContext context) throws IOException {
       if (segmentFacetCounts != null) {
         segmentResults.add(createSegmentResult());
@@ -148,6 +150,7 @@ public abstract class TermGroupFacetCollector extends AbstractGroupFacetCollecto
       }
     }
 
+    @Override
     protected SegmentResult createSegmentResult() throws IOException {
       return new SegmentResult(segmentFacetCounts, segmentTotalCount, facetFieldTermsIndex.getTermsEnum(), startFacetOrd, endFacetOrd);
     }
@@ -166,6 +169,7 @@ public abstract class TermGroupFacetCollector extends AbstractGroupFacetCollecto
         }
       }
 
+      @Override
       protected void nextTerm() throws IOException {
         mergeTerm = tenum.next();
       }
@@ -185,6 +189,7 @@ public abstract class TermGroupFacetCollector extends AbstractGroupFacetCollecto
       super(groupField, facetField, facetPrefix, initialSize);
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       int groupOrd = groupFieldTermsIndex.getOrd(doc);
       if (facetFieldDocTermOrds.isEmpty()) {
@@ -242,6 +247,7 @@ public abstract class TermGroupFacetCollector extends AbstractGroupFacetCollecto
       } while (chunk >= buffer.length);
     }
 
+    @Override
     public void setNextReader(AtomicReaderContext context) throws IOException {
       if (segmentFacetCounts != null) {
         segmentResults.add(createSegmentResult());
@@ -307,6 +313,7 @@ public abstract class TermGroupFacetCollector extends AbstractGroupFacetCollecto
       }
     }
 
+    @Override
     protected SegmentResult createSegmentResult() throws IOException {
       return new SegmentResult(segmentFacetCounts, segmentTotalCount, facetFieldDocTermOrds.numTerms(), facetOrdTermsEnum, startFacetOrd, endFacetOrd);
     }
@@ -326,6 +333,7 @@ public abstract class TermGroupFacetCollector extends AbstractGroupFacetCollecto
         }
       }
 
+      @Override
       protected void nextTerm() throws IOException {
         mergeTerm = tenum.next();
       }
diff --git a/lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest.java b/lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest.java
index f8348c8..ef04c64 100644
--- a/lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest.java
+++ b/lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest.java
@@ -123,6 +123,7 @@ public class DistinctValuesCollectorTest extends AbstractGroupingTestCase {
 
     Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {
 
+      @Override
       public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {
         if (groupCount1.groupValue == null) {
           if (groupCount2.groupValue == null) {
@@ -486,6 +487,7 @@ public class DistinctValuesCollectorTest extends AbstractGroupingTestCase {
 
   private static class NullComparator implements Comparator<Comparable<?>> {
 
+    @Override
     @SuppressWarnings({"unchecked","rawtypes"})
     public int compare(Comparable a, Comparable b) {
       if (a == b) {
diff --git a/lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest.java b/lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest.java
index 1e1de17..9e4ee86 100644
--- a/lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest.java
+++ b/lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest.java
@@ -488,6 +488,7 @@ public class GroupFacetCollectorTest extends AbstractGroupingTestCase {
 
     NavigableSet<String> uniqueFacetValues = new TreeSet<String>(new Comparator<String>() {
 
+      @Override
       public int compare(String a, String b) {
         if (a == b) {
           return 0;
@@ -636,6 +637,7 @@ public class GroupFacetCollectorTest extends AbstractGroupingTestCase {
 
     Collections.sort(entries, new Comparator<TermGroupFacetCollector.FacetEntry>() {
 
+      @Override
       public int compare(TermGroupFacetCollector.FacetEntry a, TermGroupFacetCollector.FacetEntry b) {
         if (orderByCount) {
           int cmp = b.getCount() - a.getCount();
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/DefaultEncoder.java b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/DefaultEncoder.java
index 0b10125..8c2e57e 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/DefaultEncoder.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/DefaultEncoder.java
@@ -25,6 +25,7 @@ public class DefaultEncoder implements Encoder
   {
   }
 
+  @Override
   public String encodeText(String originalText)
   {
     return originalText;
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/GradientFormatter.java b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/GradientFormatter.java
index 6c79aae..c837bbf 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/GradientFormatter.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/GradientFormatter.java
@@ -114,6 +114,7 @@ public class GradientFormatter implements Formatter
         //        totalNumDocs = corpusReader.numDocs();
     }
 
+    @Override
     public String highlightTerm(String originalText, TokenGroup tokenGroup)
     {
         if (tokenGroup.getTotalScore() == 0)
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/NullFragmenter.java b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/NullFragmenter.java
index 5b35115..5759d19 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/NullFragmenter.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/NullFragmenter.java
@@ -23,9 +23,11 @@ import org.apache.lucene.analysis.TokenStream;
  * This is useful for highlighting the entire content of a document or field.
  */
 public class NullFragmenter implements Fragmenter {
+  @Override
   public void start(String s, TokenStream tokenStream) {
   }
 
+  @Override
   public boolean isNewFragment() {
     return false;
   }
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer.java b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer.java
index c2e6a10..09806fc 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer.java
@@ -123,6 +123,7 @@ public class QueryScorer implements Scorer {
    *
    * @see org.apache.lucene.search.highlight.Scorer#getFragmentScore()
    */
+  @Override
   public float getFragmentScore() {
     return totalScore;
   }
@@ -142,6 +143,7 @@ public class QueryScorer implements Scorer {
    * @see org.apache.lucene.search.highlight.Scorer#getTokenScore(org.apache.lucene.analysis.Token,
    *      int)
    */
+  @Override
   public float getTokenScore() {
     position += posIncAtt.getPositionIncrement();
     String termText = termAtt.toString();
@@ -172,6 +174,7 @@ public class QueryScorer implements Scorer {
   /* (non-Javadoc)
    * @see org.apache.lucene.search.highlight.Scorer#init(org.apache.lucene.analysis.TokenStream)
    */
+  @Override
   public TokenStream init(TokenStream tokenStream) throws IOException {
     position = -1;
     termAtt = tokenStream.addAttribute(CharTermAttribute.class);
@@ -234,6 +237,7 @@ public class QueryScorer implements Scorer {
    *
    * @see org.apache.lucene.search.highlight.Scorer#startFragment(org.apache.lucene.search.highlight.TextFragment)
    */
+  @Override
   public void startFragment(TextFragment newFragment) {
     foundTerms = new HashSet<String>();
     totalScore = 0;
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermScorer.java b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermScorer.java
index c17c0b2..17ba516 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermScorer.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermScorer.java
@@ -94,6 +94,7 @@ public class QueryTermScorer implements Scorer {
   /* (non-Javadoc)
    * @see org.apache.lucene.search.highlight.Scorer#init(org.apache.lucene.analysis.TokenStream)
    */
+  @Override
   public TokenStream init(TokenStream tokenStream) {
     termAtt = tokenStream.addAttribute(CharTermAttribute.class);
     return null;
@@ -106,6 +107,7 @@ public class QueryTermScorer implements Scorer {
    * org.apache.lucene.search.highlight.FragmentScorer#startFragment(org.apache
    * .lucene.search.highlight.TextFragment)
    */
+  @Override
   public void startFragment(TextFragment newFragment) {
     uniqueTermsInFragment = new HashSet<String>();
     currentTextFragment = newFragment;
@@ -117,6 +119,7 @@ public class QueryTermScorer implements Scorer {
   /* (non-Javadoc)
    * @see org.apache.lucene.search.highlight.Scorer#getTokenScore()
    */
+  @Override
   public float getTokenScore() {
     String termText = termAtt.toString();
 
@@ -137,6 +140,7 @@ public class QueryTermScorer implements Scorer {
   /* (non-Javadoc)
    * @see org.apache.lucene.search.highlight.Scorer#getFragmentScore()
    */
+  @Override
   public float getFragmentScore() {
     return totalScore;
   }
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleFragmenter.java b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleFragmenter.java
index d30aa76..881beb9 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleFragmenter.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleFragmenter.java
@@ -46,6 +46,7 @@ public class SimpleFragmenter implements Fragmenter {
   /* (non-Javadoc)
    * @see org.apache.lucene.search.highlight.Fragmenter#start(java.lang.String, org.apache.lucene.analysis.TokenStream)
    */
+  @Override
   public void start(String originalText, TokenStream stream) {
     offsetAtt = stream.addAttribute(OffsetAttribute.class);
     currentNumFrags = 1;
@@ -55,6 +56,7 @@ public class SimpleFragmenter implements Fragmenter {
   /* (non-Javadoc)
    * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()
    */
+  @Override
   public boolean isNewFragment() {
     boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags);
     if (isNewFrag) {
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLEncoder.java b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLEncoder.java
index 8e95c86..3eda608 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLEncoder.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLEncoder.java
@@ -25,6 +25,7 @@ public class SimpleHTMLEncoder implements Encoder
   {
   }
 
+  @Override
   public String encodeText(String originalText)
   {
     return htmlEncode(originalText);
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLFormatter.java b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLFormatter.java
index b741de3..3210826 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLFormatter.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLFormatter.java
@@ -42,6 +42,7 @@ public class SimpleHTMLFormatter implements Formatter {
   /* (non-Javadoc)
    * @see org.apache.lucene.search.highlight.Formatter#highlightTerm(java.lang.String, org.apache.lucene.search.highlight.TokenGroup)
    */
+  @Override
   public String highlightTerm(String originalText, TokenGroup tokenGroup) {
     if (tokenGroup.getTotalScore() <= 0) {
       return originalText;
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter.java b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter.java
index 56b4e5f..4ca4bb2 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter.java
@@ -61,6 +61,7 @@ public class SimpleSpanFragmenter implements Fragmenter {
   /* (non-Javadoc)
    * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()
    */
+  @Override
   public boolean isNewFragment() {
     position += posIncAtt.getPositionIncrement();
 
@@ -97,6 +98,7 @@ public class SimpleSpanFragmenter implements Fragmenter {
   /* (non-Javadoc)
    * @see org.apache.lucene.search.highlight.Fragmenter#start(java.lang.String, org.apache.lucene.analysis.TokenStream)
    */
+  @Override
   public void start(String originalText, TokenStream tokenStream) {
     position = -1;
     currentNumFrags = 1;
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java
index 2dcb8ff..4d1d11b 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java
@@ -252,6 +252,7 @@ public class TokenSources {
       tokensInOriginalOrder = unsortedTokens.toArray(new Token[unsortedTokens
           .size()]);
       ArrayUtil.mergeSort(tokensInOriginalOrder, new Comparator<Token>() {
+        @Override
         public int compare(Token t1, Token t2) {
           if (t1.startOffset() == t2.startOffset()) return t1.endOffset()
               - t2.endOffset();
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector.java b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector.java
index 9982f72..dd07e29 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector.java
@@ -97,6 +97,7 @@ public final class TokenStreamFromTermPositionVector extends TokenStream {
   }
 
   private static final Comparator<Token> tokenComparator = new Comparator<Token>() {
+    @Override
     public int compare(final Token o1, final Token o2) {
       return o1.getPositionIncrement() - o2.getPositionIncrement();
     }
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder.java b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder.java
index cb267d8..7fdb8cf 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder.java
@@ -89,12 +89,14 @@ public abstract class BaseFragmentsBuilder implements FragmentsBuilder {
 
   private static final Encoder NULL_ENCODER = new DefaultEncoder();
 
+  @Override
   public String createFragment( IndexReader reader, int docId,
       String fieldName, FieldFragList fieldFragList ) throws IOException {
     return createFragment( reader, docId, fieldName, fieldFragList,
         preTags, postTags, NULL_ENCODER );
   }
 
+  @Override
   public String[] createFragments( IndexReader reader, int docId,
       String fieldName, FieldFragList fieldFragList, int maxNumFragments )
       throws IOException {
@@ -102,6 +104,7 @@ public abstract class BaseFragmentsBuilder implements FragmentsBuilder {
         preTags, postTags, NULL_ENCODER );
   }
   
+  @Override
   public String createFragment( IndexReader reader, int docId,
       String fieldName, FieldFragList fieldFragList, String[] preTags, String[] postTags,
       Encoder encoder ) throws IOException {
@@ -111,6 +114,7 @@ public abstract class BaseFragmentsBuilder implements FragmentsBuilder {
     return fragments[0];
   }
 
+  @Override
   public String[] createFragments( IndexReader reader, int docId,
       String fieldName, FieldFragList fieldFragList, int maxNumFragments,
       String[] preTags, String[] postTags, Encoder encoder ) throws IOException {
@@ -284,6 +288,7 @@ public abstract class BaseFragmentsBuilder implements FragmentsBuilder {
     }
     Collections.sort(result, new Comparator<WeightedFragInfo>() {
 
+      @Override
       public int compare(FieldFragList.WeightedFragInfo info1, FieldFragList.WeightedFragInfo info2) {
         return info1.getStartOffset() - info2.getStartOffset();
       }
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScanner.java b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScanner.java
index 4f506ec..d728a42 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScanner.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScanner.java
@@ -32,6 +32,7 @@ public class BreakIteratorBoundaryScanner implements BoundaryScanner {
     this.bi = bi;
   }
 
+  @Override
   public int findStartOffset(StringBuilder buffer, int start) {
     // avoid illegal start offset
     if( start > buffer.length() || start < 1 ) return start;
@@ -40,6 +41,7 @@ public class BreakIteratorBoundaryScanner implements BoundaryScanner {
     return bi.previous();
   }
 
+  @Override
   public int findEndOffset(StringBuilder buffer, int start) {
     // avoid illegal start offset
     if( start > buffer.length() || start < 0 ) return start;
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java
index 5013f2d..4ace26d 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java
@@ -68,6 +68,7 @@ public class ScoreOrderFragmentsBuilder extends BaseFragmentsBuilder {
    */
   public static class ScoreComparator implements Comparator<WeightedFragInfo> {
 
+    @Override
     public int compare( WeightedFragInfo o1, WeightedFragInfo o2 ) {
       if( o1.getTotalBoost() > o2.getTotalBoost() ) return -1;
       else if( o1.getTotalBoost() < o2.getTotalBoost() ) return 1;
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.java b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.java
index a46df68..bca20c4 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.java
@@ -56,6 +56,7 @@ public class SimpleBoundaryScanner implements BoundaryScanner {
     this.boundaryChars = boundaryChars;
   }
 
+  @Override
   public int findStartOffset(StringBuilder buffer, int start) {
     // avoid illegal start offset
     if( start > buffer.length() || start < 1 ) return start;
@@ -73,6 +74,7 @@ public class SimpleBoundaryScanner implements BoundaryScanner {
     return start;
   }
 
+  @Override
   public int findEndOffset(StringBuilder buffer, int start) {
     // avoid illegal start offset
     if( start > buffer.length() || start < 0 ) return start;
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilder.java b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilder.java
index c155900..32f0f99 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilder.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilder.java
@@ -34,6 +34,7 @@ public class SimpleFragListBuilder extends BaseFragListBuilder {
   /* (non-Javadoc)
    * @see org.apache.lucene.search.vectorhighlight.FragListBuilder#createFieldFragList(FieldPhraseList fieldPhraseList, int fragCharSize)
    */ 
+  @Override
   public FieldFragList createFieldFragList( FieldPhraseList fieldPhraseList, int fragCharSize ){
     return createFieldFragList( fieldPhraseList, new SimpleFieldFragList( fragCharSize ), fragCharSize );
   }
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.java b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.java
index 9aaeed0..2d2d10c 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.java
@@ -35,6 +35,7 @@ import org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseIn
  */
 public class SingleFragListBuilder implements FragListBuilder {
 
+  @Override
   public FieldFragList createFieldFragList(FieldPhraseList fieldPhraseList,
       int fragCharSize) {
 
diff --git a/lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java b/lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
index 115fc10..d41185f 100644
--- a/lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
+++ b/lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
@@ -1367,17 +1367,21 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
     // for
     // highlighting but scores a single fragment for selection
     Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {
+      @Override
       public void startFragment(TextFragment newFragment) {
       }
 
+      @Override
       public float getTokenScore() {
         return 0;
       }
 
+      @Override
       public float getFragmentScore() {
         return 1;
       }
 
+      @Override
       public TokenStream init(TokenStream tokenStream) {
         return null;
       }
@@ -1713,6 +1717,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
    * System.out.println(highlightedText); } }
    */
 
+  @Override
   public String highlightTerm(String originalText, TokenGroup group) {
     if (group.getTotalScore() <= 0) {
       return originalText;
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.java b/lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.java
index 0fd6a09..5ab1204 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.java
@@ -46,9 +46,11 @@ abstract class TermsCollector extends Collector {
     return collectorTerms;
   }
 
+  @Override
   public void setScorer(Scorer scorer) throws IOException {
   }
 
+  @Override
   public boolean acceptsDocsOutOfOrder() {
     return true;
   }
@@ -75,6 +77,7 @@ abstract class TermsCollector extends Collector {
       super(field);
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       reuse = docTermOrds.lookup(doc, reuse);
       int[] buffer = new int[5];
@@ -94,6 +97,7 @@ abstract class TermsCollector extends Collector {
       } while (chunk >= buffer.length);
     }
 
+    @Override
     public void setNextReader(AtomicReaderContext context) throws IOException {
       docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);
       docTermsEnum = docTermOrds.getOrdTermsEnum(context.reader());
@@ -111,10 +115,12 @@ abstract class TermsCollector extends Collector {
       super(field);
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       collectorTerms.add(fromDocTerms.getTerm(doc, spare));
     }
 
+    @Override
     public void setNextReader(AtomicReaderContext context) throws IOException {
       fromDocTerms = FieldCache.DEFAULT.getTerms(context.reader(), field);
     }
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java
index 5a6ab73..9318a15 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.java
@@ -69,6 +69,7 @@ class TermsIncludingScoreQuery extends Query {
     this.unwrittenOriginalQuery = unwrittenOriginalQuery;
   }
 
+  @Override
   public String toString(String string) {
     return String.format(Locale.ROOT, "TermsIncludingScoreQuery{field=%s;originalQuery=%s}", field, unwrittenOriginalQuery);
   }
@@ -98,6 +99,7 @@ class TermsIncludingScoreQuery extends Query {
 
       private TermsEnum segmentTermsEnum;
 
+      @Override
       public Explanation explain(AtomicReaderContext context, int doc) throws IOException {
         SVInnerScorer scorer = (SVInnerScorer) scorer(context, false, false, context.reader().getLiveDocs());
         if (scorer != null) {
@@ -108,18 +110,22 @@ class TermsIncludingScoreQuery extends Query {
         return new ComplexExplanation(false, 0.0f, "Not a match");
       }
 
+      @Override
       public Query getQuery() {
         return TermsIncludingScoreQuery.this;
       }
 
+      @Override
       public float getValueForNormalization() throws IOException {
         return originalWeight.getValueForNormalization() * TermsIncludingScoreQuery.this.getBoost() * TermsIncludingScoreQuery.this.getBoost();
       }
 
+      @Override
       public void normalize(float norm, float topLevelBoost) {
         originalWeight.normalize(norm, topLevelBoost * TermsIncludingScoreQuery.this.getBoost());
       }
 
+      @Override
       public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer, Bits acceptDocs) throws IOException {
         Terms terms = context.reader().terms(field);
         if (terms == null) {
@@ -160,6 +166,7 @@ class TermsIncludingScoreQuery extends Query {
       this.termsEnum = termsEnum;
     }
 
+    @Override
     public float score() throws IOException {
       return scores[ords[scoreUpto]];
     }
@@ -168,10 +175,12 @@ class TermsIncludingScoreQuery extends Query {
       return new ComplexExplanation(true, score(), "Score based on join value " + termsEnum.term().utf8ToString());
     }
 
+    @Override
     public int docID() {
       return docsEnum != null ? docsEnum.docID() : DocIdSetIterator.NO_MORE_DOCS;
     }
 
+    @Override
     public int nextDoc() throws IOException {
       if (docsEnum != null) {
         int docId = docsEnum.nextDoc();
@@ -196,6 +205,7 @@ class TermsIncludingScoreQuery extends Query {
       return docsEnum.nextDoc();
     }
 
+    @Override
     public int advance(int target) throws IOException {
       throw new UnsupportedOperationException("advance() isn't supported because doc ids are emitted out of order");
     }
@@ -236,6 +246,7 @@ class TermsIncludingScoreQuery extends Query {
       alreadyEmittedDocs = new FixedBitSet(maxDoc);
     }
 
+    @Override
     public int nextDoc() throws IOException {
       if (docsEnum != null) {
         int docId;
@@ -314,22 +325,27 @@ class TermsIncludingScoreQuery extends Query {
       }
     }
 
+    @Override
     public float score() throws IOException {
       return scores[currentDoc];
     }
 
+    @Override
     public int freq() throws IOException {
       return 1;
     }
 
+    @Override
     public int docID() {
       return currentDoc;
     }
 
+    @Override
     public int nextDoc() throws IOException {
       return currentDoc = matchingDocsIterator.nextDoc();
     }
 
+    @Override
     public int advance(int target) throws IOException {
       return currentDoc = matchingDocsIterator.advance(target);
     }
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.java b/lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.java
index d20cc2a..daf5928 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/TermsQuery.java
@@ -47,6 +47,7 @@ class TermsQuery extends MultiTermQuery {
     this.terms = terms;
   }
 
+  @Override
   protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {
     if (this.terms.size() == 0) {
       return TermsEnum.EMPTY;
@@ -55,6 +56,7 @@ class TermsQuery extends MultiTermQuery {
     return new SeekingTermSetTermsEnum(terms.iterator(null), this.terms);
   }
 
+  @Override
   public String toString(String string) {
     return "TermsQuery{" +
         "field=" + field +
@@ -91,6 +93,7 @@ class TermsQuery extends MultiTermQuery {
       return temp;
     }
 
+    @Override
     protected AcceptStatus accept(BytesRef term) throws IOException {
       if (comparator.compare(term, lastTerm) > 0) {
         return AcceptStatus.END;
diff --git a/lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.java b/lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.java
index af7c2de..f7d2cb2 100644
--- a/lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.java
+++ b/lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.java
@@ -53,10 +53,12 @@ abstract class TermsWithScoreCollector extends Collector {
     return scoreSums;
   }
 
+  @Override
   public void setScorer(Scorer scorer) throws IOException {
     this.scorer = scorer;
   }
 
+  @Override
   public boolean acceptsDocsOutOfOrder() {
     return true;
   }
@@ -96,6 +98,7 @@ abstract class TermsWithScoreCollector extends Collector {
       super(field, scoreMode);
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       int ord = collectedTerms.add(fromDocTerms.getTerm(doc, spare));
       if (ord < 0) {
@@ -123,6 +126,7 @@ abstract class TermsWithScoreCollector extends Collector {
       }
     }
 
+    @Override
     public void setNextReader(AtomicReaderContext context) throws IOException {
       fromDocTerms = FieldCache.DEFAULT.getTerms(context.reader(), field);
     }
@@ -182,6 +186,7 @@ abstract class TermsWithScoreCollector extends Collector {
       super(field, scoreMode);
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       reuse = fromDocTermOrds.lookup(doc, reuse);
       int[] buffer = new int[5];
@@ -224,6 +229,7 @@ abstract class TermsWithScoreCollector extends Collector {
       } while (chunk >= buffer.length);
     }
 
+    @Override
     public void setNextReader(AtomicReaderContext context) throws IOException {
       fromDocTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);
       docTermsEnum = fromDocTermOrds.getOrdTermsEnum(context.reader());
diff --git a/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java b/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
index ef8fcff..f4f5762 100644
--- a/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
+++ b/lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil.java
@@ -301,20 +301,24 @@ public class TestJoinUtil extends LuceneTestCase {
 
           int docBase;
 
+          @Override
           public void collect(int doc) throws IOException {
             actualResult.set(doc + docBase);
             topScoreDocCollector.collect(doc);
           }
 
+          @Override
           public void setNextReader(AtomicReaderContext context) {
             docBase = context.docBase;
             topScoreDocCollector.setNextReader(context);
           }
 
+          @Override
           public void setScorer(Scorer scorer) throws IOException {
             topScoreDocCollector.setScorer(scorer);
           }
 
+          @Override
           public boolean acceptsDocsOutOfOrder() {
             return scoreDocsInOrder;
           }
@@ -465,6 +469,7 @@ public class TestJoinUtil extends LuceneTestCase {
           private TermsEnum docTermsEnum;
           private DocTermOrds.TermOrdsIterator reuse;
 
+          @Override
           public void collect(int doc) throws IOException {
             if (docTermOrds.isEmpty()) {
               return;
@@ -497,16 +502,19 @@ public class TestJoinUtil extends LuceneTestCase {
             } while (chunk >= buffer.length);
           }
 
+          @Override
           public void setNextReader(AtomicReaderContext context) throws IOException {
             docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), fromField);
             docTermsEnum = docTermOrds.getOrdTermsEnum(context.reader());
             reuse = null;
           }
 
+          @Override
           public void setScorer(Scorer scorer) {
             this.scorer = scorer;
           }
 
+          @Override
           public boolean acceptsDocsOutOfOrder() {
             return false;
           }
@@ -518,6 +526,7 @@ public class TestJoinUtil extends LuceneTestCase {
           private FieldCache.DocTerms terms;
           private final BytesRef spare = new BytesRef();
 
+          @Override
           public void collect(int doc) throws IOException {
             BytesRef joinValue = terms.getTerm(doc, spare);
             if (joinValue == null) {
@@ -531,14 +540,17 @@ public class TestJoinUtil extends LuceneTestCase {
             joinScore.addScore(scorer.score());
           }
 
+          @Override
           public void setNextReader(AtomicReaderContext context) throws IOException {
             terms = FieldCache.DEFAULT.getTerms(context.reader(), fromField);
           }
 
+          @Override
           public void setScorer(Scorer scorer) {
             this.scorer = scorer;
           }
 
+          @Override
           public boolean acceptsDocsOutOfOrder() {
             return false;
           }
@@ -579,6 +591,7 @@ public class TestJoinUtil extends LuceneTestCase {
             private DocTermOrds.TermOrdsIterator reuse;
             private int docBase;
 
+            @Override
             public void collect(int doc) throws IOException {
               if (docTermOrds.isEmpty()) {
                 return;
@@ -611,6 +624,7 @@ public class TestJoinUtil extends LuceneTestCase {
               } while (chunk >= buffer.length);
             }
 
+            @Override
             public void setNextReader(AtomicReaderContext context) throws IOException {
               docBase = context.docBase;
               docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), toField);
@@ -618,7 +632,9 @@ public class TestJoinUtil extends LuceneTestCase {
               reuse = null;
             }
 
+            @Override
             public boolean acceptsDocsOutOfOrder() {return false;}
+            @Override
             public void setScorer(Scorer scorer) {}
           });
         }
@@ -629,6 +645,7 @@ public class TestJoinUtil extends LuceneTestCase {
           private int docBase;
           private final BytesRef spare = new BytesRef();
 
+          @Override
           public void collect(int doc) {
             JoinScore joinScore = joinValueToJoinScores.get(terms.getTerm(doc, spare));
             if (joinScore == null) {
@@ -637,12 +654,15 @@ public class TestJoinUtil extends LuceneTestCase {
             docToJoinScore.put(docBase + doc, joinScore);
           }
 
+          @Override
           public void setNextReader(AtomicReaderContext context) throws IOException {
             terms = FieldCache.DEFAULT.getTerms(context.reader(), toField);
             docBase = context.docBase;
           }
 
+          @Override
           public boolean acceptsDocsOutOfOrder() {return false;}
+          @Override
           public void setScorer(Scorer scorer) {}
         });
       }
@@ -669,6 +689,7 @@ public class TestJoinUtil extends LuceneTestCase {
     List<Map.Entry<Integer,JoinScore>> hits = new ArrayList<Map.Entry<Integer, JoinScore>>(hitsToJoinScores.entrySet());
     Collections.sort(hits, new Comparator<Map.Entry<Integer, JoinScore>>() {
 
+      @Override
       public int compare(Map.Entry<Integer, JoinScore> hit1, Map.Entry<Integer, JoinScore> hit2) {
         float score1 = hit1.getValue().score(scoreMode);
         float score2 = hit2.getValue().score(scoreMode);
diff --git a/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java b/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
index cbcb82f..8efe0f7 100644
--- a/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
+++ b/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
@@ -219,6 +219,7 @@ public class MemoryIndex {
    * Arrays.binarySearch() and Arrays.sort()
    */
   private static final Comparator<Object> termComparator = new Comparator<Object>() {
+    @Override
     @SuppressWarnings({"unchecked","rawtypes"})
     public int compare(Object o1, Object o2) {
       if (o1 instanceof Map.Entry<?,?>) o1 = ((Map.Entry<?,?>) o1).getKey();
diff --git a/lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java b/lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java
index c0118a1..9a4cabd 100644
--- a/lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java
+++ b/lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms.java
@@ -207,6 +207,7 @@ public class HighFreqTerms {
 
 final class TotalTermFreqComparatorSortDescending implements Comparator<TermStats> {
   
+  @Override
   public int compare(TermStats a, TermStats b) {
     if (a.totalTermFreq < b.totalTermFreq) {
       return 1;
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/BooleanFilter.java b/lucene/queries/src/java/org/apache/lucene/queries/BooleanFilter.java
index 85cdafd..b6be9fd 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/BooleanFilter.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/BooleanFilter.java
@@ -131,6 +131,7 @@ public class BooleanFilter extends Filter implements Iterable<FilterClause> {
    * make it possible to do:
    * <pre class="prettyprint">for (FilterClause clause : booleanFilter) {}</pre>
    */
+  @Override
   public final Iterator<FilterClause> iterator() {
     return clauses().iterator();
   }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ByteFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ByteFieldSource.java
index c11ee78..52cd55f 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ByteFieldSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ByteFieldSource.java
@@ -102,6 +102,7 @@ public class ByteFieldSource extends FieldCacheSource {
     };
   }
 
+  @Override
   public boolean equals(Object o) {
     if (o.getClass() != ByteFieldSource.class) return false;
     ByteFieldSource
@@ -111,6 +112,7 @@ public class ByteFieldSource extends FieldCacheSource {
           this.parser.getClass() == other.parser.getClass());
   }
 
+  @Override
   public int hashCode() {
     int h = parser == null ? Byte.class.hashCode() : parser.getClass().hashCode();
     h += super.hashCode();
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource.java
index 97f2414..10f1b12 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource.java
@@ -51,6 +51,7 @@ public class DoubleFieldSource extends FieldCacheSource {
     this.parser = parser;
   }
 
+  @Override
   public String description() {
     return "double(" + field + ')';
   }
@@ -152,6 +153,7 @@ public class DoubleFieldSource extends FieldCacheSource {
 
   }
 
+  @Override
   public boolean equals(Object o) {
     if (o.getClass() != DoubleFieldSource.class) return false;
     DoubleFieldSource other = (DoubleFieldSource) o;
@@ -160,6 +162,7 @@ public class DoubleFieldSource extends FieldCacheSource {
           this.parser.getClass() == other.parser.getClass());
   }
 
+  @Override
   public int hashCode() {
     int h = parser == null ? Double.class.hashCode() : parser.getClass().hashCode();
     h += super.hashCode();
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource.java
index 4486bd0..72a741d 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource.java
@@ -49,6 +49,7 @@ public class FloatFieldSource extends FieldCacheSource {
     this.parser = parser;
   }
 
+  @Override
   public String description() {
     return "float(" + field + ')';
   }
@@ -96,6 +97,7 @@ public class FloatFieldSource extends FieldCacheSource {
     };
   }
 
+  @Override
   public boolean equals(Object o) {
     if (o.getClass() !=  FloatFieldSource.class) return false;
     FloatFieldSource other = (FloatFieldSource)o;
@@ -104,6 +106,7 @@ public class FloatFieldSource extends FieldCacheSource {
           this.parser.getClass() == other.parser.getClass());
   }
 
+  @Override
   public int hashCode() {
     int h = parser==null ? Float.class.hashCode() : parser.getClass().hashCode();
     h += super.hashCode();
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java
index 8efe2de..ec2a1f6 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java
@@ -160,6 +160,7 @@ public class IntFieldSource extends FieldCacheSource {
     };
   }
 
+  @Override
   public boolean equals(Object o) {
     if (o.getClass() !=  IntFieldSource.class) return false;
     IntFieldSource other = (IntFieldSource)o;
@@ -168,6 +169,7 @@ public class IntFieldSource extends FieldCacheSource {
           this.parser.getClass() == other.parser.getClass());
   }
 
+  @Override
   public int hashCode() {
     int h = parser==null ? Integer.class.hashCode() : parser.getClass().hashCode();
     h += super.hashCode();
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LongFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LongFieldSource.java
index 58a1d68..5c33c7f 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LongFieldSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/LongFieldSource.java
@@ -145,6 +145,7 @@ public class LongFieldSource extends FieldCacheSource {
     return new MutableValueLong();  
   }
 
+  @Override
   public boolean equals(Object o) {
     if (o.getClass() != this.getClass()) return false;
     LongFieldSource other = (LongFieldSource) o;
@@ -153,6 +154,7 @@ public class LongFieldSource extends FieldCacheSource {
           this.parser.getClass() == other.parser.getClass());
   }
 
+  @Override
   public int hashCode() {
     int h = parser == null ? this.getClass().hashCode() : parser.getClass().hashCode();
     h += super.hashCode();
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource.java
index 2fe2639..4025f53 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource.java
@@ -95,6 +95,7 @@ public class ShortFieldSource extends FieldCacheSource {
     };
   }
 
+  @Override
   public boolean equals(Object o) {
     if (o.getClass() != ShortFieldSource.class) return false;
     ShortFieldSource
@@ -104,6 +105,7 @@ public class ShortFieldSource extends FieldCacheSource {
           this.parser.getClass() == other.parser.getClass());
   }
 
+  @Override
   public int hashCode() {
     int h = parser == null ? Short.class.hashCode() : parser.getClass().hashCode();
     h += super.hashCode();
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/FastCharStream.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/FastCharStream.java
index a7c4db1..32231f7 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/FastCharStream.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/FastCharStream.java
@@ -42,6 +42,7 @@ public final class FastCharStream implements CharStream {
     input = r;
   }
 
+  @Override
   public final char readChar() throws IOException {
     if (bufferPosition >= bufferLength)
       refill();
@@ -76,25 +77,30 @@ public final class FastCharStream implements CharStream {
       bufferLength += charsRead;
   }
 
+  @Override
   public final char BeginToken() throws IOException {
     tokenStart = bufferPosition;
     return readChar();
   }
 
+  @Override
   public final void backup(int amount) {
     bufferPosition -= amount;
   }
 
+  @Override
   public final String GetImage() {
     return new String(buffer, tokenStart, bufferPosition - tokenStart);
   }
 
+  @Override
   public final char[] GetSuffix(int len) {
     char[] value = new char[len];
     System.arraycopy(buffer, bufferPosition - len, value, 0, len);
     return value;
   }
 
+  @Override
   public final void Done() {
     try {
       input.close();
@@ -102,21 +108,27 @@ public final class FastCharStream implements CharStream {
     }
   }
 
+  @Override
   public final int getColumn() {
     return bufferStart + bufferPosition;
   }
+  @Override
   public final int getLine() {
     return 1;
   }
+  @Override
   public final int getEndColumn() {
     return bufferStart + bufferPosition;
   }
+  @Override
   public final int getEndLine() {
     return 1;
   }
+  @Override
   public final int getBeginColumn() {
     return bufferStart + tokenStart;
   }
+  @Override
   public final int getBeginLine() {
     return 1;
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser.java
index 273ed8c..09d8f5e 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser.java
@@ -165,6 +165,7 @@ public class QueryParser extends QueryParserBase implements QueryParserConstants
   }
 
 // This makes sure that there is no garbage after the query string
+  @Override
   final public Query TopLevelQuery(String field) throws ParseException {
   Query q;
     q = Query(field);
@@ -537,6 +538,7 @@ public class QueryParser extends QueryParserBase implements QueryParserConstants
   }
 
   /** Reinitialise. */
+  @Override
   public void ReInit(CharStream stream) {
     token_source.ReInit(stream);
     token = new Token();
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase.java
index 1575ed3..30cbc15 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase.java
@@ -138,6 +138,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
    /**
    * @return Returns the analyzer.
    */
+  @Override
   public Analyzer getAnalyzer() {
     return analyzer;
   }
@@ -172,6 +173,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
    /**
    * Get the minimal similarity for fuzzy queries.
    */
+  @Override
   public float getFuzzyMinSim() {
       return fuzzyMinSim;
   }
@@ -180,6 +182,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
    * Set the minimum similarity for fuzzy queries.
    * Default is 2f.
    */
+  @Override
   public void setFuzzyMinSim(float fuzzyMinSim) {
       this.fuzzyMinSim = fuzzyMinSim;
   }
@@ -188,6 +191,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
    * Get the prefix length for fuzzy queries.
    * @return Returns the fuzzyPrefixLength.
    */
+  @Override
   public int getFuzzyPrefixLength() {
     return fuzzyPrefixLength;
   }
@@ -196,6 +200,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
    * Set the prefix length for fuzzy queries. Default is 0.
    * @param fuzzyPrefixLength The fuzzyPrefixLength to set.
    */
+  @Override
   public void setFuzzyPrefixLength(int fuzzyPrefixLength) {
     this.fuzzyPrefixLength = fuzzyPrefixLength;
   }
@@ -204,6 +209,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
    * Sets the default slop for phrases.  If zero, then exact phrase matches
    * are required.  Default value is zero.
    */
+  @Override
   public void setPhraseSlop(int phraseSlop) {
     this.phraseSlop = phraseSlop;
   }
@@ -211,6 +217,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
   /**
    * Gets the default slop for phrases.
    */
+  @Override
   public int getPhraseSlop() {
     return phraseSlop;
   }
@@ -226,6 +233,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
    * <p>
    * Default: false.
    */
+  @Override
   public void setAllowLeadingWildcard(boolean allowLeadingWildcard) {
     this.allowLeadingWildcard = allowLeadingWildcard;
   }
@@ -233,6 +241,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
   /**
    * @see #setAllowLeadingWildcard(boolean)
    */
+  @Override
   public boolean getAllowLeadingWildcard() {
     return allowLeadingWildcard;
   }
@@ -247,6 +256,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
    * <p>
    * Default: true.
    */
+  @Override
   public void setEnablePositionIncrements(boolean enable) {
     this.enablePositionIncrements = enable;
   }
@@ -254,6 +264,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
   /**
    * @see #setEnablePositionIncrements(boolean)
    */
+  @Override
   public boolean getEnablePositionIncrements() {
     return enablePositionIncrements;
   }
@@ -284,6 +295,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
    * Whether terms of wildcard, prefix, fuzzy and range queries are to be automatically
    * lower-cased or not.  Default is <code>true</code>.
    */
+  @Override
   public void setLowercaseExpandedTerms(boolean lowercaseExpandedTerms) {
     this.lowercaseExpandedTerms = lowercaseExpandedTerms;
   }
@@ -291,6 +303,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
   /**
    * @see #setLowercaseExpandedTerms(boolean)
    */
+  @Override
   public boolean getLowercaseExpandedTerms() {
     return lowercaseExpandedTerms;
   }
@@ -305,6 +318,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
    * points are not relevant then use this to change
    * the rewrite method.
    */
+  @Override
   public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {
     multiTermRewriteMethod = method;
   }
@@ -313,6 +327,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
   /**
    * @see #setMultiTermRewriteMethod
    */
+  @Override
   public MultiTermQuery.RewriteMethod getMultiTermRewriteMethod() {
     return multiTermRewriteMethod;
   }
@@ -321,6 +336,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
    * Set locale used by date range parsing, lowercasing, and other
    * locale-sensitive operations.
    */
+  @Override
   public void setLocale(Locale locale) {
     this.locale = locale;
   }
@@ -328,14 +344,17 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
   /**
    * Returns current locale, allowing access by subclasses.
    */
+  @Override
   public Locale getLocale() {
     return locale;
   }
   
+  @Override
   public void setTimeZone(TimeZone timeZone) {
     this.timeZone = timeZone;
   }
   
+  @Override
   public TimeZone getTimeZone() {
     return timeZone;
   }
@@ -347,6 +366,7 @@ public abstract class QueryParserBase implements CommonQueryParserConfiguration
    *
    * @param dateResolution the default date resolution to set
    */
+  @Override
   public void setDateResolution(DateTools.Resolution dateResolution) {
     this.dateResolution = dateResolution;
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/Token.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/Token.java
index 0e52ec2..889175c 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/Token.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/Token.java
@@ -97,6 +97,7 @@ public class Token implements java.io.Serializable {
   /**
    * Returns the image.
    */
+  @Override
   public String toString()
   {
     return image;
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/TokenMgrError.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/TokenMgrError.java
index 51712a7..84ece91 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/TokenMgrError.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/TokenMgrError.java
@@ -121,6 +121,7 @@ public class TokenMgrError extends Error
    *
    * from this method for such cases in the release version of your parser.
    */
+  @Override
   public String getMessage() {
     return super.getMessage();
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/QueryNodeError.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/QueryNodeError.java
index e9f14bc..e26ddca 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/QueryNodeError.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/QueryNodeError.java
@@ -66,6 +66,7 @@ public class QueryNodeError extends Error implements NLSException {
    * 
    * @see org.apache.lucene.messages.NLSException#getMessageObject()
    */
+  @Override
   public Message getMessageObject() {
     return this.message;
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/QueryNodeException.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/QueryNodeException.java
index c4f0785..2d59498 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/QueryNodeException.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/QueryNodeException.java
@@ -62,6 +62,7 @@ public class QueryNodeException extends Exception implements NLSException {
 
   }
 
+  @Override
   public Message getMessageObject() {
     return this.message;
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder.java
index 6aed7d6..25f2ecd 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder.java
@@ -213,6 +213,7 @@ public class QueryTreeBuilder implements QueryBuilder {
    *         {@link QueryNodeException} or if there is a node which had no
    *         builder associated to it
    */
+  @Override
   public Object build(QueryNode queryNode) throws QueryNodeException {
     process(queryNode);
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode.java
index 2ef6b96..fe81a0b 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode.java
@@ -53,6 +53,7 @@ public class BooleanQueryNode extends QueryNodeImpl {
     return sb.toString();
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     if (getChildren() == null || getChildren().size() == 0)
       return "";
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode.java
index ec53ca6..3eeee1d 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode.java
@@ -100,6 +100,7 @@ public class BoostQueryNode extends QueryNodeImpl {
         + getChild().toString() + "\n</boost>";
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     if (getChild() == null)
       return "";
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/DeletedQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/DeletedQueryNode.java
index 22db473..7974a13 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/DeletedQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/DeletedQueryNode.java
@@ -32,6 +32,7 @@ public class DeletedQueryNode extends QueryNodeImpl {
     // empty constructor
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escaper) {
     return "[DELETEDCHILD]";
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.java
index 3c37a04..66ecc94 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.java
@@ -80,6 +80,7 @@ public class FieldQueryNode extends QueryNodeImpl implements FieldValuePairQuery
     return escaper.escape(this.text, Locale.getDefault(), EscapeQuerySyntax.Type.STRING);
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escaper) {
     if (isDefaultField(this.field)) {
       return getTermEscaped(escaper);
@@ -132,10 +133,12 @@ public class FieldQueryNode extends QueryNodeImpl implements FieldValuePairQuery
     this.end = end;
   }
 
+  @Override
   public CharSequence getField() {
     return this.field;
   }
 
+  @Override
   public void setField(CharSequence field) {
     this.field = field;
   }
@@ -153,6 +156,7 @@ public class FieldQueryNode extends QueryNodeImpl implements FieldValuePairQuery
    * 
    * @return The "original" form of the term.
    */
+  @Override
   public CharSequence getText() {
     return this.text;
   }
@@ -161,6 +165,7 @@ public class FieldQueryNode extends QueryNodeImpl implements FieldValuePairQuery
    * @param text
    *          the text to set
    */
+  @Override
   public void setText(CharSequence text) {
     this.text = text;
   }
@@ -179,10 +184,12 @@ public class FieldQueryNode extends QueryNodeImpl implements FieldValuePairQuery
 
   }
 
+  @Override
   public CharSequence getValue() {
     return getText();
   }
 
+  @Override
   public void setValue(CharSequence value) {
     setText(value);
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.java
index 4330b0a..2214467 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.java
@@ -57,6 +57,7 @@ public class GroupQueryNode extends QueryNodeImpl {
     return "<group>" + "\n" + getChild().toString() + "\n</group>";
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     if (getChild() == null)
       return "";
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode.java
index 0e1efd4..c6e573a 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode.java
@@ -34,6 +34,7 @@ public class MatchAllDocsQueryNode extends QueryNodeImpl {
     return "<matchAllDocs field='*' term='*'/>";
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     return "*:*";
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.java
index 8f7f221..9791cf6 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.java
@@ -119,6 +119,7 @@ public class ModifierQueryNode extends QueryNodeImpl {
         + getChild().toString() + "\n</modifier>";
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     if (getChild() == null)
       return "";
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/OpaqueQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/OpaqueQueryNode.java
index ba08a45..6a61f79 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/OpaqueQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/OpaqueQueryNode.java
@@ -49,6 +49,7 @@ public class OpaqueQueryNode extends QueryNodeImpl {
     return "<opaque schema='" + this.schema + "' value='" + this.value + "'/>";
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     return "@" + this.schema + ":'" + this.value + "'";
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode.java
index 297ea82..fd54d4b 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode.java
@@ -182,6 +182,7 @@ public class PathQueryNode extends QueryNodeImpl {
     return path.toString();
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escaper) {
     StringBuilder path = new StringBuilder();
     path.append("/").append(getFirstPathElement());
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode.java
index 591f681..0b280e5 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode.java
@@ -68,6 +68,7 @@ public class PhraseSlopQueryNode extends QueryNodeImpl implements FieldableNode
         + getChild().toString() + "\n</phraseslop>";
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     if (getChild() == null)
       return "";
@@ -84,6 +85,7 @@ public class PhraseSlopQueryNode extends QueryNodeImpl implements FieldableNode
     return clone;
   }
 
+  @Override
   public CharSequence getField() {
     QueryNode child = getChild();
 
@@ -95,6 +97,7 @@ public class PhraseSlopQueryNode extends QueryNodeImpl implements FieldableNode
 
   }
 
+  @Override
   public void setField(CharSequence fieldName) {
     QueryNode child = getChild();
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.java
index 6cdd0ba..fc53900 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.java
@@ -34,6 +34,7 @@ public interface QueryNode {
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser);
 
   /** for printing */
+  @Override
   public String toString();
 
   /** get Children nodes */
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java
index 97e3317..cc5d750 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java
@@ -55,6 +55,7 @@ public abstract class QueryNodeImpl implements QueryNode, Cloneable {
 
   }
 
+  @Override
   public final void add(QueryNode child) {
 
     if (isLeaf() || this.clauses == null || child == null) {
@@ -67,6 +68,7 @@ public abstract class QueryNodeImpl implements QueryNode, Cloneable {
 
   }
 
+  @Override
   public final void add(List<QueryNode> children) {
 
     if (isLeaf() || this.clauses == null) {
@@ -80,10 +82,12 @@ public abstract class QueryNodeImpl implements QueryNode, Cloneable {
 
   }
 
+  @Override
   public boolean isLeaf() {
     return this.isLeaf;
   }
 
+  @Override
   public final void set(List<QueryNode> children) {
 
     if (isLeaf() || this.clauses == null) {
@@ -112,6 +116,7 @@ public abstract class QueryNodeImpl implements QueryNode, Cloneable {
     }
   }
 
+  @Override
   public QueryNode cloneTree() throws CloneNotSupportedException {
     QueryNodeImpl clone = (QueryNodeImpl) super.clone();
     clone.isLeaf = this.isLeaf;
@@ -144,6 +149,7 @@ public abstract class QueryNodeImpl implements QueryNode, Cloneable {
    * @return a List for QueryNode object. Returns null, for nodes that do not
    *         contain children. All leaf Nodes return null.
    */
+  @Override
   public final List<QueryNode> getChildren() {
     if (isLeaf() || this.clauses == null) {
       return null;
@@ -151,19 +157,23 @@ public abstract class QueryNodeImpl implements QueryNode, Cloneable {
     return this.clauses;
   }
 
+  @Override
   public void setTag(String tagName, Object value) {
     this.tags.put(tagName.toLowerCase(Locale.ROOT), value);
   }
 
+  @Override
   public void unsetTag(String tagName) {
     this.tags.remove(tagName.toLowerCase(Locale.ROOT));
   }
 
   /** verify if a node contains a tag */
+  @Override
   public boolean containsTag(String tagName) {
     return this.tags.containsKey(tagName.toLowerCase(Locale.ROOT));
   }
 
+  @Override
   public Object getTag(String tagName) {
     return this.tags.get(tagName.toLowerCase(Locale.ROOT));
   }
@@ -174,6 +184,7 @@ public abstract class QueryNodeImpl implements QueryNode, Cloneable {
     this.parent = parent;
   }
 
+  @Override
   public QueryNode getParent() {
     return this.parent;
   }
@@ -225,6 +236,7 @@ public abstract class QueryNodeImpl implements QueryNode, Cloneable {
    * 
    * @return a map containing all tags attached to this query node
    */
+  @Override
   @SuppressWarnings("unchecked")
   public Map<String, Object> getTagMap() {
     return (Map<String, Object>) this.tags.clone();
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode.java
index c04d615..0973c2a 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode.java
@@ -77,6 +77,7 @@ public class SlopQueryNode extends QueryNodeImpl implements FieldableNode {
         + getChild().toString() + "\n</slop>";
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     if (getChild() == null)
       return "";
@@ -93,6 +94,7 @@ public class SlopQueryNode extends QueryNodeImpl implements FieldableNode {
     return clone;
   }
 
+  @Override
   public CharSequence getField() {
     QueryNode child = getChild();
 
@@ -104,6 +106,7 @@ public class SlopQueryNode extends QueryNodeImpl implements FieldableNode {
 
   }
 
+  @Override
   public void setField(CharSequence fieldName) {
     QueryNode child = getChild();
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/TokenizedPhraseQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/TokenizedPhraseQueryNode.java
index 081d8e4..bf80ebf 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/TokenizedPhraseQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/TokenizedPhraseQueryNode.java
@@ -48,6 +48,7 @@ public class TokenizedPhraseQueryNode extends QueryNodeImpl implements
   }
 
   // This text representation is not re-parseable
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     if (getChildren() == null || getChildren().size() == 0)
       return "";
@@ -72,6 +73,7 @@ public class TokenizedPhraseQueryNode extends QueryNodeImpl implements
     return clone;
   }
 
+  @Override
   public CharSequence getField() {
     List<QueryNode> children = getChildren();
 
@@ -84,6 +86,7 @@ public class TokenizedPhraseQueryNode extends QueryNodeImpl implements
 
   }
 
+  @Override
   public void setField(CharSequence fieldName) {
     List<QueryNode> children = getChildren();
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorImpl.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorImpl.java
index adc9303..965fb51 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorImpl.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorImpl.java
@@ -85,6 +85,7 @@ public abstract class QueryNodeProcessorImpl implements QueryNodeProcessor {
     this.queryConfig = queryConfigHandler;
   }
 
+  @Override
   public QueryNode process(QueryNode queryTree) throws QueryNodeException {
     return processIteration(queryTree);
   }
@@ -181,6 +182,7 @@ public abstract class QueryNodeProcessorImpl implements QueryNodeProcessor {
    * @see QueryNodeProcessor#getQueryConfigHandler()
    * @see QueryConfigHandler
    */
+  @Override
   public void setQueryConfigHandler(QueryConfigHandler queryConfigHandler) {
     this.queryConfig = queryConfigHandler;
   }
@@ -194,6 +196,7 @@ public abstract class QueryNodeProcessorImpl implements QueryNodeProcessor {
    * @see QueryNodeProcessor#setQueryConfigHandler(QueryConfigHandler)
    * @see QueryConfigHandler
    */
+  @Override
   public QueryConfigHandler getQueryConfigHandler() {
     return this.queryConfig;
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorPipeline.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorPipeline.java
index 577d47b..9b15207 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorPipeline.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorPipeline.java
@@ -67,6 +67,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
    * @see QueryNodeProcessor#setQueryConfigHandler(QueryConfigHandler)
    * @see QueryConfigHandler
    */
+  @Override
   public QueryConfigHandler getQueryConfigHandler() {
     return this.queryConfig;
   }
@@ -82,6 +83,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
    * 
    * @see QueryNode
    */
+  @Override
   public QueryNode process(QueryNode queryTree) throws QueryNodeException {
 
     for (QueryNodeProcessor processor : this.processors) {
@@ -101,6 +103,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
    * @see QueryNodeProcessor#getQueryConfigHandler()
    * @see QueryConfigHandler
    */
+  @Override
   public void setQueryConfigHandler(QueryConfigHandler queryConfigHandler) {
     this.queryConfig = queryConfigHandler;
 
@@ -113,6 +116,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#add(Object)
    */
+  @Override
   public boolean add(QueryNodeProcessor processor) {
     boolean added = this.processors.add(processor);
 
@@ -127,6 +131,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#add(int, Object)
    */
+  @Override
   public void add(int index, QueryNodeProcessor processor) {
     this.processors.add(index, processor);
     processor.setQueryConfigHandler(this.queryConfig);
@@ -136,6 +141,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#addAll(Collection)
    */
+  @Override
   public boolean addAll(Collection<? extends QueryNodeProcessor> c) {
     boolean anyAdded = this.processors.addAll(c);
 
@@ -150,6 +156,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#addAll(int, Collection)
    */
+  @Override
   public boolean addAll(int index, Collection<? extends QueryNodeProcessor> c) {
     boolean anyAdded = this.processors.addAll(index, c);
 
@@ -164,6 +171,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#clear()
    */
+  @Override
   public void clear() {
     this.processors.clear();
   }
@@ -171,6 +179,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#contains(Object)
    */
+  @Override
   public boolean contains(Object o) {
     return this.processors.contains(o);
   }
@@ -178,6 +187,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#containsAll(Collection)
    */
+  @Override
   public boolean containsAll(Collection<?> c) {
     return this.processors.containsAll(c);
   }
@@ -185,6 +195,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#get(int)
    */
+  @Override
   public QueryNodeProcessor get(int index) {
     return this.processors.get(index);
   }
@@ -192,6 +203,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#indexOf(Object)
    */
+  @Override
   public int indexOf(Object o) {
     return this.processors.indexOf(o);
   }
@@ -199,6 +211,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#isEmpty()
    */
+  @Override
   public boolean isEmpty() {
     return this.processors.isEmpty();
   }
@@ -206,6 +219,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#iterator()
    */
+  @Override
   public Iterator<QueryNodeProcessor> iterator() {
     return this.processors.iterator();
   }
@@ -213,6 +227,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#lastIndexOf(Object)
    */
+  @Override
   public int lastIndexOf(Object o) {
     return this.processors.lastIndexOf(o);
   }
@@ -220,6 +235,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#listIterator()
    */
+  @Override
   public ListIterator<QueryNodeProcessor> listIterator() {
     return this.processors.listIterator();
   }
@@ -227,6 +243,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#listIterator(int)
    */
+  @Override
   public ListIterator<QueryNodeProcessor> listIterator(int index) {
     return this.processors.listIterator(index);
   }
@@ -234,6 +251,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#remove(Object)
    */
+  @Override
   public boolean remove(Object o) {
     return this.processors.remove(o);
   }
@@ -241,6 +259,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#remove(int)
    */
+  @Override
   public QueryNodeProcessor remove(int index) {
     return this.processors.remove(index);
   }
@@ -248,6 +267,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#removeAll(Collection)
    */
+  @Override
   public boolean removeAll(Collection<?> c) {
     return this.processors.removeAll(c);
   }
@@ -255,6 +275,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#retainAll(Collection)
    */
+  @Override
   public boolean retainAll(Collection<?> c) {
     return this.processors.retainAll(c);
   }
@@ -262,6 +283,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#set(int, Object)
    */
+  @Override
   public QueryNodeProcessor set(int index, QueryNodeProcessor processor) {
     QueryNodeProcessor oldProcessor = this.processors.set(index, processor);
     
@@ -276,6 +298,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#size()
    */
+  @Override
   public int size() {
     return this.processors.size();
   }
@@ -283,6 +306,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#subList(int, int)
    */
+  @Override
   public List<QueryNodeProcessor> subList(int fromIndex, int toIndex) {
     return this.processors.subList(fromIndex, toIndex);
   }
@@ -290,6 +314,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#toArray(Object[])
    */
+  @Override
   public <T> T[] toArray(T[] array) {
     return this.processors.toArray(array);
   }
@@ -297,6 +322,7 @@ public class QueryNodeProcessorPipeline implements QueryNodeProcessor,
   /**
    * @see List#toArray()
    */
+  @Override
   public Object[] toArray() {
     return this.processors.toArray();
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.java
index b0256f8..0069c2f 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.java
@@ -63,14 +63,17 @@ public final class UnescapedCharSequence implements CharSequence {
     }
   }
 
+  @Override
   public char charAt(int index) {
     return this.chars[index];
   }
 
+  @Override
   public int length() {
     return this.chars.length;
   }
 
+  @Override
   public CharSequence subSequence(int start, int end) {
     int newLength = end - start;
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/MessageImpl.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/MessageImpl.java
index 133aee2..3e74f9f 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/MessageImpl.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/MessageImpl.java
@@ -39,18 +39,22 @@ public class MessageImpl implements Message {
     this.arguments = args;
   }
 
+  @Override
   public Object[] getArguments() {
     return this.arguments;
   }
 
+  @Override
   public String getKey() {
     return this.key;
   }
 
+  @Override
   public String getLocalizedMessage() {
     return getLocalizedMessage(Locale.getDefault());
   }
 
+  @Override
   public String getLocalizedMessage(Locale locale) {
     return NLS.getLocalizedMessage(getKey(), locale, getArguments());
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS.java
index 19afdbb..df2f5f9 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS.java
@@ -189,6 +189,7 @@ public class NLS {
       field.setAccessible(true);
     } else {
       AccessController.doPrivileged(new PrivilegedAction<Void>() {
+        @Override
         public Void run() {
           field.setAccessible(true);
           return null;
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser.java
index cb4decd..2abb6a7 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser.java
@@ -198,6 +198,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
    * <p>
    * Default: false.
    */
+  @Override
   public void setLowercaseExpandedTerms(boolean lowercaseExpandedTerms) {
     getQueryConfigHandler().set(ConfigurationKeys.LOWERCASE_EXPANDED_TERMS, lowercaseExpandedTerms);
   }
@@ -205,6 +206,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
   /**
    * @see #setLowercaseExpandedTerms(boolean)
    */
+  @Override
   public boolean getLowercaseExpandedTerms() {
     Boolean lowercaseExpandedTerms = getQueryConfigHandler().get(ConfigurationKeys.LOWERCASE_EXPANDED_TERMS);
     
@@ -226,6 +228,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
    * <p>
    * Default: false.
    */
+  @Override
   public void setAllowLeadingWildcard(boolean allowLeadingWildcard) {
     getQueryConfigHandler().set(ConfigurationKeys.ALLOW_LEADING_WILDCARD, allowLeadingWildcard);
   }
@@ -239,6 +242,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
    * <p>
    * Default: false.
    */
+  @Override
   public void setEnablePositionIncrements(boolean enabled) {
     getQueryConfigHandler().set(ConfigurationKeys.ENABLE_POSITION_INCREMENTS, enabled);
   }
@@ -246,6 +250,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
   /**
    * @see #setEnablePositionIncrements(boolean)
    */
+  @Override
   public boolean getEnablePositionIncrements() {
     Boolean enablePositionsIncrements = getQueryConfigHandler().get(ConfigurationKeys.ENABLE_POSITION_INCREMENTS);
     
@@ -268,6 +273,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
    * old-fashioned boolean queries expansion rewriting and the above points are
    * not relevant then use this change the rewrite method.
    */
+  @Override
   public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {
     getQueryConfigHandler().set(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD, method);
   }
@@ -275,6 +281,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
   /**
    * @see #setMultiTermRewriteMethod(org.apache.lucene.search.MultiTermQuery.RewriteMethod)
    */
+  @Override
   public MultiTermQuery.RewriteMethod getMultiTermRewriteMethod() {
     return getQueryConfigHandler().get(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD);
   }
@@ -311,6 +318,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
    * @param fuzzyPrefixLength
    *          The fuzzyPrefixLength to set.
    */
+  @Override
   public void setFuzzyPrefixLength(int fuzzyPrefixLength) {
     QueryConfigHandler config = getQueryConfigHandler();
     FuzzyConfig fuzzyConfig = config.get(ConfigurationKeys.FUZZY_CONFIG);
@@ -335,6 +343,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
   /**
    * Set locale used by date range parsing.
    */
+  @Override
   public void setLocale(Locale locale) {
     getQueryConfigHandler().set(ConfigurationKeys.LOCALE, locale);
   }
@@ -342,14 +351,17 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
   /**
    * Returns current locale, allowing access by subclasses.
    */
+  @Override
   public Locale getLocale() {
     return getQueryConfigHandler().get(ConfigurationKeys.LOCALE);
   }
   
+  @Override
   public void setTimeZone(TimeZone timeZone) {
     getQueryConfigHandler().set(ConfigurationKeys.TIMEZONE, timeZone);
   }
   
+  @Override
   public TimeZone getTimeZone() {
     return getQueryConfigHandler().get(ConfigurationKeys.TIMEZONE);
   }
@@ -369,6 +381,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
    * Sets the default slop for phrases. If zero, then exact phrase matches are
    * required. Default value is zero.
    */
+  @Override
   public void setPhraseSlop(int defaultPhraseSlop) {
     getQueryConfigHandler().set(ConfigurationKeys.PHRASE_SLOP, defaultPhraseSlop);
   }
@@ -377,6 +390,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
     getQueryConfigHandler().set(ConfigurationKeys.ANALYZER, analyzer);
   }
   
+  @Override
   public Analyzer getAnalyzer() {
     return getQueryConfigHandler().get(ConfigurationKeys.ANALYZER);       
   }
@@ -384,6 +398,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
   /**
    * @see #setAllowLeadingWildcard(boolean)
    */
+  @Override
   public boolean getAllowLeadingWildcard() {
     Boolean allowLeadingWildcard = getQueryConfigHandler().get(ConfigurationKeys.ALLOW_LEADING_WILDCARD);
     
@@ -398,6 +413,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
   /**
    * Get the minimal similarity for fuzzy queries.
    */
+  @Override
   public float getFuzzyMinSim() {
     FuzzyConfig fuzzyConfig = getQueryConfigHandler().get(ConfigurationKeys.FUZZY_CONFIG);
     
@@ -413,6 +429,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
    * 
    * @return Returns the fuzzyPrefixLength.
    */
+  @Override
   public int getFuzzyPrefixLength() {
     FuzzyConfig fuzzyConfig = getQueryConfigHandler().get(ConfigurationKeys.FUZZY_CONFIG);
     
@@ -426,6 +443,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
   /**
    * Gets the default slop for phrases.
    */
+  @Override
   public int getPhraseSlop() {
     Integer phraseSlop = getQueryConfigHandler().get(ConfigurationKeys.PHRASE_SLOP);
     
@@ -441,6 +459,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
    * Set the minimum similarity for fuzzy queries. Default is defined on
    * {@link FuzzyQuery#defaultMinSimilarity}.
    */
+  @Override
   public void setFuzzyMinSim(float fuzzyMinSim) {
     QueryConfigHandler config = getQueryConfigHandler();
     FuzzyConfig fuzzyConfig = config.get(ConfigurationKeys.FUZZY_CONFIG);
@@ -477,6 +496,7 @@ public class StandardQueryParser extends QueryParserHelper implements CommonQuer
    * 
    * @param dateResolution the default {@link Resolution}
    */
+  @Override
   public void setDateResolution(DateTools.Resolution dateResolution) {
     getQueryConfigHandler().set(ConfigurationKeys.DATE_RESOLUTION, dateResolution);
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder.java
index 4dbc27b..7ac95f2 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder.java
@@ -40,6 +40,7 @@ public class AnyQueryNodeBuilder implements StandardQueryBuilder {
     // empty constructor
   }
 
+  @Override
   public BooleanQuery build(QueryNode queryNode) throws QueryNodeException {
     AnyQueryNode andNode = (AnyQueryNode) queryNode;
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/BooleanQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/BooleanQueryNodeBuilder.java
index da58d0c..5712edc 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/BooleanQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/BooleanQueryNodeBuilder.java
@@ -47,6 +47,7 @@ public class BooleanQueryNodeBuilder implements StandardQueryBuilder {
     // empty constructor
   }
 
+  @Override
   public BooleanQuery build(QueryNode queryNode) throws QueryNodeException {
     BooleanQueryNode booleanNode = (BooleanQueryNode) queryNode;
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/BoostQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/BoostQueryNodeBuilder.java
index d45779b..0330121 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/BoostQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/BoostQueryNodeBuilder.java
@@ -35,6 +35,7 @@ public class BoostQueryNodeBuilder implements StandardQueryBuilder {
     // empty constructor
   }
 
+  @Override
   public Query build(QueryNode queryNode) throws QueryNodeException {
     BoostQueryNode boostNode = (BoostQueryNode) queryNode;
     QueryNode child = boostNode.getChild();
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/DummyQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/DummyQueryNodeBuilder.java
index c6708de..14dc324 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/DummyQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/DummyQueryNodeBuilder.java
@@ -44,6 +44,7 @@ public class DummyQueryNodeBuilder implements StandardQueryBuilder {
    * 
    * return <code>null</code>
    */
+  @Override
   public TermQuery build(QueryNode queryNode) throws QueryNodeException {
     return null;
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/FieldQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/FieldQueryNodeBuilder.java
index e97892a..5e55d24 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/FieldQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/FieldQueryNodeBuilder.java
@@ -32,6 +32,7 @@ public class FieldQueryNodeBuilder implements StandardQueryBuilder {
     // empty constructor
   }
 
+  @Override
   public TermQuery build(QueryNode queryNode) throws QueryNodeException {
     FieldQueryNode fieldNode = (FieldQueryNode) queryNode;
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder.java
index 6908959..1d472ea 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder.java
@@ -32,6 +32,7 @@ public class FuzzyQueryNodeBuilder implements StandardQueryBuilder {
     // empty constructor
   }
 
+  @Override
   public FuzzyQuery build(QueryNode queryNode) throws QueryNodeException {
     FuzzyQueryNode fuzzyNode = (FuzzyQueryNode) queryNode;
     String text = fuzzyNode.getTextAsString();
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/GroupQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/GroupQueryNodeBuilder.java
index d9e6cdc..6b1b3c5 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/GroupQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/GroupQueryNodeBuilder.java
@@ -34,6 +34,7 @@ public class GroupQueryNodeBuilder implements StandardQueryBuilder {
     // empty constructor
   }
 
+  @Override
   public Query build(QueryNode queryNode) throws QueryNodeException {
     GroupQueryNode groupNode = (GroupQueryNode) queryNode;
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MatchAllDocsQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MatchAllDocsQueryNodeBuilder.java
index bbcbb10..a8828d1 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MatchAllDocsQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MatchAllDocsQueryNodeBuilder.java
@@ -35,6 +35,7 @@ public class MatchAllDocsQueryNodeBuilder implements StandardQueryBuilder {
     // empty constructor
   }
 
+  @Override
   public MatchAllDocsQuery build(QueryNode queryNode) throws QueryNodeException {
 
     // validates node
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MatchNoDocsQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MatchNoDocsQueryNodeBuilder.java
index d913874..fc132fe 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MatchNoDocsQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MatchNoDocsQueryNodeBuilder.java
@@ -35,6 +35,7 @@ public class MatchNoDocsQueryNodeBuilder implements StandardQueryBuilder {
     // empty constructor
   }
 
+  @Override
   public BooleanQuery build(QueryNode queryNode) throws QueryNodeException {
 
     // validates node
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/ModifierQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/ModifierQueryNodeBuilder.java
index b2cbbc0..4f05004 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/ModifierQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/ModifierQueryNodeBuilder.java
@@ -34,6 +34,7 @@ public class ModifierQueryNodeBuilder implements StandardQueryBuilder {
     // empty constructor
   }
 
+  @Override
   public Query build(QueryNode queryNode) throws QueryNodeException {
     ModifierQueryNode modifierNode = (ModifierQueryNode) queryNode;
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder.java
index 0105d46..89923d7 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder.java
@@ -40,6 +40,7 @@ public class MultiPhraseQueryNodeBuilder implements StandardQueryBuilder {
     // empty constructor
   }
 
+  @Override
   public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {
     MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder.java
index e5a4d92..7452679 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder.java
@@ -43,6 +43,7 @@ public class NumericRangeQueryNodeBuilder implements StandardQueryBuilder {
   // empty constructor
   }
   
+  @Override
   public NumericRangeQuery<? extends Number> build(QueryNode queryNode)
       throws QueryNodeException {
     NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/PhraseQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/PhraseQueryNodeBuilder.java
index f502053..c5653ea 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/PhraseQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/PhraseQueryNodeBuilder.java
@@ -37,6 +37,7 @@ public class PhraseQueryNodeBuilder implements StandardQueryBuilder {
     // empty constructor
   }
 
+  @Override
   public PhraseQuery build(QueryNode queryNode) throws QueryNodeException {
     TokenizedPhraseQueryNode phraseNode = (TokenizedPhraseQueryNode) queryNode;
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/PrefixWildcardQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/PrefixWildcardQueryNodeBuilder.java
index 3b541ab..298717f 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/PrefixWildcardQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/PrefixWildcardQueryNodeBuilder.java
@@ -35,6 +35,7 @@ public class PrefixWildcardQueryNodeBuilder implements StandardQueryBuilder {
     // empty constructor
   }
 
+  @Override
   public PrefixQuery build(QueryNode queryNode) throws QueryNodeException {    
 
     PrefixWildcardQueryNode wildcardNode = (PrefixWildcardQueryNode) queryNode;
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder.java
index 57de72c..9da5e95 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder.java
@@ -34,6 +34,7 @@ public class RegexpQueryNodeBuilder implements StandardQueryBuilder {
     // empty constructor
   }
 
+  @Override
   public RegexpQuery build(QueryNode queryNode) throws QueryNodeException {
     RegexpQueryNode regexpNode = (RegexpQueryNode) queryNode;
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/SlopQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/SlopQueryNodeBuilder.java
index 4b6f864..f17180b 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/SlopQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/SlopQueryNodeBuilder.java
@@ -37,6 +37,7 @@ public class SlopQueryNodeBuilder implements StandardQueryBuilder {
     // empty constructor
   }
 
+  @Override
   public Query build(QueryNode queryNode) throws QueryNodeException {
     SlopQueryNode phraseSlopNode = (SlopQueryNode) queryNode;
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/StandardBooleanQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/StandardBooleanQueryNodeBuilder.java
index ba91dc3..6551dab 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/StandardBooleanQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/StandardBooleanQueryNodeBuilder.java
@@ -49,6 +49,7 @@ public class StandardBooleanQueryNodeBuilder implements StandardQueryBuilder {
     // empty constructor
   }
 
+  @Override
   public BooleanQuery build(QueryNode queryNode) throws QueryNodeException {
     StandardBooleanQueryNode booleanNode = (StandardBooleanQueryNode) queryNode;
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.java
index 203c0a7..e9d641a 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.java
@@ -32,6 +32,7 @@ import org.apache.lucene.search.Query;
  */
 public interface StandardQueryBuilder extends QueryBuilder {
 
+  @Override
   public Query build(QueryNode queryNode) throws QueryNodeException;
 
 }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/TermRangeQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/TermRangeQueryNodeBuilder.java
index 468b9f5..7e34e5e 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/TermRangeQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/TermRangeQueryNodeBuilder.java
@@ -36,6 +36,7 @@ public class TermRangeQueryNodeBuilder implements StandardQueryBuilder {
   // empty constructor
   }
   
+  @Override
   public TermRangeQuery build(QueryNode queryNode) throws QueryNodeException {
     TermRangeQueryNode rangeNode = (TermRangeQueryNode) queryNode;
     FieldQueryNode upper = rangeNode.getUpperBound();
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/WildcardQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/WildcardQueryNodeBuilder.java
index e228439..aaa513d 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/WildcardQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/WildcardQueryNodeBuilder.java
@@ -35,6 +35,7 @@ public class WildcardQueryNodeBuilder implements StandardQueryBuilder {
     // empty constructor
   }
 
+  @Override
   public WildcardQuery build(QueryNode queryNode) throws QueryNodeException {
     WildcardQueryNode wildcardNode = (WildcardQueryNode) queryNode;
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/FieldBoostMapFCListener.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/FieldBoostMapFCListener.java
index 71f417a..89a6d11 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/FieldBoostMapFCListener.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/FieldBoostMapFCListener.java
@@ -43,6 +43,7 @@ public class FieldBoostMapFCListener implements FieldConfigListener {
     this.config = config;
   }
 
+  @Override
   public void buildFieldConfig(FieldConfig fieldConfig) {
     Map<String, Float> fieldBoostMap = this.config.get(ConfigurationKeys.FIELD_BOOST_MAP);
     
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/FieldDateResolutionFCListener.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/FieldDateResolutionFCListener.java
index fc8bb08..8ac9cf5 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/FieldDateResolutionFCListener.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/FieldDateResolutionFCListener.java
@@ -45,6 +45,7 @@ public class FieldDateResolutionFCListener implements FieldConfigListener {
     this.config = config;
   }
 
+  @Override
   public void buildFieldConfig(FieldConfig fieldConfig) {
     DateTools.Resolution dateRes = null;
     Map<CharSequence, DateTools.Resolution> dateResMap = this.config.get(ConfigurationKeys.FIELD_DATE_RESOLUTION_MAP);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/NumericFieldConfigListener.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/NumericFieldConfigListener.java
index b6abdc3..87d3346 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/NumericFieldConfigListener.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/NumericFieldConfigListener.java
@@ -54,6 +54,7 @@ public class NumericFieldConfigListener implements FieldConfigListener {
     
   }
   
+  @Override
   public void buildFieldConfig(FieldConfig fieldConfig) {
     Map<String,NumericConfig> numericConfigMap = config
         .get(ConfigurationKeys.NUMERIC_CONFIG_MAP);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode.java
index 201654c..935db13 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode.java
@@ -54,6 +54,7 @@ public class AbstractRangeQueryNode<T extends FieldValuePairQueryNode<?>>
    * 
    * @see FieldableNode
    */
+  @Override
   public CharSequence getField() {
     CharSequence field = null;
     T lower = getLowerBound();
@@ -75,6 +76,7 @@ public class AbstractRangeQueryNode<T extends FieldValuePairQueryNode<?>>
    * 
    * @param fieldName the field associated with this node
    */
+  @Override
   public void setField(CharSequence fieldName) {
     T lower = getLowerBound();
     T upper = getUpperBound();
@@ -94,6 +96,7 @@ public class AbstractRangeQueryNode<T extends FieldValuePairQueryNode<?>>
    * 
    * @return the lower bound node.
    */
+  @Override
   @SuppressWarnings("unchecked")
   public T getLowerBound() {
     return (T) getChildren().get(0);
@@ -104,6 +107,7 @@ public class AbstractRangeQueryNode<T extends FieldValuePairQueryNode<?>>
    * 
    * @return the upper bound node.
    */
+  @Override
   @SuppressWarnings("unchecked")
   public T getUpperBound() {
     return (T) getChildren().get(1);
@@ -114,6 +118,7 @@ public class AbstractRangeQueryNode<T extends FieldValuePairQueryNode<?>>
    * 
    * @return <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>
    */
+  @Override
   public boolean isLowerInclusive() {
     return lowerInclusive;
   }
@@ -123,6 +128,7 @@ public class AbstractRangeQueryNode<T extends FieldValuePairQueryNode<?>>
    * 
    * @return <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>
    */
+  @Override
   public boolean isUpperInclusive() {
     return upperInclusive;
   }
@@ -167,6 +173,7 @@ public class AbstractRangeQueryNode<T extends FieldValuePairQueryNode<?>>
     
   }
   
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     StringBuilder sb = new StringBuilder();
     
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode.java
index e562063..9655724 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode.java
@@ -53,6 +53,7 @@ public class MultiPhraseQueryNode extends QueryNodeImpl implements
     return sb.toString();
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     if (getChildren() == null || getChildren().size() == 0)
       return "";
@@ -76,6 +77,7 @@ public class MultiPhraseQueryNode extends QueryNodeImpl implements
     return clone;
   }
 
+  @Override
   public CharSequence getField() {
     List<QueryNode> children = getChildren();
 
@@ -88,6 +90,7 @@ public class MultiPhraseQueryNode extends QueryNodeImpl implements
 
   }
 
+  @Override
   public void setField(CharSequence fieldName) {
     List<QueryNode> children = getChildren();
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode.java
index b6c05e2..c1b5c8c 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode.java
@@ -68,6 +68,7 @@ public class NumericQueryNode extends QueryNodeImpl implements
    * 
    * @return the field associated with this node
    */
+  @Override
   public CharSequence getField() {
     return this.field;
   }
@@ -77,6 +78,7 @@ public class NumericQueryNode extends QueryNodeImpl implements
    * 
    * @param fieldName the field associated with this node
    */
+  @Override
   public void setField(CharSequence fieldName) {
     this.field = fieldName;
   }
@@ -94,6 +96,7 @@ public class NumericQueryNode extends QueryNodeImpl implements
         Locale.ROOT, Type.NORMAL);
   }
   
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     if (isDefaultField(this.field)) {
       return getTermEscaped(escapeSyntaxParser);
@@ -125,6 +128,7 @@ public class NumericQueryNode extends QueryNodeImpl implements
    * 
    * @return the numeric value
    */
+  @Override
   public Number getValue() {
     return value;
   }
@@ -134,6 +138,7 @@ public class NumericQueryNode extends QueryNodeImpl implements
    * 
    * @param value the numeric value
    */
+  @Override
   public void setValue(Number value) {
     this.value = value;
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode.java
index efa0989..efb7f02 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode.java
@@ -64,14 +64,17 @@ FieldableNode {
     return clone;
   }
 
+  @Override
   public CharSequence getText() {
     return text;
   }
 
+  @Override
   public void setText(CharSequence text) {
     this.text = text;
   }
 
+  @Override
   public CharSequence getField() {
     return field;
   }
@@ -80,10 +83,12 @@ FieldableNode {
     return field.toString();
   }
 
+  @Override
   public void setField(CharSequence field) {
     this.field = field;
   }
 
+  @Override
   public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {
     return isDefaultField(field)? "/"+text+"/": field + ":/" + text + "/";
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl.java
index 231eb7b..3598da0 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl.java
@@ -186,6 +186,7 @@ public class EscapeQuerySyntaxImpl implements EscapeQuerySyntax {
     return buffer;
   }
 
+  @Override
   public CharSequence escape(CharSequence text, Locale locale, Type type) {
     if (text == null || text.length() == 0)
       return text;
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream.java
index 95f5f3f..33187ab 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream.java
@@ -42,6 +42,7 @@ public final class FastCharStream implements CharStream {
     input = r;
   }
 
+  @Override
   public final char readChar() throws IOException {
     if (bufferPosition >= bufferLength)
       refill();
@@ -76,25 +77,30 @@ public final class FastCharStream implements CharStream {
       bufferLength += charsRead;
   }
 
+  @Override
   public final char BeginToken() throws IOException {
     tokenStart = bufferPosition;
     return readChar();
   }
 
+  @Override
   public final void backup(int amount) {
     bufferPosition -= amount;
   }
 
+  @Override
   public final String GetImage() {
     return new String(buffer, tokenStart, bufferPosition - tokenStart);
   }
 
+  @Override
   public final char[] GetSuffix(int len) {
     char[] value = new char[len];
     System.arraycopy(buffer, bufferPosition - len, value, 0, len);
     return value;
   }
 
+  @Override
   public final void Done() {
     try {
       input.close();
@@ -102,21 +108,27 @@ public final class FastCharStream implements CharStream {
     }
   }
 
+  @Override
   public final int getColumn() {
     return bufferStart + bufferPosition;
   }
+  @Override
   public final int getLine() {
     return 1;
   }
+  @Override
   public final int getEndColumn() {
     return bufferStart + bufferPosition;
   }
+  @Override
   public final int getEndLine() {
     return 1;
   }
+  @Override
   public final int getBeginColumn() {
     return bufferStart + tokenStart;
   }
+  @Override
   public final int getBeginLine() {
     return 1;
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java
index 4844ec8..75a6fd6 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java
@@ -58,6 +58,7 @@ public class StandardSyntaxParser implements SyntaxParser, StandardSyntaxParserC
      *  @param query  the query string to be parsed.
      *  @throws ParseException if the parsing fails
      */
+    @Override
     public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {
       ReInit(new FastCharStream(new StringReader(query.toString())));
       try {
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/Token.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/Token.java
index 95e66bb..ffd7c11 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/Token.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/Token.java
@@ -97,6 +97,7 @@ public class Token implements java.io.Serializable {
   /**
    * Returns the image.
    */
+  @Override
   public String toString()
   {
     return image;
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.java
index 9207c0f..787aacf 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.java
@@ -121,6 +121,7 @@ public class TokenMgrError extends Error
    *
    * from this method for such cases in the release version of your parser.
    */
+  @Override
   public String getMessage() {
     return super.getMessage();
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor.java
index 6868974..38deff0 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor.java
@@ -65,6 +65,7 @@ public class GroupQueryNodeProcessor implements QueryNodeProcessor {
     // empty constructor
   }
 
+  @Override
   public QueryNode process(QueryNode queryTree) throws QueryNodeException {
     Operator defaultOperator = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);
     
@@ -208,10 +209,12 @@ public class GroupQueryNodeProcessor implements QueryNodeProcessor {
 
   }
 
+  @Override
   public QueryConfigHandler getQueryConfigHandler() {
     return this.queryConfig;
   }
 
+  @Override
   public void setQueryConfigHandler(QueryConfigHandler queryConfigHandler) {
     this.queryConfig = queryConfigHandler;
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/FastCharStream.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/FastCharStream.java
index 361a037..a03377f 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/FastCharStream.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/FastCharStream.java
@@ -39,6 +39,7 @@ public final class FastCharStream implements CharStream {
     input = r;
   }
 
+  @Override
   public final char readChar() throws IOException {
     if (bufferPosition >= bufferLength)
       refill();
@@ -73,25 +74,30 @@ public final class FastCharStream implements CharStream {
       bufferLength += charsRead;
   }
 
+  @Override
   public final char BeginToken() throws IOException {
     tokenStart = bufferPosition;
     return readChar();
   }
 
+  @Override
   public final void backup(int amount) {
     bufferPosition -= amount;
   }
 
+  @Override
   public final String GetImage() {
     return new String(buffer, tokenStart, bufferPosition - tokenStart);
   }
 
+  @Override
   public final char[] GetSuffix(int len) {
     char[] value = new char[len];
     System.arraycopy(buffer, bufferPosition - len, value, 0, len);
     return value;
   }
 
+  @Override
   public final void Done() {
     try {
       input.close();
@@ -99,21 +105,27 @@ public final class FastCharStream implements CharStream {
     }
   }
 
+  @Override
   public final int getColumn() {
     return bufferStart + bufferPosition;
   }
+  @Override
   public final int getLine() {
     return 1;
   }
+  @Override
   public final int getEndColumn() {
     return bufferStart + bufferPosition;
   }
+  @Override
   public final int getEndLine() {
     return 1;
   }
+  @Override
   public final int getBeginColumn() {
     return bufferStart + tokenStart;
   }
+  @Override
   public final int getBeginLine() {
     return 1;
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/Token.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/Token.java
index d6736f8..29bb6db 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/Token.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/Token.java
@@ -97,6 +97,7 @@ public class Token implements java.io.Serializable {
   /**
    * Returns the image.
    */
+  @Override
   public String toString()
   {
     return image;
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/TokenMgrError.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/TokenMgrError.java
index c79fc21..fc9d459 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/TokenMgrError.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/TokenMgrError.java
@@ -121,6 +121,7 @@ public class TokenMgrError extends Error
    *
    * from this method for such cases in the release version of your parser.
    */
+  @Override
   public String getMessage() {
     return super.getMessage();
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/BasicQueryFactory.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/BasicQueryFactory.java
index 3d4d39b..59dab7e 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/BasicQueryFactory.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/BasicQueryFactory.java
@@ -46,6 +46,7 @@ public class BasicQueryFactory {
   public int getNrQueriesMade() {return queriesMade;}
   public int getMaxBasicQueries() {return maxBasicQueries;}
   
+  @Override
   public String toString() {
     return getClass().getName()
     + "(maxBasicQueries: " + maxBasicQueries
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/OrQuery.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/OrQuery.java
index 36d008d..4f53847 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/OrQuery.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/OrQuery.java
@@ -38,6 +38,7 @@ public class OrQuery extends ComposedQuery implements DistanceSubQuery {
       makeLuceneSubQueriesField(fieldName, qf), BooleanClause.Occur.SHOULD);
   }
   
+  @Override
   public String distanceSubQueryNotAllowed() {
     Iterator sqi = getSubQueriesIterator();
     while (sqi.hasNext()) {
@@ -54,6 +55,7 @@ public class OrQuery extends ComposedQuery implements DistanceSubQuery {
     return null;
   }
     
+  @Override
   public void addSpanQueries(SpanNearClauseFactory sncf) throws IOException {
     Iterator sqi = getSubQueriesIterator();
     while (sqi.hasNext()) {
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTerm.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTerm.java
index 6ad433b..00cc442 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTerm.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTerm.java
@@ -42,6 +42,7 @@ public abstract class SimpleTerm
   /** @deprecated (March 2011) Not normally used, to be removed from Lucene 4.0.
    *   This class implementing Comparable is to be removed at the same time.
    */
+  @Override
   @Deprecated
   public int compareTo(SimpleTerm ost) {
     /* for ordering terms and prefixes before using an index, not used */
@@ -87,6 +88,7 @@ public abstract class SimpleTerm
           sncf.getIndexReader(),
           sncf.getFieldName(),
           new MatchingTermVisitor() {
+            @Override
             public void visitMatchingTerm(Term term) throws IOException {
               sncf.addTermWeighted(term, getWeight());
             }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery.java
index 9c8496c..c3529b6 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery.java
@@ -38,6 +38,7 @@ class SimpleTermRewriteQuery extends RewriteQuery<SimpleTerm> {
     final List<Query> luceneSubQueries = new ArrayList<Query>();
     srndQuery.visitMatchingTerms(reader, fieldName,
     new SimpleTerm.MatchingTermVisitor() {
+      @Override
       public void visitMatchingTerm(Term term) throws IOException {
         luceneSubQueries.add(qf.newTermQuery(term));
       }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser.java
index d7238e2..81c6b36 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser.java
@@ -149,6 +149,7 @@ public class CoreParser implements QueryBuilder {
   }
 
 
+  @Override
   public Query getQuery(Element e) throws ParserException {
     return queryFactory.getQuery(e);
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/FilterBuilderFactory.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/FilterBuilderFactory.java
index 5bf7c34..1d804e1 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/FilterBuilderFactory.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/FilterBuilderFactory.java
@@ -31,6 +31,7 @@ public class FilterBuilderFactory implements FilterBuilder {
 
   HashMap<String, FilterBuilder> builders = new HashMap<String, FilterBuilder>();
 
+  @Override
   public Filter getFilter(Element n) throws ParserException {
     FilterBuilder builder = builders.get(n.getNodeName());
     if (builder == null) {
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/QueryBuilderFactory.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/QueryBuilderFactory.java
index 35ee0e9..23cc6e8 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/QueryBuilderFactory.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/QueryBuilderFactory.java
@@ -31,6 +31,7 @@ public class QueryBuilderFactory implements QueryBuilder {
 
   HashMap<String, QueryBuilder> builders = new HashMap<String, QueryBuilder>();
 
+  @Override
   public Query getQuery(Element n) throws ParserException {
     QueryBuilder builder = builders.get(n.getNodeName());
     if (builder == null) {
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanFilterBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanFilterBuilder.java
index 0c8262d..953a584 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanFilterBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanFilterBuilder.java
@@ -42,6 +42,7 @@ public class BooleanFilterBuilder implements FilterBuilder {
     this.factory = factory;
   }
 
+  @Override
   public Filter getFilter(Element e) throws ParserException {
     BooleanFilter bf = new BooleanFilter();
     NodeList nl = e.getChildNodes();
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder.java
index d390cbf..d59508c 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder.java
@@ -44,6 +44,7 @@ public class BooleanQueryBuilder implements QueryBuilder {
     * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)
     */
 
+  @Override
   public Query getQuery(Element e) throws ParserException {
     BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, "disableCoord", false));
     bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, "minimumNumberShouldMatch", 0));
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingQueryBuilder.java
index 6c75f95..5b962dc 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingQueryBuilder.java
@@ -36,6 +36,7 @@ public class BoostingQueryBuilder implements QueryBuilder {
     this.factory = factory;
   }
 
+  @Override
   public Query getQuery(Element e) throws ParserException {
     Element mainQueryElem = DOMUtils.getChildByTagOrFail(e, "Query");
     mainQueryElem = DOMUtils.getFirstChildOrFail(mainQueryElem);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.java
index ca4a2c1..eb920b1 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.java
@@ -30,6 +30,7 @@ import org.w3c.dom.Element;
  */
 public class BoostingTermBuilder extends SpanBuilderBase {
 
+  @Override
   public SpanQuery getSpanQuery(Element e) throws ParserException {
     String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, "fieldName");
     String value = DOMUtils.getNonBlankTextOrFail(e);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/CachedFilterBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/CachedFilterBuilder.java
index 9547649..b101ad5 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/CachedFilterBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/CachedFilterBuilder.java
@@ -60,6 +60,7 @@ public class CachedFilterBuilder implements FilterBuilder {
     this.cacheSize = cacheSize;
   }
 
+  @Override
   public synchronized Filter getFilter(Element e) throws ParserException {
     Element childElement = DOMUtils.getFirstChildOrFail(e);
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder.java
index 3d71d9c..5e811ae 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder.java
@@ -35,6 +35,7 @@ public class ConstantScoreQueryBuilder implements QueryBuilder {
     this.filterFactory = filterFactory;
   }
 
+  @Override
   public Query getQuery(Element e) throws ParserException {
     Element filterElem = DOMUtils.getFirstChildOrFail(e);
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder.java
index ab7527e..16861e3 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder.java
@@ -40,6 +40,7 @@ public class DisjunctionMaxQueryBuilder implements QueryBuilder {
     * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)
     */
 
+  @Override
   public Query getQuery(Element e) throws ParserException {
     float tieBreaker = DOMUtils.getAttribute(e, "tieBreaker", 0.0f); 
     DisjunctionMaxQuery dq = new DisjunctionMaxQuery(tieBreaker);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DuplicateFilterBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DuplicateFilterBuilder.java
index c044690..b85703a 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DuplicateFilterBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DuplicateFilterBuilder.java
@@ -32,6 +32,7 @@ import org.w3c.dom.Element;
  */
 public class DuplicateFilterBuilder implements FilterBuilder {
 
+  @Override
   public Filter getFilter(Element e) throws ParserException {
     String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, "fieldName");
     DuplicateFilter df = new DuplicateFilter(fieldName);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/FilteredQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/FilteredQueryBuilder.java
index 4fa30c9..1c2a6ec 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/FilteredQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/FilteredQueryBuilder.java
@@ -46,6 +46,7 @@ public class FilteredQueryBuilder implements QueryBuilder {
   /* (non-Javadoc)
     * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)
     */
+  @Override
   public Query getQuery(Element e) throws ParserException {
     Element filterElement = DOMUtils.getChildByTagOrFail(e, "Filter");
     filterElement = DOMUtils.getFirstChildOrFail(filterElement);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder.java
index 18bd567..c333815 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder.java
@@ -43,6 +43,7 @@ public class FuzzyLikeThisQueryBuilder implements QueryBuilder {
     this.analyzer = analyzer;
   }
 
+  @Override
   public Query getQuery(Element e) throws ParserException {
     NodeList nl = e.getElementsByTagName("Field");
     int maxNumTerms = DOMUtils.getAttribute(e, "maxNumTerms", DEFAULT_MAX_NUM_TERMS);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder.java
index 124afd7..3781c28 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder.java
@@ -54,6 +54,7 @@ public class LikeThisQueryBuilder implements QueryBuilder {
   /* (non-Javadoc)
     * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)
     */
+  @Override
   public Query getQuery(Element e) throws ParserException {
     String fieldsList = e.getAttribute("fieldNames"); //a comma-delimited list of fields
     String fields[] = defaultFieldNames;
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder.java
index 4f7dd16..36c071c 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder.java
@@ -27,6 +27,7 @@ import org.w3c.dom.Element;
  */
 public class MatchAllDocsQueryBuilder implements QueryBuilder {
   
+  @Override
   public Query getQuery(Element e) throws ParserException {
     return new MatchAllDocsQuery();
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder.java
index 4d4540a..e7fba72 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder.java
@@ -112,6 +112,7 @@ public class NumericRangeFilterBuilder implements FilterBuilder {
     this.strictMode = strictMode;
   }
 
+  @Override
   public Filter getFilter(Element e) throws ParserException {
     String field = DOMUtils.getAttributeWithInheritanceOrFail(e, "fieldName");
     String lowerTerm = DOMUtils.getAttributeOrFail(e, "lowerTerm");
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder.java
index b3db8be..f4909d1 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder.java
@@ -87,6 +87,7 @@ import org.w3c.dom.Element;
  */
 public class NumericRangeQueryBuilder implements QueryBuilder {
 
+  @Override
   public Query getQuery(Element e) throws ParserException {
     String field = DOMUtils.getAttributeWithInheritanceOrFail(e, "fieldName");
     String lowerTerm = DOMUtils.getAttributeOrFail(e, "lowerTerm");
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/RangeFilterBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/RangeFilterBuilder.java
index 1b53172..337c62d 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/RangeFilterBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/RangeFilterBuilder.java
@@ -32,6 +32,7 @@ import org.w3c.dom.Element;
  */
 public class RangeFilterBuilder implements FilterBuilder {
 
+  @Override
   public Filter getFilter(Element e) throws ParserException {
     String fieldName = DOMUtils.getAttributeWithInheritance(e, "fieldName");
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanBuilderBase.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanBuilderBase.java
index 8cf4a43..d1c4531 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanBuilderBase.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanBuilderBase.java
@@ -26,6 +26,7 @@ import org.w3c.dom.Element;
  */
 public abstract class SpanBuilderBase implements SpanQueryBuilder {
   
+  @Override
   public Query getQuery(Element e) throws ParserException {
     return getSpanQuery(e);
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder.java
index 650ea20..d2288b4 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder.java
@@ -33,6 +33,7 @@ public class SpanFirstBuilder extends SpanBuilderBase {
     this.factory = factory;
   }
 
+  @Override
   public SpanQuery getSpanQuery(Element e) throws ParserException {
     int end = DOMUtils.getAttribute(e, "end", 1);
     Element child = DOMUtils.getFirstChildElement(e);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNearBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNearBuilder.java
index 6140b8a..548844e 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNearBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNearBuilder.java
@@ -37,6 +37,7 @@ public class SpanNearBuilder extends SpanBuilderBase {
     this.factory = factory;
   }
 
+  @Override
   public SpanQuery getSpanQuery(Element e) throws ParserException {
     String slopString = DOMUtils.getAttributeOrFail(e, "slop");
     int slop = Integer.parseInt(slopString);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.java
index 6006fa6..0be6dc8 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.java
@@ -33,6 +33,7 @@ public class SpanNotBuilder extends SpanBuilderBase {
     this.factory = factory;
   }
 
+  @Override
   public SpanQuery getSpanQuery(Element e) throws ParserException {
     Element includeElem = DOMUtils.getChildByTagOrFail(e, "Include");
     includeElem = DOMUtils.getFirstChildOrFail(includeElem);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrBuilder.java
index aee26f2..54d0618 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrBuilder.java
@@ -37,6 +37,7 @@ public class SpanOrBuilder extends SpanBuilderBase {
     this.factory = factory;
   }
 
+  @Override
   public SpanQuery getSpanQuery(Element e) throws ParserException {
     List<SpanQuery> clausesList = new ArrayList<SpanQuery>();
     for (Node kid = e.getFirstChild(); kid != null; kid = kid.getNextSibling()) {
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.java
index 1c9dc60..9985366 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.java
@@ -44,6 +44,7 @@ public class SpanOrTermsBuilder extends SpanBuilderBase {
     this.analyzer = analyzer;
   }
 
+  @Override
   public SpanQuery getSpanQuery(Element e) throws ParserException {
     String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, "fieldName");
     String value = DOMUtils.getNonBlankTextOrFail(e);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory.java
index 02cc059..4c7f200 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory.java
@@ -31,6 +31,7 @@ public class SpanQueryBuilderFactory implements SpanQueryBuilder {
 
   private final Map<String, SpanQueryBuilder> builders = new HashMap<String, SpanQueryBuilder>();
 
+  @Override
   public Query getQuery(Element e) throws ParserException {
     return getSpanQuery(e);
   }
@@ -39,6 +40,7 @@ public class SpanQueryBuilderFactory implements SpanQueryBuilder {
     builders.put(nodeName, builder);
   }
 
+  @Override
   public SpanQuery getSpanQuery(Element e) throws ParserException {
     SpanQueryBuilder builder = builders.get(e.getNodeName());
     if (builder == null) {
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanTermBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanTermBuilder.java
index 45f06cf..bc16975 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanTermBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanTermBuilder.java
@@ -28,6 +28,7 @@ import org.w3c.dom.Element;
  */
 public class SpanTermBuilder extends SpanBuilderBase {
 
+  @Override
   public SpanQuery getSpanQuery(Element e) throws ParserException {
     String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, "fieldName");
     String value = DOMUtils.getNonBlankTextOrFail(e);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermQueryBuilder.java
index 31eb744..d949b3b 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermQueryBuilder.java
@@ -29,6 +29,7 @@ import org.w3c.dom.Element;
  */
 public class TermQueryBuilder implements QueryBuilder {
 
+  @Override
   public Query getQuery(Element e) throws ParserException {
     String field = DOMUtils.getAttributeWithInheritanceOrFail(e, "fieldName");
     String value = DOMUtils.getNonBlankTextOrFail(e);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder.java
index e162d89..e614608 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder.java
@@ -50,6 +50,7 @@ public class TermsFilterBuilder implements FilterBuilder {
     *
     * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)
     */
+  @Override
   public Filter getFilter(Element e) throws ParserException {
     List<BytesRef> terms = new ArrayList<BytesRef>();
     String text = DOMUtils.getNonBlankTextOrFail(e);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder.java
index 0fcaf82..29f03e8 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder.java
@@ -45,6 +45,7 @@ public class TermsQueryBuilder implements QueryBuilder {
     this.analyzer = analyzer;
   }
 
+  @Override
   public Query getQuery(Element e) throws ParserException {
     String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, "fieldName");
     String text = DOMUtils.getNonBlankTextOrFail(e);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder.java
index 1020e4b..424d2c7 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder.java
@@ -57,6 +57,7 @@ public class UserInputQueryBuilder implements QueryBuilder {
     * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)
     */
 
+  @Override
   public Query getQuery(Element e) throws ParserException {
     String text = DOMUtils.getText(e);
     try {
diff --git a/lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer.java b/lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer.java
index cbfabfe..c8bc1be 100644
--- a/lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer.java
+++ b/lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer.java
@@ -180,6 +180,7 @@ public class TestMultiAnalyzer extends BaseTokenStreamTestCase {
       }
     }
 
+    @Override
     public void reset() throws IOException {
       super.reset();
       this.prevType = null;
diff --git a/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/builders/TestQueryTreeBuilder.java b/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/builders/TestQueryTreeBuilder.java
index be49266..2fe5e91 100644
--- a/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/builders/TestQueryTreeBuilder.java
+++ b/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/builders/TestQueryTreeBuilder.java
@@ -39,6 +39,7 @@ public class TestQueryTreeBuilder extends LuceneTestCase {
   
   private static class DummyBuilder implements QueryBuilder {
 
+    @Override
     public Object build(QueryNode queryNode) throws QueryNodeException {
       return "OK";
     }
diff --git a/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/spans/SpanOrQueryNodeBuilder.java b/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/spans/SpanOrQueryNodeBuilder.java
index 9c644a1..edfd7a2 100644
--- a/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/spans/SpanOrQueryNodeBuilder.java
+++ b/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/spans/SpanOrQueryNodeBuilder.java
@@ -35,6 +35,7 @@ import org.apache.lucene.search.spans.SpanQuery;
  */
 public class SpanOrQueryNodeBuilder implements StandardQueryBuilder {
 
+  @Override
   public SpanOrQuery build(QueryNode node) throws QueryNodeException {
 
     // validates node
diff --git a/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/spans/SpanTermQueryNodeBuilder.java b/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/spans/SpanTermQueryNodeBuilder.java
index c1c57fa..e6aef51 100644
--- a/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/spans/SpanTermQueryNodeBuilder.java
+++ b/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/spans/SpanTermQueryNodeBuilder.java
@@ -30,6 +30,7 @@ import org.apache.lucene.search.spans.SpanTermQuery;
  */
 public class SpanTermQueryNodeBuilder implements StandardQueryBuilder {
 
+  @Override
   public SpanTermQuery build(QueryNode node) throws QueryNodeException {
     FieldQueryNode fieldQueryNode = (FieldQueryNode) node;
 
diff --git a/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/spans/UniqueFieldAttributeImpl.java b/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/spans/UniqueFieldAttributeImpl.java
index 021cc1a..6f7c25b 100644
--- a/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/spans/UniqueFieldAttributeImpl.java
+++ b/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/spans/UniqueFieldAttributeImpl.java
@@ -42,10 +42,12 @@ public class UniqueFieldAttributeImpl extends AttributeImpl implements
     this.uniqueField = "";
   }
 
+  @Override
   public void setUniqueField(CharSequence uniqueField) {
     this.uniqueField = uniqueField;
   }
 
+  @Override
   public CharSequence getUniqueField() {
     return this.uniqueField;
   }
diff --git a/lucene/queryparser/src/test/org/apache/lucene/queryparser/surround/query/Test02Boolean.java b/lucene/queryparser/src/test/org/apache/lucene/queryparser/surround/query/Test02Boolean.java
index 5ca4fbf..563506a 100644
--- a/lucene/queryparser/src/test/org/apache/lucene/queryparser/surround/query/Test02Boolean.java
+++ b/lucene/queryparser/src/test/org/apache/lucene/queryparser/surround/query/Test02Boolean.java
@@ -39,6 +39,7 @@ public class Test02Boolean extends LuceneTestCase {
     "a c e a b c"
   };
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     db1 = new SingleFieldTestDb(random(), docs1, fieldName);
diff --git a/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/JakartaRegexpCapabilities.java b/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/JakartaRegexpCapabilities.java
index bb62e28..7ef3862 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/JakartaRegexpCapabilities.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/JakartaRegexpCapabilities.java
@@ -81,6 +81,7 @@ public class JakartaRegexpCapabilities implements RegexCapabilities {
     this.flags = flags;
   }
   
+  @Override
   public RegexCapabilities.RegexMatcher compile(String regex) {
     return new JakartaRegexMatcher(regex, flags);
   }
@@ -115,18 +116,22 @@ public class JakartaRegexpCapabilities implements RegexCapabilities {
     private final CharsRef utf16 = new CharsRef(10);
     private final CharacterIterator utf16wrapper = new CharacterIterator() {
 
+      @Override
       public char charAt(int pos) {
         return utf16.chars[pos];
       }
 
+      @Override
       public boolean isEnd(int pos) {
         return pos >= utf16.length;
       }
 
+      @Override
       public String substring(int beginIndex) {
         return substring(beginIndex, utf16.length);
       }
 
+      @Override
       public String substring(int beginIndex, int endIndex) {
         return new String(utf16.chars, beginIndex, endIndex - beginIndex);
       }
@@ -137,11 +142,13 @@ public class JakartaRegexpCapabilities implements RegexCapabilities {
       regexp = new RE(regex, flags);
     }
     
+    @Override
     public boolean match(BytesRef term) {
       UnicodeUtil.UTF8toUTF16(term.bytes, term.offset, term.length, utf16);
       return regexp.match(utf16wrapper, 0);
     }
 
+    @Override
     public String prefix() {
       try {
         final char[] prefix;
diff --git a/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/JavaUtilRegexCapabilities.java b/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/JavaUtilRegexCapabilities.java
index 894a427..443c7a9 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/JavaUtilRegexCapabilities.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/JavaUtilRegexCapabilities.java
@@ -72,6 +72,7 @@ public class JavaUtilRegexCapabilities implements RegexCapabilities {
     this.flags = flags;
   }
   
+  @Override
   public RegexCapabilities.RegexMatcher compile(String regex) {
     return new JavaUtilRegexMatcher(regex, flags);
   }
@@ -110,11 +111,13 @@ public class JavaUtilRegexCapabilities implements RegexCapabilities {
       this.matcher = this.pattern.matcher(utf16);
     }
     
+    @Override
     public boolean match(BytesRef term) {
       UnicodeUtil.UTF8toUTF16(term.bytes, term.offset, term.length, utf16);
       return matcher.reset().matches();
     }
 
+    @Override
     public String prefix() {
       return null;
     }
diff --git a/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQuery.java b/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQuery.java
index 5ac67f4..e4038c3 100644
--- a/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQuery.java
+++ b/lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQuery.java
@@ -51,10 +51,12 @@ public class RegexQuery extends MultiTermQuery implements RegexQueryCapable {
     return term;
   }
 
+  @Override
   public void setRegexImplementation(RegexCapabilities impl) {
     this.regexImpl = impl;
   }
 
+  @Override
   public RegexCapabilities getRegexImplementation() {
     return regexImpl;
   }
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxSimilarityValueSource.java b/lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxSimilarityValueSource.java
index 58e1acd..607e34e 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxSimilarityValueSource.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxSimilarityValueSource.java
@@ -89,6 +89,7 @@ public class BBoxSimilarityValueSource extends ValueSource {
         }
       }
 
+      @Override
       public Explanation explain(int doc) {
         // make sure it has minX and area
         if (validMinX.get(doc) && validMaxX.get(doc)) {
diff --git a/lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest.java b/lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest.java
index 9bfec76..1fb1d25 100644
--- a/lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest.java
+++ b/lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest.java
@@ -31,6 +31,7 @@ public class SpatialPrefixTreeTest extends LuceneTestCase {
   private SpatialContext ctx;
   private SpatialPrefixTree trie;
 
+  @Override
   @Before
   public void setUp() throws Exception {
     super.setUp();
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java b/lucene/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java
index f709541..cb9d0c3 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java
@@ -458,6 +458,7 @@ public class DirectSpellChecker {
     public String termAsString;
     public float score;
     
+    @Override
     public int compareTo(ScoreTerm other) {
       if (term.bytesEquals(other.term))
         return 0; // consistent with equals
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java b/lucene/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java
index e9f908d..c05f583 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.java
@@ -55,6 +55,7 @@ public class HighFrequencyDictionary implements Dictionary {
     this.thresh = thresh;
   }
 
+  @Override
   public final BytesRefIterator getWordsIterator() throws IOException {
     return new HighFrequencyIterator();
   }
@@ -79,6 +80,7 @@ public class HighFrequencyDictionary implements Dictionary {
       return freq >= minNumDocs;
     }
     
+    @Override
     public long weight() {
       return freq;
     }
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/spell/JaroWinklerDistance.java b/lucene/suggest/src/java/org/apache/lucene/search/spell/JaroWinklerDistance.java
index 6b8eba2..d3d2a7b 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/spell/JaroWinklerDistance.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/spell/JaroWinklerDistance.java
@@ -92,6 +92,7 @@ public class JaroWinklerDistance implements StringDistance {
     return new int[] { matches, transpositions / 2, prefix, max.length() };
   }
 
+  @Override
   public float getDistance(String s1, String s2) {
     int[] mtp = matches(s1, s2);
     float m = mtp[0];
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/spell/LevensteinDistance.java b/lucene/suggest/src/java/org/apache/lucene/search/spell/LevensteinDistance.java
index f26fd7d..5d9ccd4 100755
--- a/lucene/suggest/src/java/org/apache/lucene/search/spell/LevensteinDistance.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/spell/LevensteinDistance.java
@@ -33,6 +33,7 @@ public final class LevensteinDistance implements StringDistance {
     //*****************************
     // Compute Levenshtein distance: see org.apache.commons.lang.StringUtils#getLevenshteinDistance(String, String)
     //*****************************
+    @Override
     public float getDistance (String target, String other) {
       char[] sa;
       int n;
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/spell/LuceneDictionary.java b/lucene/suggest/src/java/org/apache/lucene/search/spell/LuceneDictionary.java
index 6bd77be..b5d6627 100755
--- a/lucene/suggest/src/java/org/apache/lucene/search/spell/LuceneDictionary.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/spell/LuceneDictionary.java
@@ -41,6 +41,7 @@ public class LuceneDictionary implements Dictionary {
     this.field = field;
   }
 
+  @Override
   public final BytesRefIterator getWordsIterator() throws IOException {
     final Terms terms = MultiFields.getTerms(reader, field);
     if (terms != null) {
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/spell/NGramDistance.java b/lucene/suggest/src/java/org/apache/lucene/search/spell/NGramDistance.java
index 7e6d0b5..65e3a60 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/spell/NGramDistance.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/spell/NGramDistance.java
@@ -50,6 +50,7 @@ public class NGramDistance implements StringDistance {
     this(2);
   }
   
+  @Override
   public float getDistance(String source, String target) {
     final int sl = source.length();
     final int tl = target.length();
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/spell/PlainTextDictionary.java b/lucene/suggest/src/java/org/apache/lucene/search/spell/PlainTextDictionary.java
index ff4360a..27ec4d2 100755
--- a/lucene/suggest/src/java/org/apache/lucene/search/spell/PlainTextDictionary.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/spell/PlainTextDictionary.java
@@ -63,6 +63,7 @@ public class PlainTextDictionary implements Dictionary {
     in = new BufferedReader(reader);
   }
 
+  @Override
   public BytesRefIterator getWordsIterator() throws IOException {
     return new FileIterator();
   }
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java b/lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
index 162ff92..7aadbb6 100755
--- a/lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
@@ -635,6 +635,7 @@ public class SpellChecker implements java.io.Closeable {
    * @throws IOException if the close operation causes an {@link IOException}
    * @throws AlreadyClosedException if the {@link SpellChecker} is already closed
    */
+  @Override
   public void close() throws IOException {
     synchronized (searcherLock) {
       ensureOpen();
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/spell/SuggestWordFrequencyComparator.java b/lucene/suggest/src/java/org/apache/lucene/search/spell/SuggestWordFrequencyComparator.java
index 4d40c5d..67fdc38 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/spell/SuggestWordFrequencyComparator.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/spell/SuggestWordFrequencyComparator.java
@@ -31,6 +31,7 @@ public class SuggestWordFrequencyComparator implements Comparator<SuggestWord> {
    */
   public SuggestWordFrequencyComparator() {}
 
+  @Override
   public int compare(SuggestWord first, SuggestWord second) {
     // first criteria: the frequency
     if (first.freq > second.freq) {
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/spell/SuggestWordScoreComparator.java b/lucene/suggest/src/java/org/apache/lucene/search/spell/SuggestWordScoreComparator.java
index bfc174f..2e125e8 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/spell/SuggestWordScoreComparator.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/spell/SuggestWordScoreComparator.java
@@ -31,6 +31,7 @@ public class SuggestWordScoreComparator implements Comparator<SuggestWord> {
    */
   public SuggestWordScoreComparator() {}
 
+  @Override
   public int compare(SuggestWord first, SuggestWord second) {
     // first criteria: the distance
     if (first.score > second.score) {
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/spell/TermFreqIterator.java b/lucene/suggest/src/java/org/apache/lucene/search/spell/TermFreqIterator.java
index 13aba48..2487a0b 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/spell/TermFreqIterator.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/spell/TermFreqIterator.java
@@ -46,10 +46,12 @@ public interface TermFreqIterator extends BytesRefIterator {
       this.wrapped = wrapped;
     }
 
+    @Override
     public long weight() {
       return 1;
     }
 
+    @Override
     public BytesRef next() throws IOException {
       return wrapped.next();
     }
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper.java
index d686ba3..20b5182 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper.java
@@ -53,6 +53,7 @@ public class BufferingTermFreqIteratorWrapper implements TermFreqIterator {
    
   }
 
+  @Override
   public long weight() {
     return freqs[curPos];
   }
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/FileDictionary.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/FileDictionary.java
index c032b1f..26d4e42 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/FileDictionary.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/FileDictionary.java
@@ -57,6 +57,7 @@ public class FileDictionary implements Dictionary {
     in = new BufferedReader(reader);
   }
 
+  @Override
   public TermFreqIterator getWordsIterator() {
     return new FileIterator();
   }
@@ -66,6 +67,7 @@ public class FileDictionary implements Dictionary {
     private final BytesRef spare = new BytesRef();
     
    
+    @Override
     public long weight() {
       return curFreq;
     }
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/Lookup.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/Lookup.java
index 88e4f48..d55c828 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/Lookup.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/Lookup.java
@@ -56,6 +56,7 @@ public abstract class Lookup {
     }
 
     /** Compare alphabetically. */
+    @Override
     public int compareTo(LookupResult o) {
       return CHARSEQUENCE_COMPARATOR.compare(key, o.key);
     }
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java
index 1c4c05e..552cfea 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.java
@@ -799,6 +799,7 @@ public class AnalyzingSuggester extends Lookup {
   }
    
   static final Comparator<Pair<Long,BytesRef>> weightComparator = new Comparator<Pair<Long,BytesRef>> () {
+    @Override
     public int compare(Pair<Long,BytesRef> left, Pair<Long,BytesRef> right) {
       return left.output1.compareTo(right.output1);
     }
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter.java
index e23508b..56da7b2 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter.java
@@ -52,6 +52,7 @@ public class ExternalRefSorter implements BytesRefSorter, Closeable {
     writer.write(utf8);
   }
   
+  @Override
   public BytesRefIterator iterator() throws IOException {
     if (sorted == null) {
       closeWriter();
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion.java
index 38f3276..8d8d8b7 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion.java
@@ -58,6 +58,7 @@ public class FSTCompletion {
     }
 
     /** @see BytesRef#compareTo(BytesRef) */
+    @Override
     public int compareTo(Completion o) {
       return this.utf8.compareTo(o.utf8);
     }
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.java
index 1cd5f75..3b05d50 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.java
@@ -344,6 +344,7 @@ public final class Sort {
     ByteSequencesWriter out = new ByteSequencesWriter(outputFile);
 
     PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {
+      @Override
       protected boolean lessThan(FileAndTop a, FileAndTop b) {
         return comparator.compare(a.current, b.current) < 0;
       }
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup.java
index 6b2ba97..1a7ff36 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup.java
@@ -278,6 +278,7 @@ public class WFSTCompletionLookup extends Lookup {
   }
   
   static final Comparator<Long> weightComparator = new Comparator<Long> () {
+    @Override
     public int compare(Long left, Long right) {
       return left.compareTo(right);
     }  
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker.java b/lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker.java
index 8504b99..afd64ea 100755
--- a/lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker.java
@@ -490,6 +490,7 @@ public class TestSpellChecker extends LuceneTestCase {
       this.reader = reader;
     }
     
+    @Override
     public void run() {
       try {
         while (true) {
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/Average.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/Average.java
index 411b5a1..5f47325 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/Average.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/Average.java
@@ -45,6 +45,7 @@ final class Average
         this.stddev = stddev;
     }
 
+    @Override
     public String toString()
     {
         return String.format(Locale.ROOT, "%.0f [+- %.2f]", 
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest.java
index 4a50e8d..909235e 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest.java
@@ -122,6 +122,7 @@ public class LookupBenchmarkTest extends LuceneTestCase {
     System.err.println("-- construction time");
     for (final Class<? extends Lookup> cls : benchmarkClasses) {
       BenchmarkResult result = measure(new Callable<Integer>() {
+        @Override
         public Integer call() throws Exception {
           final Lookup lookup = buildLookup(cls, dictionaryInput);          
           return lookup.hashCode();
@@ -222,6 +223,7 @@ public class LookupBenchmarkTest extends LuceneTestCase {
       }
 
       BenchmarkResult result = measure(new Callable<Integer>() {
+        @Override
         public Integer call() throws Exception {
           int v = 0;
           for (String term : input) {
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/TermFreqArrayIterator.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/TermFreqArrayIterator.java
index 06d7301..8c6862f 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/TermFreqArrayIterator.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/TermFreqArrayIterator.java
@@ -44,6 +44,7 @@ public final class TermFreqArrayIterator implements TermFreqIterator {
     this(i.iterator());
   }
   
+  @Override
   public long weight() {
     return current.v;
   }
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest.java
index 0057d9a..f39bb5c 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest.java
@@ -691,6 +691,7 @@ public class AnalyzingSuggesterTest extends LuceneTestCase {
 
       if (matches.size() > 1) {
         Collections.sort(matches, new Comparator<TermFreq2>() {
+            @Override
             public int compare(TermFreq2 left, TermFreq2 right) {
               int cmp = Float.compare(right.weight, left.weight);
               if (cmp == 0) {
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest.java
index 3df8110..d7e79e1 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest.java
@@ -745,6 +745,7 @@ public class FuzzySuggesterTest extends LuceneTestCase {
 
       if (matches.size() > 1) {
         Collections.sort(matches, new Comparator<LookupResult>() {
+            @Override
             public int compare(LookupResult left, LookupResult right) {
               int cmp = Float.compare(right.value, left.value);
               if (cmp == 0) {
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest.java
index 71f9114..ff835bd 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest.java
@@ -35,6 +35,7 @@ public class FSTCompletionTest extends LuceneTestCase {
   private FSTCompletion completion;
   private FSTCompletion completionAlphabetical;
 
+  @Override
   public void setUp() throws Exception {
     super.setUp();
 
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort.java
index 50516b8..c6adb97 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort.java
@@ -95,6 +95,7 @@ public class TestSort extends LuceneTestCase {
   }
   
   static final Comparator<byte[]> unsignedByteOrderComparator = new Comparator<byte[]>() {
+    @Override
     public int compare(byte[] left, byte[] right) {
       final int max = Math.min(left.length, right.length);
       for (int i = 0, j = 0; i < max; i++, j++) {
diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest.java
index 65e281a..3d96ba7 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest.java
@@ -173,6 +173,7 @@ public class WFSTCompletionTest extends LuceneTestCase {
 
       assertTrue(matches.size() > 0);
       Collections.sort(matches, new Comparator<LookupResult>() {
+        @Override
         public int compare(LookupResult left, LookupResult right) {
           int cmp = Float.compare(right.value, left.value);
           if (cmp == 0) {
diff --git a/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java b/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
index 3c1eb67..a6176f5 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
@@ -72,6 +72,7 @@ public abstract class BaseTokenStreamTestCase extends LuceneTestCase {
   public static final class CheckClearAttributesAttributeImpl extends AttributeImpl implements CheckClearAttributesAttribute {
     private boolean clearCalled = false;
     
+    @Override
     public boolean getAndResetClearCalled() {
       try {
         return clearCalled;
diff --git a/lucene/test-framework/src/java/org/apache/lucene/analysis/CannedBinaryTokenStream.java b/lucene/test-framework/src/java/org/apache/lucene/analysis/CannedBinaryTokenStream.java
index adf1bbe..84791c3 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/analysis/CannedBinaryTokenStream.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/analysis/CannedBinaryTokenStream.java
@@ -81,6 +81,7 @@ public final class CannedBinaryTokenStream extends TokenStream {
       return bytes;
     }
 
+    @Override
     public void setBytesRef(BytesRef bytes) {
       this.bytes.copyBytes(bytes);
     }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat.java
index 0cf6779..7650ee4 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat.java
@@ -90,6 +90,7 @@ public final class MockFixedIntBlockPostingsFormat extends PostingsFormat {
         protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) {
           return new BlockReader() {
             public void seek(long pos) {}
+            @Override
             public void readBlock() throws IOException {
               for(int i=0;i<buffer.length;i++) {
                 buffer[i] = in.readVInt();
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.java
index bb9195e..a3bc21a 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.java
@@ -91,7 +91,9 @@ public final class MockVariableIntBlockPostingsFormat extends PostingsFormat {
         @Override
         protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) {
           return new BlockReader() {
+            @Override
             public void seek(long pos) {}
+            @Override
             public int readBlock() throws IOException {
               buffer[0] = in.readVInt();
               final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java
index fddd4da..90e404c 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java
@@ -63,6 +63,7 @@ public final class RAMOnlyPostingsFormat extends PostingsFormat {
   // sorted, and basic things still work -- this comparator
   // sorts in reversed unicode code point order:
   private static final Comparator<BytesRef> reverseUnicodeComparator = new Comparator<BytesRef>() {
+      @Override
       public int compare(BytesRef t1, BytesRef t2) {
         byte[] b1 = t1.bytes;
         byte[] b2 = t2.bytes;
diff --git a/lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter.java b/lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter.java
index cf6d3a8..3f9e483 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter.java
@@ -450,6 +450,7 @@ public class RandomIndexWriter implements Closeable {
    * Close this writer.
    * @see IndexWriter#close()
    */
+  @Override
   public void close() throws IOException {
     // if someone isn't using getReader() API, we want to be sure to
     // forceMerge since presumably they might open a reader on the dir.
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule.java b/lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule.java
index 45b598a..881da27 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/AbstractBeforeAfterRule.java
@@ -37,6 +37,7 @@ abstract class AbstractBeforeAfterRule implements TestRule {
   @Override
   public Statement apply(final Statement s, final Description d) {
     return new Statement() {
+      @Override
       public void evaluate() throws Throwable {
         final ArrayList<Throwable> errors = new ArrayList<Throwable>();
 
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/LineFileDocs.java b/lucene/test-framework/src/java/org/apache/lucene/util/LineFileDocs.java
index 227cb40..c0c721f 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/util/LineFileDocs.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/LineFileDocs.java
@@ -67,6 +67,7 @@ public class LineFileDocs implements Closeable {
     this(random, LuceneTestCase.TEST_LINE_DOCS_FILE, useDocValues);
   }
 
+  @Override
   public synchronized void close() throws IOException {
     if (reader != null) {
       reader.close();
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java b/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
index 4cf82a8..44974da 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
@@ -393,6 +393,7 @@ public abstract class LuceneTestCase extends Assert {
     .around(suiteFailureMarker)
     .around(new TestRuleAssertionsRequired())
     .around(new StaticFieldsInvariantRule(STATIC_LEAK_THRESHOLD, true) {
+      @Override
       protected boolean accept(java.lang.reflect.Field field) {
         // Don't count known classes that consume memory once.
         if (STATIC_LEAK_IGNORED_TYPES.contains(field.getType().getName())) {
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreInstanceEnv.java b/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreInstanceEnv.java
index d8f8555..8442027 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreInstanceEnv.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreInstanceEnv.java
@@ -26,10 +26,12 @@ import org.apache.lucene.search.BooleanQuery;
 final class TestRuleSetupAndRestoreInstanceEnv extends AbstractBeforeAfterRule {
   private int savedBoolMaxClauseCount;
 
+  @Override
   protected void before() {
     savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();
   }
 
+  @Override
   protected void after() {
     BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);
   }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleThreadAndTestName.java b/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleThreadAndTestName.java
index dadc965..1803ebb 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleThreadAndTestName.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleThreadAndTestName.java
@@ -39,6 +39,7 @@ final class TestRuleThreadAndTestName implements TestRule {
   @Override
   public Statement apply(final Statement base, final Description description) {
     return new Statement() {
+      @Override
       public void evaluate() throws Throwable {
         try {
           Thread current = Thread.currentThread();
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil.java b/lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil.java
index d2760ae..b086070 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil.java
@@ -711,6 +711,7 @@ public class _TestUtil {
   public static <T> void assertAttributeReflection(final AttributeImpl att, Map<String,T> reflectedValues) {
     final Map<String,Object> map = new HashMap<String,Object>();
     att.reflectWith(new AttributeReflector() {
+      @Override
       public void reflect(Class<? extends Attribute> attClass, String key, Object value) {
         map.put(attClass.getName() + '#' + key, value);
       }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester.java b/lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester.java
index 2277b3b..4c52956 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester.java
@@ -171,6 +171,7 @@ public class FSTTester<T> {
       this.output = output;
     }
 
+    @Override
     public int compareTo(InputOutput<T> other) {
       if (other instanceof InputOutput) {
         return input.compareTo((other).input);
diff --git a/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent.java b/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent.java
index 697babe..7c096dc 100644
--- a/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent.java
+++ b/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent.java
@@ -187,6 +187,7 @@ public class ClusteringComponent extends SearchComponent implements SolrCoreAwar
     this.initParams = args;
   }
 
+  @Override
   public void inform(SolrCore core) {
     if (initParams != null) {
       log.info("Initializing Clustering Engines");
diff --git a/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.java b/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.java
index 9170e8b..5b8332d 100644
--- a/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.java
+++ b/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.java
@@ -113,6 +113,7 @@ public class LuceneCarrot2StemmerFactory implements IStemmerFactory {
         this.snowballStemmer = snowballStemmer;
       }
 
+      @Override
       public CharSequence stem(CharSequence word) {
         snowballStemmer.setCurrent(word.toString());
         if (snowballStemmer.stem()) {
@@ -185,6 +186,7 @@ public class LuceneCarrot2StemmerFactory implements IStemmerFactory {
         normalizer = new org.apache.lucene.analysis.ar.ArabicNormalizer();
       }
 
+      @Override
       public CharSequence stem(CharSequence word) {
         if (word.length() > buffer.length) {
           buffer = new char[word.length()];
diff --git a/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2TokenizerFactory.java b/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2TokenizerFactory.java
index c3d3a18..998c6b7 100644
--- a/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2TokenizerFactory.java
+++ b/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2TokenizerFactory.java
@@ -115,6 +115,7 @@ public class LuceneCarrot2TokenizerFactory implements ITokenizerFactory {
             "org.apache.lucene.analysis.cn.smart.WordTokenFilter", false);
       }
 
+      @Override
       public short nextToken() throws IOException {
         final boolean hasNextToken = wordTokenFilter.incrementToken();
         if (hasNextToken) {
@@ -137,10 +138,12 @@ public class LuceneCarrot2TokenizerFactory implements ITokenizerFactory {
         return ITokenizer.TT_EOF;
       }
 
+      @Override
       public void setTermBuffer(MutableCharArray array) {
         array.reset(term.buffer(), 0, term.length());
       }
 
+      @Override
       public void reset(Reader input) {
         try {
           sentenceTokenizer.setReader(input);
diff --git a/solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.java b/solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.java
index 92575dc..99806bb 100644
--- a/solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.java
+++ b/solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.java
@@ -323,10 +323,12 @@ public class MailEntityProcessor extends EntityProcessorBase {
       getTopLevelFolders(mailBox);
     }
 
+    @Override
     public boolean hasNext() {
       return !folders.isEmpty();
     }
 
+    @Override
     public Folder next() {
       try {
         boolean hasMessages = false;
@@ -370,6 +372,7 @@ public class MailEntityProcessor extends EntityProcessorBase {
       return null;
     }
 
+    @Override
     public void remove() {
       throw new UnsupportedOperationException("Its read only mode...");
     }
@@ -461,6 +464,7 @@ public class MailEntityProcessor extends EntityProcessorBase {
       LOG.info("Messages in this batch  : " + messagesInCurBatch.length);
     }
 
+    @Override
     public boolean hasNext() {
       boolean hasMore = current < messagesInCurBatch.length;
       if (!hasMore && doBatching
@@ -477,10 +481,12 @@ public class MailEntityProcessor extends EntityProcessorBase {
       return hasMore;
     }
 
+    @Override
     public Message next() {
       return hasNext() ? messagesInCurBatch[current++] : null;
     }
 
+    @Override
     public void remove() {
       throw new UnsupportedOperationException("Its read only mode...");
     }
@@ -510,6 +516,7 @@ public class MailEntityProcessor extends EntityProcessorBase {
       since = date;
     }
 
+    @Override
     public SearchTerm getCustomSearch(Folder folder) {
       return new ReceivedDateTerm(ComparisonTerm.GE, since);
     }
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHCache.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHCache.java
index 5c8f715..ae7ddb6 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHCache.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHCache.java
@@ -77,6 +77,7 @@ public interface DIHCache extends Iterable<Map<String,Object>> {
    * in key, then insertion, order.
    * </p>
    */
+  @Override
   public Iterator<Map<String,Object>> iterator();
   
   /**
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler.java
index a2cc5d0..4fc0652 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler.java
@@ -81,6 +81,7 @@ public class DataImportHandler extends RequestHandlerBase implements
     super.init(args);
   }
 
+  @Override
   @SuppressWarnings("unchecked")
   public void inform(SolrCore core) {
     try {
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileListEntityProcessor.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileListEntityProcessor.java
index 6d71e2a..0fda4a6 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileListEntityProcessor.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileListEntityProcessor.java
@@ -225,6 +225,7 @@ public class FileListEntityProcessor extends EntityProcessorBase {
     // Rather we make use of the fileDetails array which is populated as
     // a side affect of the accept method.
     dir.list(new FilenameFilter() {
+      @Override
       public boolean accept(File dir, String name) {
         File fileObj = new File(dir, name);
         if (fileObj.isDirectory()) {
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.java
index 6d6a1eb..ccaf3a6 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.java
@@ -125,6 +125,7 @@ public class JdbcDataSource extends
     }
 
     return factory = new Callable<Connection>() {
+      @Override
       public Connection call() throws Exception {
         LOG.info("Creating a connection for entity "
                 + context.getEntityAttribute(DataImporter.NAME) + " with URL: "
@@ -257,14 +258,17 @@ public class JdbcDataSource extends
       }
 
       rSetIterator = new Iterator<Map<String, Object>>() {
+        @Override
         public boolean hasNext() {
           return hasnext();
         }
 
+        @Override
         public Map<String, Object> next() {
           return getARow();
         }
 
+        @Override
         public void remove() {/* do nothing */
         }
       };
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrQueryEscapingEvaluator.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrQueryEscapingEvaluator.java
index 8468c36..7f381f8 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrQueryEscapingEvaluator.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrQueryEscapingEvaluator.java
@@ -24,6 +24,7 @@ import org.apache.solr.client.solrj.util.ClientUtils;
  */
 
 public class SolrQueryEscapingEvaluator extends Evaluator {
+  @Override
   public String evaluate(String expression, Context context) {
     List<Object> l = parseParams(expression, context.getVariableResolver());
     if (l.size() != 1) {
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor.java
index 1660bf0..c18ae65 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor.java
@@ -316,6 +316,7 @@ public class XPathEntityProcessor extends EntityProcessorBase {
       } else {
         try {
           xpathReader.streamRecords(data, new XPathRecordReader.Handler() {
+            @Override
             @SuppressWarnings("unchecked")
             public void handle(Map<String, Object> record, String xpath) {
               rows.add(readRow(record, xpath));
@@ -425,6 +426,7 @@ public class XPathEntityProcessor extends EntityProcessorBase {
       public void run() {
         try {
           xpathReader.streamRecords(data, new XPathRecordReader.Handler() {
+            @Override
             @SuppressWarnings("unchecked")
             public void handle(Map<String, Object> record, String xpath) {
               if (isEnd.get()) {
@@ -475,10 +477,12 @@ public class XPathEntityProcessor extends EntityProcessorBase {
       private Map<String, Object> lastRow;
       int count = 0;
 
+      @Override
       public boolean hasNext() {
         return !isEnd.get();
       }
 
+      @Override
       public Map<String, Object> next() {
         Map<String, Object> row;
         
@@ -514,6 +518,7 @@ public class XPathEntityProcessor extends EntityProcessorBase {
         return lastRow = row;
       }
 
+      @Override
       public void remove() {
         /*no op*/
       }
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java
index 7697e0d..2df46b4 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java
@@ -164,6 +164,7 @@ public class XPathRecordReader {
   public List<Map<String, Object>> getAllRecords(Reader r) {
     final List<Map<String, Object>> results = new ArrayList<Map<String, Object>>();
     streamRecords(r, new Handler() {
+      @Override
       public void handle(Map<String, Object> record, String s) {
         results.add(record);
       }
diff --git a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase.java b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase.java
index 60521a6..6c290f2 100644
--- a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase.java
+++ b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase.java
@@ -81,6 +81,7 @@ public class AbstractDIHCacheTestCase {
       this.data = data;
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public int compareTo(ControlData cd) {
       Comparable c1 = (Comparable) data[0];
@@ -88,6 +89,7 @@ public class AbstractDIHCacheTestCase {
       return c1.compareTo(c2);
     }
 
+    @Override
     public Iterator<Object> iterator() {
       return Arrays.asList(data).iterator();
     }
diff --git a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase.java b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase.java
index 1d36f4d..396c721 100644
--- a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase.java
+++ b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase.java
@@ -206,6 +206,7 @@ public abstract class AbstractDIHJdbcTestCase extends
   
   public static class DerbyUtil {
     public static final OutputStream DEV_NULL = new OutputStream() {
+      @Override
       public void write(int b) {}
     };
   }
diff --git a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/MockInitialContextFactory.java b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/MockInitialContextFactory.java
index f33b9e9..dc44d02 100644
--- a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/MockInitialContextFactory.java
+++ b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/MockInitialContextFactory.java
@@ -39,6 +39,7 @@ public class MockInitialContextFactory implements InitialContextFactory {
     try {
       EasyMock.expect(context.lookup((String) EasyMock.anyObject())).andAnswer(
           new IAnswer<Object>() {
+            @Override
             public Object answer() throws Throwable {
               return objects.get(EasyMock.getCurrentArguments()[0]);
             }
@@ -51,6 +52,7 @@ public class MockInitialContextFactory implements InitialContextFactory {
     mockControl.replay();
   }
 
+  @Override
   @SuppressWarnings("unchecked")
   public javax.naming.Context getInitialContext(Hashtable env) {
     return context;
diff --git a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer.java b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer.java
index 9b0587b..d391931 100644
--- a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer.java
+++ b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer.java
@@ -46,6 +46,7 @@ public class TestClobTransformer extends AbstractDataImportHandlerTestCase {
     Transformer t = new ClobTransformer();
     Map<String, Object> row = new HashMap<String, Object>();
     Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {
+      @Override
       public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
         if (method.getName().equals("getCharacterStream")) {
           return new StringReader("hello!");
diff --git a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2.java b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2.java
index b67eb2c..2ead5f2 100644
--- a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2.java
+++ b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2.java
@@ -285,6 +285,7 @@ public class TestDocBuilder2 extends AbstractDataImportHandlerTestCase {
   public static class StartEventListener implements EventListener {
     public static boolean executed = false;
 
+    @Override
     public void onEvent(Context ctx) {
       executed = true;
     }
@@ -293,6 +294,7 @@ public class TestDocBuilder2 extends AbstractDataImportHandlerTestCase {
   public static class EndEventListener implements EventListener {
     public static boolean executed = false;
 
+    @Override
     public void onEvent(Context ctx) {
       executed = true;
     }
diff --git a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathRecordReader.java b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathRecordReader.java
index 1f7290c..7eabcc9 100644
--- a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathRecordReader.java
+++ b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathRecordReader.java
@@ -139,6 +139,7 @@ public class TestXPathRecordReader extends AbstractDataImportHandlerTestCase {
     final List<Map<String, Object>> a = new ArrayList<Map<String, Object>>();
     final List<Map<String, Object>> x = new ArrayList<Map<String, Object>>();
     rr.streamRecords(new StringReader(xml), new XPathRecordReader.Handler() {
+      @Override
       public void handle(Map<String, Object> record, String xpath) {
         if (record == null) return;
         if (xpath.equals("/root/a")) a.add(record);
diff --git a/solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler.java b/solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler.java
index cfee4d9..360259a 100644
--- a/solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler.java
+++ b/solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler.java
@@ -64,6 +64,7 @@ public class ExtractingRequestHandler extends ContentStreamHandlerBase implement
     super.init(args);
   }
 
+  @Override
   public void inform(SolrCore core) {
     if (initArgs != null) {
       //if relative,then relative to config dir, otherwise, absolute path
diff --git a/solr/contrib/langid/src/java/org/apache/solr/update/processor/LangDetectLanguageIdentifierUpdateProcessorFactory.java b/solr/contrib/langid/src/java/org/apache/solr/update/processor/LangDetectLanguageIdentifierUpdateProcessorFactory.java
index 413b97e..2b20143 100644
--- a/solr/contrib/langid/src/java/org/apache/solr/update/processor/LangDetectLanguageIdentifierUpdateProcessorFactory.java
+++ b/solr/contrib/langid/src/java/org/apache/solr/update/processor/LangDetectLanguageIdentifierUpdateProcessorFactory.java
@@ -61,6 +61,7 @@ public class LangDetectLanguageIdentifierUpdateProcessorFactory extends
   protected SolrParams appends;
   protected SolrParams invariants;
 
+  @Override
   public void inform(SolrCore core) {
   }
 
@@ -69,6 +70,7 @@ public class LangDetectLanguageIdentifierUpdateProcessorFactory extends
    * to a RequestHandler, with defaults, appends and invariants.
    * @param args a NamedList with the configuration parameters 
    */
+  @Override
   @SuppressWarnings("rawtypes")
   public void init( NamedList args )
   {
diff --git a/solr/contrib/langid/src/java/org/apache/solr/update/processor/TikaLanguageIdentifierUpdateProcessorFactory.java b/solr/contrib/langid/src/java/org/apache/solr/update/processor/TikaLanguageIdentifierUpdateProcessorFactory.java
index fb0d503..e19270b 100644
--- a/solr/contrib/langid/src/java/org/apache/solr/update/processor/TikaLanguageIdentifierUpdateProcessorFactory.java
+++ b/solr/contrib/langid/src/java/org/apache/solr/update/processor/TikaLanguageIdentifierUpdateProcessorFactory.java
@@ -49,6 +49,7 @@ public class TikaLanguageIdentifierUpdateProcessorFactory extends
   protected SolrParams appends;
   protected SolrParams invariants;
 
+  @Override
   public void inform(SolrCore core) {
   }
 
@@ -57,6 +58,7 @@ public class TikaLanguageIdentifierUpdateProcessorFactory extends
    * to a RequestHandler, with defaults, appends and invariants.
    * @param args a NamedList with the configuration parameters 
    */
+  @Override
   @SuppressWarnings("rawtypes")
   public void init( NamedList args )
   {
diff --git a/solr/contrib/uima/src/test/org/apache/solr/uima/ts/DummySentimentAnnotation.java b/solr/contrib/uima/src/test/org/apache/solr/uima/ts/DummySentimentAnnotation.java
index 836fb81..d26de5c 100644
--- a/solr/contrib/uima/src/test/org/apache/solr/uima/ts/DummySentimentAnnotation.java
+++ b/solr/contrib/uima/src/test/org/apache/solr/uima/ts/DummySentimentAnnotation.java
@@ -24,6 +24,7 @@ public class DummySentimentAnnotation extends Annotation {
    */
   public final static int type = typeIndexID;
   /** @generated  */
+  @Override
   public              int getTypeIndexID() {return typeIndexID;}
  
   /** Never called.  Disable default constructor
diff --git a/solr/contrib/uima/src/test/org/apache/solr/uima/ts/DummySentimentAnnotation_Type.java b/solr/contrib/uima/src/test/org/apache/solr/uima/ts/DummySentimentAnnotation_Type.java
index 9b75982..c1de6f0 100644
--- a/solr/contrib/uima/src/test/org/apache/solr/uima/ts/DummySentimentAnnotation_Type.java
+++ b/solr/contrib/uima/src/test/org/apache/solr/uima/ts/DummySentimentAnnotation_Type.java
@@ -17,10 +17,12 @@ import org.apache.uima.jcas.tcas.Annotation_Type;
  * @generated */
 public class DummySentimentAnnotation_Type extends Annotation_Type {
   /** @generated */
+  @Override
   protected FSGenerator getFSGenerator() {return fsGenerator;}
   /** @generated */
   private final FSGenerator fsGenerator = 
     new FSGenerator() {
+      @Override
       public FeatureStructure createFS(int addr, CASImpl cas) {
         if (DummySentimentAnnotation_Type.this.useExistingInstance) {
           // Return eq fs instance if already created
diff --git a/solr/contrib/uima/src/test/org/apache/solr/uima/ts/EntityAnnotation.java b/solr/contrib/uima/src/test/org/apache/solr/uima/ts/EntityAnnotation.java
index ed59751..443a4e6 100644
--- a/solr/contrib/uima/src/test/org/apache/solr/uima/ts/EntityAnnotation.java
+++ b/solr/contrib/uima/src/test/org/apache/solr/uima/ts/EntityAnnotation.java
@@ -24,6 +24,7 @@ public class EntityAnnotation extends Annotation {
    */
   public final static int type = typeIndexID;
   /** @generated  */
+  @Override
   public              int getTypeIndexID() {return typeIndexID;}
  
   /** Never called.  Disable default constructor
diff --git a/solr/contrib/uima/src/test/org/apache/solr/uima/ts/EntityAnnotation_Type.java b/solr/contrib/uima/src/test/org/apache/solr/uima/ts/EntityAnnotation_Type.java
index 3b44208..417257a 100644
--- a/solr/contrib/uima/src/test/org/apache/solr/uima/ts/EntityAnnotation_Type.java
+++ b/solr/contrib/uima/src/test/org/apache/solr/uima/ts/EntityAnnotation_Type.java
@@ -17,10 +17,12 @@ import org.apache.uima.jcas.tcas.Annotation_Type;
  * @generated */
 public class EntityAnnotation_Type extends Annotation_Type {
   /** @generated */
+  @Override
   protected FSGenerator getFSGenerator() {return fsGenerator;}
   /** @generated */
   private final FSGenerator fsGenerator = 
     new FSGenerator() {
+      @Override
       public FeatureStructure createFS(int addr, CASImpl cas) {
          if (EntityAnnotation_Type.this.useExistingInstance) {
            // Return eq fs instance if already created
diff --git a/solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter.java b/solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter.java
index 9d4e827..1b64035 100644
--- a/solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter.java
+++ b/solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter.java
@@ -39,6 +39,7 @@ public class VelocityResponseWriter implements QueryResponseWriter {
   // TODO: maybe pass this Logger to the template for logging from there?
 //  private static final Logger log = LoggerFactory.getLogger(VelocityResponseWriter.class);
 
+  @Override
   public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {
     VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine
 
@@ -246,6 +247,7 @@ public class VelocityResponseWriter implements QueryResponseWriter {
     return template;
   }
 
+  @Override
   public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
     return request.getParams().get("v.contentType", "text/html;charset=UTF-8");
   }
@@ -260,6 +262,7 @@ public class VelocityResponseWriter implements QueryResponseWriter {
     return "{\"result\":\"" + replaced + "\"}";
   }
 
+  @Override
   public void init(NamedList args) {
   }
 }
diff --git a/solr/core/src/java/org/apache/solr/SolrLogFormatter.java b/solr/core/src/java/org/apache/solr/SolrLogFormatter.java
index aaedf36..2c18687 100644
--- a/solr/core/src/java/org/apache/solr/SolrLogFormatter.java
+++ b/solr/core/src/java/org/apache/solr/SolrLogFormatter.java
@@ -430,6 +430,7 @@ sb.append("(group_name=").append(tg.getName()).append(")");
     public MyThreadGroup(String name) {
       super(name);
     }
+    @Override
     public String getTag() { return "HELLO"; }
   }
   
diff --git a/solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilterFactory.java
index 6be66d0..02de436 100644
--- a/solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilterFactory.java
@@ -54,6 +54,7 @@ import org.apache.lucene.analysis.util.CharFilterFactory;
 @Deprecated
 public class LegacyHTMLStripCharFilterFactory extends CharFilterFactory {
 
+  @Override
   public LegacyHTMLStripCharFilter create(Reader input) {
     return new LegacyHTMLStripCharFilter(input);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory.java b/solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory.java
index 1e9e5dd..4fcabab 100644
--- a/solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/ReversedWildcardFilterFactory.java
@@ -82,6 +82,7 @@ public class ReversedWildcardFilterFactory extends TokenFilterFactory {
   }
 
 
+  @Override
   public TokenStream create(TokenStream input) {
     return new ReversedWildcardFilter(input, withOriginal, markerChar);
   }
diff --git a/solr/core/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java
index 571e13e..04317e4 100644
--- a/solr/core/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java
@@ -48,6 +48,7 @@ public class TrieTokenizerFactory extends TokenizerFactory {
     this.precisionStep = precisionStep;
   }
 
+  @Override
   public TrieTokenizer create(Reader input) {
     return new TrieTokenizer(input, type, precisionStep, TrieTokenizer.getNumericTokenStream(precisionStep));
   }
diff --git a/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java b/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
index 6f0efe7..d84c652 100644
--- a/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
+++ b/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
@@ -148,12 +148,15 @@ public class JettySolrRunner {
     root.setHandler(new GzipHandler());
     server.addLifeCycleListener(new LifeCycle.Listener() {
 
+      @Override
       public void lifeCycleStopping(LifeCycle arg0) {
         System.clearProperty("hostPort");
       }
 
+      @Override
       public void lifeCycleStopped(LifeCycle arg0) {}
 
+      @Override
       public void lifeCycleStarting(LifeCycle arg0) {
         synchronized (JettySolrRunner.this) {
           waitOnSolr = true;
@@ -161,6 +164,7 @@ public class JettySolrRunner {
         }
       }
 
+      @Override
       public void lifeCycleStarted(LifeCycle arg0) {
         lastPort = getFirstConnectorPort();
         System.setProperty("hostPort", Integer.toString(lastPort));
@@ -176,6 +180,7 @@ public class JettySolrRunner {
         System.clearProperty("solr.solr.home");
       }
 
+      @Override
       public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {
         System.clearProperty("hostPort");
       }
@@ -338,17 +343,21 @@ class NoLog implements Logger {
     this.name = name == null ? "" : name;
   }
 
+  @Override
   public boolean isDebugEnabled() {
     return debug;
   }
 
+  @Override
   public void setDebugEnabled(boolean enabled) {
     debug = enabled;
   }
 
+  @Override
   public void debug(String msg, Throwable th) {
   }
 
+  @Override
   public Logger getLogger(String name) {
     if ((name == null && this.name == null)
         || (name != null && name.equals(this.name)))
diff --git a/solr/core/src/java/org/apache/solr/cloud/DistributedQueue.java b/solr/core/src/java/org/apache/solr/cloud/DistributedQueue.java
index bc6691c..61fd31d 100644
--- a/solr/core/src/java/org/apache/solr/cloud/DistributedQueue.java
+++ b/solr/core/src/java/org/apache/solr/cloud/DistributedQueue.java
@@ -168,6 +168,7 @@ public class DistributedQueue {
     
     public LatchChildWatcher() {}
     
+    @Override
     public void process(WatchedEvent event) {
       LOG.info("Watcher fired on path: " + event.getPath() + " state: "
           + event.getState() + " type " + event.getType());
diff --git a/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java b/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java
index 0247261..2236aa6 100644
--- a/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java
+++ b/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java
@@ -99,6 +99,7 @@ public class RecoveryStrategy extends Thread implements ClosableThread {
   }
 
   // make sure any threads stop retrying
+  @Override
   public void close() {
     close = true;
     log.warn("Stopping recovery for zkNodeName=" + coreZkNodeName + "core=" + coreName );
@@ -532,6 +533,7 @@ public class RecoveryStrategy extends Thread implements ClosableThread {
     return future;
   }
 
+  @Override
   public boolean isClosed() {
     return close;
   }
diff --git a/solr/core/src/java/org/apache/solr/cloud/ZkController.java b/solr/core/src/java/org/apache/solr/cloud/ZkController.java
index eb11595..5b96fda 100644
--- a/solr/core/src/java/org/apache/solr/cloud/ZkController.java
+++ b/solr/core/src/java/org/apache/solr/cloud/ZkController.java
@@ -163,6 +163,7 @@ public final class ZkController {
         // on reconnect, reload cloud info
         new OnReconnect() {
 
+          @Override
           public void command() {
             try {
               markAllAsNotLeader(registerOnReconnect);
diff --git a/solr/core/src/java/org/apache/solr/core/AbstractSolrEventListener.java b/solr/core/src/java/org/apache/solr/core/AbstractSolrEventListener.java
index 6d66d43..e23eb66 100644
--- a/solr/core/src/java/org/apache/solr/core/AbstractSolrEventListener.java
+++ b/solr/core/src/java/org/apache/solr/core/AbstractSolrEventListener.java
@@ -30,10 +30,12 @@ public class AbstractSolrEventListener implements SolrEventListener {
   }
   protected NamedList args;
 
+  @Override
   public void init(NamedList args) {
     this.args = args;
   }
 
+  @Override
   public void postCommit() {
     throw new UnsupportedOperationException();
   }
@@ -43,6 +45,7 @@ public class AbstractSolrEventListener implements SolrEventListener {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {
     throw new UnsupportedOperationException();
   }
diff --git a/solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory.java b/solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory.java
index cbc9de0..8dea290 100644
--- a/solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory.java
+++ b/solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory.java
@@ -47,6 +47,7 @@ public abstract class CachingDirectoryFactory extends DirectoryFactory {
     public int refCnt = 1;
     public String path;
     public boolean doneWithDir = false;
+    @Override
     public String toString() {
       return "CachedDir<<" + directory.toString() + ";refCount=" + refCnt + ";path=" + path + ";done=" + doneWithDir + ">>";
     }
@@ -171,6 +172,7 @@ public abstract class CachingDirectoryFactory extends DirectoryFactory {
     }
   }
   
+  @Override
   protected abstract Directory create(String path) throws IOException;
   
   @Override
@@ -255,6 +257,7 @@ public abstract class CachingDirectoryFactory extends DirectoryFactory {
    * org.apache.solr.core.DirectoryFactory#incRef(org.apache.lucene.store.Directory
    * )
    */
+  @Override
   public void incRef(Directory directory) {
     synchronized (this) {
       CacheValue cacheValue = byDirectoryCache.get(directory);
@@ -266,6 +269,7 @@ public abstract class CachingDirectoryFactory extends DirectoryFactory {
     }
   }
   
+  @Override
   public void init(NamedList args) {}
   
   /*
diff --git a/solr/core/src/java/org/apache/solr/core/CodecFactory.java b/solr/core/src/java/org/apache/solr/core/CodecFactory.java
index ddaabd9..17c7d93 100644
--- a/solr/core/src/java/org/apache/solr/core/CodecFactory.java
+++ b/solr/core/src/java/org/apache/solr/core/CodecFactory.java
@@ -25,6 +25,7 @@ import org.apache.solr.util.plugin.NamedListInitializedPlugin;
  * Factory for plugging in a custom {@link Codec}
  */
 public abstract class CodecFactory implements NamedListInitializedPlugin {
+  @Override
   public void init(NamedList args) {  
   }
   
diff --git a/solr/core/src/java/org/apache/solr/core/CoreContainer.java b/solr/core/src/java/org/apache/solr/core/CoreContainer.java
index 9ced642..cedf38d 100644
--- a/solr/core/src/java/org/apache/solr/core/CoreContainer.java
+++ b/solr/core/src/java/org/apache/solr/core/CoreContainer.java
@@ -611,6 +611,7 @@ public class CoreContainer
           if (!p.isSwappable() && p.isLoadOnStartup()) { // Just like current
                                                          // case.
             Callable<SolrCore> task = new Callable<SolrCore>() {
+              @Override
               public SolrCore call() {
                 SolrCore c = null;
                 try {
diff --git a/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java b/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
index 5db1ff3..16c0f34 100644
--- a/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
+++ b/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
@@ -63,6 +63,7 @@ public abstract class DirectoryFactory implements NamedListInitializedPlugin,
    * 
    * @throws IOException If there is a low-level I/O error.
    */
+  @Override
   public abstract void close() throws IOException;
   
   /**
diff --git a/solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.java b/solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.java
index 38930be..ac0c985 100644
--- a/solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.java
+++ b/solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.java
@@ -124,6 +124,7 @@ public class IndexDeletionPolicyWrapper implements IndexDeletionPolicy {
   /**
    * Internal use for Lucene... do not explicitly call.
    */
+  @Override
   public void onInit(List list) throws IOException {
     List<IndexCommitWrapper> wrapperList = wrap(list);
     deletionPolicy.onInit(wrapperList);
@@ -134,6 +135,7 @@ public class IndexDeletionPolicyWrapper implements IndexDeletionPolicy {
   /**
    * Internal use for Lucene... do not explicitly call.
    */
+  @Override
   public void onCommit(List list) throws IOException {
     List<IndexCommitWrapper> wrapperList = wrap(list);
     deletionPolicy.onCommit(wrapperList);
diff --git a/solr/core/src/java/org/apache/solr/core/IndexReaderFactory.java b/solr/core/src/java/org/apache/solr/core/IndexReaderFactory.java
index c04578a..0c45849 100644
--- a/solr/core/src/java/org/apache/solr/core/IndexReaderFactory.java
+++ b/solr/core/src/java/org/apache/solr/core/IndexReaderFactory.java
@@ -39,6 +39,7 @@ public abstract class IndexReaderFactory implements NamedListInitializedPlugin {
    * when declaring an indexReaderFactory in solrconfig.xml
    *
    */
+  @Override
   public void init(NamedList args) {
     Integer v = (Integer)args.get("setTermIndexDivisor");
     if (v != null) {
diff --git a/solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.java b/solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.java
index abd84c3..f605ae3 100644
--- a/solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.java
+++ b/solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.java
@@ -215,6 +215,7 @@ public class JmxMonitoredMap<K, V> extends
       this.coreHashCode = coreHashCode;
     }
 
+    @Override
     public MBeanInfo getMBeanInfo() {
       ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<MBeanAttributeInfo>();
 
@@ -273,6 +274,7 @@ public class JmxMonitoredMap<K, V> extends
       return null;
     }
 
+    @Override
     public Object getAttribute(String attribute)
             throws AttributeNotFoundException, MBeanException, ReflectionException {
       Object val;
@@ -307,6 +309,7 @@ public class JmxMonitoredMap<K, V> extends
       return null;
     }
 
+    @Override
     public AttributeList getAttributes(String[] attributes) {
       AttributeList list = new AttributeList();
       for (String attribute : attributes) {
@@ -320,16 +323,19 @@ public class JmxMonitoredMap<K, V> extends
       return list;
     }
 
+    @Override
     public void setAttribute(Attribute attribute)
             throws AttributeNotFoundException, InvalidAttributeValueException,
             MBeanException, ReflectionException {
       throw new UnsupportedOperationException("Operation not Supported");
     }
 
+    @Override
     public AttributeList setAttributes(AttributeList attributes) {
       throw new UnsupportedOperationException("Operation not Supported");
     }
 
+    @Override
     public Object invoke(String actionName, Object[] params, String[] signature)
             throws MBeanException, ReflectionException {
       throw new UnsupportedOperationException("Operation not Supported");
diff --git a/solr/core/src/java/org/apache/solr/core/RequestHandlers.java b/solr/core/src/java/org/apache/solr/core/RequestHandlers.java
index 96b5fa8..100aa0c 100644
--- a/solr/core/src/java/org/apache/solr/core/RequestHandlers.java
+++ b/solr/core/src/java/org/apache/solr/core/RequestHandlers.java
@@ -225,6 +225,7 @@ public final class RequestHandlers {
     /**
      * In normal use, this function will not be called
      */
+    @Override
     public void init(NamedList args) {
       // do nothing
     }
@@ -232,6 +233,7 @@ public final class RequestHandlers {
     /**
      * Wait for the first request before initializing the wrapped handler 
      */
+    @Override
     public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp)  {
       SolrRequestHandler handler = _handler;
       if (handler == null) {
@@ -266,10 +268,12 @@ public final class RequestHandlers {
     
     //////////////////////// SolrInfoMBeans methods //////////////////////
 
+    @Override
     public String getName() {
       return "Lazy["+_className+"]";
     }
 
+    @Override
     public String getDescription()
     {
       if( _handler == null ) {
@@ -278,6 +282,7 @@ public final class RequestHandlers {
       return _handler.getDescription();
     }
     
+    @Override
     public String getVersion() {
       if( _handler != null ) {
         return _handler.getVersion();
@@ -285,6 +290,7 @@ public final class RequestHandlers {
       return null;
     }
 
+    @Override
     public String getSource() {
       String rev = "$URL$";
       if( _handler != null ) {
@@ -293,6 +299,7 @@ public final class RequestHandlers {
       return rev;
     }
       
+    @Override
     public URL[] getDocs() {
       if( _handler == null ) {
         return null;
@@ -300,11 +307,13 @@ public final class RequestHandlers {
       return _handler.getDocs();
     }
 
+    @Override
     public Category getCategory()
     {
       return Category.QUERYHANDLER;
     }
 
+    @Override
     public NamedList getStatistics() {
       if( _handler != null ) {
         return _handler.getStatistics();
diff --git a/solr/core/src/java/org/apache/solr/core/SolrCore.java b/solr/core/src/java/org/apache/solr/core/SolrCore.java
index 6c82072..94332d1 100644
--- a/solr/core/src/java/org/apache/solr/core/SolrCore.java
+++ b/solr/core/src/java/org/apache/solr/core/SolrCore.java
@@ -281,6 +281,7 @@ public final class SolrCore implements SolrInfoMBean {
     return indexReaderFactory;
   }
   
+  @Override
   public String getName() {
     return name;
   }
@@ -729,6 +730,7 @@ public final class SolrCore implements SolrInfoMBean {
       // until after inform() has been called for all components.
       // searchExecutor must be single-threaded for this to work
       searcherExecutor.submit(new Callable() {
+        @Override
         public Object call() throws Exception {
           latch.await();
           return null;
@@ -1570,6 +1572,7 @@ public final class SolrCore implements SolrInfoMBean {
       if (currSearcher != null) {
         future = searcherExecutor.submit(
             new Callable() {
+              @Override
               public Object call() throws Exception {
                 try {
                   newSearcher.warm(currSearcher);
@@ -1585,6 +1588,7 @@ public final class SolrCore implements SolrInfoMBean {
       if (currSearcher==null && firstSearcherListeners.size() > 0) {
         future = searcherExecutor.submit(
             new Callable() {
+              @Override
               public Object call() throws Exception {
                 try {
                   for (SolrEventListener listener : firstSearcherListeners) {
@@ -1602,6 +1606,7 @@ public final class SolrCore implements SolrInfoMBean {
       if (currSearcher!=null && newSearcherListeners.size() > 0) {
         future = searcherExecutor.submit(
             new Callable() {
+              @Override
               public Object call() throws Exception {
                 try {
                   for (SolrEventListener listener : newSearcherListeners) {
@@ -1622,6 +1627,7 @@ public final class SolrCore implements SolrInfoMBean {
       if (!alreadyRegistered) {
         future = searcherExecutor.submit(
             new Callable() {
+              @Override
               public Object call() throws Exception {
                 try {
                   // registerSearcher will decrement onDeckSearchers and
@@ -2165,26 +2171,32 @@ public final class SolrCore implements SolrInfoMBean {
   // SolrInfoMBean stuff: Statistics and Module Info
   /////////////////////////////////////////////////////////////////////
 
+  @Override
   public String getVersion() {
     return SolrCore.version;
   }
 
+  @Override
   public String getDescription() {
     return "SolrCore";
   }
 
+  @Override
   public Category getCategory() {
     return Category.CORE;
   }
 
+  @Override
   public String getSource() {
     return "$URL$";
   }
 
+  @Override
   public URL[] getDocs() {
     return null;
   }
 
+  @Override
   public NamedList getStatistics() {
     NamedList<Object> lst = new SimpleOrderedMap<Object>();
     lst.add("coreName", name==null ? "(null)" : name);
diff --git a/solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy.java b/solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy.java
index 58ef23f..2cd9141 100644
--- a/solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy.java
+++ b/solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy.java
@@ -48,6 +48,7 @@ public class SolrDeletionPolicy implements IndexDeletionPolicy, NamedListInitial
   private int maxCommitsToKeep = 1;
   private int maxOptimizedCommitsToKeep = 0;
 
+  @Override
   public void init(NamedList args) {
     String keepOptimizedOnlyString = (String) args.get("keepOptimizedOnly");
     String maxCommitsToKeepString = (String) args.get("maxCommitsToKeep");
@@ -109,6 +110,7 @@ public class SolrDeletionPolicy implements IndexDeletionPolicy, NamedListInitial
   /**
    * Internal use for Lucene... do not explicitly call.
    */
+  @Override
   public void onInit(List commits) throws IOException {
     log.info("SolrDeletionPolicy.onInit: commits:" + str(commits));
     updateCommits((List<IndexCommit>) commits);
@@ -117,6 +119,7 @@ public class SolrDeletionPolicy implements IndexDeletionPolicy, NamedListInitial
   /**
    * Internal use for Lucene... do not explicitly call.
    */
+  @Override
   public void onCommit(List commits) throws IOException {
     log.info("SolrDeletionPolicy.onCommit: commits:" + str(commits));
     updateCommits((List<IndexCommit>) commits);
diff --git a/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java b/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
index 2d5d8a1..d21539f 100644
--- a/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
+++ b/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
@@ -159,6 +159,7 @@ public class SolrResourceLoader implements ResourceLoader
     if (file.canRead()) {
       this.classLoader = replaceClassLoader(classLoader, file.getParentFile(),
                                             new FileFilter() {
+                                              @Override
                                               public boolean accept(File pathname) {
                                                 return pathname.equals(file);
                                               }
@@ -288,6 +289,7 @@ public class SolrResourceLoader implements ResourceLoader
    * Override this method to customize loading resources.
    *@return the stream for the named resource
    */
+  @Override
   public InputStream openResource(String resource) throws IOException {
     InputStream is=null;
     try {
@@ -449,6 +451,7 @@ public class SolrResourceLoader implements ResourceLoader
   
   static final String empty[] = new String[0];
   
+  @Override
   public <T> T newInstance(String name, Class<T> expectedType) {
     return newInstance(name, expectedType, empty);
   }
diff --git a/solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java b/solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
index c53a801..35f8678 100644
--- a/solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
+++ b/solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
@@ -212,6 +212,7 @@ public abstract class AnalysisRequestHandlerBase extends RequestHandlerBase {
     
     // sort the tokens by absoulte position
     ArrayUtil.mergeSort(tokens, new Comparator<AttributeSource>() {
+      @Override
       public int compare(AttributeSource a, AttributeSource b) {
         return arrayCompare(
           a.getAttribute(TokenTrackingAttribute.class).getPositions(),
@@ -255,6 +256,7 @@ public abstract class AnalysisRequestHandlerBase extends RequestHandlerBase {
       }
 
       token.reflectWith(new AttributeReflector() {
+        @Override
         public void reflect(Class<? extends Attribute> attClass, String key, Object value) {
           // leave out position and bytes term
           if (TermToBytesRefAttribute.class.isAssignableFrom(attClass))
@@ -365,17 +367,20 @@ public abstract class AnalysisRequestHandlerBase extends RequestHandlerBase {
     private int position = 0;
     private transient int[] cachedPositions = null;
 
+    @Override
     public void freezeStage() {
       this.basePositions = getPositions();
       this.position = 0;
       this.cachedPositions = null;
     }
     
+    @Override
     public void setActPosition(int pos) {
       this.position = pos;
       this.cachedPositions = null;
     }
     
+    @Override
     public int[] getPositions() {
       if (cachedPositions == null) {
         cachedPositions = ArrayUtils.add(basePositions, position);
@@ -383,6 +388,7 @@ public abstract class AnalysisRequestHandlerBase extends RequestHandlerBase {
       return cachedPositions;
     }
     
+    @Override
     public void reset(int[] basePositions, int position) {
       this.basePositions = basePositions;
       this.position = position;
diff --git a/solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.java b/solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.java
index 911d4de..a43dd0c 100644
--- a/solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.java
@@ -257,6 +257,7 @@ public class MoreLikeThisHandler extends RequestHandlerBase
     public float boost;
         
     public static Comparator<InterestingTerm> BOOST_ORDER = new Comparator<InterestingTerm>() {
+      @Override
       public int compare(InterestingTerm t1, InterestingTerm t2) {
         float d = t1.boost - t2.boost;
         if( d == 0 ) {
diff --git a/solr/core/src/java/org/apache/solr/handler/PingRequestHandler.java b/solr/core/src/java/org/apache/solr/handler/PingRequestHandler.java
index 82626e3..bf8eac6 100644
--- a/solr/core/src/java/org/apache/solr/handler/PingRequestHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/PingRequestHandler.java
@@ -134,12 +134,14 @@ public class PingRequestHandler extends RequestHandlerBase implements SolrCoreAw
   private String healthFileName = null;
   private File healthcheck = null;
 
+  @Override
   public void init(NamedList args) {
     super.init(args);
     Object tmp = args.get(HEALTHCHECK_FILE_PARAM);
     healthFileName = (null == tmp ? null : tmp.toString());
   }
 
+  @Override
   public void inform( SolrCore core ) {
     if (null != healthFileName) {
       healthcheck = new File(healthFileName);
diff --git a/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java b/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java
index 1ecb136..77a37c1 100644
--- a/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java
@@ -777,6 +777,7 @@ public class ReplicationHandler extends RequestHandlerBase implements SolrCoreAw
 //    }
 //  }
 
+  @Override
   @SuppressWarnings("unchecked")
   public void inform(SolrCore core) {
     this.core = core;
@@ -927,19 +928,23 @@ public class ReplicationHandler extends RequestHandlerBase implements SolrCoreAw
    */
   private void registerFileStreamResponseWriter() {
     core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {
+      @Override
       public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {
         DirectoryFileStream stream = (DirectoryFileStream) resp.getValues().get(FILE_STREAM);
         stream.write(out);
       }
 
+      @Override
       public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) {
         throw new RuntimeException("This is a binary writer , Cannot write to a characterstream");
       }
 
+      @Override
       public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
         return "application/octet-stream";
       }
 
+      @Override
       public void init(NamedList args) { /*no op*/ }
     });
 
@@ -955,11 +960,13 @@ public class ReplicationHandler extends RequestHandlerBase implements SolrCoreAw
    */
   private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {
     return new SolrEventListener() {
+      @Override
       public void init(NamedList args) {/*no op*/ }
 
       /**
        * This refreshes the latest replicateable index commit and optionally can create Snapshots as well
        */
+      @Override
       public void postCommit() {
         IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();
 
@@ -992,6 +999,7 @@ public class ReplicationHandler extends RequestHandlerBase implements SolrCoreAw
         }
       }
 
+      @Override
       public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}
 
       @Override
@@ -1110,6 +1118,7 @@ public class ReplicationHandler extends RequestHandlerBase implements SolrCoreAw
       super(solrParams);
     }
 
+    @Override
     public void write(OutputStream out) throws IOException {
       String fileName = params.get(FILE);
       String cfileName = params.get(CONF_FILE_SHORT);
diff --git a/solr/core/src/java/org/apache/solr/handler/RequestHandlerBase.java b/solr/core/src/java/org/apache/solr/handler/RequestHandlerBase.java
index 3a2693d..70f3aa3 100644
--- a/solr/core/src/java/org/apache/solr/handler/RequestHandlerBase.java
+++ b/solr/core/src/java/org/apache/solr/handler/RequestHandlerBase.java
@@ -103,6 +103,7 @@ public abstract class RequestHandlerBase implements SolrRequestHandler, SolrInfo
    *
    * See also the example solrconfig.xml located in the Solr codebase (example/solr/conf).
    */
+  @Override
   public void init(NamedList args) {
     initArgs = args;
 
@@ -135,6 +136,7 @@ public abstract class RequestHandlerBase implements SolrRequestHandler, SolrInfo
   
   public abstract void handleRequestBody( SolrQueryRequest req, SolrQueryResponse rsp ) throws Exception;
 
+  @Override
   public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {
     numRequests.inc();
     TimerContext timer = requestTimes.time();
@@ -178,25 +180,32 @@ public abstract class RequestHandlerBase implements SolrRequestHandler, SolrInfo
 
   //////////////////////// SolrInfoMBeans methods //////////////////////
 
+  @Override
   public String getName() {
     return this.getClass().getName();
   }
 
+  @Override
   public abstract String getDescription();
+  @Override
   public abstract String getSource();
   
+  @Override
   public String getVersion() {
     return getClass().getPackage().getSpecificationVersion();
   }
   
+  @Override
   public Category getCategory() {
     return Category.QUERYHANDLER;
   }
 
+  @Override
   public URL[] getDocs() {
     return null;  // this can be overridden, but not required
   }
 
+  @Override
   public NamedList<Object> getStatistics() {
     NamedList<Object> lst = new SimpleOrderedMap<Object>();
     lst.add("handlerStart",handlerStart);
diff --git a/solr/core/src/java/org/apache/solr/handler/SnapPuller.java b/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
index 66c1da9..c01d28c 100644
--- a/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
+++ b/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
@@ -213,6 +213,7 @@ public class SnapPuller {
 
   private void startExecutorService() {
     Runnable task = new Runnable() {
+      @Override
       public void run() {
         if (pollDisabled.get()) {
           LOG.info("Poll disabled");
@@ -1102,6 +1103,7 @@ public class SnapPuller {
         cleanup();
         //if cleanup suceeds . The file is downloaded fully. do an fsync
         fsyncService.submit(new Runnable(){
+          @Override
           public void run() {
             try {
               copy2Dir.sync(Collections.singleton(saveAs));
@@ -1363,6 +1365,7 @@ public class SnapPuller {
         cleanup();
         //if cleanup suceeds . The file is downloaded fully. do an fsync
         fsyncService.submit(new Runnable(){
+          @Override
           public void run() {
             try {
               FileUtils.sync(file);
diff --git a/solr/core/src/java/org/apache/solr/handler/SnapShooter.java b/solr/core/src/java/org/apache/solr/handler/SnapShooter.java
index fec4fb1..6bc06df 100644
--- a/solr/core/src/java/org/apache/solr/handler/SnapShooter.java
+++ b/solr/core/src/java/org/apache/solr/handler/SnapShooter.java
@@ -164,6 +164,7 @@ public class SnapShooter {
         }
       }
     }
+    @Override
     public int compareTo(OldBackupDirectory that) {
       return that.timestamp.compareTo(this.timestamp);
     }
diff --git a/solr/core/src/java/org/apache/solr/handler/admin/AdminHandlers.java b/solr/core/src/java/org/apache/solr/handler/admin/AdminHandlers.java
index c96cfb7..ef8f151 100644
--- a/solr/core/src/java/org/apache/solr/handler/admin/AdminHandlers.java
+++ b/solr/core/src/java/org/apache/solr/handler/admin/AdminHandlers.java
@@ -51,10 +51,12 @@ public class AdminHandlers implements SolrCoreAware, SolrRequestHandler
   /**
    * Save the args and pass them to each standard handler
    */
+  @Override
   public void init(NamedList args) {
     this.initArgs = args;
   }
   
+  @Override
   public void inform(SolrCore core) 
   {
     String path = null;
@@ -101,6 +103,7 @@ public class AdminHandlers implements SolrCoreAware, SolrRequestHandler
   }
 
   
+  @Override
   public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {
     throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, 
         "The AdminHandler should never be called directly" );
@@ -108,30 +111,37 @@ public class AdminHandlers implements SolrCoreAware, SolrRequestHandler
   
   //////////////////////// SolrInfoMBeans methods //////////////////////
 
+  @Override
   public String getDescription() {
     return "Register Standard Admin Handlers";
   }
   
+  @Override
   public String getVersion() {
     return getClass().getPackage().getSpecificationVersion();
   }
 
+  @Override
   public String getSource() {
     return "$URL$";
   }
 
+  @Override
   public Category getCategory() {
     return Category.QUERYHANDLER;
   }
 
+  @Override
   public URL[] getDocs() {
     return null;
   }
 
+  @Override
   public String getName() {
     return this.getClass().getName();
   }
 
+  @Override
   public NamedList getStatistics() {
     return null;
   }
diff --git a/solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java b/solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java
index d3a6069..10be894 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/FacetComponent.java
@@ -818,6 +818,7 @@ public class FacetComponent extends SearchComponent
     public ShardFacetCount[] getLexSorted() {
       ShardFacetCount[] arr = counts.values().toArray(new ShardFacetCount[counts.size()]);
       Arrays.sort(arr, new Comparator<ShardFacetCount>() {
+        @Override
         public int compare(ShardFacetCount o1, ShardFacetCount o2) {
           return o1.indexed.compareTo(o2.indexed);
         }
@@ -829,6 +830,7 @@ public class FacetComponent extends SearchComponent
     public ShardFacetCount[] getCountSorted() {
       ShardFacetCount[] arr = counts.values().toArray(new ShardFacetCount[counts.size()]);
       Arrays.sort(arr, new Comparator<ShardFacetCount>() {
+        @Override
         public int compare(ShardFacetCount o1, ShardFacetCount o2) {
           if (o2.count < o1.count) return -1;
           else if (o1.count < o2.count) return 1;
diff --git a/solr/core/src/java/org/apache/solr/handler/component/HighlightComponent.java b/solr/core/src/java/org/apache/solr/handler/component/HighlightComponent.java
index a1e7697..b26e258 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/HighlightComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/HighlightComponent.java
@@ -57,6 +57,7 @@ public class HighlightComponent extends SearchComponent implements PluginInfoIni
     return hl==null ? null: hl.getHighlighter();    
   }
 
+  @Override
   public void init(PluginInfo info) {
     this.info = info;
   }
@@ -78,6 +79,7 @@ public class HighlightComponent extends SearchComponent implements PluginInfoIni
     }
   }
 
+  @Override
   public void inform(SolrCore core) {
     List<PluginInfo> children = info.getChildren("highlighting");
     if(children.isEmpty()) {
diff --git a/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java b/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
index 81ff6b4..27f0e1e 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
@@ -127,11 +127,13 @@ public class HttpShardHandler extends ShardHandler {
   }
 
 
+  @Override
   public void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {
     // do this outside of the callable for thread safety reasons
     final List<String> urls = getURLs(shard);
 
     Callable<ShardResponse> task = new Callable<ShardResponse>() {
+      @Override
       public ShardResponse call() throws Exception {
 
         ShardResponse srsp = new ShardResponse();
@@ -194,6 +196,7 @@ public class HttpShardHandler extends ShardHandler {
   /** returns a ShardResponse of the last response correlated with a ShardRequest.  This won't 
    * return early if it runs into an error.  
    **/
+  @Override
   public ShardResponse takeCompletedIncludingErrors() {
     return take(false);
   }
@@ -202,6 +205,7 @@ public class HttpShardHandler extends ShardHandler {
   /** returns a ShardResponse of the last response correlated with a ShardRequest,
    * or immediately returns a ShardResponse if there was an error detected
    */
+  @Override
   public ShardResponse takeCompletedOrError() {
     return take(true);
   }
@@ -234,6 +238,7 @@ public class HttpShardHandler extends ShardHandler {
   }
 
 
+  @Override
   public void cancelAll() {
     for (Future<ShardResponse> future : pending) {
       // TODO: any issues with interrupting?  shouldn't be if
@@ -242,6 +247,7 @@ public class HttpShardHandler extends ShardHandler {
     }
   }
 
+  @Override
   public void checkDistributed(ResponseBuilder rb) {
     SolrQueryRequest req = rb.req;
     SolrParams params = req.getParams();
diff --git a/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java b/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java
index 8995c6c..ba847a8 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java
@@ -87,6 +87,7 @@ public class HttpShardHandlerFactory extends ShardHandlerFactory implements Plug
   /**
    * Get {@link ShardHandler} that uses the default http client.
    */
+  @Override
   public ShardHandler getShardHandler() {
     return getShardHandler(defaultClient);
   }
@@ -98,6 +99,7 @@ public class HttpShardHandlerFactory extends ShardHandlerFactory implements Plug
     return new HttpShardHandler(this, httpClient);
   }
 
+  @Override
   public void init(PluginInfo info) {
     NamedList args = info.initArgs;
     this.soTimeout = getParameter(args, HttpClientUtil.PROP_SO_TIMEOUT, soTimeout);
diff --git a/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java b/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
index a731f34..e971602 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
@@ -658,6 +658,7 @@ public class QueryComponent extends SearchComponent
 
     EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {
 
+      @Override
       public SolrDocument retrieve(ScoreDoc doc) {
         ShardDoc solrDoc = (ShardDoc) doc;
         return rb.retrievedDocuments.get(solrDoc.id);
diff --git a/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java b/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java
index ad669da..b964127 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java
@@ -137,6 +137,7 @@ public class QueryElevationComponent extends SearchComponent implements SolrCore
     this.initArgs = SolrParams.toSolrParams(args);
   }
 
+  @Override
   public void inform(SolrCore core) {
     String a = initArgs.get(FIELD_TYPE);
     if (a != null) {
diff --git a/solr/core/src/java/org/apache/solr/handler/component/SearchComponent.java b/solr/core/src/java/org/apache/solr/handler/component/SearchComponent.java
index 71255f6..0a5ed2f 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/SearchComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/SearchComponent.java
@@ -74,6 +74,7 @@ public abstract class SearchComponent implements SolrInfoMBean, NamedListInitial
 
 
   //////////////////////// NamedListInitializedPlugin methods //////////////////////
+  @Override
   public void init( NamedList args )
   {
     // By default do nothing
@@ -81,25 +82,32 @@ public abstract class SearchComponent implements SolrInfoMBean, NamedListInitial
   
   //////////////////////// SolrInfoMBeans methods //////////////////////
 
+  @Override
   public String getName() {
     return this.getClass().getName();
   }
 
+  @Override
   public abstract String getDescription();
+  @Override
   public abstract String getSource();
   
+  @Override
   public String getVersion() {
     return getClass().getPackage().getSpecificationVersion();
   }
   
+  @Override
   public Category getCategory() {
     return Category.OTHER;
   }
 
+  @Override
   public URL[] getDocs() {
     return null;  // this can be overridden, but not required
   }
 
+  @Override
   public NamedList getStatistics() {
     return null;
   }
diff --git a/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java b/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java
index c9ba188..7135744 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java
@@ -72,6 +72,7 @@ public class SearchHandler extends RequestHandlerBase implements SolrCoreAware ,
     return names;
   }
 
+  @Override
   public void init(PluginInfo info) {
     init(info.initArgs);
     for (PluginInfo child : info.children) {
@@ -87,6 +88,7 @@ public class SearchHandler extends RequestHandlerBase implements SolrCoreAware ,
    * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using
    * the <code>INIT_COMPONENTS</code> syntax.
    */
+  @Override
   @SuppressWarnings("unchecked")
   public void inform(SolrCore core)
   {
diff --git a/solr/core/src/java/org/apache/solr/handler/component/ShardDoc.java b/solr/core/src/java/org/apache/solr/handler/component/ShardDoc.java
index 144a9c4..3ffb0a9 100755
--- a/solr/core/src/java/org/apache/solr/handler/component/ShardDoc.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/ShardDoc.java
@@ -218,6 +218,7 @@ class ShardFieldSortedHitQueue extends PriorityQueue<ShardDoc> {
       return lst.get(shardDoc.orderInShard);
     }
 
+    @Override
     public int compare(Object o1, Object o2) {
       return 0;
     }
@@ -225,6 +226,7 @@ class ShardFieldSortedHitQueue extends PriorityQueue<ShardDoc> {
 
   static Comparator comparatorScore(final String fieldName) {
     return new Comparator() {
+      @Override
       public final int compare(final Object o1, final Object o2) {
         ShardDoc e1 = (ShardDoc) o1;
         ShardDoc e2 = (ShardDoc) o2;
diff --git a/solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.java b/solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.java
index 9f9c6f5..e76b806 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.java
@@ -578,6 +578,7 @@ public class SpellCheckComponent extends SearchComponent implements SolrCoreAwar
     return result;
   }
 
+  @Override
   public void inform(SolrCore core) {
     if (initParams != null) {
       LOG.info("Initializing spell checkers");
@@ -660,9 +661,11 @@ public class SpellCheckComponent extends SearchComponent implements SolrCoreAwar
       this.buildOnOptimize = buildOnOptimize;
     }
 
+    @Override
     public void init(NamedList args) {
     }
 
+    @Override
     public void newSearcher(SolrIndexSearcher newSearcher,
                             SolrIndexSearcher currentSearcher) {
       if (currentSearcher == null) {
@@ -699,6 +702,7 @@ public class SpellCheckComponent extends SearchComponent implements SolrCoreAwar
       }
     }
 
+    @Override
     public void postCommit() {
     }
 
diff --git a/solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.java b/solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.java
index 1505ce4..d4ef1c5 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.java
@@ -89,6 +89,7 @@ abstract class AbstractStatsValues<T> implements StatsValues {
   /**
    * {@inheritDoc}
    */
+  @Override
   public void accumulate(NamedList stv) {
     count += (Long) stv.get("count");
     missing += (Long) stv.get("missing");
@@ -124,6 +125,7 @@ abstract class AbstractStatsValues<T> implements StatsValues {
   /**
    * {@inheritDoc}
    */
+  @Override
   public void accumulate(BytesRef value) {
     count++;
     T typedValue = (T)ft.toObject(sf, value);
@@ -134,6 +136,7 @@ abstract class AbstractStatsValues<T> implements StatsValues {
   /**
    * {@inheritDoc}
    */
+  @Override
   public void accumulate(BytesRef value, int count) {
     this.count += count;
     T typedValue = (T)ft.toObject(sf, value);
@@ -144,6 +147,7 @@ abstract class AbstractStatsValues<T> implements StatsValues {
   /**
    * {@inheritDoc}
    */
+  @Override
   public void missing() {
     missing++;
   }
@@ -151,6 +155,7 @@ abstract class AbstractStatsValues<T> implements StatsValues {
   /**
    * {@inheritDoc}
    */
+  @Override
   public void addMissing(int count) {
     missing += count;
   }
@@ -158,6 +163,7 @@ abstract class AbstractStatsValues<T> implements StatsValues {
   /**
    * {@inheritDoc}
    */
+  @Override
   public void addFacet(String facetName, Map<String, StatsValues> facetValues) {
     facets.put(facetName, facetValues);
   }
@@ -165,6 +171,7 @@ abstract class AbstractStatsValues<T> implements StatsValues {
   /**
    * {@inheritDoc}
    */
+  @Override
   public NamedList<?> getStatsValues() {
     NamedList<Object> res = new SimpleOrderedMap<Object>();
 
@@ -242,6 +249,7 @@ class NumericStatsValues extends AbstractStatsValues<Number> {
   /**
    * {@inheritDoc}
    */
+  @Override
   public void updateTypeSpecificStats(NamedList stv) {
     sum += ((Number)stv.get("sum")).doubleValue();
     sumOfSquares += ((Number)stv.get("sumOfSquares")).doubleValue();
@@ -250,6 +258,7 @@ class NumericStatsValues extends AbstractStatsValues<Number> {
   /**
    * {@inheritDoc}
    */
+  @Override
   public void updateTypeSpecificStats(Number v) {
     double value = v.doubleValue();
     sumOfSquares += (value * value); // for std deviation
@@ -259,6 +268,7 @@ class NumericStatsValues extends AbstractStatsValues<Number> {
   /**
    * {@inheritDoc}
    */
+  @Override
   public void updateTypeSpecificStats(Number v, int count) {
     double value = v.doubleValue();
     sumOfSquares += (value * value * count); // for std deviation
@@ -268,6 +278,7 @@ class NumericStatsValues extends AbstractStatsValues<Number> {
    /**
    * {@inheritDoc}
    */
+  @Override
   protected void updateMinMax(Number min, Number max) {
     this.min = Math.min(this.min.doubleValue(), min.doubleValue());
     this.max = Math.max(this.max.doubleValue(), max.doubleValue());
@@ -278,6 +289,7 @@ class NumericStatsValues extends AbstractStatsValues<Number> {
    *
    * @param res NamedList to add the type specific statistics too
    */
+  @Override
   protected void addTypeSpecificStats(NamedList<Object> res) {
     res.add("sum", sum);
     res.add("sumOfSquares", sumOfSquares);
@@ -314,6 +326,7 @@ class DateStatsValues extends AbstractStatsValues<Date> {
   /**
    * {@inheritDoc}
    */
+  @Override
   protected void updateTypeSpecificStats(NamedList stv) {
     sum += ((Date) stv.get("sum")).getTime();
     sumOfSquares += ((Number)stv.get("sumOfSquares")).doubleValue();
@@ -342,6 +355,7 @@ class DateStatsValues extends AbstractStatsValues<Date> {
    /**
    * {@inheritDoc}
    */
+  @Override
   protected void updateMinMax(Date min, Date max) {
     if(this.min==null || this.min.after(min)) {
       this.min = min;
@@ -356,6 +370,7 @@ class DateStatsValues extends AbstractStatsValues<Date> {
    *
    * @param res NamedList to add the type specific statistics too
    */
+  @Override
   protected void addTypeSpecificStats(NamedList<Object> res) {
     if(sum<=0) {
       return; // date==0 is meaningless
@@ -395,6 +410,7 @@ class StringStatsValues extends AbstractStatsValues<String> {
   /**
    * {@inheritDoc}
    */
+  @Override
   protected void updateTypeSpecificStats(NamedList stv) {
     // No type specific stats
   }
@@ -402,6 +418,7 @@ class StringStatsValues extends AbstractStatsValues<String> {
   /**
    * {@inheritDoc}
    */
+  @Override
   protected void updateTypeSpecificStats(String value) {
     // No type specific stats
   }
@@ -409,6 +426,7 @@ class StringStatsValues extends AbstractStatsValues<String> {
   /**
    * {@inheritDoc}
    */
+  @Override
   protected void updateTypeSpecificStats(String value, int count) {
     // No type specific stats
   }
@@ -416,6 +434,7 @@ class StringStatsValues extends AbstractStatsValues<String> {
    /**
    * {@inheritDoc}
    */
+  @Override
   protected void updateMinMax(String min, String max) {
     this.max = max(this.max, max);
     this.min = min(this.min, min);
@@ -424,6 +443,7 @@ class StringStatsValues extends AbstractStatsValues<String> {
   /**
    * Adds no type specific statistics
    */
+  @Override
   protected void addTypeSpecificStats(NamedList<Object> res) {
     // Add no statistics
   }
diff --git a/solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java b/solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java
index f1e92d7..1bd36a9 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java
@@ -462,6 +462,7 @@ public class TermVectorComponent extends SearchComponent implements SolrCoreAwar
     this.initParams = args;
   }
 
+  @Override
   public void inform(SolrCore core) {
 
   }
diff --git a/solr/core/src/java/org/apache/solr/handler/component/TermsComponent.java b/solr/core/src/java/org/apache/solr/handler/component/TermsComponent.java
index bed8220..d671de2 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/TermsComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/TermsComponent.java
@@ -441,6 +441,7 @@ public class TermsComponent extends SearchComponent {
       TermsResponse.Term[] arr = data.values().toArray(new TermsResponse.Term[data.size()]);
 
       Arrays.sort(arr, new Comparator<TermsResponse.Term>() {
+        @Override
         public int compare(TermsResponse.Term o1, TermsResponse.Term o2) {
           return o1.getTerm().compareTo(o2.getTerm());
         }
@@ -454,6 +455,7 @@ public class TermsComponent extends SearchComponent {
       TermsResponse.Term[] arr = data.values().toArray(new TermsResponse.Term[data.size()]);
 
       Arrays.sort(arr, new Comparator<TermsResponse.Term>() {
+        @Override
         public int compare(TermsResponse.Term o1, TermsResponse.Term o2) {
           long freq1 = o1.getFrequency();
           long freq2 = o2.getFrequency();
diff --git a/solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.java b/solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.java
index 95fead0..7ab5c1a 100644
--- a/solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.java
+++ b/solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.java
@@ -49,6 +49,7 @@ import org.slf4j.LoggerFactory;
 public class JsonLoader extends ContentStreamLoader {
   final static Logger log = LoggerFactory.getLogger( JsonLoader.class );
   
+  @Override
   public String getDefaultWT() {
     return "json";
   }
diff --git a/solr/core/src/java/org/apache/solr/handler/loader/XMLLoader.java b/solr/core/src/java/org/apache/solr/handler/loader/XMLLoader.java
index c8d6124..1f7a389 100644
--- a/solr/core/src/java/org/apache/solr/handler/loader/XMLLoader.java
+++ b/solr/core/src/java/org/apache/solr/handler/loader/XMLLoader.java
@@ -110,6 +110,7 @@ public class XMLLoader extends ContentStreamLoader {
     return this;
   }
 
+  @Override
   public String getDefaultWT() {
     return "xml";
   }
diff --git a/solr/core/src/java/org/apache/solr/highlight/DefaultEncoder.java b/solr/core/src/java/org/apache/solr/highlight/DefaultEncoder.java
index 28291f6..d3705ac 100644
--- a/solr/core/src/java/org/apache/solr/highlight/DefaultEncoder.java
+++ b/solr/core/src/java/org/apache/solr/highlight/DefaultEncoder.java
@@ -27,6 +27,7 @@ import org.apache.solr.common.params.SolrParams;
 public class DefaultEncoder extends HighlightingPluginBase implements
     SolrEncoder {
 
+  @Override
   public Encoder getEncoder(String fieldName, SolrParams params) {
     return new org.apache.lucene.search.highlight.DefaultEncoder();
   }
diff --git a/solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java b/solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java
index 0ac8666..e213df7 100644
--- a/solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java
+++ b/solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java
@@ -69,6 +69,7 @@ public class DefaultSolrHighlighter extends SolrHighlighter implements PluginInf
     this.solrCore = solrCore;
   }
 
+  @Override
   public void init(PluginInfo info) {
     formatters.clear();
     encoders.clear();
@@ -515,6 +516,7 @@ public class DefaultSolrHighlighter extends SolrHighlighter implements PluginInf
     // sort such that the fragments with the highest score come first
      if(!preserveMulti){
         Collections.sort(frags, new Comparator<TextFragment>() {
+                @Override
                 public int compare(TextFragment arg0, TextFragment arg1) {
                  return Math.round(arg1.getScore() - arg0.getScore());
         }
diff --git a/solr/core/src/java/org/apache/solr/highlight/GapFragmenter.java b/solr/core/src/java/org/apache/solr/highlight/GapFragmenter.java
index 4b4bf89..a3d315d 100644
--- a/solr/core/src/java/org/apache/solr/highlight/GapFragmenter.java
+++ b/solr/core/src/java/org/apache/solr/highlight/GapFragmenter.java
@@ -27,6 +27,7 @@ import org.apache.solr.common.params.SolrParams;
 
 public class GapFragmenter extends HighlightingPluginBase implements SolrFragmenter
 {
+  @Override
   public Fragmenter getFragmenter(String fieldName, SolrParams params )
   {
     numRequests++;
diff --git a/solr/core/src/java/org/apache/solr/highlight/HighlightingPluginBase.java b/solr/core/src/java/org/apache/solr/highlight/HighlightingPluginBase.java
index e900ef1..8f6717f 100644
--- a/solr/core/src/java/org/apache/solr/highlight/HighlightingPluginBase.java
+++ b/solr/core/src/java/org/apache/solr/highlight/HighlightingPluginBase.java
@@ -44,26 +44,33 @@ public abstract class HighlightingPluginBase implements SolrInfoMBean
 
   //////////////////////// SolrInfoMBeans methods //////////////////////
 
+  @Override
   public String getName() {
     return this.getClass().getName();
   }
 
+  @Override
   public abstract String getDescription();
+  @Override
   public abstract String getSource();
   
+  @Override
   public String getVersion() {
     return getClass().getPackage().getSpecificationVersion();
   }
   
+  @Override
   public Category getCategory()
   {
     return Category.HIGHLIGHTING;
   }
 
+  @Override
   public URL[] getDocs() {
     return null;  // this can be overridden, but not required
   }
 
+  @Override
   public NamedList getStatistics() {
     NamedList<Long> lst = new SimpleOrderedMap<Long>();
     lst.add("requests", numRequests);
diff --git a/solr/core/src/java/org/apache/solr/highlight/HtmlEncoder.java b/solr/core/src/java/org/apache/solr/highlight/HtmlEncoder.java
index 79d9d92..92f20b5 100644
--- a/solr/core/src/java/org/apache/solr/highlight/HtmlEncoder.java
+++ b/solr/core/src/java/org/apache/solr/highlight/HtmlEncoder.java
@@ -27,6 +27,7 @@ import org.apache.solr.common.params.SolrParams;
  */
 public class HtmlEncoder extends HighlightingPluginBase implements SolrEncoder {
 
+  @Override
   public Encoder getEncoder(String fieldName, SolrParams params) {
     return new SimpleHTMLEncoder();
   }
diff --git a/solr/core/src/java/org/apache/solr/highlight/HtmlFormatter.java b/solr/core/src/java/org/apache/solr/highlight/HtmlFormatter.java
index 1aeab29..3e61f5d 100644
--- a/solr/core/src/java/org/apache/solr/highlight/HtmlFormatter.java
+++ b/solr/core/src/java/org/apache/solr/highlight/HtmlFormatter.java
@@ -26,6 +26,7 @@ import org.apache.solr.common.params.SolrParams;
  */
 public class HtmlFormatter extends HighlightingPluginBase implements SolrFormatter 
 {
+  @Override
   public Formatter getFormatter(String fieldName, SolrParams params ) 
   {
     numRequests++;
diff --git a/solr/core/src/java/org/apache/solr/highlight/RegexFragmenter.java b/solr/core/src/java/org/apache/solr/highlight/RegexFragmenter.java
index a080854..01b7f0c 100644
--- a/solr/core/src/java/org/apache/solr/highlight/RegexFragmenter.java
+++ b/solr/core/src/java/org/apache/solr/highlight/RegexFragmenter.java
@@ -63,6 +63,7 @@ public class RegexFragmenter extends HighlightingPluginBase implements SolrFragm
     defaultPattern = Pattern.compile(defaultPatternRaw);
   }
 
+  @Override
   public Fragmenter getFragmenter(String fieldName, SolrParams params )
   { 
     numRequests++;
@@ -187,6 +188,7 @@ class LuceneRegexFragmenter implements Fragmenter
   /* (non-Javadoc)
    * @see org.apache.lucene.search.highlight.TextFragmenter#start(java.lang.String)
    */
+  @Override
   public void start(String originalText, TokenStream tokenStream) {
     currentNumFrags = 1;
     currentOffset = 0;
@@ -227,6 +229,7 @@ class LuceneRegexFragmenter implements Fragmenter
   /* (non-Javadoc)
    * @see org.apache.lucene.search.highlight.TextFragmenter#isNewFragment(org.apache.lucene.analysis.Token)
    */
+  @Override
   public boolean isNewFragment()
   {
     boolean isNewFrag = false;
diff --git a/solr/core/src/java/org/apache/solr/highlight/SimpleFragListBuilder.java b/solr/core/src/java/org/apache/solr/highlight/SimpleFragListBuilder.java
index f1b842c..2decd6d 100644
--- a/solr/core/src/java/org/apache/solr/highlight/SimpleFragListBuilder.java
+++ b/solr/core/src/java/org/apache/solr/highlight/SimpleFragListBuilder.java
@@ -23,6 +23,7 @@ import org.apache.solr.common.params.SolrParams;
 public class SimpleFragListBuilder extends HighlightingPluginBase implements
     SolrFragListBuilder {
 
+  @Override
   public FragListBuilder getFragListBuilder(SolrParams params) {
     // NOTE: This class (currently) makes no use of params
     // If that ever changes, it should wrap them with defaults...
diff --git a/solr/core/src/java/org/apache/solr/highlight/SingleFragListBuilder.java b/solr/core/src/java/org/apache/solr/highlight/SingleFragListBuilder.java
index d8571fc..487cefd 100644
--- a/solr/core/src/java/org/apache/solr/highlight/SingleFragListBuilder.java
+++ b/solr/core/src/java/org/apache/solr/highlight/SingleFragListBuilder.java
@@ -23,6 +23,7 @@ import org.apache.solr.common.params.SolrParams;
 public class SingleFragListBuilder extends HighlightingPluginBase implements
     SolrFragListBuilder {
 
+  @Override
   public FragListBuilder getFragListBuilder(SolrParams params) {
     // NOTE: This class (currently) makes no use of params
     // If that ever changes, it should wrap them with defaults...
diff --git a/solr/core/src/java/org/apache/solr/highlight/SolrEncoder.java b/solr/core/src/java/org/apache/solr/highlight/SolrEncoder.java
index 14f991c..eb8d2ab 100644
--- a/solr/core/src/java/org/apache/solr/highlight/SolrEncoder.java
+++ b/solr/core/src/java/org/apache/solr/highlight/SolrEncoder.java
@@ -30,6 +30,7 @@ public interface SolrEncoder extends SolrInfoMBean, NamedListInitializedPlugin {
    * may be specified when declaring a request handler in
    * solrconfig.xml
    */
+  @Override
   public void init(NamedList args);
 
   /**
diff --git a/solr/core/src/java/org/apache/solr/highlight/SolrFormatter.java b/solr/core/src/java/org/apache/solr/highlight/SolrFormatter.java
index ec14a44..bdf28bf 100644
--- a/solr/core/src/java/org/apache/solr/highlight/SolrFormatter.java
+++ b/solr/core/src/java/org/apache/solr/highlight/SolrFormatter.java
@@ -30,6 +30,7 @@ public interface SolrFormatter extends SolrInfoMBean, NamedListInitializedPlugin
    * may be specified when declaring a request handler in
    * solrconfig.xml
    */
+  @Override
   public void init(NamedList args);
 
   /**
diff --git a/solr/core/src/java/org/apache/solr/highlight/SolrFragListBuilder.java b/solr/core/src/java/org/apache/solr/highlight/SolrFragListBuilder.java
index bbf2b72..01c2875 100644
--- a/solr/core/src/java/org/apache/solr/highlight/SolrFragListBuilder.java
+++ b/solr/core/src/java/org/apache/solr/highlight/SolrFragListBuilder.java
@@ -30,6 +30,7 @@ public interface SolrFragListBuilder extends SolrInfoMBean, NamedListInitialized
    * may be specified when declaring a request handler in
    * solrconfig.xml
    */
+  @Override
   public void init( NamedList args);
 
   /**
diff --git a/solr/core/src/java/org/apache/solr/highlight/SolrFragmenter.java b/solr/core/src/java/org/apache/solr/highlight/SolrFragmenter.java
index 0678ec1..eef46e4 100644
--- a/solr/core/src/java/org/apache/solr/highlight/SolrFragmenter.java
+++ b/solr/core/src/java/org/apache/solr/highlight/SolrFragmenter.java
@@ -30,6 +30,7 @@ public interface SolrFragmenter extends SolrInfoMBean, NamedListInitializedPlugi
    * may be specified when declaring a request handler in
    * solrconfig.xml
    */
+  @Override
   public void init(NamedList args);
 
   /**
diff --git a/solr/core/src/java/org/apache/solr/internal/csv/CSVStrategy.java b/solr/core/src/java/org/apache/solr/internal/csv/CSVStrategy.java
index c2dd0d3..6cf1c67 100644
--- a/solr/core/src/java/org/apache/solr/internal/csv/CSVStrategy.java
+++ b/solr/core/src/java/org/apache/solr/internal/csv/CSVStrategy.java
@@ -140,6 +140,7 @@ public class CSVStrategy implements Cloneable, Serializable {
       return this.printerNewline;
     }
 
+    @Override
     public Object clone() {
       try {
         return super.clone();
diff --git a/solr/core/src/java/org/apache/solr/internal/csv/CharBuffer.java b/solr/core/src/java/org/apache/solr/internal/csv/CharBuffer.java
index 3db9701..f8f1f9c 100644
--- a/solr/core/src/java/org/apache/solr/internal/csv/CharBuffer.java
+++ b/solr/core/src/java/org/apache/solr/internal/csv/CharBuffer.java
@@ -201,6 +201,7 @@ public class CharBuffer {
      * Converts the contents of the buffer into a StringBuffer.
      * This method involves copying the new data once!
      */
+    @Override
     public String toString() {
         return new String(c, 0, length);
     }
diff --git a/solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader.java b/solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader.java
index abc1c84..0201a8c 100644
--- a/solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader.java
+++ b/solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader.java
@@ -75,6 +75,7 @@ class ExtendedBufferedReader extends BufferedReader  {
    * Reads the next char from the input stream.
    * @return the next char or END_OF_STREAM if end of stream has been reached.
    */
+  @Override
   public int read() throws IOException {
     // initalize the lookahead
     if (lookaheadChar == UNDEFINED) {
@@ -113,6 +114,7 @@ class ExtendedBufferedReader extends BufferedReader  {
    * 
    * @return nof chars actually read or END_OF_STREAM
    */
+  @Override
   public int read(char[] buf, int off, int len) throws IOException {
     // do not claim if len == 0
     if (len == 0) {
@@ -178,6 +180,7 @@ class ExtendedBufferedReader extends BufferedReader  {
   *         including any line-termination characters, or null 
   *         if the end of the stream has been reached
   */
+  @Override
   public String readLine() throws IOException {
     
     if (lookaheadChar == UNDEFINED) {
@@ -223,6 +226,7 @@ class ExtendedBufferedReader extends BufferedReader  {
    * 
    * @return nof skiped chars
    */
+  @Override
   public long skip(long n) throws IllegalArgumentException, IOException  {
     
     if (lookaheadChar == UNDEFINED) {
@@ -300,6 +304,7 @@ class ExtendedBufferedReader extends BufferedReader  {
       return -1;
     }
   }
+  @Override
   public boolean markSupported() {
     /* note uh: marking is not supported, cause we cannot
      *          see into the future...
diff --git a/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfig.java b/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfig.java
index 767c9b8..ac67123 100644
--- a/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfig.java
+++ b/solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfig.java
@@ -246,6 +246,7 @@ public class CSVConfig {
      * TODO..
      * @see java.lang.Object#equals(java.lang.Object)
      */
+    @Override
     public boolean equals(Object obj) {
         if (obj == null && !(obj instanceof CSVConfig)) {
             return false;
diff --git a/solr/core/src/java/org/apache/solr/parser/FastCharStream.java b/solr/core/src/java/org/apache/solr/parser/FastCharStream.java
index 38b3a78..91dbf91 100644
--- a/solr/core/src/java/org/apache/solr/parser/FastCharStream.java
+++ b/solr/core/src/java/org/apache/solr/parser/FastCharStream.java
@@ -42,6 +42,7 @@ public final class FastCharStream implements CharStream {
     input = r;
   }
 
+  @Override
   public final char readChar() throws IOException {
     if (bufferPosition >= bufferLength)
       refill();
@@ -76,25 +77,30 @@ public final class FastCharStream implements CharStream {
       bufferLength += charsRead;
   }
 
+  @Override
   public final char BeginToken() throws IOException {
     tokenStart = bufferPosition;
     return readChar();
   }
 
+  @Override
   public final void backup(int amount) {
     bufferPosition -= amount;
   }
 
+  @Override
   public final String GetImage() {
     return new String(buffer, tokenStart, bufferPosition - tokenStart);
   }
 
+  @Override
   public final char[] GetSuffix(int len) {
     char[] value = new char[len];
     System.arraycopy(buffer, bufferPosition - len, value, 0, len);
     return value;
   }
 
+  @Override
   public final void Done() {
     try {
       input.close();
@@ -102,21 +108,27 @@ public final class FastCharStream implements CharStream {
     }
   }
 
+  @Override
   public final int getColumn() {
     return bufferStart + bufferPosition;
   }
+  @Override
   public final int getLine() {
     return 1;
   }
+  @Override
   public final int getEndColumn() {
     return bufferStart + bufferPosition;
   }
+  @Override
   public final int getEndLine() {
     return 1;
   }
+  @Override
   public final int getBeginColumn() {
     return bufferStart + tokenStart;
   }
+  @Override
   public final int getBeginLine() {
     return 1;
   }
diff --git a/solr/core/src/java/org/apache/solr/parser/QueryParser.java b/solr/core/src/java/org/apache/solr/parser/QueryParser.java
index 709ad00..12f516d 100644
--- a/solr/core/src/java/org/apache/solr/parser/QueryParser.java
+++ b/solr/core/src/java/org/apache/solr/parser/QueryParser.java
@@ -91,6 +91,7 @@ public class QueryParser extends SolrQueryParserBase implements QueryParserConst
   }
 
 // This makes sure that there is no garbage after the query string
+  @Override
   final public Query TopLevelQuery(String field) throws ParseException, SyntaxError {
   Query q;
     q = Query(field);
@@ -478,6 +479,7 @@ public class QueryParser extends SolrQueryParserBase implements QueryParserConst
   }
 
   /** Reinitialise. */
+  @Override
   public void ReInit(CharStream stream) {
     token_source.ReInit(stream);
     token = new Token();
diff --git a/solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java b/solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java
index 92b4e9b..7d4ea32 100644
--- a/solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java
+++ b/solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java
@@ -119,6 +119,7 @@ public abstract class SolrQueryParserBase {
       this.field = field;
       this.subParser = subParser;
     }
+    @Override
     public String toString() {
       return field;
     }
diff --git a/solr/core/src/java/org/apache/solr/parser/Token.java b/solr/core/src/java/org/apache/solr/parser/Token.java
index 0d59603..af8e031 100644
--- a/solr/core/src/java/org/apache/solr/parser/Token.java
+++ b/solr/core/src/java/org/apache/solr/parser/Token.java
@@ -97,6 +97,7 @@ public class Token implements java.io.Serializable {
   /**
    * Returns the image.
    */
+  @Override
   public String toString()
   {
     return image;
diff --git a/solr/core/src/java/org/apache/solr/parser/TokenMgrError.java b/solr/core/src/java/org/apache/solr/parser/TokenMgrError.java
index 9dbfd06..f164095 100644
--- a/solr/core/src/java/org/apache/solr/parser/TokenMgrError.java
+++ b/solr/core/src/java/org/apache/solr/parser/TokenMgrError.java
@@ -121,6 +121,7 @@ public class TokenMgrError extends Error
    *
    * from this method for such cases in the release version of your parser.
    */
+  @Override
   public String getMessage() {
     return super.getMessage();
   }
diff --git a/solr/core/src/java/org/apache/solr/request/PerSegmentSingleValuedFaceting.java b/solr/core/src/java/org/apache/solr/request/PerSegmentSingleValuedFaceting.java
index 60e6237..530df1d 100755
--- a/solr/core/src/java/org/apache/solr/request/PerSegmentSingleValuedFaceting.java
+++ b/solr/core/src/java/org/apache/solr/request/PerSegmentSingleValuedFaceting.java
@@ -94,6 +94,7 @@ class PerSegmentSingleValuedFaceting {
       final SegFacet segFacet = new SegFacet(leave);
 
       Callable<SegFacet> task = new Callable<SegFacet>() {
+        @Override
         public SegFacet call() throws Exception {
           segFacet.countTerms();
           return segFacet;
diff --git a/solr/core/src/java/org/apache/solr/request/SimpleFacets.java b/solr/core/src/java/org/apache/solr/request/SimpleFacets.java
index 49b5885..369fdae 100644
--- a/solr/core/src/java/org/apache/solr/request/SimpleFacets.java
+++ b/solr/core/src/java/org/apache/solr/request/SimpleFacets.java
@@ -386,6 +386,7 @@ public class SimpleFacets {
 
 
   static final Executor directExecutor = new Executor() {
+    @Override
     public void execute(Runnable r) {
       r.run();
     }
@@ -1248,6 +1249,7 @@ public class SimpleFacets {
       CountPair<?,?> that = (CountPair<?,?>) o;
       return (this.key.equals(that.key) && this.val.equals(that.val));
     }
+    @Override
     public int compareTo(CountPair<K,V> o) {
       int vc = o.val.compareTo(val);
       return (0 != vc ? vc : key.compareTo(o.key));
diff --git a/solr/core/src/java/org/apache/solr/request/SolrQueryRequestBase.java b/solr/core/src/java/org/apache/solr/request/SolrQueryRequestBase.java
index 881482e..7f0fd2e 100644
--- a/solr/core/src/java/org/apache/solr/request/SolrQueryRequestBase.java
+++ b/solr/core/src/java/org/apache/solr/request/SolrQueryRequestBase.java
@@ -52,32 +52,38 @@ public abstract class SolrQueryRequestBase implements SolrQueryRequest {
     this.params = this.origParams = params;
   }
 
+  @Override
   public Map<Object,Object> getContext() {
     // SolrQueryRequest as a whole isn't thread safe, and this isn't either.
     if (context==null) context = new HashMap<Object,Object>();
     return context;
   }
 
+  @Override
   public SolrParams getParams() {
     return params;
   }
 
+  @Override
   public SolrParams getOriginalParams() {
     return origParams;
   }
 
+  @Override
   public void setParams(SolrParams params) {
     this.params = params;
   }
 
   protected final long startTime=System.currentTimeMillis();
   // Get the start time of this request in milliseconds
+  @Override
   public long getStartTime() {
     return startTime;
   }
 
   // The index searcher associated with this request
   protected RefCounted<SolrIndexSearcher> searcherHolder;
+  @Override
   public SolrIndexSearcher getSearcher() {
     if(core == null) return null;//a request for a core admin will no have a core
     // should this reach out and get a searcher from the core singleton, or
@@ -92,11 +98,13 @@ public abstract class SolrQueryRequestBase implements SolrQueryRequest {
   }
 
   // The solr core (coordinator, etc) associated with this request
+  @Override
   public SolrCore getCore() {
     return core;
   }
 
   // The index schema associated with this request
+  @Override
   public IndexSchema getSchema() {
     //a request for a core admin will no have a core
     return core == null? null: core.getSchema();
@@ -106,6 +114,7 @@ public abstract class SolrQueryRequestBase implements SolrQueryRequest {
    * Frees resources associated with this request, this method <b>must</b>
    * be called when the object is no longer in use.
    */
+  @Override
   public void close() {
     if (searcherHolder!=null) {
       searcherHolder.decref();
@@ -115,6 +124,7 @@ public abstract class SolrQueryRequestBase implements SolrQueryRequest {
 
   /** A Collection of ContentStreams passed to the request
    */
+  @Override
   public Iterable<ContentStream> getContentStreams() {
     return streams; 
   }
@@ -123,6 +133,7 @@ public abstract class SolrQueryRequestBase implements SolrQueryRequest {
     streams = s; 
   }
 
+  @Override
   public String getParamString() {
     return origParams.toString();
   }
diff --git a/solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.java b/solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.java
index 0c6668cdef..0e2b494 100755
--- a/solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.java
+++ b/solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.java
@@ -43,6 +43,7 @@ public class BinaryResponseWriter implements BinaryQueryResponseWriter {
   private static final Logger LOG = LoggerFactory.getLogger(BinaryResponseWriter.class);
   public static final Set<Class> KNOWN_TYPES = new HashSet<Class>();
 
+  @Override
   public void write(OutputStream out, SolrQueryRequest req, SolrQueryResponse response) throws IOException {
     Resolver resolver = new Resolver(req, response.getReturnFields());
     Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);
@@ -51,14 +52,17 @@ public class BinaryResponseWriter implements BinaryQueryResponseWriter {
     codec.marshal(response.getValues(), out);
   }
 
+  @Override
   public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {
     throw new RuntimeException("This is a binary writer , Cannot write to a characterstream");
   }
 
+  @Override
   public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
     return "application/octet-stream";
   }
 
+  @Override
   public void init(NamedList args) {
     /* NOOP */
   }
@@ -78,6 +82,7 @@ public class BinaryResponseWriter implements BinaryQueryResponseWriter {
       this.returnFields = returnFields;
     }
 
+    @Override
     public Object resolve(Object o, JavaBinCodec codec) throws IOException {
       if (o instanceof ResultContext) {
         writeResults((ResultContext) o, codec);
diff --git a/solr/core/src/java/org/apache/solr/response/CSVResponseWriter.java b/solr/core/src/java/org/apache/solr/response/CSVResponseWriter.java
index 38fc58e..66acff7 100755
--- a/solr/core/src/java/org/apache/solr/response/CSVResponseWriter.java
+++ b/solr/core/src/java/org/apache/solr/response/CSVResponseWriter.java
@@ -45,9 +45,11 @@ import java.util.*;
 
 public class CSVResponseWriter implements QueryResponseWriter {
 
+  @Override
   public void init(NamedList n) {
   }
 
+  @Override
   public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {
     CSVWriter w = new CSVWriter(writer, req, rsp);
     try {
@@ -57,6 +59,7 @@ public class CSVResponseWriter implements QueryResponseWriter {
     }
   }
 
+  @Override
   public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
     // using the text/plain allows this to be viewed in the browser easily
     return CONTENT_TYPE_TEXT_UTF8;
@@ -352,12 +355,14 @@ class CSVWriter extends TextResponseWriter {
   public void writeNamedList(String name, NamedList val) throws IOException {
   }
 
+  @Override
   public void writeStartDocumentList(String name, 
       long start, int size, long numFound, Float maxScore) throws IOException
   {
     // nothing
   }
 
+  @Override
   public void writeEndDocumentList() throws IOException
   {
     // nothing
diff --git a/solr/core/src/java/org/apache/solr/response/JSONResponseWriter.java b/solr/core/src/java/org/apache/solr/response/JSONResponseWriter.java
index e37f5a9..301ad3f 100644
--- a/solr/core/src/java/org/apache/solr/response/JSONResponseWriter.java
+++ b/solr/core/src/java/org/apache/solr/response/JSONResponseWriter.java
@@ -45,6 +45,7 @@ public class JSONResponseWriter implements QueryResponseWriter {
 
   private String contentType = CONTENT_TYPE_JSON_UTF8;
 
+  @Override
   public void init(NamedList namedList) {
     String contentType = (String) namedList.get("content-type");
     if (contentType != null) {
@@ -52,6 +53,7 @@ public class JSONResponseWriter implements QueryResponseWriter {
     }
   }
 
+  @Override
   public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {
     JSONWriter w = new JSONWriter(writer, req, rsp);
     try {
@@ -61,6 +63,7 @@ public class JSONResponseWriter implements QueryResponseWriter {
     }
   }
 
+  @Override
   public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
     return contentType;
   }
diff --git a/solr/core/src/java/org/apache/solr/response/PHPResponseWriter.java b/solr/core/src/java/org/apache/solr/response/PHPResponseWriter.java
index f2a9e2f..62a1749 100755
--- a/solr/core/src/java/org/apache/solr/response/PHPResponseWriter.java
+++ b/solr/core/src/java/org/apache/solr/response/PHPResponseWriter.java
@@ -26,11 +26,13 @@ import org.apache.solr.request.SolrQueryRequest;
 public class PHPResponseWriter implements QueryResponseWriter {
   static String CONTENT_TYPE_PHP_UTF8="text/x-php;charset=UTF-8";
 
+  @Override
   public void init(NamedList n) {
     /* NOOP */
   }
   
- public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {
+ @Override
+public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {
     PHPWriter w = new PHPWriter(writer, req, rsp);
     try {
       w.writeResponse();
@@ -39,6 +41,7 @@ public class PHPResponseWriter implements QueryResponseWriter {
     }
   }
 
+  @Override
   public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
     return CONTENT_TYPE_TEXT_UTF8;
   }
diff --git a/solr/core/src/java/org/apache/solr/response/PHPSerializedResponseWriter.java b/solr/core/src/java/org/apache/solr/response/PHPSerializedResponseWriter.java
index b2a46b1..17f58d0 100755
--- a/solr/core/src/java/org/apache/solr/response/PHPSerializedResponseWriter.java
+++ b/solr/core/src/java/org/apache/solr/response/PHPSerializedResponseWriter.java
@@ -41,10 +41,12 @@ import org.apache.solr.search.ReturnFields;
 public class PHPSerializedResponseWriter implements QueryResponseWriter {
   static String CONTENT_TYPE_PHP_UTF8="text/x-php-serialized;charset=UTF-8";
 
+  @Override
   public void init(NamedList n) {
   }
   
- public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {
+ @Override
+public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {
     PHPSerializedWriter w = new PHPSerializedWriter(writer, req, rsp);
     try {
       w.writeResponse();
@@ -53,6 +55,7 @@ public class PHPSerializedResponseWriter implements QueryResponseWriter {
     }
   }
 
+  @Override
   public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
     return CONTENT_TYPE_TEXT_UTF8;
   }
@@ -82,6 +85,7 @@ class PHPSerializedWriter extends JSONWriter {
   
   
 
+  @Override
   public void writeStartDocumentList(String name, 
       long start, int size, long numFound, Float maxScore) throws IOException
   {
@@ -99,6 +103,7 @@ class PHPSerializedWriter extends JSONWriter {
     writeArrayOpener(size);
   }
 
+  @Override
   public void writeEndDocumentList() throws IOException
   {
     writeArrayCloser(); // doc list
diff --git a/solr/core/src/java/org/apache/solr/response/PythonResponseWriter.java b/solr/core/src/java/org/apache/solr/response/PythonResponseWriter.java
index 78c79b8..5ff3815 100644
--- a/solr/core/src/java/org/apache/solr/response/PythonResponseWriter.java
+++ b/solr/core/src/java/org/apache/solr/response/PythonResponseWriter.java
@@ -26,10 +26,12 @@ import org.apache.solr.request.SolrQueryRequest;
 public class PythonResponseWriter implements QueryResponseWriter {
   static String CONTENT_TYPE_PYTHON_ASCII="text/x-python;charset=US-ASCII";
 
+  @Override
   public void init(NamedList n) {
     /* NOOP */
   }
   
+  @Override
   public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {
     PythonWriter w = new PythonWriter(writer, req, rsp);
     try {
@@ -39,13 +41,16 @@ public class PythonResponseWriter implements QueryResponseWriter {
     }
   }
 
+  @Override
   public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
     return CONTENT_TYPE_TEXT_ASCII;
   }
 }
 
 class PythonWriter extends NaNFloatWriter {
+  @Override
   protected String getNaN() { return "float('NaN')"; }
+  @Override
   protected String getInf() { return "float('Inf')"; }
 
   public PythonWriter(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) {
diff --git a/solr/core/src/java/org/apache/solr/response/QueryResponseWriter.java b/solr/core/src/java/org/apache/solr/response/QueryResponseWriter.java
index f6c3ea7..6742e5c 100644
--- a/solr/core/src/java/org/apache/solr/response/QueryResponseWriter.java
+++ b/solr/core/src/java/org/apache/solr/response/QueryResponseWriter.java
@@ -80,6 +80,7 @@ public interface QueryResponseWriter extends NamedListInitializedPlugin {
    * may be specified when declaring a response writer in
    * solrconfig.xml
    */
+  @Override
   public void init(NamedList args);
 }
 
diff --git a/solr/core/src/java/org/apache/solr/response/RawResponseWriter.java b/solr/core/src/java/org/apache/solr/response/RawResponseWriter.java
index 7d29f67..ef997e6 100644
--- a/solr/core/src/java/org/apache/solr/response/RawResponseWriter.java
+++ b/solr/core/src/java/org/apache/solr/response/RawResponseWriter.java
@@ -54,6 +54,7 @@ public class RawResponseWriter implements BinaryQueryResponseWriter
   public static final String CONTENT = "content";
   private String _baseWriter = null;
   
+  @Override
   public void init(NamedList n) {
     if( n != null ) {
       Object base = n.get( "base" );
@@ -69,6 +70,7 @@ public class RawResponseWriter implements BinaryQueryResponseWriter
     return request.getCore().getQueryResponseWriter( _baseWriter );
   }
   
+  @Override
   public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
     Object obj = response.getValues().get( CONTENT );
     if( obj != null && (obj instanceof ContentStream ) ) {
@@ -77,6 +79,7 @@ public class RawResponseWriter implements BinaryQueryResponseWriter
     return getBaseWriter( request ).getContentType( request, response );
   }
 
+  @Override
   public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException 
   {
     Object obj = response.getValues().get( CONTENT );
@@ -95,6 +98,7 @@ public class RawResponseWriter implements BinaryQueryResponseWriter
     }
   }
 
+@Override
 public void write(OutputStream out, SolrQueryRequest request,
     SolrQueryResponse response) throws IOException {
     Object obj = response.getValues().get( CONTENT );
diff --git a/solr/core/src/java/org/apache/solr/response/RubyResponseWriter.java b/solr/core/src/java/org/apache/solr/response/RubyResponseWriter.java
index dcaf913..30e6f9f 100644
--- a/solr/core/src/java/org/apache/solr/response/RubyResponseWriter.java
+++ b/solr/core/src/java/org/apache/solr/response/RubyResponseWriter.java
@@ -25,11 +25,13 @@ import org.apache.solr.request.SolrQueryRequest;
 public class RubyResponseWriter implements QueryResponseWriter {
   static String CONTENT_TYPE_RUBY_UTF8="text/x-ruby;charset=UTF-8";
 
+  @Override
   public void init(NamedList n) {
     /* NOOP */
   }
   
- public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {
+ @Override
+public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {
     RubyWriter w = new RubyWriter(writer, req, rsp);
     try {
       w.writeResponse();
@@ -38,6 +40,7 @@ public class RubyResponseWriter implements QueryResponseWriter {
     }
   }
 
+  @Override
   public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
     return CONTENT_TYPE_TEXT_UTF8;
   }
diff --git a/solr/core/src/java/org/apache/solr/response/XMLResponseWriter.java b/solr/core/src/java/org/apache/solr/response/XMLResponseWriter.java
index 642a575..7efd1c3 100644
--- a/solr/core/src/java/org/apache/solr/response/XMLResponseWriter.java
+++ b/solr/core/src/java/org/apache/solr/response/XMLResponseWriter.java
@@ -27,10 +27,12 @@ import org.apache.solr.request.SolrQueryRequest;
  *
  */
 public class XMLResponseWriter implements QueryResponseWriter {
+  @Override
   public void init(NamedList n) {
     /* NOOP */
   }
 
+  @Override
   public void write(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {
     XMLWriter w = new XMLWriter(writer, req, rsp);
     try {
@@ -40,6 +42,7 @@ public class XMLResponseWriter implements QueryResponseWriter {
     }
   }
 
+  @Override
   public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
     return CONTENT_TYPE_XML_UTF8;
   }
diff --git a/solr/core/src/java/org/apache/solr/response/XSLTResponseWriter.java b/solr/core/src/java/org/apache/solr/response/XSLTResponseWriter.java
index 3879437..f7f7410 100644
--- a/solr/core/src/java/org/apache/solr/response/XSLTResponseWriter.java
+++ b/solr/core/src/java/org/apache/solr/response/XSLTResponseWriter.java
@@ -56,6 +56,7 @@ public class XSLTResponseWriter implements QueryResponseWriter {
   private static final Logger log = LoggerFactory.getLogger(XSLTResponseWriter.class);
   private static final XMLErrorLogger xmllog = new XMLErrorLogger(log);
   
+  @Override
   public void init(NamedList n) {
       final SolrParams p = SolrParams.toSolrParams(n);
       xsltCacheLifetimeSeconds = p.getInt(XSLT_CACHE_PARAM,XSLT_CACHE_DEFAULT);
@@ -63,6 +64,7 @@ public class XSLTResponseWriter implements QueryResponseWriter {
   }
 
   
+  @Override
   public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
     Transformer t = null;
     try {
@@ -91,6 +93,7 @@ public class XSLTResponseWriter implements QueryResponseWriter {
     return mediaType;
   }
 
+  @Override
   public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {
     final Transformer t = getTransformer(request);
     
diff --git a/solr/core/src/java/org/apache/solr/response/transform/ExcludedMarkerFactory.java b/solr/core/src/java/org/apache/solr/response/transform/ExcludedMarkerFactory.java
index c8e4cf0..f694150 100644
--- a/solr/core/src/java/org/apache/solr/response/transform/ExcludedMarkerFactory.java
+++ b/solr/core/src/java/org/apache/solr/response/transform/ExcludedMarkerFactory.java
@@ -49,6 +49,7 @@ class ExcludedTransformer extends BaseEditorialTransformer {
     super(name, idFieldName, ft);
   }
 
+  @Override
   protected Set<String> getIdSet() {
     return (Set<String>)context.req.getContext().get(QueryElevationComponent.EXCLUDED);
   }
diff --git a/solr/core/src/java/org/apache/solr/response/transform/TransformerFactory.java b/solr/core/src/java/org/apache/solr/response/transform/TransformerFactory.java
index 06daa99..0b389b1 100644
--- a/solr/core/src/java/org/apache/solr/response/transform/TransformerFactory.java
+++ b/solr/core/src/java/org/apache/solr/response/transform/TransformerFactory.java
@@ -34,6 +34,7 @@ public abstract class TransformerFactory implements NamedListInitializedPlugin
 {
   protected String defaultUserArgs = null;
 
+  @Override
   public void init(NamedList args) {
     defaultUserArgs = (String)args.get( "args" );
   }
diff --git a/solr/core/src/java/org/apache/solr/schema/AbstractSubTypeFieldType.java b/solr/core/src/java/org/apache/solr/schema/AbstractSubTypeFieldType.java
index bd38bfe..cb4c33f 100644
--- a/solr/core/src/java/org/apache/solr/schema/AbstractSubTypeFieldType.java
+++ b/solr/core/src/java/org/apache/solr/schema/AbstractSubTypeFieldType.java
@@ -93,6 +93,7 @@ public abstract class AbstractSubTypeFieldType extends FieldType implements Sche
     return proto;
   }
 
+  @Override
   public void inform(IndexSchema schema) {
     //Can't do this until here b/c the Dynamic Fields are not initialized until here.
     if (subType != null) {
diff --git a/solr/core/src/java/org/apache/solr/schema/CurrencyField.java b/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
index 401d531..0575a3d 100644
--- a/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
+++ b/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
@@ -192,6 +192,7 @@ public class CurrencyField extends FieldType implements SchemaAware, ResourceLoa
    *
    * @param indexSchema The index schema.
    */
+  @Override
   public void inform(IndexSchema indexSchema) {
     createDynamicCurrencyField(FIELD_SUFFIX_CURRENCY,   fieldTypeCurrency);
     createDynamicCurrencyField(FIELD_SUFFIX_AMOUNT_RAW, fieldTypeAmountRaw);
@@ -202,6 +203,7 @@ public class CurrencyField extends FieldType implements SchemaAware, ResourceLoa
    *
    * @param resourceLoader The resource loader.
    */
+  @Override
   public void inform(ResourceLoader resourceLoader) {
     provider.inform(resourceLoader);
     boolean reloaded = provider.reload();
@@ -275,6 +277,7 @@ public class CurrencyField extends FieldType implements SchemaAware, ResourceLoa
       amountValues = amountField.getType().getValueSource(amountField, parser);
     }
 
+    @Override
     public FunctionValues getValues(Map context, AtomicReaderContext reader) throws IOException {
       final FunctionValues amounts = amountValues.getValues(context, reader);
       final FunctionValues currencies = currencyValues.getValues(context, reader);
@@ -310,6 +313,7 @@ public class CurrencyField extends FieldType implements SchemaAware, ResourceLoa
           }
         }
 
+        @Override
         public long longVal(int doc) {
           if (!initializedCache) {
             for (int i = 0; i < fractionDigitCache.length; i++) {
@@ -356,22 +360,27 @@ public class CurrencyField extends FieldType implements SchemaAware, ResourceLoa
           return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);
         }
 
+        @Override
         public int intVal(int doc) {
           return (int) longVal(doc);
         }
 
+        @Override
         public double doubleVal(int doc) {
           return (double) longVal(doc);
         }
 
+        @Override
         public float floatVal(int doc) {
           return (float) longVal(doc);
         }
 
+        @Override
         public String strVal(int doc) {
           return Long.toString(longVal(doc));
         }
 
+        @Override
         public String toString(int doc) {
           return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';
         }
@@ -433,6 +442,7 @@ class FileExchangeRateProvider implements ExchangeRateProvider {
    * @return The exchange rate.
    * @throws SolrException if the requested currency pair cannot be found
    */
+  @Override
   public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {
     if (sourceCurrencyCode == null || targetCurrencyCode == null) {
       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Cannot get exchange rate; currency was null.");
@@ -508,6 +518,7 @@ class FileExchangeRateProvider implements ExchangeRateProvider {
     return rates != null ? rates.hashCode() : 0;
   }
 
+  @Override
   public String toString() {
     return "["+this.getClass().getName()+" : " + rates.size() + " rates.]";
   }
@@ -776,6 +787,7 @@ class CurrencyValue {
     return new CurrencyValue(convertAmount(exchangeRates, this.getCurrencyCode(), this.getAmount(), targetCurrencyCode), targetCurrencyCode);
   }
 
+  @Override
   public String toString() {
     return String.valueOf(amount) + "," + currencyCode;
   }
diff --git a/solr/core/src/java/org/apache/solr/schema/DateField.java b/solr/core/src/java/org/apache/solr/schema/DateField.java
index c46c46c..e964ac5 100644
--- a/solr/core/src/java/org/apache/solr/schema/DateField.java
+++ b/solr/core/src/java/org/apache/solr/schema/DateField.java
@@ -190,6 +190,7 @@ public class DateField extends PrimitiveFieldType {
     }
   }
 
+  @Override
   public StorableField createField(SchemaField field, Object value, float boost) {
     // Convert to a string before indexing
     if(value instanceof Date) {
diff --git a/solr/core/src/java/org/apache/solr/schema/GeoHashField.java b/solr/core/src/java/org/apache/solr/schema/GeoHashField.java
index f924c3b..d03a98d 100644
--- a/solr/core/src/java/org/apache/solr/schema/GeoHashField.java
+++ b/solr/core/src/java/org/apache/solr/schema/GeoHashField.java
@@ -58,6 +58,7 @@ public class GeoHashField extends FieldType implements SpatialQueryable {
     //QUESTION: Should we do a fast and crude one?  Or actually check distances
   //Fast and crude could use EdgeNGrams, but that would require a different
   //encoding.  Plus there are issues around the Equator/Prime Meridian
+  @Override
   public Query createSpatialQuery(QParser parser, SpatialOptions options) {
     double [] point = new double[0];
     try {
diff --git a/solr/core/src/java/org/apache/solr/schema/IndexSchema.java b/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
index d21f216..f70bd06 100644
--- a/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
+++ b/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
@@ -765,6 +765,7 @@ public final class IndexSchema {
      * as this object is less than, equal to, or greater than
      * the specified object.
      */
+    @Override
     public int compareTo(DynamicReplacement other) {
       return other.regex.length() - regex.length();
     }
diff --git a/solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.java b/solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.java
index 7b149c7..d108b15 100644
--- a/solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.java
+++ b/solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.java
@@ -64,6 +64,7 @@ public class OpenExchangeRatesOrgProvider implements ExchangeRateProvider {
    * @return The exchange rate.
    * @throws SolrException if the requested currency pair cannot be found
    */
+  @Override
   public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {
     if (rates == null) {
       throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, "Rates not initialized.");
@@ -105,6 +106,7 @@ public class OpenExchangeRatesOrgProvider implements ExchangeRateProvider {
     return rates != null ? rates.hashCode() : 0;
   }
 
+  @Override
   public String toString() {
     return "["+this.getClass().getName()+" : " + rates.getRates().size() + " rates.]";
   }
diff --git a/solr/core/src/java/org/apache/solr/schema/PointType.java b/solr/core/src/java/org/apache/solr/schema/PointType.java
index 9cf87cb..0697db7 100644
--- a/solr/core/src/java/org/apache/solr/schema/PointType.java
+++ b/solr/core/src/java/org/apache/solr/schema/PointType.java
@@ -177,6 +177,7 @@ public class PointType extends CoordinateFieldType implements SpatialQueryable {
    * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.
    * @return The Query representing the bounding box around the point.
    */
+  @Override
   public Query createSpatialQuery(QParser parser, SpatialOptions options) {
     Query result = null;
     double [] point = new double[0];
diff --git a/solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.java b/solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.java
index ae7234e..ec25f94 100644
--- a/solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.java
+++ b/solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.java
@@ -212,6 +212,7 @@ public class PreAnalyzedField extends FieldType {
       return binaryValue;
     }
     
+    @Override
     public final boolean incrementToken() {
       // lazy init the iterator
       if (it == null) {
diff --git a/solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser.java b/solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser.java
index 2813d6f..0ab959a 100644
--- a/solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser.java
+++ b/solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser.java
@@ -152,6 +152,7 @@ public final class SimplePreAnalyzedParser implements PreAnalyzedParser {
       attr.clear();
     }
     
+    @Override
     public String toString() {
       return "tok='" + token + "',attr=" + attr;
     }
@@ -451,6 +452,7 @@ public final class SimplePreAnalyzedParser implements PreAnalyzedParser {
     return resState;
   }
 
+  @Override
   public String toFormattedString(Field f) throws IOException {
     StringBuilder sb = new StringBuilder();
     sb.append(VERSION + " ");
diff --git a/solr/core/src/java/org/apache/solr/schema/SortableFloatField.java b/solr/core/src/java/org/apache/solr/schema/SortableFloatField.java
index 6b77ec8..a191167 100644
--- a/solr/core/src/java/org/apache/solr/schema/SortableFloatField.java
+++ b/solr/core/src/java/org/apache/solr/schema/SortableFloatField.java
@@ -87,6 +87,7 @@ public class SortableFloatField extends PrimitiveFieldType {
     return NumberUtils.SortableStr2floatStr(indexedForm);
   }
 
+  @Override
   public CharsRef indexedToReadable(BytesRef input, CharsRef charsRef) {
     // TODO: this could be more efficient, but the sortable types should be deprecated instead
     UnicodeUtil.UTF8toUTF16(input, charsRef);
diff --git a/solr/core/src/java/org/apache/solr/schema/SortableIntField.java b/solr/core/src/java/org/apache/solr/schema/SortableIntField.java
index e921f1a..fa0299f 100644
--- a/solr/core/src/java/org/apache/solr/schema/SortableIntField.java
+++ b/solr/core/src/java/org/apache/solr/schema/SortableIntField.java
@@ -85,6 +85,7 @@ public class SortableIntField extends PrimitiveFieldType {
     return NumberUtils.SortableStr2int(indexedForm);
   }
 
+  @Override
   public CharsRef indexedToReadable(BytesRef input, CharsRef charsRef) {
     // TODO: this could be more efficient, but the sortable types should be deprecated instead
     UnicodeUtil.UTF8toUTF16(input, charsRef);
diff --git a/solr/core/src/java/org/apache/solr/schema/SortableLongField.java b/solr/core/src/java/org/apache/solr/schema/SortableLongField.java
index 8ebf7de..b63be38 100644
--- a/solr/core/src/java/org/apache/solr/schema/SortableLongField.java
+++ b/solr/core/src/java/org/apache/solr/schema/SortableLongField.java
@@ -76,6 +76,7 @@ public class SortableLongField extends PrimitiveFieldType {
     return NumberUtils.SortableStr2long(indexedForm);
   }
 
+  @Override
   public CharsRef indexedToReadable(BytesRef input, CharsRef charsRef) {
     // TODO: this could be more efficient, but the sortable types should be deprecated instead
     UnicodeUtil.UTF8toUTF16(input, charsRef);
diff --git a/solr/core/src/java/org/apache/solr/search/BitDocSet.java b/solr/core/src/java/org/apache/solr/search/BitDocSet.java
index 2a8aecf..8aca6f7 100644
--- a/solr/core/src/java/org/apache/solr/search/BitDocSet.java
+++ b/solr/core/src/java/org/apache/solr/search/BitDocSet.java
@@ -86,28 +86,34 @@ public class BitDocSet extends DocSetBase {
   }
   ***/
 
+  @Override
   public DocIterator iterator() {
     return new DocIterator() {
       private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);
       private int pos = iter.nextDoc();
+      @Override
       public boolean hasNext() {
         return pos != DocIdSetIterator.NO_MORE_DOCS;
       }
 
+      @Override
       public Integer next() {
         return nextDoc();
       }
 
+      @Override
       public void remove() {
         bits.clear(pos);
       }
 
+      @Override
       public int nextDoc() {
         int old=pos;
         pos=iter.nextDoc();
         return old;
       }
 
+      @Override
       public float score() {
         return 0.0f;
       }
@@ -136,6 +142,7 @@ public class BitDocSet extends DocSetBase {
     size=-1;  // invalidate size
   }
 
+  @Override
   public int size() {
     if (size!=-1) return size;
     return size=(int)bits.cardinality();
@@ -152,6 +159,7 @@ public class BitDocSet extends DocSetBase {
   /** Returns true of the doc exists in the set.
    *  Should only be called when doc < OpenBitSet.size()
    */
+  @Override
   public boolean exists(int doc) {
     return bits.fastGet(doc);
   }
@@ -229,6 +237,7 @@ public class BitDocSet extends DocSetBase {
   }
 
 
+  @Override
   public long memSize() {
     return (bits.getBits().length << 3) + 16;
   }
diff --git a/solr/core/src/java/org/apache/solr/search/BoostQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/BoostQParserPlugin.java
index bf8e7ae..84c158a 100755
--- a/solr/core/src/java/org/apache/solr/search/BoostQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/BoostQParserPlugin.java
@@ -40,6 +40,7 @@ public class BoostQParserPlugin extends QParserPlugin {
   public static String NAME = "boost";
   public static String BOOSTFUNC = "b";
 
+  @Override
   public void init(NamedList args) {
   }
 
diff --git a/solr/core/src/java/org/apache/solr/search/DisMaxQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/DisMaxQParserPlugin.java
index e8a2a65..563a96f 100755
--- a/solr/core/src/java/org/apache/solr/search/DisMaxQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/DisMaxQParserPlugin.java
@@ -112,6 +112,7 @@ import org.apache.solr.request.SolrQueryRequest;
 public class DisMaxQParserPlugin extends QParserPlugin {
   public static String NAME = "dismax";
 
+  @Override
   public void init(NamedList args) {
   }
 
diff --git a/solr/core/src/java/org/apache/solr/search/DocList.java b/solr/core/src/java/org/apache/solr/search/DocList.java
index 3fcac21..6f41bd5 100644
--- a/solr/core/src/java/org/apache/solr/search/DocList.java
+++ b/solr/core/src/java/org/apache/solr/search/DocList.java
@@ -36,6 +36,7 @@ public interface DocList extends DocSet {
   /**
    * Returns the number of ids in this list.
    */
+  @Override
   public int size();
 
   /**
@@ -76,6 +77,7 @@ public interface DocList extends DocSet {
    * </p>
    * @see #hasScores
    */
+  @Override
   public DocIterator iterator();
     
   /** True if scores were retained */
diff --git a/solr/core/src/java/org/apache/solr/search/DocSetBase.java b/solr/core/src/java/org/apache/solr/search/DocSetBase.java
index c5b7518..8cc014b 100644
--- a/solr/core/src/java/org/apache/solr/search/DocSetBase.java
+++ b/solr/core/src/java/org/apache/solr/search/DocSetBase.java
@@ -55,6 +55,7 @@ abstract class DocSetBase implements DocSet {
   /**
    * @throws SolrException Base implementation does not allow modifications
    */
+  @Override
   public void add(int doc) {
     throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,"Unsupported Operation");
   }
@@ -62,6 +63,7 @@ abstract class DocSetBase implements DocSet {
   /**
    * @throws SolrException Base implementation does not allow modifications
    */
+  @Override
   public void addUnique(int doc) {
     throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,"Unsupported Operation");
   }
@@ -71,6 +73,7 @@ abstract class DocSetBase implements DocSet {
    *
    * @see BitDocSet#getBits
    */
+  @Override
   public OpenBitSet getBits() {
     OpenBitSet bits = new OpenBitSet();
     for (DocIterator iter = iterator(); iter.hasNext();) {
@@ -79,6 +82,7 @@ abstract class DocSetBase implements DocSet {
     return bits;
   };
 
+  @Override
   public DocSet intersection(DocSet other) {
     // intersection is overloaded in the smaller DocSets to be more
     // efficient, so dispatch off of it instead.
@@ -92,6 +96,7 @@ abstract class DocSetBase implements DocSet {
     return new BitDocSet(newbits);
   }
 
+  @Override
   public boolean intersects(DocSet other) {
     // intersection is overloaded in the smaller DocSets to be more
     // efficient, so dispatch off of it instead.
@@ -103,12 +108,14 @@ abstract class DocSetBase implements DocSet {
   }
 
 
+  @Override
   public DocSet union(DocSet other) {
     OpenBitSet newbits = (OpenBitSet)(this.getBits().clone());
     newbits.or(other.getBits());
     return new BitDocSet(newbits);
   }
 
+  @Override
   public int intersectionSize(DocSet other) {
     // intersection is overloaded in the smaller DocSets to be more
     // efficient, so dispatch off of it instead.
@@ -119,20 +126,24 @@ abstract class DocSetBase implements DocSet {
     return intersection(other).size();
   }
 
+  @Override
   public int unionSize(DocSet other) {
     return this.size() + other.size() - this.intersectionSize(other);
   }
 
+  @Override
   public DocSet andNot(DocSet other) {
     OpenBitSet newbits = (OpenBitSet)(this.getBits().clone());
     newbits.andNot(other.getBits());
     return new BitDocSet(newbits);
   }
 
+  @Override
   public int andNotSize(DocSet other) {
     return this.size() - this.intersectionSize(other);
   }
 
+  @Override
   public Filter getTopFilter() {
     final OpenBitSet bs = getBits();
 
@@ -194,6 +205,7 @@ abstract class DocSetBase implements DocSet {
     };
   }
 
+  @Override
   public void setBitsOn(OpenBitSet target) {
     DocIterator iter = iterator();
     while (iter.hasNext()) {
diff --git a/solr/core/src/java/org/apache/solr/search/DocSlice.java b/solr/core/src/java/org/apache/solr/search/DocSlice.java
index e82a400..00a0ebc 100644
--- a/solr/core/src/java/org/apache/solr/search/DocSlice.java
+++ b/solr/core/src/java/org/apache/solr/search/DocSlice.java
@@ -52,6 +52,7 @@ public class DocSlice extends DocSetBase implements DocList {
     this.maxScore=maxScore;
   }
 
+  @Override
   public DocList subset(int offset, int len) {
     if (this.offset == offset && this.len==len) return this;
 
@@ -65,20 +66,26 @@ public class DocSlice extends DocSetBase implements DocList {
     return new DocSlice(offset, realLen, docs, scores, matches, maxScore);
   }
 
+  @Override
   public boolean hasScores() {
     return scores!=null;
   }
 
+  @Override
   public float maxScore() {
     return maxScore;
   }
 
 
+  @Override
   public int offset()  { return offset; }
+  @Override
   public int size()    { return len; }
+  @Override
   public int matches() { return matches; }
 
 
+  @Override
   public long memSize() {
     return (docs.length<<2)
             + (scores==null ? 0 : (scores.length<<2))
@@ -86,6 +93,7 @@ public class DocSlice extends DocSetBase implements DocList {
   }
 
 
+  @Override
   public boolean exists(int doc) {
     int end = offset+len;
     for (int i=offset; i<end; i++) {
@@ -96,14 +104,17 @@ public class DocSlice extends DocSetBase implements DocList {
 
   // Hmmm, maybe I could have reused the scorer interface here...
   // except that it carries Similarity baggage...
+  @Override
   public DocIterator iterator() {
     return new DocIterator() {
       int pos=offset;
       final int end=offset+len;
+      @Override
       public boolean hasNext() {
         return pos < end;
       }
 
+      @Override
       public Integer next() {
         return nextDoc();
       }
@@ -111,14 +122,17 @@ public class DocSlice extends DocSetBase implements DocList {
       /**
        * The remove  operation is not supported by this Iterator.
        */
+      @Override
       public void remove() {
         throw new UnsupportedOperationException("The remove  operation is not supported by this Iterator.");
       }
 
+      @Override
       public int nextDoc() {
         return docs[pos++];
       }
 
+      @Override
       public float score() {
         return scores[pos-1];
       }
diff --git a/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
index 55049ba..6255e29 100755
--- a/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
@@ -54,6 +54,7 @@ import org.apache.solr.util.SolrPluginUtils;
 public class ExtendedDismaxQParserPlugin extends QParserPlugin {
   public static final String NAME = "edismax";
 
+  @Override
   public void init(NamedList args) {
   }
 
@@ -1375,10 +1376,12 @@ class ExtendedDismaxQParser extends QParser {
      * as this object is less than, equal to, or greater than
      * the specified object.
      */
+    @Override
     public int compareTo(DynamicField other) {
       return other.wildcard.length() - wildcard.length();
     }
     
+    @Override
     public String toString() {
       return this.wildcard;
     }
diff --git a/solr/core/src/java/org/apache/solr/search/ExtendedQueryBase.java b/solr/core/src/java/org/apache/solr/search/ExtendedQueryBase.java
index 1ad16b4..4607bf5 100644
--- a/solr/core/src/java/org/apache/solr/search/ExtendedQueryBase.java
+++ b/solr/core/src/java/org/apache/solr/search/ExtendedQueryBase.java
@@ -49,6 +49,7 @@ public class ExtendedQueryBase extends Query implements ExtendedQuery {
     this.cost = cost;
   }
 
+  @Override
   public int getCost() {
     return cost;
   }
diff --git a/solr/core/src/java/org/apache/solr/search/FastLRUCache.java b/solr/core/src/java/org/apache/solr/search/FastLRUCache.java
index c4732f6..9072da8 100644
--- a/solr/core/src/java/org/apache/solr/search/FastLRUCache.java
+++ b/solr/core/src/java/org/apache/solr/search/FastLRUCache.java
@@ -51,6 +51,7 @@ public class FastLRUCache<K,V> extends SolrCacheBase implements SolrCache<K,V> {
   private ConcurrentLRUCache<K,V> cache;
   private int showItems = 0;
 
+  @Override
   public Object init(Map args, Object persistence, CacheRegenerator regenerator) {
     super.init(args, regenerator);
     String str = (String) args.get("size");
@@ -113,27 +114,33 @@ public class FastLRUCache<K,V> extends SolrCacheBase implements SolrCache<K,V> {
     return description;
   }
 
+  @Override
   public int size() {
     return cache.size();
   }
 
+  @Override
   public V put(K key, V value) {
     return cache.put(key, value);
   }
 
+  @Override
   public V get(K key) {
     return cache.get(key);
   }
 
+  @Override
   public void clear() {
     cache.clear();
   }
 
+  @Override
   public void setState(State state) {
     super.setState(state);
     cache.setAlive(state == State.LIVE);
   }
 
+  @Override
   public void warm(SolrIndexSearcher searcher, SolrCache old) {
     if (regenerator == null) return;
     long warmingStartTime = System.currentTimeMillis();
@@ -162,6 +169,7 @@ public class FastLRUCache<K,V> extends SolrCacheBase implements SolrCache<K,V> {
   }
 
 
+  @Override
   public void close() {
     // add the stats to the cumulative stats object (the first in the statsList)
     statsList.get(0).add(cache.getStats());
@@ -170,19 +178,23 @@ public class FastLRUCache<K,V> extends SolrCacheBase implements SolrCache<K,V> {
   }
 
   //////////////////////// SolrInfoMBeans methods //////////////////////
+  @Override
   public String getName() {
     return FastLRUCache.class.getName();
   }
 
+  @Override
   public String getDescription() {
     return description;
   }
 
+  @Override
   public String getSource() {
     return "$URL$";
   }
 
 
+  @Override
   public NamedList getStatistics() {
     NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();
     if (cache == null)  return lst;
diff --git a/solr/core/src/java/org/apache/solr/search/FieldQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/FieldQParserPlugin.java
index 0271680..308d22d 100644
--- a/solr/core/src/java/org/apache/solr/search/FieldQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/FieldQParserPlugin.java
@@ -34,6 +34,7 @@ import org.apache.solr.schema.SchemaField;
 public class FieldQParserPlugin extends QParserPlugin {
   public static String NAME = "field";
 
+  @Override
   public void init(NamedList args) {
   }
 
diff --git a/solr/core/src/java/org/apache/solr/search/FunctionQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/FunctionQParserPlugin.java
index f88b409..8027c35 100644
--- a/solr/core/src/java/org/apache/solr/search/FunctionQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/FunctionQParserPlugin.java
@@ -28,6 +28,7 @@ import org.apache.solr.request.SolrQueryRequest;
 public class FunctionQParserPlugin extends QParserPlugin {
   public static String NAME = "func";
 
+  @Override
   public void init(NamedList args) {
   }
 
diff --git a/solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin.java
index 095c90d..fce65ce 100755
--- a/solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin.java
@@ -38,6 +38,7 @@ import org.apache.solr.search.function.*;
 public class FunctionRangeQParserPlugin extends QParserPlugin {
   public static String NAME = "frange";
 
+  @Override
   public void init(NamedList args) {
   }
 
diff --git a/solr/core/src/java/org/apache/solr/search/Grouping.java b/solr/core/src/java/org/apache/solr/search/Grouping.java
index 1ae2561..992e3a4 100755
--- a/solr/core/src/java/org/apache/solr/search/Grouping.java
+++ b/solr/core/src/java/org/apache/solr/search/Grouping.java
@@ -681,6 +681,7 @@ public class Grouping {
     /**
      * {@inheritDoc}
      */
+    @Override
     protected void prepare() throws IOException {
       actualGroupsToFind = getMax(offset, numGroups, maxDoc);
     }
@@ -688,6 +689,7 @@ public class Grouping {
     /**
      * {@inheritDoc}
      */
+    @Override
     protected Collector createFirstPassCollector() throws IOException {
       // Ok we don't want groups, but do want a total count
       if (actualGroupsToFind <= 0) {
@@ -703,6 +705,7 @@ public class Grouping {
     /**
      * {@inheritDoc}
      */
+    @Override
     protected Collector createSecondPassCollector() throws IOException {
       if (actualGroupsToFind <= 0) {
         allGroupsCollector = new TermAllGroupsCollector(groupBy);
@@ -747,6 +750,7 @@ public class Grouping {
     /**
      * {@inheritDoc}
      */
+    @Override
     protected void finish() throws IOException {
       result = secondPass != null ? secondPass.getTopGroups(0) : null;
       if (main) {
@@ -796,6 +800,7 @@ public class Grouping {
     /**
      * {@inheritDoc}
      */
+    @Override
     public int getMatches() {
       if (result == null && fallBackCollector == null) {
         return 0;
@@ -807,6 +812,7 @@ public class Grouping {
     /**
      * {@inheritDoc}
      */
+    @Override
     protected Integer getNumberOfGroups() {
       return allGroupsCollector == null ? null : allGroupsCollector.getGroupCount();
     }
@@ -825,6 +831,7 @@ public class Grouping {
     /**
      * {@inheritDoc}
      */
+    @Override
     protected void prepare() throws IOException {
       actualGroupsToFind = getMax(offset, numGroups, maxDoc);
     }
@@ -832,6 +839,7 @@ public class Grouping {
     /**
      * {@inheritDoc}
      */
+    @Override
     protected Collector createFirstPassCollector() throws IOException {
       DocSet groupFilt = searcher.getDocSet(query);
       topCollector = newCollector(groupSort, needScores);
@@ -851,6 +859,7 @@ public class Grouping {
     /**
      * {@inheritDoc}
      */
+    @Override
     protected void finish() throws IOException {
       TopDocsCollector topDocsCollector = (TopDocsCollector) collector.getDelegate();
       TopDocs topDocs = topDocsCollector.topDocs();
@@ -866,6 +875,7 @@ public class Grouping {
     /**
      * {@inheritDoc}
      */
+    @Override
     public int getMatches() {
       return collector.getMatches();
     }
@@ -889,6 +899,7 @@ public class Grouping {
     /**
      * {@inheritDoc}
      */
+    @Override
     protected void prepare() throws IOException {
       Map context = ValueSource.newContext(searcher);
       groupBy.createWeight(context, searcher);
@@ -898,6 +909,7 @@ public class Grouping {
     /**
      * {@inheritDoc}
      */
+    @Override
     protected Collector createFirstPassCollector() throws IOException {
       // Ok we don't want groups, but do want a total count
       if (actualGroupsToFind <= 0) {
@@ -913,6 +925,7 @@ public class Grouping {
     /**
      * {@inheritDoc}
      */
+    @Override
     protected Collector createSecondPassCollector() throws IOException {
       if (actualGroupsToFind <= 0) {
         allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);
@@ -954,6 +967,7 @@ public class Grouping {
     /**
      * {@inheritDoc}
      */
+    @Override
     protected void finish() throws IOException {
       result = secondPass != null ? secondPass.getTopGroups(0) : null;
       if (main) {
@@ -989,6 +1003,7 @@ public class Grouping {
     /**
      * {@inheritDoc}
      */
+    @Override
     public int getMatches() {
       if (result == null && fallBackCollector == null) {
         return 0;
@@ -1000,6 +1015,7 @@ public class Grouping {
     /**
      * {@inheritDoc}
      */
+    @Override
     protected Integer getNumberOfGroups() {
       return allGroupsCollector == null ? null : allGroupsCollector.getGroupCount();
     }
diff --git a/solr/core/src/java/org/apache/solr/search/HashDocSet.java b/solr/core/src/java/org/apache/solr/search/HashDocSet.java
index 21eb417..28ed05a 100644
--- a/solr/core/src/java/org/apache/solr/search/HashDocSet.java
+++ b/solr/core/src/java/org/apache/solr/search/HashDocSet.java
@@ -96,6 +96,7 @@ public final class HashDocSet extends DocSetBase {
     table[s]=doc;
   }
 
+  @Override
   public boolean exists(int doc) {
     int s = doc & mask;
     for(;;) {
@@ -108,24 +109,29 @@ public final class HashDocSet extends DocSetBase {
   }
 
 
+  @Override
   public int size() {
     return size;
   }
 
+  @Override
   public DocIterator iterator() {
     return new DocIterator() {
       int pos=0;
       int doc;
       { goNext(); }
 
+      @Override
       public boolean hasNext() {
         return pos < table.length;
       }
 
+      @Override
       public Integer next() {
         return nextDoc();
       }
 
+      @Override
       public void remove() {
       }
 
@@ -134,6 +140,7 @@ public final class HashDocSet extends DocSetBase {
       }
 
       // modify to return -1 at end of iteration?
+      @Override
       public int nextDoc() {
         int doc = table[pos];
         pos++;
@@ -141,12 +148,14 @@ public final class HashDocSet extends DocSetBase {
         return doc;
       }
 
+      @Override
       public float score() {
         return 0.0f;
       }
     };
   }
 
+  @Override
   public long memSize() {
     return (table.length<<2) + 20;
   }
diff --git a/solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java
index c1448dd..ba50657 100644
--- a/solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.java
@@ -47,11 +47,14 @@ import java.util.Set;
 public class JoinQParserPlugin extends QParserPlugin {
   public static String NAME = "join";
 
+  @Override
   public void init(NamedList args) {
   }
 
+  @Override
   public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {
     return new QParser(qstr, localParams, params, req) {
+      @Override
       public Query parse() throws SyntaxError {
         String fromField = getParam("from");
         String fromIndex = getParam("fromIndex");
@@ -121,6 +124,7 @@ class JoinQuery extends Query {
   public void extractTerms(Set terms) {
   }
 
+  @Override
   public Weight createWeight(IndexSearcher searcher) throws IOException {
     return new JoinQueryWeight((SolrIndexSearcher)searcher);
   }
@@ -191,6 +195,7 @@ class JoinQuery extends Query {
       this.toSearcher = searcher;
     }
 
+    @Override
     public Query getQuery() {
       return JoinQuery.this;
     }
diff --git a/solr/core/src/java/org/apache/solr/search/LFUCache.java b/solr/core/src/java/org/apache/solr/search/LFUCache.java
index 521115b..932459d 100644
--- a/solr/core/src/java/org/apache/solr/search/LFUCache.java
+++ b/solr/core/src/java/org/apache/solr/search/LFUCache.java
@@ -59,6 +59,7 @@ public class LFUCache<K, V> implements SolrCache<K, V> {
   private int showItems = 0;
   private Boolean timeDecay = true;
 
+  @Override
   public Object init(Map args, Object persistence, CacheRegenerator regenerator) {
     state = State.CREATED;
     this.regenerator = regenerator;
@@ -124,36 +125,44 @@ public class LFUCache<K, V> implements SolrCache<K, V> {
     return statsList;
   }
 
+  @Override
   public String name() {
     return name;
   }
 
+  @Override
   public int size() {
     return cache.size();
 
   }
 
+  @Override
   public V put(K key, V value) {
     return cache.put(key, value);
   }
 
+  @Override
   public V get(K key) {
     return cache.get(key);
   }
 
+  @Override
   public void clear() {
     cache.clear();
   }
 
+  @Override
   public void setState(State state) {
     this.state = state;
     cache.setAlive(state == State.LIVE);
   }
 
+  @Override
   public State getState() {
     return state;
   }
 
+  @Override
   public void warm(SolrIndexSearcher searcher, SolrCache old) {
     if (regenerator == null) return;
     long warmingStartTime = System.currentTimeMillis();
@@ -182,6 +191,7 @@ public class LFUCache<K, V> implements SolrCache<K, V> {
   }
 
 
+  @Override
   public void close() {
     // add the stats to the cumulative stats object (the first in the statsList)
     statsList.get(0).add(cache.getStats());
@@ -190,26 +200,32 @@ public class LFUCache<K, V> implements SolrCache<K, V> {
   }
 
   //////////////////////// SolrInfoMBeans methods //////////////////////
+  @Override
   public String getName() {
     return LFUCache.class.getName();
   }
 
+  @Override
   public String getVersion() {
     return SolrCore.version;
   }
 
+  @Override
   public String getDescription() {
     return description;
   }
 
+  @Override
   public Category getCategory() {
     return Category.CACHE;
   }
 
+  @Override
   public String getSource() {
     return "$URL$";
   }
 
+  @Override
   public URL[] getDocs() {
     return null;
   }
@@ -223,6 +239,7 @@ public class LFUCache<K, V> implements SolrCache<K, V> {
     return "0." + hundredths;
   }
 
+  @Override
   public NamedList getStatistics() {
     NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();
     if (cache == null) return lst;
diff --git a/solr/core/src/java/org/apache/solr/search/LRUCache.java b/solr/core/src/java/org/apache/solr/search/LRUCache.java
index 8c631c0..d3f9fca 100644
--- a/solr/core/src/java/org/apache/solr/search/LRUCache.java
+++ b/solr/core/src/java/org/apache/solr/search/LRUCache.java
@@ -56,6 +56,7 @@ public class LRUCache<K,V> extends SolrCacheBase implements SolrCache<K,V> {
   private Map<K,V> map;
   private String description="LRU Cache";
 
+  @Override
   public Object init(Map args, Object persistence, CacheRegenerator regenerator) {
     super.init(args, regenerator);
     String str = (String)args.get("size");
@@ -102,12 +103,14 @@ public class LRUCache<K,V> extends SolrCacheBase implements SolrCache<K,V> {
     return description;
   }
 
+  @Override
   public int size() {
     synchronized(map) {
       return map.size();
     }
   }
 
+  @Override
   public V put(K key, V value) {
     synchronized (map) {
       if (getState() == State.LIVE) {
@@ -121,6 +124,7 @@ public class LRUCache<K,V> extends SolrCacheBase implements SolrCache<K,V> {
     }
   }
 
+  @Override
   public V get(K key) {
     synchronized (map) {
       V val = map.get(key);
@@ -137,12 +141,14 @@ public class LRUCache<K,V> extends SolrCacheBase implements SolrCache<K,V> {
     }
   }
 
+  @Override
   public void clear() {
     synchronized(map) {
       map.clear();
     }
   }
 
+  @Override
   public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {
     if (regenerator==null) return;
     long warmingStartTime = System.currentTimeMillis();
@@ -192,6 +198,7 @@ public class LRUCache<K,V> extends SolrCacheBase implements SolrCache<K,V> {
   }
 
 
+  @Override
   public void close() {
   }
 
@@ -199,18 +206,22 @@ public class LRUCache<K,V> extends SolrCacheBase implements SolrCache<K,V> {
   //////////////////////// SolrInfoMBeans methods //////////////////////
 
 
+  @Override
   public String getName() {
     return LRUCache.class.getName();
   }
 
+  @Override
   public String getDescription() {
      return description;
   }
 
+  @Override
   public String getSource() {
     return "$URL$";
   }
 
+  @Override
   public NamedList getStatistics() {
     NamedList lst = new SimpleOrderedMap();
     synchronized (map) {
diff --git a/solr/core/src/java/org/apache/solr/search/LuceneQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/LuceneQParserPlugin.java
index 326d5ae..d4ed393 100755
--- a/solr/core/src/java/org/apache/solr/search/LuceneQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/LuceneQParserPlugin.java
@@ -36,6 +36,7 @@ import java.util.List;
 public class LuceneQParserPlugin extends QParserPlugin {
   public static String NAME = "lucene";
 
+  @Override
   public void init(NamedList args) {
   }
 
diff --git a/solr/core/src/java/org/apache/solr/search/NestedQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/NestedQParserPlugin.java
index c53dfad..932d09b 100755
--- a/solr/core/src/java/org/apache/solr/search/NestedQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/NestedQParserPlugin.java
@@ -34,6 +34,7 @@ import org.apache.solr.request.SolrQueryRequest;
 public class NestedQParserPlugin extends QParserPlugin {
   public static String NAME = "query";
 
+  @Override
   public void init(NamedList args) {
   }
 
diff --git a/solr/core/src/java/org/apache/solr/search/OldLuceneQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/OldLuceneQParserPlugin.java
index fb14aad..c1d6b31 100755
--- a/solr/core/src/java/org/apache/solr/search/OldLuceneQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/OldLuceneQParserPlugin.java
@@ -28,6 +28,7 @@ import org.apache.solr.request.SolrQueryRequest;
 public class OldLuceneQParserPlugin extends QParserPlugin {
   public static String NAME = "lucenePlusSort";
 
+  @Override
   public void init(NamedList args) {
   }
 
diff --git a/solr/core/src/java/org/apache/solr/search/PrefixQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/PrefixQParserPlugin.java
index 7745b4e..b72e6d6 100755
--- a/solr/core/src/java/org/apache/solr/search/PrefixQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/PrefixQParserPlugin.java
@@ -32,6 +32,7 @@ import org.apache.solr.request.SolrQueryRequest;
 public class PrefixQParserPlugin extends QParserPlugin {
   public static String NAME = "prefix";
 
+  @Override
   public void init(NamedList args) {
   }
 
diff --git a/solr/core/src/java/org/apache/solr/search/RawQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/RawQParserPlugin.java
index f4289a7..d275a15 100644
--- a/solr/core/src/java/org/apache/solr/search/RawQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/RawQParserPlugin.java
@@ -36,6 +36,7 @@ import org.apache.solr.request.SolrQueryRequest;
 public class RawQParserPlugin extends QParserPlugin {
   public static String NAME = "raw";
 
+  @Override
   public void init(NamedList args) {
   }
 
diff --git a/solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean.java b/solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean.java
index 119f858..93d3686 100644
--- a/solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean.java
+++ b/solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean.java
@@ -38,19 +38,26 @@ public class SolrFieldCacheMBean implements SolrInfoMBean {
 
   protected FieldCacheSanityChecker checker = new FieldCacheSanityChecker();
 
+  @Override
   public String getName() { return this.getClass().getName(); }
+  @Override
   public String getVersion() { return SolrCore.version; }
+  @Override
   public String getDescription() {
     return "Provides introspection of the Lucene FieldCache, "
       +    "this is **NOT** a cache that is managed by Solr.";
   }
+  @Override
   public Category getCategory() { return Category.CACHE; } 
+  @Override
   public String getSource() { 
     return "$URL$";
   }
+  @Override
   public URL[] getDocs() {
     return null;
   }
+  @Override
   public NamedList getStatistics() {
     NamedList stats = new SimpleOrderedMap();
     CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();
diff --git a/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java b/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
index 3b70250..6590645 100644
--- a/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
+++ b/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
@@ -252,6 +252,7 @@ public class SolrIndexSearcher extends IndexSearcher implements Closeable,SolrIn
    *
    * In particular, the underlying reader and any cache's in use are closed.
    */
+  @Override
   public void close() throws IOException {
     if (debug) {
       if (cachingEnabled) {
@@ -331,6 +332,7 @@ public class SolrIndexSearcher extends IndexSearcher implements Closeable,SolrIn
     if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {
       solrConfig.fieldValueCacheConfig.setRegenerator(
               new CacheRegenerator() {
+                @Override
                 public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {
                   if (oldVal instanceof UnInvertedField) {
                     UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);
@@ -344,6 +346,7 @@ public class SolrIndexSearcher extends IndexSearcher implements Closeable,SolrIn
     if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {
       solrConfig.filterCacheConfig.setRegenerator(
               new CacheRegenerator() {
+                @Override
                 public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {
                   newSearcher.cacheDocSet((Query)oldKey, null, false);
                   return true;
@@ -356,6 +359,7 @@ public class SolrIndexSearcher extends IndexSearcher implements Closeable,SolrIn
       final int queryResultWindowSize = solrConfig.queryResultWindowSize;
       solrConfig.queryResultCacheConfig.setRegenerator(
               new CacheRegenerator() {
+                @Override
                 public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {
                   QueryResultKey key = (QueryResultKey)oldKey;
                   int nDocs=1;
@@ -438,6 +442,7 @@ public class SolrIndexSearcher extends IndexSearcher implements Closeable,SolrIn
       lazyDoc = new LazyDocument(reader, docID);
     }
 
+    @Override
     public Status needsField(FieldInfo fieldInfo) {
       if (fieldsToLoad.contains(fieldInfo.name)) {
         return Status.YES;
@@ -1953,30 +1958,37 @@ public class SolrIndexSearcher extends IndexSearcher implements Closeable,SolrIn
   // SolrInfoMBean stuff: Statistics and Module Info
   /////////////////////////////////////////////////////////////////////
 
+  @Override
   public String getName() {
     return SolrIndexSearcher.class.getName();
   }
 
+  @Override
   public String getVersion() {
     return SolrCore.version;
   }
 
+  @Override
   public String getDescription() {
     return "index searcher";
   }
 
+  @Override
   public Category getCategory() {
     return Category.CORE;
   }
 
+  @Override
   public String getSource() {
     return "$URL$";
   }
 
+  @Override
   public URL[] getDocs() {
     return null;
   }
 
+  @Override
   public NamedList<Object> getStatistics() {
     NamedList<Object> lst = new SimpleOrderedMap<Object>();
     lst.add("searcherName", name);
diff --git a/solr/core/src/java/org/apache/solr/search/SortedIntDocSet.java b/solr/core/src/java/org/apache/solr/search/SortedIntDocSet.java
index 754fd14..1ce81bd 100755
--- a/solr/core/src/java/org/apache/solr/search/SortedIntDocSet.java
+++ b/solr/core/src/java/org/apache/solr/search/SortedIntDocSet.java
@@ -50,8 +50,10 @@ public class SortedIntDocSet extends DocSetBase {
 
   public int[] getDocs() { return docs; }
 
+  @Override
   public int size()      { return docs.length; }
 
+  @Override
   public long memSize() {
     return (docs.length<<2)+8;
   }
@@ -219,6 +221,7 @@ public class SortedIntDocSet extends DocSetBase {
     return false;
   }
 
+  @Override
   public int intersectionSize(DocSet other) {
     if (!(other instanceof SortedIntDocSet)) {
       // assume other implementations are better at random access than we are,
@@ -567,6 +570,7 @@ public class SortedIntDocSet extends DocSetBase {
   }
 
 
+  @Override
   public boolean exists(int doc) {
     // this could be faster by estimating where in the list the doc is likely to appear,
     // but we should get away from using exists() anyway.
@@ -591,13 +595,16 @@ public class SortedIntDocSet extends DocSetBase {
   }
   
 
+  @Override
   public DocIterator iterator() {
     return new DocIterator() {
       int pos=0;
+      @Override
       public boolean hasNext() {
         return pos < docs.length;
       }
 
+      @Override
       public Integer next() {
         return nextDoc();
       }
@@ -605,14 +612,17 @@ public class SortedIntDocSet extends DocSetBase {
       /**
        * The remove  operation is not supported by this Iterator.
        */
+      @Override
       public void remove() {
         throw new UnsupportedOperationException("The remove  operation is not supported by this Iterator.");
       }
 
+      @Override
       public int nextDoc() {
         return docs[pos++];
       }
 
+      @Override
       public float score() {
         return 0.0f;
       }
diff --git a/solr/core/src/java/org/apache/solr/search/SpatialFilterQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/SpatialFilterQParserPlugin.java
index 7ce1382..7a902ac 100644
--- a/solr/core/src/java/org/apache/solr/search/SpatialFilterQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/SpatialFilterQParserPlugin.java
@@ -58,6 +58,7 @@ public class SpatialFilterQParserPlugin extends QParserPlugin {
     return new SpatialFilterQParser(qstr, localParams, params, req, false);
   }
 
+  @Override
   public void init(NamedList args) {
 
   }
diff --git a/solr/core/src/java/org/apache/solr/search/TermQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/TermQParserPlugin.java
index 381e2e2..67016c5 100644
--- a/solr/core/src/java/org/apache/solr/search/TermQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/TermQParserPlugin.java
@@ -43,6 +43,7 @@ import org.apache.solr.schema.FieldType;
 public class TermQParserPlugin extends QParserPlugin {
   public static String NAME = "term";
 
+  @Override
   public void init(NamedList args) {
   }
 
diff --git a/solr/core/src/java/org/apache/solr/search/ValueSourceParser.java b/solr/core/src/java/org/apache/solr/search/ValueSourceParser.java
index 3a935f7..025460e 100755
--- a/solr/core/src/java/org/apache/solr/search/ValueSourceParser.java
+++ b/solr/core/src/java/org/apache/solr/search/ValueSourceParser.java
@@ -55,6 +55,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
   /**
    * Initialize the plugin.
    */
+  @Override
   public void init(NamedList args) {}
 
   /**
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/collector/FilterCollector.java b/solr/core/src/java/org/apache/solr/search/grouping/collector/FilterCollector.java
index a200fe6..5ab7f18 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/collector/FilterCollector.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/collector/FilterCollector.java
@@ -41,10 +41,12 @@ public class FilterCollector extends Collector {
     this.delegate = delegate;
   }
 
+  @Override
   public void setScorer(Scorer scorer) throws IOException {
     delegate.setScorer(scorer);
   }
 
+  @Override
   public void collect(int doc) throws IOException {
     matches++;
     if (filter.exists(doc + docBase)) {
@@ -52,11 +54,13 @@ public class FilterCollector extends Collector {
     }
   }
 
+  @Override
   public void setNextReader(AtomicReaderContext context) throws IOException {
     this.docBase = context.docBase;
     delegate.setNextReader(context);
   }
 
+  @Override
   public boolean acceptsDocsOutOfOrder() {
     return delegate.acceptsDocsOutOfOrder();
   }
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand.java b/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand.java
index 3262e7e..6f1d846 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/QueryCommand.java
@@ -123,6 +123,7 @@ public class QueryCommand implements Command<QueryCommandResult> {
     this.queryString = queryString;
   }
 
+  @Override
   public List<Collector> create() throws IOException {
     if (sort == null || sort == Sort.RELEVANCE) {
       collector = TopScoreDocCollector.create(docsToCollect, true);
@@ -133,18 +134,22 @@ public class QueryCommand implements Command<QueryCommandResult> {
     return Arrays.asList((Collector) filterCollector);
   }
 
+  @Override
   public QueryCommandResult result() {
     return new QueryCommandResult(collector.topDocs(), filterCollector.getMatches());
   }
 
+  @Override
   public String getKey() {
     return queryString != null ? queryString : query.toString();
   }
 
+  @Override
   public Sort getGroupSort() {
     return sort;
   }
 
+  @Override
   public Sort getSortWithinGroup() {
     return null;
   }
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java b/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java
index c0a8eb3..37b66a8 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java
@@ -86,6 +86,7 @@ public class SearchGroupsFieldCommand implements Command<Pair<Integer, Collectio
     this.includeGroupCount = includeGroupCount;
   }
 
+  @Override
   public List<Collector> create() throws IOException {
     List<Collector> collectors = new ArrayList<Collector>();
     if (topNGroups > 0) {
@@ -99,6 +100,7 @@ public class SearchGroupsFieldCommand implements Command<Pair<Integer, Collectio
     return collectors;
   }
 
+  @Override
   public Pair<Integer, Collection<SearchGroup<BytesRef>>> result() {
     final Collection<SearchGroup<BytesRef>> topGroups;
     if (topNGroups > 0) {
@@ -115,14 +117,17 @@ public class SearchGroupsFieldCommand implements Command<Pair<Integer, Collectio
     return new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, topGroups);
   }
 
+  @Override
   public Sort getSortWithinGroup() {
     return null;
   }
 
+  @Override
   public Sort getGroupSort() {
     return groupSort;
   }
 
+  @Override
   public String getKey() {
     return field.getName();
   }
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java b/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java
index 61736e5..256f427 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java
@@ -119,6 +119,7 @@ public class TopGroupsFieldCommand implements Command<TopGroups<BytesRef>> {
     this.needMaxScore = needMaxScore;
   }
 
+  @Override
   public List<Collector> create() throws IOException {
     if (firstPhaseGroups.isEmpty()) {
       return Collections.emptyList();
@@ -132,6 +133,7 @@ public class TopGroupsFieldCommand implements Command<TopGroups<BytesRef>> {
     return collectors;
   }
 
+  @Override
   @SuppressWarnings("unchecked")
   public TopGroups<BytesRef> result() {
     if (firstPhaseGroups.isEmpty()) {
@@ -141,14 +143,17 @@ public class TopGroupsFieldCommand implements Command<TopGroups<BytesRef>> {
     return secondPassCollector.getTopGroups(0);
   }
 
+  @Override
   public String getKey() {
     return field.getName();
   }
 
+  @Override
   public Sort getGroupSort() {
     return groupSort;
   }
 
+  @Override
   public Sort getSortWithinGroup() {
     return sortWithinGroup;
   }
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory.java b/solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory.java
index 1186c5e..d94ebf7 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory.java
@@ -36,6 +36,7 @@ public class SearchGroupsRequestFactory implements ShardRequestFactory {
   /**
    * {@inheritDoc}
    */
+  @Override
   public ShardRequest[] constructRequest(ResponseBuilder rb) {
     ShardRequest sreq = new ShardRequest();
     GroupingSpecification groupingSpecification = rb.getGroupingSpec();
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory.java b/solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory.java
index 5b0d5ab..ca51b6b 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory.java
@@ -50,6 +50,7 @@ public class TopGroupsShardRequestFactory implements ShardRequestFactory {
   /**
    * {@inheritDoc}
    */
+  @Override
   public ShardRequest[] constructRequest(ResponseBuilder rb) {
     // If we have a group.query we need to query all shards... Or we move this to the group first phase queries
     boolean containsGroupByQuery = rb.getGroupingSpec().getQueries().length > 0;
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/SearchGroupShardResponseProcessor.java b/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/SearchGroupShardResponseProcessor.java
index 679d533..aaab3d0 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/SearchGroupShardResponseProcessor.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/SearchGroupShardResponseProcessor.java
@@ -41,6 +41,7 @@ public class SearchGroupShardResponseProcessor implements ShardResponseProcessor
   /**
    * {@inheritDoc}
    */
+  @Override
   public void process(ResponseBuilder rb, ShardRequest shardRequest) {
     SortSpec ss = rb.getSortSpec();
     Sort groupSort = rb.getGroupingSpec().getGroupSort();
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java b/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java
index 5112e1e..6b5c036 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java
@@ -35,6 +35,7 @@ public class StoredFieldsShardResponseProcessor implements ShardResponseProcesso
   /**
    * {@inheritDoc}
    */
+  @Override
   public void process(ResponseBuilder rb, ShardRequest shardRequest) {
     boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;
     ShardResponse srsp = shardRequest.responses.get(0);
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/TopGroupsShardResponseProcessor.java b/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/TopGroupsShardResponseProcessor.java
index cc35b62..46c1650 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/TopGroupsShardResponseProcessor.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/TopGroupsShardResponseProcessor.java
@@ -48,6 +48,7 @@ public class TopGroupsShardResponseProcessor implements ShardResponseProcessor {
   /**
    * {@inheritDoc}
    */
+  @Override
   @SuppressWarnings("unchecked")
   public void process(ResponseBuilder rb, ShardRequest shardRequest) {
     Sort groupSort = rb.getGroupingSpec().getGroupSort();
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java b/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java
index 9b45b20..8e5569b 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java
@@ -47,6 +47,7 @@ public class SearchGroupsResultTransformer implements ShardResultTransformer<Lis
   /**
    * {@inheritDoc}
    */
+  @Override
   public NamedList transform(List<Command> data) throws IOException {
     NamedList<NamedList> result = new NamedList<NamedList>();
     for (Command command : data) {
@@ -74,6 +75,7 @@ public class SearchGroupsResultTransformer implements ShardResultTransformer<Lis
   /**
    * {@inheritDoc}
    */
+  @Override
   public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {
     Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>>();
     for (Map.Entry<String, NamedList> command : shardResponse) {
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java b/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java
index fd04290..0aba67c 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java
@@ -60,6 +60,7 @@ public class TopGroupsResultTransformer implements ShardResultTransformer<List<C
   /**
    * {@inheritDoc}
    */
+  @Override
   public NamedList transform(List<Command> data) throws IOException {
     NamedList<NamedList> result = new NamedList<NamedList>();
     for (Command command : data) {
@@ -83,6 +84,7 @@ public class TopGroupsResultTransformer implements ShardResultTransformer<List<C
   /**
    * {@inheritDoc}
    */
+  @Override
   public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {
     Map<String, Object> result = new HashMap<String, Object>();
 
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer.java b/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer.java
index a531d8b..026cc4f 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer.java
@@ -48,6 +48,7 @@ public class GroupedEndResultTransformer implements EndResultTransformer {
   /**
    * {@inheritDoc}
    */
+  @Override
   public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {
     NamedList<Object> commands = new NamedList<Object>();
     for (Map.Entry<String, ?> entry : result.entrySet()) {
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer.java b/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer.java
index ae5053c..44ea1c4 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer.java
@@ -35,6 +35,7 @@ public class MainEndResultTransformer implements EndResultTransformer {
   /**
    * {@inheritDoc}
    */
+  @Override
   public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {
     Object value = result.get(rb.getGroupingSpec().getFields()[0]);
     if (TopGroups.class.isInstance(value)) {
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/SimpleEndResultTransformer.java b/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/SimpleEndResultTransformer.java
index aa2acda..ff866ae 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/SimpleEndResultTransformer.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/SimpleEndResultTransformer.java
@@ -36,6 +36,7 @@ public class SimpleEndResultTransformer implements EndResultTransformer {
   /**
    * {@inheritDoc}
    */
+  @Override
   public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {
     NamedList<Object> commands = new SimpleOrderedMap<Object>();
     for (Map.Entry<String, ?> entry : result.entrySet()) {
diff --git a/solr/core/src/java/org/apache/solr/servlet/RedirectServlet.java b/solr/core/src/java/org/apache/solr/servlet/RedirectServlet.java
index d3b8c53..a3dce87 100644
--- a/solr/core/src/java/org/apache/solr/servlet/RedirectServlet.java
+++ b/solr/core/src/java/org/apache/solr/servlet/RedirectServlet.java
@@ -35,6 +35,7 @@ public class RedirectServlet extends HttpServlet{
   String destination;
   int code = HttpServletResponse.SC_MOVED_PERMANENTLY;
   
+  @Override
   public void init(ServletConfig config) throws ServletException {
     super.init(config);
     
@@ -53,6 +54,7 @@ public class RedirectServlet extends HttpServlet{
     }
   }
   
+  @Override
   public void doGet(HttpServletRequest req, HttpServletResponse res)
           throws ServletException,IOException {
       
@@ -60,6 +62,7 @@ public class RedirectServlet extends HttpServlet{
     res.setHeader("Location", destination);
   }
 
+  @Override
   public void doPost(HttpServletRequest req, HttpServletResponse res)
           throws ServletException,IOException {
     doGet(req,res);
diff --git a/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java b/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
index 3cefaeb..e2ceae9 100644
--- a/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
+++ b/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
@@ -95,6 +95,7 @@ public class SolrDispatchFilter implements Filter
     }
   }
 
+  @Override
   public void init(FilterConfig config) throws ServletException
   {
     log.info("SolrDispatchFilter.init()");
@@ -125,6 +126,7 @@ public class SolrDispatchFilter implements Filter
     return new CoreContainer.Initializer();
   }
   
+  @Override
   public void destroy() {
     if (cores != null) {
       cores.shutdown();
@@ -132,6 +134,7 @@ public class SolrDispatchFilter implements Filter
     }    
   }
 
+  @Override
   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
     if( abortErrorMessage != null ) {
       ((HttpServletResponse)response).sendError( 500, abortErrorMessage );
diff --git a/solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.java b/solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.java
index 738c08d..4d1d052 100644
--- a/solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.java
+++ b/solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.java
@@ -232,6 +232,7 @@ interface SolrRequestParser
  */
 class SimpleRequestParser implements SolrRequestParser
 {
+  @Override
   public SolrParams parseParamsAndFillStreams( 
       final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception
   {
@@ -259,6 +260,7 @@ class HttpRequestContentStream extends ContentStreamBase
     }
   }
 
+  @Override
   public InputStream getStream() throws IOException {
     return req.getInputStream();
   }
@@ -281,6 +283,7 @@ class FileItemContentStream extends ContentStreamBase
     size = item.getSize();
   }
     
+  @Override
   public InputStream getStream() throws IOException {
     return item.getInputStream();
   }
@@ -291,6 +294,7 @@ class FileItemContentStream extends ContentStreamBase
  */
 class RawRequestParser implements SolrRequestParser
 {
+  @Override
   public SolrParams parseParamsAndFillStreams( 
       final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception
   {
@@ -320,6 +324,7 @@ class MultipartRequestParser implements SolrRequestParser
     uploadLimitKB = limit;
   }
   
+  @Override
   public SolrParams parseParamsAndFillStreams( 
       final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception
   {
@@ -376,6 +381,7 @@ class StandardRequestParser implements SolrRequestParser
     this.raw = raw;
   }
   
+  @Override
   public SolrParams parseParamsAndFillStreams( 
       final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception
   {
diff --git a/solr/core/src/java/org/apache/solr/spelling/PossibilityIterator.java b/solr/core/src/java/org/apache/solr/spelling/PossibilityIterator.java
index c56d427..a2f8d8b 100644
--- a/solr/core/src/java/org/apache/solr/spelling/PossibilityIterator.java
+++ b/solr/core/src/java/org/apache/solr/spelling/PossibilityIterator.java
@@ -346,14 +346,17 @@ public class PossibilityIterator implements
     return false;
   }
   
+  @Override
   public boolean hasNext() {
     return rankedPossibilityIterator.hasNext();
   }
   
+  @Override
   public PossibilityIterator.RankedSpellPossibility next() {
     return rankedPossibilityIterator.next();
   }
   
+  @Override
   public void remove() {
     throw new UnsupportedOperationException();
   }
@@ -388,6 +391,7 @@ public class PossibilityIterator implements
       return true;
     }
     
+    @Override
     public String toString() {
       StringBuilder sb = new StringBuilder();
       sb.append("rank=").append(rank).append(" (").append(index).append(")");
@@ -413,6 +417,7 @@ public class PossibilityIterator implements
   
   private class RankComparator implements Comparator<RankedSpellPossibility> {
     // Rank poorer suggestions ahead of better ones for use with a PriorityQueue
+    @Override
     public int compare(RankedSpellPossibility r1, RankedSpellPossibility r2) {
       int retval = r2.rank - r1.rank;
       if (retval == 0) {
diff --git a/solr/core/src/java/org/apache/solr/spelling/QueryConverter.java b/solr/core/src/java/org/apache/solr/spelling/QueryConverter.java
index 1cd265f..2c661fa 100644
--- a/solr/core/src/java/org/apache/solr/spelling/QueryConverter.java
+++ b/solr/core/src/java/org/apache/solr/spelling/QueryConverter.java
@@ -76,6 +76,7 @@ public abstract class QueryConverter implements NamedListInitializedPlugin {
    * </p>
    */
   public static final int TERM_IN_BOOLEAN_QUERY_FLAG = 131072;
+  @Override
   public void init(NamedList args) {
     this.args = args;
   }
diff --git a/solr/core/src/java/org/apache/solr/spelling/SpellCheckCollation.java b/solr/core/src/java/org/apache/solr/spelling/SpellCheckCollation.java
index 18e98f3..f6b71a5 100644
--- a/solr/core/src/java/org/apache/solr/spelling/SpellCheckCollation.java
+++ b/solr/core/src/java/org/apache/solr/spelling/SpellCheckCollation.java
@@ -25,6 +25,7 @@ public class SpellCheckCollation implements Comparable<SpellCheckCollation> {
   private int internalRank;
   private String collationQuery;
 
+  @Override
   public int compareTo(SpellCheckCollation scc) {
     int c = new Integer(internalRank).compareTo(scc.internalRank);
     if (c == 0) {
diff --git a/solr/core/src/java/org/apache/solr/update/CommitTracker.java b/solr/core/src/java/org/apache/solr/update/CommitTracker.java
index 915636e..82ddbce 100644
--- a/solr/core/src/java/org/apache/solr/update/CommitTracker.java
+++ b/solr/core/src/java/org/apache/solr/update/CommitTracker.java
@@ -192,6 +192,7 @@ public final class CommitTracker implements Runnable {
   }
   
   /** This is the worker part for the ScheduledFuture **/
+  @Override
   public void run() {
     synchronized (this) {
       // log.info("###start commit. pending=null");
diff --git a/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java b/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
index 8e89467..4dad918 100644
--- a/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
+++ b/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
@@ -746,30 +746,37 @@ public class DirectUpdateHandler2 extends UpdateHandler implements SolrCoreState
   // SolrInfoMBean stuff: Statistics and Module Info
   /////////////////////////////////////////////////////////////////////
 
+  @Override
   public String getName() {
     return DirectUpdateHandler2.class.getName();
   }
 
+  @Override
   public String getVersion() {
     return SolrCore.version;
   }
 
+  @Override
   public String getDescription() {
     return "Update handler that efficiently directly updates the on-disk main lucene index";
   }
 
+  @Override
   public Category getCategory() {
     return Category.UPDATEHANDLER;
   }
 
+  @Override
   public String getSource() {
     return "$URL$";
   }
 
+  @Override
   public URL[] getDocs() {
     return null;
   }
 
+  @Override
   public NamedList getStatistics() {
     NamedList lst = new SimpleOrderedMap();
     lst.add("commits", commitCommands.get());
diff --git a/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java b/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
index efad903..759802e 100644
--- a/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
+++ b/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
@@ -525,6 +525,7 @@ public class SolrCmdDistributor {
       return true;
     }
 
+    @Override
     public ZkCoreNodeProps getNodeProps() {
       return nodeProps;
     }
diff --git a/solr/core/src/java/org/apache/solr/update/TransactionLog.java b/solr/core/src/java/org/apache/solr/update/TransactionLog.java
index 8d5f0e7..1133d2f 100644
--- a/solr/core/src/java/org/apache/solr/update/TransactionLog.java
+++ b/solr/core/src/java/org/apache/solr/update/TransactionLog.java
@@ -556,6 +556,7 @@ public class TransactionLog {
     }
   }
 
+  @Override
   public String toString() {
     return "tlog{file=" + tlogFile.toString() + " refcount=" + refcount.get() + "}";
   }
diff --git a/solr/core/src/java/org/apache/solr/update/UpdateLog.java b/solr/core/src/java/org/apache/solr/update/UpdateLog.java
index df0742d..5ae47db 100644
--- a/solr/core/src/java/org/apache/solr/update/UpdateLog.java
+++ b/solr/core/src/java/org/apache/solr/update/UpdateLog.java
@@ -125,6 +125,7 @@ public class UpdateLog implements PluginInfoInitialized {
 
   // keep track of deletes only... this is not updated on an add
   private LinkedHashMap<BytesRef, LogPtr> oldDeletes = new LinkedHashMap<BytesRef, LogPtr>(numDeletesToKeep) {
+    @Override
     protected boolean removeEldestEntry(Map.Entry eldest) {
       return size() > numDeletesToKeep;
     }
@@ -167,6 +168,7 @@ public class UpdateLog implements PluginInfoInitialized {
       this.version = version;
     }
 
+    @Override
     public String toString() {
       return "LogPtr(" + pointer + ")";
     }
@@ -177,6 +179,7 @@ public class UpdateLog implements PluginInfoInitialized {
     return versionInfo;
   }
 
+  @Override
   public void init(PluginInfo info) {
     dataDir = (String)info.initArgs.get("dir");
     defaultSyncLevel = SyncLevel.getSyncLevel((String)info.initArgs.get("syncLevel"));
@@ -318,6 +321,7 @@ public class UpdateLog implements PluginInfoInitialized {
   public static String[] getLogList(File directory) {
     final String prefix = TLOG_NAME+'.';
     String[] names = directory.list(new FilenameFilter() {
+      @Override
       public boolean accept(File dir, String name) {
         return name.startsWith(prefix);
       }
@@ -1103,6 +1107,7 @@ public class UpdateLog implements PluginInfoInitialized {
     return state;
   }
 
+  @Override
   public String toString() {
     return "FSUpdateLog{state="+getState()+", tlog="+tlog+"}";
   }
diff --git a/solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory.java
index bd7cef2..1249e9a 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory.java
@@ -197,6 +197,7 @@ public class CloneFieldUpdateProcessorFactory
     super.init(args);
   }
 
+  @Override
   public void inform(final SolrCore core) {
     
     final IndexSchema schema = core.getSchema();
diff --git a/solr/core/src/java/org/apache/solr/update/processor/ConcatFieldUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/ConcatFieldUpdateProcessorFactory.java
index b24a88b..03ba82f 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/ConcatFieldUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/ConcatFieldUpdateProcessorFactory.java
@@ -82,6 +82,7 @@ public final class ConcatFieldUpdateProcessorFactory extends FieldMutatingUpdate
                                             SolrQueryResponse rsp,
                                             UpdateRequestProcessor next) {
     return new FieldMutatingUpdateProcessor(getSelector(), next) {
+      @Override
       protected SolrInputField mutate(final SolrInputField src) {
         if (src.getValueCount() <= 1) return src;
 
@@ -99,6 +100,7 @@ public final class ConcatFieldUpdateProcessorFactory extends FieldMutatingUpdate
 
     final IndexSchema schema = core.getSchema();
     return new FieldMutatingUpdateProcessor.FieldNameSelector() {
+      @Override
       public boolean shouldMutate(final String fieldName) {
 
         // first check type since it should be fastest
diff --git a/solr/core/src/java/org/apache/solr/update/processor/CountFieldValuesUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/CountFieldValuesUpdateProcessorFactory.java
index 5516609..f5b3ede 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/CountFieldValuesUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/CountFieldValuesUpdateProcessorFactory.java
@@ -83,6 +83,7 @@ public final class CountFieldValuesUpdateProcessorFactory extends FieldMutatingU
                                             SolrQueryResponse rsp,
                                             UpdateRequestProcessor next) {
     return new FieldMutatingUpdateProcessor(getSelector(), next) {
+      @Override
       protected SolrInputField mutate(final SolrInputField src) {
         SolrInputField result = new SolrInputField(src.getName());
         result.setValue(src.getValueCount(),
diff --git a/solr/core/src/java/org/apache/solr/update/processor/DefaultValueUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/DefaultValueUpdateProcessorFactory.java
index d19d78a..dd4ec25 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/DefaultValueUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/DefaultValueUpdateProcessorFactory.java
@@ -71,10 +71,12 @@ public class DefaultValueUpdateProcessorFactory
     super.init(args);
   }
 
+  @Override
   public UpdateRequestProcessor getInstance(SolrQueryRequest req, 
                                             SolrQueryResponse rsp, 
                                             UpdateRequestProcessor next ) {
     return new DefaultValueUpdateProcessor(fieldName, next) {
+      @Override
       public Object getDefaultValue() { return defaultValue; }
     };
   }
diff --git a/solr/core/src/java/org/apache/solr/update/processor/FieldLengthUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/FieldLengthUpdateProcessorFactory.java
index 25ebc3f..e9573a7 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/FieldLengthUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/FieldLengthUpdateProcessorFactory.java
@@ -68,6 +68,7 @@ public final class FieldLengthUpdateProcessorFactory extends FieldMutatingUpdate
                                             SolrQueryResponse rsp,
                                             UpdateRequestProcessor next) {
     return new FieldValueMutatingUpdateProcessor(getSelector(), next) {
+      @Override
       protected Object mutateValue(final Object src) {
         if (src instanceof CharSequence) {
           return new Integer(((CharSequence)src).length());
diff --git a/solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor.java b/solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor.java
index ac81762..b11da1d 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor.java
@@ -133,6 +133,7 @@ public abstract class FieldMutatingUpdateProcessor
   /** Singleton indicating all fields should be mutated */
   public static final FieldNameSelector SELECT_ALL_FIELDS 
     = new FieldNameSelector() {
+        @Override
         public boolean shouldMutate(final String fieldName) {
           return true;
         }
@@ -141,6 +142,7 @@ public abstract class FieldMutatingUpdateProcessor
   /** Singleton indicating no fields should be mutated */
   public static final FieldNameSelector SELECT_NO_FIELDS 
     = new FieldNameSelector() {
+        @Override
         public boolean shouldMutate(final String fieldName) {
           return false;
         }
@@ -170,6 +172,7 @@ public abstract class FieldMutatingUpdateProcessor
     
     if (SELECT_ALL_FIELDS == includes) {
       return new FieldNameSelector() {
+        @Override
         public boolean shouldMutate(final String fieldName) {
           return ! excludes.shouldMutate(fieldName);
         }
@@ -177,6 +180,7 @@ public abstract class FieldMutatingUpdateProcessor
     }
 
     return new FieldNameSelector() {
+      @Override
       public boolean shouldMutate(final String fieldName) {
         return (includes.shouldMutate(fieldName)
                 && ! excludes.shouldMutate(fieldName));
@@ -244,6 +248,7 @@ public abstract class FieldMutatingUpdateProcessor
       this.regexes = regexes;
     }
 
+    @Override
     public boolean shouldMutate(final String fieldName) {
       
       // order of checks is bsaed on what should be quicker 
diff --git a/solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory.java
index f68b3cd..a49cea4 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory.java
@@ -197,6 +197,7 @@ public abstract class FieldMutatingUpdateProcessorFactory
 
   }
 
+  @Override
   public void inform(final SolrCore core) {
     
     final IndexSchema schema = core.getSchema();
diff --git a/solr/core/src/java/org/apache/solr/update/processor/FieldValueMutatingUpdateProcessor.java b/solr/core/src/java/org/apache/solr/update/processor/FieldValueMutatingUpdateProcessor.java
index 81ceafa..6d5b583 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/FieldValueMutatingUpdateProcessor.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/FieldValueMutatingUpdateProcessor.java
@@ -36,6 +36,7 @@ public abstract class FieldValueMutatingUpdateProcessor
   
   
   public static final Object DELETE_VALUE_SINGLETON = new Object() {
+      @Override
       public String toString() { 
         return "!!Singleton Object Triggering Value Deletion!!";
       }
@@ -58,6 +59,7 @@ public abstract class FieldValueMutatingUpdateProcessor
    */
   protected abstract Object mutateValue(final Object src);
   
+  @Override
   protected final SolrInputField mutate(final SolrInputField src) {
     SolrInputField result = new SolrInputField(src.getName());
     for (final Object srcVal : src.getValues()) {
diff --git a/solr/core/src/java/org/apache/solr/update/processor/FieldValueSubsetUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/FieldValueSubsetUpdateProcessorFactory.java
index 8a9919c..4ab5d67 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/FieldValueSubsetUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/FieldValueSubsetUpdateProcessorFactory.java
@@ -37,6 +37,7 @@ public abstract class FieldValueSubsetUpdateProcessorFactory extends FieldMutati
                                                   SolrQueryResponse rsp,
                                                   UpdateRequestProcessor next) {
     return new FieldMutatingUpdateProcessor(getSelector(), next) {
+      @Override
       protected SolrInputField mutate(final SolrInputField src) {
         if (src.getValueCount() <= 1) return src;
 
diff --git a/solr/core/src/java/org/apache/solr/update/processor/HTMLStripFieldUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/HTMLStripFieldUpdateProcessorFactory.java
index 5e2afbc..c7313fe 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/HTMLStripFieldUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/HTMLStripFieldUpdateProcessorFactory.java
@@ -61,6 +61,7 @@ public final class HTMLStripFieldUpdateProcessorFactory extends FieldMutatingUpd
                                             SolrQueryResponse rsp,
                                             UpdateRequestProcessor next) {
     return new FieldValueMutatingUpdateProcessor(getSelector(), next) {
+      @Override
       protected Object mutateValue(final Object src) {
         if (src instanceof CharSequence) {
           CharSequence s = (CharSequence)src;
diff --git a/solr/core/src/java/org/apache/solr/update/processor/IgnoreFieldUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/IgnoreFieldUpdateProcessorFactory.java
index 52f6ef4..aaf1d81 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/IgnoreFieldUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/IgnoreFieldUpdateProcessorFactory.java
@@ -66,6 +66,7 @@ public final class IgnoreFieldUpdateProcessorFactory extends FieldMutatingUpdate
                                             SolrQueryResponse rsp,
                                             UpdateRequestProcessor next) {
     return new FieldMutatingUpdateProcessor(getSelector(), next) {
+      @Override
       protected SolrInputField mutate(final SolrInputField src) {
         return null;
       }
@@ -78,6 +79,7 @@ public final class IgnoreFieldUpdateProcessorFactory extends FieldMutatingUpdate
 
     final IndexSchema schema = core.getSchema();
     return new FieldMutatingUpdateProcessor.FieldNameSelector() {
+      @Override
       public boolean shouldMutate(final String fieldName) {
 
         FieldType type = schema.getFieldTypeNoEx(fieldName);
diff --git a/solr/core/src/java/org/apache/solr/update/processor/NoOpDistributingUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/NoOpDistributingUpdateProcessorFactory.java
index cc03d5f..c6e872f 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/NoOpDistributingUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/NoOpDistributingUpdateProcessorFactory.java
@@ -38,6 +38,7 @@ public class NoOpDistributingUpdateProcessorFactory
 
   /** Returns null 
    */
+  @Override
   public UpdateRequestProcessor getInstance(SolrQueryRequest req, 
                                             SolrQueryResponse rsp, 
                                             UpdateRequestProcessor next ) {
diff --git a/solr/core/src/java/org/apache/solr/update/processor/RegexReplaceProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/RegexReplaceProcessorFactory.java
index 98c23f5..8dcfbfc 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/RegexReplaceProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/RegexReplaceProcessorFactory.java
@@ -98,6 +98,7 @@ public final class RegexReplaceProcessorFactory extends FieldMutatingUpdateProce
   /** 
    * @see FieldMutatingUpdateProcessor#SELECT_NO_FIELDS
    */
+  @Override
   protected FieldMutatingUpdateProcessor.FieldNameSelector 
     getDefaultSelector(final SolrCore core) {
 
@@ -110,6 +111,7 @@ public final class RegexReplaceProcessorFactory extends FieldMutatingUpdateProce
                                             SolrQueryResponse response,
                                             UpdateRequestProcessor next) {
     return new FieldValueMutatingUpdateProcessor(getSelector(), next) {
+      @Override
       protected Object mutateValue(final Object src) {
         if (src instanceof CharSequence) {
           CharSequence txt = (CharSequence)src;
diff --git a/solr/core/src/java/org/apache/solr/update/processor/RemoveBlankFieldUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/RemoveBlankFieldUpdateProcessorFactory.java
index 079f09d..46849b9 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/RemoveBlankFieldUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/RemoveBlankFieldUpdateProcessorFactory.java
@@ -57,6 +57,7 @@ public final class RemoveBlankFieldUpdateProcessorFactory extends FieldMutatingU
                                             SolrQueryResponse rsp,
                                             UpdateRequestProcessor next) {
     return new FieldValueMutatingUpdateProcessor(getSelector(), next) {
+      @Override
       protected Object mutateValue(final Object src) {
         if (src instanceof CharSequence 
             && 0 == ((CharSequence)src).length()) {
diff --git a/solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.java
index 98032b7..57cebcd 100755
--- a/solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.java
@@ -73,6 +73,7 @@ public class SignatureUpdateProcessorFactory
     }
   }
 
+  @Override
   public void inform(SolrCore core) {
     final SchemaField field = core.getSchema().getFieldOrNull(getSignatureField());
     if (null == field) {
diff --git a/solr/core/src/java/org/apache/solr/update/processor/TextProfileSignature.java b/solr/core/src/java/org/apache/solr/update/processor/TextProfileSignature.java
index f459e22..7a24e8d 100755
--- a/solr/core/src/java/org/apache/solr/update/processor/TextProfileSignature.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/TextProfileSignature.java
@@ -153,6 +153,7 @@ public class TextProfileSignature extends MD5Signature {
   }
 
   private static class TokenComparator implements Comparator<Token> {
+    @Override
     public int compare(Token t1, Token t2) {
       return t2.cnt - t1.cnt;
     }
diff --git a/solr/core/src/java/org/apache/solr/update/processor/TimestampUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/TimestampUpdateProcessorFactory.java
index 7ba90fd..64d91d5 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/TimestampUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/TimestampUpdateProcessorFactory.java
@@ -56,10 +56,12 @@ import org.apache.solr.common.params.CommonParams; // javadoc
 public class TimestampUpdateProcessorFactory
   extends AbstractDefaultValueUpdateProcessorFactory {
 
+  @Override
   public UpdateRequestProcessor getInstance(SolrQueryRequest req, 
                                             SolrQueryResponse rsp, 
                                             UpdateRequestProcessor next ) {
     return new DefaultValueUpdateProcessor(fieldName, next) {
+      @Override
       public Object getDefaultValue() { 
         return SolrRequestInfo.getRequestInfo().getNOW();
       }
diff --git a/solr/core/src/java/org/apache/solr/update/processor/TrimFieldUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/TrimFieldUpdateProcessorFactory.java
index d3f5028..a3626f6 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/TrimFieldUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/TrimFieldUpdateProcessorFactory.java
@@ -56,6 +56,7 @@ public final class TrimFieldUpdateProcessorFactory extends FieldMutatingUpdatePr
                                             SolrQueryResponse rsp,
                                             UpdateRequestProcessor next) {
     return new FieldValueMutatingUpdateProcessor(getSelector(), next) {
+      @Override
       protected Object mutateValue(final Object src) {
         if (src instanceof CharSequence) {
           return ((CharSequence)src).toString().trim();
diff --git a/solr/core/src/java/org/apache/solr/update/processor/TruncateFieldUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/TruncateFieldUpdateProcessorFactory.java
index 226464c..25cca49 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/TruncateFieldUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/TruncateFieldUpdateProcessorFactory.java
@@ -88,6 +88,7 @@ public final class TruncateFieldUpdateProcessorFactory
                                             SolrQueryResponse rsp,
                                             UpdateRequestProcessor next) {
     return new FieldValueMutatingUpdateProcessor(getSelector(), next) {
+      @Override
       protected Object mutateValue(final Object src) {
         if (src instanceof CharSequence) {
           CharSequence s = (CharSequence)src;
diff --git a/solr/core/src/java/org/apache/solr/update/processor/UUIDUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/UUIDUpdateProcessorFactory.java
index e87c4c9..30f84b4 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/UUIDUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/UUIDUpdateProcessorFactory.java
@@ -54,10 +54,12 @@ import org.apache.solr.update.AddUpdateCommand;
 public class UUIDUpdateProcessorFactory
   extends AbstractDefaultValueUpdateProcessorFactory {
 
+  @Override
   public UpdateRequestProcessor getInstance(SolrQueryRequest req, 
                                             SolrQueryResponse rsp, 
                                             UpdateRequestProcessor next ) {
     return new DefaultValueUpdateProcessor(fieldName, next) {
+      @Override
       public Object getDefaultValue() { 
         return UUID.randomUUID().toString().toLowerCase(Locale.ROOT);
       }
diff --git a/solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain.java b/solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain.java
index 39b1c0c..2fd50d7 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain.java
@@ -81,6 +81,7 @@ public final class UpdateRequestProcessorChain implements PluginInfoInitialized
    * @see RunUpdateProcessorFactory
    * @see DistributedUpdateProcessorFactory
    */
+  @Override
   public void init(PluginInfo info) {
     final String infomsg = "updateRequestProcessorChain \"" + 
       (null != info.name ? info.name : "") + "\"" + 
diff --git a/solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorFactory.java
index da559ac..620cd7e 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorFactory.java
@@ -34,6 +34,7 @@ import org.apache.solr.util.plugin.SolrCoreAware;
  */
 public abstract class UpdateRequestProcessorFactory implements NamedListInitializedPlugin
 {    
+  @Override
   public void init( NamedList args )
   {
     // could process the Node
diff --git a/solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache.java b/solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache.java
index 567f9ef..6d6f84c 100644
--- a/solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache.java
+++ b/solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache.java
@@ -327,6 +327,7 @@ public class ConcurrentLFUCache<K, V> {
       this.lastAccessed = lastAccessed;
     }
 
+    @Override
     public int compareTo(CacheEntry<K, V> that) {
       if (this.hitsCopy == that.hitsCopy) {
         if (this.lastAccessedCopy == that.lastAccessedCopy) {
diff --git a/solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache.java b/solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache.java
index 0f44d89..a977419 100644
--- a/solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache.java
+++ b/solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache.java
@@ -493,6 +493,7 @@ public class ConcurrentLRUCache<K,V> {
       this.lastAccessed = lastAccessed;
     }
 
+    @Override
     public int compareTo(CacheEntry<K,V> that) {
       if (this.lastAccessedCopy == that.lastAccessedCopy) return 0;
       return this.lastAccessedCopy < that.lastAccessedCopy ? 1 : -1;
diff --git a/solr/core/src/java/org/apache/solr/util/DefaultSolrThreadFactory.java b/solr/core/src/java/org/apache/solr/util/DefaultSolrThreadFactory.java
index 2e21108..8586830 100644
--- a/solr/core/src/java/org/apache/solr/util/DefaultSolrThreadFactory.java
+++ b/solr/core/src/java/org/apache/solr/util/DefaultSolrThreadFactory.java
@@ -35,6 +35,7 @@ public class DefaultSolrThreadFactory implements ThreadFactory {
                      "-thread-";
     }
 
+    @Override
     public Thread newThread(Runnable r) {
         Thread t = new Thread(group, r,
                               prefix + threadNumber.getAndIncrement(),
diff --git a/solr/core/src/java/org/apache/solr/util/RegexFileFilter.java b/solr/core/src/java/org/apache/solr/util/RegexFileFilter.java
index 346bf2d..927ea48 100644
--- a/solr/core/src/java/org/apache/solr/util/RegexFileFilter.java
+++ b/solr/core/src/java/org/apache/solr/util/RegexFileFilter.java
@@ -34,6 +34,7 @@ public final class RegexFileFilter implements FileFilter {
   public RegexFileFilter(Pattern regex) {
     pattern = regex;
   }
+  @Override
   public boolean accept(File f) {
     return pattern.matcher(f.getName()).matches();
   }
diff --git a/solr/core/src/java/org/apache/solr/util/SimplePostTool.java b/solr/core/src/java/org/apache/solr/util/SimplePostTool.java
index 82010d7..c497406 100644
--- a/solr/core/src/java/org/apache/solr/util/SimplePostTool.java
+++ b/solr/core/src/java/org/apache/solr/util/SimplePostTool.java
@@ -984,6 +984,7 @@ public class SimplePostTool {
       }
     }
     
+    @Override
     public boolean accept(File file)
     {
       return p.matcher(file.getName()).find();
diff --git a/solr/core/src/java/org/apache/solr/util/SolrPluginUtils.java b/solr/core/src/java/org/apache/solr/util/SolrPluginUtils.java
index ad02cf9..1fff344 100644
--- a/solr/core/src/java/org/apache/solr/util/SolrPluginUtils.java
+++ b/solr/core/src/java/org/apache/solr/util/SolrPluginUtils.java
@@ -810,6 +810,7 @@ public class SolrPluginUtils {
    * </p>
    */
   public static class IdentityRegenerator implements CacheRegenerator {
+    @Override
     public boolean regenerateItem(SolrIndexSearcher newSearcher,
                                   SolrCache newCache,
                                   SolrCache oldCache,
diff --git a/solr/core/src/java/org/apache/solr/util/SystemIdResolver.java b/solr/core/src/java/org/apache/solr/util/SystemIdResolver.java
index cf263aa..2263f9f 100644
--- a/solr/core/src/java/org/apache/solr/util/SystemIdResolver.java
+++ b/solr/core/src/java/org/apache/solr/util/SystemIdResolver.java
@@ -72,6 +72,7 @@ public final class SystemIdResolver implements EntityResolver, EntityResolver2 {
   
   public URIResolver asURIResolver() {
     return new URIResolver() {
+      @Override
       public Source resolve(String href, String base) throws TransformerException {
         try {
           final InputSource src = SystemIdResolver.this.resolveEntity(null, null, base, href);
@@ -85,6 +86,7 @@ public final class SystemIdResolver implements EntityResolver, EntityResolver2 {
   
   public XMLResolver asXMLResolver() {
     return new XMLResolver() {
+      @Override
       public Object resolveEntity(String publicId, String systemId, String baseURI, String namespace) throws XMLStreamException {
         try {
           final InputSource src = SystemIdResolver.this.resolveEntity(null, publicId, baseURI, systemId);
@@ -117,10 +119,12 @@ public final class SystemIdResolver implements EntityResolver, EntityResolver2 {
   
   // *** EntityResolver(2) methods:
   
+  @Override
   public InputSource getExternalSubset(String name, String baseURI) {
     return null;
   }
   
+  @Override
   public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {
     if (systemId == null)
       return null;
@@ -152,6 +156,7 @@ public final class SystemIdResolver implements EntityResolver, EntityResolver2 {
     }
   }
 
+  @Override
   public InputSource resolveEntity(String publicId, String systemId) throws IOException {
     return resolveEntity(null, publicId, null, systemId);
   }
diff --git a/solr/core/src/java/org/apache/solr/util/VersionedFile.java b/solr/core/src/java/org/apache/solr/util/VersionedFile.java
index 1c703ce..19ab3fb 100644
--- a/solr/core/src/java/org/apache/solr/util/VersionedFile.java
+++ b/solr/core/src/java/org/apache/solr/util/VersionedFile.java
@@ -56,6 +56,7 @@ public class VersionedFile
         if (!f.exists()) {
           File dir = new File(dirName);
           String[] names = dir.list(new FilenameFilter() {
+            @Override
             public boolean accept(File dir, String name) {
               return name.startsWith(prefix);
             }
diff --git a/solr/core/src/test/org/apache/solr/OutputWriterTest.java b/solr/core/src/test/org/apache/solr/OutputWriterTest.java
index 864aaef..cd40475 100644
--- a/solr/core/src/test/org/apache/solr/OutputWriterTest.java
+++ b/solr/core/src/test/org/apache/solr/OutputWriterTest.java
@@ -109,13 +109,16 @@ public class OutputWriterTest extends SolrTestCaseJ4 {
         
         public UselessOutputWriter() {}
 
+        @Override
         public void init(NamedList n) {}
         
+        @Override
         public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response)
         throws IOException {
             writer.write(USELESS_OUTPUT);
         }
 
+      @Override
       public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
         return CONTENT_TYPE_TEXT_UTF8;
       }
diff --git a/solr/core/src/test/org/apache/solr/TestDistributedGrouping.java b/solr/core/src/test/org/apache/solr/TestDistributedGrouping.java
index cd6f1f1..7d21da8 100755
--- a/solr/core/src/test/org/apache/solr/TestDistributedGrouping.java
+++ b/solr/core/src/test/org/apache/solr/TestDistributedGrouping.java
@@ -43,6 +43,7 @@ public class TestDistributedGrouping extends BaseDistributedSearchTestCase {
   String tdate_b = "b_n_tdt";
   String oddField="oddField_s";
 
+  @Override
   public void doTest() throws Exception {
     del("*:*");
     commit();
diff --git a/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java b/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
index 20df626..e838b39 100644
--- a/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
@@ -1397,6 +1397,7 @@ public class BasicDistributedZkTest extends AbstractFullDistribZkTestBase {
       List<SolrServer> collectionClients, final String baseUrl, final int num,
       final String shardId) {
     Callable call = new Callable() {
+      @Override
       public Object call() {
         HttpSolrServer server;
         try {
@@ -1524,6 +1525,7 @@ public class BasicDistributedZkTest extends AbstractFullDistribZkTestBase {
                   - DEFAULT_COLLECTION.length() -1);
       final int frozeUnique = unique;
       Callable call = new Callable() {
+        @Override
         public Object call() {
           HttpSolrServer server;
           try {
diff --git a/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java b/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java
index cf60f3e..1b52959 100644
--- a/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java
@@ -207,6 +207,7 @@ public class ChaosMonkeyNothingIsSafeTest extends AbstractFullDistribZkTestBase
       suss = new ConcurrentUpdateSolrServer(
           ((HttpSolrServer) clients.get(0)).getBaseURL(), httpClient, 8,
           2) {
+        @Override
         public void handleError(Throwable ex) {
           log.warn("suss error", ex);
         }
@@ -275,6 +276,7 @@ public class ChaosMonkeyNothingIsSafeTest extends AbstractFullDistribZkTestBase
         suss = new ConcurrentUpdateSolrServer(
             ((HttpSolrServer) clients.get(clientIndex)).getBaseURL(),
             httpClient, 30, 3) {
+          @Override
           public void handleError(Throwable ex) {
             log.warn("suss error", ex);
           }
@@ -282,12 +284,14 @@ public class ChaosMonkeyNothingIsSafeTest extends AbstractFullDistribZkTestBase
       }
     }
     
+    @Override
     public void safeStop() {
       stop = true;
       suss.shutdownNow();
       httpClient.getConnectionManager().shutdown();
     }
 
+    @Override
     public int getFails() {
       return fails.get();
     }
@@ -296,6 +300,7 @@ public class ChaosMonkeyNothingIsSafeTest extends AbstractFullDistribZkTestBase
   
   
   // skip the randoms - they can deadlock...
+  @Override
   protected void indexr(Object... fields) throws Exception {
     SolrInputDocument doc = getDoc(fields);
     indexDoc(doc);
diff --git a/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest.java b/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest.java
index 956fdc2..42171fa 100644
--- a/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest.java
@@ -135,6 +135,7 @@ public class ChaosMonkeySafeLeaderTest extends AbstractFullDistribZkTestBase {
   }
   
   // skip the randoms - they can deadlock...
+  @Override
   protected void indexr(Object... fields) throws Exception {
     SolrInputDocument doc = new SolrInputDocument();
     addFields(doc, fields);
diff --git a/solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest.java b/solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest.java
index 79dd1a3..25d6eed 100644
--- a/solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest.java
@@ -99,6 +99,7 @@ public class RecoveryZkTest extends AbstractFullDistribZkTestBase {
     //query("q", "*:*", "sort", "id desc");
   }
   
+  @Override
   protected void indexDoc(SolrInputDocument doc) throws IOException,
       SolrServerException {
     controlClient.add(doc);
@@ -124,6 +125,7 @@ public class RecoveryZkTest extends AbstractFullDistribZkTestBase {
   }
   
   // skip the randoms - they can deadlock...
+  @Override
   protected void indexr(Object... fields) throws Exception {
     SolrInputDocument doc = new SolrInputDocument();
     addFields(doc, fields);
diff --git a/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java b/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java
index 5d2a0dd..fa6be40 100644
--- a/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java
@@ -283,6 +283,7 @@ public class SyncSliceTest extends AbstractFullDistribZkTestBase {
   }
   
   // skip the randoms - they can deadlock...
+  @Override
   protected void indexr(Object... fields) throws Exception {
     SolrInputDocument doc = new SolrInputDocument();
     addFields(doc, fields);
diff --git a/solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest.java b/solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest.java
index 9e0e8c7..e0ef66b 100644
--- a/solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest.java
@@ -209,6 +209,7 @@ public class ZkSolrClientTest extends AbstractSolrTestCase {
 
       zkClient.getChildren("/collections", new Watcher() {
 
+        @Override
         public void process(WatchedEvent event) {
           if (DEBUG) {
             System.out.println("children changed");
diff --git a/solr/core/src/test/org/apache/solr/core/FakeDeletionPolicy.java b/solr/core/src/test/org/apache/solr/core/FakeDeletionPolicy.java
index 0fa1bab..b452f1a 100644
--- a/solr/core/src/test/org/apache/solr/core/FakeDeletionPolicy.java
+++ b/solr/core/src/test/org/apache/solr/core/FakeDeletionPolicy.java
@@ -32,6 +32,7 @@ public class FakeDeletionPolicy implements IndexDeletionPolicy, NamedListInitial
   private String var2;
 
   //@Override
+  @Override
   public void init(NamedList args) {
     var1 = (String) args.get("var1");
     var2 = (String) args.get("var2");
@@ -46,11 +47,13 @@ public class FakeDeletionPolicy implements IndexDeletionPolicy, NamedListInitial
   }
 
   //  @Override
+  @Override
   public void onCommit(List arg0) throws IOException {
     System.setProperty("onCommit", "test.org.apache.solr.core.FakeDeletionPolicy.onCommit");
   }
 
   //  @Override
+  @Override
   public void onInit(List arg0) throws IOException {
     System.setProperty("onInit", "test.org.apache.solr.core.FakeDeletionPolicy.onInit");
   }
diff --git a/solr/core/src/test/org/apache/solr/core/MockEventListener.java b/solr/core/src/test/org/apache/solr/core/MockEventListener.java
index d480721..d2babd5 100644
--- a/solr/core/src/test/org/apache/solr/core/MockEventListener.java
+++ b/solr/core/src/test/org/apache/solr/core/MockEventListener.java
@@ -33,10 +33,12 @@ public class MockEventListener implements SolrEventListener {
     createCounter.incrementAndGet();
   }
 
+  @Override
   public void init(NamedList args) {
     /* NOOP */
   }
 
+  @Override
   public void postCommit() {
     /* NOOP */
   }
@@ -46,6 +48,7 @@ public class MockEventListener implements SolrEventListener {
     /* NOOP */
   }
 
+  @Override
   public void newSearcher(SolrIndexSearcher newSearcher, 
                           SolrIndexSearcher currentSearcher) {
     /* NOOP */
diff --git a/solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest.java b/solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest.java
index 12e469d..e69ce23 100644
--- a/solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest.java
+++ b/solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest.java
@@ -32,6 +32,7 @@ import java.io.File;
 
 public class SolrCoreCheckLockOnStartupTest extends SolrTestCaseJ4 {
 
+  @Override
   @Before
   public void setUp() throws Exception {
     super.setUp();
diff --git a/solr/core/src/test/org/apache/solr/core/SolrCoreTest.java b/solr/core/src/test/org/apache/solr/core/SolrCoreTest.java
index 8930fd0..1088617 100755
--- a/solr/core/src/test/org/apache/solr/core/SolrCoreTest.java
+++ b/solr/core/src/test/org/apache/solr/core/SolrCoreTest.java
@@ -176,6 +176,7 @@ public class SolrCoreTest extends SolrTestCaseJ4 {
           }
         }
         
+        @Override
         public Integer call() {
           SolrCore core = null;
           int r = 0;
@@ -243,6 +244,7 @@ public class SolrCoreTest extends SolrTestCaseJ4 {
 class ClosingRequestHandler extends EmptyRequestHandler implements SolrCoreAware {
   boolean closed = false;
 
+  @Override
   public void inform(SolrCore core) {
     core.addCloseHook( new CloseHook() {
       @Override
diff --git a/solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap.java b/solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap.java
index a1a9870..f60402f 100644
--- a/solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap.java
+++ b/solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap.java
@@ -176,31 +176,38 @@ public class TestJmxMonitoredMap extends LuceneTestCase {
   }
 
   private class MockInfoMBean implements SolrInfoMBean {
+    @Override
     public String getName() {
       return "mock";
     }
 
+    @Override
     public Category getCategory() {
       return Category.OTHER;
     }
 
+    @Override
     public String getDescription() {
       return "mock";
     }
 
+    @Override
     public URL[] getDocs() {
       // TODO Auto-generated method stub
       return null;
     }
 
+    @Override
     public String getVersion() {
       return "mock";
     }
 
+    @Override
     public String getSource() {
       return "mock";
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public NamedList getStatistics() {
       NamedList myList = new NamedList<Integer>();
diff --git a/solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest.java b/solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest.java
index 5164de0..4339cce 100644
--- a/solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest.java
+++ b/solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest.java
@@ -122,6 +122,7 @@ public class DocumentAnalysisRequestHandlerTest extends AnalysisRequestHandlerTe
       sourceInfo = "rawBytes";
     }
 
+    @Override
     public InputStream getStream() throws IOException {
       return new ByteArrayInputStream(bytes);
     }
diff --git a/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java b/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
index 630730c..2f33587 100644
--- a/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
+++ b/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
@@ -111,6 +111,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     }
   }
 
+  @Override
   @After
   public void tearDown() throws Exception {
     super.tearDown();
@@ -935,6 +936,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
   
       File[] files = dataDir.listFiles(new FilenameFilter() {
         
+          @Override
           public boolean accept(File dir, String name) {
             if(name.startsWith("snapshot")) {
               return true;
diff --git a/solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest.java b/solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest.java
index 3b396c0..1d11cfa 100644
--- a/solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest.java
+++ b/solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest.java
@@ -87,6 +87,7 @@ public class DistributedQueryElevationComponentTest extends BaseDistributedSearc
     query("q", "ZZZZ", "qt", "/elevate", "shards.qt", "/elevate", "rows", "500", CommonParams.FL, "*, [elevated]", "forceElevation", "true", "sort", "id desc");
   }
   
+  @Override
   protected void indexr(Object... fields) throws Exception {
     SolrInputDocument doc = new SolrInputDocument();
     addFields(doc, fields);
diff --git a/solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentDistributedTest.java b/solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentDistributedTest.java
index 64e16fa..5f655e0 100644
--- a/solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentDistributedTest.java
+++ b/solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentDistributedTest.java
@@ -22,6 +22,7 @@ import org.apache.solr.common.params.TermVectorParams;
 
 public class TermVectorComponentDistributedTest extends BaseDistributedSearchTestCase {
 
+  @Override
   public void doTest() throws Exception {
 
     handle.clear();
diff --git a/solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest.java b/solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest.java
index 8e20168..19c3b18 100644
--- a/solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest.java
+++ b/solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest.java
@@ -35,6 +35,7 @@ public class OpenExchangeRatesOrgProviderTest extends SolrTestCaseJ4 {
   private final Map<String,String> emptyParams = new HashMap<String,String>();
   private Map<String,String> mockParams;
 
+  @Override
   @Before
   public void setUp() throws Exception {
     super.setUp();
diff --git a/solr/core/src/test/org/apache/solr/schema/PreAnalyzedFieldTest.java b/solr/core/src/test/org/apache/solr/schema/PreAnalyzedFieldTest.java
index 31b33ba..8500234 100644
--- a/solr/core/src/test/org/apache/solr/schema/PreAnalyzedFieldTest.java
+++ b/solr/core/src/test/org/apache/solr/schema/PreAnalyzedFieldTest.java
@@ -70,6 +70,7 @@ public class PreAnalyzedFieldTest extends LuceneTestCase {
   int props = 
     FieldProperties.INDEXED | FieldProperties.STORED;
   
+  @Override
   public void setUp() throws Exception {
     super.setUp();
     field = new SchemaField("content", new TextField(), props, null);
diff --git a/solr/core/src/test/org/apache/solr/search/FooQParserPlugin.java b/solr/core/src/test/org/apache/solr/search/FooQParserPlugin.java
index b616824..9d406ad 100755
--- a/solr/core/src/test/org/apache/solr/search/FooQParserPlugin.java
+++ b/solr/core/src/test/org/apache/solr/search/FooQParserPlugin.java
@@ -31,6 +31,7 @@ public class FooQParserPlugin extends QParserPlugin {
     return new FooQParser(qstr, localParams, params, req);
   }
 
+  @Override
   public void init(NamedList args) {
   }
 }
diff --git a/solr/core/src/test/org/apache/solr/search/TestFastLRUCache.java b/solr/core/src/test/org/apache/solr/search/TestFastLRUCache.java
index 749e839..1d6f3bd 100644
--- a/solr/core/src/test/org/apache/solr/search/TestFastLRUCache.java
+++ b/solr/core/src/test/org/apache/solr/search/TestFastLRUCache.java
@@ -176,6 +176,7 @@ public class TestFastLRUCache extends LuceneTestCase {
 
   private CacheRegenerator createCodeRegenerator() {
     CacheRegenerator cr = new CacheRegenerator() {
+        @Override
         public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache,
                                       SolrCache oldCache, Object oldKey, Object oldVal) {
           newCache.put(oldKey, oldVal);
diff --git a/solr/core/src/test/org/apache/solr/search/TestLFUCache.java b/solr/core/src/test/org/apache/solr/search/TestLFUCache.java
index 3507389..25b4259 100644
--- a/solr/core/src/test/org/apache/solr/search/TestLFUCache.java
+++ b/solr/core/src/test/org/apache/solr/search/TestLFUCache.java
@@ -39,6 +39,7 @@ import java.util.Map;
 public class TestLFUCache extends SolrTestCaseJ4 {
 
   private class LFURegenerator implements CacheRegenerator {
+    @Override
     public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache,
                                   SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {
       newCache.put(oldKey, oldVal);
diff --git a/solr/core/src/test/org/apache/solr/search/TestLRUCache.java b/solr/core/src/test/org/apache/solr/search/TestLRUCache.java
index 2bc886b..8d4a9ca 100644
--- a/solr/core/src/test/org/apache/solr/search/TestLRUCache.java
+++ b/solr/core/src/test/org/apache/solr/search/TestLRUCache.java
@@ -124,6 +124,7 @@ public class TestLRUCache extends LuceneTestCase {
   
   private CacheRegenerator createCodeRegenerator() {
     CacheRegenerator cr = new CacheRegenerator() {
+      @Override
       @SuppressWarnings("unchecked")
       public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache,
                                     SolrCache oldCache, Object oldKey, Object oldVal) {
diff --git a/solr/core/src/test/org/apache/solr/search/TestRTGBase.java b/solr/core/src/test/org/apache/solr/search/TestRTGBase.java
index f91984c..114b97f 100644
--- a/solr/core/src/test/org/apache/solr/search/TestRTGBase.java
+++ b/solr/core/src/test/org/apache/solr/search/TestRTGBase.java
@@ -89,6 +89,7 @@ public class TestRTGBase extends SolrTestCaseJ4 {
       this.val = val;
     }
 
+    @Override
     public String toString() {
       return "{version="+version+",val="+val+"}";
     }
diff --git a/solr/core/src/test/org/apache/solr/search/TestRangeQuery.java b/solr/core/src/test/org/apache/solr/search/TestRangeQuery.java
index bcafde6..22e36ff 100644
--- a/solr/core/src/test/org/apache/solr/search/TestRangeQuery.java
+++ b/solr/core/src/test/org/apache/solr/search/TestRangeQuery.java
@@ -211,6 +211,7 @@ public class TestRangeQuery extends SolrTestCaseJ4 {
 
 
     createIndex(15, new DocProcessor() {
+      @Override
       public void process(SolrInputDocument doc) {
         addInt(doc, l,u, fields);
       }
diff --git a/solr/core/src/test/org/apache/solr/search/TestSolr4Spatial.java b/solr/core/src/test/org/apache/solr/search/TestSolr4Spatial.java
index 735611d..8f03a6a 100644
--- a/solr/core/src/test/org/apache/solr/search/TestSolr4Spatial.java
+++ b/solr/core/src/test/org/apache/solr/search/TestSolr4Spatial.java
@@ -52,6 +52,7 @@ public class TestSolr4Spatial extends SolrTestCaseJ4 {
     initCore("solrconfig-basic.xml", "schema-spatial.xml");
   }
 
+  @Override
   @Before
   public void setUp() throws Exception {
     super.setUp();
diff --git a/solr/core/src/test/org/apache/solr/search/TestSolrJ.java b/solr/core/src/test/org/apache/solr/search/TestSolrJ.java
index ae280cf..1940c8f 100644
--- a/solr/core/src/test/org/apache/solr/search/TestSolrJ.java
+++ b/solr/core/src/test/org/apache/solr/search/TestSolrJ.java
@@ -74,6 +74,7 @@ public class TestSolrJ extends SolrTestCaseJ4 {
       final int base = threadNum * docsPerThread;
 
       threads[threadNum] = new Thread("add-thread"+i) {
+        @Override
         public void run(){
           try {
             indexDocs(base, docsPerThread, maxSleep);
diff --git a/solr/core/src/test/org/apache/solr/search/TestSort.java b/solr/core/src/test/org/apache/solr/search/TestSort.java
index 8ff6c74..1f391c5 100755
--- a/solr/core/src/test/org/apache/solr/search/TestSort.java
+++ b/solr/core/src/test/org/apache/solr/search/TestSort.java
@@ -270,6 +270,7 @@ public class TestSort extends SolrTestCaseJ4 {
         searcher.search(new MatchAllDocsQuery(), filt, myCollector);
 
         Collections.sort(collectedDocs, new Comparator<MyDoc>() {
+          @Override
           public int compare(MyDoc o1, MyDoc o2) {
             String v1 = o1.val==null ? nullRep : o1.val;
             String v2 = o2.val==null ? nullRep : o2.val;
diff --git a/solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest.java b/solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest.java
index ec0ba2d..7faa14a 100644
--- a/solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest.java
+++ b/solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest.java
@@ -87,6 +87,7 @@ public class DirectUpdateHandlerOptimizeTest extends AbstractSolrTestCase {
   private void assertNumSegments(String indexDir, int numSegs) {
     File file = new File(indexDir);
     File[] segs = file.listFiles(new FileFilter() {
+      @Override
       public boolean accept(File file) {
         return file.getName().endsWith("cfs");
       }
diff --git a/solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java b/solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java
index 0ae611f..41fd6d5 100644
--- a/solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java
+++ b/solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java
@@ -70,6 +70,7 @@ public class SolrCmdDistributorTest extends BaseDistributedSearchTestCase {
   
   // TODO: for now we redefine this method so that it pulls from the above
   // we don't get helpful override behavior due to the method being static
+  @Override
   protected void createServers(int numShards) throws Exception {
     controlJetty = createJetty(new File(getSolrHome()), testDir + "/control/data", null, getSolrConfigFile(), getSchemaFile());
 
diff --git a/solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest.java b/solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest.java
index 1f2a7c3..a9b510b 100755
--- a/solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest.java
+++ b/solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest.java
@@ -347,6 +347,7 @@ public class SignatureUpdateProcessorFactoryTest extends SolrTestCaseJ4 {
     public UnusualList(int size) {
       super(size);
     }
+    @Override
     public String toString() {
       return "UNUSUAL:" + super.toString();
     }
diff --git a/solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest.java b/solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest.java
index 5fa0c4f..8c125b6 100644
--- a/solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest.java
+++ b/solr/core/src/test/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactoryTest.java
@@ -79,6 +79,7 @@ public class StatelessScriptUpdateProcessorFactoryTest extends UpdateProcessorTe
     final StatelessScriptUpdateProcessorFactory factory = ((StatelessScriptUpdateProcessorFactory) chained.getFactories()[0]);
     final List<String> functionMessages = new ArrayList<String>();
     factory.setScriptEngineCustomizer(new ScriptEngineCustomizer() {
+      @Override
       public void customize(ScriptEngine engine) {
         engine.put("testCase", StatelessScriptUpdateProcessorFactoryTest.this);
         engine.put("functionMessages", functionMessages);
@@ -124,6 +125,7 @@ public class StatelessScriptUpdateProcessorFactoryTest extends UpdateProcessorTe
         ((StatelessScriptUpdateProcessorFactory) chained.getFactories()[0]);
       final List<String> functionMessages = new ArrayList<String>();
       ScriptEngineCustomizer customizer = new ScriptEngineCustomizer() {
+          @Override
           public void customize(ScriptEngine engine) {
             engine.put("testCase", StatelessScriptUpdateProcessorFactoryTest.this);
             engine.put("functionMessages", functionMessages);
diff --git a/solr/core/src/test/org/apache/solr/util/SimplePostToolTest.java b/solr/core/src/test/org/apache/solr/util/SimplePostToolTest.java
index b82c8eb..863c169 100644
--- a/solr/core/src/test/org/apache/solr/util/SimplePostToolTest.java
+++ b/solr/core/src/test/org/apache/solr/util/SimplePostToolTest.java
@@ -38,6 +38,7 @@ public class SimplePostToolTest extends SolrTestCaseJ4 {
   SimplePostTool t_file, t_file_auto, t_file_rec, t_web, t_test;
   PageFetcher pf;
   
+  @Override
   @Before
   public void setUp() throws Exception {
     super.setUp();
diff --git a/solr/solrj/src/java/org/apache/noggit/CharArr.java b/solr/solrj/src/java/org/apache/noggit/CharArr.java
index e86f58b..c1daa52 100755
--- a/solr/solrj/src/java/org/apache/noggit/CharArr.java
+++ b/solr/solrj/src/java/org/apache/noggit/CharArr.java
@@ -65,14 +65,17 @@ public class CharArr implements CharSequence, Appendable {
   public int getStart() { return start; }
   public int getEnd() { return end; }
   public int size() { return end-start; }
+  @Override
   public int length() { return size(); }
   public int capacity() { return buf.length; }
 
 
+  @Override
   public char charAt(int index) {
     return buf[start+index];
   }
 
+  @Override
   public CharArr subSequence(int start, int end) {
     return new CharArr(buf, this.start+start, this.start+end);
   }
@@ -157,6 +160,7 @@ public class CharArr implements CharSequence, Appendable {
   }
 
 
+  @Override
   public String toString() {
     return new String(buf, start, size());
   }
@@ -189,15 +193,18 @@ public class CharArr implements CharSequence, Appendable {
   }
 
   //////////////// Appendable methods /////////////
+  @Override
   public final Appendable append(CharSequence csq) throws IOException {
     return append(csq, 0, csq.length());
   }
 
+  @Override
   public Appendable append(CharSequence csq, int start, int end) throws IOException {
     write(csq.subSequence(start, end).toString());
     return null;
   }
 
+  @Override
   public final Appendable append(char c) {
     write(c);
     return this;
@@ -209,28 +216,38 @@ class NullCharArr extends CharArr {
   public NullCharArr() {
     super(new char[1],0,0);
   }
+  @Override
   public void unsafeWrite(char b) {}
 
+  @Override
   public void unsafeWrite(char b[], int off, int len) {}
 
+  @Override
   public void unsafeWrite(int b) {}
 
+  @Override
   public void write(char b) {}
 
+  @Override
   public void write(char b[], int off, int len) {}
 
+  @Override
   public void reserve(int num) {}
 
+  @Override
   protected void resize(int len) {}
 
+  @Override
   public Appendable append(CharSequence csq, int start, int end) throws IOException {
     return this;
   }
 
+  @Override
   public char charAt(int index) {
     return 0;
   }
 
+  @Override
   public void write(String s, int stringOffset, int len) {
   }
 }
@@ -246,11 +263,13 @@ class CharArrReader extends CharArr {
     this.in = in;
   }
 
+  @Override
   public int read() throws IOException {
     if (start>=end) fill();
     return start>=end ? -1 : buf[start++];
   }
 
+  @Override
   public int read(CharBuffer cb) throws IOException {
     // empty the buffer and then read direct
     int sz = size();
@@ -260,6 +279,7 @@ class CharArrReader extends CharArr {
     return sz>0 ? sz : -1;
   }
 
+  @Override
   public int fill() throws IOException {
     if (start>=end) {
       reset();
diff --git a/solr/solrj/src/java/org/apache/noggit/JSONParser.java b/solr/solrj/src/java/org/apache/noggit/JSONParser.java
index 92cde39..373da67 100755
--- a/solr/solrj/src/java/org/apache/noggit/JSONParser.java
+++ b/solr/solrj/src/java/org/apache/noggit/JSONParser.java
@@ -624,6 +624,7 @@ public class JSONParser {
     }
   }
 
+  @Override
   public String toString() {
     return "start="+start+",end="+end+",state="+state+"valstate="+valstate;
   }
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter.java b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter.java
index 36570e8..73e409c 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter.java
@@ -67,27 +67,33 @@ public class BinaryRequestWriter extends RequestWriter {
     new JavaBinUpdateRequestCodec().marshal(request, baos);
     
     return new ContentStream() {
+      @Override
       public String getName() {
         return null;
       }
 
+      @Override
       public String getSourceInfo() {
         return "javabin";
       }
 
+      @Override
       public String getContentType() {
         return "application/javabin";
       }
 
+      @Override
       public Long getSize() // size if we know it, otherwise null
       {
         return new Long(baos.size());
       }
 
+      @Override
       public InputStream getStream() {
         return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());
       }
 
+      @Override
       public Reader getReader() {
         throw new RuntimeException("No reader available . this is a binarystream");
       }
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServer.java b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServer.java
index db295ab..27f177e 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServer.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServer.java
@@ -114,6 +114,7 @@ public class ConcurrentUpdateSolrServer extends SolrServer {
   class Runner implements Runnable {
     final Lock runnerLock = new ReentrantLock();
 
+    @Override
     public void run() {
       runnerLock.lock();
 
@@ -136,6 +137,7 @@ public class ConcurrentUpdateSolrServer extends SolrServer {
 
             EntityTemplate template = new EntityTemplate(new ContentProducer() {
 
+              @Override
               public void writeTo(OutputStream out) throws IOException {
                 try {
                   if (isXml) {
@@ -243,6 +245,7 @@ public class ConcurrentUpdateSolrServer extends SolrServer {
     }
   }
 
+  @Override
   public NamedList<Object> request(final SolrRequest request)
       throws SolrServerException, IOException {
     if (!(request instanceof UpdateRequest)) {
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java
index 5b863b5..cc78279 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java
@@ -238,6 +238,7 @@ public class HttpClientUtil {
   private static class UseCompressionResponseInterceptor implements
       HttpResponseInterceptor {
     
+    @Override
     public void process(final HttpResponse response, final HttpContext context)
         throws HttpException, IOException {
       
@@ -266,10 +267,12 @@ public class HttpClientUtil {
       super(entity);
     }
     
+    @Override
     public InputStream getContent() throws IOException, IllegalStateException {
       return new GZIPInputStream(wrappedEntity.getContent());
     }
     
+    @Override
     public long getContentLength() {
       return -1;
     }
@@ -281,6 +284,7 @@ public class HttpClientUtil {
       super(entity);
     }
     
+    @Override
     public InputStream getContent() throws IOException, IllegalStateException {
       return new InflaterInputStream(wrappedEntity.getContent());
     }
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java
index 98b9de1..8ed8287 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java
@@ -563,16 +563,19 @@ public class HttpSolrServer extends SolrServer {
     UpdateRequest req = new UpdateRequest();
     req.setDocIterator(new Iterator<SolrInputDocument>() {
       
+      @Override
       public boolean hasNext() {
         return beanIterator.hasNext();
       }
       
+      @Override
       public SolrInputDocument next() {
         Object o = beanIterator.next();
         if (o == null) return null;
         return getBinder().toSolrInputDocument(o);
       }
       
+      @Override
       public void remove() {
         beanIterator.remove();
       }
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java
index 6b6b8cb..a5b244a 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java
@@ -566,6 +566,7 @@ public class LBHttpSolrServer extends SolrServer {
 
   private static Runnable getAliveCheckRunner(final WeakReference<LBHttpSolrServer> lbRef) {
     return new Runnable() {
+      @Override
       public void run() {
         LBHttpSolrServer lb = lbRef.get();
         if (lb != null && lb.zombieServers != null) {
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/request/RequestWriter.java b/solr/solrj/src/java/org/apache/solr/client/solrj/request/RequestWriter.java
index 1568f4a..ea9ca23 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/request/RequestWriter.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/request/RequestWriter.java
@@ -98,26 +98,32 @@ public class RequestWriter {
       return contentStream;
     }
 
+    @Override
     public String getName() {
       return getDelegate().getName();
     }
 
+    @Override
     public String getSourceInfo() {
       return getDelegate().getSourceInfo();
     }
 
+    @Override
     public String getContentType() {
       return getUpdateContentType();
     }
 
+    @Override
     public Long getSize() {
       return getDelegate().getSize();
     }
 
+    @Override
     public InputStream getStream() throws IOException {
       return getDelegate().getStream();
     }
 
+    @Override
     public Reader getReader() throws IOException {
       return getDelegate().getReader();
     }
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/response/DocumentAnalysisResponse.java b/solr/solrj/src/java/org/apache/solr/client/solrj/response/DocumentAnalysisResponse.java
index 1082d2c..3ec590a 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/response/DocumentAnalysisResponse.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/response/DocumentAnalysisResponse.java
@@ -103,6 +103,7 @@ public class DocumentAnalysisResponse extends AnalysisResponseBase implements It
    *
    * @return An iterator over the document analyses map.
    */
+  @Override
   public Iterator<Map.Entry<String, DocumentAnalysis>> iterator() {
     return documentAnalysisByKey.entrySet().iterator();
   }
@@ -152,6 +153,7 @@ public class DocumentAnalysisResponse extends AnalysisResponseBase implements It
      *
      * @return An iterator over the field analyses map.
      */
+    @Override
     public Iterator<Map.Entry<String, FieldAnalysis>> iterator() {
       return fieldAnalysisByFieldName.entrySet().iterator();
     }
diff --git a/solr/solrj/src/java/org/apache/solr/common/SolrDocument.java b/solr/solrj/src/java/org/apache/solr/common/SolrDocument.java
index 53fe215..1a7c9a8 100644
--- a/solr/solrj/src/java/org/apache/solr/common/SolrDocument.java
+++ b/solr/solrj/src/java/org/apache/solr/common/SolrDocument.java
@@ -64,6 +64,7 @@ public class SolrDocument implements Map<String,Object>, Iterable<Map.Entry<Stri
   /**
    * Remove all fields from the document
    */
+  @Override
   public void clear()
   {
     _fields.clear();
@@ -202,6 +203,7 @@ public class SolrDocument implements Map<String,Object>, Iterable<Map.Entry<Stri
   /**
    * Iterate of String->Object keys
    */
+  @Override
   public Iterator<Entry<String, Object>> iterator() {
     return _fields.entrySet().iterator();
   }
@@ -217,23 +219,35 @@ public class SolrDocument implements Map<String,Object>, Iterable<Map.Entry<Stri
   {
     return new Map<String,Collection<Object>>() {
       /** Get the field Value */
+      @Override
       public Collection<Object> get(Object key) { 
         return getFieldValues( (String)key ); 
       }
       
       // Easily Supported methods
+      @Override
       public boolean containsKey(Object key) { return _fields.containsKey( key ); }
+      @Override
       public Set<String>  keySet()           { return _fields.keySet();  }
+      @Override
       public int          size()             { return _fields.size();    }
+      @Override
       public boolean      isEmpty()          { return _fields.isEmpty(); }
 
       // Unsupported operations.  These are not necessary for JSTL
+      @Override
       public void clear() { throw new UnsupportedOperationException(); }
+      @Override
       public boolean containsValue(Object value) {throw new UnsupportedOperationException();}
+      @Override
       public Set<java.util.Map.Entry<String, Collection<Object>>> entrySet() {throw new UnsupportedOperationException();}
+      @Override
       public void putAll(Map<? extends String, ? extends Collection<Object>> t) {throw new UnsupportedOperationException();}
+      @Override
       public Collection<Collection<Object>> values() {throw new UnsupportedOperationException();}
+      @Override
       public Collection<Object> put(String key, Collection<Object> value) {throw new UnsupportedOperationException();}
+      @Override
       public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}
       @Override
       public String toString() {return _fields.toString();}
@@ -246,23 +260,35 @@ public class SolrDocument implements Map<String,Object>, Iterable<Map.Entry<Stri
   public Map<String,Object> getFieldValueMap() {
     return new Map<String,Object>() {
       /** Get the field Value */
+      @Override
       public Object get(Object key) { 
         return getFirstValue( (String)key ); 
       }
       
       // Easily Supported methods
+      @Override
       public boolean containsKey(Object key) { return _fields.containsKey( key ); }
+      @Override
       public Set<String>  keySet()           { return _fields.keySet();  }
+      @Override
       public int          size()             { return _fields.size();    }
+      @Override
       public boolean      isEmpty()          { return _fields.isEmpty(); }
 
       // Unsupported operations.  These are not necessary for JSTL
+      @Override
       public void clear() { throw new UnsupportedOperationException(); }
+      @Override
       public boolean containsValue(Object value) {throw new UnsupportedOperationException();}
+      @Override
       public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}
+      @Override
       public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}
+      @Override
       public Collection<Object> values() {throw new UnsupportedOperationException();}
+      @Override
       public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}
+      @Override
       public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      
       @Override
       public String toString() {return _fields.toString();}
@@ -273,46 +299,57 @@ public class SolrDocument implements Map<String,Object>, Iterable<Map.Entry<Stri
   // MAP interface
   //---------------------------------------------------
 
+  @Override
   public boolean containsKey(Object key) {
     return _fields.containsKey(key);
   }
 
+  @Override
   public boolean containsValue(Object value) {
     return _fields.containsValue(value);
   }
 
+  @Override
   public Set<Entry<String, Object>> entrySet() {
     return _fields.entrySet();
   }
   //TODO: Shouldn't the input parameter here be a String?  The _fields map requires a String.
+  @Override
   public Object get(Object key) {
     return _fields.get(key);
   }
 
+  @Override
   public boolean isEmpty() {
     return _fields.isEmpty();
   }
 
+  @Override
   public Set<String> keySet() {
     return _fields.keySet();
   }
 
+  @Override
   public Object put(String key, Object value) {
     return _fields.put(key, value);
   }
 
+  @Override
   public void putAll(Map<? extends String, ? extends Object> t) {
     _fields.putAll( t );
   }
 
+  @Override
   public Object remove(Object key) {
     return _fields.remove(key);
   }
 
+  @Override
   public int size() {
     return _fields.size();
   }
 
+  @Override
   public Collection<Object> values() {
     return _fields.values();
   }
diff --git a/solr/solrj/src/java/org/apache/solr/common/SolrInputDocument.java b/solr/solrj/src/java/org/apache/solr/common/SolrInputDocument.java
index 99e1951..a604956 100644
--- a/solr/solrj/src/java/org/apache/solr/common/SolrInputDocument.java
+++ b/solr/solrj/src/java/org/apache/solr/common/SolrInputDocument.java
@@ -48,6 +48,7 @@ public class SolrInputDocument implements Map<String,SolrInputField>, Iterable<S
   /**
    * Remove all fields and boosts from the document
    */
+  @Override
   public void clear()
   {
     if( _fields != null ) {
@@ -166,6 +167,7 @@ public class SolrInputDocument implements Map<String,SolrInputField>, Iterable<S
     return _fields.get( field );
   }
 
+  @Override
   public Iterator<SolrInputField> iterator() {
     return _fields.values().iterator();
   }
@@ -198,46 +200,57 @@ public class SolrInputDocument implements Map<String,SolrInputField>, Iterable<S
   // MAP interface
   //---------------------------------------------------
 
+  @Override
   public boolean containsKey(Object key) {
     return _fields.containsKey(key);
   }
 
+  @Override
   public boolean containsValue(Object value) {
     return _fields.containsValue(value);
   }
 
+  @Override
   public Set<Entry<String, SolrInputField>> entrySet() {
     return _fields.entrySet();
   }
 
+  @Override
   public SolrInputField get(Object key) {
     return _fields.get(key);
   }
 
+  @Override
   public boolean isEmpty() {
     return _fields.isEmpty();
   }
 
+  @Override
   public Set<String> keySet() {
     return _fields.keySet();
   }
 
+  @Override
   public SolrInputField put(String key, SolrInputField value) {
     return _fields.put(key, value);
   }
 
+  @Override
   public void putAll(Map<? extends String, ? extends SolrInputField> t) {
     _fields.putAll( t );
   }
 
+  @Override
   public SolrInputField remove(Object key) {
     return _fields.remove(key);
   }
 
+  @Override
   public int size() {
     return _fields.size();
   }
 
+  @Override
   public Collection<SolrInputField> values() {
     return _fields.values();
   }
diff --git a/solr/solrj/src/java/org/apache/solr/common/SolrInputField.java b/solr/solrj/src/java/org/apache/solr/common/SolrInputField.java
index b2c599a..4c1a729 100644
--- a/solr/solrj/src/java/org/apache/solr/common/SolrInputField.java
+++ b/solr/solrj/src/java/org/apache/solr/common/SolrInputField.java
@@ -182,6 +182,7 @@ public class SolrInputField implements Iterable<Object>, Serializable
     this.name = name;
   }
 
+  @Override
   @SuppressWarnings("unchecked")
   public Iterator<Object> iterator() {
     if( value instanceof Collection ) {
@@ -190,15 +191,18 @@ public class SolrInputField implements Iterable<Object>, Serializable
     return new Iterator<Object>() {
       boolean nxt = (value!=null);
       
+      @Override
       public boolean hasNext() {
         return nxt;
       }
 
+      @Override
       public Object next() {
         nxt = false;
         return value;
       }
 
+      @Override
       public void remove() {
         throw new UnsupportedOperationException();
       }
diff --git a/solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager.java b/solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager.java
index eed1eaa..8e5b093 100644
--- a/solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager.java
+++ b/solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager.java
@@ -66,6 +66,7 @@ class ConnectionManager implements Watcher {
     connected = false;
   }
 
+  @Override
   public synchronized void process(WatchedEvent event) {
     if (log.isInfoEnabled()) {
       log.info("Watcher " + this + " name:" + name + " got event " + event
diff --git a/solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter.java b/solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter.java
index 95d00a8..d6ef17e 100644
--- a/solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter.java
+++ b/solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter.java
@@ -85,6 +85,7 @@ public abstract class DocRouter {
       return includes(other.min) || includes(other.max) || isSubsetOf(other);
     }
 
+    @Override
     public String toString() {
       return Integer.toHexString(min) + '-' + Integer.toHexString(max);
     }
diff --git a/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper.java b/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper.java
index 5a26b74..294dba8 100644
--- a/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper.java
+++ b/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZooKeeper.java
@@ -52,6 +52,7 @@ public class SolrZooKeeper extends ZooKeeper {
    */
   public void pauseCnxn(final long ms) {
     final Thread t = new Thread() {
+      @Override
       public void run() {
         try {
           final ClientCnxn cnxn = getConnection();
diff --git a/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java b/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java
index 2730f11..6abf017 100644
--- a/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java
+++ b/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java
@@ -139,6 +139,7 @@ public class ZkStateReader {
         // on reconnect, reload cloud info
         new OnReconnect() {
 
+          @Override
           public void command() {
             try {
               ZkStateReader.this.createClusterStateWatchersAndUpdate();
@@ -317,6 +318,7 @@ public class ZkStateReader {
       clusterStateUpdateScheduled = true;
       updateCloudExecutor.schedule(new Runnable() {
         
+        @Override
         public void run() {
           log.info("Updating cluster state from ZooKeeper...");
           synchronized (getUpdateLock()) {
diff --git a/solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.java b/solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.java
index b47f89e..877da36 100755
--- a/solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.java
+++ b/solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.java
@@ -186,6 +186,7 @@ public abstract class ContentStreamBase implements ContentStream
    * Base reader implementation.  If the contentType declares a 
    * charset use it, otherwise use "utf-8".
    */
+  @Override
   public Reader getReader() throws IOException {
     String charset = getCharsetFromContentType( getContentType() );
     return charset == null 
@@ -197,6 +198,7 @@ public abstract class ContentStreamBase implements ContentStream
   // Getters / Setters for overrideable attributes
   //------------------------------------------------------------------
 
+  @Override
   public String getContentType() {
     return contentType;
   }
@@ -205,6 +207,7 @@ public abstract class ContentStreamBase implements ContentStream
     this.contentType = contentType;
   }
 
+  @Override
   public String getName() {
     return name;
   }
@@ -213,6 +216,7 @@ public abstract class ContentStreamBase implements ContentStream
     this.name = name;
   }
 
+  @Override
   public Long getSize() {
     return size;
   }
@@ -221,6 +225,7 @@ public abstract class ContentStreamBase implements ContentStream
     this.size = size;
   }
 
+  @Override
   public String getSourceInfo() {
     return sourceInfo;
   }
diff --git a/solr/solrj/src/java/org/apache/solr/common/util/FastInputStream.java b/solr/solrj/src/java/org/apache/solr/common/util/FastInputStream.java
index f1264af..0c463e4 100755
--- a/solr/solrj/src/java/org/apache/solr/common/util/FastInputStream.java
+++ b/solr/solrj/src/java/org/apache/solr/common/util/FastInputStream.java
@@ -65,6 +65,7 @@ public class FastInputStream extends InputStream implements DataInput {
   }
 
 
+  @Override
   public int readUnsignedByte() throws IOException {
     if (pos >= end) {
       refill();
@@ -140,10 +141,12 @@ public class FastInputStream extends InputStream implements DataInput {
     in.close();
   }
 
+  @Override
   public void readFully(byte b[]) throws IOException {
     readFully(b, 0, b.length);
   }
 
+  @Override
   public void readFully(byte b[], int off, int len) throws IOException {
     while (len>0) {
       int ret = read(b, off, len);
@@ -155,6 +158,7 @@ public class FastInputStream extends InputStream implements DataInput {
     }
   }
 
+  @Override
   public int skipBytes(int n) throws IOException {
     if (end-pos >= n) {
       pos += n;
@@ -177,10 +181,12 @@ public class FastInputStream extends InputStream implements DataInput {
     return r;
   }
 
+  @Override
   public boolean readBoolean() throws IOException {
     return readByte()==1;
   }
 
+  @Override
   public byte readByte() throws IOException {
     if (pos >= end) {
       refill();
@@ -190,18 +196,22 @@ public class FastInputStream extends InputStream implements DataInput {
   }
 
 
+  @Override
   public short readShort() throws IOException {
     return (short)((readUnsignedByte() << 8) | readUnsignedByte());
   }
 
+  @Override
   public int readUnsignedShort() throws IOException {
     return (readUnsignedByte() << 8) | readUnsignedByte();
   }
 
+  @Override
   public char readChar() throws IOException {
     return (char)((readUnsignedByte() << 8) | readUnsignedByte());
   }
 
+  @Override
   public int readInt() throws IOException {
     return  ((readUnsignedByte() << 24)
             |(readUnsignedByte() << 16)
@@ -209,6 +219,7 @@ public class FastInputStream extends InputStream implements DataInput {
             | readUnsignedByte());
   }
 
+  @Override
   public long readLong() throws IOException {
     return  (((long)readUnsignedByte()) << 56)
             | (((long)readUnsignedByte()) << 48)
@@ -220,18 +231,22 @@ public class FastInputStream extends InputStream implements DataInput {
             | (readUnsignedByte());
   }
 
+  @Override
   public float readFloat() throws IOException {
     return Float.intBitsToFloat(readInt());    
   }
 
+  @Override
   public double readDouble() throws IOException {
     return Double.longBitsToDouble(readLong());    
   }
 
+  @Override
   public String readLine() throws IOException {
     throw new UnsupportedOperationException();
   }
 
+  @Override
   public String readUTF() throws IOException {
     return new DataInputStream(this).readUTF();
   }
diff --git a/solr/solrj/src/java/org/apache/solr/common/util/FastOutputStream.java b/solr/solrj/src/java/org/apache/solr/common/util/FastOutputStream.java
index 7627fd1..502df3c 100755
--- a/solr/solrj/src/java/org/apache/solr/common/util/FastOutputStream.java
+++ b/solr/solrj/src/java/org/apache/solr/common/util/FastOutputStream.java
@@ -109,23 +109,28 @@ public class FastOutputStream extends OutputStream implements DataOutput {
   }
 
   ////////////////// DataOutput methods ///////////////////
+  @Override
   public void writeBoolean(boolean v) throws IOException {
     write(v ? 1:0);
   }
 
+  @Override
   public void writeByte(int v) throws IOException {
     write((byte)v);
   }
 
+  @Override
   public void writeShort(int v) throws IOException {
     write((byte)(v >>> 8));
     write((byte)v);
   }
 
+  @Override
   public void writeChar(int v) throws IOException {
     writeShort(v);
   }
 
+  @Override
   public void writeInt(int v) throws IOException {
     reserve(4);
     buf[pos] = (byte)(v>>>24);
@@ -135,6 +140,7 @@ public class FastOutputStream extends OutputStream implements DataOutput {
     pos+=4;
   }
 
+  @Override
   public void writeLong(long v) throws IOException {
     reserve(8);
     buf[pos] = (byte)(v>>>56);
@@ -148,26 +154,31 @@ public class FastOutputStream extends OutputStream implements DataOutput {
     pos+=8;
   }
 
+  @Override
   public void writeFloat(float v) throws IOException {
     writeInt(Float.floatToRawIntBits(v));
   }
 
+  @Override
   public void writeDouble(double v) throws IOException {
     writeLong(Double.doubleToRawLongBits(v));
   }
 
+  @Override
   public void writeBytes(String s) throws IOException {
     // non-optimized version, but this shouldn't be used anyway
     for (int i=0; i<s.length(); i++)
       write((byte)s.charAt(i));
   }
 
+  @Override
   public void writeChars(String s) throws IOException {
     // non-optimized version
     for (int i=0; i<s.length(); i++)
       writeChar(s.charAt(i)); 
   }
 
+  @Override
   public void writeUTF(String s) throws IOException {
     // non-optimized version, but this shouldn't be used anyway
     DataOutputStream daos = new DataOutputStream(this);
diff --git a/solr/solrj/src/java/org/apache/solr/common/util/IteratorChain.java b/solr/solrj/src/java/org/apache/solr/common/util/IteratorChain.java
index 82d724f..a4109a5 100644
--- a/solr/solrj/src/java/org/apache/solr/common/util/IteratorChain.java
+++ b/solr/solrj/src/java/org/apache/solr/common/util/IteratorChain.java
@@ -36,6 +36,7 @@ public class IteratorChain<E> implements Iterator<E> {
     iterators.add(it);
   }
   
+  @Override
   public boolean hasNext() {
     if(itit==null) itit = iterators.iterator();
     return recursiveHasNext();
@@ -66,6 +67,7 @@ public class IteratorChain<E> implements Iterator<E> {
   /** hasNext() must ALWAYS be called before calling this
    *  otherwise it's a bit hard to keep track of what's happening
    */
+  @Override
   public E next() {
     if(current==null) { 
       throw new RuntimeException("For an IteratorChain, hasNext() MUST be called before calling next()");
@@ -73,6 +75,7 @@ public class IteratorChain<E> implements Iterator<E> {
     return current.next();
   }
 
+  @Override
   public void remove() {
     // we just need this class 
     // to iterate in readonly mode
diff --git a/solr/solrj/src/java/org/apache/solr/common/util/NamedList.java b/solr/solrj/src/java/org/apache/solr/common/util/NamedList.java
index f9705d2..9ef19e5 100644
--- a/solr/solrj/src/java/org/apache/solr/common/util/NamedList.java
+++ b/solr/solrj/src/java/org/apache/solr/common/util/NamedList.java
@@ -284,14 +284,17 @@ public class NamedList<T> implements Cloneable, Serializable, Iterable<Map.Entry
       value = _value;
     }
 
+    @Override
     public String getKey() {
       return key;
     }
 
+    @Override
     public T getValue() {
       return  value;
     }
 
+    @Override
     public T setValue(T _value) {
       T oldValue = value;
       value = _value;
@@ -337,6 +340,7 @@ public class NamedList<T> implements Cloneable, Serializable, Iterable<Map.Entry
   /**
    * Support the Iterable interface
    */
+  @Override
   public Iterator<Map.Entry<String,T>> iterator() {
 
     final NamedList<T> list = this;
@@ -345,17 +349,21 @@ public class NamedList<T> implements Cloneable, Serializable, Iterable<Map.Entry
 
       int idx = 0;
 
+      @Override
       public boolean hasNext() {
         return idx < list.size();
       }
 
+      @Override
       public Map.Entry<String,T> next() {
         final int index = idx++;
         Map.Entry<String,T> nv = new Map.Entry<String,T>() {
+          @Override
           public String getKey() {
             return list.getName( index );
           }
 
+          @Override
           @SuppressWarnings("unchecked")
           public T getValue() {
             return list.getVal( index );
@@ -367,6 +375,7 @@ public class NamedList<T> implements Cloneable, Serializable, Iterable<Map.Entry
             return getKey()+"="+getValue();
           }
 
+          @Override
           public T setValue(T value) {
             return list.setVal(index, value);
           }
@@ -374,6 +383,7 @@ public class NamedList<T> implements Cloneable, Serializable, Iterable<Map.Entry
         return nv;
       }
 
+      @Override
       public void remove() {
         throw new UnsupportedOperationException();
       }
diff --git a/solr/solrj/src/java/org/apache/solr/common/util/SolrjNamedThreadFactory.java b/solr/solrj/src/java/org/apache/solr/common/util/SolrjNamedThreadFactory.java
index de9042f..2a7c901 100644
--- a/solr/solrj/src/java/org/apache/solr/common/util/SolrjNamedThreadFactory.java
+++ b/solr/solrj/src/java/org/apache/solr/common/util/SolrjNamedThreadFactory.java
@@ -35,6 +35,7 @@ public class SolrjNamedThreadFactory implements ThreadFactory {
                    "-thread-";
   }
 
+  @Override
   public Thread newThread(Runnable r) {
       Thread t = new Thread(group, r,
                             prefix + threadNumber.getAndIncrement(),
diff --git a/solr/solrj/src/java/org/apache/solr/common/util/XMLErrorLogger.java b/solr/solrj/src/java/org/apache/solr/common/util/XMLErrorLogger.java
index 181f234..7f45ff9 100644
--- a/solr/solrj/src/java/org/apache/solr/common/util/XMLErrorLogger.java
+++ b/solr/solrj/src/java/org/apache/solr/common/util/XMLErrorLogger.java
@@ -37,34 +37,41 @@ public final class XMLErrorLogger implements ErrorHandler,ErrorListener,XMLRepor
 
   // ErrorHandler
 
+  @Override
   public void warning(SAXParseException e) {
     log.warn("XML parse warning in \""+e.getSystemId()+"\", line "+e.getLineNumber()+", column "+e.getColumnNumber()+": "+e.getMessage());
   }
 
+  @Override
   public void error(SAXParseException e) throws SAXException {
     throw e;
   }
 
+  @Override
   public void fatalError(SAXParseException e) throws SAXException {
     throw e;
   }
 
   // ErrorListener
 
+  @Override
   public void warning(TransformerException e) {
     log.warn(e.getMessageAndLocation());
   }
 
+  @Override
   public void error(TransformerException e) throws TransformerException {
     throw e;
   }
 
+  @Override
   public void fatalError(TransformerException e) throws TransformerException {
     throw e;
   }
 
   // XMLReporter
 
+  @Override
   public void report(String message, String errorType, Object relatedInformation, Location loc) {
     final StringBuilder sb = new StringBuilder("XML parser reported ").append(errorType);
     if (loc !=  null) {
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate.java b/solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate.java
index 2ceca5e..c5f46a1 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate.java
@@ -71,10 +71,12 @@ public class TestBatchUpdate extends SolrJettyTestBase {
     counter[0] = 0;
     commonsHttpSolrServer.addBeans(new Iterator<Bean>() {
 
+      @Override
       public boolean hasNext() {
         return counter[0] < numdocs;
       }
 
+      @Override
       public Bean next() {
         Bean bean = new Bean();
         bean.id = "" + (++counter[0]);
@@ -82,6 +84,7 @@ public class TestBatchUpdate extends SolrJettyTestBase {
         return bean;
       }
 
+      @Override
       public void remove() {
         //do nothing
       }
@@ -105,10 +108,12 @@ public class TestBatchUpdate extends SolrJettyTestBase {
     counter[0] = 0;
     commonsHttpSolrServer.add(new Iterator<SolrInputDocument>() {
 
+      @Override
       public boolean hasNext() {
         return counter[0] < numdocs;
       }
 
+      @Override
       public SolrInputDocument next() {
         SolrInputDocument doc = new SolrInputDocument();
         doc.addField("id", "" + (++counter[0]));
@@ -116,6 +121,7 @@ public class TestBatchUpdate extends SolrJettyTestBase {
         return doc;
       }
 
+      @Override
       public void remove() {
         //do nothing
 
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer.java b/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer.java
index 390a657..cf95c73 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer.java
@@ -45,6 +45,7 @@ public class TestEmbeddedSolrServer extends AbstractEmbeddedSolrServerTestCase {
 
   protected static Logger log = LoggerFactory.getLogger(TestEmbeddedSolrServer.class);
 
+  @Override
   protected EmbeddedSolrServer getSolrCore1() {
     return new EmbeddedSolrServer(cores, "core1");
   }
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest.java b/solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest.java
index 7e006f5..3e1ade8 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest.java
@@ -139,6 +139,7 @@ public class CloudSolrServerTest extends AbstractFullDistribZkTestBase {
   }
   
   
+  @Override
   protected void indexr(Object... fields) throws Exception {
     SolrInputDocument doc = getDoc(fields);
     indexDoc(doc);
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec.java b/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec.java
index 34f2195..e3f9632 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec.java
@@ -85,6 +85,7 @@ public class TestUpdateRequestCodec extends LuceneTestCase {
     codec.marshal(updateRequest, baos);
     final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();
     JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {
+      @Override
       public void update(SolrInputDocument document, UpdateRequest req) {
         Assert.assertNotNull(req.getParams());
         docs.add(document);
@@ -124,6 +125,7 @@ public class TestUpdateRequestCodec extends LuceneTestCase {
     // imagine someone adding a custom Bean that implements Iterable 
     // but is not a Collection
     doc.addField("iter", new Iterable<String>() { 
+        @Override
         public Iterator<String> iterator() { return values.iterator(); } 
       });
     doc.addField("desc", "1");
@@ -134,6 +136,7 @@ public class TestUpdateRequestCodec extends LuceneTestCase {
     codec.marshal(updateRequest, baos);
     final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();
     JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {
+      @Override
       public void update(SolrInputDocument document, UpdateRequest req) {
         Assert.assertNotNull(req.getParams());
         docs.add(document);
diff --git a/solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest.java b/solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest.java
index 51e04f1..a67c603 100644
--- a/solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest.java
+++ b/solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest.java
@@ -131,6 +131,7 @@ public class SolrDocumentTest extends LuceneTestCase
     assertEquals( 0, doc.getFieldNames().size() );
     
     Iterable iter = new Iterable() {
+      @Override
       public Iterator iterator() {
         return c0.iterator();
       }
diff --git a/solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest.java b/solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest.java
index b31dab2..5aa3bd7 100755
--- a/solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest.java
+++ b/solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest.java
@@ -91,9 +91,12 @@ public class SolrParamTest extends LuceneTestCase
     }
     
     // Malformed params: These should throw a 400
-    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   "f.bad.int" ); } } ) );
-    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  "f.bad.bool" ); } } ) );
-    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( "f.bad.float" ); } } ) );
+    assertEquals( 400, getReturnCode( new Runnable() { @Override
+    public void run() { params.getInt(   "f.bad.int" ); } } ) );
+    assertEquals( 400, getReturnCode( new Runnable() { @Override
+    public void run() { params.getBool(  "f.bad.bool" ); } } ) );
+    assertEquals( 400, getReturnCode( new Runnable() { @Override
+    public void run() { params.getFloat( "f.bad.float" ); } } ) );
     
     // Ask for params that arent there
     assertNull( params.get( "asagdsaga" ) );
@@ -130,15 +133,24 @@ public class SolrParamTest extends LuceneTestCase
     assertEquals( pfloat , required.getFieldFloat( "fakefield", "float" ) );
     
     // Required params which are missing: These should throw a 400
-    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( "aaaa" ); } } ) );
-    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   "f.bad.int" ); } } ) );
-    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  "f.bad.bool" ); } } ) );
-    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( "f.bad.float" ); } } ) );
-    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   "aaa" ); } } ) );
-    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  "aaa" ); } } ) );
-    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( "aaa" ); } } ) );
-    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  "bad", "bool" ); } } ) );
-    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   "bad", "int"  ); } } ) );
+    assertEquals( 400, getReturnCode( new Runnable() { @Override
+    public void run() { required.get( "aaaa" ); } } ) );
+    assertEquals( 400, getReturnCode( new Runnable() { @Override
+    public void run() { required.getInt(   "f.bad.int" ); } } ) );
+    assertEquals( 400, getReturnCode( new Runnable() { @Override
+    public void run() { required.getBool(  "f.bad.bool" ); } } ) );
+    assertEquals( 400, getReturnCode( new Runnable() { @Override
+    public void run() { required.getFloat( "f.bad.float" ); } } ) );
+    assertEquals( 400, getReturnCode( new Runnable() { @Override
+    public void run() { required.getInt(   "aaa" ); } } ) );
+    assertEquals( 400, getReturnCode( new Runnable() { @Override
+    public void run() { required.getBool(  "aaa" ); } } ) );
+    assertEquals( 400, getReturnCode( new Runnable() { @Override
+    public void run() { required.getFloat( "aaa" ); } } ) );
+    assertEquals( 400, getReturnCode( new Runnable() { @Override
+    public void run() { params.getFieldBool(  "bad", "bool" ); } } ) );
+    assertEquals( 400, getReturnCode( new Runnable() { @Override
+    public void run() { params.getFieldInt(   "bad", "int"  ); } } ) );
 
     // Fields with default use their parent value:
     assertEquals(
diff --git a/solr/test-framework/src/java/org/apache/solr/analysis/StringMockSolrResourceLoader.java b/solr/test-framework/src/java/org/apache/solr/analysis/StringMockSolrResourceLoader.java
index 2185a89..d1aa4b1 100644
--- a/solr/test-framework/src/java/org/apache/solr/analysis/StringMockSolrResourceLoader.java
+++ b/solr/test-framework/src/java/org/apache/solr/analysis/StringMockSolrResourceLoader.java
@@ -32,10 +32,12 @@ class StringMockSolrResourceLoader implements ResourceLoader {
     this.text = text;
   }
 
+  @Override
   public <T> T newInstance(String cname, Class<T> expectedType) {
     return null;
   }
 
+  @Override
   public InputStream openResource(String resource) throws IOException {
     return new ByteArrayInputStream(text.getBytes("UTF-8"));
   }
diff --git a/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java b/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
index bc918bd..73b11bc 100644
--- a/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
+++ b/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
@@ -501,6 +501,7 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
     ureq.process(cloudClient);
   }
   
+  @Override
   protected void index_specific(int serverNumber, Object... fields)
       throws Exception {
     SolrInputDocument doc = new SolrInputDocument();
@@ -534,6 +535,7 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
     controlClient.add(doc);
   }
   
+  @Override
   protected void del(String q) throws Exception {
     controlClient.deleteByQuery(q);
     cloudClient.deleteByQuery(q);
@@ -1067,6 +1069,7 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
           + " deletes:" + numDeletes);
     }
     
+    @Override
     public void safeStop() {
       stop = true;
     }
@@ -1116,6 +1119,7 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
       System.err.println("num searches done:" + numSearches + " with " + fails + " fails");
     }
     
+    @Override
     public void safeStop() {
       stop = true;
     }
@@ -1175,11 +1179,13 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
     System.clearProperty("numShards");
   }
   
+  @Override
   protected void commit() throws Exception {
     controlClient.commit();
     cloudClient.commit();
   }
   
+  @Override
   protected void destroyServers() throws Exception {
     if (controlJetty != null) {
       ChaosMonkey.stop(controlJetty);
@@ -1195,6 +1201,7 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
     jettys.clear();
   }
   
+  @Override
   protected SolrServer createNewSolrServer(int port) {
     try {
       // setup the server...
diff --git a/solr/test-framework/src/java/org/apache/solr/util/AbstractSolrTestCase.java b/solr/test-framework/src/java/org/apache/solr/util/AbstractSolrTestCase.java
index 39b78d3..b739623 100644
--- a/solr/test-framework/src/java/org/apache/solr/util/AbstractSolrTestCase.java
+++ b/solr/test-framework/src/java/org/apache/solr/util/AbstractSolrTestCase.java
@@ -79,6 +79,7 @@ public abstract class AbstractSolrTestCase extends SolrTestCaseJ4 {
   /** Subclasses that override setUp can optionally call this method
    * to log the fact that their setUp process has ended.
    */
+  @Override
   public void postSetUp() {
     log.info("####POSTSETUP " + getTestName());
   }
@@ -89,6 +90,7 @@ public abstract class AbstractSolrTestCase extends SolrTestCaseJ4 {
    * since subclasses will want to call super.tearDown() at the *end* of their
    * tearDown method.
    */
+  @Override
   public void preTearDown() {
     log.info("####PRETEARDOWN " + getTestName());      
   }

