GitDiffStart: a0d0ae4f213e5f1037e884b2b4c2f4614a1495f6 | Fri Jun 11 21:46:58 2010 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index e97c39e..ee6a6e5 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -127,7 +127,7 @@ New Features
 
 * SOLR-1268: Incorporate FastVectorHighlighter (koji)
 
-* SOLR-1750: SystemInfoRequestHandler added for simpler programmatic access
+* SOLR-1750: SolrInfoMBeanHandler added for simpler programmatic access
   to info currently available from registry.jsp and stats.jsp
   (ehatcher, hossman)
 
diff --git a/solr/src/java/org/apache/solr/handler/SystemInfoRequestHandler.java b/solr/src/java/org/apache/solr/handler/SystemInfoRequestHandler.java
deleted file mode 100644
index c71d192..0000000
--- a/solr/src/java/org/apache/solr/handler/SystemInfoRequestHandler.java
+++ /dev/null
@@ -1,126 +0,0 @@
-package org.apache.solr.handler;
-
-import org.apache.solr.request.SolrQueryRequest;
-import org.apache.solr.core.SolrInfoMBean;
-import org.apache.solr.core.SolrCore;
-import org.apache.solr.common.util.NamedList;
-import org.apache.solr.common.util.SimpleOrderedMap;
-import org.apache.solr.response.SolrQueryResponse;
-
-import org.apache.lucene.LucenePackage;
-
-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.util.Date;
-import java.util.Set;
-import java.util.Map;
-import java.util.HashSet;
-import java.util.HashMap;
-
-/**
- * A request handler that provides System Information about the
- * current running instance and all registered SolrMBeans.
- */
-public class SystemInfoRequestHandler extends RequestHandlerBase {
-  static InetAddress addr = null;
-  static String hostname = "unknown";
-  static {
-    try {
-      addr = InetAddress.getLocalHost();
-      hostname = addr.getCanonicalHostName();
-    } catch (UnknownHostException e) {
-      //default to unknown
-    }
-  }
-
-  /**
-   * Take an array of any type and generate a Set containing the toString.
-   * Set is garunteed to never be null (but may be empty)
-   */
-  private Set<String> arrayToSet(Object[] arr) {
-    HashSet<String> r = new HashSet<String>();
-    if (null == arr) return r;
-    for (Object o : arr) {
-      r.add(o.toString());
-    }
-    return r;
-  }
-  
-
-  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {
-    SolrCore core = req.getCore();
-    rsp.add("core", core.getName());
-    rsp.add("schema", req.getSchema().getSchemaName());
-    rsp.add("start", new Date(core.getStartTime()));
-    rsp.add("now", new Date().toString());
-    rsp.add("host", hostname);
-    rsp.add("cwd", System.getProperty("user.dir"));
-    rsp.add("instanceDir", core.getSolrConfig().getInstanceDir());
-
-    Package solrP = SolrCore.class.getPackage();
-    Package luceneP = LucenePackage.class.getPackage();
-    NamedList version = new NamedList();
-    version.add("solrSpecVersion", solrP.getSpecificationVersion());
-    version.add("solrImplVersion", solrP.getImplementationVersion());
-    version.add("luceneSpecVersion", luceneP.getSpecificationVersion());
-    version.add("luceneImplVersion", luceneP.getImplementationVersion());
-
-    rsp.add("version", version);
-    
-    NamedList cats = new NamedList();
-    rsp.add("objects", cats);
-    
-    Set<String> requestedCats = arrayToSet(req.getParams().getParams("cat"));
-    if (requestedCats.isEmpty()) {
-      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {
-        requestedCats.add(cat.name());
-      }
-    }
-    for (String catName : requestedCats) {
-      cats.add(catName,new SimpleOrderedMap());
-    }
-         
-    Set<String> requestedKeys = arrayToSet(req.getParams().getParams("key"));
-    
-    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();
-    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {
-      String key = entry.getKey();
-      SolrInfoMBean m = entry.getValue();
-
-      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;
-
-      NamedList catInfo = (NamedList) cats.get(m.getCategory().name());
-      if ( null == catInfo ) continue;
-
-      NamedList mBeanInfo = new SimpleOrderedMap();
-      mBeanInfo.add("class", m.getName());
-      mBeanInfo.add("version", m.getVersion());
-      mBeanInfo.add("description", m.getDescription());
-      mBeanInfo.add("srcId", m.getSourceId());
-      mBeanInfo.add("src", m.getSource());
-      mBeanInfo.add("docs", arrayToSet(m.getDocs()));
-      
-      if (req.getParams().getFieldBool(key, "stats", false))
-        mBeanInfo.add("stats", m.getStatistics());
-      
-      catInfo.add(key, mBeanInfo);
-    }
-    rsp.setHttpCaching(false); // never cache, no matter what init config looks like
-  }
-
-  public String getDescription() {
-    return "Get Solr component statistics";
-  }
-
-  public String getSourceId() {
-    return "$Id$";
-  }
-
-  public String getSource() {
-    return "$URL$";
-  }
-
-  public String getVersion() {
-    return "$Revision$";
-  }
-}
diff --git a/solr/src/java/org/apache/solr/handler/admin/AdminHandlers.java b/solr/src/java/org/apache/solr/handler/admin/AdminHandlers.java
index bb1a87c..e030fb6 100644
--- a/solr/src/java/org/apache/solr/handler/admin/AdminHandlers.java
+++ b/solr/src/java/org/apache/solr/handler/admin/AdminHandlers.java
@@ -82,6 +82,7 @@ public class AdminHandlers implements SolrCoreAware, SolrRequestHandler
     StandardHandler[] list = new StandardHandler[] {
       new StandardHandler( "luke", new LukeRequestHandler() ),
       new StandardHandler( "system", new SystemInfoHandler() ),
+      new StandardHandler( "mbeans", new SolrInfoMBeanHandler() ),
       new StandardHandler( "plugins", new PluginInfoHandler() ),
       new StandardHandler( "threads", new ThreadDumpHandler() ),
       new StandardHandler( "properties", new PropertiesRequestHandler() ),
diff --git a/solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler.java b/solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler.java
new file mode 100644
index 0000000..ae9be7c
--- /dev/null
+++ b/solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler.java
@@ -0,0 +1,97 @@
+package org.apache.solr.handler.admin;
+
+import org.apache.solr.handler.RequestHandlerBase;
+import org.apache.solr.request.SolrQueryRequest;
+import org.apache.solr.core.SolrInfoMBean;
+import org.apache.solr.core.SolrCore;
+import org.apache.solr.common.util.NamedList;
+import org.apache.solr.common.util.SimpleOrderedMap;
+import org.apache.solr.response.SolrQueryResponse;
+
+import java.util.Date;
+import java.util.Set;
+import java.util.Map;
+import java.util.HashSet;
+import java.util.HashMap;
+
+/**
+ * A request handler that provides info about all 
+ * registered SolrInfoMBeans.
+ */
+public class SolrInfoMBeanHandler extends RequestHandlerBase {
+
+  /**
+   * Take an array of any type and generate a Set containing the toString.
+   * Set is garunteed to never be null (but may be empty)
+   */
+  private Set<String> arrayToSet(Object[] arr) {
+    HashSet<String> r = new HashSet<String>();
+    if (null == arr) return r;
+    for (Object o : arr) {
+      if (null != o) r.add(o.toString());
+    }
+    return r;
+  }
+  
+
+  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {
+    SolrCore core = req.getCore();
+    
+    NamedList cats = new NamedList();
+    rsp.add("solr-mbeans", cats);
+    
+    String[] requestedCats = req.getParams().getParams("cat");
+    if (null == requestedCats || 0 == requestedCats.length) {
+      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {
+        cats.add(cat.name(), new SimpleOrderedMap());
+      }
+    } else {
+      for (String catName : requestedCats) {
+        cats.add(catName,new SimpleOrderedMap());
+      }
+    }
+         
+    Set<String> requestedKeys = arrayToSet(req.getParams().getParams("key"));
+    
+    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();
+    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {
+      String key = entry.getKey();
+      SolrInfoMBean m = entry.getValue();
+
+      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;
+
+      NamedList catInfo = (NamedList) cats.get(m.getCategory().name());
+      if ( null == catInfo ) continue;
+
+      NamedList mBeanInfo = new SimpleOrderedMap();
+      mBeanInfo.add("class", m.getName());
+      mBeanInfo.add("version", m.getVersion());
+      mBeanInfo.add("description", m.getDescription());
+      mBeanInfo.add("srcId", m.getSourceId());
+      mBeanInfo.add("src", m.getSource());
+      mBeanInfo.add("docs", m.getDocs());
+      
+      if (req.getParams().getFieldBool(key, "stats", false))
+        mBeanInfo.add("stats", m.getStatistics());
+      
+      catInfo.add(key, mBeanInfo);
+    }
+    rsp.setHttpCaching(false); // never cache, no matter what init config looks like
+  }
+
+  public String getDescription() {
+    return "Get Info (and statistics) about all registered SolrInfoMBeans";
+  }
+
+  public String getSourceId() {
+    return "$Id$";
+  }
+
+  public String getSource() {
+    return "$URL$";
+  }
+
+  public String getVersion() {
+    return "$Revision$";
+  }
+}

