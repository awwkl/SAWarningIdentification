GitDiffStart: 4a67d10999f7215e7504983c7d23854e3478ad46 | Wed Mar 2 22:14:32 2011 +0000
diff --git a/lucene/docs/fileformats.html b/lucene/docs/fileformats.html
index da1cc55..f4528c7 100644
--- a/lucene/docs/fileformats.html
+++ b/lucene/docs/fileformats.html
@@ -422,10 +422,14 @@ document.write("Last Published: " + document.lastModified);
 	        merge the new segment will write them,
 	        uncompressed). See issue LUCENE-1960 for details.
             </p>
+<p>
+            In version 3.1, segments records the code version
+            that created them. See LUCENE-2720 for details.
+           </p>
 </div>
 
         
-<a name="N10034"></a><a name="Definitions"></a>
+<a name="N10037"></a><a name="Definitions"></a>
 <h2 class="boxed">Definitions</h2>
 <div class="section">
 <p>
@@ -466,7 +470,7 @@ document.write("Last Published: " + document.lastModified);
                 strings, the first naming the field, and the second naming text
                 within the field.
             </p>
-<a name="N10054"></a><a name="Inverted Indexing"></a>
+<a name="N10057"></a><a name="Inverted Indexing"></a>
 <h3 class="boxed">Inverted Indexing</h3>
 <p>
                     The index stores statistics about terms in order
@@ -476,7 +480,7 @@ document.write("Last Published: " + document.lastModified);
                     it.  This is the inverse of the natural relationship, in which
                     documents list terms.
                 </p>
-<a name="N10060"></a><a name="Types of Fields"></a>
+<a name="N10063"></a><a name="Types of Fields"></a>
 <h3 class="boxed">Types of Fields</h3>
 <p>
                     In Lucene, fields may be <i>stored</i>, in which
@@ -490,7 +494,7 @@ document.write("Last Published: " + document.lastModified);
                     to be indexed literally.
                 </p>
 <p>See the <a href="api/core/org/apache/lucene/document/Field.html">Field</a> java docs for more information on Fields.</p>
-<a name="N1007D"></a><a name="Segments"></a>
+<a name="N10080"></a><a name="Segments"></a>
 <h3 class="boxed">Segments</h3>
 <p>
                     Lucene indexes may be composed of multiple sub-indexes, or
@@ -516,7 +520,7 @@ document.write("Last Published: " + document.lastModified);
                     Searches may involve multiple segments and/or multiple indexes, each
                     index potentially composed of a set of segments.
                 </p>
-<a name="N1009B"></a><a name="Document Numbers"></a>
+<a name="N1009E"></a><a name="Document Numbers"></a>
 <h3 class="boxed">Document Numbers</h3>
 <p>
                     Internally, Lucene refers to documents by an integer <i>document
@@ -571,7 +575,7 @@ document.write("Last Published: " + document.lastModified);
 </div>
 
         
-<a name="N100C2"></a><a name="Overview"></a>
+<a name="N100C5"></a><a name="Overview"></a>
 <h2 class="boxed">Overview</h2>
 <div class="section">
 <p>
@@ -670,7 +674,7 @@ document.write("Last Published: " + document.lastModified);
 </div>
 
         
-<a name="N10105"></a><a name="File Naming"></a>
+<a name="N10108"></a><a name="File Naming"></a>
 <h2 class="boxed">File Naming</h2>
 <div class="section">
 <p>
@@ -697,7 +701,7 @@ document.write("Last Published: " + document.lastModified);
             </p>
 </div>
       
-<a name="N10114"></a><a name="file-names"></a>
+<a name="N10117"></a><a name="file-names"></a>
 <h2 class="boxed">Summary of File Extensions</h2>
 <div class="section">
 <p>The following table summarizes the names and extensions of the files in Lucene:
@@ -839,10 +843,10 @@ document.write("Last Published: " + document.lastModified);
 </div>
 
         
-<a name="N101FE"></a><a name="Primitive Types"></a>
+<a name="N10201"></a><a name="Primitive Types"></a>
 <h2 class="boxed">Primitive Types</h2>
 <div class="section">
-<a name="N10203"></a><a name="Byte"></a>
+<a name="N10206"></a><a name="Byte"></a>
 <h3 class="boxed">Byte</h3>
 <p>
                     The most primitive type
@@ -850,7 +854,7 @@ document.write("Last Published: " + document.lastModified);
                     other data types are defined as sequences
                     of bytes, so file formats are byte-order independent.
                 </p>
-<a name="N1020C"></a><a name="UInt32"></a>
+<a name="N1020F"></a><a name="UInt32"></a>
 <h3 class="boxed">UInt32</h3>
 <p>
                     32-bit unsigned integers are written as four
@@ -860,7 +864,7 @@ document.write("Last Published: " + document.lastModified);
                     UInt32    --&gt; &lt;Byte&gt;<sup>4</sup>
                 
 </p>
-<a name="N1021B"></a><a name="Uint64"></a>
+<a name="N1021E"></a><a name="Uint64"></a>
 <h3 class="boxed">Uint64</h3>
 <p>
                     64-bit unsigned integers are written as eight
@@ -869,7 +873,7 @@ document.write("Last Published: " + document.lastModified);
 <p>UInt64    --&gt; &lt;Byte&gt;<sup>8</sup>
                 
 </p>
-<a name="N1022A"></a><a name="VInt"></a>
+<a name="N1022D"></a><a name="VInt"></a>
 <h3 class="boxed">VInt</h3>
 <p>
                     A variable-length format for positive integers is
@@ -1419,13 +1423,13 @@ document.write("Last Published: " + document.lastModified);
                     This provides compression while still being
                     efficient to decode.
                 </p>
-<a name="N1050F"></a><a name="Chars"></a>
+<a name="N10512"></a><a name="Chars"></a>
 <h3 class="boxed">Chars</h3>
 <p>
                     Lucene writes unicode
                     character sequences as UTF-8 encoded bytes.
                 </p>
-<a name="N10518"></a><a name="String"></a>
+<a name="N1051B"></a><a name="String"></a>
 <h3 class="boxed">String</h3>
 <p>
 		    Lucene writes strings as UTF-8 encoded bytes.
@@ -1438,10 +1442,10 @@ document.write("Last Published: " + document.lastModified);
 </div>
 
         
-<a name="N10525"></a><a name="Compound Types"></a>
+<a name="N10528"></a><a name="Compound Types"></a>
 <h2 class="boxed">Compound Types</h2>
 <div class="section">
-<a name="N1052A"></a><a name="MapStringString"></a>
+<a name="N1052D"></a><a name="MapStringString"></a>
 <h3 class="boxed">Map&lt;String,String&gt;</h3>
 <p>
 		    In a couple places Lucene stores a Map
@@ -1454,13 +1458,13 @@ document.write("Last Published: " + document.lastModified);
 </div>
 
         
-<a name="N1053A"></a><a name="Per-Index Files"></a>
+<a name="N1053D"></a><a name="Per-Index Files"></a>
 <h2 class="boxed">Per-Index Files</h2>
 <div class="section">
 <p>
                 The files in this section exist one-per-index.
             </p>
-<a name="N10542"></a><a name="Segments File"></a>
+<a name="N10545"></a><a name="Segments File"></a>
 <h3 class="boxed">Segments File</h3>
 <p>
                     The active segments in the index are stored in the
@@ -1501,8 +1505,8 @@ document.write("Last Published: " + document.lastModified);
                 </p>
 <p>
                     
-<b>2.9</b>
-                    Segments --&gt; Format, Version, NameCounter, SegCount, &lt;SegName, SegSize, DelGen, DocStoreOffset, [DocStoreSegment, DocStoreIsCompoundFile], HasSingleNormFile, NumField,
+<b>3.1</b>
+                    Segments --&gt; Format, Version, NameCounter, SegCount, &lt;SegVersion, SegName, SegSize, DelGen, DocStoreOffset, [DocStoreSegment, DocStoreIsCompoundFile], HasSingleNormFile, NumField,
                     NormGen<sup>NumField</sup>,
                     IsCompoundFile, DeletionCount, HasProx, Diagnostics&gt;<sup>SegCount</sup>, CommitUserData, Checksum
                 </p>
@@ -1514,7 +1518,7 @@ document.write("Last Published: " + document.lastModified);
                     Version, DelGen, NormGen, Checksum --&gt; Int64
                 </p>
 <p>
-                   SegName, DocStoreSegment --&gt; String
+                   SegVersion, SegName, DocStoreSegment --&gt; String
                 </p>
 <p>
 		   Diagnostics --&gt; Map&lt;String,String&gt;
@@ -1537,6 +1541,9 @@ document.write("Last Published: " + document.lastModified);
                     NameCounter is used to generate names for new segment files.
                 </p>
 <p>
+                    SegVersion is the code version that created the segment.
+                </p>
+<p>
                     SegName is the name of the segment, and is used as the file name prefix
                     for all of the files that compose the segment's index.
                 </p>
@@ -1627,7 +1634,7 @@ document.write("Last Published: " + document.lastModified);
 		    Lucene version, OS, Java version, why the segment
 		    was created (merge, flush, addIndexes), etc.
                 </p>
-<a name="N105C7"></a><a name="Lock File"></a>
+<a name="N105CD"></a><a name="Lock File"></a>
 <h3 class="boxed">Lock File</h3>
 <p>
                     The write lock, which is stored in the index
@@ -1641,14 +1648,14 @@ document.write("Last Published: " + document.lastModified);
                     documents).  This lock file ensures that only one
                     writer is modifying the index at a time.
                 </p>
-<a name="N105D0"></a><a name="Deletable File"></a>
+<a name="N105D6"></a><a name="Deletable File"></a>
 <h3 class="boxed">Deletable File</h3>
 <p>
                     A writer dynamically computes
                     the files that are deletable, instead, so no file
                     is written.
                 </p>
-<a name="N105D9"></a><a name="Compound Files"></a>
+<a name="N105DF"></a><a name="Compound Files"></a>
 <h3 class="boxed">Compound Files</h3>
 <p>Starting with Lucene 1.4 the compound file format became default. This
                     is simply a container for all files described in the next section
@@ -1675,14 +1682,14 @@ document.write("Last Published: " + document.lastModified);
 </div>
 
         
-<a name="N10601"></a><a name="Per-Segment Files"></a>
+<a name="N10607"></a><a name="Per-Segment Files"></a>
 <h2 class="boxed">Per-Segment Files</h2>
 <div class="section">
 <p>
                 The remaining files are all per-segment, and are
                 thus defined by suffix.
             </p>
-<a name="N10609"></a><a name="Fields"></a>
+<a name="N1060F"></a><a name="Fields"></a>
 <h3 class="boxed">Fields</h3>
 <p>
                     
@@ -1876,7 +1883,7 @@ document.write("Last Published: " + document.lastModified);
 </li>
                 
 </ol>
-<a name="N106B0"></a><a name="Term Dictionary"></a>
+<a name="N106B6"></a><a name="Term Dictionary"></a>
 <h3 class="boxed">Term Dictionary</h3>
 <p>
                     The term dictionary is represented as two files:
@@ -2068,7 +2075,7 @@ document.write("Last Published: " + document.lastModified);
 </li>
                 
 </ol>
-<a name="N10734"></a><a name="Frequencies"></a>
+<a name="N1073A"></a><a name="Frequencies"></a>
 <h3 class="boxed">Frequencies</h3>
 <p>
                     The .frq file contains the lists of documents
@@ -2196,7 +2203,7 @@ document.write("Last Published: " + document.lastModified);
                    entry in level-1. In the example has entry 15 on level 1 a pointer to entry 15 on level 0 and entry 31 on level 1 a pointer
                    to entry 31 on level 0.                   
                 </p>
-<a name="N107BC"></a><a name="Positions"></a>
+<a name="N107C2"></a><a name="Positions"></a>
 <h3 class="boxed">Positions</h3>
 <p>
                     The .prx file contains the lists of positions that
@@ -2266,7 +2273,7 @@ document.write("Last Published: " + document.lastModified);
                     Payload. If PayloadLength is not stored, then this Payload has the same
                     length as the Payload at the previous position.
                 </p>
-<a name="N107F8"></a><a name="Normalization Factors"></a>
+<a name="N107FE"></a><a name="Normalization Factors"></a>
 <h3 class="boxed">Normalization Factors</h3>
 <p>There's a single .nrm file containing all norms:
                 </p>
@@ -2346,7 +2353,7 @@ document.write("Last Published: " + document.lastModified);
                 </p>
 <p>Separate norm files are created (when adequate) for both compound and non compound segments.
                 </p>
-<a name="N10849"></a><a name="Term Vectors"></a>
+<a name="N1084F"></a><a name="Term Vectors"></a>
 <h3 class="boxed">Term Vectors</h3>
 <p>
 		  Term Vector support is an optional on a field by
@@ -2482,7 +2489,7 @@ document.write("Last Published: " + document.lastModified);
 </li>
                 
 </ol>
-<a name="N108E5"></a><a name="Deleted Documents"></a>
+<a name="N108EB"></a><a name="Deleted Documents"></a>
 <h3 class="boxed">Deleted Documents</h3>
 <p>The .del file is
                     optional, and only exists when a segment contains deletions.
@@ -2546,7 +2553,7 @@ document.write("Last Published: " + document.lastModified);
 </div>
 
         
-<a name="N1091F"></a><a name="Limitations"></a>
+<a name="N10925"></a><a name="Limitations"></a>
 <h2 class="boxed">Limitations</h2>
 <div class="section">
 <p>
diff --git a/lucene/docs/fileformats.pdf b/lucene/docs/fileformats.pdf
index 2980460..4873eea 100644
--- a/lucene/docs/fileformats.pdf
+++ b/lucene/docs/fileformats.pdf
@@ -13,7 +13,7 @@ Table of contents
    5 Summary of File Extensions.............................................................................................. 6
    6 Primitive Types.................................................................................................................. 7
     6.1 Byte................................................................................................................................7
-    6.2 UInt32............................................................................................................................7
+    6.2 UInt32............................................................................................................................8
     6.3 Uint64............................................................................................................................ 8
     6.4 VInt................................................................................................................................8
     6.5 Chars..............................................................................................................................9
@@ -23,7 +23,7 @@ Table of contents
    8 Per-Index Files................................................................................................................... 9
     8.1 Segments File................................................................................................................ 9
     8.2 Lock File......................................................................................................................11
-    8.3 Deletable File...............................................................................................................11
+    8.3 Deletable File...............................................................................................................12
     8.4 Compound Files...........................................................................................................12
    9 Per-Segment Files............................................................................................................ 12
 
@@ -37,7 +37,7 @@ Table of contents
  9.5 Normalization Factors................................................................................................. 18
  9.6 Term Vectors............................................................................................................... 19
  9.7 Deleted Documents..................................................................................................... 21
-10 Limitations..................................................................................................................... 21
+10 Limitations..................................................................................................................... 22
 
                                                                        Page 2
 
@@ -92,6 +92,9 @@ Page 3
         Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
+In version 3.1, segments records the code version that created them. See LUCENE-2720 for
+details.
+
 2. Definitions
 
 The fundamental concepts in Lucene are index, document, field and term.
@@ -129,15 +132,15 @@ See the Field java docs for more information on Fields.
 Lucene indexes may be composed of multiple sub-indexes, or segments. Each segment is a
 fully independent index, which could be searched separately. Indexes evolve by:
 1. Creating new segments for newly added documents.
-2. Merging existing segments.
-
-Searches may involve multiple segments and/or multiple indexes, each index potentially
 
                                                                        Page 4
 
 Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
+2. Merging existing segments.
+
+Searches may involve multiple segments and/or multiple indexes, each index potentially
 composed of a set of segments.
 
 2.4. Document Numbers
@@ -175,14 +178,15 @@ Each segment index maintains the following:
 ?? Term dictionary. A dictionary containing all of the terms used in all of the indexed fields
     of all of the documents. The dictionary also contains the number of documents which
     contain the term, and pointers to the term's frequency and proximity data.
-?? Term Frequency data. For each term in the dictionary, the numbers of all the documents
-    that contain that term, and the frequency of the term in that document if omitTf is false.
 
 Page 5
 
         Copyright © 2006 The Apache Software Foundation. All rights reserved.
                                            Apache Lucene - Index File Formats
 
+?? Term Frequency data. For each term in the dictionary, the numbers of all the documents
+    that contain that term, and the frequency of the term in that document if omitTf is false.
+
 ?? Term Proximity data. For each term in the dictionary, the positions that the term occurs in
     each document. Note that this will not exist if all fields in all documents set omitTf to
     true.
@@ -227,30 +231,29 @@ Lock File        write.lock                The Write lock prevents
                                            multiple IndexWriters from
                                            writing to the same file.
 
-Compound File    .cfs                      An optional "virtual" file
-                                           consisting of all the other index
-                                           files for systems that frequently
-
                                                                                   Page 6
 
            Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
-Fields                              .fnm  run out of file handles.
-Field Index                         .fdx
-Field Data                          .fdt  Stores information about the
-Term Infos                          .tis  fields
-Term Info Index                     .tii
-Frequencies                         .frq  Contains pointers to field data
-
-Positions                           .prx  The stored fields for documents
-
-Norms                               .nrm  Part of the term dictionary,
-Term Vector Index                   .tvx  stores term info
-Term Vector Documents               .tvd
-                                          The index into the Term Infos
-Term Vector Fields                  .tvf  file
-Deleted Documents                   .del
+Compound File                       .cfs  An optional "virtual" file
+                                          consisting of all the other index
+Fields                              .fnm  files for systems that frequently
+Field Index                         .fdx  run out of file handles.
+Field Data                          .fdt
+Term Infos                          .tis  Stores information about the
+Term Info Index                     .tii  fields
+Frequencies                         .frq
+                                          Contains pointers to field data
+Positions                           .prx
+                                          The stored fields for documents
+Norms                               .nrm
+Term Vector Index                   .tvx  Part of the term dictionary,
+Term Vector Documents               .tvd  stores term info
+
+Term Vector Fields                  .tvf  The index into the Term Infos
+Deleted Documents                   .del  file
+
                                           Contains the list of docs which
                                           contain each term along with
                                           frequency
@@ -279,15 +282,15 @@ Deleted Documents                   .del
 
 6.1. Byte
 The most primitive type is an eight-bit byte. Files are accessed as sequences of bytes. All
-other data types are defined as sequences of bytes, so file formats are byte-order independent.
-
-6.2. UInt32
 
 Page 7
 
         Copyright © 2006 The Apache Software Foundation. All rights reserved.
-                                 Apache Lucene - Index File Formats
+                                Apache Lucene - Index File Formats
 
+other data types are defined as sequences of bytes, so file formats are byte-order independent.
+
+6.2. UInt32
 32-bit unsigned integers are written as four bytes, high-order bytes first.
 UInt32 --> <Byte>4
 
@@ -305,7 +308,7 @@ on.
 
 VInt Encoding Example
 
-Value   First byte  Second byte  Third byte
+Value  First byte  Second byte  Third byte
 
 0 00000000
 
@@ -317,20 +320,20 @@ Value   First byte  Second byte  Third byte
 
 127 01111111
 
-128     10000000    00000001
+128    10000000    00000001
 
-129     10000001    00000001
+129    10000001    00000001
 
-130     10000010    00000001
+130    10000010    00000001
 
-...
+                                                                              Page 8
 
-16,383  11111111    01111111
+       Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
 
-                                                                               Page 8
+...
 
-        Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
+16,383  11111111                                01111111
 
 16,384  10000000                                10000000           00000001
 
@@ -365,15 +368,16 @@ The files in this section exist one-per-index.
 The active segments in the index are stored in the segment info file, segments_N. There may
 be one or more segments_N files in the index; however, the one with the largest generation is
 the active one (when older segments_N files are present it's because they temporarily cannot
-be deleted, or, a writer is in the process of committing, or a custom IndexDeletionPolicy is in
-use). This file lists each segment by name, has details about the separate norms and deletion
-files, and also contains the size of each segment.
 
 Page 9
 
         Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
+be deleted, or, a writer is in the process of committing, or a custom IndexDeletionPolicy is in
+use). This file lists each segment by name, has details about the separate norms and deletion
+files, and also contains the size of each segment.
+
 As of 2.1, there is also a file segments.gen. This file contains the current generation (the _N
 in segments_N) of the index. This is used only as a fallback in case the current generation
 cannot be accurately determined by directory listing alone (as is the case for some NFS
@@ -381,17 +385,17 @@ clients with time-based directory cache expiraation). This file simply contains
 version header (SegmentInfos.FORMAT_LOCKLESS = -2), followed by the generation
 recorded as Int64, written twice.
 
-2.9 Segments --> Format, Version, NameCounter, SegCount, <SegName, SegSize, DelGen,
-DocStoreOffset, [DocStoreSegment, DocStoreIsCompoundFile], HasSingleNormFile,
-NumField, NormGenNumField, IsCompoundFile, DeletionCount, HasProx,
-Diagnostics>SegCount, CommitUserData, Checksum
+3.1 Segments --> Format, Version, NameCounter, SegCount, <SegVersion, SegName,
+SegSize, DelGen, DocStoreOffset, [DocStoreSegment, DocStoreIsCompoundFile],
+HasSingleNormFile, NumField, NormGenNumField, IsCompoundFile, DeletionCount,
+HasProx, Diagnostics>SegCount, CommitUserData, Checksum
 
 Format, NameCounter, SegCount, SegSize, NumField, DocStoreOffset, DeletionCount -->
 Int32
 
 Version, DelGen, NormGen, Checksum --> Int64
 
-SegName, DocStoreSegment --> String
+SegVersion, SegName, DocStoreSegment --> String
 
 Diagnostics --> Map<String,String>
 
@@ -405,6 +409,8 @@ Version counts how often the index has been changed by adding or deleting docume
 
 NameCounter is used to generate names for new segment files.
 
+SegVersion is the code version that created the segment.
+
 SegName is the name of the segment, and is used as the file name prefix for all of the files
 that compose the segment's index.
 
@@ -414,6 +420,11 @@ DelGen is the generation count of the separate deletes file. If this is -1, ther
 deletes. If it is 0, this is a pre-2.1 segment and you must check filesystem for the existence of
 _X.del. Anything above zero means there are separate deletes (_X_N.del).
 
+                                                                       Page 10
+
+Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
 NumField is the size of the array for NormGen, or -1 if there are no NormGens stored.
 
 NormGen records the generation of the separate norms files. If NumField is -1, there are no
@@ -421,11 +432,6 @@ normGens stored and they are all assumed to be 0 when the segment file was writt
 and all assumed to be -1 when the segments file is 2.1 or above. The generation then has the
 same meaning as delGen (above).
 
-                                                                       Page 10
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
 IsCompoundFile records whether the segment is written as a compound file or not. If this is
 -1, the segment is not a compound file. If it is 1, the segment is a compound file. Else it is 0,
 which means we check filesystem to see if _X.cfs exists.
@@ -463,17 +469,17 @@ why the segment was created (merge, flush, addIndexes), etc.
 The write lock, which is stored in the index directory by default, is named "write.lock". If the
 lock directory is different from the index directory then the write lock will be named
 "XXXX-write.lock" where XXXX is a unique prefix derived from the full path to the index
-directory. When this file is present, a writer is currently modifying the index (adding or
-removing documents). This lock file ensures that only one writer is modifying the index at a
-time.
-
-8.3. Deletable File
 
 Page 11
 
          Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
+directory. When this file is present, a writer is currently modifying the index (adding or
+removing documents). This lock file ensures that only one writer is modifying the index at a
+time.
+
+8.3. Deletable File
 A writer dynamically computes the files that are deletable, instead, so no file is written.
 
 8.4. Compound Files
@@ -500,17 +506,18 @@ Field names are stored in the field info file, with suffix .fnm.
 FieldInfos (.fnm) --> FNMVersion,FieldsCount, <FieldName, FieldBits> FieldsCount
 FNMVersion, FieldsCount --> VInt
 FieldName --> String
-FieldBits --> Byte
-?? The low-order bit is one for indexed fields, and zero for non-indexed fields.
-?? The second lowest-order bit is one for fields that have term vectors stored, and zero for
-
-    fields without term vectors.
 
                                                                        Page 12
 
 Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
+FieldBits --> Byte
+
+?? The low-order bit is one for indexed fields, and zero for non-indexed fields.
+?? The second lowest-order bit is one for fields that have term vectors stored, and zero for
+
+    fields without term vectors.
 ?? If the third lowest-order bit is set (0x04), term positions are stored with the term vectors.
 ?? If the fourth lowest-order bit is set (0x08), term offsets are stored with the term vectors.
 ?? If the fifth lowest-order bit is set (0x10), norms are omitted for the indexed field.
@@ -551,6 +558,12 @@ Stored fields are represented by two files:
     Bits --> Byte
 
     ?? low order bit is one for tokenized fields
+
+Page 13
+
+         Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
     ?? second bit is one for fields containing binary data
     ?? third bit is one for fields with compression option enabled (if compression is enabled,
 
@@ -558,17 +571,11 @@ Stored fields are represented by two files:
 
     Value --> String | BinaryValue (depending on Bits)
 
-Page 13
-
-         Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
     BinaryValue --> ValueSize, <Byte>^ValueSize
 
     ValueSize --> VInt
 
 9.2. Term Dictionary
-
 The term dictionary is represented as two files:
 1. The term infos, or tis file.
 
@@ -603,6 +610,11 @@ The term dictionary is represented as two files:
     TIVersion names the version of the format of this file and is equal to
     TermInfosWriter.FORMAT_CURRENT.
 
+                                                                       Page 14
+
+Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
     Term text prefixes are shared. The PrefixLength is the number of initial characters from
     the previous term which must be pre-pended to a term's suffix in order to form the term's
     text. Thus, if the previous term's text was "bone" and the term is "boy", the PrefixLength
@@ -610,11 +622,6 @@ The term dictionary is represented as two files:
 
     FieldNumber determines the term's field, whose name is stored in the .fdt file.
 
-                                                                       Page 14
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
     DocFreq is the count of documents which contain the term.
 
     FreqDelta determines the position of this term's TermFreqs within the .frq file. In
@@ -654,18 +661,17 @@ Copyright © 2006 The Apache Software Foundation. All rights reserved.
 
     IndexDelta --> VLong
 
+Page 15
+
+         Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
     IndexDelta determines the position of this term's TermInfo within the .tis file. In
     particular, it is the difference between the position of this term's entry in that file and the
     position of the previous term's entry.
 
     SkipInterval is the fraction of TermDocs stored in skip tables. It is used to accelerate
     TermDocs.skipTo(int). Larger values result in smaller indexes, greater acceleration, but
-
-Page 15
-
-         Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
     fewer accelerable cases, while smaller values result in bigger indexes, less acceleration
     (in case of a small value for MaxSkipLevels) and more accelerable cases.
 
@@ -706,6 +712,11 @@ is odd, the frequency is one. When DocDelta is even, the frequency is read as an
 omitTf is true, DocDelta contains the gap (not multiplied by 2) between document numbers
 and no frequency information is stored.
 
+                                                                       Page 16
+
+Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
 For example, the TermFreqs for a term which occurs once in document seven and three times
 in document eleven, with omitTf false, would be the following sequence of VInts:
 
@@ -713,11 +724,6 @@ in document eleven, with omitTf false, would be the following sequence of VInts:
 
 If omitTf were true it would be this sequence of VInts instead:
 
-                                                                       Page 16
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
 7,4
 
 DocSkip records the document number before every SkipInterval th document in TermFreqs.
@@ -753,6 +759,12 @@ entry 15 on level 0 and entry 31 on level 1 a pointer to entry 31 on level 0.
 
 The .prx file contains the lists of positions that each term occurs at within documents. Note
 that fields with omitTf true do not store anything into this file, and if all fields in the index
+
+Page 17
+
+         Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
 have omitTf true then the .prx file will not exist.
 
 ProxFile (.prx) --> <TermPositions> TermCount
@@ -761,11 +773,6 @@ TermPositions --> <Positions> DocFreq
 
 Positions --> <PositionDelta,Payload?> Freq
 
-Page 17
-
-         Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
 Payload --> <PayloadLength?,PayloadData>
 
 PositionDelta --> VInt
@@ -804,6 +811,11 @@ AllNorms (.nrm) --> NormsHeader,<Norms> NumFieldsWithNorms
 
 Norms --> <Byte> SegSize
 
+                                                                       Page 18
+
+Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
 NormsHeader --> 'N','R','M',Version
 
 Version --> Byte
@@ -813,11 +825,6 @@ NormsHeader has 4 bytes, last of which is the format version for this file, curr
 Each byte encodes a floating point value. Bits 0-2 contain the 3-bit mantissa, and bits 3-8
 contain the 5-bit exponent.
 
-                                                                       Page 18
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
 These are converted to an IEEE single float value as follows:
 1. If the byte is zero, use a zero float.
 2. Otherwise, set the sign bit of the float to zero;
@@ -851,59 +858,44 @@ Term Vector support is an optional on a field by field basis. It consists of 3 f
 
     This contains, for each document, the number of fields, a list of the fields with term
     vector info and finally a list of pointers to the field information in the .tvf (Term Vector
-    Fields) file.
-
-    Document (.tvd) --> TVDVersion<NumFields, FieldNums, FieldPositions> NumDocs
-
-    TVDVersion --> Int (TermVectorsReader.FORMAT_CURRENT)
-
-    NumFields --> VInt
-
-    FieldNums --> <FieldNumDelta> NumFields
 
 Page 19
 
          Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
+    Fields) file.
+    Document (.tvd) --> TVDVersion<NumFields, FieldNums, FieldPositions> NumDocs
+    TVDVersion --> Int (TermVectorsReader.FORMAT_CURRENT)
+    NumFields --> VInt
+    FieldNums --> <FieldNumDelta> NumFields
     FieldNumDelta --> VInt
-
     FieldPositions --> <FieldPositionDelta> NumFields-1
-
     FieldPositionDelta --> VLong
-
     The .tvd file is used to map out the fields that have term vectors stored and where the
     field information is in the .tvf file.
 3. The Field or .tvf file.
-
     This file contains, for each field that has a term vector stored, a list of the terms, their
     frequencies and, optionally, position and offest information.
-
     Field (.tvf) --> TVFVersion<NumTerms, Position/Offset, TermFreqs> NumFields
-
     TVFVersion --> Int (TermVectorsReader.FORMAT_CURRENT)
-
     NumTerms --> VInt
-
     Position/Offset --> Byte
-
     TermFreqs --> <TermText, TermFreq, Positions?, Offsets?> NumTerms
-
     TermText --> <PrefixLength, Suffix>
-
     PrefixLength --> VInt
-
     Suffix --> String
-
     TermFreq --> VInt
-
     Positions --> <VInt>TermFreq
-
     Offsets --> <VInt, VInt>TermFreq
-
     Notes:
     ?? Position/Offset byte stores whether this term vector has position or offset information
 
+                                                                       Page 20
+
+Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
          stored.
     ?? Term text prefixes are shared. The PrefixLength is the number of initial characters
 
@@ -913,12 +905,6 @@ Page 19
     ?? Positions are stored as delta encoded VInts. This means we only store the difference
          of the current position from the last position
     ?? Offsets are stored as delta encoded VInts. The first VInt is the startOffset, the second
-
-                                                                       Page 20
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
          is the endOffset.
 
 9.7. Deleted Documents
@@ -957,6 +943,11 @@ bytes in Bits (NonzeroBytesCount) is not stored.
 
 For example, if there are 8000 bits and only bits 10,12,32 are set, DGaps would be used:
 
+Page 21
+
+         Copyright © 2006 The Apache Software Foundation. All rights reserved.
+                                                                                                                Apache Lucene - Index File Formats
+
 (VInt) 1 , (byte) 20 , (VInt) 3 , (Byte) 1
 
 10. Limitations
@@ -965,12 +956,6 @@ When referring to term numbers, Lucene's current implementation uses a Java int
 the term index, which means the maximum number of unique terms in any single index
 segment is ~2.1 billion times the term index interval (default 128) = ~274 billion. This is
 technically not a limitation of the index file format, just of Lucene's current implementation.
-
-Page 21
-
-         Copyright © 2006 The Apache Software Foundation. All rights reserved.
-                                                                                                                Apache Lucene - Index File Formats
-
 Similarly, Lucene uses a Java int to refer to document numbers, and the index file format
 uses an Int32 on-disk to store document numbers. This is a limitation of both the index file
 format and the current implementation. Eventually these should be replaced with either
diff --git a/lucene/src/site/src/documentation/content/xdocs/fileformats.xml b/lucene/src/site/src/documentation/content/xdocs/fileformats.xml
index 38dea21..eacbc16 100644
--- a/lucene/src/site/src/documentation/content/xdocs/fileformats.xml
+++ b/lucene/src/site/src/documentation/content/xdocs/fileformats.xml
@@ -87,6 +87,10 @@
 	        uncompressed). See issue LUCENE-1960 for details.
             </p>
 
+        <p>
+            In version 3.1, segments records the code version
+            that created them. See LUCENE-2720 for details.
+           </p>
         </section>
 
         <section id="Definitions"><title>Definitions</title>
@@ -928,8 +932,8 @@
                     written twice.
                 </p>
                 <p>
-                    <b>2.9</b>
-                    Segments --&gt; Format, Version, NameCounter, SegCount, &lt;SegName, SegSize, DelGen, DocStoreOffset, [DocStoreSegment, DocStoreIsCompoundFile], HasSingleNormFile, NumField,
+                    <b>3.1</b>
+                    Segments --&gt; Format, Version, NameCounter, SegCount, &lt;SegVersion, SegName, SegSize, DelGen, DocStoreOffset, [DocStoreSegment, DocStoreIsCompoundFile], HasSingleNormFile, NumField,
                     NormGen<sup>NumField</sup>,
                     IsCompoundFile, DeletionCount, HasProx, Diagnostics&gt;<sup>SegCount</sup>, CommitUserData, Checksum
                 </p>
@@ -944,7 +948,7 @@
                 </p>
 
                 <p>
-                   SegName, DocStoreSegment --&gt; String
+                   SegVersion, SegName, DocStoreSegment --&gt; String
                 </p>
 
 		<p>
@@ -974,6 +978,10 @@
                 </p>
 
                 <p>
+                    SegVersion is the code version that created the segment.
+                </p>
+
+                <p>
                     SegName is the name of the segment, and is used as the file name prefix
                     for all of the files that compose the segment's index.
                 </p>

