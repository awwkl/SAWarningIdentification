GitDiffStart: 2ec97165204a9e4b55419816fc10eaaab6c9095f | Sat Nov 26 12:53:32 2016 +0530
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java
index 6e4a256..9c59d4f 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java
@@ -649,6 +649,7 @@ public class CloudSolrClient extends SolrClient {
    * @param configName the name of the config
    * @throws IOException if an IO error occurs
    */
+  @Deprecated
   public void uploadConfig(Path configPath, String configName) throws IOException {
     stateProvider.connect();
     assertZKStateProvider().uploadConfig(configPath, configName);
@@ -668,6 +669,7 @@ public class CloudSolrClient extends SolrClient {
    * @param downloadPath  the path to write config files to
    * @throws IOException  if an I/O exception occurs
    */
+  @Deprecated
   public void downloadConfig(String configName, Path downloadPath) throws IOException {
     assertZKStateProvider().downloadConfig(configName, downloadPath);
   }
@@ -1532,6 +1534,10 @@ public class CloudSolrClient extends SolrClient {
     this.lbClient.setConnectionTimeout(timeout); 
   }
 
+  public ClusterStateProvider getClusterStateProvider(){
+    return stateProvider;
+  }
+
   private static boolean hasInfoToFindLeaders(UpdateRequest updateRequest, String idField) {
     final Map<SolrInputDocument,Map<String,Object>> documents = updateRequest.getDocumentsMap();
     final Map<String,Map<String,Object>> deleteById = updateRequest.getDeleteByIdMap();
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ZkClientClusterStateProvider.java b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ZkClientClusterStateProvider.java
index 5541186..8ed1b5c 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ZkClientClusterStateProvider.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ZkClientClusterStateProvider.java
@@ -34,7 +34,7 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 
-class ZkClientClusterStateProvider implements CloudSolrClient.ClusterStateProvider {
+public class ZkClientClusterStateProvider implements CloudSolrClient.ClusterStateProvider {
   private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());
 
 
@@ -95,6 +95,17 @@ class ZkClientClusterStateProvider implements CloudSolrClient.ClusterStateProvid
     zkStateReader.getConfigManager().downloadConfigDir(configName, downloadPath);
   }
 
+  /**
+   * Upload a set of config files to Zookeeper and give it a name
+   *
+   * NOTE: You should only allow trusted users to upload configs.  If you
+   * are allowing client access to zookeeper, you should protect the
+   * /configs node against unauthorised write access.
+   *
+   * @param configPath {@link java.nio.file.Path} to the config files
+   * @param configName the name of the config
+   * @throws IOException if an IO error occurs
+   */
   public void uploadConfig(Path configPath, String configName) throws IOException {
     connect();
     zkStateReader.getConfigManager().uploadConfigDir(configPath, configName);
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java b/solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java
index f3abc26..4fa6d9a 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java
@@ -68,7 +68,7 @@ public class TestCloudSolrClientConnections extends SolrTestCaseJ4 {
     try {
       CloudSolrClient client = cluster.getSolrClient();
       try {
-        client.uploadConfig(configPath, "testconfig");
+        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(configPath, "testconfig");
         fail("Requests to a non-running cluster should throw a SolrException");
       } catch (SolrException e) {
         assertTrue("Unexpected message: " + e.getMessage(), e.getMessage().contains("cluster not found/not ready"));
@@ -77,7 +77,7 @@ public class TestCloudSolrClientConnections extends SolrTestCaseJ4 {
       cluster.startJettySolrRunner();
       client.connect(20, TimeUnit.SECONDS);
 
-      client.uploadConfig(configPath, "testconfig");
+      ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(configPath, "testconfig");
 
       ZkConfigManager configManager = new ZkConfigManager(client.getZkStateReader().getZkClient());
       assertTrue("List of uploaded configs does not contain 'testconfig'", configManager.listConfigs().contains("testconfig"));
diff --git a/solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.java b/solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.java
index 77a527e..9cc4a22 100644
--- a/solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.java
+++ b/solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase.java
@@ -36,6 +36,7 @@ import org.apache.solr.client.solrj.embedded.JettyConfig;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
 import org.apache.solr.client.solrj.impl.CloudSolrClient;
 import org.apache.solr.client.solrj.impl.HttpSolrClient;
+import org.apache.solr.client.solrj.impl.ZkClientClusterStateProvider;
 import org.apache.solr.client.solrj.request.CoreAdminRequest;
 import org.apache.solr.client.solrj.request.CoreStatus;
 import org.apache.solr.common.cloud.ClusterProperties;
@@ -159,7 +160,7 @@ public class SolrCloudTestCase extends SolrTestCaseJ4 {
       cluster = new MiniSolrCloudCluster(nodeCount, baseDir, solrxml, jettyConfig);
       CloudSolrClient client = cluster.getSolrClient();
       for (Config config : configs) {
-        client.uploadConfig(config.path, config.name);
+        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(config.path, config.name);
       }
 
       if (clusterProperties.size() > 0) {

