GitDiffStart: 13ceab8476e05eb0a582cbaad20f528407bc3bdf | Mon May 21 16:54:11 2012 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.java
index b8a5ae7..d7af049 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/BlockTermsReader.java
@@ -186,11 +186,6 @@ public class BlockTermsReader extends FieldsProducer {
     }
   }
 
-  // nocommit remove?
-  public static void files(SegmentInfo segmentInfo, String segmentSuffix, Collection<String> files) {
-    files.add(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockTermsWriter.TERMS_EXTENSION));
-  }
-
   @Override
   public FieldsEnum iterator() {
     return new TermFieldsEnum();
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java
index 24c0db9..a5ec04f 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java
@@ -199,12 +199,6 @@ public class BlockTreeTermsReader extends FieldsProducer {
     }
   }
 
-  // nocommit remove?
-  public static void files(SegmentInfo segmentInfo, String segmentSuffix, Collection<String> files) {
-    files.add(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION));
-    files.add(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION));
-  }
-
   @Override
   public FieldsEnum iterator() {
     return new TermFieldsEnum();
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.java b/lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.java
index 812894a..94f73ac 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.java
@@ -389,11 +389,6 @@ public class FixedGapTermsIndexReader extends TermsIndexReaderBase {
     }
   }
 
-  // nocommit remove (and any other files methods!)
-  public static void files(SegmentInfo info, String segmentSuffix, Collection<String> files) {
-    files.add(IndexFileNames.segmentFileName(info.name, segmentSuffix, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));
-  }
-
   @Override
   public void close() throws IOException {
     if (in != null && !indexLoaded) {
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/PostingsBaseFormat.java b/lucene/core/src/java/org/apache/lucene/codecs/PostingsBaseFormat.java
index 590fa3a..d34616b 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/PostingsBaseFormat.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/PostingsBaseFormat.java
@@ -49,6 +49,4 @@ public abstract class PostingsBaseFormat {
   public abstract PostingsReaderBase postingsReaderBase(SegmentReadState state) throws IOException;
 
   public abstract PostingsWriterBase postingsWriterBase(SegmentWriteState state) throws IOException;
-
-  public abstract void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException;
 }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.java b/lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.java
index 7466f66..eb91c4c 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.java
@@ -217,10 +217,6 @@ public class VariableGapTermsIndexReader extends TermsIndexReaderBase {
     }
   }
 
-  public static void files(SegmentInfo info, String segmentSuffix, Collection<String> files) {
-    files.add(IndexFileNames.segmentFileName(info.name, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION));
-  }
-
   @Override
   public void close() throws IOException {
     if (in != null && !indexLoaded) {
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java
index ce04ec3..d48c805 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.java
@@ -133,21 +133,6 @@ class Lucene3xFields extends FieldsProducer {
     return true;
   }
 
-  static void files(SegmentInfo info, Collection<String> files) throws IOException {
-    files.add(IndexFileNames.segmentFileName(info.name, "", Lucene3xPostingsFormat.TERMS_EXTENSION));
-    files.add(IndexFileNames.segmentFileName(info.name, "", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION));
-    files.add(IndexFileNames.segmentFileName(info.name, "", Lucene3xPostingsFormat.FREQ_EXTENSION));
-    // LUCENE-1739: for certain versions of 2.9-dev,
-    // hasProx would be incorrectly computed during
-    // indexing as true, and then stored into the segments
-    // file, when it should have been false.  So we do the
-    // extra check, here:
-    final String prx = IndexFileNames.segmentFileName(info.name, "", Lucene3xPostingsFormat.PROX_EXTENSION);
-    if (info.dir.fileExists(prx)) {
-      files.add(prx);
-    }
-  }
-
   @Override
   public FieldsEnum iterator() throws IOException {
     return new PreFlexFieldsEnum();
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer.java
index 6ba955e..133c04b 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer.java
@@ -193,33 +193,6 @@ class Lucene3xNormsProducer extends PerDocProducer {
     
   }
 
-  /*
-  static void files(SegmentInfo info, Set<String> files) throws IOException {
-    // TODO: This is what SI always did... but we can do this cleaner?
-    // like first FI that has norms but doesn't have separate norms?
-    final String normsFileName = IndexFileNames.segmentFileName(info.name, "", NORMS_EXTENSION);
-    if (info.dir.fileExists(normsFileName)) {
-      // only needed to do this in 3x - 4x can decide if the norms are present
-      files.add(normsFileName);
-    }
-  }
-  */
-
-  /*
-  static void separateFiles(SegmentInfo info, Set<String> files) throws IOException {
-    Map<Integer,Long> normGen = info.getNormGen();
-    if (normGen != null) {
-      for (Entry<Integer,Long> entry : normGen.entrySet()) {
-        long gen = entry.getValue();
-        if (gen >= SegmentInfo.YES) {
-          // Definitely a separate norm file, with generation:
-          files.add(IndexFileNames.fileNameFromGeneration(info.name, SEPARATE_NORMS_EXTENSION + entry.getKey(), gen));
-        }
-      }
-    }
-  }
-  */
-
   private class NormsDocValues extends DocValues {
     private final IndexInput file;
     private final long offset;
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsReader.java
index a3a5d8f..9bde051 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xStoredFieldsReader.java
@@ -296,23 +296,4 @@ final class Lucene3xStoredFieldsReader extends StoredFieldsReader implements Clo
       fieldsStream.seek(fieldsStream.getFilePointer() + length);
     }
   }
-
-  // note: if there are shared docstores, we are also called by Lucene3xCodec even in 
-  // the CFS case. so logic here must handle this.
-  /*
-  public static void files(SegmentInfo info, Set<String> files) throws IOException {
-    if (info.getDocStoreOffset() != -1) {
-      assert info.getDocStoreSegment() != null;
-      if (info.getDocStoreIsCompoundFile()) {
-        files.add(IndexFileNames.segmentFileName(info.getDocStoreSegment(), "", Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION));
-      } else {
-        files.add(IndexFileNames.segmentFileName(info.getDocStoreSegment(), "", FIELDS_INDEX_EXTENSION));
-        files.add(IndexFileNames.segmentFileName(info.getDocStoreSegment(), "", FIELDS_EXTENSION));
-      }
-    } else if (!info.getUseCompoundFile()) {
-      files.add(IndexFileNames.segmentFileName(info.name, "", FIELDS_INDEX_EXTENSION));
-      files.add(IndexFileNames.segmentFileName(info.name, "", FIELDS_EXTENSION));
-    }
-  }
-  */
 }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.java
index 993c12c..59326eb 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.java
@@ -690,27 +690,6 @@ class Lucene3xTermVectorsReader extends TermVectorsReader {
     return new Lucene3xTermVectorsReader(fieldInfos, cloneTvx, cloneTvd, cloneTvf, size, numTotalDocs, docStoreOffset, format);
   }
   
-  // note: if there are shared docstores, we are also called by Lucene3xCodec even in 
-  // the CFS case. so logic here must handle this.
-  /*
-  public static void files(SegmentInfo info, Set<String> files) throws IOException {
-    if (info.getDocStoreOffset() != -1) {
-      assert info.getDocStoreSegment() != null;
-      if (info.getDocStoreIsCompoundFile()) {
-        files.add(IndexFileNames.segmentFileName(info.getDocStoreSegment(), "", Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION));
-      } else {
-        files.add(IndexFileNames.segmentFileName(info.getDocStoreSegment(), "", VECTORS_INDEX_EXTENSION));
-        files.add(IndexFileNames.segmentFileName(info.getDocStoreSegment(), "", VECTORS_FIELDS_EXTENSION));
-        files.add(IndexFileNames.segmentFileName(info.getDocStoreSegment(), "", VECTORS_DOCUMENTS_EXTENSION));
-      }
-    } else if (!info.getUseCompoundFile()) {
-      files.add(IndexFileNames.segmentFileName(info.name, "", VECTORS_INDEX_EXTENSION));
-      files.add(IndexFileNames.segmentFileName(info.name, "", VECTORS_FIELDS_EXTENSION));
-      files.add(IndexFileNames.segmentFileName(info.name, "", VECTORS_DOCUMENTS_EXTENSION));
-    }
-  }
-  */
-  
   // If this returns, we do the surrogates shuffle so that the
   // terms are sorted by unicode sort order.  This should be
   // true when segments are used for "normal" searching;
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat.java
index cf5832c..9cac215 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat.java
@@ -116,13 +116,5 @@ public class Lucene40NormsFormat extends NormsFormat {
     protected Type getDocValuesType(FieldInfo info) {
       return info.getNormType();
     }
-    
-    public static void files(SegmentInfo segmentInfo, Set<String> files) throws IOException {
-      final String normsFileName = IndexFileNames.segmentFileName(segmentInfo.name, NORMS_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_EXTENSION);
-      final String normsEntriesFileName = IndexFileNames.segmentFileName(segmentInfo.name, NORMS_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION);
-      files.add(normsFileName);
-      files.add(normsEntriesFileName);
-    }
   }
-
 }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsBaseFormat.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsBaseFormat.java
index c72b6ac..9ca8fd2 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsBaseFormat.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsBaseFormat.java
@@ -49,9 +49,4 @@ public final class Lucene40PostingsBaseFormat extends PostingsBaseFormat {
   public PostingsWriterBase postingsWriterBase(SegmentWriteState state) throws IOException {
     return new Lucene40PostingsWriter(state);
   }
-  
-  @Override
-  public void files(SegmentInfo segmentInfo, String segmentSuffix, Set<String> files) throws IOException {
-    Lucene40PostingsReader.files(segmentInfo, segmentSuffix, files);
-  }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.java
index a88496a..0f4212d 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.java
@@ -81,11 +81,6 @@ public class Lucene40PostingsReader extends PostingsReaderBase {
     }
   }
 
-  public static void files(SegmentInfo segmentInfo, String segmentSuffix, Collection<String> files) throws IOException {
-    files.add(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION));
-    files.add(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION));
-  }
-
   @Override
   public void init(IndexInput termsIn) throws IOException {
 
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer.java b/lucene/core/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer.java
index b26cf16..f824c26 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/sep/SepDocValuesConsumer.java
@@ -49,17 +49,9 @@ public class SepDocValuesConsumer extends DocValuesWriterBase {
     return directory;
   }
 
-  @SuppressWarnings("fallthrough")
-  private static void files(String segmentName, Set<String> files)  {
-    String filename = PerDocProducerBase.docValuesRegex(segmentName);
-    files.add(IndexFileNames.segmentFileName(filename, "", INDEX_EXTENSION));
-    files.add(IndexFileNames.segmentFileName(filename, "", DATA_EXTENSION));
-  }
-
   @Override
   public void abort() {
-    Set<String> files = new HashSet<String>();
-    files(segmentName, files);
-    IOUtils.deleteFilesIgnoringExceptions(directory, SegmentInfo.findMatchingFiles(segmentName, directory, files).toArray(new String[0]));
+    // nocommit must we really delete the files...?  IFD
+    // will do so I think?
   }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java
index 3484e94..c49441a 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java
@@ -90,16 +90,6 @@ public class SepPostingsReader extends PostingsReaderBase {
     }
   }
 
-  public static void files(SegmentInfo segmentInfo, String segmentSuffix, Collection<String> files) throws IOException {
-    files.add(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, SepPostingsWriter.DOC_EXTENSION));
-    files.add(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, SepPostingsWriter.SKIP_EXTENSION));
-
-    files.add(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, SepPostingsWriter.FREQ_EXTENSION));
-
-    files.add(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, SepPostingsWriter.POS_EXTENSION));
-    files.add(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, SepPostingsWriter.PAYLOAD_EXTENSION));
-  }
-
   @Override
   public void init(IndexInput termsIn) throws IOException {
     // Make sure we are talking to the matching past writer
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat.java b/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat.java
index 6e964fb..a2c1c71 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat.java
@@ -123,17 +123,8 @@ public class SimpleTextNormsFormat extends NormsFormat {
     
     @Override
     public void abort() {
-      Set<String> files = new HashSet<String>();
-      filesInternal(state.segmentName, files);
-      IOUtils.deleteFilesIgnoringExceptions(state.directory,
-                                            SegmentInfo.findMatchingFiles(state.segmentName, state.directory, files).toArray(new String[0]));
-    }
-    
-    public static void filesInternal(String segmentName,
-        Set<String> files) {
-      String id = docValuesIdRegexp(segmentName);
-      files.add(IndexFileNames.segmentFileName(id, "",
-                                               NORMS_SEG_SUFFIX));
+      // nocommit must we really delete the files...?  IFD
+      // will do so I think?
     }
   }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer.java b/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer.java
index d677a48..7f31c9c 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer.java
@@ -57,10 +57,8 @@ class SimpleTextPerDocConsumer extends PerDocConsumer {
 
   @Override
   public void abort() {
-    Set<String> files = new HashSet<String>();
-    files(state.directory, state.segmentName, files, segmentSuffix);
-    IOUtils.deleteFilesIgnoringExceptions(state.directory,
-                                          SegmentInfo.findMatchingFiles(state.segmentName, state.directory, files).toArray(new String[0]));
+    // nocommit must we really delete the files...?  IFD
+    // will do so I think?
   }
   
   static String docValuesId(String segmentsName, int fieldId) {
@@ -70,11 +68,4 @@ class SimpleTextPerDocConsumer extends PerDocConsumer {
   static String docValuesIdRegexp(String segmentsName) {
     return segmentsName + "_\\d+";
   }
-
-  @SuppressWarnings("fallthrough")
-  private static void files(Directory dir,
-      String segmentName, Set<String> files, String segmentSuffix) {
-    files.add(IndexFileNames.segmentFileName(docValuesIdRegexp(segmentName), "",
-                                               segmentSuffix));
-  }
-}
\ No newline at end of file
+}
diff --git a/lucene/core/src/java/org/apache/lucene/index/NormsConsumer.java b/lucene/core/src/java/org/apache/lucene/index/NormsConsumer.java
index a266247..43f5566 100644
--- a/lucene/core/src/java/org/apache/lucene/index/NormsConsumer.java
+++ b/lucene/core/src/java/org/apache/lucene/index/NormsConsumer.java
@@ -49,9 +49,6 @@ final class NormsConsumer extends InvertedDocEndConsumer {
     }
   }
 
-  // We only write the _X.nrm file at flush
-  void files(Collection<String> files) {}
-
   /** Produce _X.nrm if any document had a field with norms
    *  not disabled */
   @Override
diff --git a/lucene/core/src/java/org/apache/lucene/index/SegmentInfo.java b/lucene/core/src/java/org/apache/lucene/index/SegmentInfo.java
index ee22c57..78824da 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SegmentInfo.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SegmentInfo.java
@@ -100,8 +100,6 @@ public class SegmentInfo implements Cloneable {
   // The format expected is "x.y" - "2.x" for pre-3.0 indexes (or null), and
   // specific versions afterwards ("3.0", "3.1" etc.).
   // see Constants.LUCENE_MAIN_VERSION.
-  // nocommit why does ctor even take this?  shuldn't we
-  // always be the current version!?
   // nocommit final?
   private String version;
 
@@ -305,53 +303,6 @@ public class SegmentInfo implements Cloneable {
     return codec;
   }
 
-  // noocmmit nuke this and require, once again, that a codec puts PRECISELY the files that exist into the file set...
-  public static List<String> findMatchingFiles(String segmentName, Directory dir, Set<String> namesOrPatterns) {
-    // nocommit need more efficient way to do this?
-    List<String> files = new ArrayList<String>();
-    final String[] existingFiles;
-    try {
-      existingFiles = dir.listAll();
-    } catch (IOException ioe) {
-      // nocommit maybe just throw IOE...? not sure how far up we'd have to change sigs...
-      throw new RuntimeException(ioe);
-    }
-    List<Pattern> compiledPatterns = new ArrayList<Pattern>();
-    for(String nameOrPattern : namesOrPatterns) {
-      boolean exists = false;
-      // nocommit hack -- remove (needed now because si's -1 gen will return null file name):
-      if (nameOrPattern == null) {
-        continue;
-      }
-      try {
-        exists = dir.fileExists(nameOrPattern);
-      } catch (IOException ioe) {
-        // nocommit maybe just throw IOE...?
-        // Ignore
-      }
-      if (exists) {
-        files.add(nameOrPattern);
-      } else {
-        // nocommit can i test whether the regexp matches only 1 string...?  maybe... make into autamaton and union them all....?
-        compiledPatterns.add(Pattern.compile(nameOrPattern));
-      }
-    }
-
-    // nocommit this is DOG SLOW: try TestBoolean2 w/ seed 1F7F3638C719C665
-    for(String file : existingFiles) {
-      if (file.startsWith(segmentName)) {
-        for(Pattern pattern : compiledPatterns) {
-          if (pattern.matcher(file).matches()) {
-            files.add(file);
-            break;
-          }
-        }
-      }
-    }
-
-    return files;
-  }
-
   /*
    * Return all files referenced by this SegmentInfo.  The
    * returns List is a locally cached List so you should not

