GitDiffStart: 8c1725beeea93cf1ebf10694b26fcdb1754cb34c | Mon Mar 30 19:19:17 2009 +0000
diff --git a/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer.java b/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer.java
index 9128d88..fea0bbe 100644
--- a/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer.java
+++ b/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer.java
@@ -600,24 +600,16 @@ public class CommonsHttpSolrServer extends SolrServer
   }
 
   /**
-   * Adds the documents supplied by the given iterator. A commit is called after all the documents are added.
-   * If an exception is thrown, commit is not called.
+   * Adds the documents supplied by the given iterator.
    *
    * @param docIterator  the iterator which returns SolrInputDocument instances
-   * @param commitParams additional parameters such as optimize, waitFlush, waitSearcher
    *
    * @return the response from the SolrServer
    */
-  public UpdateResponse addAndCommit(Iterator<SolrInputDocument> docIterator, SolrParams commitParams)
+  public UpdateResponse add(Iterator<SolrInputDocument> docIterator)
           throws SolrServerException, IOException {
     UpdateRequest req = new UpdateRequest();
-    req.setDocIterator(docIterator);
-    if (commitParams instanceof ModifiableSolrParams) {
-      req.setParams((ModifiableSolrParams) commitParams);
-    } else if (commitParams != null) {
-      req.setParams(new ModifiableSolrParams(commitParams));
-    }
-    req.setParam(UpdateParams.COMMIT, "true");
+    req.setDocIterator(docIterator);    
     return req.process(this);
   }
 }
diff --git a/src/test/org/apache/solr/client/solrj/TestBatchUpdate.java b/src/test/org/apache/solr/client/solrj/TestBatchUpdate.java
index cd22579..781d418 100644
--- a/src/test/org/apache/solr/client/solrj/TestBatchUpdate.java
+++ b/src/test/org/apache/solr/client/solrj/TestBatchUpdate.java
@@ -58,7 +58,7 @@ public class TestBatchUpdate extends SolrExampleTestBase {
   private void doIt(CommonsHttpSolrServer commonsHttpSolrServer) throws SolrServerException, IOException {
     final int[] counter = new int[1];
     counter[0] = 0;
-    commonsHttpSolrServer.addAndCommit(new Iterator<SolrInputDocument>() {
+    commonsHttpSolrServer.add(new Iterator<SolrInputDocument>() {
 
       public boolean hasNext() {
         return counter[0] < numdocs;
@@ -75,16 +75,14 @@ public class TestBatchUpdate extends SolrExampleTestBase {
         //do nothing
 
       }
-    }, null);
+    });
+    commonsHttpSolrServer.commit();
     SolrQuery query = new SolrQuery("*:*");
     QueryResponse response = commonsHttpSolrServer.query(query);
     assertEquals(0, response.getStatus());
     assertEquals(numdocs, response.getResults().getNumFound());
   }
 
-
-
-
   @Override public void setUp() throws Exception
   {
     super.setUp();
@@ -102,7 +100,6 @@ public class TestBatchUpdate extends SolrExampleTestBase {
     jetty.stop();  // stop the server
   }
 
-
   @Override
   protected SolrServer getSolrServer()
   {

