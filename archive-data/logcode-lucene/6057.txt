GitDiffStart: 9c4695bcc1d145bf3f155024692e8a9d27040e96 | Thu Jun 5 12:17:22 2014 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/Direct16.java b/lucene/core/src/java/org/apache/lucene/util/packed/Direct16.java
index 1786f60..cd1d069 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/Direct16.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/Direct16.java
@@ -74,16 +74,6 @@ final class Direct16 extends PackedInts.MutableImpl {
   }
 
   @Override
-  public Object getArray() {
-    return values;
-  }
-
-  @Override
-  public boolean hasArray() {
-    return true;
-  }
-
-  @Override
   public int get(int index, long[] arr, int off, int len) {
     assert len > 0 : "len must be > 0 (got " + len + ")";
     assert index >= 0 && index < valueCount;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/Direct32.java b/lucene/core/src/java/org/apache/lucene/util/packed/Direct32.java
index 6d59e79..27d52c7 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/Direct32.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/Direct32.java
@@ -74,16 +74,6 @@ final class Direct32 extends PackedInts.MutableImpl {
   }
 
   @Override
-  public Object getArray() {
-    return values;
-  }
-
-  @Override
-  public boolean hasArray() {
-    return true;
-  }
-
-  @Override
   public int get(int index, long[] arr, int off, int len) {
     assert len > 0 : "len must be > 0 (got " + len + ")";
     assert index >= 0 && index < valueCount;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/Direct64.java b/lucene/core/src/java/org/apache/lucene/util/packed/Direct64.java
index 59398fe..5a16964 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/Direct64.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/Direct64.java
@@ -69,16 +69,6 @@ final class Direct64 extends PackedInts.MutableImpl {
   }
 
   @Override
-  public Object getArray() {
-    return values;
-  }
-
-  @Override
-  public boolean hasArray() {
-    return true;
-  }
-
-  @Override
   public int get(int index, long[] arr, int off, int len) {
     assert len > 0 : "len must be > 0 (got " + len + ")";
     assert index >= 0 && index < valueCount;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/Direct8.java b/lucene/core/src/java/org/apache/lucene/util/packed/Direct8.java
index 42abe89..e2518e5 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/Direct8.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/Direct8.java
@@ -72,16 +72,6 @@ final class Direct8 extends PackedInts.MutableImpl {
   }
 
   @Override
-  public Object getArray() {
-    return values;
-  }
-
-  @Override
-  public boolean hasArray() {
-    return true;
-  }
-
-  @Override
   public int get(int index, long[] arr, int off, int len) {
     assert len > 0 : "len must be > 0 (got " + len + ")";
     assert index >= 0 && index < valueCount;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/DirectPacked64SingleBlockReader.java b/lucene/core/src/java/org/apache/lucene/util/packed/DirectPacked64SingleBlockReader.java
index ce93592..dac9b02 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/DirectPacked64SingleBlockReader.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/DirectPacked64SingleBlockReader.java
@@ -24,14 +24,16 @@ import org.apache.lucene.store.IndexInput;
 final class DirectPacked64SingleBlockReader extends PackedInts.ReaderImpl {
 
   private final IndexInput in;
+  private final int bitsPerValue;
   private final long startPointer;
   private final int valuesPerBlock;
   private final long mask;
 
   DirectPacked64SingleBlockReader(int bitsPerValue, int valueCount,
       IndexInput in) {
-    super(valueCount, bitsPerValue);
+    super(valueCount);
     this.in = in;
+    this.bitsPerValue = bitsPerValue;
     startPointer = in.getFilePointer();
     valuesPerBlock = 64 / bitsPerValue;
     mask = ~(~0L << bitsPerValue);
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader.java b/lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader.java
index da0f70b..c6e315d 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader.java
@@ -25,12 +25,14 @@ import java.io.IOException;
 // just for back compat, use DirectReader/DirectWriter for more efficient impl
 class DirectPackedReader extends PackedInts.ReaderImpl {
   final IndexInput in;
+  final int bitsPerValue;
   final long startPointer;
   final long valueMask;
 
   DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in) {
-    super(valueCount, bitsPerValue);
+    super(valueCount);
     this.in = in;
+    this.bitsPerValue = bitsPerValue;
 
     startPointer = in.getFilePointer();
     if (bitsPerValue == 64) {
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter.java b/lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter.java
index 94833e6..1e6b552 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter.java
@@ -70,16 +70,6 @@ public class GrowableWriter extends PackedInts.Mutable {
     return current;
   }
 
-  @Override
-  public Object getArray() {
-    return current.getArray();
-  }
-
-  @Override
-  public boolean hasArray() {
-    return current.hasArray();
-  }
-
   private void ensureCapacity(long value) {
     if ((value & currentMask) == value) {
       return;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java b/lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java
index 18f6584..86cc5ea 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.java
@@ -473,42 +473,10 @@ public class PackedInts {
     }
 
     /**
-     * @return the number of bits used to store any given value.
-     *         Note: This does not imply that memory usage is
-     *         {@code bitsPerValue * #values} as implementations are free to
-     *         use non-space-optimal packing of bits.
-     */
-    public abstract int getBitsPerValue();
-
-    /**
      * @return the number of values.
      */
     public abstract int size();
 
-    /**
-     * Expert: if the bit-width of this reader matches one of
-     * java's native types, returns the underlying array
-     * (ie, byte[], short[], int[], long[]); else, returns
-     * null.  Note that when accessing the array you must
-     * upgrade the type (bitwise AND with all ones), to
-     * interpret the full value as unsigned.  Ie,
-     * bytes[idx]&0xFF, shorts[idx]&0xFFFF, etc.
-     */
-    public Object getArray() {
-      assert !hasArray();
-      return null;
-    }
-
-    /**
-     * Returns true if this implementation is backed by a
-     * native java array.
-     *
-     * @see #getArray
-     */
-    public boolean hasArray() {
-      return false;
-    }
-
   }
 
   /**
@@ -568,6 +536,14 @@ public class PackedInts {
   public static abstract class Mutable extends Reader {
 
     /**
+     * @return the number of bits used to store any given value.
+     *         Note: This does not imply that memory usage is
+     *         {@code bitsPerValue * #values} as implementations are free to
+     *         use non-space-optimal packing of bits.
+     */
+    public abstract int getBitsPerValue();
+
+    /**
      * Set the value at the given index in the array.
      * @param index where the value should be positioned.
      * @param value a value conforming to the constraints set by the array.
@@ -637,12 +613,9 @@ public class PackedInts {
    * @lucene.internal
    */
   static abstract class ReaderImpl extends Reader {
-    protected final int bitsPerValue;
     protected final int valueCount;
 
-    protected ReaderImpl(int valueCount, int bitsPerValue) {
-      this.bitsPerValue = bitsPerValue;
-      assert bitsPerValue > 0 && bitsPerValue <= 64 : "bitsPerValue=" + bitsPerValue;
+    protected ReaderImpl(int valueCount) {
       this.valueCount = valueCount;
     }
 
@@ -650,11 +623,6 @@ public class PackedInts {
     public abstract long get(int index);
 
     @Override
-    public final int getBitsPerValue() {
-      return bitsPerValue;
-    }
-
-    @Override
     public final int size() {
       return valueCount;
     }
@@ -709,11 +677,6 @@ public class PackedInts {
     }
 
     @Override
-    public int getBitsPerValue() {
-      return 0;
-    }
-
-    @Override
     public int size() {
       return valueCount;
     }
diff --git a/lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts.java b/lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts.java
index db9e917..3c4348d 100644
--- a/lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts.java
+++ b/lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts.java
@@ -823,7 +823,6 @@ public class TestPackedInts extends LuceneTestCase {
 
         IndexInput in = directory.openInput("packed-ints.bin", IOContext.DEFAULT);
         PackedInts.Reader reader = PackedInts.getReader(in);
-        assertEquals(mutable.getBitsPerValue(), reader.getBitsPerValue());
         assertEquals(valueCount, reader.size());
         if (mutable instanceof Packed64SingleBlock) {
           // make sure that we used the right format so that the reader has

