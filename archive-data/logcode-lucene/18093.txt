GitDiffStart: ba9876c4f5f40acecc85b0bce099e496feacb1ac | Tue Apr 6 20:58:22 2010 +0000
diff --git a/lucene/src/java/org/apache/lucene/util/packed/Packed32.java b/lucene/src/java/org/apache/lucene/util/packed/Packed32.java
index 2979786..a7289a6 100644
--- a/lucene/src/java/org/apache/lucene/util/packed/Packed32.java
+++ b/lucene/src/java/org/apache/lucene/util/packed/Packed32.java
@@ -88,9 +88,14 @@ class Packed32 extends PackedInts.ReaderImpl implements PackedInts.Mutable {
         currentMasks[base  ] =~((elementPosMask
                 << currentShifts[base + 1])
                 >>> currentShifts[base]);
-        currentMasks[base+1] = ~(elementPosMask
-                << currentShifts[base + 2]);
-        currentMasks[base+2] = currentShifts[base + 2] == 0 ? 0 : ~0;
+        if (bitPos <= BLOCK_SIZE - elementBits) { // Second block not used
+          currentMasks[base+1] = ~0; // Keep all bits
+          currentMasks[base+2] = 0;  // Or with 0
+        } else {
+          currentMasks[base+1] = ~(elementPosMask
+                                   << currentShifts[base + 2]);
+          currentMasks[base+2] = currentShifts[base + 2] == 0 ? 0 : ~0;
+        }
       }
     }
   }
diff --git a/lucene/src/java/org/apache/lucene/util/packed/Packed64.java b/lucene/src/java/org/apache/lucene/util/packed/Packed64.java
index 9cdde87..b7c487a 100644
--- a/lucene/src/java/org/apache/lucene/util/packed/Packed64.java
+++ b/lucene/src/java/org/apache/lucene/util/packed/Packed64.java
@@ -89,9 +89,14 @@ class Packed64 extends PackedInts.ReaderImpl implements PackedInts.Mutable {
               currentMasks[base  ] =~((elementPosMask
                                  << currentShifts[base + 1])
                                 >>> currentShifts[base]);
-              currentMasks[base+1] = ~(elementPosMask
-                                 << currentShifts[base + 2]);
-              currentMasks[base+2] = currentShifts[base + 2] == 0 ? 0 : ~0;
+              if (bitPos <= BLOCK_SIZE - elementBits) { // Second block not used
+                currentMasks[base+1] = ~0; // Keep all bits
+                currentMasks[base+2] = 0;  // Or with 0
+              } else {
+                currentMasks[base+1] = ~(elementPosMask
+                                         << currentShifts[base + 2]);
+                currentMasks[base+2] = currentShifts[base + 2] == 0 ? 0 : ~0;
+              }
           }
       }
   }
diff --git a/lucene/src/test/org/apache/lucene/util/packed/TestPackedInts.java b/lucene/src/test/org/apache/lucene/util/packed/TestPackedInts.java
index 27898f6..0cf7a72 100644
--- a/lucene/src/test/org/apache/lucene/util/packed/TestPackedInts.java
+++ b/lucene/src/test/org/apache/lucene/util/packed/TestPackedInts.java
@@ -216,10 +216,18 @@ public class TestPackedInts extends LuceneTestCase {
     out.close();
 
     IndexInput in = dir.openInput("out");
-    PackedInts.Reader r = PackedInts.getReader(in);
+    PackedInts.getReader(in);
     assertEquals(end, in.getFilePointer());
     in.close();
 
     dir.close();
   }
+
+  public void testSecondaryBlockChange() throws IOException {
+    PackedInts.Mutable mutable = new Packed64(26, 5);
+    mutable.set(24, 31);
+    assertEquals("The value #24 should be correct", 31, mutable.get(24));
+    mutable.set(4, 16);
+    assertEquals("The value #24 should remain unchanged", 31, mutable.get(24));
+  }
 }

