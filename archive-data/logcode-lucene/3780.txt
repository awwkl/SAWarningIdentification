GitDiffStart: 09ddb7d91248c4732f8533082f0c0c7ded21db34 | Fri Apr 10 20:04:22 2015 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 108e1f0..53e9a50 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -92,6 +92,9 @@ Other
   when resolving deleted terms to matched docids. (Robert Muir, Adrien
   Grand, Mike McCandless)
 
+* LUCENE-6399: Benchmark module's QueryMaker.resetInputs should call setConfig
+  so queries can react to property changes in new rounds. (David Smiley)
+
 ======================= Lucene 5.1.0 =======================
 
 New Features
diff --git a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
index b6e4324..0202ff6 100644
--- a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
+++ b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
@@ -421,7 +421,13 @@ public class PerfRunData implements Closeable {
     docMaker.resetInputs();
     facetSource.resetInputs();
     for (final QueryMaker queryMaker : readTaskQueryMaker.values()) {
-      queryMaker.resetInputs();
+      try {
+        queryMaker.resetInputs();
+      } catch (IOException e) {
+        throw e;
+      } catch (Exception e) {
+        throw new RuntimeException(e);
+      }
     }
   }
 
diff --git a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/AbstractQueryMaker.java b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/AbstractQueryMaker.java
index eb356a8..19dd92f 100644
--- a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/AbstractQueryMaker.java
+++ b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/AbstractQueryMaker.java
@@ -15,8 +15,8 @@ package org.apache.lucene.benchmark.byTask.feeds;
  * limitations under the License.
  */
 
-import org.apache.lucene.search.Query;
 import org.apache.lucene.benchmark.byTask.utils.Config;
+import org.apache.lucene.search.Query;
 
 /**
  * Abstract base query maker. 
@@ -29,8 +29,10 @@ public abstract class AbstractQueryMaker implements QueryMaker {
   protected Config config;
 
   @Override
-  public void resetInputs() {
+  public void resetInputs() throws Exception {
     qnum = 0;
+    // re-initialize since properties by round may have changed.
+    setConfig(config);
   }
 
   protected abstract Query[] prepareQueries() throws Exception;
diff --git a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/QueryMaker.java b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/QueryMaker.java
index f4b4668..cf37ea6 100644
--- a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/QueryMaker.java
+++ b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/QueryMaker.java
@@ -18,8 +18,8 @@ package org.apache.lucene.benchmark.byTask.feeds;
  */
 
 
-import org.apache.lucene.search.Query;
 import org.apache.lucene.benchmark.byTask.utils.Config;
+import org.apache.lucene.search.Query;
 
 
 /**
@@ -41,7 +41,7 @@ public interface QueryMaker {
   public void setConfig (Config config) throws Exception;
   
   /** Reset inputs so that the test run would behave, input wise, as if it just started. */
-  public void resetInputs();
+  public void resetInputs() throws Exception;
   
   /** Print the queries */
   public String printQueries();

