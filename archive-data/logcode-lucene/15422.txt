GitDiffStart: bd4a05c8cda8f86af063b544fa909f6d5784588e | Fri Jun 24 23:40:30 2011 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 6664b82..f0cfdb0 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -503,6 +503,13 @@ Changes in backwards compatibility policy
   overridden one of these methods, cut over to the non-deprecated
   implementation. (Uwe Schindler, Robert Muir, Yonik Seeley)
 
+* LUCENE-3238: Made MultiTermQuery.rewrite() final, to prevent
+  problems (such as not properly setting rewrite methods, or 
+  not working correctly with things like SpanMultiTermQueryWrapper).
+  To rewrite to a simpler form, instead return a simpler enum
+  from getEnum(IndexReader). For example, to rewrite to a single term, 
+  return a SingleTermEnum.  (ludovic Boutros, Uwe Schindler, Robert Muir)
+
 Changes in runtime behavior
 
 * LUCENE-2834: the hash used to compute the lock file name when the
@@ -555,6 +562,10 @@ Bug fixes
   failing to measure the space required to hold the term's field and
   text character data.  (Mike McCandless)
 
+* LUCENE-3238: Fixed bug where using WildcardQuery("prefix*") inside
+  of a SpanMultiTermQueryWrapper rewrote incorrectly and returned
+  an error instead.  (ludovic Boutros, Uwe Schindler, Robert Muir)
+
 API Changes
 
 * LUCENE-3208: Renamed protected IndexSearcher.createWeight() to expert
diff --git a/lucene/src/java/org/apache/lucene/search/MultiTermQuery.java b/lucene/src/java/org/apache/lucene/search/MultiTermQuery.java
index 363922a..3c8c267 100644
--- a/lucene/src/java/org/apache/lucene/search/MultiTermQuery.java
+++ b/lucene/src/java/org/apache/lucene/search/MultiTermQuery.java
@@ -301,8 +301,13 @@ public abstract class MultiTermQuery extends Query {
     numberOfTerms += inc;
   }
 
+  /**
+   * To rewrite to a simpler form, instead return a simpler
+   * enum from {@link #getTermsEnum(Terms, AttributeSource)}.  For example,
+   * to rewrite to a single term, return a {@link SingleTermsEnum}
+   */
   @Override
-  public Query rewrite(IndexReader reader) throws IOException {
+  public final Query rewrite(IndexReader reader) throws IOException {
     return rewriteMethod.rewrite(reader, this);
   }
 
diff --git a/lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java b/lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java
index 51ae833..7c72eb2 100644
--- a/lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java
+++ b/lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper.java
@@ -72,6 +72,14 @@ public class TestSpanMultiTermQueryWrapper extends LuceneTestCase {
     assertEquals(1, searcher.search(sfq, 10).totalHits);
   }
   
+  public void testPrefix() throws Exception {
+    WildcardQuery wq = new WildcardQuery(new Term("field", "extrem*"));
+    SpanQuery swq = new SpanMultiTermQueryWrapper<WildcardQuery>(wq);
+    // will only match "jumps over extremely very lazy broxn dog"
+    SpanFirstQuery sfq = new SpanFirstQuery(swq, 3);
+    assertEquals(1, searcher.search(sfq, 10).totalHits);
+  }
+  
   public void testFuzzy() throws Exception {
     FuzzyQuery fq = new FuzzyQuery(new Term("field", "broan"));
     SpanQuery sfq = new SpanMultiTermQueryWrapper<FuzzyQuery>(fq);

