GitDiffStart: 5e84093ab0f5cc3af7257ea0511c92a8f218d392 | Mon Jun 15 11:55:45 2015 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 463bf56..9740fd8 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -122,6 +122,8 @@ New Features
     authors:{ type:terms, field:author, domain:{toParent:"type:book"} }
   (yonik)
 
+* SOLR-7668: Add 'port' tag support in replica placement rules (Adam McElwee, Noble Paul)
+
 
 Bug Fixes
 ----------------------
diff --git a/solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch.java b/solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch.java
index 88972f4..95f5d3c 100644
--- a/solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch.java
+++ b/solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch.java
@@ -24,6 +24,8 @@ import java.nio.file.Paths;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 import com.google.common.collect.ImmutableSet;
 import org.apache.solr.common.params.ModifiableSolrParams;
@@ -36,6 +38,8 @@ import org.slf4j.LoggerFactory;
 public class ImplicitSnitch extends Snitch implements CoreAdminHandler.Invocable {
   static final Logger log = LoggerFactory.getLogger(ImplicitSnitch.class);
 
+  public static final Pattern hostAndPortPattern = Pattern.compile("(?:https?://)?([^:]+):(\\d+)");
+
   //well known tags
   public static final String NODE = "node";
   public static final String PORT = "port";
@@ -50,7 +54,14 @@ public class ImplicitSnitch extends Snitch implements CoreAdminHandler.Invocable
   @Override
   public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {
     if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);
-    if (requestedTags.contains(HOST)) ctx.getTags().put(HOST, solrNode.substring(0, solrNode.indexOf(':')));
+    if (requestedTags.contains(HOST)) {
+      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);
+      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));
+    }
+    if (requestedTags.contains(PORT)) {
+      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);
+      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));
+    }
     ModifiableSolrParams params = new ModifiableSolrParams();
     if (requestedTags.contains(CORES)) params.add(CORES, "1");
     if (requestedTags.contains(DISK)) params.add(DISK, "1");
diff --git a/solr/core/src/test/org/apache/solr/cloud/rule/RulesTest.java b/solr/core/src/test/org/apache/solr/cloud/rule/RulesTest.java
index a37960e..875f8d2 100644
--- a/solr/core/src/test/org/apache/solr/cloud/rule/RulesTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/rule/RulesTest.java
@@ -19,20 +19,19 @@ package org.apache.solr.cloud.rule;
 
 import java.util.List;
 import java.util.Map;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 import org.apache.solr.client.solrj.SolrClient;
-import org.apache.solr.client.solrj.SolrRequest;
 import org.apache.solr.client.solrj.impl.HttpSolrClient;
 import org.apache.solr.client.solrj.request.CollectionAdminRequest;
 import org.apache.solr.client.solrj.request.GenericSolrRequest;
 import org.apache.solr.client.solrj.response.CollectionAdminResponse;
 import org.apache.solr.cloud.AbstractFullDistribZkTestBase;
-import org.apache.solr.cloud.OverseerCollectionProcessor;
 import org.apache.solr.common.cloud.DocCollection;
 import org.apache.solr.common.cloud.ImplicitDocRouter;
 import org.apache.solr.common.cloud.ZkStateReader;
 import org.apache.solr.common.params.ModifiableSolrParams;
-import org.apache.solr.core.CoreContainer;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -84,7 +83,7 @@ public class RulesTest extends AbstractFullDistribZkTestBase {
       CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()
               .setCollectionName(rulesColl)
               .setShardName("shard2");
-      rsp = createShard.process(client);
+      rsp = addReplica.process(client);
       assertEquals(0, rsp.getStatus());
       assertTrue(rsp.isSuccess());
     }
@@ -93,6 +92,39 @@ public class RulesTest extends AbstractFullDistribZkTestBase {
   }
 
   @Test
+  public void testPortRule() throws Exception {
+    String rulesColl = "portRuleColl";
+    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));
+    String port = "-1";
+    Matcher hostAndPortMatcher = Pattern.compile("(?:https?://)?([^:]+):(\\d+)").matcher(baseUrl);
+    if (hostAndPortMatcher.find()) {
+      port = hostAndPortMatcher.group(2);
+    }
+    try (SolrClient client = createNewSolrClient("", baseUrl)) {
+      CollectionAdminResponse rsp;
+      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();
+      create.setCollectionName(rulesColl);
+      create.setShards("shard1");
+      create.setRouterName(ImplicitDocRouter.NAME);
+      create.setReplicationFactor(2);
+      create.setRule("port:" + port);
+      create.setSnitch("class:ImplicitSnitch");
+      rsp = create.process(client);
+      assertEquals(0, rsp.getStatus());
+      assertTrue(rsp.isSuccess());
+
+    }
+
+    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);
+    List list = (List) rulesCollection.get("rule");
+    assertEquals(1, list.size());
+    assertEquals(port, ((Map) list.get(0)).get("port"));
+    list = (List) rulesCollection.get("snitch");
+    assertEquals(1, list.size());
+    assertEquals ( "ImplicitSnitch", ((Map)list.get(0)).get("class"));
+  }
+
+  @Test
   public void testModifyColl() throws Exception {
     String rulesColl = "modifyColl";
     try (SolrClient client = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)))) {
@@ -138,7 +170,4 @@ public class RulesTest extends AbstractFullDistribZkTestBase {
       assertEquals("ImplicitSnitch", ((Map) list.get(0)).get("class"));
     }
   }
-
-
-
 }

