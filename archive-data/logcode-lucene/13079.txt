GitDiffStart: c6a8b487e500b9afdaa8bba769b10a231e21df8e | Mon Mar 26 16:08:37 2012 +0000
diff --git a/solr/core/src/test/org/apache/solr/analysis/TestJapaneseBaseFormFilterFactory.java b/solr/core/src/test/org/apache/solr/analysis/TestJapaneseBaseFormFilterFactory.java
new file mode 100644
index 0000000..4a5d034
--- /dev/null
+++ b/solr/core/src/test/org/apache/solr/analysis/TestJapaneseBaseFormFilterFactory.java
@@ -0,0 +1,41 @@
+package org.apache.solr.analysis;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.io.StringReader;
+
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.solr.core.SolrResourceLoader;
+
+/**
+ * Simple tests for {@link JapaneseBaseFormFilterFactory}
+ */
+public class TestJapaneseBaseFormFilterFactory extends BaseTokenTestCase {
+  public void testBasics() throws IOException {
+    JapaneseTokenizerFactory tokenizerFactory = new JapaneseTokenizerFactory();
+    tokenizerFactory.init(DEFAULT_VERSION_PARAM);
+    tokenizerFactory.inform(new SolrResourceLoader(null, null));
+    TokenStream ts = tokenizerFactory.create(new StringReader("?????????é¨?????????¾ã?"));
+    JapaneseBaseFormFilterFactory factory = new JapaneseBaseFormFilterFactory();
+    ts = factory.create(ts);
+    assertTokenStreamContents(ts,
+        new String[] { "???", "??", "?¾ã?", "å®??", "æ®µé?", "??", "???", "?¾ã?"  }
+    );
+  }
+}
diff --git a/solr/core/src/test/org/apache/solr/analysis/TestJapanesePartOfSpeechStopFilterFactory.java b/solr/core/src/test/org/apache/solr/analysis/TestJapanesePartOfSpeechStopFilterFactory.java
new file mode 100644
index 0000000..2c908de
--- /dev/null
+++ b/solr/core/src/test/org/apache/solr/analysis/TestJapanesePartOfSpeechStopFilterFactory.java
@@ -0,0 +1,52 @@
+package org.apache.solr.analysis;
+
+import java.io.IOException;
+import java.io.StringReader;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.solr.core.SolrResourceLoader;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Simple tests for {@link JapanesePartOfSpeechStopFilterFactory}
+ */
+public class TestJapanesePartOfSpeechStopFilterFactory extends BaseTokenTestCase {
+  public void testBasics() throws IOException {
+    String tags = 
+        "#  verb-main:\n" +
+        "???-???\n";
+    
+    JapaneseTokenizerFactory tokenizerFactory = new JapaneseTokenizerFactory();
+    tokenizerFactory.init(DEFAULT_VERSION_PARAM);
+    tokenizerFactory.inform(new SolrResourceLoader(null, null));
+    TokenStream ts = tokenizerFactory.create(new StringReader("ç§???¶é??¹ã??¼ã?????????"));
+    JapanesePartOfSpeechStopFilterFactory factory = new JapanesePartOfSpeechStopFilterFactory();
+    Map<String,String> args = new HashMap<String,String>();
+    args.put("luceneMatchVersion", TEST_VERSION_CURRENT.toString());
+    args.put("tags", "stoptags.txt");
+    factory.init(args);
+    factory.inform(new StringMockSolrResourceLoader(tags));
+    ts = factory.create(ts);
+    assertTokenStreamContents(ts,
+        new String[] { "ç§?", "??", "?¶é?", "?¹ã??¼ã?", "??" }
+    );
+  }
+}
diff --git a/solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory.java b/solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory.java
new file mode 100644
index 0000000..47d5f6a
--- /dev/null
+++ b/solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory.java
@@ -0,0 +1,89 @@
+package org.apache.solr.analysis;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.io.StringReader;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.solr.core.SolrResourceLoader;
+
+/**
+ * Simple tests for {@link JapaneseTokenizerFactory}
+ */
+public class TestJapaneseTokenizerFactory extends BaseTokenTestCase {
+  public void testSimple() throws IOException {
+    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();
+    factory.init(DEFAULT_VERSION_PARAM);
+    factory.inform(new SolrResourceLoader(null, null));
+    TokenStream ts = factory.create(new StringReader("???????§ã????"));
+    assertTokenStreamContents(ts,
+        new String[] { "???", "??", "??", "??", "??", "???" },
+        new int[] { 0, 2, 3, 4, 5, 6 },
+        new int[] { 2, 3, 4, 5, 6, 8 }
+    );
+  }
+  
+  /**
+   * Test that search mode is enabled and working by default
+   */
+  public void testDefaults() throws IOException {
+    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();
+    factory.init(DEFAULT_VERSION_PARAM);
+    factory.inform(new SolrResourceLoader(null, null));
+    TokenStream ts = factory.create(new StringReader("?·ã??????????????³ã????"));
+    assertTokenStreamContents(ts,
+                              new String[] { "?·ã???", "?·ã??????????????³ã????", "?½ã?????§ã?", "?¨ã??¸ã???" }
+    );
+  }
+  
+  /**
+   * Test mode parameter: specifying normal mode
+   */
+  public void testMode() throws IOException {
+    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();
+    Map<String,String> args = new HashMap<String,String>();
+    args.put("mode", "normal");
+    factory.init(args);
+    factory.inform(new SolrResourceLoader(null, null));
+    TokenStream ts = factory.create(new StringReader("?·ã??????????????³ã????"));
+    assertTokenStreamContents(ts,
+        new String[] { "?·ã??????????????³ã????" }
+    );
+  }
+  
+  public void testUserDict() throws IOException {
+    String userDict = 
+        "# Custom segmentation for long entries\n" +
+        "?¥æ?çµ???°è?,?¥æ? çµ?? ?°è?,????? ?±ã??¶ã? ?·ã????,????¿ã????\n" +
+        "?¢è¥¿?½é?ç©ºæ¸¯,?¢è¥¿ ?½é? ç©ºæ¸¯,????µã? ?³ã??µã? ????³ã?,??????è©?n" +
+        "# Custom reading for sumo wrestler\n" +
+        "???é¾?,???é¾?,????·ã?????¥ã?,????¿ã?äººå?\n";
+    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();
+    Map<String,String> args = new HashMap<String,String>();
+    args.put("user-dictionary", "userdict.txt");
+    factory.init(args);
+    factory.inform(new StringMockSolrResourceLoader(userDict));
+    TokenStream ts = factory.create(new StringReader("?¢è¥¿?½é?ç©ºæ¸¯????£ã?"));
+    assertTokenStreamContents(ts,
+        new String[] { "?¢è¥¿", "?½é?", "ç©ºæ¸¯", "??",  "è¡??",  "??" }
+    );
+  }
+}
diff --git a/solr/core/src/test/org/apache/solr/analysis/TestKuromojiBaseFormFilterFactory.java b/solr/core/src/test/org/apache/solr/analysis/TestKuromojiBaseFormFilterFactory.java
deleted file mode 100644
index 0489921..0000000
--- a/solr/core/src/test/org/apache/solr/analysis/TestKuromojiBaseFormFilterFactory.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package org.apache.solr.analysis;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-import java.io.StringReader;
-
-import org.apache.lucene.analysis.TokenStream;
-import org.apache.solr.core.SolrResourceLoader;
-
-/**
- * Simple tests for {@link JapaneseBaseFormFilterFactory}
- */
-public class TestKuromojiBaseFormFilterFactory extends BaseTokenTestCase {
-  public void testBasics() throws IOException {
-    JapaneseTokenizerFactory tokenizerFactory = new JapaneseTokenizerFactory();
-    tokenizerFactory.init(DEFAULT_VERSION_PARAM);
-    tokenizerFactory.inform(new SolrResourceLoader(null, null));
-    TokenStream ts = tokenizerFactory.create(new StringReader("?????????é¨?????????¾ã?"));
-    JapaneseBaseFormFilterFactory factory = new JapaneseBaseFormFilterFactory();
-    ts = factory.create(ts);
-    assertTokenStreamContents(ts,
-        new String[] { "???", "??", "?¾ã?", "å®??", "æ®µé?", "??", "???", "?¾ã?"  }
-    );
-  }
-}
diff --git a/solr/core/src/test/org/apache/solr/analysis/TestKuromojiPartOfSpeechStopFilterFactory.java b/solr/core/src/test/org/apache/solr/analysis/TestKuromojiPartOfSpeechStopFilterFactory.java
deleted file mode 100644
index 016c08a..0000000
--- a/solr/core/src/test/org/apache/solr/analysis/TestKuromojiPartOfSpeechStopFilterFactory.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package org.apache.solr.analysis;
-
-import java.io.IOException;
-import java.io.StringReader;
-import java.util.HashMap;
-import java.util.Map;
-
-import org.apache.lucene.analysis.TokenStream;
-import org.apache.solr.core.SolrResourceLoader;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Simple tests for {@link KuromojiPartOfSpeechStopFilter}
- */
-public class TestKuromojiPartOfSpeechStopFilterFactory extends BaseTokenTestCase {
-  public void testBasics() throws IOException {
-    String tags = 
-        "#  verb-main:\n" +
-        "???-???\n";
-    
-    JapaneseTokenizerFactory tokenizerFactory = new JapaneseTokenizerFactory();
-    tokenizerFactory.init(DEFAULT_VERSION_PARAM);
-    tokenizerFactory.inform(new SolrResourceLoader(null, null));
-    TokenStream ts = tokenizerFactory.create(new StringReader("ç§???¶é??¹ã??¼ã?????????"));
-    JapanesePartOfSpeechStopFilterFactory factory = new JapanesePartOfSpeechStopFilterFactory();
-    Map<String,String> args = new HashMap<String,String>();
-    args.put("luceneMatchVersion", TEST_VERSION_CURRENT.toString());
-    args.put("tags", "stoptags.txt");
-    factory.init(args);
-    factory.inform(new StringMockSolrResourceLoader(tags));
-    ts = factory.create(ts);
-    assertTokenStreamContents(ts,
-        new String[] { "ç§?", "??", "?¶é?", "?¹ã??¼ã?", "??" }
-    );
-  }
-}
diff --git a/solr/core/src/test/org/apache/solr/analysis/TestKuromojiTokenizerFactory.java b/solr/core/src/test/org/apache/solr/analysis/TestKuromojiTokenizerFactory.java
deleted file mode 100644
index a55e3fe..0000000
--- a/solr/core/src/test/org/apache/solr/analysis/TestKuromojiTokenizerFactory.java
+++ /dev/null
@@ -1,89 +0,0 @@
-package org.apache.solr.analysis;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-import java.io.StringReader;
-import java.util.HashMap;
-import java.util.Map;
-
-import org.apache.lucene.analysis.TokenStream;
-import org.apache.solr.core.SolrResourceLoader;
-
-/**
- * Simple tests for {@link JapaneseTokenizerFactory}
- */
-public class TestKuromojiTokenizerFactory extends BaseTokenTestCase {
-  public void testSimple() throws IOException {
-    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();
-    factory.init(DEFAULT_VERSION_PARAM);
-    factory.inform(new SolrResourceLoader(null, null));
-    TokenStream ts = factory.create(new StringReader("???????§ã????"));
-    assertTokenStreamContents(ts,
-        new String[] { "???", "??", "??", "??", "??", "???" },
-        new int[] { 0, 2, 3, 4, 5, 6 },
-        new int[] { 2, 3, 4, 5, 6, 8 }
-    );
-  }
-  
-  /**
-   * Test that search mode is enabled and working by default
-   */
-  public void testDefaults() throws IOException {
-    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();
-    factory.init(DEFAULT_VERSION_PARAM);
-    factory.inform(new SolrResourceLoader(null, null));
-    TokenStream ts = factory.create(new StringReader("?·ã??????????????³ã????"));
-    assertTokenStreamContents(ts,
-                              new String[] { "?·ã???", "?·ã??????????????³ã????", "?½ã?????§ã?", "?¨ã??¸ã???" }
-    );
-  }
-  
-  /**
-   * Test mode parameter: specifying normal mode
-   */
-  public void testMode() throws IOException {
-    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();
-    Map<String,String> args = new HashMap<String,String>();
-    args.put("mode", "normal");
-    factory.init(args);
-    factory.inform(new SolrResourceLoader(null, null));
-    TokenStream ts = factory.create(new StringReader("?·ã??????????????³ã????"));
-    assertTokenStreamContents(ts,
-        new String[] { "?·ã??????????????³ã????" }
-    );
-  }
-  
-  public void testUserDict() throws IOException {
-    String userDict = 
-        "# Custom segmentation for long entries\n" +
-        "?¥æ?çµ???°è?,?¥æ? çµ?? ?°è?,????? ?±ã??¶ã? ?·ã????,????¿ã????\n" +
-        "?¢è¥¿?½é?ç©ºæ¸¯,?¢è¥¿ ?½é? ç©ºæ¸¯,????µã? ?³ã??µã? ????³ã?,??????è©?n" +
-        "# Custom reading for sumo wrestler\n" +
-        "???é¾?,???é¾?,????·ã?????¥ã?,????¿ã?äººå?\n";
-    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();
-    Map<String,String> args = new HashMap<String,String>();
-    args.put("user-dictionary", "userdict.txt");
-    factory.init(args);
-    factory.inform(new StringMockSolrResourceLoader(userDict));
-    TokenStream ts = factory.create(new StringReader("?¢è¥¿?½é?ç©ºæ¸¯????£ã?"));
-    assertTokenStreamContents(ts,
-        new String[] { "?¢è¥¿", "?½é?", "ç©ºæ¸¯", "??",  "è¡??",  "??" }
-    );
-  }
-}

