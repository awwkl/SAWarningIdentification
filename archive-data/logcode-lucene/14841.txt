GitDiffStart: 4f553352d167cd97d1e271264aa0c2001b88108d | Fri Sep 16 10:23:38 2011 +0000
diff --git a/lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum.java b/lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum.java
index f299ff7..56caec6 100644
--- a/lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum.java
+++ b/lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum.java
@@ -21,7 +21,7 @@ import java.io.IOException;
 import java.text.Collator;
 
 import org.apache.lucene.index.TermsEnum;
-import org.apache.lucene.search.FilteredTermsEnum;
+import org.apache.lucene.index.FilteredTermsEnum;
 import org.apache.lucene.util.BytesRef;
 
 /**
diff --git a/lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQuery.java b/lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQuery.java
index 4770694..aeb71d1 100644
--- a/lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQuery.java
+++ b/lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexQuery.java
@@ -18,7 +18,7 @@ package org.apache.lucene.sandbox.queries.regex;
  */
 
 import org.apache.lucene.search.MultiTermQuery;
-import org.apache.lucene.search.FilteredTermsEnum;
+import org.apache.lucene.index.FilteredTermsEnum;
 import org.apache.lucene.search.RegexpQuery; // javadoc
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.Terms;
diff --git a/lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexTermsEnum.java b/lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexTermsEnum.java
index e67f94d..870ccec 100644
--- a/lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexTermsEnum.java
+++ b/lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/regex/RegexTermsEnum.java
@@ -17,7 +17,7 @@ package org.apache.lucene.sandbox.queries.regex;
  * limitations under the License.
  */
 
-import org.apache.lucene.search.FilteredTermsEnum;
+import org.apache.lucene.index.FilteredTermsEnum;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.util.BytesRef;
diff --git a/lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum.java b/lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum.java
index 9bd0554..a9d103d 100644
--- a/lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum.java
+++ b/lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum.java
@@ -20,7 +20,6 @@ package org.apache.lucene.index;
 import java.io.IOException;
 import java.util.Comparator;
 
-import org.apache.lucene.search.FilteredTermsEnum;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.IntsRef;
 import org.apache.lucene.util.automaton.ByteRunAutomaton;
diff --git a/lucene/src/java/org/apache/lucene/index/FilteredTermsEnum.java b/lucene/src/java/org/apache/lucene/index/FilteredTermsEnum.java
new file mode 100644
index 0000000..3ef49cb
--- /dev/null
+++ b/lucene/src/java/org/apache/lucene/index/FilteredTermsEnum.java
@@ -0,0 +1,242 @@
+package org.apache.lucene.index;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Comparator;
+
+import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.AttributeSource;
+import org.apache.lucene.util.Bits;
+
+/**
+ * Abstract class for enumerating a subset of all terms. 
+ * 
+ * <p>Term enumerations are always ordered by
+ * {@link #getComparator}.  Each term in the enumeration is
+ * greater than all that precede it.</p>
+ * <p><em>Please note:</em> Consumers of this enum cannot
+ * call {@code seek()}, it is forward only; it throws
+ * {@link UnsupportedOperationException} when a seeking method
+ * is called.
+ */
+public abstract class FilteredTermsEnum extends TermsEnum {
+
+  private BytesRef initialSeekTerm = null;
+  private boolean doSeek;
+  private BytesRef actualTerm = null;
+
+  private final TermsEnum tenum;
+
+  /** Return value, if term should be accepted or the iteration should
+   * {@code END}. The {@code *_SEEK} values denote, that after handling the current term
+   * the enum should call {@link #nextSeekTerm} and step forward.
+   * @see #accept(BytesRef)
+   */
+  protected static enum AcceptStatus {YES, YES_AND_SEEK, NO, NO_AND_SEEK, END};
+  
+  /** Return if term is accepted, not accepted or the iteration should ended
+   * (and possibly seek).
+   */
+  protected abstract AcceptStatus accept(BytesRef term) throws IOException;
+
+  /**
+   * Creates a filtered {@link TermsEnum} on a terms enum.
+   * @param tenum the terms enumeration to filter.
+   */
+  public FilteredTermsEnum(final TermsEnum tenum) {
+    this(tenum, true);
+  }
+
+  /**
+   * Creates a filtered {@link TermsEnum} on a terms enum.
+   * @param tenum the terms enumeration to filter.
+   */
+  public FilteredTermsEnum(final TermsEnum tenum, final boolean startWithSeek) {
+    assert tenum != null;
+    this.tenum = tenum;
+    doSeek = startWithSeek;
+  }
+
+  /**
+   * Use this method to set the initial {@link BytesRef}
+   * to seek before iterating. This is a convenience method for
+   * subclasses that do not override {@link #nextSeekTerm}.
+   * If the initial seek term is {@code null} (default),
+   * the enum is empty.
+   * <P>You can only use this method, if you keep the default
+   * implementation of {@link #nextSeekTerm}.
+   */
+  protected final void setInitialSeekTerm(BytesRef term) throws IOException {
+    this.initialSeekTerm = term;
+  }
+  
+  /** On the first call to {@link #next} or if {@link #accept} returns
+   * {@link AcceptStatus#YES_AND_SEEK} or {@link AcceptStatus#NO_AND_SEEK},
+   * this method will be called to eventually seek the underlying TermsEnum
+   * to a new position.
+   * On the first call, {@code currentTerm} will be {@code null}, later
+   * calls will provide the term the underlying enum is positioned at.
+   * This method returns per default only one time the initial seek term
+   * and then {@code null}, so no repositioning is ever done.
+   * <p>Override this method, if you want a more sophisticated TermsEnum,
+   * that repositions the iterator during enumeration.
+   * If this method always returns {@code null} the enum is empty.
+   * <p><em>Please note:</em> This method should always provide a greater term
+   * than the last enumerated term, else the behaviour of this enum
+   * violates the contract for TermsEnums.
+   */
+  protected BytesRef nextSeekTerm(final BytesRef currentTerm) throws IOException {
+    final BytesRef t = initialSeekTerm;
+    initialSeekTerm = null;
+    return t;
+  }
+
+  /**
+   * Returns the related attributes, the returned {@link AttributeSource}
+   * is shared with the delegate {@code TermsEnum}.
+   */
+  @Override
+  public AttributeSource attributes() {
+    return tenum.attributes();
+  }
+  
+  @Override
+  public BytesRef term() throws IOException {
+    return tenum.term();
+  }
+
+  @Override
+  public Comparator<BytesRef> getComparator() throws IOException {
+    return tenum.getComparator();
+  }
+    
+  @Override
+  public int docFreq() throws IOException {
+    return tenum.docFreq();
+  }
+
+  @Override
+  public long totalTermFreq() throws IOException {
+    return tenum.totalTermFreq();
+  }
+
+  /** This enum does not support seeking!
+   * @throws UnsupportedOperationException
+   */
+  @Override
+  public boolean seekExact(BytesRef term, boolean useCache) throws IOException {
+    throw new UnsupportedOperationException(getClass().getName()+" does not support seeking");
+  }
+
+  /** This enum does not support seeking!
+   * @throws UnsupportedOperationException
+   */
+  @Override
+  public SeekStatus seekCeil(BytesRef term, boolean useCache) throws IOException {
+    throw new UnsupportedOperationException(getClass().getName()+" does not support seeking");
+  }
+
+  /** This enum does not support seeking!
+   * @throws UnsupportedOperationException
+   */
+  @Override
+  public void seekExact(long ord) throws IOException {
+    throw new UnsupportedOperationException(getClass().getName()+" does not support seeking");
+  }
+
+  @Override
+  public long ord() throws IOException {
+    return tenum.ord();
+  }
+
+  @Override
+  public DocsEnum docs(Bits bits, DocsEnum reuse) throws IOException {
+    return tenum.docs(bits, reuse);
+  }
+    
+  @Override
+  public DocsAndPositionsEnum docsAndPositions(Bits bits, DocsAndPositionsEnum reuse) throws IOException {
+    return tenum.docsAndPositions(bits, reuse);
+  }
+  
+  /** This enum does not support seeking!
+   * @throws UnsupportedOperationException
+   */
+  @Override
+  public void seekExact(BytesRef term, TermState state) throws IOException {
+    throw new UnsupportedOperationException(getClass().getName()+" does not support seeking");
+  }
+  
+  /**
+   * Returns the filtered enums term state 
+   */
+  @Override
+  public TermState termState() throws IOException {
+    assert tenum != null;
+    return tenum.termState();
+  }
+
+  @SuppressWarnings("fallthrough")
+  @Override
+  public BytesRef next() throws IOException {
+    //System.out.println("FTE.next doSeek=" + doSeek);
+    //new Throwable().printStackTrace(System.out);
+    for (;;) {
+      // Seek or forward the iterator
+      if (doSeek) {
+        doSeek = false;
+        final BytesRef t = nextSeekTerm(actualTerm);
+        //System.out.println("  seek to t=" + (t == null ? "null" : t.utf8ToString()) + " tenum=" + tenum);
+        // Make sure we always seek forward:
+        assert actualTerm == null || t == null || getComparator().compare(t, actualTerm) > 0: "curTerm=" + actualTerm + " seekTerm=" + t;
+        if (t == null || tenum.seekCeil(t, false) == SeekStatus.END) {
+          // no more terms to seek to or enum exhausted
+          //System.out.println("  return null");
+          return null;
+        }
+        actualTerm = tenum.term();
+        //System.out.println("  got term=" + actualTerm.utf8ToString());
+      } else {
+        actualTerm = tenum.next();
+        if (actualTerm == null) {
+          // enum exhausted
+          return null;
+        }
+      }
+      
+      // check if term is accepted
+      switch (accept(actualTerm)) {
+        case YES_AND_SEEK:
+          doSeek = true;
+          // term accepted, but we need to seek so fall-through
+        case YES:
+          // term accepted
+          return actualTerm;
+        case NO_AND_SEEK:
+          // invalid term, seek next time
+          doSeek = true;
+          break;
+        case END:
+          // we are supposed to end the enum
+          return null;
+      }
+    }
+  }
+
+}
diff --git a/lucene/src/java/org/apache/lucene/index/SingleTermsEnum.java b/lucene/src/java/org/apache/lucene/index/SingleTermsEnum.java
new file mode 100644
index 0000000..1c09c44
--- /dev/null
+++ b/lucene/src/java/org/apache/lucene/index/SingleTermsEnum.java
@@ -0,0 +1,53 @@
+package org.apache.lucene.index;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.search.MultiTermQuery;  // javadocs
+import org.apache.lucene.util.BytesRef;
+
+/**
+ * Subclass of FilteredTermsEnum for enumerating a single term.
+ * <p>
+ * For example, this can be used by {@link MultiTermQuery}s
+ * that need only visit one term, but want to preserve
+ * MultiTermQuery semantics such as {@link
+ * MultiTermQuery#rewriteMethod}.
+ */
+public final class SingleTermsEnum extends FilteredTermsEnum {
+  private final BytesRef singleRef;
+  
+  /**
+   * Creates a new <code>SingleTermsEnum</code>.
+   * <p>
+   * After calling the constructor the enumeration is already pointing to the term,
+   * if it exists.
+   */
+  public SingleTermsEnum(TermsEnum tenum, BytesRef termText) throws IOException {
+    super(tenum);
+    singleRef = termText;
+    setInitialSeekTerm(termText);
+  }
+
+  @Override
+  protected AcceptStatus accept(BytesRef term) {
+    return term.equals(singleRef) ? AcceptStatus.YES : AcceptStatus.END;
+  }
+  
+}
diff --git a/lucene/src/java/org/apache/lucene/search/FilteredTermsEnum.java b/lucene/src/java/org/apache/lucene/search/FilteredTermsEnum.java
deleted file mode 100644
index 898e4a5..0000000
--- a/lucene/src/java/org/apache/lucene/search/FilteredTermsEnum.java
+++ /dev/null
@@ -1,248 +0,0 @@
-package org.apache.lucene.search;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.Comparator;
-
-import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.index.TermState;
-import org.apache.lucene.index.TermsEnum;
-import org.apache.lucene.index.DocsEnum;
-import org.apache.lucene.index.DocsAndPositionsEnum;
-import org.apache.lucene.util.AttributeSource;
-import org.apache.lucene.util.Bits;
-
-// TODO: move this class to oal.index
-
-/**
- * Abstract class for enumerating a subset of all terms. 
- * 
- * <p>Term enumerations are always ordered by
- * {@link #getComparator}.  Each term in the enumeration is
- * greater than all that precede it.</p>
- * <p><em>Please note:</em> Consumers of this enum cannot
- * call {@code seek()}, it is forward only; it throws
- * {@link UnsupportedOperationException} when a seeking method
- * is called.
- */
-public abstract class FilteredTermsEnum extends TermsEnum {
-
-  private BytesRef initialSeekTerm = null;
-  private boolean doSeek;
-  private BytesRef actualTerm = null;
-
-  private final TermsEnum tenum;
-
-  /** Return value, if term should be accepted or the iteration should
-   * {@code END}. The {@code *_SEEK} values denote, that after handling the current term
-   * the enum should call {@link #nextSeekTerm} and step forward.
-   * @see #accept(BytesRef)
-   */
-  protected static enum AcceptStatus {YES, YES_AND_SEEK, NO, NO_AND_SEEK, END};
-  
-  /** Return if term is accepted, not accepted or the iteration should ended
-   * (and possibly seek).
-   */
-  protected abstract AcceptStatus accept(BytesRef term) throws IOException;
-
-  /**
-   * Creates a filtered {@link TermsEnum} on a terms enum.
-   * @param tenum the terms enumeration to filter.
-   */
-  public FilteredTermsEnum(final TermsEnum tenum) {
-    this(tenum, true);
-  }
-
-  /**
-   * Creates a filtered {@link TermsEnum} on a terms enum.
-   * @param tenum the terms enumeration to filter.
-   */
-  public FilteredTermsEnum(final TermsEnum tenum, final boolean startWithSeek) {
-    assert tenum != null;
-    this.tenum = tenum;
-    doSeek = startWithSeek;
-  }
-
-  /**
-   * Use this method to set the initial {@link BytesRef}
-   * to seek before iterating. This is a convenience method for
-   * subclasses that do not override {@link #nextSeekTerm}.
-   * If the initial seek term is {@code null} (default),
-   * the enum is empty.
-   * <P>You can only use this method, if you keep the default
-   * implementation of {@link #nextSeekTerm}.
-   */
-  protected final void setInitialSeekTerm(BytesRef term) throws IOException {
-    this.initialSeekTerm = term;
-  }
-  
-  /** On the first call to {@link #next} or if {@link #accept} returns
-   * {@link AcceptStatus#YES_AND_SEEK} or {@link AcceptStatus#NO_AND_SEEK},
-   * this method will be called to eventually seek the underlying TermsEnum
-   * to a new position.
-   * On the first call, {@code currentTerm} will be {@code null}, later
-   * calls will provide the term the underlying enum is positioned at.
-   * This method returns per default only one time the initial seek term
-   * and then {@code null}, so no repositioning is ever done.
-   * <p>Override this method, if you want a more sophisticated TermsEnum,
-   * that repositions the iterator during enumeration.
-   * If this method always returns {@code null} the enum is empty.
-   * <p><em>Please note:</em> This method should always provide a greater term
-   * than the last enumerated term, else the behaviour of this enum
-   * violates the contract for TermsEnums.
-   */
-  protected BytesRef nextSeekTerm(final BytesRef currentTerm) throws IOException {
-    final BytesRef t = initialSeekTerm;
-    initialSeekTerm = null;
-    return t;
-  }
-
-  /**
-   * Returns the related attributes, the returned {@link AttributeSource}
-   * is shared with the delegate {@code TermsEnum}.
-   */
-  @Override
-  public AttributeSource attributes() {
-    return tenum.attributes();
-  }
-  
-  @Override
-  public BytesRef term() throws IOException {
-    return tenum.term();
-  }
-
-  @Override
-  public Comparator<BytesRef> getComparator() throws IOException {
-    return tenum.getComparator();
-  }
-    
-  @Override
-  public int docFreq() throws IOException {
-    return tenum.docFreq();
-  }
-
-  @Override
-  public long totalTermFreq() throws IOException {
-    return tenum.totalTermFreq();
-  }
-
-  /** This enum does not support seeking!
-   * @throws UnsupportedOperationException
-   */
-  @Override
-  public boolean seekExact(BytesRef term, boolean useCache) throws IOException {
-    throw new UnsupportedOperationException(getClass().getName()+" does not support seeking");
-  }
-
-  /** This enum does not support seeking!
-   * @throws UnsupportedOperationException
-   */
-  @Override
-  public SeekStatus seekCeil(BytesRef term, boolean useCache) throws IOException {
-    throw new UnsupportedOperationException(getClass().getName()+" does not support seeking");
-  }
-
-  /** This enum does not support seeking!
-   * @throws UnsupportedOperationException
-   */
-  @Override
-  public void seekExact(long ord) throws IOException {
-    throw new UnsupportedOperationException(getClass().getName()+" does not support seeking");
-  }
-
-  @Override
-  public long ord() throws IOException {
-    return tenum.ord();
-  }
-
-  @Override
-  public DocsEnum docs(Bits bits, DocsEnum reuse) throws IOException {
-    return tenum.docs(bits, reuse);
-  }
-    
-  @Override
-  public DocsAndPositionsEnum docsAndPositions(Bits bits, DocsAndPositionsEnum reuse) throws IOException {
-    return tenum.docsAndPositions(bits, reuse);
-  }
-  
-  /** This enum does not support seeking!
-   * @throws UnsupportedOperationException
-   */
-  @Override
-  public void seekExact(BytesRef term, TermState state) throws IOException {
-    throw new UnsupportedOperationException(getClass().getName()+" does not support seeking");
-  }
-  
-  /**
-   * Returns the filtered enums term state 
-   */
-  @Override
-  public TermState termState() throws IOException {
-    assert tenum != null;
-    return tenum.termState();
-  }
-
-  @SuppressWarnings("fallthrough")
-  @Override
-  public BytesRef next() throws IOException {
-    //System.out.println("FTE.next doSeek=" + doSeek);
-    //new Throwable().printStackTrace(System.out);
-    for (;;) {
-      // Seek or forward the iterator
-      if (doSeek) {
-        doSeek = false;
-        final BytesRef t = nextSeekTerm(actualTerm);
-        //System.out.println("  seek to t=" + (t == null ? "null" : t.utf8ToString()) + " tenum=" + tenum);
-        // Make sure we always seek forward:
-        assert actualTerm == null || t == null || getComparator().compare(t, actualTerm) > 0: "curTerm=" + actualTerm + " seekTerm=" + t;
-        if (t == null || tenum.seekCeil(t, false) == SeekStatus.END) {
-          // no more terms to seek to or enum exhausted
-          //System.out.println("  return null");
-          return null;
-        }
-        actualTerm = tenum.term();
-        //System.out.println("  got term=" + actualTerm.utf8ToString());
-      } else {
-        actualTerm = tenum.next();
-        if (actualTerm == null) {
-          // enum exhausted
-          return null;
-        }
-      }
-      
-      // check if term is accepted
-      switch (accept(actualTerm)) {
-        case YES_AND_SEEK:
-          doSeek = true;
-          // term accepted, but we need to seek so fall-through
-        case YES:
-          // term accepted
-          return actualTerm;
-        case NO_AND_SEEK:
-          // invalid term, seek next time
-          doSeek = true;
-          break;
-        case END:
-          // we are supposed to end the enum
-          return null;
-      }
-    }
-  }
-
-}
diff --git a/lucene/src/java/org/apache/lucene/search/FuzzyQuery.java b/lucene/src/java/org/apache/lucene/search/FuzzyQuery.java
index fa9f077..c0a4333 100644
--- a/lucene/src/java/org/apache/lucene/search/FuzzyQuery.java
+++ b/lucene/src/java/org/apache/lucene/search/FuzzyQuery.java
@@ -17,6 +17,9 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
+import java.io.IOException;
+
+import org.apache.lucene.index.SingleTermsEnum;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
@@ -24,8 +27,6 @@ import org.apache.lucene.util.AttributeSource;
 import org.apache.lucene.util.ToStringUtils;
 import org.apache.lucene.util.automaton.LevenshteinAutomata;
 
-import java.io.IOException;
-
 /** Implements the fuzzy search query. The similarity measurement
  * is based on the Levenshtein (edit distance) algorithm.
  * 
diff --git a/lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.java b/lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.java
index c84adb7..568b365 100644
--- a/lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.java
+++ b/lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.java
@@ -28,6 +28,7 @@ import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermState;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
+import org.apache.lucene.index.FilteredTermsEnum;
 import org.apache.lucene.util.Attribute;
 import org.apache.lucene.util.AttributeImpl;
 import org.apache.lucene.util.AttributeSource;
diff --git a/lucene/src/java/org/apache/lucene/search/MultiTermQuery.java b/lucene/src/java/org/apache/lucene/search/MultiTermQuery.java
index aba1781..da66af0 100644
--- a/lucene/src/java/org/apache/lucene/search/MultiTermQuery.java
+++ b/lucene/src/java/org/apache/lucene/search/MultiTermQuery.java
@@ -19,7 +19,9 @@ package org.apache.lucene.search;
 
 import java.io.IOException;
 
+import org.apache.lucene.index.FilteredTermsEnum; // javadocs
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.SingleTermsEnum;   // javadocs
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
diff --git a/lucene/src/java/org/apache/lucene/search/NumericRangeQuery.java b/lucene/src/java/org/apache/lucene/search/NumericRangeQuery.java
index 1d0b662..b12bbb2 100644
--- a/lucene/src/java/org/apache/lucene/search/NumericRangeQuery.java
+++ b/lucene/src/java/org/apache/lucene/search/NumericRangeQuery.java
@@ -18,17 +18,18 @@ package org.apache.lucene.search;
  */
 
 import java.io.IOException;
-import java.util.LinkedList;
 import java.util.Comparator;
+import java.util.LinkedList;
 
 import org.apache.lucene.analysis.NumericTokenStream; // for javadocs
 import org.apache.lucene.document.NumericField; // for javadocs
-import org.apache.lucene.util.NumericUtils;
-import org.apache.lucene.util.ToStringUtils;
+import org.apache.lucene.index.FilteredTermsEnum;
 import org.apache.lucene.index.Terms;
+import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.util.AttributeSource;
 import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.index.TermsEnum;
+import org.apache.lucene.util.NumericUtils;
+import org.apache.lucene.util.ToStringUtils;
 
 /**
  * <p>A {@link Query} that matches numeric values within a
@@ -169,7 +170,7 @@ public final class NumericRangeQuery<T extends Number> extends MultiTermQuery {
 
     // For bigger precisionSteps this query likely
     // hits too many terms, so set to CONSTANT_SCORE_FILTER right off
-    // (especially as the FilteredTermEnum is costly if wasted only for AUTO tests because it
+    // (especially as the FilteredTermsEnum is costly if wasted only for AUTO tests because it
     // creates new enums from IndexReader for each sub-range)
     switch (valSize) {
       case 64:
diff --git a/lucene/src/java/org/apache/lucene/search/PrefixTermsEnum.java b/lucene/src/java/org/apache/lucene/search/PrefixTermsEnum.java
index 23717be..b67028a 100644
--- a/lucene/src/java/org/apache/lucene/search/PrefixTermsEnum.java
+++ b/lucene/src/java/org/apache/lucene/search/PrefixTermsEnum.java
@@ -19,6 +19,7 @@ package org.apache.lucene.search;
 
 import java.io.IOException;
 
+import org.apache.lucene.index.FilteredTermsEnum;
 import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.util.BytesRef;
 
diff --git a/lucene/src/java/org/apache/lucene/search/SingleTermsEnum.java b/lucene/src/java/org/apache/lucene/search/SingleTermsEnum.java
deleted file mode 100644
index c890f50..0000000
--- a/lucene/src/java/org/apache/lucene/search/SingleTermsEnum.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package org.apache.lucene.search;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.apache.lucene.index.TermsEnum;
-import org.apache.lucene.util.BytesRef;
-
-/**
- * Subclass of FilteredTermsEnum for enumerating a single term.
- * <p>
- * This can be used by {@link MultiTermQuery}s that need only visit one term,
- * but want to preserve MultiTermQuery semantics such as
- * {@link MultiTermQuery#rewriteMethod}.
- */
-public final class SingleTermsEnum extends FilteredTermsEnum {
-  private final BytesRef singleRef;
-  
-  /**
-   * Creates a new <code>SingleTermsEnum</code>.
-   * <p>
-   * After calling the constructor the enumeration is already pointing to the term,
-   * if it exists.
-   */
-  public SingleTermsEnum(TermsEnum tenum, BytesRef termText) throws IOException {
-    super(tenum);
-    singleRef = termText;
-    setInitialSeekTerm(termText);
-  }
-
-  @Override
-  protected AcceptStatus accept(BytesRef term) {
-    return term.equals(singleRef) ? AcceptStatus.YES : AcceptStatus.END;
-  }
-  
-}
diff --git a/lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum.java b/lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum.java
index 5de82b9..ef4750b 100644
--- a/lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum.java
+++ b/lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum.java
@@ -20,6 +20,7 @@ package org.apache.lucene.search;
 import java.io.IOException;
 import java.util.Comparator;
 
+import org.apache.lucene.index.FilteredTermsEnum;
 import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.util.BytesRef;
 
diff --git a/lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton.java b/lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton.java
index 48b0e53..092c6d3 100644
--- a/lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton.java
+++ b/lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton.java
@@ -24,7 +24,7 @@ import java.util.List;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.search.PrefixTermsEnum;
-import org.apache.lucene.search.SingleTermsEnum;
+import org.apache.lucene.index.SingleTermsEnum;
 import org.apache.lucene.util.BytesRef;
 
 /**
diff --git a/lucene/src/test/org/apache/lucene/search/TestAutomatonQuery.java b/lucene/src/test/org/apache/lucene/search/TestAutomatonQuery.java
index f38f625..2c104c3 100644
--- a/lucene/src/test/org/apache/lucene/search/TestAutomatonQuery.java
+++ b/lucene/src/test/org/apache/lucene/search/TestAutomatonQuery.java
@@ -25,6 +25,7 @@ import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.MultiFields;
 import org.apache.lucene.index.RandomIndexWriter;
+import org.apache.lucene.index.SingleTermsEnum;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
diff --git a/lucene/src/test/org/apache/lucene/search/TestPrefixRandom.java b/lucene/src/test/org/apache/lucene/search/TestPrefixRandom.java
index 35b1e15..000c13a 100644
--- a/lucene/src/test/org/apache/lucene/search/TestPrefixRandom.java
+++ b/lucene/src/test/org/apache/lucene/search/TestPrefixRandom.java
@@ -24,11 +24,12 @@ import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.StringField;
+import org.apache.lucene.index.FilteredTermsEnum;
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
-import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.codecs.CodecProvider;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.AttributeSource;
diff --git a/lucene/src/test/org/apache/lucene/search/TestRegexpRandom2.java b/lucene/src/test/org/apache/lucene/search/TestRegexpRandom2.java
index e5ac627..2f74d8d 100644
--- a/lucene/src/test/org/apache/lucene/search/TestRegexpRandom2.java
+++ b/lucene/src/test/org/apache/lucene/search/TestRegexpRandom2.java
@@ -27,6 +27,7 @@ import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.StringField;
+import org.apache.lucene.index.FilteredTermsEnum;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;

