GitDiffStart: 40a9dbf3ce4042bde81d35ae73efe7f275f4ca8e | Sun Mar 11 16:09:21 2012 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 7c98b27..33dd4e7 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -410,6 +410,10 @@ API Changes
   method maybeReopen has been deprecated in favor of maybeRefresh().
   (Shai Erera, Mike McCandless, Simon Willnauer)
 
+* LUCENE-3859: AtomicReader.hasNorms(field) is deprecated, instead you
+  can inspect the FieldInfo yourself to see if norms are present, which
+  also allows you to get the type.  (Robert Muir)
+
 New features
 
 * LUCENE-2604: Added RegexpQuery support to QueryParser. Regular expressions
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/PerDocProducerBase.java b/lucene/core/src/java/org/apache/lucene/codecs/PerDocProducerBase.java
index d9da76e..d2bfb46 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/PerDocProducerBase.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/PerDocProducerBase.java
@@ -91,7 +91,7 @@ public abstract class PerDocProducerBase extends PerDocProducer {
   }
   
   protected boolean anyDocValuesFields(FieldInfos infos) {
-    return infos.anyDocValuesFields();
+    return infos.hasDocValues();
   }
   
   public static String docValuesId(String segmentsName, int fieldId) {
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer.java
index 8d0ec06..7ceddee 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer.java
@@ -76,7 +76,7 @@ class Lucene3xNormsProducer extends PerDocProducer {
     try {
       long nextNormSeek = NORMS_HEADER.length; //skip header (header unused for now)
       for (FieldInfo fi : fields) {
-        if (fi.normsPresent()) {
+        if (fi.hasNorms()) {
           String fileName = getNormFilename(segmentName, normGen, fi.number);
           Directory d = hasSeparateNorms(normGen, fi.number) ? separateNormsDir : dir;
         
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat.java
index 8bf729e..a085a48 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat.java
@@ -62,7 +62,7 @@ public class Lucene40NormsFormat extends NormsFormat {
 
     @Override
     protected boolean canLoad(FieldInfo info) {
-      return info.normsPresent();
+      return info.hasNorms();
     }
 
     @Override
@@ -92,7 +92,7 @@ public class Lucene40NormsFormat extends NormsFormat {
 
     @Override
     protected boolean canMerge(FieldInfo info) {
-      return info.normsPresent();
+      return info.hasNorms();
     }
 
     @Override
@@ -104,7 +104,7 @@ public class Lucene40NormsFormat extends NormsFormat {
       final String normsFileName = IndexFileNames.segmentFileName(segmentInfo.name, NORMS_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_EXTENSION);
       FieldInfos fieldInfos = segmentInfo.getFieldInfos();
       for (FieldInfo fieldInfo : fieldInfos) {
-        if (fieldInfo.normsPresent()) {
+        if (fieldInfo.hasNorms()) {
           final String normsEntriesFileName = IndexFileNames.segmentFileName(segmentInfo.name, NORMS_SEGMENT_SUFFIX, IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION);
           files.add(normsFileName);
           files.add(normsEntriesFileName);
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat.java b/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat.java
index 782273e..598a1f0 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat.java
@@ -73,7 +73,7 @@ public class SimpleTextNormsFormat extends NormsFormat {
     
     @Override
     protected boolean canLoad(FieldInfo info) {
-      return info.normsPresent();
+      return info.hasNorms();
     }
     
     @Override
@@ -104,7 +104,7 @@ public class SimpleTextNormsFormat extends NormsFormat {
     
     @Override
     protected boolean canMerge(FieldInfo info) {
-      return info.normsPresent();
+      return info.hasNorms();
     }
     
     @Override
@@ -129,7 +129,7 @@ public class SimpleTextNormsFormat extends NormsFormat {
     public static void filesInternal(FieldInfos fieldInfos, String segmentName,
         Set<String> files, String segmentSuffix) {
       for (FieldInfo fieldInfo : fieldInfos) {
-        if (fieldInfo.normsPresent()) {
+        if (fieldInfo.hasNorms()) {
           String id = docValuesId(segmentName, fieldInfo.number);
           files.add(IndexFileNames.segmentFileName(id, "",
               segmentSuffix));
diff --git a/lucene/core/src/java/org/apache/lucene/index/AtomicReader.java b/lucene/core/src/java/org/apache/lucene/index/AtomicReader.java
index a3840a1..fd4428c 100644
--- a/lucene/core/src/java/org/apache/lucene/index/AtomicReader.java
+++ b/lucene/core/src/java/org/apache/lucene/index/AtomicReader.java
@@ -60,12 +60,17 @@ public abstract class AtomicReader extends IndexReader {
     return readerContext;
   }
 
-  /** Returns true if there are norms stored for this field. */
-  public boolean hasNorms(String field) throws IOException {
-    // backward compatible implementation.
-    // SegmentReader has an efficient implementation.
+  /** 
+   * Returns true if there are norms stored for this field.
+   * @deprecated (4.0) use {@link #getFieldInfos()} and check {@link FieldInfo#hasNorms()} 
+   *                   for the field instead.
+   */
+  @Deprecated
+  public final boolean hasNorms(String field) throws IOException {
     ensureOpen();
-    return normValues(field) != null;
+    // note: using normValues(field) != null would potentially cause i/o
+    FieldInfo fi = getFieldInfos().fieldInfo(field);
+    return fi != null && fi.hasNorms();
   }
 
   /**
diff --git a/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java b/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
index b330ddd..0a67716 100644
--- a/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
+++ b/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
@@ -652,17 +652,16 @@ public class CheckIndex {
         infoStream.print("    test: field norms.........");
       }
       for (FieldInfo info : fieldInfos) {
-        if (reader.hasNorms(info.name)) {
+        if (info.hasNorms()) {
+          assert reader.hasNorms(info.name); // deprecated path
           DocValues dv = reader.normValues(info.name);
           checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());
           ++status.totFields;
         } else {
+          assert !reader.hasNorms(info.name); // deprecated path
           if (reader.normValues(info.name) != null) {
             throw new RuntimeException("field: " + info.name + " should omit norms but has them!");
           }
-          if (info.normsPresent()) {
-            throw new RuntimeException("field: " + info.name + " should have norms but omits them!");
-          }
         }
       }
 
diff --git a/lucene/core/src/java/org/apache/lucene/index/FieldInfo.java b/lucene/core/src/java/org/apache/lucene/index/FieldInfo.java
index 60ccf4a..34f9587 100644
--- a/lucene/core/src/java/org/apache/lucene/index/FieldInfo.java
+++ b/lucene/core/src/java/org/apache/lucene/index/FieldInfo.java
@@ -122,14 +122,23 @@ public final class FieldInfo {
     }
   }
   
+  /**
+   * @return true if this field has any docValues.
+   */
   public boolean hasDocValues() {
     return docValueType != null;
   }
 
+  /**
+   * @return {@link DocValues.Type} of the docValues. this may be null if the field has no docvalues.
+   */
   public DocValues.Type getDocValuesType() {
     return docValueType;
   }
   
+  /**
+   * @return {@link DocValues.Type} of the norm. this may be null if the field has no norms.
+   */
   public DocValues.Type getNormType() {
     return normType;
   }
@@ -146,11 +155,17 @@ public final class FieldInfo {
     }
   }
   
+  /**
+   * @return true if norms are explicitly omitted for this field
+   */
   public boolean omitNorms() {
     return omitNorms;
   }
   
-  public boolean normsPresent() {
+  /**
+   * @return true if this field actually has any norms.
+   */
+  public boolean hasNorms() {
     return isIndexed && !omitNorms && normType != null;
   }
   
diff --git a/lucene/core/src/java/org/apache/lucene/index/FieldInfos.java b/lucene/core/src/java/org/apache/lucene/index/FieldInfos.java
index 5fbc951..e2af36f 100644
--- a/lucene/core/src/java/org/apache/lucene/index/FieldInfos.java
+++ b/lucene/core/src/java/org/apache/lucene/index/FieldInfos.java
@@ -178,7 +178,7 @@ public final class FieldInfos implements Iterable<FieldInfo> {
     return fis;
   }
 
-  /** Returns true if any fields do not positions */
+  /** Returns true if any fields have positions */
   public boolean hasProx() {
     if (isReadOnly()) {
       return hasProx;
@@ -349,6 +349,12 @@ public final class FieldInfos implements Iterable<FieldInfo> {
     return fi;
   }
 
+  /**
+   * lookup the number of a field by name.
+   * 
+   * @param fieldName field's name
+   * @return number of field, or -1 if it does not exist.
+   */
   public int fieldNumber(String fieldName) {
     FieldInfo fi = fieldInfo(fieldName);
     return (fi != null) ? fi.number : -1;
@@ -384,11 +390,17 @@ public final class FieldInfos implements Iterable<FieldInfo> {
     return byNumber.values().iterator();
   }
 
+  /**
+   * @return number of fields
+   */
   public int size() {
     assert byNumber.size() == byName.size();
     return byNumber.size();
   }
 
+  /**
+   * @return true if at least one field has any vectors
+   */
   public boolean hasVectors() {
     if (isReadOnly()) {
       return hasVectors;
@@ -402,9 +414,12 @@ public final class FieldInfos implements Iterable<FieldInfo> {
     return false;
   }
 
+  /**
+   * @return true if at least one field has any norms
+   */
   public boolean hasNorms() {
     for (FieldInfo fi : this) {
-      if (fi.normsPresent()) {
+      if (fi.hasNorms()) {
         return true;
       }
     }
@@ -441,7 +456,10 @@ public final class FieldInfos implements Iterable<FieldInfo> {
     return roFis;
   }
 
-  public boolean anyDocValuesFields() {
+  /**
+   * @return true if at least one field has docValues
+   */
+  public boolean hasDocValues() {
     for (FieldInfo fi : this) {
       if (fi.hasDocValues()) { 
         return true;
diff --git a/lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java b/lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java
index 7cda4d3..e1a302f 100644
--- a/lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java
+++ b/lucene/core/src/java/org/apache/lucene/index/FilterAtomicReader.java
@@ -360,12 +360,6 @@ public class FilterAtomicReader extends AtomicReader {
   }
 
   @Override
-  public boolean hasNorms(String field) throws IOException {
-    ensureOpen();
-    return in.hasNorms(field);
-  }
-
-  @Override
   protected void doClose() throws IOException {
     in.close();
   }
diff --git a/lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java b/lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java
index 4120026..545eead 100644
--- a/lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java
+++ b/lucene/core/src/java/org/apache/lucene/index/ParallelAtomicReader.java
@@ -264,13 +264,6 @@ public final class ParallelAtomicReader extends AtomicReader {
   }
   
   @Override
-  public boolean hasNorms(String field) throws IOException {
-    ensureOpen();
-    AtomicReader reader = fieldToReader.get(field);
-    return reader==null ? false : reader.hasNorms(field);
-  }
-  
-  @Override
   protected synchronized void doClose() throws IOException {
     IOException ioe = null;
     for (AtomicReader reader : completeReaderSet) {
diff --git a/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java b/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java
index da7db93..5ac217b 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java
@@ -210,7 +210,7 @@ final class SegmentMerger {
           TypePromoter previous = docValuesTypes.get(merged);
           docValuesTypes.put(merged, mergeDocValuesType(previous, reader.docValues(fi.name))); 
         }
-        if (fi.normsPresent()) {
+        if (fi.hasNorms()) {
           TypePromoter previous = normValuesTypes.get(merged);
           normValuesTypes.put(merged, mergeDocValuesType(previous, reader.normValues(fi.name))); 
         }
diff --git a/lucene/core/src/java/org/apache/lucene/index/SegmentReader.java b/lucene/core/src/java/org/apache/lucene/index/SegmentReader.java
index b76fea2..f2b8f88 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SegmentReader.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SegmentReader.java
@@ -150,13 +150,6 @@ public final class SegmentReader extends AtomicReader {
     return si.docCount;
   }
 
-  @Override
-  public boolean hasNorms(String field) {
-    ensureOpen();
-    FieldInfo fi = core.fieldInfos.fieldInfo(field);
-    return fi.normsPresent();
-  }
-
   /** @lucene.internal */
   public TermVectorsReader getTermVectorsReader() {
     ensureOpen();
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter.java b/lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter.java
index 5a1e2b3..77032da 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter.java
@@ -97,7 +97,7 @@ public class TestDocumentWriter extends LuceneTestCase {
     // omitNorms is true
     for (FieldInfo fi : reader.getFieldInfos()) {
       if (fi.isIndexed) {
-        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));
+        assertTrue(fi.omitNorms == (reader.normValues(fi.name) == null));
       }
     }
     reader.close();
@@ -330,10 +330,10 @@ public class TestDocumentWriter extends LuceneTestCase {
     SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));
     FieldInfos fi = reader.getFieldInfos();
     // f1
-    assertFalse("f1 should have no norms", reader.hasNorms("f1"));
+    assertFalse("f1 should have no norms", fi.fieldInfo("f1").hasNorms());
     assertEquals("omitTermFreqAndPositions field bit should not be set for f1", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo("f1").indexOptions);
     // f2
-    assertTrue("f2 should have norms", reader.hasNorms("f2"));
+    assertTrue("f2 should have norms", fi.fieldInfo("f2").hasNorms());
     assertEquals("omitTermFreqAndPositions field bit should be set for f2", IndexOptions.DOCS_ONLY, fi.fieldInfo("f2").indexOptions);
     reader.close();
   }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestNorms.java b/lucene/core/src/test/org/apache/lucene/index/TestNorms.java
index 811cf56..d1d21ed 100755
--- a/lucene/core/src/test/org/apache/lucene/index/TestNorms.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestNorms.java
@@ -128,9 +128,9 @@ public class TestNorms extends LuceneTestCase {
     assertFalse(fieldInfo.omitNorms);
     assertTrue(fieldInfo.isIndexed);
     if (secondWriteNorm) {
-      assertTrue(fieldInfo.normsPresent());
+      assertTrue(fieldInfo.hasNorms());
     } else {
-      assertFalse(fieldInfo.normsPresent());  
+      assertFalse(fieldInfo.hasNorms());  
     }
     
     IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,
@@ -144,12 +144,12 @@ public class TestNorms extends LuceneTestCase {
       FieldInfo fi = mergedReader.getFieldInfos().fieldInfo(byteTestField);
       assertFalse(fi.omitNorms);
       assertTrue(fi.isIndexed);
-      assertFalse(fi.normsPresent());
+      assertFalse(fi.hasNorms());
     } else {
       FieldInfo fi = mergedReader.getFieldInfos().fieldInfo(byteTestField);
       assertFalse(fi.omitNorms);
       assertTrue(fi.isIndexed);
-      assertTrue(fi.normsPresent());
+      assertTrue(fi.hasNorms());
       
       DocValues normValues = mergedReader.normValues(byteTestField);
       assertNotNull(normValues);
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestSegmentReader.java b/lucene/core/src/test/org/apache/lucene/index/TestSegmentReader.java
index 9e5b58b..c84382b 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestSegmentReader.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestSegmentReader.java
@@ -179,9 +179,9 @@ public class TestSegmentReader extends LuceneTestCase {
     for (int i=0; i<DocHelper.fields.length; i++) {
       IndexableField f = DocHelper.fields[i];
       if (f.fieldType().indexed()) {
-        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());
-        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));
-        if (!reader.hasNorms(f.name())) {
+        assertEquals(reader.normValues(f.name()) != null, !f.fieldType().omitNorms());
+        assertEquals(reader.normValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));
+        if (reader.normValues(f.name()) == null) {
           // test for norms of null
           DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());
           assertNull(norms);
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWNormsConsumer.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWNormsConsumer.java
index 8ab8d1e..fe08173 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWNormsConsumer.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWNormsConsumer.java
@@ -81,7 +81,7 @@ class PreFlexRWNormsConsumer extends PerDocConsumer {
   
   @Override
   protected boolean canMerge(FieldInfo info) {
-    return info.normsPresent();
+    return info.hasNorms();
   }
 
   @Override
@@ -233,7 +233,7 @@ class PreFlexRWNormsConsumer extends PerDocConsumer {
     public void merge(MergeState mergeState) throws IOException {
       int numMergedDocs = 0;
       for (FieldInfo fi : mergeState.fieldInfos) {
-        if (fi.normsPresent()) {
+        if (fi.hasNorms()) {
           startField(fi);
           int numMergedDocsForField = 0;
           for (MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {
diff --git a/lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader.java b/lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader.java
index bc374a9..6c11e41 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader.java
@@ -101,11 +101,6 @@ public final class FieldFilterAtomicReader extends FilterAtomicReader {
   }
 
   @Override
-  public boolean hasNorms(String field) throws IOException {
-    return hasField(field) ? super.hasNorms(field) : false;
-  }
-
-  @Override
   public Fields fields() throws IOException {
     final Fields f = super.fields();
     return (f == null) ? null : new FieldFilterFields(f);

