GitDiffStart: 0f5172a44e4a03b08650fb4c718857e9b94df4f3 | Sat Jun 19 20:20:28 2010 +0000
diff --git a/lucene/src/java/org/apache/lucene/search/FieldCache.java b/lucene/src/java/org/apache/lucene/search/FieldCache.java
index 87d82cb..df0359e 100644
--- a/lucene/src/java/org/apache/lucene/search/FieldCache.java
+++ b/lucene/src/java/org/apache/lucene/search/FieldCache.java
@@ -24,6 +24,7 @@ import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.document.NumericField; // for javadocs
 import org.apache.lucene.analysis.NumericTokenStream; // for javadocs
+import org.apache.lucene.util.packed.PackedInts;
 
 import java.io.IOException;
 import java.io.Serializable;
@@ -534,6 +535,9 @@ public interface FieldCache {
 
     /** Returns a TermsEnum that can iterate over the values in this index entry */
     public abstract TermsEnum getTermsEnum();
+
+    /** @lucene.internal */
+    public abstract PackedInts.Reader getDocToOrd();
   }
 
   /** Checks the internal cache for an appropriate entry, and if none
diff --git a/lucene/src/java/org/apache/lucene/search/FieldCacheImpl.java b/lucene/src/java/org/apache/lucene/search/FieldCacheImpl.java
index 3053c7b..5c814c1 100644
--- a/lucene/src/java/org/apache/lucene/search/FieldCacheImpl.java
+++ b/lucene/src/java/org/apache/lucene/search/FieldCacheImpl.java
@@ -634,7 +634,7 @@ class FieldCacheImpl implements FieldCache {
     }
   }
 
-  private static class DocTermsIndexImpl extends DocTermsIndex {
+  public static class DocTermsIndexImpl extends DocTermsIndex {
     private final PagedBytes.Reader bytes;
     private final PackedInts.Reader termOrdToBytesOffset;
     private final PackedInts.Reader docToTermOrd;
@@ -648,6 +648,11 @@ class FieldCacheImpl implements FieldCache {
     }
 
     @Override
+    public PackedInts.Reader getDocToOrd() {
+      return docToTermOrd;
+    }
+
+    @Override
     public int numOrd() {
       return numOrd;
     }
diff --git a/lucene/src/java/org/apache/lucene/util/packed/Direct16.java b/lucene/src/java/org/apache/lucene/util/packed/Direct16.java
index e34ec96..962e224 100644
--- a/lucene/src/java/org/apache/lucene/util/packed/Direct16.java
+++ b/lucene/src/java/org/apache/lucene/util/packed/Direct16.java
@@ -25,9 +25,10 @@ import java.util.Arrays;
 
 /**
  * Direct wrapping of 16 bit values to a backing array of shorts.
+ * @lucene.internal
  */
 
-class Direct16 extends PackedInts.ReaderImpl
+public class Direct16 extends PackedInts.ReaderImpl
         implements PackedInts.Mutable {
   private short[] values;
   private static final int BITS_PER_VALUE = 16;
@@ -67,6 +68,10 @@ class Direct16 extends PackedInts.ReaderImpl
     this.values = values;
   }
 
+  public short[] getArray() {
+    return values;
+  }
+
   public long get(final int index) {
     return 0xFFFFL & values[index];
   }
diff --git a/lucene/src/java/org/apache/lucene/util/packed/Direct32.java b/lucene/src/java/org/apache/lucene/util/packed/Direct32.java
index 3ab4cd0..8d3486a 100644
--- a/lucene/src/java/org/apache/lucene/util/packed/Direct32.java
+++ b/lucene/src/java/org/apache/lucene/util/packed/Direct32.java
@@ -25,9 +25,10 @@ import java.util.Arrays;
 
 /**
  * Direct wrapping of 32 bit values to a backing array of ints.
+ * @lucene.internal
  */
 
-class Direct32 extends PackedInts.ReaderImpl
+public class Direct32 extends PackedInts.ReaderImpl
         implements PackedInts.Mutable {
   private int[] values;
   private static final int BITS_PER_VALUE = 32;
@@ -63,6 +64,10 @@ class Direct32 extends PackedInts.ReaderImpl
     this.values = values;
   }
 
+  public int[] getArray() {
+    return values;
+  }
+
   public long get(final int index) {
     return 0xFFFFFFFFL & values[index];
   }
diff --git a/lucene/src/java/org/apache/lucene/util/packed/Direct64.java b/lucene/src/java/org/apache/lucene/util/packed/Direct64.java
index eaa1622..c72abfb 100644
--- a/lucene/src/java/org/apache/lucene/util/packed/Direct64.java
+++ b/lucene/src/java/org/apache/lucene/util/packed/Direct64.java
@@ -25,9 +25,10 @@ import java.util.Arrays;
 
 /**
  * Direct wrapping of 32 bit values to a backing array of ints.
+ * @lucene.internal
  */
 
-class Direct64 extends PackedInts.ReaderImpl
+public class Direct64 extends PackedInts.ReaderImpl
         implements PackedInts.Mutable {
   private long[] values;
   private static final int BITS_PER_VALUE = 64;
@@ -47,6 +48,9 @@ class Direct64 extends PackedInts.ReaderImpl
     this.values = values;
   }
 
+  public long[] getArray() {
+    return values;
+  }
 
   /**
    * Creates an array backed by the given values.
diff --git a/lucene/src/java/org/apache/lucene/util/packed/Direct8.java b/lucene/src/java/org/apache/lucene/util/packed/Direct8.java
index 72bf6f9..233dfe0 100644
--- a/lucene/src/java/org/apache/lucene/util/packed/Direct8.java
+++ b/lucene/src/java/org/apache/lucene/util/packed/Direct8.java
@@ -25,9 +25,10 @@ import java.util.Arrays;
 
 /**
  * Direct wrapping of 8 bit values to a backing array of bytes.
+ * @lucene.internal
  */
 
-class Direct8 extends PackedInts.ReaderImpl
+public class Direct8 extends PackedInts.ReaderImpl
         implements PackedInts.Mutable {
   private byte[] values;
   private static final int BITS_PER_VALUE = 8;
@@ -68,6 +69,10 @@ class Direct8 extends PackedInts.ReaderImpl
     this.values = values;
   }
 
+  public byte[] getArray() {
+    return values;
+  }
+
   public long get(final int index) {
     return 0xFFL & values[index];
   }

