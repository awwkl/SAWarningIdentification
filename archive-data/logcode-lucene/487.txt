GitDiffStart: a79a8edbb474aab0dd163c9bd06c8a1ccc881acc | Tue Sep 6 13:33:36 2016 +0100
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 20aa5fb..96ac15e 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -82,6 +82,9 @@ New Features
 
 * SOLR-9127: Excel workbook (.xlsx) response writer. use 'wt=xlsx' (Tony Moriarty, noble)
 
+* SOLR-9469: JettySolrRunner now has the option of restarting using a different
+  port (Alan Woodward)
+
 Bug Fixes
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java b/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
index 871fe4c..a0ca7eb 100644
--- a/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
+++ b/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
@@ -307,9 +307,24 @@ public class JettySolrRunner {
   /**
    * Start the Jetty server
    *
+   * If the server has been started before, it will restart using the same port
+   *
    * @throws Exception if an error occurs on startup
    */
   public void start() throws Exception {
+    start(true);
+  }
+
+  /**
+   * Start the Jetty server
+   *
+   * @param reusePort when true, will start up on the same port as used by any
+   *                  previous runs of this JettySolrRunner.  If false, will use
+   *                  the port specified by the server's JettyConfig.
+   *
+   * @throws Exception if an error occurs on startup
+   */
+  public void start(boolean reusePort) throws Exception {
     // Do not let Jetty/Solr pollute the MDC for this thread
     Map<String, String> prevContext = MDC.getCopyOfContextMap();
     MDC.clear();
@@ -317,7 +332,8 @@ public class JettySolrRunner {
       // if started before, make a new server
       if (startedBefore) {
         waitOnSolr = false;
-        init(lastPort);
+        int port = reusePort ? lastPort : this.config.port;
+        init(port);
       } else {
         startedBefore = true;
       }
diff --git a/solr/test-framework/src/test/org/apache/solr/cloud/JettySolrRunnerTest.java b/solr/test-framework/src/test/org/apache/solr/cloud/JettySolrRunnerTest.java
new file mode 100644
index 0000000..8dd16b1
--- /dev/null
+++ b/solr/test-framework/src/test/org/apache/solr/cloud/JettySolrRunnerTest.java
@@ -0,0 +1,66 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.cloud;
+
+import java.net.URL;
+import java.nio.charset.Charset;
+import java.nio.file.Files;
+import java.nio.file.Path;
+
+import org.apache.solr.SolrTestCaseJ4;
+import org.apache.solr.client.solrj.embedded.JettyConfig;
+import org.apache.solr.client.solrj.embedded.JettySolrRunner;
+import org.junit.Test;
+
+import static org.hamcrest.core.IsNot.not;
+
+public class JettySolrRunnerTest extends SolrTestCaseJ4 {
+
+  @Test
+  public void testRestartPorts() throws Exception {
+
+    Path solrHome = createTempDir();
+    Files.write(solrHome.resolve("solr.xml"), MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.getBytes(Charset.defaultCharset()));
+
+    JettyConfig config = JettyConfig.builder().build();
+
+    JettySolrRunner jetty = new JettySolrRunner(solrHome.toString(), config);
+    try {
+      jetty.start();
+
+      URL url = jetty.getBaseUrl();
+      int usedPort = url.getPort();
+
+      jetty.stop();
+      jetty.start();
+
+      assertEquals("After restart, jetty port should be the same", usedPort, jetty.getBaseUrl().getPort());
+
+      jetty.stop();
+      jetty.start(false);
+
+      assertThat("After restart, jetty port should be different", jetty.getBaseUrl().getPort(), not(usedPort));
+    }
+    finally {
+      if (jetty.isRunning())
+        jetty.stop();
+    }
+
+  }
+
+}

