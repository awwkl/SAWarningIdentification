GitDiffStart: 5fb2e4a751ecf28489434562d5f3108bcf4a2279 | Tue Jun 5 22:57:19 2012 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 3c899e8..560f4ca 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -761,8 +761,8 @@ New features
   value, custom similarities can now set a integer, float or byte value to the
   given Norm object. (Simon Willnauer)  
 
-* LUCENE-2604: Added RegexpQuery support to contrib/queryparser.
-  (Simon Willnauer, Robert Muir)
+* LUCENE-2604, LUCENE-4103: Added RegexpQuery support to contrib/queryparser.
+  (Simon Willnauer, Robert Muir, Daniel Truemper)
 
 * LUCENE-2373: Added a Codec implementation that works with append-only
   filesystems (such as e.g. Hadoop DFS). SegmentInfos writing/reading
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java
index dad5469..6847a8c 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java
@@ -42,6 +42,7 @@ import org.apache.lucene.queryparser.flexible.core.nodes.TokenizedPhraseQueryNod
 import org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl;
 import org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler.ConfigurationKeys;
 import org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode;
+import org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;
 import org.apache.lucene.queryparser.flexible.standard.nodes.StandardBooleanQueryNode;
 import org.apache.lucene.queryparser.flexible.standard.nodes.WildcardQueryNode;
 
@@ -106,6 +107,7 @@ public class AnalyzerQueryNodeProcessor extends QueryNodeProcessorImpl {
     if (node instanceof TextableQueryNode
         && !(node instanceof WildcardQueryNode)
         && !(node instanceof FuzzyQueryNode)
+        && !(node instanceof RegexpQueryNode)
         && !(node.getParent() instanceof RangeQueryNode)) {
 
       FieldQueryNode fieldNode = ((FieldQueryNode) node);
diff --git a/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java b/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java
index 0add593..d2dc8b2 100644
--- a/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java
+++ b/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java
@@ -1302,4 +1302,24 @@ public class TestQPHelper extends LuceneTestCase {
     dir.close();
   }
 
+  public void testRegexQueryParsing() throws Exception {
+    final String[] fields = {"b", "t"};
+
+    final StandardQueryParser parser = new StandardQueryParser();
+    parser.setMultiFields(fields);
+    parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);
+    parser.setAnalyzer(new MockAnalyzer(random()));
+
+    BooleanQuery exp = new BooleanQuery();
+    exp.add(new BooleanClause(new RegexpQuery(new Term("b", "ab.+")), BooleanClause.Occur.MUST));
+    exp.add(new BooleanClause(new RegexpQuery(new Term("t", "ab.+")), BooleanClause.Occur.MUST));
+
+    assertEquals(exp, parser.parse("/ab.+/", null));
+
+    RegexpQuery regexpQueryexp = new RegexpQuery(new Term("test", "[abc]?[0-9]"));
+
+    assertEquals(regexpQueryexp, parser.parse("test:/[abc]?[0-9]/", null));
+
+  }
+
 }

