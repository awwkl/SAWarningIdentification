GitDiffStart: 3b6b76593900f714a299928c8a324593ecbfc8df | Wed Oct 10 16:46:35 2007 +0000
diff --git a/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java b/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
index e259974..1feb2c4 100644
--- a/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
+++ b/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
@@ -43,6 +43,15 @@ public class ConcurrentMergeScheduler implements MergeScheduler {
   private List exceptions = new ArrayList();
   private Directory dir;
 
+  private boolean closed;
+
+  public ConcurrentMergeScheduler() {
+    if (allInstances != null) {
+      // Only for testing
+      addMyself();
+    }
+  }
+
   /** Sets the max # simultaneous threads that may be
    *  running.  If a merge is necessary yet we already have
    *  this many threads running, the merge is returned back
@@ -72,7 +81,7 @@ public class ConcurrentMergeScheduler implements MergeScheduler {
   public synchronized void setMergeThreadPriority(int pri) {
     mergeThreadPriority = pri;
 
-    final int numThreads = mergeThreads.size();
+    final int numThreads = mergeThreadCount();
     for(int i=0;i<numThreads;i++) {
       MergeThread merge = (MergeThread) mergeThreads.get(i);
       try {
@@ -84,12 +93,6 @@ public class ConcurrentMergeScheduler implements MergeScheduler {
     }
   }
 
-  /** Returns any exceptions that were caught in the merge
-   *  threads. */
-  public List getExceptions() {
-    return exceptions;
-  }
-
   private void message(String message) {
     System.out.println("CMS [" + Thread.currentThread().getName() + "]: " + message);
   }
@@ -101,10 +104,12 @@ public class ConcurrentMergeScheduler implements MergeScheduler {
       mergeThreadPriority = 1+Thread.currentThread().getPriority();
   }
 
-  public void close() {}
+  public void close() {
+    closed = true;
+  }
 
-  private synchronized void finishThreads() {
-    while(mergeThreads.size() > 0) {
+  public synchronized void sync() {
+    while(mergeThreadCount() > 0) {
       if (VERBOSE) {
         message("now wait for threads; currently " + mergeThreads.size() + " still running");
         for(int i=0;i<mergeThreads.size();i++)
@@ -117,20 +122,8 @@ public class ConcurrentMergeScheduler implements MergeScheduler {
       }
     }
   }
-
-  public void sync() {
-    finishThreads();
-  }
-
-  // Used for testing
-  private boolean suppressExceptions;
-
-  /** Used for testing */
-  void setSuppressExceptions() {
-    suppressExceptions = true;
-  }
-  void clearSuppressExceptions() {
-    suppressExceptions = false;
+  private synchronized int mergeThreadCount() {
+    return mergeThreads.size();
   }
 
   public void merge(IndexWriter writer)
@@ -179,7 +172,7 @@ public class ConcurrentMergeScheduler implements MergeScheduler {
           message("    merge involves segments from an external directory; now run in foreground");
       } else {
         synchronized(this) {
-          if (mergeThreads.size() < maxThreadCount) {
+          if (mergeThreadCount() < maxThreadCount) {
             // OK to spawn a new merge thread to handle this
             // merge:
             MergeThread merger = new MergeThread(writer, merge);
@@ -269,10 +262,12 @@ public class ConcurrentMergeScheduler implements MergeScheduler {
             exceptions.add(exc);
           }
           
-          if (!suppressExceptions)
+          if (!suppressExceptions) {
             // suppressExceptions is normally only set during
             // testing.
+            anyExceptions = true;
             throw new MergePolicy.MergeException(exc);
+          }
         }
       } finally {
         synchronized(ConcurrentMergeScheduler.this) {
@@ -289,4 +284,53 @@ public class ConcurrentMergeScheduler implements MergeScheduler {
       return "merge thread: " + merge.segString(dir);
     }
   }
+
+  static boolean anyExceptions = false;
+
+  /** Used for testing */
+  public static boolean anyUnhandledExceptions() {
+    synchronized(allInstances) {
+      final int count = allInstances.size();
+      // Make sure all outstanding threads are done so we see
+      // any exceptions they may produce:
+      for(int i=0;i<count;i++)
+        ((ConcurrentMergeScheduler) allInstances.get(i)).sync();
+      return anyExceptions;
+    }
+  }
+
+  /** Used for testing */
+  private void addMyself() {
+    synchronized(allInstances) {
+      final int size=0;
+      int upto = 0;
+      for(int i=0;i<size;i++) {
+        final ConcurrentMergeScheduler other = (ConcurrentMergeScheduler) allInstances.get(i);
+        if (!(other.closed && 0 == other.mergeThreadCount()))
+          // Keep this one for now: it still has threads or
+          // may spawn new threads
+          allInstances.set(upto++, other);
+      }
+      allInstances.subList(upto, allInstances.size()).clear();
+      allInstances.add(this);
+    }
+  }
+
+  private boolean suppressExceptions;
+
+  /** Used for testing */
+  void setSuppressExceptions() {
+    suppressExceptions = true;
+  }
+
+  /** Used for testing */
+  void clearSuppressExceptions() {
+    suppressExceptions = false;
+  }
+
+  /** Used for testing */
+  private static List allInstances;
+  public static void setTestMode() {
+    allInstances = new ArrayList();
+  }
 }
diff --git a/src/test/org/apache/lucene/TestDemo.java b/src/test/org/apache/lucene/TestDemo.java
index af47993..541e730 100644
--- a/src/test/org/apache/lucene/TestDemo.java
+++ b/src/test/org/apache/lucene/TestDemo.java
@@ -17,7 +17,7 @@ package org.apache.lucene;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.document.Document;
@@ -38,7 +38,7 @@ import java.io.IOException;
  * 
  * @author Daniel Naber
  */
-public class TestDemo extends TestCase {
+public class TestDemo extends LuceneTestCase {
 
   public void testDemo() throws IOException, ParseException {
 
diff --git a/src/test/org/apache/lucene/TestHitIterator.java b/src/test/org/apache/lucene/TestHitIterator.java
index 83c882c..0e84748 100644
--- a/src/test/org/apache/lucene/TestHitIterator.java
+++ b/src/test/org/apache/lucene/TestHitIterator.java
@@ -17,7 +17,7 @@ package org.apache.lucene;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Term;
@@ -36,7 +36,7 @@ import java.util.NoSuchElementException;
  * This test intentionally not put in the search package in order
  * to test HitIterator and Hit package protection.
  */
-public class TestHitIterator extends TestCase {
+public class TestHitIterator extends LuceneTestCase {
   public void testIterator() throws Exception {
     RAMDirectory directory = new RAMDirectory();
 
diff --git a/src/test/org/apache/lucene/TestSearch.java b/src/test/org/apache/lucene/TestSearch.java
index 1af7dae..e8cdc33 100644
--- a/src/test/org/apache/lucene/TestSearch.java
+++ b/src/test/org/apache/lucene/TestSearch.java
@@ -21,7 +21,7 @@ import java.util.GregorianCalendar;
 import java.io.PrintWriter;
 import java.io.StringWriter;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import junit.framework.TestSuite;
 import junit.textui.TestRunner;
 
@@ -36,7 +36,7 @@ import org.apache.lucene.queryParser.*;
  *
  * @version $Id$
  */
-public class TestSearch extends TestCase {
+public class TestSearch extends LuceneTestCase {
 
     /** Main for running test case by itself. */
     public static void main(String args[]) {
diff --git a/src/test/org/apache/lucene/TestSearchForDuplicates.java b/src/test/org/apache/lucene/TestSearchForDuplicates.java
index 0b79935..8ee5123 100644
--- a/src/test/org/apache/lucene/TestSearchForDuplicates.java
+++ b/src/test/org/apache/lucene/TestSearchForDuplicates.java
@@ -28,7 +28,7 @@ import org.apache.lucene.index.*;
 import org.apache.lucene.search.*;
 import org.apache.lucene.queryParser.*;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import junit.framework.TestSuite;
 import junit.textui.TestRunner;
 
@@ -37,7 +37,7 @@ import junit.textui.TestRunner;
  *
  * @version $Id$
  */
-public class TestSearchForDuplicates extends TestCase {
+public class TestSearchForDuplicates extends LuceneTestCase {
 
     /** Main for running test case by itself. */
     public static void main(String args[]) {
diff --git a/src/test/org/apache/lucene/analysis/TestAnalyzers.java b/src/test/org/apache/lucene/analysis/TestAnalyzers.java
index a33e344..76725f0 100644
--- a/src/test/org/apache/lucene/analysis/TestAnalyzers.java
+++ b/src/test/org/apache/lucene/analysis/TestAnalyzers.java
@@ -18,9 +18,9 @@ package org.apache.lucene.analysis;
  */
 
 import java.io.*;
-import junit.framework.*;
+import org.apache.lucene.util.LuceneTestCase;
 
-public class TestAnalyzers extends TestCase {
+public class TestAnalyzers extends LuceneTestCase {
 
    public TestAnalyzers(String name) {
       super(name);
diff --git a/src/test/org/apache/lucene/analysis/TestCachingTokenFilter.java b/src/test/org/apache/lucene/analysis/TestCachingTokenFilter.java
index ead291f..d7222ee 100644
--- a/src/test/org/apache/lucene/analysis/TestCachingTokenFilter.java
+++ b/src/test/org/apache/lucene/analysis/TestCachingTokenFilter.java
@@ -20,7 +20,7 @@ package org.apache.lucene.analysis;
 
 import java.io.IOException;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -32,7 +32,7 @@ import org.apache.lucene.index.TermPositions;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 
-public class TestCachingTokenFilter extends TestCase {
+public class TestCachingTokenFilter extends LuceneTestCase {
   private String[] tokens = new String[] {"term1", "term2", "term3", "term2"};
   
   public void testCaching() throws IOException {
diff --git a/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter.java b/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter.java
index 8abf2aa..7eaea81 100644
--- a/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter.java
+++ b/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter.java
@@ -17,11 +17,11 @@ package org.apache.lucene.analysis;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.io.StringReader;
 
-public class TestISOLatin1AccentFilter extends TestCase {
+public class TestISOLatin1AccentFilter extends LuceneTestCase {
   public void testU() throws Exception {
     TokenStream stream = new WhitespaceTokenizer(new StringReader("Des mot clés ? LA CHA?NE ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? Ÿ ? á â ã ä å æ ç è é ê ë ì í î ï ð ñ ò ó ô õ ö ø ? ? þ ù ú û ü ý ÿ"));
     ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);
diff --git a/src/test/org/apache/lucene/analysis/TestKeywordAnalyzer.java b/src/test/org/apache/lucene/analysis/TestKeywordAnalyzer.java
index faca40b..00ddea9 100644
--- a/src/test/org/apache/lucene/analysis/TestKeywordAnalyzer.java
+++ b/src/test/org/apache/lucene/analysis/TestKeywordAnalyzer.java
@@ -17,7 +17,7 @@ package org.apache.lucene.analysis;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.document.Document;
@@ -27,12 +27,13 @@ import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Hits;
 import org.apache.lucene.queryParser.QueryParser;
 
-public class TestKeywordAnalyzer extends TestCase {
+public class TestKeywordAnalyzer extends LuceneTestCase {
   
   private RAMDirectory directory;
   private IndexSearcher searcher;
 
   public void setUp() throws Exception {
+    super.setUp();
     directory = new RAMDirectory();
     IndexWriter writer = new IndexWriter(directory,
                                          new SimpleAnalyzer(),
diff --git a/src/test/org/apache/lucene/analysis/TestLengthFilter.java b/src/test/org/apache/lucene/analysis/TestLengthFilter.java
index ff6ef22..88bf99f 100644
--- a/src/test/org/apache/lucene/analysis/TestLengthFilter.java
+++ b/src/test/org/apache/lucene/analysis/TestLengthFilter.java
@@ -17,11 +17,11 @@ package org.apache.lucene.analysis;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.io.StringReader;
 
-public class TestLengthFilter extends TestCase {
+public class TestLengthFilter extends LuceneTestCase {
   
   public void testFilter() throws Exception {
     TokenStream stream = new WhitespaceTokenizer(
diff --git a/src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper.java b/src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper.java
index 30b2609..fc54e46 100644
--- a/src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper.java
+++ b/src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper.java
@@ -1,6 +1,6 @@
 package org.apache.lucene.analysis;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import java.io.StringReader;
 
 /**
@@ -20,7 +20,7 @@ import java.io.StringReader;
  * limitations under the License.
  */
 
-public class TestPerFieldAnalzyerWrapper extends TestCase {
+public class TestPerFieldAnalzyerWrapper extends LuceneTestCase {
   public void testPerField() throws Exception {
     String text = "Qwerty";
     PerFieldAnalyzerWrapper analyzer =
diff --git a/src/test/org/apache/lucene/analysis/TestStandardAnalyzer.java b/src/test/org/apache/lucene/analysis/TestStandardAnalyzer.java
index c73b79d..3e9900b 100644
--- a/src/test/org/apache/lucene/analysis/TestStandardAnalyzer.java
+++ b/src/test/org/apache/lucene/analysis/TestStandardAnalyzer.java
@@ -1,6 +1,6 @@
 package org.apache.lucene.analysis;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 
 import java.io.StringReader;
@@ -21,7 +21,7 @@ import java.io.StringReader;
  * limitations under the License.
  */
 
-public class TestStandardAnalyzer extends TestCase {
+public class TestStandardAnalyzer extends LuceneTestCase {
 
     private Analyzer a = new StandardAnalyzer();
 
diff --git a/src/test/org/apache/lucene/analysis/TestStopAnalyzer.java b/src/test/org/apache/lucene/analysis/TestStopAnalyzer.java
index 2f052ea..12970d0 100644
--- a/src/test/org/apache/lucene/analysis/TestStopAnalyzer.java
+++ b/src/test/org/apache/lucene/analysis/TestStopAnalyzer.java
@@ -17,14 +17,14 @@ package org.apache.lucene.analysis;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.io.StringReader;
 import java.io.IOException;
 import java.util.Set;
 import java.util.HashSet;
 
-public class TestStopAnalyzer extends TestCase {
+public class TestStopAnalyzer extends LuceneTestCase {
   
   private StopAnalyzer stop = new StopAnalyzer();
   private Set inValidTokens = new HashSet();
@@ -33,7 +33,8 @@ public class TestStopAnalyzer extends TestCase {
     super(s);
   }
 
-  protected void setUp() {
+  protected void setUp() throws Exception {
+    super.setUp();
     for (int i = 0; i < StopAnalyzer.ENGLISH_STOP_WORDS.length; i++) {
       inValidTokens.add(StopAnalyzer.ENGLISH_STOP_WORDS[i]);
     }
diff --git a/src/test/org/apache/lucene/analysis/TestStopFilter.java b/src/test/org/apache/lucene/analysis/TestStopFilter.java
index 72ab710..d68e66f 100644
--- a/src/test/org/apache/lucene/analysis/TestStopFilter.java
+++ b/src/test/org/apache/lucene/analysis/TestStopFilter.java
@@ -19,12 +19,12 @@ package org.apache.lucene.analysis;
 import java.io.IOException;
 import java.io.StringReader;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 /**
  * @author yonik
  */
-public class TestStopFilter extends TestCase {
+public class TestStopFilter extends LuceneTestCase {
 
   // other StopFilter functionality is already tested by TestStopAnalyzer
 
diff --git a/src/test/org/apache/lucene/analysis/TestToken.java b/src/test/org/apache/lucene/analysis/TestToken.java
index a95fa32..2e403fa 100644
--- a/src/test/org/apache/lucene/analysis/TestToken.java
+++ b/src/test/org/apache/lucene/analysis/TestToken.java
@@ -18,9 +18,9 @@ package org.apache.lucene.analysis;
  */
 
 import java.io.*;
-import junit.framework.*;
+import org.apache.lucene.util.LuceneTestCase;
 
-public class TestToken extends TestCase {
+public class TestToken extends LuceneTestCase {
 
   public TestToken(String name) {
     super(name);
diff --git a/src/test/org/apache/lucene/document/TestBinaryDocument.java b/src/test/org/apache/lucene/document/TestBinaryDocument.java
index 84223aa..b75800a 100644
--- a/src/test/org/apache/lucene/document/TestBinaryDocument.java
+++ b/src/test/org/apache/lucene/document/TestBinaryDocument.java
@@ -1,6 +1,6 @@
 package org.apache.lucene.document;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.index.IndexReader;
@@ -30,7 +30,7 @@ import org.apache.lucene.store.RAMDirectory;
  *
  * @version $Id$
  */
-public class TestBinaryDocument extends TestCase
+public class TestBinaryDocument extends LuceneTestCase
 {
 
   String binaryValStored = "this text will be stored as a byte array in the index";
diff --git a/src/test/org/apache/lucene/document/TestDateTools.java b/src/test/org/apache/lucene/document/TestDateTools.java
index 4d6e304..e27d2a5 100644
--- a/src/test/org/apache/lucene/document/TestDateTools.java
+++ b/src/test/org/apache/lucene/document/TestDateTools.java
@@ -6,7 +6,7 @@ import java.util.Calendar;
 import java.util.Date;
 import java.util.TimeZone;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 /**
  * Licensed to the Apache Software Foundation (ASF) under one or more
@@ -25,7 +25,7 @@ import junit.framework.TestCase;
  * limitations under the License.
  */
 
-public class TestDateTools extends TestCase {
+public class TestDateTools extends LuceneTestCase {
 
   public void testStringToDate() throws ParseException {
     
diff --git a/src/test/org/apache/lucene/document/TestDocument.java b/src/test/org/apache/lucene/document/TestDocument.java
index 682ed8a..ef1d85e 100644
--- a/src/test/org/apache/lucene/document/TestDocument.java
+++ b/src/test/org/apache/lucene/document/TestDocument.java
@@ -1,6 +1,6 @@
 package org.apache.lucene.document;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.document.Document;
@@ -37,7 +37,7 @@ import org.apache.lucene.search.Hits;
  *
  * @version $Id$
  */
-public class TestDocument extends TestCase
+public class TestDocument extends LuceneTestCase
 {
 
   String binaryVal = "this text will be stored as a byte array in the index";
diff --git a/src/test/org/apache/lucene/document/TestNumberTools.java b/src/test/org/apache/lucene/document/TestNumberTools.java
index 91cda14..e457b33 100644
--- a/src/test/org/apache/lucene/document/TestNumberTools.java
+++ b/src/test/org/apache/lucene/document/TestNumberTools.java
@@ -17,9 +17,9 @@ package org.apache.lucene.document;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
-public class TestNumberTools extends TestCase {
+public class TestNumberTools extends LuceneTestCase {
     public void testNearZero() {
         for (int i = -100; i <= 100; i++) {
             for (int j = -100; j <= 100; j++) {
diff --git a/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java b/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java
index 38a0318..70e9c33 100755
--- a/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java
+++ b/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java
@@ -19,7 +19,7 @@ package org.apache.lucene.index;
 
 import java.io.IOException;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
 import org.apache.lucene.document.Document;
@@ -29,7 +29,7 @@ import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 
-public class TestAddIndexesNoOptimize extends TestCase {
+public class TestAddIndexesNoOptimize extends LuceneTestCase {
   public void testSimpleCase() throws IOException {
     // main directory
     Directory dir = new RAMDirectory();
diff --git a/src/test/org/apache/lucene/index/TestAtomicUpdate.java b/src/test/org/apache/lucene/index/TestAtomicUpdate.java
index c2a1d9b..f6a698c 100644
--- a/src/test/org/apache/lucene/index/TestAtomicUpdate.java
+++ b/src/test/org/apache/lucene/index/TestAtomicUpdate.java
@@ -25,12 +25,12 @@ import org.apache.lucene.search.*;
 import org.apache.lucene.queryParser.*;
 import org.apache.lucene.util._TestUtil;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.util.Random;
 import java.io.File;
 
-public class TestAtomicUpdate extends TestCase {
+public class TestAtomicUpdate extends LuceneTestCase {
   private static final Analyzer ANALYZER = new SimpleAnalyzer();
   private static final Random RANDOM = new Random();
 
diff --git a/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java b/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
index 26933b8..0e65f27 100644
--- a/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
+++ b/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
@@ -17,7 +17,7 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import java.util.Vector;
 import java.util.Arrays;
 import java.io.ByteArrayOutputStream;
@@ -42,7 +42,7 @@ import java.util.zip.*;
   against it, and add documents to it.
 */
 
-public class TestBackwardsCompatibility extends TestCase
+public class TestBackwardsCompatibility extends LuceneTestCase
 {
 
   // Uncomment these cases & run in a pre-lockless checkout
diff --git a/src/test/org/apache/lucene/index/TestCompoundFile.java b/src/test/org/apache/lucene/index/TestCompoundFile.java
index e378e4b..de0b617 100644
--- a/src/test/org/apache/lucene/index/TestCompoundFile.java
+++ b/src/test/org/apache/lucene/index/TestCompoundFile.java
@@ -20,7 +20,7 @@ package org.apache.lucene.index;
 import java.io.IOException;
 import java.io.File;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import junit.framework.TestSuite;
 import junit.textui.TestRunner;
 import org.apache.lucene.store.IndexOutput;
@@ -35,7 +35,7 @@ import org.apache.lucene.util._TestUtil;
  *
  * @version $Id$
  */
-public class TestCompoundFile extends TestCase
+public class TestCompoundFile extends LuceneTestCase
 {
     /** Main for running test case by itself. */
     public static void main(String args[]) {
@@ -58,7 +58,8 @@ public class TestCompoundFile extends TestCase
     private Directory dir;
 
 
-    public void setUp() throws IOException {
+    public void setUp() throws Exception {
+       super.setUp();
        File file = new File(System.getProperty("tempDir"), "testIndex");
        _TestUtil.rmDir(file);
        dir = FSDirectory.getDirectory(file);
diff --git a/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java b/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java
index 8d57da8..5364cf6 100644
--- a/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java
+++ b/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java
@@ -28,12 +28,12 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.util._TestUtil;
 import org.apache.lucene.util.English;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.io.IOException;
 import java.io.File;
 
-public class TestConcurrentMergeScheduler extends TestCase {
+public class TestConcurrentMergeScheduler extends LuceneTestCase {
   
   private static final Analyzer ANALYZER = new SimpleAnalyzer();
 
@@ -94,8 +94,6 @@ public class TestConcurrentMergeScheduler extends TestCase {
       }
     }
 
-    assertEquals(0, cms.getExceptions().size());
-
     writer.close();
     IndexReader reader = IndexReader.open(directory);
     assertEquals(200, reader.numDocs());
@@ -139,8 +137,6 @@ public class TestConcurrentMergeScheduler extends TestCase {
       writer.flush();
     }
 
-    assertEquals(0, cms.getExceptions().size());
-
     writer.close();
     IndexReader reader = IndexReader.open(directory);
     // Verify that we did not lose any deletes...
@@ -171,7 +167,6 @@ public class TestConcurrentMergeScheduler extends TestCase {
         
         writer.close();
         TestIndexWriter.assertNoUnreferencedFiles(directory, "testNoExtraFiles autoCommit=" + autoCommit);
-        assertEquals(0, cms.getExceptions().size());
 
         // Reopen
         writer = new IndexWriter(directory, autoCommit, ANALYZER, false);
@@ -211,7 +206,6 @@ public class TestConcurrentMergeScheduler extends TestCase {
         }
 
         writer.close(false);
-        assertEquals(0, cms.getExceptions().size());
 
         IndexReader reader = IndexReader.open(directory);
         assertEquals((1+iter)*181, reader.numDocs());
diff --git a/src/test/org/apache/lucene/index/TestDeletionPolicy.java b/src/test/org/apache/lucene/index/TestDeletionPolicy.java
index 7f1461a..d7d146d 100644
--- a/src/test/org/apache/lucene/index/TestDeletionPolicy.java
+++ b/src/test/org/apache/lucene/index/TestDeletionPolicy.java
@@ -17,7 +17,7 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.io.IOException;
 
@@ -40,7 +40,7 @@ import java.util.HashSet;
   against it, and add documents to it.
 */
 
-public class TestDeletionPolicy extends TestCase
+public class TestDeletionPolicy extends LuceneTestCase
 {
   private void verifyCommitOrder(List commits) {
     long last = SegmentInfos.generationFromSegmentsFileName(((IndexCommitPoint) commits.get(0)).getSegmentsFileName());
diff --git a/src/test/org/apache/lucene/index/TestDoc.java b/src/test/org/apache/lucene/index/TestDoc.java
index 7b96fbd..343a3a3 100644
--- a/src/test/org/apache/lucene/index/TestDoc.java
+++ b/src/test/org/apache/lucene/index/TestDoc.java
@@ -16,7 +16,7 @@ package org.apache.lucene.index;
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import junit.framework.TestSuite;
 import junit.textui.TestRunner;
 
@@ -37,7 +37,7 @@ import java.util.*;
  *
  * @version $Id$
  */
-public class TestDoc extends TestCase {
+public class TestDoc extends LuceneTestCase {
 
     /** Main for running test case by itself. */
     public static void main(String args[]) {
@@ -53,7 +53,8 @@ public class TestDoc extends TestCase {
     /** Set the test case. This test case needs
      *  a few text files created in the current working directory.
      */
-    public void setUp() throws IOException {
+    public void setUp() throws Exception {
+        super.setUp();
         workDir = new File(System.getProperty("tempDir"),"TestDoc");
         workDir.mkdirs();
 
diff --git a/src/test/org/apache/lucene/index/TestDocumentWriter.java b/src/test/org/apache/lucene/index/TestDocumentWriter.java
index 2d63306..ea59610 100644
--- a/src/test/org/apache/lucene/index/TestDocumentWriter.java
+++ b/src/test/org/apache/lucene/index/TestDocumentWriter.java
@@ -17,7 +17,7 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.SimpleAnalyzer;
 import org.apache.lucene.analysis.Token;
@@ -34,24 +34,20 @@ import java.io.IOException;
 
 import java.util.Arrays;
 
-public class TestDocumentWriter extends TestCase {
+public class TestDocumentWriter extends LuceneTestCase {
   private RAMDirectory dir;
 
   public TestDocumentWriter(String s) {
     super(s);
   }
 
-  protected void setUp() {
+  protected void setUp() throws Exception {
+    super.setUp();
     dir = new RAMDirectory();
   }
 
-  protected void tearDown() {
-
-  }
-
   public void test() {
     assertTrue(dir != null);
-
   }
 
   public void testAddDocument() throws Exception {
diff --git a/src/test/org/apache/lucene/index/TestFieldInfos.java b/src/test/org/apache/lucene/index/TestFieldInfos.java
index 1dc5265..aebc3ee 100644
--- a/src/test/org/apache/lucene/index/TestFieldInfos.java
+++ b/src/test/org/apache/lucene/index/TestFieldInfos.java
@@ -17,7 +17,7 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.store.IndexOutput;
@@ -26,7 +26,7 @@ import java.io.IOException;
 
 //import org.cnlp.utils.properties.ResourceBundleHelper;
 
-public class TestFieldInfos extends TestCase {
+public class TestFieldInfos extends LuceneTestCase {
 
   private Document testDoc = new Document();
 
@@ -34,13 +34,11 @@ public class TestFieldInfos extends TestCase {
     super(s);
   }
 
-  protected void setUp() {
+  protected void setUp() throws Exception {
+    super.setUp();
     DocHelper.setupDoc(testDoc);
   }
 
-  protected void tearDown() {
-  }
-
   public void test() throws IOException {
     //Positive test of FieldInfos
     assertTrue(testDoc != null);
diff --git a/src/test/org/apache/lucene/index/TestFieldsReader.java b/src/test/org/apache/lucene/index/TestFieldsReader.java
index 39a1ac6..79454c9 100644
--- a/src/test/org/apache/lucene/index/TestFieldsReader.java
+++ b/src/test/org/apache/lucene/index/TestFieldsReader.java
@@ -17,7 +17,7 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
 import org.apache.lucene.document.*;
 import org.apache.lucene.search.Similarity;
@@ -30,7 +30,7 @@ import java.io.File;
 import java.io.IOException;
 import java.util.*;
 
-public class TestFieldsReader extends TestCase {
+public class TestFieldsReader extends LuceneTestCase {
   private RAMDirectory dir = new RAMDirectory();
   private Document testDoc = new Document();
   private FieldInfos fieldInfos = null;
@@ -41,7 +41,8 @@ public class TestFieldsReader extends TestCase {
     super(s);
   }
 
-  protected void setUp() throws IOException {
+  protected void setUp() throws Exception {
+    super.setUp();
     fieldInfos = new FieldInfos();
     DocHelper.setupDoc(testDoc);
     fieldInfos.add(testDoc);
diff --git a/src/test/org/apache/lucene/index/TestFilterIndexReader.java b/src/test/org/apache/lucene/index/TestFilterIndexReader.java
index 90bae22..7cd8b52 100644
--- a/src/test/org/apache/lucene/index/TestFilterIndexReader.java
+++ b/src/test/org/apache/lucene/index/TestFilterIndexReader.java
@@ -18,7 +18,7 @@ package org.apache.lucene.index;
  */
 
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import junit.framework.TestSuite;
 import junit.textui.TestRunner;
 
@@ -30,7 +30,7 @@ import org.apache.lucene.document.Field;
 
 import java.io.IOException;
 
-public class TestFilterIndexReader extends TestCase {
+public class TestFilterIndexReader extends LuceneTestCase {
 
   private static class TestReader extends FilterIndexReader {
 
diff --git a/src/test/org/apache/lucene/index/TestIndexFileDeleter.java b/src/test/org/apache/lucene/index/TestIndexFileDeleter.java
index e65ee3e..6a34292 100644
--- a/src/test/org/apache/lucene/index/TestIndexFileDeleter.java
+++ b/src/test/org/apache/lucene/index/TestIndexFileDeleter.java
@@ -17,7 +17,7 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import java.util.Vector;
 import java.util.Arrays;
 import java.io.ByteArrayOutputStream;
@@ -44,7 +44,7 @@ import java.util.zip.*;
   against it, and add documents to it.
 */
 
-public class TestIndexFileDeleter extends TestCase
+public class TestIndexFileDeleter extends LuceneTestCase
 {
   public void testDeleteLeftoverFiles() throws IOException {
 
diff --git a/src/test/org/apache/lucene/index/TestIndexInput.java b/src/test/org/apache/lucene/index/TestIndexInput.java
index 7d51187..d3c727d 100644
--- a/src/test/org/apache/lucene/index/TestIndexInput.java
+++ b/src/test/org/apache/lucene/index/TestIndexInput.java
@@ -17,12 +17,12 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.store.IndexInput;
 
 import java.io.IOException;
 
-public class TestIndexInput extends TestCase {
+public class TestIndexInput extends LuceneTestCase {
   public void testRead() throws IOException {
     IndexInput is = new MockIndexInput(new byte[]{(byte) 0x80, 0x01,
             (byte) 0xFF, 0x7F,
diff --git a/src/test/org/apache/lucene/index/TestIndexModifier.java b/src/test/org/apache/lucene/index/TestIndexModifier.java
index d610f2b..cd89051 100644
--- a/src/test/org/apache/lucene/index/TestIndexModifier.java
+++ b/src/test/org/apache/lucene/index/TestIndexModifier.java
@@ -17,7 +17,7 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.SimpleAnalyzer;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
@@ -42,7 +42,7 @@ import java.util.Stack;
  * @author Daniel Naber
  * @deprecated
  */
-public class TestIndexModifier extends TestCase {
+public class TestIndexModifier extends LuceneTestCase {
 
   private int docCount = 0;
   
diff --git a/src/test/org/apache/lucene/index/TestIndexReader.java b/src/test/org/apache/lucene/index/TestIndexReader.java
index acd288a..257166f 100644
--- a/src/test/org/apache/lucene/index/TestIndexReader.java
+++ b/src/test/org/apache/lucene/index/TestIndexReader.java
@@ -18,7 +18,7 @@ package org.apache.lucene.index;
  */
 
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import junit.framework.TestSuite;
 import junit.textui.TestRunner;
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
@@ -36,7 +36,7 @@ import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.util.*;
 
-public class TestIndexReader extends TestCase
+public class TestIndexReader extends LuceneTestCase
 {
     /** Main for running test case by itself. */
     public static void main(String args[]) {
diff --git a/src/test/org/apache/lucene/index/TestIndexWriter.java b/src/test/org/apache/lucene/index/TestIndexWriter.java
index a171612..91d9ce2 100644
--- a/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ b/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -22,7 +22,7 @@ import java.io.File;
 import java.util.Arrays;
 import java.util.Random;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
@@ -50,7 +50,7 @@ import org.apache.lucene.store.SingleInstanceLockFactory;
  *
  * @version $Id$
  */
-public class TestIndexWriter extends TestCase
+public class TestIndexWriter extends LuceneTestCase
 {
     public void testDocCount() throws IOException
     {
diff --git a/src/test/org/apache/lucene/index/TestIndexWriterDelete.java b/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
index 0b87677..d911e46 100644
--- a/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
+++ b/src/test/org/apache/lucene/index/TestIndexWriterDelete.java
@@ -21,7 +21,7 @@ import java.io.IOException;
 import java.util.Arrays;
 import java.lang.StackTraceElement;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
 import org.apache.lucene.document.Document;
@@ -33,7 +33,7 @@ import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.MockRAMDirectory;
 import org.apache.lucene.store.RAMDirectory;
 
-public class TestIndexWriterDelete extends TestCase {
+public class TestIndexWriterDelete extends LuceneTestCase {
 
   // test the simple case
   public void testSimpleCase() throws IOException {
diff --git a/src/test/org/apache/lucene/index/TestIndexWriterLockRelease.java b/src/test/org/apache/lucene/index/TestIndexWriterLockRelease.java
index 0416962..8736249 100644
--- a/src/test/org/apache/lucene/index/TestIndexWriterLockRelease.java
+++ b/src/test/org/apache/lucene/index/TestIndexWriterLockRelease.java
@@ -20,7 +20,7 @@ package org.apache.lucene.index;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.index.IndexWriter;
 
 /**
@@ -32,10 +32,11 @@ import org.apache.lucene.index.IndexWriter;
  * @version $Id$
  */
 
-public class TestIndexWriterLockRelease extends TestCase {
+public class TestIndexWriterLockRelease extends LuceneTestCase {
     private java.io.File __test_dir;
 
-    public void setUp() throws IOException {
+    public void setUp() throws Exception {
+        super.setUp();
         if (this.__test_dir == null) {
             String tmp_dir = System.getProperty("java.io.tmpdir", "tmp");
             this.__test_dir = new File(tmp_dir, "testIndexWriter");
@@ -51,7 +52,8 @@ public class TestIndexWriterLockRelease extends TestCase {
         }
     }
 
-    public void tearDown() throws IOException {
+    public void tearDown() throws Exception {
+        super.tearDown();
         if (this.__test_dir != null) {
             File[] files = this.__test_dir.listFiles();
 
diff --git a/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy.java b/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy.java
index 10c35ac..b696ae0 100755
--- a/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy.java
+++ b/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy.java
@@ -26,9 +26,9 @@ import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.util._TestUtil;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
-public class TestIndexWriterMergePolicy extends TestCase {
+public class TestIndexWriterMergePolicy extends LuceneTestCase {
 
   // Test the normal case
   public void testNormalCase() throws IOException {
diff --git a/src/test/org/apache/lucene/index/TestIndexWriterMerging.java b/src/test/org/apache/lucene/index/TestIndexWriterMerging.java
index e213726..915e084 100644
--- a/src/test/org/apache/lucene/index/TestIndexWriterMerging.java
+++ b/src/test/org/apache/lucene/index/TestIndexWriterMerging.java
@@ -20,12 +20,12 @@ import org.apache.lucene.store.MockRAMDirectory;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.io.IOException;
 
 
-public class TestIndexWriterMerging extends TestCase
+public class TestIndexWriterMerging extends LuceneTestCase
 {
 
   /**
diff --git a/src/test/org/apache/lucene/index/TestLazyBug.java b/src/test/org/apache/lucene/index/TestLazyBug.java
index 7e75bf3..1965f64 100755
--- a/src/test/org/apache/lucene/index/TestLazyBug.java
+++ b/src/test/org/apache/lucene/index/TestLazyBug.java
@@ -17,7 +17,7 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.SimpleAnalyzer;
 import org.apache.lucene.document.*;
@@ -32,7 +32,7 @@ import java.lang.reflect.Array;
  * Test demonstrating EOF bug on the last field of the last doc 
  * if other docs have allready been accessed.
  */
-public class TestLazyBug extends TestCase {
+public class TestLazyBug extends LuceneTestCase {
 
   public static int BASE_SEED = 13;
 
diff --git a/src/test/org/apache/lucene/index/TestLazyProxSkipping.java b/src/test/org/apache/lucene/index/TestLazyProxSkipping.java
index abdfe21..229241b 100755
--- a/src/test/org/apache/lucene/index/TestLazyProxSkipping.java
+++ b/src/test/org/apache/lucene/index/TestLazyProxSkipping.java
@@ -30,13 +30,13 @@ import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.store.RAMDirectory;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 /**
  * Tests lazy skipping on the proximity file.
  *
  */
-public class TestLazyProxSkipping extends TestCase {
+public class TestLazyProxSkipping extends LuceneTestCase {
     private Searcher searcher;
     private int seeksCounter = 0;
     
diff --git a/src/test/org/apache/lucene/index/TestMultiLevelSkipList.java b/src/test/org/apache/lucene/index/TestMultiLevelSkipList.java
index bee96d5..b29306b 100644
--- a/src/test/org/apache/lucene/index/TestMultiLevelSkipList.java
+++ b/src/test/org/apache/lucene/index/TestMultiLevelSkipList.java
@@ -20,7 +20,7 @@ package org.apache.lucene.index;
 import java.io.IOException;
 import java.io.Reader;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.LowerCaseTokenizer;
@@ -42,7 +42,7 @@ import org.apache.lucene.store.RAMDirectory;
  * testcases.
  * 
  */
-public class TestMultiLevelSkipList extends TestCase {
+public class TestMultiLevelSkipList extends LuceneTestCase {
   public void testSimpleSkip() throws IOException {
     RAMDirectory dir = new RAMDirectory();
     IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true);
diff --git a/src/test/org/apache/lucene/index/TestMultiSegmentReader.java b/src/test/org/apache/lucene/index/TestMultiSegmentReader.java
index 95675c8..c85d678 100644
--- a/src/test/org/apache/lucene/index/TestMultiSegmentReader.java
+++ b/src/test/org/apache/lucene/index/TestMultiSegmentReader.java
@@ -17,7 +17,7 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.document.Document;
@@ -27,7 +27,7 @@ import org.apache.lucene.store.RAMDirectory;
 
 import java.io.IOException;
 
-public class TestMultiSegmentReader extends TestCase {
+public class TestMultiSegmentReader extends LuceneTestCase {
   protected Directory dir;
   private Document doc1;
   private Document doc2;
@@ -39,7 +39,8 @@ public class TestMultiSegmentReader extends TestCase {
     super(s);
   }
 
-  protected void setUp() throws IOException {
+  protected void setUp() throws Exception {
+    super.setUp();
     dir = new RAMDirectory();
     doc1 = new Document();
     doc2 = new Document();
@@ -63,7 +64,7 @@ public class TestMultiSegmentReader extends TestCase {
     return reader;
   }
 
-  public void test() throws IOException {
+  public void test() throws Exception {
     setUp();
     doTestDocument();
     doTestUndeleteAll();
diff --git a/src/test/org/apache/lucene/index/TestNorms.java b/src/test/org/apache/lucene/index/TestNorms.java
index 3a84faf..1b66269 100755
--- a/src/test/org/apache/lucene/index/TestNorms.java
+++ b/src/test/org/apache/lucene/index/TestNorms.java
@@ -17,7 +17,7 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
@@ -38,7 +38,7 @@ import java.util.ArrayList;
  * Test that norms info is preserved during index life - including
  * separate norms, addDocument, addIndexes, optimize.
  */
-public class TestNorms extends TestCase {
+public class TestNorms extends LuceneTestCase {
 
   private class SimilarityOne extends DefaultSimilarity {
     public float lengthNorm(String fieldName, int numTerms) {
@@ -60,14 +60,12 @@ public class TestNorms extends TestCase {
     super(s);
   }
 
-  protected void setUp() throws IOException {
+  protected void setUp() throws Exception {
+    super.setUp();
     similarityOne = new SimilarityOne();
     anlzr = new StandardAnalyzer();
   }
 
-  protected void tearDown() throws IOException {
-  }
-
   /**
    * Test that norms values are preserved as the index is maintained.
    * Including separate norms.
diff --git a/src/test/org/apache/lucene/index/TestParallelReader.java b/src/test/org/apache/lucene/index/TestParallelReader.java
index 39dd154..a813b74 100644
--- a/src/test/org/apache/lucene/index/TestParallelReader.java
+++ b/src/test/org/apache/lucene/index/TestParallelReader.java
@@ -21,7 +21,7 @@ import java.io.IOException;
 import java.util.Arrays;
 import java.util.Collection;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.document.Document;
@@ -38,12 +38,13 @@ import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.store.MockRAMDirectory;
 
-public class TestParallelReader extends TestCase {
+public class TestParallelReader extends LuceneTestCase {
 
   private Searcher parallel;
   private Searcher single;
   
   protected void setUp() throws Exception {
+    super.setUp();
     single = single();
     parallel = parallel();
   }
diff --git a/src/test/org/apache/lucene/index/TestParallelTermEnum.java b/src/test/org/apache/lucene/index/TestParallelTermEnum.java
index 6d4d8a6..573428c 100755
--- a/src/test/org/apache/lucene/index/TestParallelTermEnum.java
+++ b/src/test/org/apache/lucene/index/TestParallelTermEnum.java
@@ -19,7 +19,7 @@ package org.apache.lucene.index;
 
 import java.io.IOException;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.SimpleAnalyzer;
 import org.apache.lucene.document.Document;
@@ -28,12 +28,13 @@ import org.apache.lucene.document.Field.Index;
 import org.apache.lucene.document.Field.Store;
 import org.apache.lucene.store.RAMDirectory;
 
-public class TestParallelTermEnum extends TestCase {
+public class TestParallelTermEnum extends LuceneTestCase {
     private IndexReader ir1;
     private IndexReader ir2;
 
     protected void setUp() throws Exception {
         super.setUp();
+        super.setUp();
         Document doc;
 
         RAMDirectory rd1 = new RAMDirectory();
@@ -67,6 +68,7 @@ public class TestParallelTermEnum extends TestCase {
 
     protected void tearDown() throws Exception {
         super.tearDown();
+        super.tearDown();
 
         ir1.close();
         ir2.close();
diff --git a/src/test/org/apache/lucene/index/TestPayloads.java b/src/test/org/apache/lucene/index/TestPayloads.java
index a9d1791..d8cf4696 100644
--- a/src/test/org/apache/lucene/index/TestPayloads.java
+++ b/src/test/org/apache/lucene/index/TestPayloads.java
@@ -26,7 +26,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Random;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.Token;
@@ -41,7 +41,7 @@ import org.apache.lucene.store.FSDirectory;
 import org.apache.lucene.store.RAMDirectory;
 
 
-public class TestPayloads extends TestCase {
+public class TestPayloads extends LuceneTestCase {
     
     // Simple tests to test the Payload class
     public void testPayload() throws Exception {
diff --git a/src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper.java b/src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper.java
index fb82b01..06adf0d 100644
--- a/src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper.java
+++ b/src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper.java
@@ -15,14 +15,14 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.io.IOException;
 import java.util.BitSet;
 import java.util.Iterator;
 import java.util.Map;
 
-public class TestPositionBasedTermVectorMapper extends TestCase {
+public class TestPositionBasedTermVectorMapper extends LuceneTestCase {
   protected String[] tokens;
   protected int[][] thePositions;
   protected TermVectorOffsetInfo[][] offsets;
@@ -33,7 +33,8 @@ public class TestPositionBasedTermVectorMapper extends TestCase {
     super(s);
   }
 
-  protected void setUp() {
+  protected void setUp() throws Exception {
+    super.setUp();
     tokens = new String[]{"here", "is", "some", "text", "to", "test", "extra"};
     thePositions = new int[tokens.length][];
     offsets = new TermVectorOffsetInfo[tokens.length][];
@@ -57,10 +58,6 @@ public class TestPositionBasedTermVectorMapper extends TestCase {
     offsets[tokens.length - 1][0] = new TermVectorOffsetInfo(0, 1);
   }
 
-  protected void tearDown() {
-
-  }
-
   public void test() throws IOException {
     PositionBasedTermVectorMapper mapper = new PositionBasedTermVectorMapper();
     
@@ -104,4 +101,4 @@ public class TestPositionBasedTermVectorMapper extends TestCase {
 
 
   
-}
\ No newline at end of file
+}
diff --git a/src/test/org/apache/lucene/index/TestSegmentMerger.java b/src/test/org/apache/lucene/index/TestSegmentMerger.java
index 3fdb7aa..033d0e5 100644
--- a/src/test/org/apache/lucene/index/TestSegmentMerger.java
+++ b/src/test/org/apache/lucene/index/TestSegmentMerger.java
@@ -17,7 +17,7 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.document.Document;
@@ -25,7 +25,7 @@ import org.apache.lucene.document.Document;
 import java.io.IOException;
 import java.util.Collection;
 
-public class TestSegmentMerger extends TestCase {
+public class TestSegmentMerger extends LuceneTestCase {
   //The variables for the new merged segment
   private Directory mergedDir = new RAMDirectory();
   private String mergedSegment = "test";
@@ -43,7 +43,8 @@ public class TestSegmentMerger extends TestCase {
     super(s);
   }
 
-  protected void setUp() throws IOException {
+  protected void setUp() throws Exception {
+    super.setUp();
     DocHelper.setupDoc(doc1);
     SegmentInfo info1 = DocHelper.writeDoc(merge1Dir, doc1);
     DocHelper.setupDoc(doc2);
diff --git a/src/test/org/apache/lucene/index/TestSegmentReader.java b/src/test/org/apache/lucene/index/TestSegmentReader.java
index 48df3f8..c952746 100644
--- a/src/test/org/apache/lucene/index/TestSegmentReader.java
+++ b/src/test/org/apache/lucene/index/TestSegmentReader.java
@@ -22,14 +22,14 @@ import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Fieldable;
 import org.apache.lucene.search.DefaultSimilarity;
 import org.apache.lucene.store.RAMDirectory;
 
-public class TestSegmentReader extends TestCase {
+public class TestSegmentReader extends LuceneTestCase {
   private RAMDirectory dir = new RAMDirectory();
   private Document testDoc = new Document();
   private SegmentReader reader = null;
@@ -39,16 +39,13 @@ public class TestSegmentReader extends TestCase {
   }
   
   //TODO: Setup the reader w/ multiple documents
-  protected void setUp() throws IOException {
+  protected void setUp() throws Exception {
+    super.setUp();
     DocHelper.setupDoc(testDoc);
     SegmentInfo info = DocHelper.writeDoc(dir, testDoc);
     reader = SegmentReader.get(info);
   }
 
-  protected void tearDown() {
-
-  }
-
   public void test() {
     assertTrue(dir != null);
     assertTrue(reader != null);
diff --git a/src/test/org/apache/lucene/index/TestSegmentTermDocs.java b/src/test/org/apache/lucene/index/TestSegmentTermDocs.java
index b00d701..a13f8e5 100644
--- a/src/test/org/apache/lucene/index/TestSegmentTermDocs.java
+++ b/src/test/org/apache/lucene/index/TestSegmentTermDocs.java
@@ -17,7 +17,7 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
@@ -26,7 +26,7 @@ import org.apache.lucene.document.Field;
 
 import java.io.IOException;
 
-public class TestSegmentTermDocs extends TestCase {
+public class TestSegmentTermDocs extends LuceneTestCase {
   private Document testDoc = new Document();
   private Directory dir = new RAMDirectory();
   private SegmentInfo info;
@@ -35,16 +35,12 @@ public class TestSegmentTermDocs extends TestCase {
     super(s);
   }
 
-  protected void setUp() throws IOException {
+  protected void setUp() throws Exception {
+    super.setUp();
     DocHelper.setupDoc(testDoc);
     info = DocHelper.writeDoc(dir, testDoc);
   }
 
-
-  protected void tearDown() {
-
-  }
-
   public void test() {
     assertTrue(dir != null);
   }
diff --git a/src/test/org/apache/lucene/index/TestSegmentTermEnum.java b/src/test/org/apache/lucene/index/TestSegmentTermEnum.java
index c661de4..885d060 100644
--- a/src/test/org/apache/lucene/index/TestSegmentTermEnum.java
+++ b/src/test/org/apache/lucene/index/TestSegmentTermEnum.java
@@ -19,7 +19,7 @@ package org.apache.lucene.index;
 
 import java.io.IOException;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
 import org.apache.lucene.document.Document;
@@ -34,7 +34,7 @@ import org.apache.lucene.store.RAMDirectory;
 /**
  * @author goller
  */
-public class TestSegmentTermEnum extends TestCase
+public class TestSegmentTermEnum extends LuceneTestCase
 {
   Directory dir = new RAMDirectory();
 
diff --git a/src/test/org/apache/lucene/index/TestStressIndexing.java b/src/test/org/apache/lucene/index/TestStressIndexing.java
index 3f3b4b0..0f9868e 100644
--- a/src/test/org/apache/lucene/index/TestStressIndexing.java
+++ b/src/test/org/apache/lucene/index/TestStressIndexing.java
@@ -24,12 +24,12 @@ import org.apache.lucene.index.*;
 import org.apache.lucene.search.*;
 import org.apache.lucene.queryParser.*;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.util.Random;
 import java.io.File;
 
-public class TestStressIndexing extends TestCase {
+public class TestStressIndexing extends LuceneTestCase {
   private static final Analyzer ANALYZER = new SimpleAnalyzer();
   private static final Random RANDOM = new Random();
 
diff --git a/src/test/org/apache/lucene/index/TestTerm.java b/src/test/org/apache/lucene/index/TestTerm.java
index d151cb3..57ce23d 100644
--- a/src/test/org/apache/lucene/index/TestTerm.java
+++ b/src/test/org/apache/lucene/index/TestTerm.java
@@ -17,9 +17,9 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
-public class TestTerm extends TestCase {
+public class TestTerm extends LuceneTestCase {
 
   public void testEquals() {
     final Term base = new Term("same", "same");
diff --git a/src/test/org/apache/lucene/index/TestTermVectorsReader.java b/src/test/org/apache/lucene/index/TestTermVectorsReader.java
index 79cef59..35f1f4d 100644
--- a/src/test/org/apache/lucene/index/TestTermVectorsReader.java
+++ b/src/test/org/apache/lucene/index/TestTermVectorsReader.java
@@ -17,7 +17,7 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.store.MockRAMDirectory;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenStream;
@@ -32,7 +32,7 @@ import java.util.Iterator;
 import java.util.Map;
 import java.util.SortedSet;
 
-public class TestTermVectorsReader extends TestCase {
+public class TestTermVectorsReader extends LuceneTestCase {
   //Must be lexicographically sorted, will do in setup, versus trying to maintain here
   private String[] testFields = {"f1", "f2", "f3", "f4"};
   private boolean[] testFieldsStorePos = {true, false, true, false};
@@ -61,7 +61,8 @@ public class TestTermVectorsReader extends TestCase {
 
   TestToken[] tokens = new TestToken[testTerms.length * TERM_FREQ];
 
-  protected void setUp() throws IOException {
+  protected void setUp() throws Exception {
+    super.setUp();
     /*
     for (int i = 0; i < testFields.length; i++) {
       fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);
@@ -141,10 +142,6 @@ public class TestTermVectorsReader extends TestCase {
     }
   }
 
-  protected void tearDown() {
-
-  }
-
   public void test() {
     //Check to see the files were created properly in setup
     assertTrue(dir.fileExists(seg + "." + IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));
diff --git a/src/test/org/apache/lucene/index/TestTermdocPerf.java b/src/test/org/apache/lucene/index/TestTermdocPerf.java
index 9c1d2b8..6a68c2b 100644
--- a/src/test/org/apache/lucene/index/TestTermdocPerf.java
+++ b/src/test/org/apache/lucene/index/TestTermdocPerf.java
@@ -17,7 +17,7 @@ package org.apache.lucene.index;
  */
 
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.analysis.Analyzer;
@@ -49,7 +49,7 @@ class RepeatingTokenStream extends TokenStream {
 }
 
 
-public class TestTermdocPerf extends TestCase {
+public class TestTermdocPerf extends LuceneTestCase {
 
   void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {
     final Random random = new Random(0);
diff --git a/src/test/org/apache/lucene/index/TestThreadedOptimize.java b/src/test/org/apache/lucene/index/TestThreadedOptimize.java
index 0985b1c..5ee7a76 100644
--- a/src/test/org/apache/lucene/index/TestThreadedOptimize.java
+++ b/src/test/org/apache/lucene/index/TestThreadedOptimize.java
@@ -27,12 +27,12 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.util._TestUtil;
 import org.apache.lucene.util.English;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.io.IOException;
 import java.io.File;
 
-public class TestThreadedOptimize extends TestCase {
+public class TestThreadedOptimize extends LuceneTestCase {
   
   private static final Analyzer ANALYZER = new SimpleAnalyzer();
 
diff --git a/src/test/org/apache/lucene/index/TestWordlistLoader.java b/src/test/org/apache/lucene/index/TestWordlistLoader.java
index a6ca659..a59f38b 100644
--- a/src/test/org/apache/lucene/index/TestWordlistLoader.java
+++ b/src/test/org/apache/lucene/index/TestWordlistLoader.java
@@ -22,11 +22,11 @@ import java.io.IOException;
 import java.io.StringReader;
 import java.util.HashSet;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.WordlistLoader;
 
-public class TestWordlistLoader extends TestCase {
+public class TestWordlistLoader extends LuceneTestCase {
 
   public void testWordlistLoading() throws IOException {
     String s = "ONE\n  two \nthree";
diff --git a/src/test/org/apache/lucene/index/store/TestRAMDirectory.java b/src/test/org/apache/lucene/index/store/TestRAMDirectory.java
index 6bd3690..9456f6c 100644
--- a/src/test/org/apache/lucene/index/store/TestRAMDirectory.java
+++ b/src/test/org/apache/lucene/index/store/TestRAMDirectory.java
@@ -24,7 +24,7 @@ import java.io.ObjectOutputStream;
 import java.io.ByteArrayOutputStream;
 
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
 import org.apache.lucene.document.Document;
@@ -47,7 +47,7 @@ import org.apache.lucene.store.MockRAMDirectory;
  * 
  * @version $Id: RAMDirectory.java 150537 2004-09-28 22:45:26 +0200 (Di, 28 Sep 2004) cutting $
  */
-public class TestRAMDirectory extends TestCase {
+public class TestRAMDirectory extends LuceneTestCase {
   
   private File indexDir = null;
   
@@ -55,7 +55,8 @@ public class TestRAMDirectory extends TestCase {
   private final int docsToAdd = 500;
   
   // setup the index
-  public void setUp () throws IOException {
+  public void setUp () throws Exception {
+    super.setUp();
     String tempDir = System.getProperty("java.io.tmpdir");
     if (tempDir == null)
       throw new IOException("java.io.tmpdir undefined, cannot run test");
@@ -206,7 +207,8 @@ public class TestRAMDirectory extends TestCase {
     assertTrue("contains more then just header", headerSize < bos.size());
   } 
 
-  public void tearDown() {
+  public void tearDown() throws Exception {
+    super.tearDown();
     // cleanup 
     if (indexDir != null && indexDir.exists()) {
       rmDir (indexDir);
diff --git a/src/test/org/apache/lucene/queryParser/TestMultiAnalyzer.java b/src/test/org/apache/lucene/queryParser/TestMultiAnalyzer.java
index e6e1d86..5126c15 100644
--- a/src/test/org/apache/lucene/queryParser/TestMultiAnalyzer.java
+++ b/src/test/org/apache/lucene/queryParser/TestMultiAnalyzer.java
@@ -19,7 +19,7 @@ package org.apache.lucene.queryParser;
 
 import java.io.Reader;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.search.Query;
 import org.apache.lucene.analysis.Analyzer;
@@ -36,7 +36,7 @@ import org.apache.lucene.analysis.standard.StandardTokenizer;
  * 
  * @author Daniel Naber
  */
-public class TestMultiAnalyzer extends TestCase {
+public class TestMultiAnalyzer extends LuceneTestCase {
 
   private static int multiToken = 0;
 
diff --git a/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser.java b/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser.java
index 934f5b1..19e35de 100644
--- a/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser.java
+++ b/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser.java
@@ -17,7 +17,7 @@ package org.apache.lucene.queryParser;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.Token;
 import org.apache.lucene.analysis.TokenStream;
@@ -42,7 +42,7 @@ import java.util.Map;
  * Tests QueryParser.
  * @author Daniel Naber
  */
-public class TestMultiFieldQueryParser extends TestCase {
+public class TestMultiFieldQueryParser extends LuceneTestCase {
 
   /** test stop words arsing for both the non static form, and for the 
    * corresponding static form (qtxt, fields[]). */
diff --git a/src/test/org/apache/lucene/queryParser/TestQueryParser.java b/src/test/org/apache/lucene/queryParser/TestQueryParser.java
index 7a7f1ed..3c8eb69 100644
--- a/src/test/org/apache/lucene/queryParser/TestQueryParser.java
+++ b/src/test/org/apache/lucene/queryParser/TestQueryParser.java
@@ -17,7 +17,7 @@ package org.apache.lucene.queryParser;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.*;
 import org.apache.lucene.analysis.Token;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
@@ -40,7 +40,7 @@ import java.util.Locale;
 /**
  * Tests QueryParser.
  */
-public class TestQueryParser extends TestCase {
+public class TestQueryParser extends LuceneTestCase {
 
   public static Analyzer qpAnalyzer = new QPTestAnalyzer();
 
@@ -98,7 +98,8 @@ public class TestQueryParser extends TestCase {
 
   private int originalMaxClauses;
 
-  public void setUp() {
+  public void setUp() throws Exception {
+    super.setUp();
     originalMaxClauses = BooleanQuery.getMaxClauseCount();
   }
 
@@ -861,7 +862,8 @@ public class TestQueryParser extends TestCase {
     iw.addDocument(d);
   }
 
-  public void tearDown() {
+  public void tearDown() throws Exception {
+    super.tearDown();
     BooleanQuery.setMaxClauseCount(originalMaxClauses);
   }
 
diff --git a/src/test/org/apache/lucene/search/BaseTestRangeFilter.java b/src/test/org/apache/lucene/search/BaseTestRangeFilter.java
index 6030fcf..428b106 100644
--- a/src/test/org/apache/lucene/search/BaseTestRangeFilter.java
+++ b/src/test/org/apache/lucene/search/BaseTestRangeFilter.java
@@ -19,7 +19,7 @@ package org.apache.lucene.search;
 
 import java.util.Random;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.SimpleAnalyzer;
 import org.apache.lucene.document.Document;
@@ -27,7 +27,7 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.store.RAMDirectory;
 
-public class BaseTestRangeFilter extends TestCase {
+public class BaseTestRangeFilter extends LuceneTestCase {
 
     public static final boolean F = false;
     public static final boolean T = true;
diff --git a/src/test/org/apache/lucene/search/TestBoolean2.java b/src/test/org/apache/lucene/search/TestBoolean2.java
index 8b36a6a..9ea6205 100644
--- a/src/test/org/apache/lucene/search/TestBoolean2.java
+++ b/src/test/org/apache/lucene/search/TestBoolean2.java
@@ -31,19 +31,20 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.queryParser.QueryParser;
 import org.apache.lucene.queryParser.ParseException;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.util.Random;
 
 /** Test BooleanQuery2 against BooleanQuery by overriding the standard query parser.
  * This also tests the scoring order of BooleanQuery.
  */
-public class TestBoolean2 extends TestCase {
+public class TestBoolean2 extends LuceneTestCase {
   private IndexSearcher searcher;
 
   public static final String field = "field";
 
   public void setUp() throws Exception {
+    super.setUp();
     RAMDirectory directory = new RAMDirectory();
     IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true);
     for (int i = 0; i < docFields.length; i++) {
diff --git a/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java b/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java
index d1146d4..7d4ebfe 100644
--- a/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java
+++ b/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java
@@ -19,6 +19,7 @@ package org.apache.lucene.search;
 
 
 import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -33,7 +34,7 @@ import java.util.Random;
 
 /** Test that BooleanQuery.setMinimumNumberShouldMatch works.
  */
-public class TestBooleanMinShouldMatch extends TestCase {
+public class TestBooleanMinShouldMatch extends LuceneTestCase {
 
 
     public Directory index;
@@ -43,6 +44,9 @@ public class TestBooleanMinShouldMatch extends TestCase {
     public void setUp() throws Exception {
 
 
+        super.setUp();
+
+
         String[] data = new String [] {
             "A 1 2 3 4 5 6",
             "Z       4 5 6",
@@ -325,9 +329,9 @@ public class TestBooleanMinShouldMatch extends TestCase {
         // should be a superset to the unconstrained query.
         if (top2.totalHits > top1.totalHits) {
           TestCase.fail("Constrained results not a subset:\n"
-                + CheckHits.topdocsString(top1,0,0)
-                + CheckHits.topdocsString(top2,0,0)
-                + "for query:" + q2.toString());
+                        + CheckHits.topdocsString(top1,0,0)
+                        + CheckHits.topdocsString(top2,0,0)
+                        + "for query:" + q2.toString());
         }
 
         for (int hit=0; hit<top2.totalHits; hit++) {
diff --git a/src/test/org/apache/lucene/search/TestBooleanOr.java b/src/test/org/apache/lucene/search/TestBooleanOr.java
index 4629481..4cfdaab 100644
--- a/src/test/org/apache/lucene/search/TestBooleanOr.java
+++ b/src/test/org/apache/lucene/search/TestBooleanOr.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  */
 import java.io.IOException;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.document.Document;
@@ -36,7 +36,7 @@ import org.apache.lucene.store.RAMDirectory;
  * <br>Adapted to Lucene testcase by Paul Elschot.
  * @author appler@gmail.com
  */
-public class TestBooleanOr extends TestCase {
+public class TestBooleanOr extends LuceneTestCase {
 
 	private static String FIELD_T = "T";
 	private static String FIELD_C = "C";
@@ -134,6 +134,7 @@ public class TestBooleanOr extends TestCase {
 
 	protected void setUp() throws Exception {
 		super.setUp();
+		super.setUp();
 
 		//
 		RAMDirectory rd = new RAMDirectory();
diff --git a/src/test/org/apache/lucene/search/TestBooleanPrefixQuery.java b/src/test/org/apache/lucene/search/TestBooleanPrefixQuery.java
index be0ffb0..ae3bbaa 100644
--- a/src/test/org/apache/lucene/search/TestBooleanPrefixQuery.java
+++ b/src/test/org/apache/lucene/search/TestBooleanPrefixQuery.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import junit.framework.Test;
 import junit.framework.TestSuite;
 import junit.textui.TestRunner;
@@ -39,7 +39,7 @@ import java.io.IOException;
  * @version $Id$
  **/
 
-public class TestBooleanPrefixQuery extends TestCase {
+public class TestBooleanPrefixQuery extends LuceneTestCase {
 
   public static void main(String[] args) {
     TestRunner.run(suite());
diff --git a/src/test/org/apache/lucene/search/TestBooleanQuery.java b/src/test/org/apache/lucene/search/TestBooleanQuery.java
index 69a2dcb..13b0621 100644
--- a/src/test/org/apache/lucene/search/TestBooleanQuery.java
+++ b/src/test/org/apache/lucene/search/TestBooleanQuery.java
@@ -17,10 +17,10 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.index.Term;
 
-public class TestBooleanQuery extends TestCase {
+public class TestBooleanQuery extends LuceneTestCase {
   
   public void testEquality() throws Exception {
     BooleanQuery bq1 = new BooleanQuery();
diff --git a/src/test/org/apache/lucene/search/TestBooleanScorer.java b/src/test/org/apache/lucene/search/TestBooleanScorer.java
index a9e9134..479f70c 100644
--- a/src/test/org/apache/lucene/search/TestBooleanScorer.java
+++ b/src/test/org/apache/lucene/search/TestBooleanScorer.java
@@ -26,13 +26,13 @@ import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.store.RAMDirectory;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 /**
  *
  * @version $rcs = ' $Id$ ' ;
  */
-public class TestBooleanScorer extends TestCase
+public class TestBooleanScorer extends LuceneTestCase
 {
 
   public TestBooleanScorer(String name) {
diff --git a/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java b/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java
index 4562ccd..ae552d7 100644
--- a/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java
+++ b/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java
@@ -17,14 +17,14 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 
-public class TestCachingWrapperFilter extends TestCase {
+public class TestCachingWrapperFilter extends LuceneTestCase {
   public void testCachingWorks() throws Exception {
     Directory dir = new RAMDirectory();
     IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);
diff --git a/src/test/org/apache/lucene/search/TestDateFilter.java b/src/test/org/apache/lucene/search/TestDateFilter.java
index 3d73c2b..dc8d4ea 100644
--- a/src/test/org/apache/lucene/search/TestDateFilter.java
+++ b/src/test/org/apache/lucene/search/TestDateFilter.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.SimpleAnalyzer;
 import org.apache.lucene.document.DateTools;
 import org.apache.lucene.document.Document;
@@ -35,7 +35,7 @@ import java.io.IOException;
   * @version $Revision$
   */
 public class TestDateFilter
-    extends TestCase
+    extends LuceneTestCase
 {
     public TestDateFilter(String name)
     {
diff --git a/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java b/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
index fb5b1ee..cefb3c5 100644
--- a/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
+++ b/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
@@ -18,7 +18,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -35,7 +35,7 @@ import java.io.IOException;
  * Test of the DisjunctionMaxQuery.
  *
  */
-public class TestDisjunctionMaxQuery extends TestCase{
+public class TestDisjunctionMaxQuery extends LuceneTestCase{
 
     /** threshold for comparing floats */
     public static final float SCORE_COMP_THRESH = 0.0000f;
@@ -73,6 +73,8 @@ public class TestDisjunctionMaxQuery extends TestCase{
 
     public void setUp() throws Exception {
 
+        super.setUp();
+
         index = new RAMDirectory();
         IndexWriter writer = new IndexWriter(index,
                                              new WhitespaceAnalyzer(),
diff --git a/src/test/org/apache/lucene/search/TestDocBoost.java b/src/test/org/apache/lucene/search/TestDocBoost.java
index a7983e7..f2b3705 100644
--- a/src/test/org/apache/lucene/search/TestDocBoost.java
+++ b/src/test/org/apache/lucene/search/TestDocBoost.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.SimpleAnalyzer;
 import org.apache.lucene.document.*;
 import org.apache.lucene.index.IndexWriter;
@@ -29,7 +29,7 @@ import org.apache.lucene.store.RAMDirectory;
  *
  * @version $Revision$
  */
-public class TestDocBoost extends TestCase {
+public class TestDocBoost extends LuceneTestCase {
   public TestDocBoost(String name) {
     super(name);
   }
diff --git a/src/test/org/apache/lucene/search/TestExplanations.java b/src/test/org/apache/lucene/search/TestExplanations.java
index 53ddb2e..ec7f660 100644
--- a/src/test/org/apache/lucene/search/TestExplanations.java
+++ b/src/test/org/apache/lucene/search/TestExplanations.java
@@ -32,7 +32,7 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.queryParser.QueryParser;
 import org.apache.lucene.queryParser.ParseException;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.util.Random;
 import java.util.BitSet;
@@ -49,7 +49,7 @@ import java.util.BitSet;
  *
  * @see "Subclasses for actual tests"
  */
-public class TestExplanations extends TestCase {
+public class TestExplanations extends LuceneTestCase {
   protected IndexSearcher searcher;
 
   public static final String FIELD = "field";
@@ -57,10 +57,12 @@ public class TestExplanations extends TestCase {
     new QueryParser(FIELD, new WhitespaceAnalyzer());
 
   public void tearDown() throws Exception {
+    super.tearDown();
     searcher.close();
   }
   
   public void setUp() throws Exception {
+    super.setUp();
     RAMDirectory directory = new RAMDirectory();
     IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true);
     for (int i = 0; i < docFields.length; i++) {
diff --git a/src/test/org/apache/lucene/search/TestFuzzyQuery.java b/src/test/org/apache/lucene/search/TestFuzzyQuery.java
index 61e5f2f..81df1fa 100644
--- a/src/test/org/apache/lucene/search/TestFuzzyQuery.java
+++ b/src/test/org/apache/lucene/search/TestFuzzyQuery.java
@@ -19,7 +19,7 @@ package org.apache.lucene.search;
 
 import java.io.IOException;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -32,7 +32,7 @@ import org.apache.lucene.store.RAMDirectory;
  *
  * @author Daniel Naber
  */
-public class TestFuzzyQuery extends TestCase {
+public class TestFuzzyQuery extends LuceneTestCase {
 
   public void testFuzziness() throws Exception {
     RAMDirectory directory = new RAMDirectory();
diff --git a/src/test/org/apache/lucene/search/TestMatchAllDocsQuery.java b/src/test/org/apache/lucene/search/TestMatchAllDocsQuery.java
index 7884a1c..ba7c9bf 100644
--- a/src/test/org/apache/lucene/search/TestMatchAllDocsQuery.java
+++ b/src/test/org/apache/lucene/search/TestMatchAllDocsQuery.java
@@ -25,14 +25,14 @@ import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.store.RAMDirectory;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 /**
  * Tests MatchAllDocsQuery.
  * 
  * @author Daniel Naber
  */
-public class TestMatchAllDocsQuery extends TestCase {
+public class TestMatchAllDocsQuery extends LuceneTestCase {
 
   public void testQuery() throws IOException {
     RAMDirectory dir = new RAMDirectory();
diff --git a/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java b/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java
index e13ef7b..a250da5 100644
--- a/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java
+++ b/src/test/org/apache/lucene/search/TestMultiPhraseQuery.java
@@ -28,7 +28,7 @@ import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.io.IOException;
 import java.util.LinkedList;
@@ -39,7 +39,7 @@ import java.util.LinkedList;
  *
  * @version $Id$
  */
-public class TestMultiPhraseQuery extends TestCase
+public class TestMultiPhraseQuery extends LuceneTestCase
 {
     public TestMultiPhraseQuery(String name) {
         super(name);
diff --git a/src/test/org/apache/lucene/search/TestMultiSearcher.java b/src/test/org/apache/lucene/search/TestMultiSearcher.java
index 514ad4f..6ded7a8 100644
--- a/src/test/org/apache/lucene/search/TestMultiSearcher.java
+++ b/src/test/org/apache/lucene/search/TestMultiSearcher.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.KeywordAnalyzer;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.document.Document;
@@ -41,7 +41,7 @@ import java.util.Set;
  *
  * @version $Id$
  */
-public class TestMultiSearcher extends TestCase
+public class TestMultiSearcher extends LuceneTestCase
 {
     public TestMultiSearcher(String name)
     {
diff --git a/src/test/org/apache/lucene/search/TestMultiSearcherRanking.java b/src/test/org/apache/lucene/search/TestMultiSearcherRanking.java
index 7543e2a..1c75790 100644
--- a/src/test/org/apache/lucene/search/TestMultiSearcherRanking.java
+++ b/src/test/org/apache/lucene/search/TestMultiSearcherRanking.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -35,7 +35,7 @@ import java.io.IOException;
  *
  * @version $Id: TestMultiSearcher.java 150492 2004-09-06 22:01:49Z dnaber $
  */
-public class TestMultiSearcherRanking extends TestCase {
+public class TestMultiSearcherRanking extends LuceneTestCase {
   
   private final boolean verbose = false;  // set to true to output hits
   private final String FIELD_NAME = "body";
@@ -111,6 +111,7 @@ public class TestMultiSearcherRanking extends TestCase {
    * initializes multiSearcher and singleSearcher with the same document set
    */
   protected void setUp() throws Exception {
+    super.setUp();
     // create MultiSearcher from two seperate searchers
     Directory d1 = new RAMDirectory();
     IndexWriter iw1 = new IndexWriter(d1, new StandardAnalyzer(), true);
diff --git a/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java b/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java
index 8572c6a..2c4aef3 100644
--- a/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java
+++ b/src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.SimpleAnalyzer;
 import org.apache.lucene.document.*;
 import org.apache.lucene.index.IndexReader;
@@ -32,7 +32,7 @@ import java.io.IOException;
  *
  * @version $rcs = ' $Id$ ' ;
  */
-public class TestMultiThreadTermVectors extends TestCase {
+public class TestMultiThreadTermVectors extends LuceneTestCase {
   private RAMDirectory directory = new RAMDirectory();
   public int numDocs = 100;
   public int numThreads = 3;
@@ -42,6 +42,7 @@ public class TestMultiThreadTermVectors extends TestCase {
   }
   
   public void setUp() throws Exception {
+    super.setUp();
     IndexWriter writer
             = new IndexWriter(directory, new SimpleAnalyzer(), true);
     //writer.setUseCompoundFile(false);
diff --git a/src/test/org/apache/lucene/search/TestNot.java b/src/test/org/apache/lucene/search/TestNot.java
index 1f6662c..566345c 100644
--- a/src/test/org/apache/lucene/search/TestNot.java
+++ b/src/test/org/apache/lucene/search/TestNot.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.queryParser.QueryParser;
@@ -31,7 +31,7 @@ import org.apache.lucene.document.Field;
  *
  * @version $Revision$
  */
-public class TestNot extends TestCase {
+public class TestNot extends LuceneTestCase {
   public TestNot(String name) {
     super(name);
   }
diff --git a/src/test/org/apache/lucene/search/TestPhrasePrefixQuery.java b/src/test/org/apache/lucene/search/TestPhrasePrefixQuery.java
index 95fb7d5..5d8674e 100644
--- a/src/test/org/apache/lucene/search/TestPhrasePrefixQuery.java
+++ b/src/test/org/apache/lucene/search/TestPhrasePrefixQuery.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.SimpleAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -37,7 +37,7 @@ import java.util.LinkedList;
  * @version $Id$
  */
 public class TestPhrasePrefixQuery
-    extends TestCase
+    extends LuceneTestCase
 {
     public TestPhrasePrefixQuery(String name)
     {
diff --git a/src/test/org/apache/lucene/search/TestPhraseQuery.java b/src/test/org/apache/lucene/search/TestPhraseQuery.java
index 4e6bdcd..7b4fad9 100644
--- a/src/test/org/apache/lucene/search/TestPhraseQuery.java
+++ b/src/test/org/apache/lucene/search/TestPhraseQuery.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.*;
 import org.apache.lucene.document.*;
 import org.apache.lucene.index.IndexWriter;
@@ -34,7 +34,7 @@ import java.io.Reader;
  * @see TestPositionIncrement
  * @author Erik Hatcher
  */
-public class TestPhraseQuery extends TestCase {
+public class TestPhraseQuery extends LuceneTestCase {
 
   /** threshold for comparing floats */
   public static final float SCORE_COMP_THRESH = 1e-6f;
@@ -44,6 +44,7 @@ public class TestPhraseQuery extends TestCase {
   private RAMDirectory directory;
 
   public void setUp() throws Exception {
+    super.setUp();
     directory = new RAMDirectory();
     Analyzer analyzer = new Analyzer() {
       public TokenStream tokenStream(String fieldName, Reader reader) {
@@ -80,6 +81,7 @@ public class TestPhraseQuery extends TestCase {
   }
 
   public void tearDown() throws Exception {
+    super.tearDown();
     searcher.close();
     directory.close();
   }
diff --git a/src/test/org/apache/lucene/search/TestPositionIncrement.java b/src/test/org/apache/lucene/search/TestPositionIncrement.java
index b36b74a..5d12b03 100644
--- a/src/test/org/apache/lucene/search/TestPositionIncrement.java
+++ b/src/test/org/apache/lucene/search/TestPositionIncrement.java
@@ -33,7 +33,7 @@ import org.apache.lucene.document.Field;
 import java.io.Reader;
 import java.io.StringReader;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 /**
  * Term position unit test.
@@ -41,7 +41,7 @@ import junit.framework.TestCase;
  *
  * @version $Revision$
  */
-public class TestPositionIncrement extends TestCase {
+public class TestPositionIncrement extends LuceneTestCase {
 
   public void testSetPosition() throws Exception {
     Analyzer analyzer = new Analyzer() {
diff --git a/src/test/org/apache/lucene/search/TestPrefixFilter.java b/src/test/org/apache/lucene/search/TestPrefixFilter.java
index 794e7dc..e2dd60a 100644
--- a/src/test/org/apache/lucene/search/TestPrefixFilter.java
+++ b/src/test/org/apache/lucene/search/TestPrefixFilter.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Term;
@@ -31,7 +31,7 @@ import org.apache.lucene.document.Field;
  * @author Yura Smolsky
  * @author yonik
  */
-public class TestPrefixFilter extends TestCase {
+public class TestPrefixFilter extends LuceneTestCase {
   public void testPrefixFilter() throws Exception {
     RAMDirectory directory = new RAMDirectory();
 
diff --git a/src/test/org/apache/lucene/search/TestPrefixQuery.java b/src/test/org/apache/lucene/search/TestPrefixQuery.java
index 17a6cf2..54ec827 100644
--- a/src/test/org/apache/lucene/search/TestPrefixQuery.java
+++ b/src/test/org/apache/lucene/search/TestPrefixQuery.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Term;
@@ -30,7 +30,7 @@ import org.apache.lucene.document.Field;
  *
  * @author Erik Hatcher
  */
-public class TestPrefixQuery extends TestCase {
+public class TestPrefixQuery extends LuceneTestCase {
   public void testPrefixQuery() throws Exception {
     RAMDirectory directory = new RAMDirectory();
 
diff --git a/src/test/org/apache/lucene/search/TestQueryTermVector.java b/src/test/org/apache/lucene/search/TestQueryTermVector.java
index 7022dd0..bd9380c 100644
--- a/src/test/org/apache/lucene/search/TestQueryTermVector.java
+++ b/src/test/org/apache/lucene/search/TestQueryTermVector.java
@@ -17,23 +17,16 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
 
-public class TestQueryTermVector extends TestCase {
+public class TestQueryTermVector extends LuceneTestCase {
 
 
   public TestQueryTermVector(String s) {
     super(s);
   }
 
-  protected void setUp() {
-  }
-
-  protected void tearDown() {
-
-  }
-
   public void testConstructor() {
     String [] queryTerm = {"foo", "bar", "foo", "again", "foo", "bar", "go", "go", "go"};
     //Items are sorted lexicographically
diff --git a/src/test/org/apache/lucene/search/TestRangeQuery.java b/src/test/org/apache/lucene/search/TestRangeQuery.java
index 7eebae4..f530e0a 100644
--- a/src/test/org/apache/lucene/search/TestRangeQuery.java
+++ b/src/test/org/apache/lucene/search/TestRangeQuery.java
@@ -24,18 +24,19 @@ import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.store.RAMDirectory;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import java.io.IOException;
 
 /**
  * @author goller
  */
-public class TestRangeQuery extends TestCase {
+public class TestRangeQuery extends LuceneTestCase {
 
   private int docCount = 0;
   private RAMDirectory dir;
 
-  public void setUp() {
+  public void setUp() throws Exception {
+    super.setUp();
     dir = new RAMDirectory();
   }
 
diff --git a/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter.java b/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter.java
index e3d1292..99058b1 100644
--- a/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter.java
+++ b/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter.java
@@ -20,7 +20,7 @@ package org.apache.lucene.search;
 import java.rmi.Naming;
 import java.rmi.registry.LocateRegistry;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.SimpleAnalyzer;
 import org.apache.lucene.document.Document;
@@ -34,7 +34,7 @@ import org.apache.lucene.store.RAMDirectory;
  * NOTE: This is copied from TestRemoteSearchable since it already had a remote index set up.
  * @author Matt Ericson
  */
-public class TestRemoteCachingWrapperFilter extends TestCase {
+public class TestRemoteCachingWrapperFilter extends LuceneTestCase {
   public TestRemoteCachingWrapperFilter(String name) {
     super(name);
   }
diff --git a/src/test/org/apache/lucene/search/TestRemoteSearchable.java b/src/test/org/apache/lucene/search/TestRemoteSearchable.java
index 5000944..63b463c 100644
--- a/src/test/org/apache/lucene/search/TestRemoteSearchable.java
+++ b/src/test/org/apache/lucene/search/TestRemoteSearchable.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.SimpleAnalyzer;
 import org.apache.lucene.document.*;
 import org.apache.lucene.index.IndexWriter;
@@ -33,7 +33,7 @@ import java.util.HashSet;
 /**
  * @version $Id$
  */
-public class TestRemoteSearchable extends TestCase {
+public class TestRemoteSearchable extends LuceneTestCase {
   public TestRemoteSearchable(String name) {
     super(name);
   }
diff --git a/src/test/org/apache/lucene/search/TestScorerPerf.java b/src/test/org/apache/lucene/search/TestScorerPerf.java
index 143ad4d..4eee43a 100755
--- a/src/test/org/apache/lucene/search/TestScorerPerf.java
+++ b/src/test/org/apache/lucene/search/TestScorerPerf.java
@@ -1,6 +1,6 @@
 package org.apache.lucene.search;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.util.Random;
 import java.util.BitSet;
@@ -37,7 +37,7 @@ import org.apache.lucene.document.Field;
  *
  * @version $Id$
  */
-public class TestScorerPerf extends TestCase {
+public class TestScorerPerf extends LuceneTestCase {
   Random r = new Random(0);
   boolean validate = true;  // set to false when doing performance testing
 
diff --git a/src/test/org/apache/lucene/search/TestSetNorm.java b/src/test/org/apache/lucene/search/TestSetNorm.java
index d46f2c6..604f516 100644
--- a/src/test/org/apache/lucene/search/TestSetNorm.java
+++ b/src/test/org/apache/lucene/search/TestSetNorm.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.SimpleAnalyzer;
 import org.apache.lucene.document.*;
 import org.apache.lucene.index.IndexReader;
@@ -30,7 +30,7 @@ import org.apache.lucene.store.RAMDirectory;
  *
  * @version $Revision$
  */
-public class TestSetNorm extends TestCase {
+public class TestSetNorm extends LuceneTestCase {
   public TestSetNorm(String name) {
     super(name);
   }
diff --git a/src/test/org/apache/lucene/search/TestSimilarity.java b/src/test/org/apache/lucene/search/TestSimilarity.java
index 1d502a0..cf9539f 100644
--- a/src/test/org/apache/lucene/search/TestSimilarity.java
+++ b/src/test/org/apache/lucene/search/TestSimilarity.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.util.Collection;
 
@@ -34,7 +34,7 @@ import org.apache.lucene.document.Field;
  *
  * @version $Revision$
  */
-public class TestSimilarity extends TestCase {
+public class TestSimilarity extends LuceneTestCase {
   public TestSimilarity(String name) {
     super(name);
   }
diff --git a/src/test/org/apache/lucene/search/TestSpanQueryFilter.java b/src/test/org/apache/lucene/search/TestSpanQueryFilter.java
index 7816b28..aa04f22 100644
--- a/src/test/org/apache/lucene/search/TestSpanQueryFilter.java
+++ b/src/test/org/apache/lucene/search/TestSpanQueryFilter.java
@@ -16,7 +16,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.SimpleAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -32,20 +32,13 @@ import java.util.BitSet;
 import java.util.Iterator;
 import java.util.List;
 
-public class TestSpanQueryFilter extends TestCase {
+public class TestSpanQueryFilter extends LuceneTestCase {
 
 
   public TestSpanQueryFilter(String s) {
     super(s);
   }
 
-  protected void setUp() {
-  }
-
-  protected void tearDown() {
-
-  }
-
   public void testFilterWorks() throws Exception {
     Directory dir = new RAMDirectory();
     IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true);
@@ -78,4 +71,4 @@ public class TestSpanQueryFilter extends TestCase {
     }
     reader.close();
   }
-}
\ No newline at end of file
+}
diff --git a/src/test/org/apache/lucene/search/TestTermScorer.java b/src/test/org/apache/lucene/search/TestTermScorer.java
index d0388ab..6aca86c 100644
--- a/src/test/org/apache/lucene/search/TestTermScorer.java
+++ b/src/test/org/apache/lucene/search/TestTermScorer.java
@@ -21,7 +21,7 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -30,7 +30,7 @@ import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.store.RAMDirectory;
 
-public class TestTermScorer extends TestCase
+public class TestTermScorer extends LuceneTestCase
 {
     protected RAMDirectory directory;
     private static final String FIELD = "field";
@@ -45,8 +45,9 @@ public class TestTermScorer extends TestCase
         super(s);
     }
 
-    protected void setUp() throws IOException
+    protected void setUp() throws Exception
     {
+        super.setUp();
         directory = new RAMDirectory();
 
 
@@ -64,11 +65,6 @@ public class TestTermScorer extends TestCase
 
     }
 
-    protected void tearDown()
-    {
-
-    }
-
     public void test() throws IOException
     {
 
diff --git a/src/test/org/apache/lucene/search/TestTermVectors.java b/src/test/org/apache/lucene/search/TestTermVectors.java
index c31671b..eab3e3e 100644
--- a/src/test/org/apache/lucene/search/TestTermVectors.java
+++ b/src/test/org/apache/lucene/search/TestTermVectors.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.SimpleAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -32,7 +32,7 @@ import java.util.Iterator;
 import java.util.Map;
 import java.util.SortedSet;
 
-public class TestTermVectors extends TestCase {
+public class TestTermVectors extends LuceneTestCase {
   private IndexSearcher searcher;
   private RAMDirectory directory = new RAMDirectory();
   public TestTermVectors(String s) {
@@ -40,6 +40,7 @@ public class TestTermVectors extends TestCase {
   }
 
   public void setUp() throws Exception {                  
+    super.setUp();
     IndexWriter writer
             = new IndexWriter(directory, new SimpleAnalyzer(), true);
     //writer.setUseCompoundFile(true);
@@ -69,10 +70,6 @@ public class TestTermVectors extends TestCase {
     searcher = new IndexSearcher(directory);
   }
 
-  protected void tearDown() {
-
-  }
-
   public void test() {
     assertTrue(searcher != null);
   }
diff --git a/src/test/org/apache/lucene/search/TestThreadSafe.java b/src/test/org/apache/lucene/search/TestThreadSafe.java
index 7534a0e..0fc0188 100755
--- a/src/test/org/apache/lucene/search/TestThreadSafe.java
+++ b/src/test/org/apache/lucene/search/TestThreadSafe.java
@@ -17,6 +17,7 @@ package org.apache.lucene.search;
  */
 
 import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.index.IndexReader;
@@ -32,7 +33,7 @@ import java.io.IOException;
  * 
  * @version $Id$
  */
-public class TestThreadSafe extends TestCase {
+public class TestThreadSafe extends LuceneTestCase {
   Random r = new Random();
   Directory dir1;
   Directory dir2;
diff --git a/src/test/org/apache/lucene/search/TestWildcard.java b/src/test/org/apache/lucene/search/TestWildcard.java
index 26e9a16..ecc2be4 100644
--- a/src/test/org/apache/lucene/search/TestWildcard.java
+++ b/src/test/org/apache/lucene/search/TestWildcard.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.SimpleAnalyzer;
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
 import org.apache.lucene.document.Document;
@@ -38,7 +38,7 @@ import java.io.IOException;
  * 
  */
 public class TestWildcard
-    extends TestCase {
+    extends LuceneTestCase {
   public void testEquals() {
     WildcardQuery wq1 = new WildcardQuery(new Term("field", "b*a"));
     WildcardQuery wq2 = new WildcardQuery(new Term("field", "b*a"));
diff --git a/src/test/org/apache/lucene/search/function/FunctionTestSetup.java b/src/test/org/apache/lucene/search/function/FunctionTestSetup.java
index 7c19846..d81969d 100755
--- a/src/test/org/apache/lucene/search/function/FunctionTestSetup.java
+++ b/src/test/org/apache/lucene/search/function/FunctionTestSetup.java
@@ -26,12 +26,12 @@ import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 /**
  * Setup for function tests
  */
-public abstract class FunctionTestSetup extends TestCase {
+public abstract class FunctionTestSetup extends LuceneTestCase {
 
   /**
    * Actual score computation order is slightly different than assumptios
@@ -76,12 +76,14 @@ public abstract class FunctionTestSetup extends TestCase {
   /* @override */
   protected void tearDown() throws Exception {
     super.tearDown();
+    super.tearDown();
     dir = null;
     anlzr = null;
   }
 
   /* @override */
   protected void setUp() throws Exception {
+    super.setUp();
     // prepare a small index with just a few documents.  
     super.setUp();
     dir = new RAMDirectory();
diff --git a/src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery.java b/src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery.java
index 37f5aac..4a4b9dc 100644
--- a/src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery.java
+++ b/src/test/org/apache/lucene/search/payloads/TestBoostingTermQuery.java
@@ -16,7 +16,7 @@ package org.apache.lucene.search.payloads;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.analysis.*;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -32,7 +32,7 @@ import org.apache.lucene.util.English;
 import java.io.IOException;
 import java.io.Reader;
 
-public class TestBoostingTermQuery extends TestCase {
+public class TestBoostingTermQuery extends LuceneTestCase {
   private IndexSearcher searcher;
   private BoostingSimilarity similarity = new BoostingSimilarity();
   private byte[] payloadField = new byte[]{1};
@@ -81,7 +81,8 @@ public class TestBoostingTermQuery extends TestCase {
     }
   }
 
-  protected void setUp() throws IOException {
+  protected void setUp() throws Exception {
+    super.setUp();
     RAMDirectory directory = new RAMDirectory();
     PayloadAnalyzer analyzer = new PayloadAnalyzer();
     IndexWriter writer
@@ -104,11 +105,6 @@ public class TestBoostingTermQuery extends TestCase {
     searcher.setSimilarity(similarity);
   }
 
-
-  protected void tearDown() {
-
-  }
-
   public void test() throws IOException {
     BoostingTermQuery query = new BoostingTermQuery(new Term("field", "seventy"));
     TopDocs hits = searcher.search(query, null, 100);
@@ -231,4 +227,4 @@ public class TestBoostingTermQuery extends TestCase {
       return freq == 0 ? 0 : 1;
     }
   }
-}
\ No newline at end of file
+}
diff --git a/src/test/org/apache/lucene/search/spans/TestBasics.java b/src/test/org/apache/lucene/search/spans/TestBasics.java
index 2df1681..68a6d6d 100644
--- a/src/test/org/apache/lucene/search/spans/TestBasics.java
+++ b/src/test/org/apache/lucene/search/spans/TestBasics.java
@@ -17,7 +17,7 @@ package org.apache.lucene.search.spans;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.io.IOException;
 
@@ -44,10 +44,11 @@ import org.apache.lucene.search.*;
  *
  * @author Doug Cutting
  */
-public class TestBasics extends TestCase {
+public class TestBasics extends LuceneTestCase {
   private IndexSearcher searcher;
 
   public void setUp() throws Exception {
+    super.setUp();
     RAMDirectory directory = new RAMDirectory();
     IndexWriter writer
       = new IndexWriter(directory, new SimpleAnalyzer(), true);
diff --git a/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java b/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java
index 1bbaa11..fd5890e 100644
--- a/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java
+++ b/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered.java
@@ -34,9 +34,9 @@ import org.apache.lucene.document.Field;
 
 import org.apache.lucene.queryParser.QueryParser;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
-public class TestNearSpansOrdered extends TestCase {
+public class TestNearSpansOrdered extends LuceneTestCase {
   protected IndexSearcher searcher;
 
   public static final String FIELD = "field";
@@ -44,10 +44,12 @@ public class TestNearSpansOrdered extends TestCase {
     new QueryParser(FIELD, new WhitespaceAnalyzer());
 
   public void tearDown() throws Exception {
+    super.tearDown();
     searcher.close();
   }
   
   public void setUp() throws Exception {
+    super.setUp();
     RAMDirectory directory = new RAMDirectory();
     IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true);
     for (int i = 0; i < docFields.length; i++) {
diff --git a/src/test/org/apache/lucene/search/spans/TestSpans.java b/src/test/org/apache/lucene/search/spans/TestSpans.java
index a2b27a9..9791df5 100644
--- a/src/test/org/apache/lucene/search/spans/TestSpans.java
+++ b/src/test/org/apache/lucene/search/spans/TestSpans.java
@@ -26,16 +26,17 @@ import org.apache.lucene.index.Term;
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.io.IOException;
 
-public class TestSpans extends TestCase {
+public class TestSpans extends LuceneTestCase {
   private IndexSearcher searcher;
 
   public static final String field = "field";
 
   public void setUp() throws Exception {
+    super.setUp();
     RAMDirectory directory = new RAMDirectory();
     IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true);
     for (int i = 0; i < docFields.length; i++) {
diff --git a/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java b/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java
index 3e510e3..a93e4d2 100644
--- a/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java
+++ b/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java
@@ -19,7 +19,7 @@ package org.apache.lucene.search.spans;
 
 import java.io.IOException;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.document.Document;
@@ -36,7 +36,7 @@ import org.apache.lucene.store.RAMDirectory;
  *
  * @author Reece Wilton
  */
-public class TestSpansAdvanced extends TestCase {
+public class TestSpansAdvanced extends LuceneTestCase {
 
     // location to the index
     protected Directory mDirectory;;
@@ -52,6 +52,7 @@ public class TestSpansAdvanced extends TestCase {
      */
     protected void setUp() throws Exception {
         super.setUp();
+        super.setUp();
 
         // create test index
         mDirectory = new RAMDirectory();
@@ -65,6 +66,7 @@ public class TestSpansAdvanced extends TestCase {
     }
 
     protected void tearDown() throws Exception {
+        super.tearDown();
         searcher.close();
         mDirectory.close();
         mDirectory = null;
diff --git a/src/test/org/apache/lucene/store/TestBufferedIndexInput.java b/src/test/org/apache/lucene/store/TestBufferedIndexInput.java
index 2df6b9f..9b51c86 100755
--- a/src/test/org/apache/lucene/store/TestBufferedIndexInput.java
+++ b/src/test/org/apache/lucene/store/TestBufferedIndexInput.java
@@ -34,9 +34,9 @@ import org.apache.lucene.search.Hits;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.util._TestUtil;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
-public class TestBufferedIndexInput extends TestCase {
+public class TestBufferedIndexInput extends LuceneTestCase {
 	// Call readByte() repeatedly, past the buffer boundary, and see that it
 	// is working as expected.
 	// Our input comes from a dynamically generated/ "file" - see
diff --git a/src/test/org/apache/lucene/store/TestHugeRamFile.java b/src/test/org/apache/lucene/store/TestHugeRamFile.java
index eae214b..2106040 100755
--- a/src/test/org/apache/lucene/store/TestHugeRamFile.java
+++ b/src/test/org/apache/lucene/store/TestHugeRamFile.java
@@ -20,10 +20,10 @@ package org.apache.lucene.store;
 import java.io.IOException;
 import java.util.HashMap;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 /** Test huge RAMFile with more than Integer.MAX_VALUE bytes. */
-public class TestHugeRamFile extends TestCase {
+public class TestHugeRamFile extends LuceneTestCase {
   
   private static final long MAX_VALUE = (long) 2 * (long) Integer.MAX_VALUE;
 
diff --git a/src/test/org/apache/lucene/store/TestLock.java b/src/test/org/apache/lucene/store/TestLock.java
index f5f0ecf..761221c 100644
--- a/src/test/org/apache/lucene/store/TestLock.java
+++ b/src/test/org/apache/lucene/store/TestLock.java
@@ -56,9 +56,9 @@ package org.apache.lucene.store;
 
 
 import java.io.IOException;
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
-public class TestLock extends TestCase {
+public class TestLock extends LuceneTestCase {
 
     public void testObtain() {
         LockMock lock = new LockMock();
diff --git a/src/test/org/apache/lucene/store/TestLockFactory.java b/src/test/org/apache/lucene/store/TestLockFactory.java
index 6c55354..c7e7349 100755
--- a/src/test/org/apache/lucene/store/TestLockFactory.java
+++ b/src/test/org/apache/lucene/store/TestLockFactory.java
@@ -17,7 +17,7 @@ package org.apache.lucene.store;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 import java.util.Hashtable;
 import java.util.Enumeration;
@@ -36,7 +36,7 @@ import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.Hits;
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
 
-public class TestLockFactory extends TestCase {
+public class TestLockFactory extends LuceneTestCase {
 
     // Verify: we can provide our own LockFactory implementation, the right
     // methods are called at the right time, locks are created, etc.
diff --git a/src/test/org/apache/lucene/store/TestMMapDirectory.java b/src/test/org/apache/lucene/store/TestMMapDirectory.java
index d68f6e0..062ce29 100644
--- a/src/test/org/apache/lucene/store/TestMMapDirectory.java
+++ b/src/test/org/apache/lucene/store/TestMMapDirectory.java
@@ -17,10 +17,10 @@ package org.apache.lucene.store;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import java.lang.reflect.Method;
 
-public class TestMMapDirectory extends TestCase {
+public class TestMMapDirectory extends LuceneTestCase {
 
   // Simply verify that if there is a method in FSDirectory
   // that returns IndexInput or a subclass, that
diff --git a/src/test/org/apache/lucene/store/TestWindowsMMap.java b/src/test/org/apache/lucene/store/TestWindowsMMap.java
index dc8cd01..c101228 100644
--- a/src/test/org/apache/lucene/store/TestWindowsMMap.java
+++ b/src/test/org/apache/lucene/store/TestWindowsMMap.java
@@ -1,96 +1,97 @@
-package org.apache.lucene.store;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.util.HashSet;
-import java.util.Random;
-import java.io.File;
-
-import junit.framework.TestCase;
-
-import org.apache.lucene.analysis.standard.StandardAnalyzer;
-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.store.FSDirectory;
-
-public class TestWindowsMMap extends TestCase {
-	
-	private final static String alphabet = "abcdefghijklmnopqrstuvwzyz";
-	private Random random;
-	
-	public void setUp() {
-		random = new Random();
-		System.setProperty("org.apache.lucene.FSDirectory.class", "org.apache.lucene.store.MMapDirectory");
-	}
-	
-	private String randomToken() {
-		int tl = 1 + random.nextInt(7);
-		StringBuffer sb = new StringBuffer();
-		for(int cx = 0; cx < tl; cx ++) {
-			int c = random.nextInt(25);
-			sb.append(alphabet.substring(c, c+1));
-		}
-		return sb.toString();
-	}
-	
-	private String randomField() {
-		int fl = 1 + random.nextInt(3);
-		StringBuffer fb = new StringBuffer();
-		for(int fx = 0; fx < fl; fx ++) {
-			fb.append(randomToken());
-			fb.append(" ");
-		}
-		return fb.toString();
-	}
-	
-	private final static String storePathname = 
-    new File(System.getProperty("tempDir"),"testLuceneMmap").getAbsolutePath();
-
-	public void testMmapIndex() throws Exception {
-		FSDirectory storeDirectory;
-		storeDirectory = FSDirectory.getDirectory(storePathname);
-
-		// plan to add a set of useful stopwords, consider changing some of the
-		// interior filters.
-		StandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());
-		// TODO: something about lock timeouts and leftover locks.
-		IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true);
-		IndexSearcher searcher = new IndexSearcher(storePathname);
-		
-		for(int dx = 0; dx < 1000; dx ++) {
-			String f = randomField();
-			Document doc = new Document();
-			doc.add(new Field("data", f, Field.Store.YES, Field.Index.TOKENIZED));	
-			writer.addDocument(doc);
-		}
-		
-		searcher.close();
-		writer.close();
-                rmDir(new File(storePathname));
-	}
-
-        private void rmDir(File dir) {
-          File[] files = dir.listFiles();
-          for (int i = 0; i < files.length; i++) {
-            files[i].delete();
-          }
-          dir.delete();
-        }
-}
+package org.apache.lucene.store;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.util.HashSet;
+import java.util.Random;
+import java.io.File;
+
+import org.apache.lucene.util.LuceneTestCase;
+
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.store.FSDirectory;
+
+public class TestWindowsMMap extends LuceneTestCase {
+	
+	private final static String alphabet = "abcdefghijklmnopqrstuvwzyz";
+	private Random random;
+	
+	public void setUp() throws Exception {
+		super.setUp();
+		random = new Random();
+		System.setProperty("org.apache.lucene.FSDirectory.class", "org.apache.lucene.store.MMapDirectory");
+	}
+	
+	private String randomToken() {
+		int tl = 1 + random.nextInt(7);
+		StringBuffer sb = new StringBuffer();
+		for(int cx = 0; cx < tl; cx ++) {
+			int c = random.nextInt(25);
+			sb.append(alphabet.substring(c, c+1));
+		}
+		return sb.toString();
+	}
+	
+	private String randomField() {
+		int fl = 1 + random.nextInt(3);
+		StringBuffer fb = new StringBuffer();
+		for(int fx = 0; fx < fl; fx ++) {
+			fb.append(randomToken());
+			fb.append(" ");
+		}
+		return fb.toString();
+	}
+	
+	private final static String storePathname = 
+    new File(System.getProperty("tempDir"),"testLuceneMmap").getAbsolutePath();
+
+	public void testMmapIndex() throws Exception {
+		FSDirectory storeDirectory;
+		storeDirectory = FSDirectory.getDirectory(storePathname);
+
+		// plan to add a set of useful stopwords, consider changing some of the
+		// interior filters.
+		StandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());
+		// TODO: something about lock timeouts and leftover locks.
+		IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true);
+		IndexSearcher searcher = new IndexSearcher(storePathname);
+		
+		for(int dx = 0; dx < 1000; dx ++) {
+			String f = randomField();
+			Document doc = new Document();
+			doc.add(new Field("data", f, Field.Store.YES, Field.Index.TOKENIZED));	
+			writer.addDocument(doc);
+		}
+		
+		searcher.close();
+		writer.close();
+                rmDir(new File(storePathname));
+	}
+
+        private void rmDir(File dir) {
+          File[] files = dir.listFiles();
+          for (int i = 0; i < files.length; i++) {
+            files[i].delete();
+          }
+          dir.delete();
+        }
+}
diff --git a/src/test/org/apache/lucene/util/LuceneTestCase.java b/src/test/org/apache/lucene/util/LuceneTestCase.java
new file mode 100644
index 0000000..7ff6007
--- /dev/null
+++ b/src/test/org/apache/lucene/util/LuceneTestCase.java
@@ -0,0 +1,52 @@
+package org.apache.lucene.util;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.index.ConcurrentMergeScheduler;
+import junit.framework.TestCase;
+
+/** Base class for all Lucene unit tests.  Currently the
+ *  only added functionality over JUnit's TestCase is
+ *  asserting that no unhandled exceptions occurred in
+ *  threads launched by ConcurrentMergeScheduler.  If you
+ *  override either <code>setUp()</code> or
+ *  <code>tearDown()</code> in your unit test, make sure you
+ *  call <code>super.setUp()</code> and
+ *  <code>super.tearDown()</code>.
+ */
+
+public class LuceneTestCase extends TestCase {
+
+  public LuceneTestCase() {
+    super();
+  }
+
+  public LuceneTestCase(String name) {
+    super(name);
+  }
+
+  protected void setUp() throws Exception {
+    ConcurrentMergeScheduler.setTestMode();
+  }
+
+  protected void tearDown() throws Exception {
+    if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {
+      fail("ConcurrentMergeScheduler hit unhandled exceptions");
+    }
+  }
+}
diff --git a/src/test/org/apache/lucene/util/TestBitVector.java b/src/test/org/apache/lucene/util/TestBitVector.java
index 74a28ce..0433e67 100644
--- a/src/test/org/apache/lucene/util/TestBitVector.java
+++ b/src/test/org/apache/lucene/util/TestBitVector.java
@@ -19,7 +19,7 @@ package org.apache.lucene.util;
 
 import java.io.IOException;
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 
@@ -29,7 +29,7 @@ import org.apache.lucene.store.RAMDirectory;
  * 
  * @version $Id$
  */
-public class TestBitVector extends TestCase
+public class TestBitVector extends LuceneTestCase
 {
     public TestBitVector(String s) {
         super(s);
diff --git a/src/test/org/apache/lucene/util/TestPriorityQueue.java b/src/test/org/apache/lucene/util/TestPriorityQueue.java
index da2b1c6..2f5173d 100644
--- a/src/test/org/apache/lucene/util/TestPriorityQueue.java
+++ b/src/test/org/apache/lucene/util/TestPriorityQueue.java
@@ -18,10 +18,10 @@ package org.apache.lucene.util;
  */
 
 import java.util.Random;
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
 public class TestPriorityQueue
-    extends TestCase
+    extends LuceneTestCase
 {
     public TestPriorityQueue(String name)
     {
diff --git a/src/test/org/apache/lucene/util/TestSmallFloat.java b/src/test/org/apache/lucene/util/TestSmallFloat.java
index 58c49b4..07be989 100644
--- a/src/test/org/apache/lucene/util/TestSmallFloat.java
+++ b/src/test/org/apache/lucene/util/TestSmallFloat.java
@@ -16,14 +16,14 @@ package org.apache.lucene.util;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 import java.util.Random;
 
 /**
  * @author yonik
  * @version $Id$
  */
-public class TestSmallFloat extends TestCase {
+public class TestSmallFloat extends LuceneTestCase {
 
   // original lucene byteToFloat
   static float orig_byteToFloat(byte b) {
diff --git a/src/test/org/apache/lucene/util/TestStringHelper.java b/src/test/org/apache/lucene/util/TestStringHelper.java
index 6964d63..9793f56 100644
--- a/src/test/org/apache/lucene/util/TestStringHelper.java
+++ b/src/test/org/apache/lucene/util/TestStringHelper.java
@@ -17,9 +17,9 @@ package org.apache.lucene.util;
  * limitations under the License.
  */
 
-import junit.framework.TestCase;
+import org.apache.lucene.util.LuceneTestCase;
 
-public class TestStringHelper extends TestCase {
+public class TestStringHelper extends LuceneTestCase {
 
 
   public void testStringDifference() {

