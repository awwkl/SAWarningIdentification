GitDiffStart: 06d4849ca8e4d9aae0f64d326ad640c594df4d24 | Fri Aug 17 16:58:36 2007 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index 8376b67..6e883e7 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -119,6 +119,9 @@ Optimizations
     TokenStream instances when possible to improve tokenization
     performance (~10-15%). (Mike McCandless)
 
+ 9. LUCENE-871: Speedup ISOLatin1AccentFilter (Ian Boston via Mike
+    McCandless)
+
 Documentation
 
 Build
diff --git a/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java b/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
index c930a8d..32edc7b 100644
--- a/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
+++ b/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
@@ -35,155 +35,177 @@ public class ISOLatin1AccentFilter extends TokenFilter {
   public final Token next(Token result) throws java.io.IOException {
     result = input.next(result);
     if (result != null) {
-      outputPos = 0;
-      removeAccents(result.termBuffer(), result.termLength());
-      result.setTermBuffer(output, 0, outputPos);
+      final char[] buffer = result.termBuffer();
+      final int length = result.termLength();
+      // If no characters actually require rewriting then we
+      // just return token as-is:
+      for(int i=0;i<length;i++) {
+        final char c = buffer[i];
+        if (c >= '\u00c0' && c <= '\u0178') {
+          removeAccents(buffer, length);
+          result.setTermBuffer(output, 0, outputPos);
+          break;
+        }
+      }
       return result;
     } else
       return null;
   }
 
-  private final void addChar(char c) {
-    if (outputPos == output.length) {
-      char[] newArray = new char[2*output.length];
-      System.arraycopy(output, 0, newArray, 0, output.length);
-      output = newArray;
-    }
-    output[outputPos++] = c;
-  }
-
   /**
    * To replace accented characters in a String by unaccented equivalents.
    */
   public final void removeAccents(char[] input, int length) {
+
+    // Worst-case length required:
+    final int maxSizeNeeded = 2*length;
+
+    int size = output.length;
+    while (size < maxSizeNeeded)
+      size *= 2;
+
+    if (size != output.length)
+      output = new char[size];
+
+    outputPos = 0;
+
     int pos = 0;
+
     for (int i=0; i<length; i++, pos++) {
-      switch (input[pos]) {
-      case '\u00C0' : // ?
-      case '\u00C1' : // ?
-      case '\u00C2' : // ?
-      case '\u00C3' : // ?
-      case '\u00C4' : // ?
-      case '\u00C5' : // ?
-        addChar('A');
-        break;
-      case '\u00C6' : // ?
-        addChar('A');
-        addChar('E');
-        break;
-      case '\u00C7' : // ?
-        addChar('C');
-        break;
-      case '\u00C8' : // ?
-      case '\u00C9' : // ?
-      case '\u00CA' : // ?
-      case '\u00CB' : // ?
-        addChar('E');
-        break;
-      case '\u00CC' : // ?
-      case '\u00CD' : // ?
-      case '\u00CE' : // ?
-      case '\u00CF' : // ?
-        addChar('I');
-        break;
-      case '\u00D0' : // ?
-        addChar('D');
-        break;
-      case '\u00D1' : // ?
-        addChar('N');
-        break;
-      case '\u00D2' : // ?
-      case '\u00D3' : // ?
-      case '\u00D4' : // ?
-      case '\u00D5' : // ?
-      case '\u00D6' : // ?
-      case '\u00D8' : // ?
-        addChar('O');
-        break;
-      case '\u0152' : // ?
-        addChar('O');
-        addChar('E');
-        break;
-      case '\u00DE' : // ?
-        addChar('T');
-        addChar('H');
-        break;
-      case '\u00D9' : // ?
-      case '\u00DA' : // ?
-      case '\u00DB' : // ?
-      case '\u00DC' : // ?
-        addChar('U');
-        break;
-      case '\u00DD' : // ?
-      case '\u0178' : // Ÿ
-        addChar('Y');
-        break;
-      case '\u00E0' : // ?
-      case '\u00E1' : // á
-      case '\u00E2' : // â
-      case '\u00E3' : // ã
-      case '\u00E4' : // ä
-      case '\u00E5' : // å
-        addChar('a');
-        break;
-      case '\u00E6' : // æ
-        addChar('a');
-        addChar('e');
-        break;
-      case '\u00E7' : // ç
-        addChar('c');
-        break;
-      case '\u00E8' : // è
-      case '\u00E9' : // é
-      case '\u00EA' : // ê
-      case '\u00EB' : // ë
-        addChar('e');
-        break;
-      case '\u00EC' : // ì
-      case '\u00ED' : // í
-      case '\u00EE' : // î
-      case '\u00EF' : // ï
-        addChar('i');
-        break;
-      case '\u00F0' : // ð
-        addChar('d');
-        break;
-      case '\u00F1' : // ñ
-        addChar('n');
-        break;
-      case '\u00F2' : // ò
-      case '\u00F3' : // ó
-      case '\u00F4' : // ô
-      case '\u00F5' : // õ
-      case '\u00F6' : // ö
-      case '\u00F8' : // ø
-        addChar('o');
-        break;
-      case '\u0153' : // ?
-        addChar('o');
-        addChar('e');
-        break;
-      case '\u00DF' : // ?
-        addChar('s');
-        addChar('s');
-        break;
-      case '\u00FE' : // þ
-        addChar('t');
-        addChar('h');
-        break;
-      case '\u00F9' : // ù
-      case '\u00FA' : // ú
-      case '\u00FB' : // û
-      case '\u00FC' : // ü
-        addChar('u');
-        break;
-      case '\u00FD' : // ý
-      case '\u00FF' : // ÿ
-        addChar('y');
-        break;
-      default :
-        addChar(input[pos]);
-        break;
+      final char c = input[pos];
+
+      // Quick test: if it's not in range then just keep
+      // current character
+      if (c < '\u00c0')
+        output[outputPos++] = c;
+      else {
+        switch (c) {
+        case '\u00C0' : // ?
+        case '\u00C1' : // ?
+        case '\u00C2' : // ?
+        case '\u00C3' : // ?
+        case '\u00C4' : // ?
+        case '\u00C5' : // ?
+          output[outputPos++] = 'A';
+          break;
+        case '\u00C6' : // ?
+          output[outputPos++] = 'A';
+          output[outputPos++] = 'E';
+          break;
+        case '\u00C7' : // ?
+          output[outputPos++] = 'C';
+          break;
+        case '\u00C8' : // ?
+        case '\u00C9' : // ?
+        case '\u00CA' : // ?
+        case '\u00CB' : // ?
+          output[outputPos++] = 'E';
+          break;
+        case '\u00CC' : // ?
+        case '\u00CD' : // ?
+        case '\u00CE' : // ?
+        case '\u00CF' : // ?
+          output[outputPos++] = 'I';
+          break;
+        case '\u00D0' : // ?
+          output[outputPos++] = 'D';
+          break;
+        case '\u00D1' : // ?
+          output[outputPos++] = 'N';
+          break;
+        case '\u00D2' : // ?
+        case '\u00D3' : // ?
+        case '\u00D4' : // ?
+        case '\u00D5' : // ?
+        case '\u00D6' : // ?
+        case '\u00D8' : // ?
+          output[outputPos++] = 'O';
+          break;
+        case '\u0152' : // ?
+          output[outputPos++] = 'O';
+          output[outputPos++] = 'E';
+          break;
+        case '\u00DE' : // ?
+          output[outputPos++] = 'T';
+          output[outputPos++] = 'H';
+          break;
+        case '\u00D9' : // ?
+        case '\u00DA' : // ?
+        case '\u00DB' : // ?
+        case '\u00DC' : // ?
+          output[outputPos++] = 'U';
+          break;
+        case '\u00DD' : // ?
+        case '\u0178' : // Ÿ
+          output[outputPos++] = 'Y';
+          break;
+        case '\u00E0' : // ?
+        case '\u00E1' : // á
+        case '\u00E2' : // â
+        case '\u00E3' : // ã
+        case '\u00E4' : // ä
+        case '\u00E5' : // å
+          output[outputPos++] = 'a';
+          break;
+        case '\u00E6' : // æ
+          output[outputPos++] = 'a';
+          output[outputPos++] = 'e';
+          break;
+        case '\u00E7' : // ç
+          output[outputPos++] = 'c';
+          break;
+        case '\u00E8' : // è
+        case '\u00E9' : // é
+        case '\u00EA' : // ê
+        case '\u00EB' : // ë
+          output[outputPos++] = 'e';
+          break;
+        case '\u00EC' : // ì
+        case '\u00ED' : // í
+        case '\u00EE' : // î
+        case '\u00EF' : // ï
+          output[outputPos++] = 'i';
+          break;
+        case '\u00F0' : // ð
+          output[outputPos++] = 'd';
+          break;
+        case '\u00F1' : // ñ
+          output[outputPos++] = 'n';
+          break;
+        case '\u00F2' : // ò
+        case '\u00F3' : // ó
+        case '\u00F4' : // ô
+        case '\u00F5' : // õ
+        case '\u00F6' : // ö
+        case '\u00F8' : // ø
+          output[outputPos++] = 'o';
+          break;
+        case '\u0153' : // ?
+          output[outputPos++] = 'o';
+          output[outputPos++] = 'e';
+          break;
+        case '\u00DF' : // ?
+          output[outputPos++] = 's';
+          output[outputPos++] = 's';
+          break;
+        case '\u00FE' : // þ
+          output[outputPos++] = 't';
+          output[outputPos++] = 'h';
+          break;
+        case '\u00F9' : // ù
+        case '\u00FA' : // ú
+        case '\u00FB' : // û
+        case '\u00FC' : // ü
+          output[outputPos++] = 'u';
+          break;
+        case '\u00FD' : // ý
+        case '\u00FF' : // ÿ
+          output[outputPos++] = 'y';
+          break;
+        default :
+          output[outputPos++] = c;
+          break;
+        }
       }
     }
   }

