GitDiffStart: 964bab48d4dca9508a1f8743cfb6bfb7dfe79e6b | Wed Oct 28 16:16:46 2009 +0000
diff --git a/src/java/org/apache/lucene/analysis/ASCIIFoldingFilter.java b/src/java/org/apache/lucene/analysis/ASCIIFoldingFilter.java
index 7d320a0..d3201af 100644
--- a/src/java/org/apache/lucene/analysis/ASCIIFoldingFilter.java
+++ b/src/java/org/apache/lucene/analysis/ASCIIFoldingFilter.java
@@ -67,6 +67,7 @@ public final class ASCIIFoldingFilter extends TokenFilter {
   private int outputPos;
   private TermAttribute termAtt;
 
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       final char[] buffer = termAtt.termBuffer();
diff --git a/src/java/org/apache/lucene/analysis/BaseCharFilter.java b/src/java/org/apache/lucene/analysis/BaseCharFilter.java
index 00f7886..d8cfa78 100644
--- a/src/java/org/apache/lucene/analysis/BaseCharFilter.java
+++ b/src/java/org/apache/lucene/analysis/BaseCharFilter.java
@@ -44,6 +44,7 @@ public abstract class BaseCharFilter extends CharFilter {
    *  recently added position, as it's a simple linear
    *  search backwards through all offset corrections added
    *  by {@link #addOffCorrectMap}. */
+  @Override
   protected int correct(int currentOff) {
     if (pcmList == null || pcmList.isEmpty()) {
       return currentOff;
@@ -78,6 +79,7 @@ public abstract class BaseCharFilter extends CharFilter {
       this.cumulativeDiff = cumulativeDiff;
     }
 
+    @Override
     public String toString() {
       StringBuilder sb = new StringBuilder();
       sb.append('(');
diff --git a/src/java/org/apache/lucene/analysis/CachingTokenFilter.java b/src/java/org/apache/lucene/analysis/CachingTokenFilter.java
index 450bf3a..9885ace 100644
--- a/src/java/org/apache/lucene/analysis/CachingTokenFilter.java
+++ b/src/java/org/apache/lucene/analysis/CachingTokenFilter.java
@@ -42,6 +42,7 @@ public final class CachingTokenFilter extends TokenFilter {
     super(input);
   }
   
+  @Override
   public final boolean incrementToken() throws IOException {
     if (cache == null) {
       // fill cache lazily
@@ -59,12 +60,14 @@ public final class CachingTokenFilter extends TokenFilter {
     return true;
   }
   
+  @Override
   public final void end() throws IOException {
     if (finalState != null) {
       restoreState(finalState);
     }
   }
 
+  @Override
   public void reset() throws IOException {
     if(cache != null) {
       iterator = cache.iterator();
diff --git a/src/java/org/apache/lucene/analysis/CharArraySet.java b/src/java/org/apache/lucene/analysis/CharArraySet.java
index 99cb031..345bb2f 100644
--- a/src/java/org/apache/lucene/analysis/CharArraySet.java
+++ b/src/java/org/apache/lucene/analysis/CharArraySet.java
@@ -223,14 +223,17 @@ public class CharArraySet extends AbstractSet<Object> {
   }
 
 
+  @Override
   public int size() {
     return count;
   }
 
+  @Override
   public boolean isEmpty() {
     return count==0;
   }
 
+  @Override
   public boolean contains(Object o) {
     if (o instanceof char[]) {
       final char[] text = (char[])o;
@@ -239,6 +242,7 @@ public class CharArraySet extends AbstractSet<Object> {
     return contains(o.toString());
   }
 
+  @Override
   public boolean add(Object o) {
     if (o instanceof char[]) {
       return add((char[])o);
@@ -309,6 +313,7 @@ public class CharArraySet extends AbstractSet<Object> {
   }
 
   /** returns an iterator of new allocated Strings, this method violates the Set interface */
+  @Override
   @SuppressWarnings("unchecked")
   public Iterator<Object> iterator() {
     return (Iterator) stringIterator();
@@ -328,22 +333,27 @@ public class CharArraySet extends AbstractSet<Object> {
       super(entries, ignoreCase, count);
     }
 
+    @Override
     public boolean add(Object o){
       throw new UnsupportedOperationException();
     }
     
+    @Override
     public boolean addAll(Collection<? extends Object> coll) {
       throw new UnsupportedOperationException();
     }
     
+    @Override
     public boolean add(char[] text) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
     public boolean add(CharSequence text) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
     public boolean add(String text) {
       throw new UnsupportedOperationException();
     }
diff --git a/src/java/org/apache/lucene/analysis/CharFilter.java b/src/java/org/apache/lucene/analysis/CharFilter.java
index 4ff0482..7f7335c 100644
--- a/src/java/org/apache/lucene/analysis/CharFilter.java
+++ b/src/java/org/apache/lucene/analysis/CharFilter.java
@@ -50,26 +50,32 @@ public abstract class CharFilter extends CharStream {
    * Chains the corrected offset through the input
    * CharFilter.
    */
+  @Override
   public final int correctOffset(int currentOff) {
     return input.correctOffset(correct(currentOff));
   }
 
+  @Override
   public void close() throws IOException {
     input.close();
   }
 
+  @Override
   public int read(char[] cbuf, int off, int len) throws IOException {
     return input.read(cbuf, off, len);
   }
 
+  @Override
   public boolean markSupported(){
     return input.markSupported();
   }
 
+  @Override
   public void mark( int readAheadLimit ) throws IOException {
     input.mark(readAheadLimit);
   }
 
+  @Override
   public void reset() throws IOException {
     input.reset();
   }
diff --git a/src/java/org/apache/lucene/analysis/CharReader.java b/src/java/org/apache/lucene/analysis/CharReader.java
index 606e430..2d07048 100644
--- a/src/java/org/apache/lucene/analysis/CharReader.java
+++ b/src/java/org/apache/lucene/analysis/CharReader.java
@@ -39,26 +39,32 @@ public final class CharReader extends CharStream {
     input = in;
   }
 
+  @Override
   public int correctOffset(int currentOff) {
     return currentOff;
   }
 
+  @Override
   public void close() throws IOException {
     input.close();
   }
 
+  @Override
   public int read(char[] cbuf, int off, int len) throws IOException {
     return input.read(cbuf, off, len);
   }
 
+  @Override
   public boolean markSupported(){
     return input.markSupported();
   }
 
+  @Override
   public void mark( int readAheadLimit ) throws IOException {
     input.mark(readAheadLimit);
   }
 
+  @Override
   public void reset() throws IOException {
     input.reset();
   }
diff --git a/src/java/org/apache/lucene/analysis/CharTokenizer.java b/src/java/org/apache/lucene/analysis/CharTokenizer.java
index 4c0baa0..7de4a17 100644
--- a/src/java/org/apache/lucene/analysis/CharTokenizer.java
+++ b/src/java/org/apache/lucene/analysis/CharTokenizer.java
@@ -65,6 +65,7 @@ public abstract class CharTokenizer extends Tokenizer {
     return c;
   }
 
+  @Override
   public final boolean incrementToken() throws IOException {
     clearAttributes();
     int length = 0;
@@ -108,12 +109,14 @@ public abstract class CharTokenizer extends Tokenizer {
     return true;
   }
   
+  @Override
   public final void end() {
     // set final offset
     int finalOffset = correctOffset(offset);
     offsetAtt.setOffset(finalOffset, finalOffset);
   }
 
+  @Override
   public void reset(Reader input) throws IOException {
     super.reset(input);
     bufferIndex = 0;
diff --git a/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java b/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
index bc5bf72..be57947 100644
--- a/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
+++ b/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
@@ -41,6 +41,7 @@ public final class ISOLatin1AccentFilter extends TokenFilter {
   private int outputPos;
   private TermAttribute termAtt;
     
+  @Override
   public final boolean incrementToken() throws java.io.IOException {    
     if (input.incrementToken()) {
       final char[] buffer = termAtt.termBuffer();
diff --git a/src/java/org/apache/lucene/analysis/KeywordAnalyzer.java b/src/java/org/apache/lucene/analysis/KeywordAnalyzer.java
index f9e21bb..57fe821 100644
--- a/src/java/org/apache/lucene/analysis/KeywordAnalyzer.java
+++ b/src/java/org/apache/lucene/analysis/KeywordAnalyzer.java
@@ -28,10 +28,12 @@ public class KeywordAnalyzer extends Analyzer {
   public KeywordAnalyzer() {
     setOverridesTokenStreamMethod(KeywordAnalyzer.class);
   }
+  @Override
   public TokenStream tokenStream(String fieldName,
                                  final Reader reader) {
     return new KeywordTokenizer(reader);
   }
+  @Override
   public TokenStream reusableTokenStream(String fieldName,
                                          final Reader reader) throws IOException {
     if (overridesTokenStreamMethod) {
diff --git a/src/java/org/apache/lucene/analysis/KeywordTokenizer.java b/src/java/org/apache/lucene/analysis/KeywordTokenizer.java
index e5d33f80..2990040 100644
--- a/src/java/org/apache/lucene/analysis/KeywordTokenizer.java
+++ b/src/java/org/apache/lucene/analysis/KeywordTokenizer.java
@@ -62,6 +62,7 @@ public final class KeywordTokenizer extends Tokenizer {
     termAtt.resizeTermBuffer(bufferSize);    
   }
   
+  @Override
   public final boolean incrementToken() throws IOException {
     if (!done) {
       clearAttributes();
@@ -83,11 +84,13 @@ public final class KeywordTokenizer extends Tokenizer {
     return false;
   }
   
+  @Override
   public final void end() {
     // set final offset 
     offsetAtt.setOffset(finalOffset, finalOffset);
   }
 
+  @Override
   public void reset(Reader input) throws IOException {
     super.reset(input);
     this.done = false;
diff --git a/src/java/org/apache/lucene/analysis/LengthFilter.java b/src/java/org/apache/lucene/analysis/LengthFilter.java
index b7ce8c0..3010a21 100644
--- a/src/java/org/apache/lucene/analysis/LengthFilter.java
+++ b/src/java/org/apache/lucene/analysis/LengthFilter.java
@@ -46,6 +46,7 @@ public final class LengthFilter extends TokenFilter {
   /**
    * Returns the next input Token whose term() is the right len
    */
+  @Override
   public final boolean incrementToken() throws IOException {
     // return the first non-stop word found
     while (input.incrementToken()) {
diff --git a/src/java/org/apache/lucene/analysis/LetterTokenizer.java b/src/java/org/apache/lucene/analysis/LetterTokenizer.java
index 85b201c..ed5e9eb 100644
--- a/src/java/org/apache/lucene/analysis/LetterTokenizer.java
+++ b/src/java/org/apache/lucene/analysis/LetterTokenizer.java
@@ -46,6 +46,7 @@ public class LetterTokenizer extends CharTokenizer {
 
   /** Collects only characters which satisfy
    * {@link Character#isLetter(char)}.*/
+  @Override
   protected boolean isTokenChar(char c) {
     return Character.isLetter(c);
   }
diff --git a/src/java/org/apache/lucene/analysis/LowerCaseFilter.java b/src/java/org/apache/lucene/analysis/LowerCaseFilter.java
index 7fe2d49..eb0df81 100644
--- a/src/java/org/apache/lucene/analysis/LowerCaseFilter.java
+++ b/src/java/org/apache/lucene/analysis/LowerCaseFilter.java
@@ -32,6 +32,7 @@ public final class LowerCaseFilter extends TokenFilter {
 
   private TermAttribute termAtt;
   
+  @Override
   public final boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
 
diff --git a/src/java/org/apache/lucene/analysis/LowerCaseTokenizer.java b/src/java/org/apache/lucene/analysis/LowerCaseTokenizer.java
index 476e0ab..e166775 100644
--- a/src/java/org/apache/lucene/analysis/LowerCaseTokenizer.java
+++ b/src/java/org/apache/lucene/analysis/LowerCaseTokenizer.java
@@ -49,6 +49,7 @@ public final class LowerCaseTokenizer extends LetterTokenizer {
   
   /** Converts char to lower case
    * {@link Character#toLowerCase(char)}.*/
+  @Override
   protected char normalize(char c) {
     return Character.toLowerCase(c);
   }
diff --git a/src/java/org/apache/lucene/analysis/MappingCharFilter.java b/src/java/org/apache/lucene/analysis/MappingCharFilter.java
index 0791ee7..08097cc 100644
--- a/src/java/org/apache/lucene/analysis/MappingCharFilter.java
+++ b/src/java/org/apache/lucene/analysis/MappingCharFilter.java
@@ -47,6 +47,7 @@ public class MappingCharFilter extends BaseCharFilter {
     this.normMap = normMap;
   }
 
+  @Override
   public int read() throws IOException {
     while(true) {
       if (replacement != null && charPointer < replacement.length()) {
@@ -116,6 +117,7 @@ public class MappingCharFilter extends BaseCharFilter {
     return result;
   }
 
+  @Override
   public int read(char[] cbuf, int off, int len) throws IOException {
     char[] tmp = new char[len];
     int l = input.read(tmp, 0, len);
diff --git a/src/java/org/apache/lucene/analysis/PerFieldAnalyzerWrapper.java b/src/java/org/apache/lucene/analysis/PerFieldAnalyzerWrapper.java
index 62f7130..1beb91b 100644
--- a/src/java/org/apache/lucene/analysis/PerFieldAnalyzerWrapper.java
+++ b/src/java/org/apache/lucene/analysis/PerFieldAnalyzerWrapper.java
@@ -86,6 +86,7 @@ public class PerFieldAnalyzerWrapper extends Analyzer {
     analyzerMap.put(fieldName, analyzer);
   }
 
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     Analyzer analyzer = analyzerMap.get(fieldName);
     if (analyzer == null) {
@@ -95,6 +96,7 @@ public class PerFieldAnalyzerWrapper extends Analyzer {
     return analyzer.tokenStream(fieldName, reader);
   }
   
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
     if (overridesTokenStreamMethod) {
       // LUCENE-1678: force fallback to tokenStream() if we
@@ -110,6 +112,7 @@ public class PerFieldAnalyzerWrapper extends Analyzer {
   }
   
   /** Return the positionIncrementGap from the analyzer assigned to fieldName */
+  @Override
   public int getPositionIncrementGap(String fieldName) {
     Analyzer analyzer = analyzerMap.get(fieldName);
     if (analyzer == null)
@@ -117,6 +120,7 @@ public class PerFieldAnalyzerWrapper extends Analyzer {
     return analyzer.getPositionIncrementGap(fieldName);
   }
   
+  @Override
   public String toString() {
     return "PerFieldAnalyzerWrapper(" + analyzerMap + ", default=" + defaultAnalyzer + ")";
   }
diff --git a/src/java/org/apache/lucene/analysis/PorterStemFilter.java b/src/java/org/apache/lucene/analysis/PorterStemFilter.java
index c70e779..3982bb9 100644
--- a/src/java/org/apache/lucene/analysis/PorterStemFilter.java
+++ b/src/java/org/apache/lucene/analysis/PorterStemFilter.java
@@ -49,6 +49,7 @@ public final class PorterStemFilter extends TokenFilter {
     termAtt = addAttribute(TermAttribute.class);
   }
 
+  @Override
   public final boolean incrementToken() throws IOException {
     if (!input.incrementToken())
       return false;
diff --git a/src/java/org/apache/lucene/analysis/PorterStemmer.java b/src/java/org/apache/lucene/analysis/PorterStemmer.java
index 75a255e..d8cce88 100644
--- a/src/java/org/apache/lucene/analysis/PorterStemmer.java
+++ b/src/java/org/apache/lucene/analysis/PorterStemmer.java
@@ -94,6 +94,7 @@ class PorterStemmer
    * or a reference to the internal buffer can be retrieved by getResultBuffer
    * and getResultLength (which is generally more efficient.)
    */
+  @Override
   public String toString() { return new String(b,0,i); }
 
   /**
diff --git a/src/java/org/apache/lucene/analysis/SimpleAnalyzer.java b/src/java/org/apache/lucene/analysis/SimpleAnalyzer.java
index 7a4cba9..dcf577f 100644
--- a/src/java/org/apache/lucene/analysis/SimpleAnalyzer.java
+++ b/src/java/org/apache/lucene/analysis/SimpleAnalyzer.java
@@ -24,10 +24,12 @@ import java.io.IOException;
  *  with {@link LowerCaseFilter} */
 
 public final class SimpleAnalyzer extends Analyzer {
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     return new LowerCaseTokenizer(reader);
   }
 
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
     Tokenizer tokenizer = (Tokenizer) getPreviousTokenStream();
     if (tokenizer == null) {
diff --git a/src/java/org/apache/lucene/analysis/StopAnalyzer.java b/src/java/org/apache/lucene/analysis/StopAnalyzer.java
index f6423be..ca1dfba 100644
--- a/src/java/org/apache/lucene/analysis/StopAnalyzer.java
+++ b/src/java/org/apache/lucene/analysis/StopAnalyzer.java
@@ -93,6 +93,7 @@ public final class StopAnalyzer extends Analyzer {
   }
 
   /** Filters LowerCaseTokenizer with StopFilter. */
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     return new StopFilter(enablePositionIncrements, new LowerCaseTokenizer(reader), stopWords);
   }
@@ -102,6 +103,7 @@ public final class StopAnalyzer extends Analyzer {
     Tokenizer source;
     TokenStream result;
   };
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
     SavedStreams streams = (SavedStreams) getPreviousTokenStream();
     if (streams == null) {
diff --git a/src/java/org/apache/lucene/analysis/StopFilter.java b/src/java/org/apache/lucene/analysis/StopFilter.java
index c30bb70..aaef9d0 100644
--- a/src/java/org/apache/lucene/analysis/StopFilter.java
+++ b/src/java/org/apache/lucene/analysis/StopFilter.java
@@ -134,6 +134,7 @@ public final class StopFilter extends TokenFilter {
   /**
    * Returns the next input Token whose term() is not a stop word.
    */
+  @Override
   public final boolean incrementToken() throws IOException {
     // return the first non-stop word found
     int skippedPositions = 0;
diff --git a/src/java/org/apache/lucene/analysis/TeeSinkTokenFilter.java b/src/java/org/apache/lucene/analysis/TeeSinkTokenFilter.java
index 6abaed6..616fce3 100644
--- a/src/java/org/apache/lucene/analysis/TeeSinkTokenFilter.java
+++ b/src/java/org/apache/lucene/analysis/TeeSinkTokenFilter.java
@@ -127,6 +127,7 @@ public final class TeeSinkTokenFilter extends TokenFilter {
     while (incrementToken());
   }
   
+  @Override
   public boolean incrementToken() throws IOException {
     if (input.incrementToken()) {
       // capture state lazily - maybe no SinkFilter accepts this state
@@ -148,6 +149,7 @@ public final class TeeSinkTokenFilter extends TokenFilter {
     return false;
   }
   
+  @Override
   public final void end() throws IOException {
     super.end();
     AttributeSource.State finalState = captureState();
@@ -204,6 +206,7 @@ public final class TeeSinkTokenFilter extends TokenFilter {
       this.finalState = finalState;
     }
     
+    @Override
     public final boolean incrementToken() throws IOException {
       // lazy init the iterator
       if (it == null) {
@@ -219,18 +222,21 @@ public final class TeeSinkTokenFilter extends TokenFilter {
       return true;
     }
   
+    @Override
     public final void end() throws IOException {
       if (finalState != null) {
         restoreState(finalState);
       }
     }
     
+    @Override
     public final void reset() {
       it = cachedStates.iterator();
     }
   }
     
   private static final SinkFilter ACCEPT_ALL_FILTER = new SinkFilter() {
+    @Override
     public boolean accept(AttributeSource source) {
       return true;
     }
diff --git a/src/java/org/apache/lucene/analysis/Token.java b/src/java/org/apache/lucene/analysis/Token.java
index bb2e78a..f1888de 100644
--- a/src/java/org/apache/lucene/analysis/Token.java
+++ b/src/java/org/apache/lucene/analysis/Token.java
@@ -487,6 +487,7 @@ public class Token extends AttributeImpl
     this.payload = payload;
   }
   
+  @Override
   public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append('(');
@@ -507,6 +508,7 @@ public class Token extends AttributeImpl
   /** Resets the term text, payload, flags, and positionIncrement,
    * startOffset, endOffset and token type to default.
    */
+  @Override
   public void clear() {
     payload = null;
     // Leave termBuffer to allow re-use
@@ -517,6 +519,7 @@ public class Token extends AttributeImpl
     type = DEFAULT_TYPE;
   }
 
+  @Override
   public Object clone() {
     Token t = (Token)super.clone();
     // Do a deep clone
@@ -544,6 +547,7 @@ public class Token extends AttributeImpl
     return t;
   }
 
+  @Override
   public boolean equals(Object obj) {
     if (obj == this)
       return true;
@@ -578,6 +582,7 @@ public class Token extends AttributeImpl
       return o1.equals(o2);
   }
 
+  @Override
   public int hashCode() {
     initTermBuffer();
     int code = termLength;
@@ -739,6 +744,7 @@ public class Token extends AttributeImpl
     payload =  prototype.payload;
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     if (target instanceof Token) {
       final Token to = (Token) target;
@@ -780,11 +786,13 @@ public class Token extends AttributeImpl
       this.delegate = delegate;
     }
   
+    @Override
     public AttributeImpl createAttributeInstance(Class<? extends Attribute> attClass) {
       return attClass.isAssignableFrom(Token.class)
         ? new Token() : delegate.createAttributeInstance(attClass);
     }
     
+    @Override
     public boolean equals(Object other) {
       if (this == other) return true;
       if (other instanceof TokenAttributeFactory) {
@@ -794,6 +802,7 @@ public class Token extends AttributeImpl
       return false;
     }
     
+    @Override
     public int hashCode() {
       return delegate.hashCode() ^ 0x0a45aa31;
     }
diff --git a/src/java/org/apache/lucene/analysis/TokenFilter.java b/src/java/org/apache/lucene/analysis/TokenFilter.java
index 63dbb2d..ed67df3 100644
--- a/src/java/org/apache/lucene/analysis/TokenFilter.java
+++ b/src/java/org/apache/lucene/analysis/TokenFilter.java
@@ -37,16 +37,19 @@ public abstract class TokenFilter extends TokenStream {
   /** Performs end-of-stream operations, if any, and calls then <code>end()</code> on the
    * input TokenStream.<p/> 
    * <b>NOTE:</b> Be sure to call <code>super.end()</code> first when overriding this method.*/
+  @Override
   public void end() throws IOException {
     input.end();
   }
   
   /** Close the input TokenStream. */
+  @Override
   public void close() throws IOException {
     input.close();
   }
 
   /** Reset the filter as well as the input TokenStream. */
+  @Override
   public void reset() throws IOException {
     input.reset();
   }
diff --git a/src/java/org/apache/lucene/analysis/Tokenizer.java b/src/java/org/apache/lucene/analysis/Tokenizer.java
index 62bdc0f..64ee06f 100644
--- a/src/java/org/apache/lucene/analysis/Tokenizer.java
+++ b/src/java/org/apache/lucene/analysis/Tokenizer.java
@@ -67,6 +67,7 @@ public abstract class Tokenizer extends TokenStream {
   }
   
   /** By default, closes the input Reader. */
+  @Override
   public void close() throws IOException {
     input.close();
   }
diff --git a/src/java/org/apache/lucene/analysis/WhitespaceAnalyzer.java b/src/java/org/apache/lucene/analysis/WhitespaceAnalyzer.java
index af6e42b..2c2e4c0 100644
--- a/src/java/org/apache/lucene/analysis/WhitespaceAnalyzer.java
+++ b/src/java/org/apache/lucene/analysis/WhitespaceAnalyzer.java
@@ -23,10 +23,12 @@ import java.io.IOException;
 /** An Analyzer that uses {@link WhitespaceTokenizer}. */
 
 public final class WhitespaceAnalyzer extends Analyzer {
+  @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     return new WhitespaceTokenizer(reader);
   }
 
+  @Override
   public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
     Tokenizer tokenizer = (Tokenizer) getPreviousTokenStream();
     if (tokenizer == null) {
diff --git a/src/java/org/apache/lucene/analysis/WhitespaceTokenizer.java b/src/java/org/apache/lucene/analysis/WhitespaceTokenizer.java
index 095e157..5b1979b 100644
--- a/src/java/org/apache/lucene/analysis/WhitespaceTokenizer.java
+++ b/src/java/org/apache/lucene/analysis/WhitespaceTokenizer.java
@@ -42,6 +42,7 @@ public class WhitespaceTokenizer extends CharTokenizer {
   
   /** Collects only characters which do not satisfy
    * {@link Character#isWhitespace(char)}.*/
+  @Override
   protected boolean isTokenChar(char c) {
     return !Character.isWhitespace(c);
   }
diff --git a/src/java/org/apache/lucene/analysis/standard/StandardFilter.java b/src/java/org/apache/lucene/analysis/standard/StandardFilter.java
index 9ddc103..3bd9e6a 100644
--- a/src/java/org/apache/lucene/analysis/standard/StandardFilter.java
+++ b/src/java/org/apache/lucene/analysis/standard/StandardFilter.java
@@ -45,6 +45,7 @@ public final class StandardFilter extends TokenFilter {
    * <p>Removes <tt>'s</tt> from the end of words.
    * <p>Removes dots from acronyms.
    */
+  @Override
   public final boolean incrementToken() throws java.io.IOException {
     if (!input.incrementToken()) {
       return false;
diff --git a/src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java b/src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java
index 5dd11bf..f5292fd 100644
--- a/src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java
+++ b/src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java
@@ -170,6 +170,7 @@ public final class StandardTokenizer extends Tokenizer {
    *
    * @see org.apache.lucene.analysis.TokenStream#next()
    */
+  @Override
   public final boolean incrementToken() throws IOException {
     clearAttributes();
     int posIncr = 1;
@@ -207,6 +208,7 @@ public final class StandardTokenizer extends Tokenizer {
     }
   }
   
+  @Override
   public final void end() {
     // set final offset
     int finalOffset = correctOffset(scanner.yychar() + scanner.yylength());
@@ -218,11 +220,13 @@ public final class StandardTokenizer extends Tokenizer {
    *
    * @see org.apache.lucene.analysis.TokenStream#reset()
    */
+  @Override
   public void reset() throws IOException {
     super.reset();
     scanner.yyreset(input);
   }
 
+  @Override
   public void reset(Reader reader) throws IOException {
     super.reset(reader);
     reset();
diff --git a/src/java/org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl.java b/src/java/org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl.java
index 2554ac9..b0f002c 100644
--- a/src/java/org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl.java
+++ b/src/java/org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl.java
@@ -49,10 +49,12 @@ public class FlagsAttributeImpl extends AttributeImpl implements FlagsAttribute,
     this.flags = flags;
   }
   
+  @Override
   public void clear() {
     flags = 0;
   }
 
+  @Override
   public boolean equals(Object other) {
     if (this == other) {
       return true;
@@ -65,10 +67,12 @@ public class FlagsAttributeImpl extends AttributeImpl implements FlagsAttribute,
     return false;
   }
 
+  @Override
   public int hashCode() {
     return flags;
   }
   
+  @Override
   public void copyTo(AttributeImpl target) {
     FlagsAttribute t = (FlagsAttribute) target;
     t.setFlags(flags);
diff --git a/src/java/org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.java b/src/java/org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.java
index a28bfbe..0593200 100644
--- a/src/java/org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.java
+++ b/src/java/org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.java
@@ -55,11 +55,13 @@ public class OffsetAttributeImpl extends AttributeImpl implements OffsetAttribut
   }
 
 
+  @Override
   public void clear() {
     startOffset = 0;
     endOffset = 0;
   }
   
+  @Override
   public boolean equals(Object other) {
     if (other == this) {
       return true;
@@ -73,12 +75,14 @@ public class OffsetAttributeImpl extends AttributeImpl implements OffsetAttribut
     return false;
   }
 
+  @Override
   public int hashCode() {
     int code = startOffset;
     code = code * 31 + endOffset;
     return code;
   } 
   
+  @Override
   public void copyTo(AttributeImpl target) {
     OffsetAttribute t = (OffsetAttribute) target;
     t.setOffset(startOffset, endOffset);
diff --git a/src/java/org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.java b/src/java/org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.java
index 4471e69..5c697c5 100644
--- a/src/java/org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.java
+++ b/src/java/org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.java
@@ -54,10 +54,12 @@ public class PayloadAttributeImpl extends AttributeImpl implements PayloadAttrib
     this.payload = payload;
   }
   
+  @Override
   public void clear() {
     payload = null;
   }
 
+  @Override
   public Object clone()  {
     PayloadAttributeImpl clone = (PayloadAttributeImpl) super.clone();
     if (payload != null) {
@@ -66,6 +68,7 @@ public class PayloadAttributeImpl extends AttributeImpl implements PayloadAttrib
     return clone;
   }
 
+  @Override
   public boolean equals(Object other) {
     if (other == this) {
       return true;
@@ -83,10 +86,12 @@ public class PayloadAttributeImpl extends AttributeImpl implements PayloadAttrib
     return false;
   }
 
+  @Override
   public int hashCode() {
     return (payload == null) ? 0 : payload.hashCode();
   }
 
+  @Override
   public void copyTo(AttributeImpl target) {
     PayloadAttribute t = (PayloadAttribute) target;
     t.setPayload((payload == null) ? null : (Payload) payload.clone());
diff --git a/src/java/org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl.java b/src/java/org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl.java
index 99e42e3..7ab4c69 100644
--- a/src/java/org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl.java
+++ b/src/java/org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl.java
@@ -67,10 +67,12 @@ public class PositionIncrementAttributeImpl extends AttributeImpl implements Pos
     return positionIncrement;
   }
 
+  @Override
   public void clear() {
     this.positionIncrement = 1;
   }
   
+  @Override
   public boolean equals(Object other) {
     if (other == this) {
       return true;
@@ -83,10 +85,12 @@ public class PositionIncrementAttributeImpl extends AttributeImpl implements Pos
     return false;
   }
 
+  @Override
   public int hashCode() {
     return positionIncrement;
   }
   
+  @Override
   public void copyTo(AttributeImpl target) {
     PositionIncrementAttribute t = (PositionIncrementAttribute) target;
     t.setPositionIncrement(positionIncrement);
diff --git a/src/java/org/apache/lucene/analysis/tokenattributes/TermAttributeImpl.java b/src/java/org/apache/lucene/analysis/tokenattributes/TermAttributeImpl.java
index abeec1f..5720ecb 100644
--- a/src/java/org/apache/lucene/analysis/tokenattributes/TermAttributeImpl.java
+++ b/src/java/org/apache/lucene/analysis/tokenattributes/TermAttributeImpl.java
@@ -164,6 +164,7 @@ public class TermAttributeImpl extends AttributeImpl implements TermAttribute, C
     termLength = length;
   }
 
+  @Override
   public int hashCode() {
     initTermBuffer();
     int code = termLength;
@@ -171,10 +172,12 @@ public class TermAttributeImpl extends AttributeImpl implements TermAttribute, C
     return code;
   }
 
+  @Override
   public void clear() {
     termLength = 0;    
   }
 
+  @Override
   public Object clone() {
     TermAttributeImpl t = (TermAttributeImpl)super.clone();
     // Do a deep clone
@@ -184,6 +187,7 @@ public class TermAttributeImpl extends AttributeImpl implements TermAttribute, C
     return t;
   }
   
+  @Override
   public boolean equals(Object other) {
     if (other == this) {
       return true;
@@ -207,11 +211,13 @@ public class TermAttributeImpl extends AttributeImpl implements TermAttribute, C
     return false;
   }
 
+  @Override
   public String toString() {
     initTermBuffer();
     return "term=" + new String(termBuffer, 0, termLength);
   }
   
+  @Override
   public void copyTo(AttributeImpl target) {
     initTermBuffer();
     TermAttribute t = (TermAttribute) target;
diff --git a/src/java/org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl.java b/src/java/org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl.java
index d0d3540..20400cb 100644
--- a/src/java/org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl.java
+++ b/src/java/org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl.java
@@ -47,10 +47,12 @@ public class TypeAttributeImpl extends AttributeImpl implements TypeAttribute, C
     this.type = type;
   }
 
+  @Override
   public void clear() {
     type = DEFAULT_TYPE;    
   }
 
+  @Override
   public boolean equals(Object other) {
     if (other == this) {
       return true;
@@ -63,10 +65,12 @@ public class TypeAttributeImpl extends AttributeImpl implements TypeAttribute, C
     return false;
   }
 
+  @Override
   public int hashCode() {
     return type.hashCode();
   }
   
+  @Override
   public void copyTo(AttributeImpl target) {
     TypeAttribute t = (TypeAttribute) target;
     t.setType(type);
diff --git a/src/java/org/apache/lucene/document/AbstractField.java b/src/java/org/apache/lucene/document/AbstractField.java
index 294289b..d8a9067 100755
--- a/src/java/org/apache/lucene/document/AbstractField.java
+++ b/src/java/org/apache/lucene/document/AbstractField.java
@@ -235,6 +235,7 @@ public abstract class AbstractField implements Fieldable {
   }
 
   /** Prints a Field for human consumption. */
+  @Override
   public final String toString() {
     StringBuilder result = new StringBuilder();
     if (isStored) {
diff --git a/src/java/org/apache/lucene/document/DateTools.java b/src/java/org/apache/lucene/document/DateTools.java
index 126d8af..27d3a41 100644
--- a/src/java/org/apache/lucene/document/DateTools.java
+++ b/src/java/org/apache/lucene/document/DateTools.java
@@ -246,6 +246,7 @@ public class DateTools {
       this.resolution = resolution;
     }
     
+    @Override
     public String toString() {
       return resolution;
     }
diff --git a/src/java/org/apache/lucene/document/Document.java b/src/java/org/apache/lucene/document/Document.java
index 399d719..680bfd9 100644
--- a/src/java/org/apache/lucene/document/Document.java
+++ b/src/java/org/apache/lucene/document/Document.java
@@ -289,6 +289,7 @@ public final class Document implements java.io.Serializable {
   }
   
   /** Prints the fields of a document for human consumption. */
+  @Override
   public final String toString() {
     StringBuilder buffer = new StringBuilder();
     buffer.append("Document<");
diff --git a/src/java/org/apache/lucene/document/Field.java b/src/java/org/apache/lucene/document/Field.java
index 5f6a47e..224697c 100644
--- a/src/java/org/apache/lucene/document/Field.java
+++ b/src/java/org/apache/lucene/document/Field.java
@@ -43,12 +43,13 @@ public final class Field extends AbstractField implements Fieldable, Serializabl
      * stored.
      */
     YES {
+      @Override
       public boolean isStored() { return true; }
     },
 
     /** Do not store the field value in the index. */
-    NO
-    {
+    NO {
+      @Override
       public boolean isStored() { return false; }
     };
 
@@ -62,8 +63,11 @@ public final class Field extends AbstractField implements Fieldable, Serializabl
      * but one can still access its contents provided it is
      * {@link Field.Store stored}. */
     NO {
+      @Override
       public boolean isIndexed()  { return false; }
+      @Override
       public boolean isAnalyzed() { return false; }
+      @Override
       public boolean omitNorms()  { return true;  }   
     },
 
@@ -71,8 +75,11 @@ public final class Field extends AbstractField implements Fieldable, Serializabl
      * value through an Analyzer.  This is useful for
      * common text. */
     ANALYZED {
+      @Override
       public boolean isIndexed()  { return true;  }
+      @Override
       public boolean isAnalyzed() { return true;  }
+      @Override
       public boolean omitNorms()  { return false; }   	
     },
 
@@ -81,8 +88,11 @@ public final class Field extends AbstractField implements Fieldable, Serializabl
      * useful for unique Ids like product numbers.
      */
     NOT_ANALYZED {
+      @Override
       public boolean isIndexed()  { return true;  }
+      @Override
       public boolean isAnalyzed() { return false; }
+      @Override
       public boolean omitNorms()  { return false; }   	
     },
 
@@ -101,8 +111,11 @@ public final class Field extends AbstractField implements Fieldable, Serializabl
      * that field must be indexed with NOT_ANALYZED_NO_NORMS
      * from the beginning. */
     NOT_ANALYZED_NO_NORMS {
+      @Override
       public boolean isIndexed()  { return true;  }
+      @Override
       public boolean isAnalyzed() { return false; }
+      @Override
       public boolean omitNorms()  { return true;  }   	
     },
 
@@ -112,8 +125,11 @@ public final class Field extends AbstractField implements Fieldable, Serializabl
      *  {@link #NOT_ANALYZED_NO_NORMS} for what norms are
      *  and why you may want to disable them. */
     ANALYZED_NO_NORMS {
+      @Override
       public boolean isIndexed()  { return true;  }
+      @Override
       public boolean isAnalyzed() { return true;  }
+      @Override
       public boolean omitNorms()  { return true;  }   	
     };
 
@@ -156,17 +172,23 @@ public final class Field extends AbstractField implements Fieldable, Serializabl
     /** Do not store term vectors. 
      */
     NO {
-    	public boolean isStored()      { return false; }
-    	public boolean withPositions() { return false; }
-    	public boolean withOffsets()   { return false; }
+      @Override
+      public boolean isStored()      { return false; }
+      @Override
+      public boolean withPositions() { return false; }
+      @Override
+      public boolean withOffsets()   { return false; }
     },
     
     /** Store the term vectors of each document. A term vector is a list
      * of the document's terms and their number of occurrences in that document. */
     YES {
-    	public boolean isStored()      { return true;  }
-    	public boolean withPositions() { return false; }
-    	public boolean withOffsets()   { return false; }
+      @Override
+      public boolean isStored()      { return true;  }
+      @Override
+      public boolean withPositions() { return false; }
+      @Override
+      public boolean withOffsets()   { return false; }
     },
     
     /**
@@ -175,9 +197,12 @@ public final class Field extends AbstractField implements Fieldable, Serializabl
      * @see #YES
      */ 
     WITH_POSITIONS {
-    	public boolean isStored()      { return true;  }
-    	public boolean withPositions() { return true;  }
-    	public boolean withOffsets()   { return false; }
+      @Override
+      public boolean isStored()      { return true;  }
+      @Override
+      public boolean withPositions() { return true;  }
+      @Override
+      public boolean withOffsets()   { return false; }
     },
     
     /**
@@ -186,9 +211,12 @@ public final class Field extends AbstractField implements Fieldable, Serializabl
      * @see #YES
      */ 
     WITH_OFFSETS {
-    	public boolean isStored()      { return true;  }
-    	public boolean withPositions() { return false; }
-    	public boolean withOffsets()   { return true;  }
+      @Override
+      public boolean isStored()      { return true;  }
+      @Override
+      public boolean withPositions() { return false; }
+      @Override
+      public boolean withOffsets()   { return true;  }
     },
     
     /**
@@ -199,9 +227,12 @@ public final class Field extends AbstractField implements Fieldable, Serializabl
      * @see #WITH_OFFSETS
      */ 
     WITH_POSITIONS_OFFSETS {
-    	public boolean isStored()      { return true;  }
-    	public boolean withPositions() { return true;  }
-    	public boolean withOffsets()   { return true;  }
+      @Override
+      public boolean isStored()      { return true;  }
+      @Override
+      public boolean withPositions() { return true;  }
+      @Override
+      public boolean withOffsets()   { return true;  }
     };
 
     /** Get the best representation of a TermVector given the flags. */
@@ -209,7 +240,7 @@ public final class Field extends AbstractField implements Fieldable, Serializabl
 
       // If it is not stored, nothing else matters.
       if (!stored) {
-    	return TermVector.NO;
+        return TermVector.NO;
       }
 
       if (withOffsets) {
@@ -337,7 +368,7 @@ public final class Field extends AbstractField implements Fieldable, Serializabl
    * </ul> 
    */ 
   public Field(String name, String value, Store store, Index index, TermVector termVector) {
-	  this(name, true, value, store, index, termVector);
+    this(name, true, value, store, index, termVector);
   }
   
   /**
diff --git a/src/java/org/apache/lucene/index/ByteSliceReader.java b/src/java/org/apache/lucene/index/ByteSliceReader.java
index e1ac6ff..5b8e388 100644
--- a/src/java/org/apache/lucene/index/ByteSliceReader.java
+++ b/src/java/org/apache/lucene/index/ByteSliceReader.java
@@ -66,6 +66,7 @@ final class ByteSliceReader extends IndexInput {
     return upto + bufferOffset == endIndex;
   }
 
+  @Override
   public byte readByte() {
     assert !eof();
     assert upto <= limit;
@@ -117,6 +118,7 @@ final class ByteSliceReader extends IndexInput {
     }
   }
 
+  @Override
   public void readBytes(byte[] b, int offset, int len) {
     while(len > 0) {
       final int numLeft = limit-upto;
@@ -135,9 +137,13 @@ final class ByteSliceReader extends IndexInput {
     }
   }
 
+  @Override
   public long getFilePointer() {throw new RuntimeException("not implemented");}
+  @Override
   public long length() {throw new RuntimeException("not implemented");}
+  @Override
   public void seek(long pos) {throw new RuntimeException("not implemented");}
+  @Override
   public void close() {throw new RuntimeException("not implemented");}
 }
 
diff --git a/src/java/org/apache/lucene/index/CheckIndex.java b/src/java/org/apache/lucene/index/CheckIndex.java
index 2afddea..5885d82c 100644
--- a/src/java/org/apache/lucene/index/CheckIndex.java
+++ b/src/java/org/apache/lucene/index/CheckIndex.java
@@ -274,11 +274,13 @@ public class CheckIndex {
       super(p);
     }
 
+    @Override
     public void seek(Term term) throws IOException {
       super.seek(term);
       delCount = 0;
     }
 
+    @Override
     protected void skippingDoc() throws IOException {
       delCount++;
     }
diff --git a/src/java/org/apache/lucene/index/CompoundFileReader.java b/src/java/org/apache/lucene/index/CompoundFileReader.java
index 7080d63..56281bc 100644
--- a/src/java/org/apache/lucene/index/CompoundFileReader.java
+++ b/src/java/org/apache/lucene/index/CompoundFileReader.java
@@ -107,6 +107,7 @@ class CompoundFileReader extends Directory {
         return fileName;
     }
 
+    @Override
     public synchronized void close() throws IOException {
         if (stream == null)
             throw new IOException("Already closed");
@@ -116,6 +117,7 @@ class CompoundFileReader extends Directory {
         stream = null;
     }
 
+    @Override
     public synchronized IndexInput openInput(String id)
     throws IOException
     {
@@ -123,6 +125,7 @@ class CompoundFileReader extends Directory {
       return openInput(id, readBufferSize);
     }
 
+    @Override
     public synchronized IndexInput openInput(String id, int readBufferSize)
     throws IOException
     {
@@ -137,28 +140,33 @@ class CompoundFileReader extends Directory {
     }
 
     /** Returns an array of strings, one for each file in the directory. */
+    @Override
     public String[] listAll() {
         String res[] = new String[entries.size()];
         return entries.keySet().toArray(res);
     }
 
     /** Returns true iff a file with the given name exists. */
+    @Override
     public boolean fileExists(String name) {
         return entries.containsKey(name);
     }
 
     /** Returns the time the compound file was last modified. */
+    @Override
     public long fileModified(String name) throws IOException {
         return directory.fileModified(fileName);
     }
 
     /** Set the modified time of the compound file to now. */
+    @Override
     public void touchFile(String name) throws IOException {
         directory.touchFile(fileName);
     }
 
     /** Not implemented
      * @throws UnsupportedOperationException */
+    @Override
     public void deleteFile(String name)
     {
         throw new UnsupportedOperationException();
@@ -173,6 +181,7 @@ class CompoundFileReader extends Directory {
 
     /** Returns the length of a file in the directory.
      * @throws IOException if the file does not exist */
+    @Override
     public long fileLength(String name)
     throws IOException
     {
@@ -184,6 +193,7 @@ class CompoundFileReader extends Directory {
 
     /** Not implemented
      * @throws UnsupportedOperationException */
+    @Override
     public IndexOutput createOutput(String name)
     {
         throw new UnsupportedOperationException();
@@ -191,6 +201,7 @@ class CompoundFileReader extends Directory {
 
     /** Not implemented
      * @throws UnsupportedOperationException */
+    @Override
     public Lock makeLock(String name)
     {
         throw new UnsupportedOperationException();
@@ -220,6 +231,7 @@ class CompoundFileReader extends Directory {
             this.length = length;
         }
         
+        @Override
         public Object clone() {
           CSIndexInput clone = (CSIndexInput)super.clone();
           clone.base = (IndexInput)base.clone();
@@ -234,6 +246,7 @@ class CompoundFileReader extends Directory {
          * @param offset the offset in the array to start storing bytes
          * @param len the number of bytes to read
          */
+        @Override
         protected void readInternal(byte[] b, int offset, int len)
         throws IOException
         {
@@ -248,13 +261,16 @@ class CompoundFileReader extends Directory {
          *  the next {@link #readInternal(byte[],int,int)} will occur.
          * @see #readInternal(byte[],int,int)
          */
+        @Override
         protected void seekInternal(long pos) {}
 
         /** Closes the stream to further operations. */
+        @Override
         public void close() throws IOException {
           base.close();
         }
 
+        @Override
         public long length() {
           return length;
         }
diff --git a/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java b/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
index 513db60..36805a8 100644
--- a/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
+++ b/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
@@ -112,6 +112,7 @@ public class ConcurrentMergeScheduler extends MergeScheduler {
     }
   }
 
+  @Override
   public void close() {
     closed = true;
   }
@@ -146,6 +147,7 @@ public class ConcurrentMergeScheduler extends MergeScheduler {
     return count;
   }
 
+  @Override
   public void merge(IndexWriter writer)
     throws CorruptIndexException, IOException {
 
@@ -274,6 +276,7 @@ public class ConcurrentMergeScheduler extends MergeScheduler {
       }
     }
 
+    @Override
     public void run() {
       
       // First time through the while loop we do the merge
@@ -323,6 +326,7 @@ public class ConcurrentMergeScheduler extends MergeScheduler {
       }
     }
 
+    @Override
     public String toString() {
       MergePolicy.OneMerge merge = getRunningMerge();
       if (merge == null)
diff --git a/src/java/org/apache/lucene/index/DefaultSkipListReader.java b/src/java/org/apache/lucene/index/DefaultSkipListReader.java
index e679ecf..3c6e856 100644
--- a/src/java/org/apache/lucene/index/DefaultSkipListReader.java
+++ b/src/java/org/apache/lucene/index/DefaultSkipListReader.java
@@ -75,6 +75,7 @@ class DefaultSkipListReader extends MultiLevelSkipListReader {
     return lastPayloadLength;
   }
   
+  @Override
   protected void seekChild(int level) throws IOException {
     super.seekChild(level);
     freqPointer[level] = lastFreqPointer;
@@ -82,6 +83,7 @@ class DefaultSkipListReader extends MultiLevelSkipListReader {
     payloadLength[level] = lastPayloadLength;
   }
   
+  @Override
   protected void setLastSkipData(int level) {
     super.setLastSkipData(level);
     lastFreqPointer = freqPointer[level];
@@ -90,6 +92,7 @@ class DefaultSkipListReader extends MultiLevelSkipListReader {
   }
 
 
+  @Override
   protected int readSkipData(int level, IndexInput skipStream) throws IOException {
     int delta;
     if (currentFieldStoresPayloads) {
diff --git a/src/java/org/apache/lucene/index/DefaultSkipListWriter.java b/src/java/org/apache/lucene/index/DefaultSkipListWriter.java
index 0ee17f3..1ca2833 100644
--- a/src/java/org/apache/lucene/index/DefaultSkipListWriter.java
+++ b/src/java/org/apache/lucene/index/DefaultSkipListWriter.java
@@ -74,6 +74,7 @@ class DefaultSkipListWriter extends MultiLevelSkipListWriter {
       this.curProxPointer = proxOutput.getFilePointer();
   }
   
+  @Override
   protected void resetSkip() {
     super.resetSkip();
     Arrays.fill(lastSkipDoc, 0);
@@ -83,6 +84,7 @@ class DefaultSkipListWriter extends MultiLevelSkipListWriter {
       Arrays.fill(lastSkipProxPointer, proxOutput.getFilePointer());
   }
   
+  @Override
   protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {
     // To efficiently store payloads in the posting lists we do not store the length of
     // every payload. Instead we omit the length for a payload if the previous payload had
diff --git a/src/java/org/apache/lucene/index/DirectoryReader.java b/src/java/org/apache/lucene/index/DirectoryReader.java
index aba8b08..ae429e3 100644
--- a/src/java/org/apache/lucene/index/DirectoryReader.java
+++ b/src/java/org/apache/lucene/index/DirectoryReader.java
@@ -67,6 +67,7 @@ class DirectoryReader extends IndexReader implements Cloneable {
   static IndexReader open(final Directory directory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly,
                           final int termInfosIndexDivisor) throws CorruptIndexException, IOException {
     return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {
+      @Override
       protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {
         SegmentInfos infos = new SegmentInfos();
         infos.read(directory, segmentFileName);
@@ -311,6 +312,7 @@ class DirectoryReader extends IndexReader implements Cloneable {
     starts[subReaders.length] = maxDoc;
   }
 
+  @Override
   public final synchronized Object clone() {
     try {
       return clone(readOnly); // Preserve current readOnly
@@ -319,6 +321,7 @@ class DirectoryReader extends IndexReader implements Cloneable {
     }
   }
 
+  @Override
   public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {
     DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);
 
@@ -341,15 +344,18 @@ class DirectoryReader extends IndexReader implements Cloneable {
     return newReader;
   }
 
+  @Override
   public final synchronized IndexReader reopen() throws CorruptIndexException, IOException {
     // Preserve current readOnly
     return doReopen(readOnly, null);
   }
 
+  @Override
   public final synchronized IndexReader reopen(boolean openReadOnly) throws CorruptIndexException, IOException {
     return doReopen(openReadOnly, null);
   }
 
+  @Override
   public final synchronized IndexReader reopen(final IndexCommit commit) throws CorruptIndexException, IOException {
     return doReopen(true, commit);
   }
@@ -420,6 +426,7 @@ class DirectoryReader extends IndexReader implements Cloneable {
     }
 
     return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {
+      @Override
       protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {
         SegmentInfos infos = new SegmentInfos();
         infos.read(directory, segmentFileName);
@@ -439,17 +446,20 @@ class DirectoryReader extends IndexReader implements Cloneable {
   }
 
   /** Version number when this IndexReader was opened. */
+  @Override
   public long getVersion() {
     ensureOpen();
     return segmentInfos.getVersion();
   }
 
+  @Override
   public TermFreqVector[] getTermFreqVectors(int n) throws IOException {
     ensureOpen();
     int i = readerIndex(n);        // find segment num
     return subReaders[i].getTermFreqVectors(n - starts[i]); // dispatch to segment
   }
 
+  @Override
   public TermFreqVector getTermFreqVector(int n, String field)
       throws IOException {
     ensureOpen();
@@ -458,12 +468,14 @@ class DirectoryReader extends IndexReader implements Cloneable {
   }
 
 
+  @Override
   public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException {
     ensureOpen();
     int i = readerIndex(docNumber);        // find segment num
     subReaders[i].getTermFreqVector(docNumber - starts[i], field, mapper);
   }
 
+  @Override
   public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException {
     ensureOpen();
     int i = readerIndex(docNumber);        // find segment num
@@ -474,11 +486,13 @@ class DirectoryReader extends IndexReader implements Cloneable {
    * Checks is the index is optimized (if it has a single segment and no deletions)
    * @return <code>true</code> if the index is optimized; <code>false</code> otherwise
    */
+  @Override
   public boolean isOptimized() {
     ensureOpen();
     return segmentInfos.size() == 1 && !hasDeletions();
   }
   
+  @Override
   public synchronized int numDocs() {
     // Don't call ensureOpen() here (it could affect performance)
     if (numDocs == -1) {        // check cache
@@ -490,29 +504,34 @@ class DirectoryReader extends IndexReader implements Cloneable {
     return numDocs;
   }
 
+  @Override
   public int maxDoc() {
     // Don't call ensureOpen() here (it could affect performance)
     return maxDoc;
   }
 
   // inherit javadoc
+  @Override
   public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {
     ensureOpen();
     int i = readerIndex(n);                          // find segment num
     return subReaders[i].document(n - starts[i], fieldSelector);    // dispatch to segment reader
   }
 
+  @Override
   public boolean isDeleted(int n) {
     // Don't call ensureOpen() here (it could affect performance)
     final int i = readerIndex(n);                           // find segment num
     return subReaders[i].isDeleted(n - starts[i]);    // dispatch to segment reader
   }
 
+  @Override
   public boolean hasDeletions() {
     // Don't call ensureOpen() here (it could affect performance)
     return hasDeletions;
   }
 
+  @Override
   protected void doDelete(int n) throws CorruptIndexException, IOException {
     numDocs = -1;                             // invalidate cache
     int i = readerIndex(n);                   // find segment num
@@ -520,6 +539,7 @@ class DirectoryReader extends IndexReader implements Cloneable {
     hasDeletions = true;
   }
 
+  @Override
   protected void doUndeleteAll() throws CorruptIndexException, IOException {
     for (int i = 0; i < subReaders.length; i++)
       subReaders[i].undeleteAll();
@@ -553,6 +573,7 @@ class DirectoryReader extends IndexReader implements Cloneable {
     return hi;
   }
 
+  @Override
   public boolean hasNorms(String field) throws IOException {
     ensureOpen();
     for (int i = 0; i < subReaders.length; i++) {
@@ -561,6 +582,7 @@ class DirectoryReader extends IndexReader implements Cloneable {
     return false;
   }
 
+  @Override
   public synchronized byte[] norms(String field) throws IOException {
     ensureOpen();
     byte[] bytes = normsCache.get(field);
@@ -576,6 +598,7 @@ class DirectoryReader extends IndexReader implements Cloneable {
     return bytes;
   }
 
+  @Override
   public synchronized void norms(String field, byte[] result, int offset)
     throws IOException {
     ensureOpen();
@@ -591,6 +614,7 @@ class DirectoryReader extends IndexReader implements Cloneable {
     }
   }
 
+  @Override
   protected void doSetNorm(int n, String field, byte value)
     throws CorruptIndexException, IOException {
     synchronized (normsCache) {
@@ -600,16 +624,19 @@ class DirectoryReader extends IndexReader implements Cloneable {
     subReaders[i].setNorm(n-starts[i], field, value); // dispatch
   }
 
+  @Override
   public TermEnum terms() throws IOException {
     ensureOpen();
     return new MultiTermEnum(this, subReaders, starts, null);
   }
 
+  @Override
   public TermEnum terms(Term term) throws IOException {
     ensureOpen();
     return new MultiTermEnum(this, subReaders, starts, term);
   }
 
+  @Override
   public int docFreq(Term t) throws IOException {
     ensureOpen();
     int total = 0;          // sum freqs in segments
@@ -618,11 +645,13 @@ class DirectoryReader extends IndexReader implements Cloneable {
     return total;
   }
 
+  @Override
   public TermDocs termDocs() throws IOException {
     ensureOpen();
     return new MultiTermDocs(this, subReaders, starts);
   }
 
+  @Override
   public TermPositions termPositions() throws IOException {
     ensureOpen();
     return new MultiTermPositions(this, subReaders, starts);
@@ -639,6 +668,7 @@ class DirectoryReader extends IndexReader implements Cloneable {
    *                               obtained)
    * @throws IOException           if there is a low-level IO error
    */
+  @Override
   protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {
 
     if (readOnly) {
@@ -679,6 +709,7 @@ class DirectoryReader extends IndexReader implements Cloneable {
    *
    * @throws IOException if there is a low-level IO error
    */
+  @Override
   protected void doCommit(Map<String,String> commitUserData) throws IOException {
     if (hasChanges) {
       segmentInfos.setUserData(commitUserData);
@@ -763,11 +794,13 @@ class DirectoryReader extends IndexReader implements Cloneable {
     }
   }
 
+  @Override
   public Map<String,String> getCommitUserData() {
     ensureOpen();
     return segmentInfos.getUserData();
   }
 
+  @Override
   public boolean isCurrent() throws CorruptIndexException, IOException {
     ensureOpen();
     if (writer == null || writer.isClosed()) {
@@ -778,6 +811,7 @@ class DirectoryReader extends IndexReader implements Cloneable {
     }
   }
 
+  @Override
   protected synchronized void doClose() throws IOException {
     IOException ioe = null;
     normsCache = null;
@@ -793,6 +827,7 @@ class DirectoryReader extends IndexReader implements Cloneable {
     if (ioe != null) throw ioe;
   }
 
+  @Override
   public Collection<String> getFieldNames (IndexReader.FieldOption fieldNames) {
     ensureOpen();
     return getFieldNames(fieldNames, this.subReaders);
@@ -808,11 +843,13 @@ class DirectoryReader extends IndexReader implements Cloneable {
     return fieldSet;
   } 
   
+  @Override
   public IndexReader[] getSequentialSubReaders() {
     return subReaders;
   }
 
   /** Returns the directory this index resides in. */
+  @Override
   public Directory directory() {
     // Don't ensureOpen here -- in certain cases, when a
     // cloned/reopened reader needs to commit, it may call
@@ -829,6 +866,7 @@ class DirectoryReader extends IndexReader implements Cloneable {
    * <p/>
    * <p><b>WARNING</b>: this API is new and experimental and may suddenly change.</p>
    */
+  @Override
   public IndexCommit getIndexCommit() throws IOException {
     return new ReaderCommit(segmentInfos, directory);
   }
@@ -896,34 +934,42 @@ class DirectoryReader extends IndexReader implements Cloneable {
       isOptimized = infos.size() == 1 && !infos.info(0).hasDeletions();
     }
 
+    @Override
     public boolean isOptimized() {
       return isOptimized;
     }
 
+    @Override
     public String getSegmentsFileName() {
       return segmentsFileName;
     }
 
+    @Override
     public Collection<String> getFileNames() {
       return files;
     }
 
+    @Override
     public Directory getDirectory() {
       return dir;
     }
 
+    @Override
     public long getVersion() {
       return version;
     }
 
+    @Override
     public long getGeneration() {
       return generation;
     }
 
+    @Override
     public boolean isDeleted() {
       return false;
     }
 
+    @Override
     public Map<String,String> getUserData() {
       return userData;
     }
@@ -964,6 +1010,7 @@ class DirectoryReader extends IndexReader implements Cloneable {
       }
     }
   
+    @Override
     public boolean next() throws IOException {
       for (int i=0; i<matchingSegments.length; i++) {
         SegmentMergeInfo smi = matchingSegments[i];
@@ -998,14 +1045,17 @@ class DirectoryReader extends IndexReader implements Cloneable {
       return true;
     }
   
+    @Override
     public Term term() {
       return term;
     }
   
+    @Override
     public int docFreq() {
       return docFreq;
     }
   
+    @Override
     public void close() throws IOException {
       queue.close();
     }
@@ -1167,6 +1217,7 @@ class DirectoryReader extends IndexReader implements Cloneable {
       super(topReader,r,s);
     }
   
+    @Override
     protected TermDocs termDocs(IndexReader reader) throws IOException {
       return reader.termPositions();
     }
diff --git a/src/java/org/apache/lucene/index/DocFieldConsumers.java b/src/java/org/apache/lucene/index/DocFieldConsumers.java
index 2a54a2e..0016184 100644
--- a/src/java/org/apache/lucene/index/DocFieldConsumers.java
+++ b/src/java/org/apache/lucene/index/DocFieldConsumers.java
@@ -40,12 +40,14 @@ final class DocFieldConsumers extends DocFieldConsumer {
     this.two = two;
   }
 
+  @Override
   void setFieldInfos(FieldInfos fieldInfos) {
     super.setFieldInfos(fieldInfos);
     one.setFieldInfos(fieldInfos);
     two.setFieldInfos(fieldInfos);
   }
 
+  @Override
   public void flush(Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {
 
     Map oneThreadsAndFields = new HashMap();
@@ -78,6 +80,7 @@ final class DocFieldConsumers extends DocFieldConsumer {
     two.flush(twoThreadsAndFields, state);
   }
 
+  @Override
   public void closeDocStore(SegmentWriteState state) throws IOException {      
     try {
       one.closeDocStore(state);
@@ -86,6 +89,7 @@ final class DocFieldConsumers extends DocFieldConsumer {
     }
   }
 
+  @Override
   public void abort() {
     try {
       one.abort();
@@ -94,12 +98,14 @@ final class DocFieldConsumers extends DocFieldConsumer {
     }
   }
 
+  @Override
   public boolean freeRAM() {
     boolean any = one.freeRAM();
     any |= two.freeRAM();
     return any;
   }
 
+  @Override
   public DocFieldConsumerPerThread addThread(DocFieldProcessorPerThread docFieldProcessorPerThread) throws IOException {
     return new DocFieldConsumersPerThread(docFieldProcessorPerThread, this, one.addThread(docFieldProcessorPerThread), two.addThread(docFieldProcessorPerThread));
   }
@@ -133,10 +139,12 @@ final class DocFieldConsumers extends DocFieldConsumer {
     DocumentsWriter.DocWriter one;
     DocumentsWriter.DocWriter two;
 
+    @Override
     public long sizeInBytes() {
       return one.sizeInBytes() + two.sizeInBytes();
     }
 
+    @Override
     public void finish() throws IOException {
       try {
         try {
@@ -149,6 +157,7 @@ final class DocFieldConsumers extends DocFieldConsumer {
       }
     }
 
+    @Override
     public void abort() {
       try {
         try {
diff --git a/src/java/org/apache/lucene/index/DocFieldConsumersPerField.java b/src/java/org/apache/lucene/index/DocFieldConsumersPerField.java
index fc9a9d8..e75891f 100644
--- a/src/java/org/apache/lucene/index/DocFieldConsumersPerField.java
+++ b/src/java/org/apache/lucene/index/DocFieldConsumersPerField.java
@@ -32,11 +32,13 @@ final class DocFieldConsumersPerField extends DocFieldConsumerPerField {
     this.two = two;
   }
 
+  @Override
   public void processFields(Fieldable[] fields, int count) throws IOException {
     one.processFields(fields, count);
     two.processFields(fields, count);
   }
 
+  @Override
   public void abort() {
     try {
       one.abort();
diff --git a/src/java/org/apache/lucene/index/DocFieldConsumersPerThread.java b/src/java/org/apache/lucene/index/DocFieldConsumersPerThread.java
index e562bf8..34268f3 100644
--- a/src/java/org/apache/lucene/index/DocFieldConsumersPerThread.java
+++ b/src/java/org/apache/lucene/index/DocFieldConsumersPerThread.java
@@ -34,11 +34,13 @@ final class DocFieldConsumersPerThread extends DocFieldConsumerPerThread {
     docState = docFieldProcessorPerThread.docState;
   }
 
+  @Override
   public void startDocument() throws IOException {
     one.startDocument();
     two.startDocument();
   }
 
+  @Override
   public void abort() {
     try {
       one.abort();
@@ -47,6 +49,7 @@ final class DocFieldConsumersPerThread extends DocFieldConsumerPerThread {
     }
   }
 
+  @Override
   public DocumentsWriter.DocWriter finishDocument() throws IOException {
     final DocumentsWriter.DocWriter oneDoc = one.finishDocument();
     final DocumentsWriter.DocWriter twoDoc = two.finishDocument();
@@ -65,6 +68,7 @@ final class DocFieldConsumersPerThread extends DocFieldConsumerPerThread {
     }
   }
 
+  @Override
   public DocFieldConsumerPerField addField(FieldInfo fi) {
     return new DocFieldConsumersPerField(this, one.addField(fi), two.addField(fi));
   }
diff --git a/src/java/org/apache/lucene/index/DocFieldProcessor.java b/src/java/org/apache/lucene/index/DocFieldProcessor.java
index 970f055..c1de486 100644
--- a/src/java/org/apache/lucene/index/DocFieldProcessor.java
+++ b/src/java/org/apache/lucene/index/DocFieldProcessor.java
@@ -45,11 +45,13 @@ final class DocFieldProcessor extends DocConsumer {
     fieldsWriter = new StoredFieldsWriter(docWriter, fieldInfos);
   }
 
+  @Override
   public void closeDocStore(SegmentWriteState state) throws IOException {
     consumer.closeDocStore(state);
     fieldsWriter.closeDocStore(state);
   }
 
+  @Override
   public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {
 
     Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();
@@ -70,15 +72,18 @@ final class DocFieldProcessor extends DocConsumer {
     state.flushedFiles.add(fileName);
   }
 
+  @Override
   public void abort() {
     fieldsWriter.abort();
     consumer.abort();
   }
 
+  @Override
   public boolean freeRAM() {
     return consumer.freeRAM();
   }
 
+  @Override
   public DocConsumerPerThread addThread(DocumentsWriterThreadState threadState) throws IOException {
     return new DocFieldProcessorPerThread(threadState, this);
   }
diff --git a/src/java/org/apache/lucene/index/DocFieldProcessorPerThread.java b/src/java/org/apache/lucene/index/DocFieldProcessorPerThread.java
index df60d20..54cc6f4 100644
--- a/src/java/org/apache/lucene/index/DocFieldProcessorPerThread.java
+++ b/src/java/org/apache/lucene/index/DocFieldProcessorPerThread.java
@@ -63,6 +63,7 @@ final class DocFieldProcessorPerThread extends DocConsumerPerThread {
     fieldsWriter = docFieldProcessor.fieldsWriter.addThread(docState);
   }
 
+  @Override
   public void abort() {
     for(int i=0;i<fieldHash.length;i++) {
       DocFieldProcessorPerField field = fieldHash[i];
@@ -150,6 +151,7 @@ final class DocFieldProcessorPerThread extends DocConsumerPerThread {
     hashMask = newHashMask;
   }
 
+  @Override
   public DocumentsWriter.DocWriter processDocument() throws IOException {
 
     consumer.startDocument();
@@ -353,10 +355,12 @@ final class DocFieldProcessorPerThread extends DocConsumerPerThread {
     DocumentsWriter.DocWriter one;
     DocumentsWriter.DocWriter two;
 
+    @Override
     public long sizeInBytes() {
       return one.sizeInBytes() + two.sizeInBytes();
     }
 
+    @Override
     public void finish() throws IOException {
       try {
         try {
@@ -369,6 +373,7 @@ final class DocFieldProcessorPerThread extends DocConsumerPerThread {
       }
     }
 
+    @Override
     public void abort() {
       try {
         try {
diff --git a/src/java/org/apache/lucene/index/DocInverter.java b/src/java/org/apache/lucene/index/DocInverter.java
index ccfe457..35968ba 100644
--- a/src/java/org/apache/lucene/index/DocInverter.java
+++ b/src/java/org/apache/lucene/index/DocInverter.java
@@ -39,12 +39,14 @@ final class DocInverter extends DocFieldConsumer {
     this.endConsumer = endConsumer;
   }
 
+  @Override
   void setFieldInfos(FieldInfos fieldInfos) {
     super.setFieldInfos(fieldInfos);
     consumer.setFieldInfos(fieldInfos);
     endConsumer.setFieldInfos(fieldInfos);
   }
 
+  @Override
   void flush(Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {
 
     Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> childThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();
@@ -71,20 +73,24 @@ final class DocInverter extends DocFieldConsumer {
     endConsumer.flush(endChildThreadsAndFields, state);
   }
 
+  @Override
   public void closeDocStore(SegmentWriteState state) throws IOException {
     consumer.closeDocStore(state);
     endConsumer.closeDocStore(state);
   }
 
+  @Override
   void abort() {
     consumer.abort();
     endConsumer.abort();
   }
 
+  @Override
   public boolean freeRAM() {
     return consumer.freeRAM();
   }
 
+  @Override
   public DocFieldConsumerPerThread addThread(DocFieldProcessorPerThread docFieldProcessorPerThread) {
     return new DocInverterPerThread(docFieldProcessorPerThread, this);
   }
diff --git a/src/java/org/apache/lucene/index/DocInverterPerField.java b/src/java/org/apache/lucene/index/DocInverterPerField.java
index 543767f..6cb946e 100644
--- a/src/java/org/apache/lucene/index/DocInverterPerField.java
+++ b/src/java/org/apache/lucene/index/DocInverterPerField.java
@@ -51,11 +51,13 @@ final class DocInverterPerField extends DocFieldConsumerPerField {
     this.endConsumer = perThread.endConsumer.addField(this, fieldInfo);
   }
 
+  @Override
   void abort() {
     consumer.abort();
     endConsumer.abort();
   }
 
+  @Override
   public void processFields(final Fieldable[] fields,
                             final int count) throws IOException {
 
diff --git a/src/java/org/apache/lucene/index/DocInverterPerThread.java b/src/java/org/apache/lucene/index/DocInverterPerThread.java
index e0c94ff..e2726e0 100644
--- a/src/java/org/apache/lucene/index/DocInverterPerThread.java
+++ b/src/java/org/apache/lucene/index/DocInverterPerThread.java
@@ -49,6 +49,7 @@ final class DocInverterPerThread extends DocFieldConsumerPerThread {
     }
     
     // this is a dummy, to not throw an UOE because this class does not implement any iteration method
+    @Override
     public boolean incrementToken() {
       throw new UnsupportedOperationException();
     }
@@ -68,11 +69,13 @@ final class DocInverterPerThread extends DocFieldConsumerPerThread {
     endConsumer = docInverter.endConsumer.addThread(this);
   }
 
+  @Override
   public void startDocument() throws IOException {
     consumer.startDocument();
     endConsumer.startDocument();
   }
 
+  @Override
   public DocumentsWriter.DocWriter finishDocument() throws IOException {
     // TODO: allow endConsumer.finishDocument to also return
     // a DocWriter
@@ -80,6 +83,7 @@ final class DocInverterPerThread extends DocFieldConsumerPerThread {
     return consumer.finishDocument();
   }
 
+  @Override
   void abort() {
     try {
       consumer.abort();
@@ -88,6 +92,7 @@ final class DocInverterPerThread extends DocFieldConsumerPerThread {
     }
   }
 
+  @Override
   public DocFieldConsumerPerField addField(FieldInfo fi) {
     return new DocInverterPerField(this, fi);
   }
diff --git a/src/java/org/apache/lucene/index/DocumentsWriter.java b/src/java/org/apache/lucene/index/DocumentsWriter.java
index 8a470fa..05e9cd1 100644
--- a/src/java/org/apache/lucene/index/DocumentsWriter.java
+++ b/src/java/org/apache/lucene/index/DocumentsWriter.java
@@ -181,6 +181,7 @@ final class DocumentsWriter {
   
   static final IndexingChain DefaultIndexingChain = new IndexingChain() {
 
+    @Override
     DocConsumer getChain(DocumentsWriter documentsWriter) {
       /*
       This is the current indexing chain:
@@ -1115,10 +1116,13 @@ final class DocumentsWriter {
   }
 
   private static class SkipDocWriter extends DocWriter {
+    @Override
     void finish() {
     }
+    @Override
     void abort() {
     }
+    @Override
     long sizeInBytes() {
       return 0;
     }
@@ -1194,6 +1198,7 @@ final class DocumentsWriter {
     ArrayList<byte[]> freeByteBlocks = new ArrayList<byte[]>();
     
     /* Allocate another byte[] from the shared pool */
+    @Override
     byte[] getByteBlock(boolean trackAllocations) {
       synchronized(DocumentsWriter.this) {
         final int size = freeByteBlocks.size();
@@ -1217,6 +1222,7 @@ final class DocumentsWriter {
     }
 
     /* Return byte[]'s to the pool */
+    @Override
     void recycleByteBlocks(byte[][] blocks, int start, int end) {
       synchronized(DocumentsWriter.this) {
         for(int i=start;i<end;i++)
diff --git a/src/java/org/apache/lucene/index/FieldInfo.java b/src/java/org/apache/lucene/index/FieldInfo.java
index 8785114..90fb11a 100644
--- a/src/java/org/apache/lucene/index/FieldInfo.java
+++ b/src/java/org/apache/lucene/index/FieldInfo.java
@@ -55,6 +55,7 @@ final class FieldInfo {
     }
   }
 
+  @Override
   public Object clone() {
     return new FieldInfo(name, isIndexed, number, storeTermVector, storePositionWithTermVector,
                          storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);
diff --git a/src/java/org/apache/lucene/index/FieldInfos.java b/src/java/org/apache/lucene/index/FieldInfos.java
index 443dfa7..3d937a1 100644
--- a/src/java/org/apache/lucene/index/FieldInfos.java
+++ b/src/java/org/apache/lucene/index/FieldInfos.java
@@ -98,6 +98,7 @@ final class FieldInfos {
   /**
    * Returns a deep clone of this FieldInfos instance.
    */
+  @Override
   synchronized public Object clone() {
     FieldInfos fis = new FieldInfos();
     final int numField = byNumber.size();
diff --git a/src/java/org/apache/lucene/index/FieldSortedTermVectorMapper.java b/src/java/org/apache/lucene/index/FieldSortedTermVectorMapper.java
index 3d94c09..e329061 100644
--- a/src/java/org/apache/lucene/index/FieldSortedTermVectorMapper.java
+++ b/src/java/org/apache/lucene/index/FieldSortedTermVectorMapper.java
@@ -43,11 +43,13 @@ public class FieldSortedTermVectorMapper extends TermVectorMapper{
     this.comparator = comparator;
   }
 
+  @Override
   public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {
     TermVectorEntry entry = new TermVectorEntry(currentField, term, frequency, offsets, positions);
     currentSet.add(entry);
   }
 
+  @Override
   public void setExpectations(String field, int numTerms, boolean storeOffsets, boolean storePositions) {
     currentSet = new TreeSet<TermVectorEntry>(comparator);
     currentField = field;
diff --git a/src/java/org/apache/lucene/index/FieldsReader.java b/src/java/org/apache/lucene/index/FieldsReader.java
index a99e8c5..b24c8eb 100644
--- a/src/java/org/apache/lucene/index/FieldsReader.java
+++ b/src/java/org/apache/lucene/index/FieldsReader.java
@@ -70,6 +70,7 @@ final class FieldsReader implements Cloneable {
    *  job not to close the original FieldsReader until all
    *  clones are called (eg, currently SegmentReader manages
    *  this logic). */
+  @Override
   public Object clone() {
     ensureOpen();
     return new FieldsReader(fieldInfos, numTotalDocs, size, format, formatSize, docStoreOffset, cloneableFieldsStream, cloneableIndexStream);
@@ -516,6 +517,7 @@ final class FieldsReader implements Cloneable {
       this.toRead = toRead;
     }
 
+    @Override
     public byte[] getBinaryValue(byte[] result) {
       ensureOpen();
 
diff --git a/src/java/org/apache/lucene/index/FilterIndexReader.java b/src/java/org/apache/lucene/index/FilterIndexReader.java
index b3a8201..7cd1089 100644
--- a/src/java/org/apache/lucene/index/FilterIndexReader.java
+++ b/src/java/org/apache/lucene/index/FilterIndexReader.java
@@ -85,9 +85,13 @@ public class FilterIndexReader extends IndexReader {
 
     public FilterTermEnum(TermEnum in) { this.in = in; }
 
+    @Override
     public boolean next() throws IOException { return in.next(); }
+    @Override
     public Term term() { return in.term(); }
+    @Override
     public int docFreq() { return in.docFreq(); }
+    @Override
     public void close() throws IOException { in.close(); }
   }
 
@@ -105,16 +109,19 @@ public class FilterIndexReader extends IndexReader {
     this.in = in;
   }
 
+  @Override
   public Directory directory() {
     return in.directory();
   }
   
+  @Override
   public TermFreqVector[] getTermFreqVectors(int docNumber)
           throws IOException {
     ensureOpen();
     return in.getTermFreqVectors(docNumber);
   }
 
+  @Override
   public TermFreqVector getTermFreqVector(int docNumber, String field)
           throws IOException {
     ensureOpen();
@@ -122,120 +129,146 @@ public class FilterIndexReader extends IndexReader {
   }
 
 
+  @Override
   public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException {
     ensureOpen();
     in.getTermFreqVector(docNumber, field, mapper);
 
   }
 
+  @Override
   public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException {
     ensureOpen();
     in.getTermFreqVector(docNumber, mapper);
   }
 
+  @Override
   public int numDocs() {
     // Don't call ensureOpen() here (it could affect performance)
     return in.numDocs();
   }
 
+  @Override
   public int maxDoc() {
     // Don't call ensureOpen() here (it could affect performance)
     return in.maxDoc();
   }
 
+  @Override
   public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {
     ensureOpen();
     return in.document(n, fieldSelector);
   }
 
+  @Override
   public boolean isDeleted(int n) {
     // Don't call ensureOpen() here (it could affect performance)
     return in.isDeleted(n);
   }
 
+  @Override
   public boolean hasDeletions() {
     // Don't call ensureOpen() here (it could affect performance)
     return in.hasDeletions();
   }
 
+  @Override
   protected void doUndeleteAll() throws CorruptIndexException, IOException {in.undeleteAll();}
 
+  @Override
   public boolean hasNorms(String field) throws IOException {
     ensureOpen();
     return in.hasNorms(field);
   }
 
+  @Override
   public byte[] norms(String f) throws IOException {
     ensureOpen();
     return in.norms(f);
   }
 
+  @Override
   public void norms(String f, byte[] bytes, int offset) throws IOException {
     ensureOpen();
     in.norms(f, bytes, offset);
   }
 
+  @Override
   protected void doSetNorm(int d, String f, byte b) throws CorruptIndexException, IOException {
     in.setNorm(d, f, b);
   }
 
+  @Override
   public TermEnum terms() throws IOException {
     ensureOpen();
     return in.terms();
   }
 
+  @Override
   public TermEnum terms(Term t) throws IOException {
     ensureOpen();
     return in.terms(t);
   }
 
+  @Override
   public int docFreq(Term t) throws IOException {
     ensureOpen();
     return in.docFreq(t);
   }
 
+  @Override
   public TermDocs termDocs() throws IOException {
     ensureOpen();
     return in.termDocs();
   }
 
+  @Override
   public TermDocs termDocs(Term term) throws IOException {
     ensureOpen();
     return in.termDocs(term);
   }
 
+  @Override
   public TermPositions termPositions() throws IOException {
     ensureOpen();
     return in.termPositions();
   }
 
+  @Override
   protected void doDelete(int n) throws  CorruptIndexException, IOException { in.deleteDocument(n); }
   
+  @Override
   protected void doCommit(Map<String,String> commitUserData) throws IOException { in.commit(commitUserData); }
   
+  @Override
   protected void doClose() throws IOException { in.close(); }
 
 
+  @Override
   public Collection<String> getFieldNames(IndexReader.FieldOption fieldNames) {
     ensureOpen();
     return in.getFieldNames(fieldNames);
   }
 
+  @Override
   public long getVersion() {
     ensureOpen();
     return in.getVersion();
   }
 
+  @Override
   public boolean isCurrent() throws CorruptIndexException, IOException {
     ensureOpen();
     return in.isCurrent();
   }
   
+  @Override
   public boolean isOptimized() {
     ensureOpen();
     return in.isOptimized();
   }
   
+  @Override
   public IndexReader[] getSequentialSubReaders() {
     return in.getSequentialSubReaders();
   }
diff --git a/src/java/org/apache/lucene/index/FormatPostingsDocsWriter.java b/src/java/org/apache/lucene/index/FormatPostingsDocsWriter.java
index e95a67b..7dc13e3 100644
--- a/src/java/org/apache/lucene/index/FormatPostingsDocsWriter.java
+++ b/src/java/org/apache/lucene/index/FormatPostingsDocsWriter.java
@@ -67,6 +67,7 @@ final class FormatPostingsDocsWriter extends FormatPostingsDocsConsumer {
 
   /** Adds a new doc in this term.  If this returns null
    *  then we just skip consuming positions/payloads. */
+  @Override
   FormatPostingsPositionsConsumer addDoc(int docID, int termDocFreq) throws IOException {
 
     final int delta = docID - lastDocID;
@@ -99,6 +100,7 @@ final class FormatPostingsDocsWriter extends FormatPostingsDocsConsumer {
   final UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();
 
   /** Called when we are done adding docs to this term */
+  @Override
   void finish() throws IOException {
     long skipPointer = skipListWriter.writeSkip(out);
 
diff --git a/src/java/org/apache/lucene/index/FormatPostingsFieldsWriter.java b/src/java/org/apache/lucene/index/FormatPostingsFieldsWriter.java
index c937927..4efa2c0 100644
--- a/src/java/org/apache/lucene/index/FormatPostingsFieldsWriter.java
+++ b/src/java/org/apache/lucene/index/FormatPostingsFieldsWriter.java
@@ -60,12 +60,14 @@ final class FormatPostingsFieldsWriter extends FormatPostingsFieldsConsumer {
   }
 
   /** Add a new field */
+  @Override
   FormatPostingsTermsConsumer addField(FieldInfo field) {
     termsWriter.setField(field);
     return termsWriter;
   }
 
   /** Called when we are done adding everything. */
+  @Override
   void finish() throws IOException {
     termsOut.close();
     termsWriter.close();
diff --git a/src/java/org/apache/lucene/index/FormatPostingsPositionsWriter.java b/src/java/org/apache/lucene/index/FormatPostingsPositionsWriter.java
index 6b8db7a..6a22667 100644
--- a/src/java/org/apache/lucene/index/FormatPostingsPositionsWriter.java
+++ b/src/java/org/apache/lucene/index/FormatPostingsPositionsWriter.java
@@ -49,6 +49,7 @@ final class FormatPostingsPositionsWriter extends FormatPostingsPositionsConsume
   int lastPosition;
 
   /** Add a new position & payload */
+  @Override
   void addPosition(int position, byte[] payload, int payloadOffset, int payloadLength) throws IOException {
     assert !omitTermFreqAndPositions: "omitTermFreqAndPositions is true";
     assert out != null;
@@ -75,6 +76,7 @@ final class FormatPostingsPositionsWriter extends FormatPostingsPositionsConsume
   }
 
   /** Called when we are done adding positions & payloads */
+  @Override
   void finish() {       
     lastPosition = 0;
     lastPayloadLength = -1;
diff --git a/src/java/org/apache/lucene/index/FormatPostingsTermsWriter.java b/src/java/org/apache/lucene/index/FormatPostingsTermsWriter.java
index fe82f77..33e4d4f 100644
--- a/src/java/org/apache/lucene/index/FormatPostingsTermsWriter.java
+++ b/src/java/org/apache/lucene/index/FormatPostingsTermsWriter.java
@@ -45,6 +45,7 @@ final class FormatPostingsTermsWriter extends FormatPostingsTermsConsumer {
   long proxStart;
 
   /** Adds a new term in this field */
+  @Override
   FormatPostingsDocsConsumer addTerm(char[] text, int start) {
     currentTerm = text;
     currentTermStart = start;
@@ -62,6 +63,7 @@ final class FormatPostingsTermsWriter extends FormatPostingsTermsConsumer {
   }
 
   /** Called when we are done adding terms to this field */
+  @Override
   void finish() {
   }
 
diff --git a/src/java/org/apache/lucene/index/FreqProxTermsWriter.java b/src/java/org/apache/lucene/index/FreqProxTermsWriter.java
index 8e42f4b..aa6393f 100644
--- a/src/java/org/apache/lucene/index/FreqProxTermsWriter.java
+++ b/src/java/org/apache/lucene/index/FreqProxTermsWriter.java
@@ -31,10 +31,12 @@ import java.util.Iterator;
 @SuppressWarnings("unchecked")
 final class FreqProxTermsWriter extends TermsHashConsumer {
 
+  @Override
   public TermsHashConsumerPerThread addThread(TermsHashPerThread perThread) {
     return new FreqProxTermsWriterPerThread(perThread);
   }
 
+  @Override
   void createPostings(RawPostingList[] postings, int start, int count) {
     final int end = start + count;
     for(int i=start;i<end;i++)
@@ -57,7 +59,9 @@ final class FreqProxTermsWriter extends TermsHashConsumer {
     }
   }
 
+  @Override
   void closeDocStore(SegmentWriteState state) {}
+  @Override
   void abort() {}
 
 
@@ -66,6 +70,7 @@ final class FreqProxTermsWriter extends TermsHashConsumer {
   // under the same FieldInfo together, up into TermsHash*.
   // Other writers would presumably share alot of this...
 
+  @Override
   public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {
 
     // Gather all FieldData's that have postings, across all
@@ -288,6 +293,7 @@ final class FreqProxTermsWriter extends TermsHashConsumer {
     int lastPosition;                               // Last position where this term occurred
   }
 
+  @Override
   int bytesPerPosting() {
     return RawPostingList.BYTES_SIZE + 4 * DocumentsWriter.INT_NUM_BYTE;
   }
diff --git a/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java b/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java
index 5e4038b..e339c90 100644
--- a/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java
+++ b/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java
@@ -43,6 +43,7 @@ final class FreqProxTermsWriterPerField extends TermsHashConsumerPerField implem
     omitTermFreqAndPositions = fieldInfo.omitTermFreqAndPositions;
   }
 
+  @Override
   int getStreamCount() {
     if (fieldInfo.omitTermFreqAndPositions)
       return 1;
@@ -50,10 +51,12 @@ final class FreqProxTermsWriterPerField extends TermsHashConsumerPerField implem
       return 2;
   }
 
+  @Override
   void finish() {}
 
   boolean hasPayloads;
 
+  @Override
   void skippingLongTerm() throws IOException {}
 
   public int compareTo(FreqProxTermsWriterPerField other) {
@@ -67,6 +70,7 @@ final class FreqProxTermsWriterPerField extends TermsHashConsumerPerField implem
     payloadAttribute = null;
   }
 
+  @Override
   boolean start(Fieldable[] fields, int count) {
     for(int i=0;i<count;i++)
       if (fields[i].isIndexed())
@@ -74,6 +78,7 @@ final class FreqProxTermsWriterPerField extends TermsHashConsumerPerField implem
     return false;
   }     
   
+  @Override
   void start(Fieldable f) {
     if (fieldState.attributeSource.hasAttribute(PayloadAttribute.class)) {
       payloadAttribute = fieldState.attributeSource.getAttribute(PayloadAttribute.class);
@@ -100,6 +105,7 @@ final class FreqProxTermsWriterPerField extends TermsHashConsumerPerField implem
     p.lastPosition = fieldState.position;
   }
 
+  @Override
   final void newTerm(RawPostingList p0) {
     // First time we're seeing this term since the last
     // flush
@@ -115,6 +121,7 @@ final class FreqProxTermsWriterPerField extends TermsHashConsumerPerField implem
     }
   }
 
+  @Override
   final void addTerm(RawPostingList p0) {
 
     assert docState.testPoint("FreqProxTermsWriterPerField.addTerm start");
diff --git a/src/java/org/apache/lucene/index/FreqProxTermsWriterPerThread.java b/src/java/org/apache/lucene/index/FreqProxTermsWriterPerThread.java
index 94d4630..87af860 100644
--- a/src/java/org/apache/lucene/index/FreqProxTermsWriterPerThread.java
+++ b/src/java/org/apache/lucene/index/FreqProxTermsWriterPerThread.java
@@ -26,16 +26,20 @@ final class FreqProxTermsWriterPerThread extends TermsHashConsumerPerThread {
     termsHashPerThread = perThread;
   }
   
+  @Override
   public TermsHashConsumerPerField addField(TermsHashPerField termsHashPerField, FieldInfo fieldInfo) {
     return new FreqProxTermsWriterPerField(termsHashPerField, this, fieldInfo);
   }
 
+  @Override
   void startDocument() {
   }
 
+  @Override
   DocumentsWriter.DocWriter finishDocument() {
     return null;
   }
 
+  @Override
   public void abort() {}
 }
diff --git a/src/java/org/apache/lucene/index/IndexCommit.java b/src/java/org/apache/lucene/index/IndexCommit.java
index c89bc01..2a1c8a1 100644
--- a/src/java/org/apache/lucene/index/IndexCommit.java
+++ b/src/java/org/apache/lucene/index/IndexCommit.java
@@ -89,6 +89,7 @@ public abstract class IndexCommit {
   /**
    * Two IndexCommits are equal if both their Directory and versions are equal.
    */
+  @Override
   public boolean equals(Object other) {
     if (other instanceof IndexCommit) {
       IndexCommit otherCommit = (IndexCommit) other;
@@ -97,6 +98,7 @@ public abstract class IndexCommit {
       return false;
   }
 
+  @Override
   public int hashCode() {
     return getDirectory().hashCode() + getSegmentsFileName().hashCode();
   }
diff --git a/src/java/org/apache/lucene/index/IndexFileDeleter.java b/src/java/org/apache/lucene/index/IndexFileDeleter.java
index 2db7701..2d7ae01 100644
--- a/src/java/org/apache/lucene/index/IndexFileDeleter.java
+++ b/src/java/org/apache/lucene/index/IndexFileDeleter.java
@@ -585,30 +585,37 @@ final class IndexFileDeleter {
       assert !segmentInfos.hasExternalSegments(directory);
     }
 
+    @Override
     public boolean isOptimized() {
       return isOptimized;
     }
 
+    @Override
     public String getSegmentsFileName() {
       return segmentsFileName;
     }
 
+    @Override
     public Collection<String> getFileNames() throws IOException {
       return files;
     }
 
+    @Override
     public Directory getDirectory() {
       return directory;
     }
 
+    @Override
     public long getVersion() {
       return version;
     }
 
+    @Override
     public long getGeneration() {
       return generation;
     }
 
+    @Override
     public Map<String,String> getUserData() {
       return userData;
     }
@@ -617,6 +624,7 @@ final class IndexFileDeleter {
      * Called only be the deletion policy, to remove this
      * commit point from the index.
      */
+    @Override
     public void delete() {
       if (!deleted) {
         deleted = true;
@@ -624,6 +632,7 @@ final class IndexFileDeleter {
       }
     }
 
+    @Override
     public boolean isDeleted() {
       return deleted;
     }
diff --git a/src/java/org/apache/lucene/index/IndexReader.java b/src/java/org/apache/lucene/index/IndexReader.java
index 3509e7d..98233f3 100644
--- a/src/java/org/apache/lucene/index/IndexReader.java
+++ b/src/java/org/apache/lucene/index/IndexReader.java
@@ -88,6 +88,7 @@ public abstract class IndexReader implements Cloneable,Closeable {
     private FieldOption(String option) {
       this.option = option;
     }
+    @Override
     public String toString() {
       return this.option;
     }
@@ -395,6 +396,7 @@ public abstract class IndexReader implements Cloneable,Closeable {
    * @throws CorruptIndexException if the index is corrupt
    * @throws IOException if there is a low-level IO error
    */
+  @Override
   public synchronized Object clone() {
     throw new UnsupportedOperationException("This reader does not implement clone()");
   }
@@ -430,6 +432,7 @@ public abstract class IndexReader implements Cloneable,Closeable {
    */
   public static long lastModified(final Directory directory2) throws CorruptIndexException, IOException {
     return ((Long) new SegmentInfos.FindSegmentsFile(directory2) {
+        @Override
         public Object doBody(String segmentFileName) throws IOException {
           return Long.valueOf(directory2.fileModified(segmentFileName));
         }
diff --git a/src/java/org/apache/lucene/index/IndexWriter.java b/src/java/org/apache/lucene/index/IndexWriter.java
index 45b956f..42cf240 100644
--- a/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/src/java/org/apache/lucene/index/IndexWriter.java
@@ -4770,6 +4770,7 @@ public class IndexWriter implements Closeable {
       return limit;
     }
     
+    @Override
     public String toString()
     {
       return name + ":" + limit;
diff --git a/src/java/org/apache/lucene/index/LogByteSizeMergePolicy.java b/src/java/org/apache/lucene/index/LogByteSizeMergePolicy.java
index 4750331..6eb8aa9 100644
--- a/src/java/org/apache/lucene/index/LogByteSizeMergePolicy.java
+++ b/src/java/org/apache/lucene/index/LogByteSizeMergePolicy.java
@@ -35,6 +35,7 @@ public class LogByteSizeMergePolicy extends LogMergePolicy {
     minMergeSize = (long) (DEFAULT_MIN_MERGE_MB*1024*1024);
     maxMergeSize = (long) (DEFAULT_MAX_MERGE_MB*1024*1024);
   }
+  @Override
   protected long size(SegmentInfo info) throws IOException {
     return sizeBytes(info);
   }
diff --git a/src/java/org/apache/lucene/index/LogDocMergePolicy.java b/src/java/org/apache/lucene/index/LogDocMergePolicy.java
index 13610db..926b155 100644
--- a/src/java/org/apache/lucene/index/LogDocMergePolicy.java
+++ b/src/java/org/apache/lucene/index/LogDocMergePolicy.java
@@ -36,6 +36,7 @@ public class LogDocMergePolicy extends LogMergePolicy {
     // it to Long.MAX_VALUE to disable it
     maxMergeSize = Long.MAX_VALUE;
   }
+  @Override
   protected long size(SegmentInfo info) throws IOException {
     return sizeDocs(info);
   }
diff --git a/src/java/org/apache/lucene/index/LogMergePolicy.java b/src/java/org/apache/lucene/index/LogMergePolicy.java
index cfd7756..013d33c 100644
--- a/src/java/org/apache/lucene/index/LogMergePolicy.java
+++ b/src/java/org/apache/lucene/index/LogMergePolicy.java
@@ -102,6 +102,7 @@ public abstract class LogMergePolicy extends MergePolicy {
   }
 
   // Javadoc inherited
+  @Override
   public boolean useCompoundFile(SegmentInfos infos, SegmentInfo info) {
     return useCompoundFile;
   }
@@ -120,6 +121,7 @@ public abstract class LogMergePolicy extends MergePolicy {
   }
 
   // Javadoc inherited
+  @Override
   public boolean useCompoundDocStore(SegmentInfos infos) {
     return useCompoundDocStore;
   }
@@ -151,6 +153,7 @@ public abstract class LogMergePolicy extends MergePolicy {
     return calibrateSizeByDeletes;
   }
 
+  @Override
   public void close() {}
 
   abstract protected long size(SegmentInfo info) throws IOException;
@@ -211,6 +214,7 @@ public abstract class LogMergePolicy extends MergePolicy {
    *  setting is true.  This method returns multiple merges
    *  (mergeFactor at a time) so the {@link MergeScheduler}
    *  in use may make use of concurrency. */
+  @Override
   public MergeSpecification findMergesForOptimize(SegmentInfos infos,
       int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {
     MergeSpecification spec;
@@ -295,6 +299,7 @@ public abstract class LogMergePolicy extends MergePolicy {
    * index.  We simply merge adjacent segments that have
    * deletes, up to mergeFactor at a time.
    */ 
+  @Override
   public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)
       throws CorruptIndexException, IOException {
     final int numSegments = segmentInfos.size();
@@ -347,6 +352,7 @@ public abstract class LogMergePolicy extends MergePolicy {
    *  multiple levels have too many segments, this method
    *  will return multiple merges, allowing the {@link
    *  MergeScheduler} to use concurrency. */
+  @Override
   public MergeSpecification findMerges(SegmentInfos infos) throws IOException {
 
     final int numSegments = infos.size();
diff --git a/src/java/org/apache/lucene/index/MultiLevelSkipListReader.java b/src/java/org/apache/lucene/index/MultiLevelSkipListReader.java
index 156a67a..5eb0bad 100644
--- a/src/java/org/apache/lucene/index/MultiLevelSkipListReader.java
+++ b/src/java/org/apache/lucene/index/MultiLevelSkipListReader.java
@@ -244,27 +244,33 @@ abstract class MultiLevelSkipListReader {
       input.readBytes(data, 0, length);
     }
     
+    @Override
     public void close() throws IOException {
       data = null;
     }
 
+    @Override
     public long getFilePointer() {
       return pointer + pos;
     }
 
+    @Override
     public long length() {
       return data.length;
     }
 
+    @Override
     public byte readByte() throws IOException {
       return data[pos++];
     }
 
+    @Override
     public void readBytes(byte[] b, int offset, int len) throws IOException {
       System.arraycopy(data, pos, b, offset, len);
       pos += len;
     }
 
+    @Override
     public void seek(long pos) throws IOException {
       this.pos =  (int) (pos - pointer);
     }
diff --git a/src/java/org/apache/lucene/index/MultiReader.java b/src/java/org/apache/lucene/index/MultiReader.java
index 65597c3..413b618 100644
--- a/src/java/org/apache/lucene/index/MultiReader.java
+++ b/src/java/org/apache/lucene/index/MultiReader.java
@@ -106,6 +106,7 @@ public class MultiReader extends IndexReader implements Cloneable {
    * @throws CorruptIndexException if the index is corrupt
    * @throws IOException if there is a low-level IO error 
    */
+  @Override
   public synchronized IndexReader reopen() throws CorruptIndexException, IOException {
     return doReopen(false);
   }
@@ -119,6 +120,7 @@ public class MultiReader extends IndexReader implements Cloneable {
    * readers is increased to ensure that the subreaders remain open
    * until the last referring reader is closed.
    */
+  @Override
   public synchronized Object clone() {
     try {
       return doReopen(true);
@@ -185,12 +187,14 @@ public class MultiReader extends IndexReader implements Cloneable {
     }
   }
 
+  @Override
   public TermFreqVector[] getTermFreqVectors(int n) throws IOException {
     ensureOpen();
     int i = readerIndex(n);        // find segment num
     return subReaders[i].getTermFreqVectors(n - starts[i]); // dispatch to segment
   }
 
+  @Override
   public TermFreqVector getTermFreqVector(int n, String field)
       throws IOException {
     ensureOpen();
@@ -199,22 +203,26 @@ public class MultiReader extends IndexReader implements Cloneable {
   }
 
 
+  @Override
   public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException {
     ensureOpen();
     int i = readerIndex(docNumber);        // find segment num
     subReaders[i].getTermFreqVector(docNumber - starts[i], field, mapper);
   }
 
+  @Override
   public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException {
     ensureOpen();
     int i = readerIndex(docNumber);        // find segment num
     subReaders[i].getTermFreqVector(docNumber - starts[i], mapper);
   }
 
+  @Override
   public boolean isOptimized() {
     return false;
   }
   
+  @Override
   public synchronized int numDocs() {
     // Don't call ensureOpen() here (it could affect performance)
     if (numDocs == -1) {        // check cache
@@ -226,29 +234,34 @@ public class MultiReader extends IndexReader implements Cloneable {
     return numDocs;
   }
 
+  @Override
   public int maxDoc() {
     // Don't call ensureOpen() here (it could affect performance)
     return maxDoc;
   }
 
   // inherit javadoc
+  @Override
   public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {
     ensureOpen();
     int i = readerIndex(n);                          // find segment num
     return subReaders[i].document(n - starts[i], fieldSelector);    // dispatch to segment reader
   }
 
+  @Override
   public boolean isDeleted(int n) {
     // Don't call ensureOpen() here (it could affect performance)
     int i = readerIndex(n);                           // find segment num
     return subReaders[i].isDeleted(n - starts[i]);    // dispatch to segment reader
   }
 
+  @Override
   public boolean hasDeletions() {
     // Don't call ensureOpen() here (it could affect performance)
     return hasDeletions;
   }
 
+  @Override
   protected void doDelete(int n) throws CorruptIndexException, IOException {
     numDocs = -1;                             // invalidate cache
     int i = readerIndex(n);                   // find segment num
@@ -256,6 +269,7 @@ public class MultiReader extends IndexReader implements Cloneable {
     hasDeletions = true;
   }
 
+  @Override
   protected void doUndeleteAll() throws CorruptIndexException, IOException {
     for (int i = 0; i < subReaders.length; i++)
       subReaders[i].undeleteAll();
@@ -268,6 +282,7 @@ public class MultiReader extends IndexReader implements Cloneable {
     return DirectoryReader.readerIndex(n, this.starts, this.subReaders.length);
   }
   
+  @Override
   public boolean hasNorms(String field) throws IOException {
     ensureOpen();
     for (int i = 0; i < subReaders.length; i++) {
@@ -282,6 +297,7 @@ public class MultiReader extends IndexReader implements Cloneable {
     return ones;
   }
   
+  @Override
   public synchronized byte[] norms(String field) throws IOException {
     ensureOpen();
     byte[] bytes = normsCache.get(field);
@@ -297,6 +313,7 @@ public class MultiReader extends IndexReader implements Cloneable {
     return bytes;
   }
 
+  @Override
   public synchronized void norms(String field, byte[] result, int offset)
     throws IOException {
     ensureOpen();
@@ -315,6 +332,7 @@ public class MultiReader extends IndexReader implements Cloneable {
     }
   }
 
+  @Override
   protected void doSetNorm(int n, String field, byte value)
     throws CorruptIndexException, IOException {
     synchronized (normsCache) {
@@ -324,16 +342,19 @@ public class MultiReader extends IndexReader implements Cloneable {
     subReaders[i].setNorm(n-starts[i], field, value); // dispatch
   }
 
+  @Override
   public TermEnum terms() throws IOException {
     ensureOpen();
     return new MultiTermEnum(this, subReaders, starts, null);
   }
 
+  @Override
   public TermEnum terms(Term term) throws IOException {
     ensureOpen();
     return new MultiTermEnum(this, subReaders, starts, term);
   }
 
+  @Override
   public int docFreq(Term t) throws IOException {
     ensureOpen();
     int total = 0;          // sum freqs in segments
@@ -342,21 +363,25 @@ public class MultiReader extends IndexReader implements Cloneable {
     return total;
   }
 
+  @Override
   public TermDocs termDocs() throws IOException {
     ensureOpen();
     return new MultiTermDocs(this, subReaders, starts);
   }
 
+  @Override
   public TermPositions termPositions() throws IOException {
     ensureOpen();
     return new MultiTermPositions(this, subReaders, starts);
   }
 
+  @Override
   protected void doCommit(Map<String,String> commitUserData) throws IOException {
     for (int i = 0; i < subReaders.length; i++)
       subReaders[i].commit(commitUserData);
   }
 
+  @Override
   protected synchronized void doClose() throws IOException {
     for (int i = 0; i < subReaders.length; i++) {
       if (decrefOnClose[i]) {
@@ -367,6 +392,7 @@ public class MultiReader extends IndexReader implements Cloneable {
     }
   }
   
+  @Override
   public Collection<String> getFieldNames (IndexReader.FieldOption fieldNames) {
     ensureOpen();
     return DirectoryReader.getFieldNames(fieldNames, this.subReaders);
@@ -375,6 +401,7 @@ public class MultiReader extends IndexReader implements Cloneable {
   /**
    * Checks recursively if all subreaders are up to date. 
    */
+  @Override
   public boolean isCurrent() throws CorruptIndexException, IOException {
     for (int i = 0; i < subReaders.length; i++) {
       if (!subReaders[i].isCurrent()) {
@@ -389,10 +416,12 @@ public class MultiReader extends IndexReader implements Cloneable {
   /** Not implemented.
    * @throws UnsupportedOperationException
    */
+  @Override
   public long getVersion() {
     throw new UnsupportedOperationException("MultiReader does not support this method.");
   }
   
+  @Override
   public IndexReader[] getSequentialSubReaders() {
     return subReaders;
   }
diff --git a/src/java/org/apache/lucene/index/MultipleTermPositions.java b/src/java/org/apache/lucene/index/MultipleTermPositions.java
index 47f904b..edb0852 100644
--- a/src/java/org/apache/lucene/index/MultipleTermPositions.java
+++ b/src/java/org/apache/lucene/index/MultipleTermPositions.java
@@ -46,6 +46,7 @@ public class MultipleTermPositions implements TermPositions {
       return top();
     }
 
+    @Override
     public final boolean lessThan(TermPositions a, TermPositions b) {
       return a.doc() < b.doc();
     }
diff --git a/src/java/org/apache/lucene/index/NormsWriter.java b/src/java/org/apache/lucene/index/NormsWriter.java
index 34622f0..aa04ccb 100644
--- a/src/java/org/apache/lucene/index/NormsWriter.java
+++ b/src/java/org/apache/lucene/index/NormsWriter.java
@@ -41,21 +41,25 @@ final class NormsWriter extends InvertedDocEndConsumer {
 
   private static final byte defaultNorm = Similarity.encodeNorm(1.0f);
   private FieldInfos fieldInfos;
+  @Override
   public InvertedDocEndConsumerPerThread addThread(DocInverterPerThread docInverterPerThread) {
     return new NormsWriterPerThread(docInverterPerThread, this);
   }
 
+  @Override
   public void abort() {}
 
   // We only write the _X.nrm file at flush
   void files(Collection<String> files) {}
 
+  @Override
   void setFieldInfos(FieldInfos fieldInfos) {
     this.fieldInfos = fieldInfos;
   }
 
   /** Produce _X.nrm if any document had a field with norms
    *  not disabled */
+  @Override
   public void flush(Map<InvertedDocEndConsumerPerThread,Collection<InvertedDocEndConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {
 
     final Map byField = new HashMap();
@@ -173,5 +177,6 @@ final class NormsWriter extends InvertedDocEndConsumer {
     }
   }
 
+  @Override
   void closeDocStore(SegmentWriteState state) {}
 }
diff --git a/src/java/org/apache/lucene/index/NormsWriterPerField.java b/src/java/org/apache/lucene/index/NormsWriterPerField.java
index 52c08f0..b604884 100644
--- a/src/java/org/apache/lucene/index/NormsWriterPerField.java
+++ b/src/java/org/apache/lucene/index/NormsWriterPerField.java
@@ -52,6 +52,7 @@ final class NormsWriterPerField extends InvertedDocEndConsumerPerField implement
     fieldState = docInverterPerField.fieldState;
   }
 
+  @Override
   void abort() {
     upto = 0;
   }
@@ -60,6 +61,7 @@ final class NormsWriterPerField extends InvertedDocEndConsumerPerField implement
     return fieldInfo.name.compareTo(other.fieldInfo.name);
   }
   
+  @Override
   void finish() {
     assert docIDs.length == norms.length;
     if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {
diff --git a/src/java/org/apache/lucene/index/NormsWriterPerThread.java b/src/java/org/apache/lucene/index/NormsWriterPerThread.java
index 3eea1f5..fb57104 100644
--- a/src/java/org/apache/lucene/index/NormsWriterPerThread.java
+++ b/src/java/org/apache/lucene/index/NormsWriterPerThread.java
@@ -26,13 +26,17 @@ final class NormsWriterPerThread extends InvertedDocEndConsumerPerThread {
     docState = docInverterPerThread.docState;
   }
 
+  @Override
   InvertedDocEndConsumerPerField addField(DocInverterPerField docInverterPerField, final FieldInfo fieldInfo) {
     return new NormsWriterPerField(docInverterPerField, this, fieldInfo);
   }
 
+  @Override
   void abort() {}
 
+  @Override
   void startDocument() {}
+  @Override
   void finishDocument() {}
 
   boolean freeRAM() {
diff --git a/src/java/org/apache/lucene/index/ParallelReader.java b/src/java/org/apache/lucene/index/ParallelReader.java
index 937d05a..8727453 100644
--- a/src/java/org/apache/lucene/index/ParallelReader.java
+++ b/src/java/org/apache/lucene/index/ParallelReader.java
@@ -121,6 +121,7 @@ public class ParallelReader extends IndexReader {
     decrefOnClose.add(Boolean.valueOf(incRefReaders));
   }
   
+  @Override
   public synchronized Object clone() {
     try {
       return doReopen(true);
@@ -148,6 +149,7 @@ public class ParallelReader extends IndexReader {
    * @throws CorruptIndexException if the index is corrupt
    * @throws IOException if there is a low-level IO error 
    */
+  @Override
   public synchronized IndexReader reopen() throws CorruptIndexException, IOException {
     return doReopen(false);
   }
@@ -217,22 +219,26 @@ public class ParallelReader extends IndexReader {
   }
 
 
+  @Override
   public int numDocs() {
     // Don't call ensureOpen() here (it could affect performance)
     return numDocs;
   }
 
+  @Override
   public int maxDoc() {
     // Don't call ensureOpen() here (it could affect performance)
     return maxDoc;
   }
 
+  @Override
   public boolean hasDeletions() {
     // Don't call ensureOpen() here (it could affect performance)
     return hasDeletions;
   }
 
   // check first reader
+  @Override
   public boolean isDeleted(int n) {
     // Don't call ensureOpen() here (it could affect performance)
     if (readers.size() > 0)
@@ -241,6 +247,7 @@ public class ParallelReader extends IndexReader {
   }
 
   // delete in all readers
+  @Override
   protected void doDelete(int n) throws CorruptIndexException, IOException {
     for (final IndexReader reader : readers) {
       reader.deleteDocument(n);
@@ -249,6 +256,7 @@ public class ParallelReader extends IndexReader {
   }
 
   // undeleteAll in all readers
+  @Override
   protected void doUndeleteAll() throws CorruptIndexException, IOException {
     for (final IndexReader reader : readers) {
       reader.undeleteAll();
@@ -257,6 +265,7 @@ public class ParallelReader extends IndexReader {
   }
 
   // append fields from storedFieldReaders
+  @Override
   public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {
     ensureOpen();
     Document result = new Document();
@@ -282,6 +291,7 @@ public class ParallelReader extends IndexReader {
   }
 
   // get all vectors
+  @Override
   public TermFreqVector[] getTermFreqVectors(int n) throws IOException {
     ensureOpen();
     ArrayList<TermFreqVector> results = new ArrayList<TermFreqVector>();
@@ -296,6 +306,7 @@ public class ParallelReader extends IndexReader {
     return results.toArray(new TermFreqVector[results.size()]);
   }
 
+  @Override
   public TermFreqVector getTermFreqVector(int n, String field)
     throws IOException {
     ensureOpen();
@@ -304,6 +315,7 @@ public class ParallelReader extends IndexReader {
   }
 
 
+  @Override
   public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException {
     ensureOpen();
     IndexReader reader = fieldToReader.get(field);
@@ -312,6 +324,7 @@ public class ParallelReader extends IndexReader {
     }
   }
 
+  @Override
   public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException {
     ensureOpen();
 
@@ -324,18 +337,21 @@ public class ParallelReader extends IndexReader {
 
   }
 
+  @Override
   public boolean hasNorms(String field) throws IOException {
     ensureOpen();
     IndexReader reader = fieldToReader.get(field);
     return reader==null ? false : reader.hasNorms(field);
   }
 
+  @Override
   public byte[] norms(String field) throws IOException {
     ensureOpen();
     IndexReader reader = fieldToReader.get(field);
     return reader==null ? null : reader.norms(field);
   }
 
+  @Override
   public void norms(String field, byte[] result, int offset)
     throws IOException {
     ensureOpen();
@@ -344,6 +360,7 @@ public class ParallelReader extends IndexReader {
       reader.norms(field, result, offset);
   }
 
+  @Override
   protected void doSetNorm(int n, String field, byte value)
     throws CorruptIndexException, IOException {
     IndexReader reader = fieldToReader.get(field);
@@ -351,37 +368,44 @@ public class ParallelReader extends IndexReader {
       reader.doSetNorm(n, field, value);
   }
 
+  @Override
   public TermEnum terms() throws IOException {
     ensureOpen();
     return new ParallelTermEnum();
   }
 
+  @Override
   public TermEnum terms(Term term) throws IOException {
     ensureOpen();
     return new ParallelTermEnum(term);
   }
 
+  @Override
   public int docFreq(Term term) throws IOException {
     ensureOpen();
     IndexReader reader = fieldToReader.get(term.field());
     return reader==null ? 0 : reader.docFreq(term);
   }
 
+  @Override
   public TermDocs termDocs(Term term) throws IOException {
     ensureOpen();
     return new ParallelTermDocs(term);
   }
 
+  @Override
   public TermDocs termDocs() throws IOException {
     ensureOpen();
     return new ParallelTermDocs();
   }
 
+  @Override
   public TermPositions termPositions(Term term) throws IOException {
     ensureOpen();
     return new ParallelTermPositions(term);
   }
 
+  @Override
   public TermPositions termPositions() throws IOException {
     ensureOpen();
     return new ParallelTermPositions();
@@ -390,6 +414,7 @@ public class ParallelReader extends IndexReader {
   /**
    * Checks recursively if all subreaders are up to date. 
    */
+  @Override
   public boolean isCurrent() throws CorruptIndexException, IOException {
     for (final IndexReader reader : readers) {
       if (!reader.isCurrent()) {
@@ -404,6 +429,7 @@ public class ParallelReader extends IndexReader {
   /**
    * Checks recursively if all subindexes are optimized 
    */
+  @Override
   public boolean isOptimized() {
     for (final IndexReader reader : readers) {
       if (!reader.isOptimized()) {
@@ -419,6 +445,7 @@ public class ParallelReader extends IndexReader {
   /** Not implemented.
    * @throws UnsupportedOperationException
    */
+  @Override
   public long getVersion() {
     throw new UnsupportedOperationException("ParallelReader does not support this method.");
   }
@@ -428,11 +455,13 @@ public class ParallelReader extends IndexReader {
     return readers.toArray(new IndexReader[readers.size()]);
   }
 
+  @Override
   protected void doCommit(Map<String,String> commitUserData) throws IOException {
     for (final IndexReader reader : readers)
       reader.commit(commitUserData);
   }
 
+  @Override
   protected synchronized void doClose() throws IOException {
     for (int i = 0; i < readers.size(); i++) {
       if (decrefOnClose.get(i).booleanValue()) {
@@ -443,6 +472,7 @@ public class ParallelReader extends IndexReader {
     }
   }
 
+  @Override
   public Collection<String> getFieldNames (IndexReader.FieldOption fieldNames) {
     ensureOpen();
     Set<String> fieldSet = new HashSet<String>();
@@ -476,6 +506,7 @@ public class ParallelReader extends IndexReader {
         termEnum = reader.terms(term);
     }
 
+    @Override
     public boolean next() throws IOException {
       if (termEnum==null)
         return false;
@@ -504,6 +535,7 @@ public class ParallelReader extends IndexReader {
       return false;                               // no more fields
     }
 
+    @Override
     public Term term() {
       if (termEnum==null)
         return null;
@@ -511,6 +543,7 @@ public class ParallelReader extends IndexReader {
       return termEnum.term();
     }
 
+    @Override
     public int docFreq() {
       if (termEnum==null)
         return 0;
@@ -518,6 +551,7 @@ public class ParallelReader extends IndexReader {
       return termEnum.docFreq();
     }
 
+    @Override
     public void close() throws IOException {
       if (termEnum!=null)
         termEnum.close();
@@ -583,6 +617,7 @@ public class ParallelReader extends IndexReader {
     public ParallelTermPositions() {}
     public ParallelTermPositions(Term term) throws IOException { seek(term); }
 
+    @Override
     public void seek(Term term) throws IOException {
       IndexReader reader = fieldToReader.get(term.field());
       termDocs = reader!=null ? reader.termPositions(term) : null;
diff --git a/src/java/org/apache/lucene/index/Payload.java b/src/java/org/apache/lucene/index/Payload.java
index e3585c0..5c4a416 100644
--- a/src/java/org/apache/lucene/index/Payload.java
+++ b/src/java/org/apache/lucene/index/Payload.java
@@ -156,6 +156,7 @@ public class Payload implements Serializable, Cloneable {
    * Clones this payload by creating a copy of the underlying
    * byte array.
    */
+  @Override
   public Object clone() {
     try {
       // Start with a shallow copy of data
@@ -176,6 +177,7 @@ public class Payload implements Serializable, Cloneable {
     }
   }
 
+  @Override
   public boolean equals(Object obj) {
     if (obj == this)
       return true;
@@ -192,6 +194,7 @@ public class Payload implements Serializable, Cloneable {
       return false;
   }
 
+  @Override
   public int hashCode() {
     return ArrayUtil.hashCode(data, offset, offset+length);
   }
diff --git a/src/java/org/apache/lucene/index/PositionBasedTermVectorMapper.java b/src/java/org/apache/lucene/index/PositionBasedTermVectorMapper.java
index edcbf3c..73d4e0a 100644
--- a/src/java/org/apache/lucene/index/PositionBasedTermVectorMapper.java
+++ b/src/java/org/apache/lucene/index/PositionBasedTermVectorMapper.java
@@ -56,6 +56,7 @@ public class PositionBasedTermVectorMapper extends TermVectorMapper{
    * Never ignores positions.  This mapper doesn't make much sense unless there are positions
    * @return false
    */
+  @Override
   public boolean isIgnoringPositions() {
     return false;
   }
@@ -67,6 +68,7 @@ public class PositionBasedTermVectorMapper extends TermVectorMapper{
    * @param offsets
    * @param positions
    */
+  @Override
   public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {
     for (int i = 0; i < positions.length; i++) {
       Integer posVal = Integer.valueOf(positions[i]);
@@ -86,6 +88,7 @@ public class PositionBasedTermVectorMapper extends TermVectorMapper{
    * @param storeOffsets Whether offsets are available
    * @param storePositions Whether positions are available
    */
+  @Override
   public void setExpectations(String field, int numTerms, boolean storeOffsets, boolean storePositions) {
     if (storePositions == false)
     {
diff --git a/src/java/org/apache/lucene/index/ReadOnlyDirectoryReader.java b/src/java/org/apache/lucene/index/ReadOnlyDirectoryReader.java
index 04f3a16..e2e38eb 100644
--- a/src/java/org/apache/lucene/index/ReadOnlyDirectoryReader.java
+++ b/src/java/org/apache/lucene/index/ReadOnlyDirectoryReader.java
@@ -36,6 +36,7 @@ class ReadOnlyDirectoryReader extends DirectoryReader {
     super(writer, infos, termInfosIndexDivisor);
   }
   
+  @Override
   protected void acquireWriteLock() {
     ReadOnlySegmentReader.noWrite();
   }
diff --git a/src/java/org/apache/lucene/index/ReadOnlySegmentReader.java b/src/java/org/apache/lucene/index/ReadOnlySegmentReader.java
index d06d8d2..53e3d2a 100644
--- a/src/java/org/apache/lucene/index/ReadOnlySegmentReader.java
+++ b/src/java/org/apache/lucene/index/ReadOnlySegmentReader.java
@@ -23,11 +23,13 @@ class ReadOnlySegmentReader extends SegmentReader {
     throw new UnsupportedOperationException("This IndexReader cannot make any changes to the index (it was opened with readOnly = true)");
   }
   
+  @Override
   protected void acquireWriteLock() {
     noWrite();
   }
 
   // Not synchronized
+  @Override
   public boolean isDeleted(int n) {
     return deletedDocs != null && deletedDocs.get(n);
   }
diff --git a/src/java/org/apache/lucene/index/ReusableStringReader.java b/src/java/org/apache/lucene/index/ReusableStringReader.java
index 42420e0..902cd0b 100644
--- a/src/java/org/apache/lucene/index/ReusableStringReader.java
+++ b/src/java/org/apache/lucene/index/ReusableStringReader.java
@@ -31,9 +31,11 @@ final class ReusableStringReader extends Reader {
     left = s.length();
     this.upto = 0;
   }
+  @Override
   public int read(char[] c) {
     return read(c, 0, c.length);
   }
+  @Override
   public int read(char[] c, int off, int len) {
     if (left > len) {
       s.getChars(upto, upto+len, c, off);
@@ -50,6 +52,7 @@ final class ReusableStringReader extends Reader {
       return r;
     }
   }
+  @Override
   public void close() {};
 }
 
diff --git a/src/java/org/apache/lucene/index/SegmentInfo.java b/src/java/org/apache/lucene/index/SegmentInfo.java
index 6ba6f3f..f429608 100644
--- a/src/java/org/apache/lucene/index/SegmentInfo.java
+++ b/src/java/org/apache/lucene/index/SegmentInfo.java
@@ -91,6 +91,7 @@ public final class SegmentInfo {
 
   private Map<String,String> diagnostics;
 
+  @Override
   public String toString() {
     return "si: "+dir.toString()+" "+name+" docCount: "+docCount+" delCount: "+delCount+" delFileName: "+getDelFileName();
   }
@@ -314,6 +315,7 @@ public final class SegmentInfo {
     clearFiles();
   }
 
+  @Override
   public Object clone () {
     SegmentInfo si = new SegmentInfo(name, docCount, dir);
     si.isCompoundFile = isCompoundFile;
@@ -710,6 +712,7 @@ public final class SegmentInfo {
 
   /** We consider another SegmentInfo instance equal if it
    *  has the same dir and same name. */
+  @Override
   public boolean equals(Object obj) {
     SegmentInfo other;
     try {
@@ -720,6 +723,7 @@ public final class SegmentInfo {
     return other.dir == dir && other.name.equals(name);
   }
 
+  @Override
   public int hashCode() {
     return dir.hashCode() + name.hashCode();
   }
diff --git a/src/java/org/apache/lucene/index/SegmentInfos.java b/src/java/org/apache/lucene/index/SegmentInfos.java
index 19bcf09..809a729 100644
--- a/src/java/org/apache/lucene/index/SegmentInfos.java
+++ b/src/java/org/apache/lucene/index/SegmentInfos.java
@@ -305,6 +305,7 @@ public final class SegmentInfos extends Vector<SegmentInfo> {
 
     new FindSegmentsFile(directory) {
 
+      @Override
       protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {
         read(directory, segmentFileName);
         return null;
@@ -369,6 +370,7 @@ public final class SegmentInfos extends Vector<SegmentInfo> {
    * SegmentInfo.
    */
   
+  @Override
   public Object clone() {
     SegmentInfos sis = (SegmentInfos) super.clone();
     for(int i=0;i<sis.size();i++) {
@@ -400,6 +402,7 @@ public final class SegmentInfos extends Vector<SegmentInfo> {
     throws CorruptIndexException, IOException {
 
     return ((Long) new FindSegmentsFile(directory) {
+        @Override
         protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {
 
           IndexInput input = directory.openInput(segmentFileName);
diff --git a/src/java/org/apache/lucene/index/SegmentMergeQueue.java b/src/java/org/apache/lucene/index/SegmentMergeQueue.java
index ebf50d7..877203c 100644
--- a/src/java/org/apache/lucene/index/SegmentMergeQueue.java
+++ b/src/java/org/apache/lucene/index/SegmentMergeQueue.java
@@ -25,6 +25,7 @@ final class SegmentMergeQueue extends PriorityQueue<SegmentMergeInfo> {
     initialize(size);
   }
 
+  @Override
   protected final boolean lessThan(SegmentMergeInfo stiA, SegmentMergeInfo stiB) {
     int comparison = stiA.term.compareTo(stiB.term);
     if (comparison == 0)
diff --git a/src/java/org/apache/lucene/index/SegmentMerger.java b/src/java/org/apache/lucene/index/SegmentMerger.java
index 8161c78..1badf78 100644
--- a/src/java/org/apache/lucene/index/SegmentMerger.java
+++ b/src/java/org/apache/lucene/index/SegmentMerger.java
@@ -76,6 +76,7 @@ final class SegmentMerger {
     directory = dir;
     segment = name;
     checkAbort = new CheckAbort(null, null) {
+      @Override
       public void work(double units) throws MergeAbortedException {
         // do nothing
       }
@@ -89,6 +90,7 @@ final class SegmentMerger {
       checkAbort = new CheckAbort(merge, directory);
     } else {
       checkAbort = new CheckAbort(null, null) {
+        @Override
         public void work(double units) throws MergeAbortedException {
           // do nothing
         }
diff --git a/src/java/org/apache/lucene/index/SegmentReader.java b/src/java/org/apache/lucene/index/SegmentReader.java
index a73ce26..b17abf9 100644
--- a/src/java/org/apache/lucene/index/SegmentReader.java
+++ b/src/java/org/apache/lucene/index/SegmentReader.java
@@ -293,6 +293,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
    * Sets the initial value 
    */
   private class FieldsReaderLocal extends CloseableThreadLocal<FieldsReader> {
+    @Override
     protected FieldsReader initialValue() {
       return (FieldsReader) core.getFieldsReaderOrig().clone();
     }
@@ -301,6 +302,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
   static class Ref {
     private int refCount = 1;
     
+    @Override
     public String toString() {
       return "refcount: "+refCount;
     }
@@ -491,6 +493,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
     
     // Returns a copy of this Norm instance that shares
     // IndexInput & bytes with the original one
+    @Override
     public synchronized Object clone() {
       assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);
         
@@ -633,6 +636,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
     return (BitVector)bv.clone();
   }
 
+  @Override
   public final synchronized Object clone() {
     try {
       return clone(readOnly); // Preserve current readOnly
@@ -641,6 +645,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
     }
   }
 
+  @Override
   public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {
     return reopenSegment(si, true, openReadOnly);
   }
@@ -737,6 +742,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
     return clone;
   }
 
+  @Override
   protected void doCommit(Map<String,String> commitUserData) throws IOException {
     if (hasChanges) {
       if (deletedDocsDirty) {               // re-write deleted
@@ -772,6 +778,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
     return fieldsReaderLocal.get();
   }
 
+  @Override
   protected void doClose() throws IOException {
     termVectorsLocal.close();
     fieldsReaderLocal.close();
@@ -795,6 +802,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
     return si.hasDeletions();
   }
 
+  @Override
   public boolean hasDeletions() {
     // Don't call ensureOpen() here (it could affect performance)
     return deletedDocs != null;
@@ -808,6 +816,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
     return si.hasSeparateNorms();
   }
 
+  @Override
   protected void doDelete(int docNum) {
     if (deletedDocs == null) {
       deletedDocs = new BitVector(maxDoc());
@@ -827,6 +836,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
       pendingDeleteCount++;
   }
 
+  @Override
   protected void doUndeleteAll() {
     deletedDocsDirty = false;
     if (deletedDocs != null) {
@@ -847,11 +857,13 @@ public class SegmentReader extends IndexReader implements Cloneable {
     return new ArrayList<String>(si.files());
   }
 
+  @Override
   public TermEnum terms() {
     ensureOpen();
     return core.getTermsReader().terms();
   }
 
+  @Override
   public TermEnum terms(Term t) throws IOException {
     ensureOpen();
     return core.getTermsReader().terms(t);
@@ -861,15 +873,18 @@ public class SegmentReader extends IndexReader implements Cloneable {
     return core.fieldInfos;
   }
 
+  @Override
   public Document document(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {
     ensureOpen();
     return getFieldsReader().doc(n, fieldSelector);
   }
 
+  @Override
   public synchronized boolean isDeleted(int n) {
     return (deletedDocs != null && deletedDocs.get(n));
   }
 
+  @Override
   public TermDocs termDocs(Term term) throws IOException {
     if (term == null) {
       return new AllTermDocs(this);
@@ -878,16 +893,19 @@ public class SegmentReader extends IndexReader implements Cloneable {
     }
   }
 
+  @Override
   public TermDocs termDocs() throws IOException {
     ensureOpen();
     return new SegmentTermDocs(this);
   }
 
+  @Override
   public TermPositions termPositions() throws IOException {
     ensureOpen();
     return new SegmentTermPositions(this);
   }
 
+  @Override
   public int docFreq(Term t) throws IOException {
     ensureOpen();
     TermInfo ti = core.getTermsReader().get(t);
@@ -897,6 +915,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
       return 0;
   }
 
+  @Override
   public int numDocs() {
     // Don't call ensureOpen() here (it could affect performance)
     int n = maxDoc();
@@ -905,6 +924,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
     return n;
   }
 
+  @Override
   public int maxDoc() {
     // Don't call ensureOpen() here (it could affect performance)
     return si.docCount;
@@ -913,6 +933,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
   /**
    * @see IndexReader#getFieldNames(IndexReader.FieldOption fldOption)
    */
+  @Override
   public Collection<String> getFieldNames(IndexReader.FieldOption fieldOption) {
     ensureOpen();
 
@@ -961,6 +982,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
   }
 
 
+  @Override
   public synchronized boolean hasNorms(String field) {
     ensureOpen();
     return norms.containsKey(field);
@@ -982,12 +1004,14 @@ public class SegmentReader extends IndexReader implements Cloneable {
   }
 
   // returns fake norms if norms aren't available
+  @Override
   public synchronized byte[] norms(String field) throws IOException {
     ensureOpen();
     byte[] bytes = getNorms(field);
     return bytes;
   }
 
+  @Override
   protected void doSetNorm(int doc, String field, byte value)
           throws IOException {
     Norm norm = norms.get(field);
@@ -999,6 +1023,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
   }
 
   /** Read norms into a pre-allocated array. */
+  @Override
   public synchronized void norms(String field, byte[] bytes, int offset)
     throws IOException {
 
@@ -1121,6 +1146,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
    *  flag set.  If the flag was not set, the method returns null.
    * @throws IOException
    */
+  @Override
   public TermFreqVector getTermFreqVector(int docNumber, String field) throws IOException {
     // Check if this field is invalid or has no stored term vector
     ensureOpen();
@@ -1136,6 +1162,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
   }
 
 
+  @Override
   public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException {
     ensureOpen();
     FieldInfo fi = core.fieldInfos.fieldInfo(field);
@@ -1152,6 +1179,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
   }
 
 
+  @Override
   public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException {
     ensureOpen();
 
@@ -1169,6 +1197,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
    *  If no such fields existed, the method returns null.
    * @throws IOException
    */
+  @Override
   public TermFreqVector[] getTermFreqVectors(int docNumber) throws IOException {
     ensureOpen();
     
@@ -1218,6 +1247,7 @@ public class SegmentReader extends IndexReader implements Cloneable {
   }
 
   /** Returns the directory this index resides in. */
+  @Override
   public Directory directory() {
     // Don't ensureOpen here -- in certain cases, when a
     // cloned/reopened reader needs to commit, it may call
@@ -1228,10 +1258,12 @@ public class SegmentReader extends IndexReader implements Cloneable {
   // This is necessary so that cloned SegmentReaders (which
   // share the underlying postings data) will map to the
   // same entry in the FieldCache.  See LUCENE-1579.
+  @Override
   public final Object getFieldCacheKey() {
     return core.freqStream;
   }
 
+  @Override
   public long getUniqueTermCount() {
     return core.getTermsReader().size();
   }
diff --git a/src/java/org/apache/lucene/index/SegmentTermEnum.java b/src/java/org/apache/lucene/index/SegmentTermEnum.java
index 5b4ba86..214d8de 100644
--- a/src/java/org/apache/lucene/index/SegmentTermEnum.java
+++ b/src/java/org/apache/lucene/index/SegmentTermEnum.java
@@ -92,6 +92,7 @@ final class SegmentTermEnum extends TermEnum implements Cloneable {
     }
   }
 
+  @Override
   protected Object clone() {
     SegmentTermEnum clone = null;
     try {
@@ -118,6 +119,7 @@ final class SegmentTermEnum extends TermEnum implements Cloneable {
   }
 
   /** Increments the enumeration to the next element.  True if one exists.*/
+  @Override
   public final boolean next() throws IOException {
     if (position++ >= size - 1) {
       prevBuffer.set(termBuffer);
@@ -165,6 +167,7 @@ final class SegmentTermEnum extends TermEnum implements Cloneable {
 
   /** Returns the current Term in the enumeration.
    Initially invalid, valid after next() called for the first time.*/
+  @Override
   public final Term term() {
     return termBuffer.toTerm();
   }
@@ -188,6 +191,7 @@ final class SegmentTermEnum extends TermEnum implements Cloneable {
 
   /** Returns the docFreq from the current TermInfo in the enumeration.
    Initially invalid, valid after next() called for the first time.*/
+  @Override
   public final int docFreq() {
     return termInfo.docFreq;
   }
@@ -205,6 +209,7 @@ final class SegmentTermEnum extends TermEnum implements Cloneable {
   }
 
   /** Closes the enumeration to further activity, freeing resources. */
+  @Override
   public final void close() throws IOException {
     input.close();
   }
diff --git a/src/java/org/apache/lucene/index/SegmentTermPositions.java b/src/java/org/apache/lucene/index/SegmentTermPositions.java
index 8b04d00..ae24ff9 100644
--- a/src/java/org/apache/lucene/index/SegmentTermPositions.java
+++ b/src/java/org/apache/lucene/index/SegmentTermPositions.java
@@ -43,6 +43,7 @@ extends SegmentTermDocs implements TermPositions {
     this.proxStream = null;  // the proxStream will be cloned lazily when nextPosition() is called for the first time
   }
 
+  @Override
   final void seek(TermInfo ti, Term term) throws IOException {
     super.seek(ti, term);
     if (ti != null)
@@ -54,6 +55,7 @@ extends SegmentTermDocs implements TermPositions {
     needToLoadPayload = false;
   }
 
+  @Override
   public final void close() throws IOException {
     super.close();
     if (proxStream != null) proxStream.close();
@@ -85,11 +87,13 @@ extends SegmentTermDocs implements TermPositions {
     return delta;
   }
   
+  @Override
   protected final void skippingDoc() throws IOException {
     // we remember to skip a document lazily
     lazySkipProxCount += freq;
   }
 
+  @Override
   public final boolean next() throws IOException {
     // we remember to skip the remaining positions of the current
     // document lazily
@@ -103,12 +107,14 @@ extends SegmentTermDocs implements TermPositions {
     return false;
   }
 
+  @Override
   public final int read(final int[] docs, final int[] freqs) {
     throw new UnsupportedOperationException("TermPositions does not support processing multiple documents in one call. Use TermDocs instead.");
   }
 
 
   /** Called by super.skipTo(). */
+  @Override
   protected void skipProx(long proxPointer, int payloadLength) throws IOException {
     // we save the pointer, we might have to skip there lazily
     lazySkipPointer = proxPointer;
diff --git a/src/java/org/apache/lucene/index/SegmentTermVector.java b/src/java/org/apache/lucene/index/SegmentTermVector.java
index 7155541..22a0ffb 100644
--- a/src/java/org/apache/lucene/index/SegmentTermVector.java
+++ b/src/java/org/apache/lucene/index/SegmentTermVector.java
@@ -39,6 +39,7 @@ class SegmentTermVector implements TermFreqVector {
     return field;
   }
 
+  @Override
   public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append('{');
diff --git a/src/java/org/apache/lucene/index/SerialMergeScheduler.java b/src/java/org/apache/lucene/index/SerialMergeScheduler.java
index 22d4886..ece5dce 100644
--- a/src/java/org/apache/lucene/index/SerialMergeScheduler.java
+++ b/src/java/org/apache/lucene/index/SerialMergeScheduler.java
@@ -26,6 +26,7 @@ public class SerialMergeScheduler extends MergeScheduler {
   /** Just do the merges in sequence. We do this
    * "synchronized" so that even if the application is using
    * multiple threads, only one merge may run at a time. */
+  @Override
   synchronized public void merge(IndexWriter writer)
     throws CorruptIndexException, IOException {
 
@@ -37,5 +38,6 @@ public class SerialMergeScheduler extends MergeScheduler {
     }
   }
 
+  @Override
   public void close() {}
 }
diff --git a/src/java/org/apache/lucene/index/SnapshotDeletionPolicy.java b/src/java/org/apache/lucene/index/SnapshotDeletionPolicy.java
index 7da7ac5..3a8cd2e 100644
--- a/src/java/org/apache/lucene/index/SnapshotDeletionPolicy.java
+++ b/src/java/org/apache/lucene/index/SnapshotDeletionPolicy.java
@@ -92,15 +92,19 @@ public class SnapshotDeletionPolicy implements IndexDeletionPolicy {
     MyCommitPoint(IndexCommit cp) {
       this.cp = cp;
     }
+    @Override
     public String getSegmentsFileName() {
       return cp.getSegmentsFileName();
     }
+    @Override
     public Collection<String> getFileNames() throws IOException {
       return cp.getFileNames();
     }
+    @Override
     public Directory getDirectory() {
       return cp.getDirectory();
     }
+    @Override
     public void delete() {
       synchronized(SnapshotDeletionPolicy.this) {
         // Suppress the delete request if this commit point is
@@ -109,15 +113,19 @@ public class SnapshotDeletionPolicy implements IndexDeletionPolicy {
           cp.delete();
       }
     }
+    @Override
     public boolean isDeleted() {
       return cp.isDeleted();
     }
+    @Override
     public long getVersion() {
       return cp.getVersion();
     }
+    @Override
     public long getGeneration() {
       return cp.getGeneration();
     }
+    @Override
     public Map<String,String> getUserData() throws IOException {
       return cp.getUserData();
     }
diff --git a/src/java/org/apache/lucene/index/SortedTermVectorMapper.java b/src/java/org/apache/lucene/index/SortedTermVectorMapper.java
index 52db260..6fccec8 100644
--- a/src/java/org/apache/lucene/index/SortedTermVectorMapper.java
+++ b/src/java/org/apache/lucene/index/SortedTermVectorMapper.java
@@ -60,6 +60,7 @@ public class SortedTermVectorMapper extends TermVectorMapper{
    * @param positions Position information, may be null
    */
   //We need to combine any previous mentions of the term
+  @Override
   public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {
     TermVectorEntry entry =  termToTVE.get(term);
     if (entry == null) {
@@ -108,6 +109,7 @@ public class SortedTermVectorMapper extends TermVectorMapper{
 
   }
 
+  @Override
   public void setExpectations(String field, int numTerms, boolean storeOffsets, boolean storePositions) {
 
     this.storeOffsets = storeOffsets;
diff --git a/src/java/org/apache/lucene/index/StoredFieldsWriter.java b/src/java/org/apache/lucene/index/StoredFieldsWriter.java
index 354558a..a79659e 100644
--- a/src/java/org/apache/lucene/index/StoredFieldsWriter.java
+++ b/src/java/org/apache/lucene/index/StoredFieldsWriter.java
@@ -177,15 +177,18 @@ final class StoredFieldsWriter {
       numStoredFields = 0;
     }
 
+    @Override
     void abort() {
       reset();
       free(this);
     }
 
+    @Override
     public long sizeInBytes() {
       return fdt.sizeInBytes();
     }
 
+    @Override
     public void finish() throws IOException {
       finishDocument(this);
     }
diff --git a/src/java/org/apache/lucene/index/TermBuffer.java b/src/java/org/apache/lucene/index/TermBuffer.java
index 4b180ce..983b6d3 100644
--- a/src/java/org/apache/lucene/index/TermBuffer.java
+++ b/src/java/org/apache/lucene/index/TermBuffer.java
@@ -124,6 +124,7 @@ final class TermBuffer implements Cloneable {
     return term;
   }
 
+  @Override
   protected Object clone() {
     TermBuffer clone = null;
     try {
diff --git a/src/java/org/apache/lucene/index/TermVectorEntry.java b/src/java/org/apache/lucene/index/TermVectorEntry.java
index ee66c6f..ce54a02 100644
--- a/src/java/org/apache/lucene/index/TermVectorEntry.java
+++ b/src/java/org/apache/lucene/index/TermVectorEntry.java
@@ -73,6 +73,7 @@ public class TermVectorEntry {
   }
 
 
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (o == null || getClass() != o.getClass()) return false;
@@ -84,10 +85,12 @@ public class TermVectorEntry {
     return true;
   }
 
+  @Override
   public int hashCode() {
     return (term != null ? term.hashCode() : 0);
   }
 
+  @Override
   public String toString() {
     return "TermVectorEntry{" +
             "field='" + field + '\'' +
diff --git a/src/java/org/apache/lucene/index/TermVectorOffsetInfo.java b/src/java/org/apache/lucene/index/TermVectorOffsetInfo.java
index 76ca387..5deb626 100644
--- a/src/java/org/apache/lucene/index/TermVectorOffsetInfo.java
+++ b/src/java/org/apache/lucene/index/TermVectorOffsetInfo.java
@@ -70,6 +70,7 @@ public class TermVectorOffsetInfo implements Serializable {
    * @param o The comparison Object
    * @return true if both {@link #getStartOffset()} and {@link #getEndOffset()} are the same for both objects.
    */
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (!(o instanceof TermVectorOffsetInfo)) return false;
@@ -82,6 +83,7 @@ public class TermVectorOffsetInfo implements Serializable {
     return true;
   }
 
+  @Override
   public int hashCode() {
     int result;
     result = startOffset;
diff --git a/src/java/org/apache/lucene/index/TermVectorsReader.java b/src/java/org/apache/lucene/index/TermVectorsReader.java
index 21d83e2..ec7fa72 100644
--- a/src/java/org/apache/lucene/index/TermVectorsReader.java
+++ b/src/java/org/apache/lucene/index/TermVectorsReader.java
@@ -520,6 +520,7 @@ class TermVectorsReader implements Cloneable {
     }
   }
 
+  @Override
   protected Object clone() throws CloneNotSupportedException {
     
     final TermVectorsReader clone = (TermVectorsReader) super.clone();
@@ -552,6 +553,7 @@ class ParallelArrayTermVectorMapper extends TermVectorMapper
   private boolean storingPositions;
   private String field;
 
+  @Override
   public void setExpectations(String field, int numTerms, boolean storeOffsets, boolean storePositions) {
     this.field = field;
     terms = new String[numTerms];
@@ -564,6 +566,7 @@ class ParallelArrayTermVectorMapper extends TermVectorMapper
       this.offsets = new TermVectorOffsetInfo[numTerms][];
   }
 
+  @Override
   public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {
     terms[currentPosition] = term;
     termFreqs[currentPosition] = frequency;
diff --git a/src/java/org/apache/lucene/index/TermVectorsTermsWriter.java b/src/java/org/apache/lucene/index/TermVectorsTermsWriter.java
index 674fbc8..e5981e0 100644
--- a/src/java/org/apache/lucene/index/TermVectorsTermsWriter.java
+++ b/src/java/org/apache/lucene/index/TermVectorsTermsWriter.java
@@ -41,16 +41,19 @@ final class TermVectorsTermsWriter extends TermsHashConsumer {
     this.docWriter = docWriter;
   }
 
+  @Override
   public TermsHashConsumerPerThread addThread(TermsHashPerThread termsHashPerThread) {
     return new TermVectorsTermsWriterPerThread(termsHashPerThread, this);
   }
 
+  @Override
   void createPostings(RawPostingList[] postings, int start, int count) {
     final int end = start + count;
     for(int i=start;i<end;i++)
       postings[i] = new PostingList();
   }
 
+  @Override
   synchronized void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {
 
     if (tvx != null) {
@@ -77,6 +80,7 @@ final class TermVectorsTermsWriter extends TermsHashConsumer {
     }
   }
 
+  @Override
   synchronized void closeDocStore(final SegmentWriteState state) throws IOException {
     if (tvx != null) {
       // At least one doc in this run had term vectors
@@ -207,6 +211,7 @@ final class TermVectorsTermsWriter extends TermsHashConsumer {
     return false;
   }
 
+  @Override
   public void abort() {
     if (tvx != null) {
       try {
@@ -252,6 +257,7 @@ final class TermVectorsTermsWriter extends TermsHashConsumer {
       numVectorFields = 0;
     }
 
+    @Override
     void abort() {
       reset();
       free(this);
@@ -267,10 +273,12 @@ final class TermVectorsTermsWriter extends TermsHashConsumer {
       numVectorFields++;
     }
 
+    @Override
     public long sizeInBytes() {
       return tvf.sizeInBytes();
     }
 
+    @Override
     public void finish() throws IOException {
       finishDocument(this);
     }
@@ -282,6 +290,7 @@ final class TermVectorsTermsWriter extends TermsHashConsumer {
     int lastPosition;                               // Last position where this term occurred
   }
 
+  @Override
   int bytesPerPosting() {
     return RawPostingList.BYTES_SIZE + 3 * DocumentsWriter.INT_NUM_BYTE;
   }
diff --git a/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField.java b/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField.java
index 3f14ca6..8c7f9d2 100644
--- a/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField.java
+++ b/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField.java
@@ -49,10 +49,12 @@ final class TermVectorsTermsWriterPerField extends TermsHashConsumerPerField {
     fieldState = termsHashPerField.fieldState;
   }
 
+  @Override
   int getStreamCount() {
     return 2;
   }
 
+  @Override
   boolean start(Fieldable[] fields, int count) {
     doVectors = false;
     doVectorPositions = false;
@@ -97,6 +99,7 @@ final class TermVectorsTermsWriterPerField extends TermsHashConsumerPerField {
    *  are enabled, to write the vectors to
    *  RAMOutputStream, which is then quickly flushed to
    *  * the real term vectors files in the Directory. */
+  @Override
   void finish() throws IOException {
 
     assert docState.testPoint("TermVectorsTermsWriterPerField.finish start");
@@ -194,6 +197,7 @@ final class TermVectorsTermsWriterPerField extends TermsHashConsumerPerField {
     maxNumPostings = 0;
   }
   
+  @Override
   void start(Fieldable f) {
     if (doVectorOffsets) {
       offsetAttribute = fieldState.attributeSource.addAttribute(OffsetAttribute.class);
@@ -202,6 +206,7 @@ final class TermVectorsTermsWriterPerField extends TermsHashConsumerPerField {
     }
   }
 
+  @Override
   void newTerm(RawPostingList p0) {
 
     assert docState.testPoint("TermVectorsTermsWriterPerField.newTerm start");
@@ -225,6 +230,7 @@ final class TermVectorsTermsWriterPerField extends TermsHashConsumerPerField {
     }
   }
 
+  @Override
   void addTerm(RawPostingList p0) {
 
     assert docState.testPoint("TermVectorsTermsWriterPerField.addTerm start");
@@ -247,5 +253,6 @@ final class TermVectorsTermsWriterPerField extends TermsHashConsumerPerField {
     }
   }
 
+  @Override
   void skippingLongTerm() {}
 }
diff --git a/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerThread.java b/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerThread.java
index af85493..e4b06a2 100644
--- a/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerThread.java
+++ b/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerThread.java
@@ -39,6 +39,7 @@ final class TermVectorsTermsWriterPerThread extends TermsHashConsumerPerThread {
   final UnicodeUtil.UTF8Result utf8Results[] = {new UnicodeUtil.UTF8Result(),
                                                 new UnicodeUtil.UTF8Result()};
 
+  @Override
   public void startDocument() {
     assert clearLastVectorFieldName();
     if (doc != null) {
@@ -47,6 +48,7 @@ final class TermVectorsTermsWriterPerThread extends TermsHashConsumerPerThread {
     }
   }
 
+  @Override
   public DocumentsWriter.DocWriter finishDocument() {
     try {
       return doc;
@@ -55,10 +57,12 @@ final class TermVectorsTermsWriterPerThread extends TermsHashConsumerPerThread {
     }
   }
 
+  @Override
   public TermsHashConsumerPerField addField(TermsHashPerField termsHashPerField, FieldInfo fieldInfo) {
     return new TermVectorsTermsWriterPerField(termsHashPerField, this, fieldInfo);
   }
 
+  @Override
   public void abort() {
     if (doc != null) {
       doc.abort();
diff --git a/src/java/org/apache/lucene/index/TermsHash.java b/src/java/org/apache/lucene/index/TermsHash.java
index a70fcb6..c5f6f32 100644
--- a/src/java/org/apache/lucene/index/TermsHash.java
+++ b/src/java/org/apache/lucene/index/TermsHash.java
@@ -68,6 +68,7 @@ final class TermsHash extends InvertedDocConsumer {
     postingsFreeChunk = (int) (DocumentsWriter.BYTE_BLOCK_SIZE / bytesPerPosting);
   }
 
+  @Override
   InvertedDocConsumerPerThread addThread(DocInverterPerThread docInverterPerThread) {
     return new TermsHashPerThread(docInverterPerThread, this, nextTermsHash, null);
   }
@@ -76,11 +77,13 @@ final class TermsHash extends InvertedDocConsumer {
     return new TermsHashPerThread(docInverterPerThread, this, nextTermsHash, primaryPerThread);
   }
 
+  @Override
   void setFieldInfos(FieldInfos fieldInfos) {
     this.fieldInfos = fieldInfos;
     consumer.setFieldInfos(fieldInfos);
   }
 
+  @Override
   synchronized public void abort() {
     consumer.abort();
     if (nextTermsHash != null)
@@ -99,12 +102,14 @@ final class TermsHash extends InvertedDocConsumer {
     }
   }
 
+  @Override
   synchronized void closeDocStore(SegmentWriteState state) throws IOException {
     consumer.closeDocStore(state);
     if (nextTermsHash != null)
       nextTermsHash.closeDocStore(state);
   }
 
+  @Override
   synchronized void flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {
     Map childThreadsAndFields = new HashMap();
     Map nextThreadsAndFields;
@@ -152,6 +157,7 @@ final class TermsHash extends InvertedDocConsumer {
       nextTermsHash.flush(nextThreadsAndFields, state);
   }
 
+  @Override
   synchronized public boolean freeRAM() {
 
     if (!trackAllocations)
diff --git a/src/java/org/apache/lucene/index/TermsHashPerField.java b/src/java/org/apache/lucene/index/TermsHashPerField.java
index 4534938..2a71f1d 100644
--- a/src/java/org/apache/lucene/index/TermsHashPerField.java
+++ b/src/java/org/apache/lucene/index/TermsHashPerField.java
@@ -100,6 +100,7 @@ final class TermsHashPerField extends InvertedDocConsumerPerField {
       nextPerField.reset();
   }
 
+  @Override
   synchronized public void abort() {
     reset();
     if (nextPerField != null)
@@ -248,6 +249,7 @@ final class TermsHashPerField extends InvertedDocConsumerPerField {
   private boolean doCall;
   private boolean doNextCall;
 
+  @Override
   void start(Fieldable f) {
     termAtt = fieldState.attributeSource.addAttribute(TermAttribute.class);
     consumer.start(f);
@@ -256,6 +258,7 @@ final class TermsHashPerField extends InvertedDocConsumerPerField {
     }
   }
   
+  @Override
   boolean start(Fieldable[] fields, int count) throws IOException {
     doCall = consumer.start(fields, count);
     if (nextPerField != null)
@@ -339,6 +342,7 @@ final class TermsHashPerField extends InvertedDocConsumerPerField {
   }
 
   // Primary entry point (for first TermsHash)
+  @Override
   void add() throws IOException {
 
     assert !postingsCompacted;
@@ -505,6 +509,7 @@ final class TermsHashPerField extends InvertedDocConsumerPerField {
     writeByte(stream, (byte) i);
   }
 
+  @Override
   void finish() throws IOException {
     consumer.finish();
     if (nextPerField != null)
diff --git a/src/java/org/apache/lucene/index/TermsHashPerThread.java b/src/java/org/apache/lucene/index/TermsHashPerThread.java
index 03a0822..164ffc2 100644
--- a/src/java/org/apache/lucene/index/TermsHashPerThread.java
+++ b/src/java/org/apache/lucene/index/TermsHashPerThread.java
@@ -58,10 +58,12 @@ final class TermsHashPerThread extends InvertedDocConsumerPerThread {
       nextPerThread = null;
   }
 
+  @Override
   InvertedDocConsumerPerField addField(DocInverterPerField docInverterPerField, final FieldInfo fieldInfo) {
     return new TermsHashPerField(docInverterPerField, this, nextPerThread, fieldInfo);
   }
 
+  @Override
   synchronized public void abort() {
     reset(true);
     consumer.abort();
@@ -83,12 +85,14 @@ final class TermsHashPerThread extends InvertedDocConsumerPerThread {
     return true;
   }
 
+  @Override
   public void startDocument() throws IOException {
     consumer.startDocument();
     if (nextPerThread != null)
       nextPerThread.consumer.startDocument();
   }
 
+  @Override
   public DocumentsWriter.DocWriter finishDocument() throws IOException {
     final DocumentsWriter.DocWriter doc = consumer.finishDocument();
 
diff --git a/src/java/org/apache/lucene/messages/MessageImpl.java b/src/java/org/apache/lucene/messages/MessageImpl.java
index cf9e520..7cb525e 100644
--- a/src/java/org/apache/lucene/messages/MessageImpl.java
+++ b/src/java/org/apache/lucene/messages/MessageImpl.java
@@ -57,6 +57,7 @@ public class MessageImpl implements Message {
     return NLS.getLocalizedMessage(getKey(), locale, getArguments());
   }
 
+  @Override
   public String toString() {
     Object[] args = getArguments();
     String argsString = "";
diff --git a/src/java/org/apache/lucene/search/BooleanClause.java b/src/java/org/apache/lucene/search/BooleanClause.java
index 1c0c4dd..6212a37 100644
--- a/src/java/org/apache/lucene/search/BooleanClause.java
+++ b/src/java/org/apache/lucene/search/BooleanClause.java
@@ -24,7 +24,7 @@ public class BooleanClause implements java.io.Serializable {
   public static enum Occur {
 
     /** Use this operator for clauses that <i>must</i> appear in the matching documents. */
-    MUST     { public String toString() { return "+"; } },
+    MUST     { @Override public String toString() { return "+"; } },
 
     /** Use this operator for clauses that <i>should</i> appear in the 
      * matching documents. For a BooleanQuery with no <code>MUST</code> 
@@ -32,12 +32,12 @@ public class BooleanClause implements java.io.Serializable {
      * for the BooleanQuery to match.
      * @see BooleanQuery#setMinimumNumberShouldMatch
      */
-    SHOULD   { public String toString() { return "";  } },
+    SHOULD   { @Override public String toString() { return "";  } },
 
     /** Use this operator for clauses that <i>must not</i> appear in the matching documents.
      * Note that it is not possible to search for queries that only consist
      * of a <code>MUST_NOT</code> clause. */
-    MUST_NOT { public String toString() { return "-"; } };
+    MUST_NOT { @Override public String toString() { return "-"; } };
 
   }
 
@@ -84,6 +84,7 @@ public class BooleanClause implements java.io.Serializable {
 
 
   /** Returns true if <code>o</code> is equal to this. */
+  @Override
   public boolean equals(Object o) {
     if (o == null || !(o instanceof BooleanClause))
       return false;
@@ -93,11 +94,13 @@ public class BooleanClause implements java.io.Serializable {
   }
 
   /** Returns a hash code value for this object.*/
+  @Override
   public int hashCode() {
     return query.hashCode() ^ (Occur.MUST == occur?1:0) ^ (Occur.MUST_NOT == occur?2:0);
   }
 
 
+  @Override
   public String toString() {
     return occur.toString() + query.toString();
   }
diff --git a/src/java/org/apache/lucene/search/BooleanQuery.java b/src/java/org/apache/lucene/search/BooleanQuery.java
index 1874886..5c7fe18 100644
--- a/src/java/org/apache/lucene/search/BooleanQuery.java
+++ b/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -40,6 +40,7 @@ public class BooleanQuery extends Query implements Iterable<BooleanClause> {
    */
   public static class TooManyClauses extends RuntimeException {
     public TooManyClauses() {}
+    @Override
     public String getMessage() {
       return "maxClauseCount is set to " + maxClauseCount;
     }
@@ -89,10 +90,12 @@ public class BooleanQuery extends Query implements Iterable<BooleanClause> {
 
   // Implement coord disabling.
   // Inherit javadoc.
+  @Override
   public Similarity getSimilarity(Searcher searcher) {
     Similarity result = super.getSimilarity(searcher);
     if (disableCoord) {                           // disable coord as requested
       result = new SimilarityDelegator(result) {
+          @Override
           public float coord(int overlap, int maxOverlap) {
             return 1.0f;
           }
diff --git a/src/java/org/apache/lucene/search/CachingSpanFilter.java b/src/java/org/apache/lucene/search/CachingSpanFilter.java
index a2bbb01..9dda4c6 100644
--- a/src/java/org/apache/lucene/search/CachingSpanFilter.java
+++ b/src/java/org/apache/lucene/search/CachingSpanFilter.java
@@ -42,6 +42,7 @@ public class CachingSpanFilter extends SpanFilter {
     this.filter = filter;
   }
 
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
     SpanFilterResult result = getCachedResult(reader);
     return result != null ? result.getDocIdSet() : null;
@@ -64,19 +65,23 @@ public class CachingSpanFilter extends SpanFilter {
   }
 
 
+  @Override
   public SpanFilterResult bitSpans(IndexReader reader) throws IOException {
     return getCachedResult(reader);
   }
 
+  @Override
   public String toString() {
     return "CachingSpanFilter("+filter+")";
   }
 
+  @Override
   public boolean equals(Object o) {
     if (!(o instanceof CachingSpanFilter)) return false;
     return this.filter.equals(((CachingSpanFilter)o).filter);
   }
 
+  @Override
   public int hashCode() {
     return filter.hashCode() ^ 0x1117BF25;
   }
diff --git a/src/java/org/apache/lucene/search/CachingWrapperFilter.java b/src/java/org/apache/lucene/search/CachingWrapperFilter.java
index 25f6fa7..c341f33 100644
--- a/src/java/org/apache/lucene/search/CachingWrapperFilter.java
+++ b/src/java/org/apache/lucene/search/CachingWrapperFilter.java
@@ -61,6 +61,7 @@ public class CachingWrapperFilter extends Filter {
     }
   }
   
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
     if (cache == null) {
       cache = new WeakHashMap<IndexReader, DocIdSet>();
@@ -86,15 +87,18 @@ public class CachingWrapperFilter extends Filter {
     return docIdSet;
   }
 
+  @Override
   public String toString() {
     return "CachingWrapperFilter("+filter+")";
   }
 
+  @Override
   public boolean equals(Object o) {
     if (!(o instanceof CachingWrapperFilter)) return false;
     return this.filter.equals(((CachingWrapperFilter)o).filter);
   }
 
+  @Override
   public int hashCode() {
     return filter.hashCode() ^ 0x1117BF25;  
   }
diff --git a/src/java/org/apache/lucene/search/ComplexExplanation.java b/src/java/org/apache/lucene/search/ComplexExplanation.java
index 1acb768..d2eceaf 100644
--- a/src/java/org/apache/lucene/search/ComplexExplanation.java
+++ b/src/java/org/apache/lucene/search/ComplexExplanation.java
@@ -52,11 +52,13 @@ public class ComplexExplanation extends Explanation {
    * </p>
    * @see #getMatch
    */
+  @Override
   public boolean isMatch() {
     Boolean m = getMatch();
     return (null != m ? m.booleanValue() : super.isMatch());
   }
 
+  @Override
   protected String getSummary() {
     if (null == getMatch())
       return super.getSummary();
diff --git a/src/java/org/apache/lucene/search/DefaultSimilarity.java b/src/java/org/apache/lucene/search/DefaultSimilarity.java
index ce6227a..6bcf4e0 100644
--- a/src/java/org/apache/lucene/search/DefaultSimilarity.java
+++ b/src/java/org/apache/lucene/search/DefaultSimilarity.java
@@ -31,6 +31,7 @@ public class DefaultSimilarity extends Similarity {
    *
    *  <p><b>WARNING</b>: This API is new and experimental, and may suddenly
    *  change.</p> */
+  @Override
   public float computeNorm(String field, FieldInvertState state) {
     final int numTerms;
     if (discountOverlaps)
@@ -41,31 +42,37 @@ public class DefaultSimilarity extends Similarity {
   }
   
   /** Implemented as <code>1/sqrt(numTerms)</code>. */
+  @Override
   public float lengthNorm(String fieldName, int numTerms) {
     return (float)(1.0 / Math.sqrt(numTerms));
   }
   
   /** Implemented as <code>1/sqrt(sumOfSquaredWeights)</code>. */
+  @Override
   public float queryNorm(float sumOfSquaredWeights) {
     return (float)(1.0 / Math.sqrt(sumOfSquaredWeights));
   }
 
   /** Implemented as <code>sqrt(freq)</code>. */
+  @Override
   public float tf(float freq) {
     return (float)Math.sqrt(freq);
   }
     
   /** Implemented as <code>1 / (distance + 1)</code>. */
+  @Override
   public float sloppyFreq(int distance) {
     return 1.0f / (distance + 1);
   }
     
   /** Implemented as <code>log(numDocs/(docFreq+1)) + 1</code>. */
+  @Override
   public float idf(int docFreq, int numDocs) {
     return (float)(Math.log(numDocs/(double)(docFreq+1)) + 1.0);
   }
     
   /** Implemented as <code>overlap / maxOverlap</code>. */
+  @Override
   public float coord(int overlap, int maxOverlap) {
     return overlap / (float)maxOverlap;
   }
diff --git a/src/java/org/apache/lucene/search/DocIdSet.java b/src/java/org/apache/lucene/search/DocIdSet.java
index 26d71dc..03f6c64 100644
--- a/src/java/org/apache/lucene/search/DocIdSet.java
+++ b/src/java/org/apache/lucene/search/DocIdSet.java
@@ -29,8 +29,11 @@ public abstract class DocIdSet {
   public static final DocIdSet EMPTY_DOCIDSET = new DocIdSet() {
     
     private final DocIdSetIterator iterator = new DocIdSetIterator() {
+      @Override
       public int advance(int target) throws IOException { return NO_MORE_DOCS; }
+      @Override
       public int docID() { return NO_MORE_DOCS; }
+      @Override
       public int nextDoc() throws IOException { return NO_MORE_DOCS; }
     };
     
diff --git a/src/java/org/apache/lucene/search/ExactPhraseScorer.java b/src/java/org/apache/lucene/search/ExactPhraseScorer.java
index 04e3ffa..9d56d95 100644
--- a/src/java/org/apache/lucene/search/ExactPhraseScorer.java
+++ b/src/java/org/apache/lucene/search/ExactPhraseScorer.java
@@ -27,6 +27,7 @@ final class ExactPhraseScorer extends PhraseScorer {
     super(weight, tps, offsets, similarity, norms);
   }
 
+  @Override
   protected final float phraseFreq() throws IOException {
     // sort list with pq
     pq.clear();
diff --git a/src/java/org/apache/lucene/search/Explanation.java b/src/java/org/apache/lucene/search/Explanation.java
index 6208f63..6798c1c 100644
--- a/src/java/org/apache/lucene/search/Explanation.java
+++ b/src/java/org/apache/lucene/search/Explanation.java
@@ -82,6 +82,7 @@ public class Explanation implements java.io.Serializable {
   }
 
   /** Render an explanation as text. */
+  @Override
   public String toString() {
     return toString(0);
   }
diff --git a/src/java/org/apache/lucene/search/FieldCache.java b/src/java/org/apache/lucene/search/FieldCache.java
index 6c942f5..7bdf7cf 100644
--- a/src/java/org/apache/lucene/search/FieldCache.java
+++ b/src/java/org/apache/lucene/search/FieldCache.java
@@ -154,6 +154,7 @@ public interface FieldCache {
     protected Object readResolve() {
       return DEFAULT_BYTE_PARSER;
     }
+    @Override
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_BYTE_PARSER"; 
     }
@@ -167,6 +168,7 @@ public interface FieldCache {
     protected Object readResolve() {
       return DEFAULT_SHORT_PARSER;
     }
+    @Override
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_SHORT_PARSER"; 
     }
@@ -180,6 +182,7 @@ public interface FieldCache {
     protected Object readResolve() {
       return DEFAULT_INT_PARSER;
     }
+    @Override
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_INT_PARSER"; 
     }
@@ -193,6 +196,7 @@ public interface FieldCache {
     protected Object readResolve() {
       return DEFAULT_FLOAT_PARSER;
     }
+    @Override
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_FLOAT_PARSER"; 
     }
@@ -206,6 +210,7 @@ public interface FieldCache {
     protected Object readResolve() {
       return DEFAULT_LONG_PARSER;
     }
+    @Override
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_LONG_PARSER"; 
     }
@@ -219,6 +224,7 @@ public interface FieldCache {
     protected Object readResolve() {
       return DEFAULT_DOUBLE_PARSER;
     }
+    @Override
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_DOUBLE_PARSER"; 
     }
@@ -238,6 +244,7 @@ public interface FieldCache {
     protected Object readResolve() {
       return NUMERIC_UTILS_INT_PARSER;
     }
+    @Override
     public String toString() { 
       return FieldCache.class.getName()+".NUMERIC_UTILS_INT_PARSER"; 
     }
@@ -257,6 +264,7 @@ public interface FieldCache {
     protected Object readResolve() {
       return NUMERIC_UTILS_FLOAT_PARSER;
     }
+    @Override
     public String toString() { 
       return FieldCache.class.getName()+".NUMERIC_UTILS_FLOAT_PARSER"; 
     }
@@ -276,6 +284,7 @@ public interface FieldCache {
     protected Object readResolve() {
       return NUMERIC_UTILS_LONG_PARSER;
     }
+    @Override
     public String toString() { 
       return FieldCache.class.getName()+".NUMERIC_UTILS_LONG_PARSER"; 
     }
@@ -295,6 +304,7 @@ public interface FieldCache {
     protected Object readResolve() {
       return NUMERIC_UTILS_DOUBLE_PARSER;
     }
+    @Override
     public String toString() { 
       return FieldCache.class.getName()+".NUMERIC_UTILS_DOUBLE_PARSER"; 
     }
@@ -528,6 +538,7 @@ public interface FieldCache {
     }
     
     
+    @Override
     public String toString() {
       StringBuilder b = new StringBuilder();
       b.append("'").append(getReaderKey()).append("'=>");
diff --git a/src/java/org/apache/lucene/search/FieldCacheImpl.java b/src/java/org/apache/lucene/search/FieldCacheImpl.java
index 088e645..c669c52 100644
--- a/src/java/org/apache/lucene/search/FieldCacheImpl.java
+++ b/src/java/org/apache/lucene/search/FieldCacheImpl.java
@@ -107,10 +107,15 @@ class FieldCacheImpl implements FieldCache {
 //         }
 
     }
+    @Override
     public Object getReaderKey() { return readerKey; }
+    @Override
     public String getFieldName() { return fieldName; }
+    @Override
     public Class<?> getCacheType() { return cacheType; }
+    @Override
     public Object getCustom() { return custom; }
+    @Override
     public Object getValue() { return value; }
   }
 
@@ -212,6 +217,7 @@ class FieldCacheImpl implements FieldCache {
     }
 
     /** Two of these are equal iff they reference the same field and type. */
+    @Override
     public boolean equals (Object o) {
       if (o instanceof Entry) {
         Entry other = (Entry) o;
@@ -227,6 +233,7 @@ class FieldCacheImpl implements FieldCache {
     }
 
     /** Composes a hashcode based on the field and type. */
+    @Override
     public int hashCode() {
       return field.hashCode() ^ (custom==null ? 0 : custom.hashCode());
     }
@@ -247,6 +254,7 @@ class FieldCacheImpl implements FieldCache {
     ByteCache(FieldCache wrapper) {
       super(wrapper);
     }
+    @Override
     protected Object createValue(IndexReader reader, Entry entryKey)
         throws IOException {
       Entry entry = entryKey;
@@ -293,6 +301,7 @@ class FieldCacheImpl implements FieldCache {
       super(wrapper);
     }
 
+    @Override
     protected Object createValue(IndexReader reader, Entry entryKey)
         throws IOException {
       Entry entry =  entryKey;
@@ -339,6 +348,7 @@ class FieldCacheImpl implements FieldCache {
       super(wrapper);
     }
 
+    @Override
     protected Object createValue(IndexReader reader, Entry entryKey)
         throws IOException {
       Entry entry = entryKey;
@@ -396,6 +406,7 @@ class FieldCacheImpl implements FieldCache {
       super(wrapper);
     }
 
+    @Override
     protected Object createValue(IndexReader reader, Entry entryKey)
         throws IOException {
       Entry entry = entryKey;
@@ -450,6 +461,7 @@ class FieldCacheImpl implements FieldCache {
       super(wrapper);
     }
 
+    @Override
     protected Object createValue(IndexReader reader, Entry entry)
         throws IOException {
       String field = entry.field;
@@ -504,6 +516,7 @@ class FieldCacheImpl implements FieldCache {
       super(wrapper);
     }
 
+    @Override
     protected Object createValue(IndexReader reader, Entry entryKey)
         throws IOException {
       Entry entry = entryKey;
@@ -553,6 +566,7 @@ class FieldCacheImpl implements FieldCache {
       super(wrapper);
     }
 
+    @Override
     protected Object createValue(IndexReader reader, Entry entryKey)
         throws IOException {
       String field = StringHelper.intern(entryKey.field);
@@ -588,6 +602,7 @@ class FieldCacheImpl implements FieldCache {
       super(wrapper);
     }
 
+    @Override
     protected Object createValue(IndexReader reader, Entry entryKey)
         throws IOException {
       String field = StringHelper.intern(entryKey.field);
diff --git a/src/java/org/apache/lucene/search/FieldCacheRangeFilter.java b/src/java/org/apache/lucene/search/FieldCacheRangeFilter.java
index 8d26c79..067f881 100644
--- a/src/java/org/apache/lucene/search/FieldCacheRangeFilter.java
+++ b/src/java/org/apache/lucene/search/FieldCacheRangeFilter.java
@@ -70,6 +70,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
   }
   
   /** This method is implemented for each data type */
+  @Override
   public abstract DocIdSet getDocIdSet(IndexReader reader) throws IOException;
 
   /**
@@ -79,6 +80,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
    */
   public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {
     return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {
+      @Override
       public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
         final FieldCache.StringIndex fcsi = FieldCache.DEFAULT.getStringIndex(reader, field);
         final int lowerPoint = fcsi.binarySearchLookup(lowerVal);
@@ -120,6 +122,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
         // for this DocIdSet, we never need to use TermDocs,
         // because deleted docs have an order of 0 (null entry in StringIndex)
         return new FieldCacheDocIdSet(reader, false) {
+          @Override
           final boolean matchDoc(int doc) {
             return fcsi.order[doc] >= inclusiveLowerPoint && fcsi.order[doc] <= inclusiveUpperPoint;
           }
@@ -144,6 +147,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
    */
   public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {
     return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {
+      @Override
       public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
         final byte inclusiveLowerPoint, inclusiveUpperPoint;
         if (lowerVal != null) {
@@ -169,6 +173,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
         final byte[] values = FieldCache.DEFAULT.getBytes(reader, field, (FieldCache.ByteParser) parser);
         // we only request the usage of termDocs, if the range contains 0
         return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {
+          @Override
           boolean matchDoc(int doc) {
             return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;
           }
@@ -193,6 +198,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
    */
   public static FieldCacheRangeFilter<Short> newShortRange(String field, FieldCache.ShortParser parser, Short lowerVal, Short upperVal, boolean includeLower, boolean includeUpper) {
     return new FieldCacheRangeFilter<Short>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {
+      @Override
       public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
         final short inclusiveLowerPoint, inclusiveUpperPoint;
         if (lowerVal != null) {
@@ -218,6 +224,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
         final short[] values = FieldCache.DEFAULT.getShorts(reader, field, (FieldCache.ShortParser) parser);
         // we only request the usage of termDocs, if the range contains 0
         return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {
+          @Override
           boolean matchDoc(int doc) {
             return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;
           }
@@ -242,6 +249,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
    */
   public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {
     return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {
+      @Override
       public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
         final int inclusiveLowerPoint, inclusiveUpperPoint;
         if (lowerVal != null) {
@@ -267,6 +275,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
         final int[] values = FieldCache.DEFAULT.getInts(reader, field, (FieldCache.IntParser) parser);
         // we only request the usage of termDocs, if the range contains 0
         return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {
+          @Override
           boolean matchDoc(int doc) {
             return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;
           }
@@ -291,6 +300,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
    */
   public static FieldCacheRangeFilter<Long> newLongRange(String field, FieldCache.LongParser parser, Long lowerVal, Long upperVal, boolean includeLower, boolean includeUpper) {
     return new FieldCacheRangeFilter<Long>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {
+      @Override
       public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
         final long inclusiveLowerPoint, inclusiveUpperPoint;
         if (lowerVal != null) {
@@ -316,6 +326,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
         final long[] values = FieldCache.DEFAULT.getLongs(reader, field, (FieldCache.LongParser) parser);
         // we only request the usage of termDocs, if the range contains 0
         return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0L && inclusiveUpperPoint >= 0L)) {
+          @Override
           boolean matchDoc(int doc) {
             return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;
           }
@@ -340,6 +351,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
    */
   public static FieldCacheRangeFilter<Float> newFloatRange(String field, FieldCache.FloatParser parser, Float lowerVal, Float upperVal, boolean includeLower, boolean includeUpper) {
     return new FieldCacheRangeFilter<Float>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {
+      @Override
       public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
         // we transform the floating point numbers to sortable integers
         // using NumericUtils to easier find the next bigger/lower value
@@ -369,6 +381,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
         final float[] values = FieldCache.DEFAULT.getFloats(reader, field, (FieldCache.FloatParser) parser);
         // we only request the usage of termDocs, if the range contains 0
         return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0.0f && inclusiveUpperPoint >= 0.0f)) {
+          @Override
           boolean matchDoc(int doc) {
             return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;
           }
@@ -393,6 +406,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
    */
   public static FieldCacheRangeFilter<Double> newDoubleRange(String field, FieldCache.DoubleParser parser, Double lowerVal, Double upperVal, boolean includeLower, boolean includeUpper) {
     return new FieldCacheRangeFilter<Double>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {
+      @Override
       public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
         // we transform the floating point numbers to sortable integers
         // using NumericUtils to easier find the next bigger/lower value
@@ -422,6 +436,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
         final double[] values = FieldCache.DEFAULT.getDoubles(reader, field, (FieldCache.DoubleParser) parser);
         // we only request the usage of termDocs, if the range contains 0
         return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0.0 && inclusiveUpperPoint >= 0.0)) {
+          @Override
           boolean matchDoc(int doc) {
             return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;
           }
@@ -430,6 +445,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
     };
   }
   
+  @Override
   public final String toString() {
     final StringBuilder sb = new StringBuilder(field).append(":");
     return sb.append(includeLower ? '[' : '{')
@@ -440,6 +456,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
       .toString();
   }
 
+  @Override
   public final boolean equals(Object o) {
     if (this == o) return true;
     if (!(o instanceof FieldCacheRangeFilter)) return false;
@@ -455,6 +472,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
     return true;
   }
   
+  @Override
   public final int hashCode() {
     int h = field.hashCode();
     h ^= (lowerVal != null) ? lowerVal.hashCode() : 550356204;
@@ -516,10 +534,12 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
         return new DocIdSetIterator() {
           private int doc = -1;
           
+          @Override
           public int docID() {
             return doc;
           }
           
+          @Override
           public int nextDoc() throws IOException {
             do {
               if (!termDocs.next())
@@ -528,6 +548,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
             return doc;
           }
           
+          @Override
           public int advance(int target) throws IOException {
             if (!termDocs.skipTo(target))
               return doc = NO_MORE_DOCS;
@@ -544,10 +565,12 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
         return new DocIdSetIterator() {
           private int doc = -1;
           
+          @Override
           public int docID() {
             return doc;
           }
           
+          @Override
           public int nextDoc() {
             try {
               do {
@@ -559,6 +582,7 @@ public abstract class FieldCacheRangeFilter<T> extends Filter {
             }
           }
           
+          @Override
           public int advance(int target) {
             try {
               doc = target;
diff --git a/src/java/org/apache/lucene/search/FieldCacheTermsFilter.java b/src/java/org/apache/lucene/search/FieldCacheTermsFilter.java
index bc403ee..cfd6e40 100644
--- a/src/java/org/apache/lucene/search/FieldCacheTermsFilter.java
+++ b/src/java/org/apache/lucene/search/FieldCacheTermsFilter.java
@@ -106,6 +106,7 @@ public class FieldCacheTermsFilter extends Filter {
     return FieldCache.DEFAULT;
   }
 
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
     return new FieldCacheTermsFilterDocIdSet(getFieldCache().getStringIndex(reader, field));
   }
@@ -140,10 +141,12 @@ public class FieldCacheTermsFilter extends Filter {
     protected class FieldCacheTermsFilterDocIdSetIterator extends DocIdSetIterator {
       private int doc = -1;
 
+      @Override
       public int docID() {
         return doc;
       }
 
+      @Override
       public int nextDoc() {
         try {
           while (!openBitSet.fastGet(fcsi.order[++doc])) {}
@@ -153,6 +156,7 @@ public class FieldCacheTermsFilter extends Filter {
         return doc;
       }
 
+      @Override
       public int advance(int target) {
         try {
           doc = target;
diff --git a/src/java/org/apache/lucene/search/FieldComparator.java b/src/java/org/apache/lucene/search/FieldComparator.java
index 9c98844..880f4f3 100644
--- a/src/java/org/apache/lucene/search/FieldComparator.java
+++ b/src/java/org/apache/lucene/search/FieldComparator.java
@@ -178,26 +178,32 @@ public abstract class FieldComparator {
       this.parser = (ByteParser) parser;
     }
 
+    @Override
     public int compare(int slot1, int slot2) {
       return values[slot1] - values[slot2];
     }
 
+    @Override
     public int compareBottom(int doc) {
       return bottom - currentReaderValues[doc];
     }
 
+    @Override
     public void copy(int slot, int doc) {
       values[slot] = currentReaderValues[doc];
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) throws IOException {
       currentReaderValues = FieldCache.DEFAULT.getBytes(reader, field, parser);
     }
     
+    @Override
     public void setBottom(final int bottom) {
       this.bottom = values[bottom];
     }
 
+    @Override
     public Comparable value(int slot) {
       return Byte.valueOf(values[slot]);
     }
@@ -213,20 +219,24 @@ public abstract class FieldComparator {
       docIDs = new int[numHits];
     }
 
+    @Override
     public int compare(int slot1, int slot2) {
       // No overflow risk because docIDs are non-negative
       return docIDs[slot1] - docIDs[slot2];
     }
 
+    @Override
     public int compareBottom(int doc) {
       // No overflow risk because docIDs are non-negative
       return bottom - (docBase + doc);
     }
 
+    @Override
     public void copy(int slot, int doc) {
       docIDs[slot] = docBase + doc;
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) {
       // TODO: can we "map" our docIDs to the current
       // reader? saves having to then subtract on every
@@ -234,10 +244,12 @@ public abstract class FieldComparator {
       this.docBase = docBase;
     }
     
+    @Override
     public void setBottom(final int bottom) {
       this.bottom = docIDs[bottom];
     }
 
+    @Override
     public Comparable value(int slot) {
       return Integer.valueOf(docIDs[slot]);
     }
@@ -258,6 +270,7 @@ public abstract class FieldComparator {
       this.parser = (DoubleParser) parser;
     }
 
+    @Override
     public int compare(int slot1, int slot2) {
       final double v1 = values[slot1];
       final double v2 = values[slot2];
@@ -270,6 +283,7 @@ public abstract class FieldComparator {
       }
     }
 
+    @Override
     public int compareBottom(int doc) {
       final double v2 = currentReaderValues[doc];
       if (bottom > v2) {
@@ -281,18 +295,22 @@ public abstract class FieldComparator {
       }
     }
 
+    @Override
     public void copy(int slot, int doc) {
       values[slot] = currentReaderValues[doc];
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) throws IOException {
       currentReaderValues = FieldCache.DEFAULT.getDoubles(reader, field, parser);
     }
     
+    @Override
     public void setBottom(final int bottom) {
       this.bottom = values[bottom];
     }
 
+    @Override
     public Comparable value(int slot) {
       return Double.valueOf(values[slot]);
     }
@@ -313,6 +331,7 @@ public abstract class FieldComparator {
       this.parser = (FloatParser) parser;
     }
 
+    @Override
     public int compare(int slot1, int slot2) {
       // TODO: are there sneaky non-branch ways to compute
       // sign of float?
@@ -327,6 +346,7 @@ public abstract class FieldComparator {
       }
     }
 
+    @Override
     public int compareBottom(int doc) {
       // TODO: are there sneaky non-branch ways to compute
       // sign of float?
@@ -340,18 +360,22 @@ public abstract class FieldComparator {
       }
     }
 
+    @Override
     public void copy(int slot, int doc) {
       values[slot] = currentReaderValues[doc];
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) throws IOException {
       currentReaderValues = FieldCache.DEFAULT.getFloats(reader, field, parser);
     }
     
+    @Override
     public void setBottom(final int bottom) {
       this.bottom = values[bottom];
     }
 
+    @Override
     public Comparable value(int slot) {
       return Float.valueOf(values[slot]);
     }
@@ -372,6 +396,7 @@ public abstract class FieldComparator {
       this.parser = (IntParser) parser;
     }
 
+    @Override
     public int compare(int slot1, int slot2) {
       // TODO: there are sneaky non-branch ways to compute
       // -1/+1/0 sign
@@ -388,6 +413,7 @@ public abstract class FieldComparator {
       }
     }
 
+    @Override
     public int compareBottom(int doc) {
       // TODO: there are sneaky non-branch ways to compute
       // -1/+1/0 sign
@@ -403,18 +429,22 @@ public abstract class FieldComparator {
       }
     }
 
+    @Override
     public void copy(int slot, int doc) {
       values[slot] = currentReaderValues[doc];
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) throws IOException {
       currentReaderValues = FieldCache.DEFAULT.getInts(reader, field, parser);
     }
     
+    @Override
     public void setBottom(final int bottom) {
       this.bottom = values[bottom];
     }
 
+    @Override
     public Comparable value(int slot) {
       return Integer.valueOf(values[slot]);
     }
@@ -435,6 +465,7 @@ public abstract class FieldComparator {
       this.parser = (LongParser) parser;
     }
 
+    @Override
     public int compare(int slot1, int slot2) {
       // TODO: there are sneaky non-branch ways to compute
       // -1/+1/0 sign
@@ -449,6 +480,7 @@ public abstract class FieldComparator {
       }
     }
 
+    @Override
     public int compareBottom(int doc) {
       // TODO: there are sneaky non-branch ways to compute
       // -1/+1/0 sign
@@ -462,18 +494,22 @@ public abstract class FieldComparator {
       }
     }
 
+    @Override
     public void copy(int slot, int doc) {
       values[slot] = currentReaderValues[doc];
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) throws IOException {
       currentReaderValues = FieldCache.DEFAULT.getLongs(reader, field, parser);
     }
     
+    @Override
     public void setBottom(final int bottom) {
       this.bottom = values[bottom];
     }
 
+    @Override
     public Comparable value(int slot) {
       return Long.valueOf(values[slot]);
     }
@@ -494,34 +530,41 @@ public abstract class FieldComparator {
       scores = new float[numHits];
     }
 
+    @Override
     public int compare(int slot1, int slot2) {
       final float score1 = scores[slot1];
       final float score2 = scores[slot2];
       return score1 > score2 ? -1 : (score1 < score2 ? 1 : 0);
     }
 
+    @Override
     public int compareBottom(int doc) throws IOException {
       float score = scorer.score();
       return bottom > score ? -1 : (bottom < score ? 1 : 0);
     }
 
+    @Override
     public void copy(int slot, int doc) throws IOException {
       scores[slot] = scorer.score();
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) {
     }
     
+    @Override
     public void setBottom(final int bottom) {
       this.bottom = scores[bottom];
     }
 
+    @Override
     public void setScorer(Scorer scorer) {
       // wrap with a ScoreCachingWrappingScorer so that successive calls to
       // score() will not incur score computation over and over again.
       this.scorer = new ScoreCachingWrappingScorer(scorer);
     }
     
+    @Override
     public Comparable value(int slot) {
       return Float.valueOf(scores[slot]);
     }
@@ -542,26 +585,32 @@ public abstract class FieldComparator {
       this.parser = (ShortParser) parser;
     }
 
+    @Override
     public int compare(int slot1, int slot2) {
       return values[slot1] - values[slot2];
     }
 
+    @Override
     public int compareBottom(int doc) {
       return bottom - currentReaderValues[doc];
     }
 
+    @Override
     public void copy(int slot, int doc) {
       values[slot] = currentReaderValues[doc];
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) throws IOException {
       currentReaderValues = FieldCache.DEFAULT.getShorts(reader, field, parser);
     }
     
+    @Override
     public void setBottom(final int bottom) {
       this.bottom = values[bottom];
     }
 
+    @Override
     public Comparable value(int slot) {
       return Short.valueOf(values[slot]);
     }
@@ -583,6 +632,7 @@ public abstract class FieldComparator {
       collator = Collator.getInstance(locale);
     }
 
+    @Override
     public int compare(int slot1, int slot2) {
       final String val1 = values[slot1];
       final String val2 = values[slot2];
@@ -597,6 +647,7 @@ public abstract class FieldComparator {
       return collator.compare(val1, val2);
     }
 
+    @Override
     public int compareBottom(int doc) {
       final String val2 = currentReaderValues[doc];
       if (bottom == null) {
@@ -610,18 +661,22 @@ public abstract class FieldComparator {
       return collator.compare(bottom, val2);
     }
 
+    @Override
     public void copy(int slot, int doc) {
       values[slot] = currentReaderValues[doc];
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) throws IOException {
       currentReaderValues = FieldCache.DEFAULT.getStrings(reader, field);
     }
     
+    @Override
     public void setBottom(final int bottom) {
       this.bottom = values[bottom];
     }
 
+    @Override
     public Comparable value(int slot) {
       return values[slot];
     }
@@ -662,6 +717,7 @@ public abstract class FieldComparator {
       this.field = field;
     }
 
+    @Override
     public int compare(int slot1, int slot2) {
       if (readerGen[slot1] == readerGen[slot2]) {
         int cmp = ords[slot1] - ords[slot2];
@@ -683,6 +739,7 @@ public abstract class FieldComparator {
       return val1.compareTo(val2);
     }
 
+    @Override
     public int compareBottom(int doc) {
       assert bottomSlot != -1;
       int order = this.order[doc];
@@ -734,6 +791,7 @@ public abstract class FieldComparator {
       ords[slot] = index;
     }
 
+    @Override
     public void copy(int slot, int doc) {
       final int ord = order[doc];
       ords[slot] = ord;
@@ -742,6 +800,7 @@ public abstract class FieldComparator {
       readerGen[slot] = currentReaderGen;
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) throws IOException {
       StringIndex currentReaderValues = FieldCache.DEFAULT.getStringIndex(reader, field);
       currentReaderGen++;
@@ -754,6 +813,7 @@ public abstract class FieldComparator {
       }
     }
     
+    @Override
     public void setBottom(final int bottom) {
       bottomSlot = bottom;
       if (readerGen[bottom] != currentReaderGen) {
@@ -765,6 +825,7 @@ public abstract class FieldComparator {
       bottomValue = values[bottom];
     }
 
+    @Override
     public Comparable value(int slot) {
       return values[slot];
     }
@@ -798,6 +859,7 @@ public abstract class FieldComparator {
       this.field = field;
     }
 
+    @Override
     public int compare(int slot1, int slot2) {
       final String val1 = values[slot1];
       final String val2 = values[slot2];
@@ -813,6 +875,7 @@ public abstract class FieldComparator {
       return val1.compareTo(val2);
     }
 
+    @Override
     public int compareBottom(int doc) {
       final String val2 = currentReaderValues[doc];
       if (bottom == null) {
@@ -826,18 +889,22 @@ public abstract class FieldComparator {
       return bottom.compareTo(val2);
     }
 
+    @Override
     public void copy(int slot, int doc) {
       values[slot] = currentReaderValues[doc];
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) throws IOException {
       currentReaderValues = FieldCache.DEFAULT.getStrings(reader, field);
     }
     
+    @Override
     public void setBottom(final int bottom) {
       this.bottom = values[bottom];
     }
 
+    @Override
     public Comparable value(int slot) {
       return values[slot];
     }
diff --git a/src/java/org/apache/lucene/search/FieldDoc.java b/src/java/org/apache/lucene/search/FieldDoc.java
index 9c00e74..d45ff26 100644
--- a/src/java/org/apache/lucene/search/FieldDoc.java
+++ b/src/java/org/apache/lucene/search/FieldDoc.java
@@ -38,37 +38,38 @@ package org.apache.lucene.search;
  */
 public class FieldDoc extends ScoreDoc {
 
-	/** Expert: The values which are used to sort the referenced document.
-	 * The order of these will match the original sort criteria given by a
-	 * Sort object.  Each Object will be either an Integer, Float or String,
-	 * depending on the type of values in the terms of the original field.
-	 * @see Sort
-	 * @see Searcher#search(Query,Filter,int,Sort)
-	 */
-	public Comparable[] fields;
+  /** Expert: The values which are used to sort the referenced document.
+   * The order of these will match the original sort criteria given by a
+   * Sort object.  Each Object will be either an Integer, Float or String,
+   * depending on the type of values in the terms of the original field.
+   * @see Sort
+   * @see Searcher#search(Query,Filter,int,Sort)
+   */
+  public Comparable[] fields;
 
-	/** Expert: Creates one of these objects with empty sort information. */
-	public FieldDoc (int doc, float score) {
-		super (doc, score);
-	}
+  /** Expert: Creates one of these objects with empty sort information. */
+  public FieldDoc (int doc, float score) {
+    super (doc, score);
+  }
 
-	/** Expert: Creates one of these objects with the given sort information. */
-	public FieldDoc (int doc, float score, Comparable[] fields) {
-		super (doc, score);
-		this.fields = fields;
-	}
-	
-	// A convenience method for debugging.
-	public String toString() {
-	  // super.toString returns the doc and score information, so just add the
+  /** Expert: Creates one of these objects with the given sort information. */
+  public FieldDoc (int doc, float score, Comparable[] fields) {
+    super (doc, score);
+    this.fields = fields;
+  }
+  
+  // A convenience method for debugging.
+  @Override
+  public String toString() {
+    // super.toString returns the doc and score information, so just add the
           // fields information
-	  StringBuilder sb = new StringBuilder(super.toString());
-	  sb.append("[");
-	  for (int i = 0; i < fields.length; i++) {
+    StringBuilder sb = new StringBuilder(super.toString());
+    sb.append("[");
+    for (int i = 0; i < fields.length; i++) {
             sb.append(fields[i]).append(", ");
           }
-	  sb.setLength(sb.length() - 2); // discard last ", "
-	  sb.append("]");
-	  return super.toString();
-	}
+    sb.setLength(sb.length() - 2); // discard last ", "
+    sb.append("]");
+    return super.toString();
+  }
 }
diff --git a/src/java/org/apache/lucene/search/FieldValueHitQueue.java b/src/java/org/apache/lucene/search/FieldValueHitQueue.java
index 5946567..50c8241 100644
--- a/src/java/org/apache/lucene/search/FieldValueHitQueue.java
+++ b/src/java/org/apache/lucene/search/FieldValueHitQueue.java
@@ -47,6 +47,7 @@ public abstract class FieldValueHitQueue extends PriorityQueue<FieldValueHitQueu
       this.score = score;
     }
     
+    @Override
     public String toString() {
       return "slot:" + slot + " docID:" + docID + " score=" + score;
     }
@@ -84,6 +85,7 @@ public abstract class FieldValueHitQueue extends PriorityQueue<FieldValueHitQueu
      * @param b ScoreDoc
      * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.
      */
+    @Override
     protected boolean lessThan(final Entry hitA, final Entry hitB) {
 
       assert hitA != hitB;
@@ -121,6 +123,7 @@ public abstract class FieldValueHitQueue extends PriorityQueue<FieldValueHitQueu
       initialize(size);
     }
   
+    @Override
     protected boolean lessThan(final Entry hitA, final Entry hitB) {
 
       assert hitA != hitB;
@@ -190,6 +193,7 @@ public abstract class FieldValueHitQueue extends PriorityQueue<FieldValueHitQueu
   protected final FieldComparator[] comparators;
   protected final int[] reverseMul;
 
+  @Override
   protected abstract boolean lessThan (final Entry a, final Entry b);
 
   /**
diff --git a/src/java/org/apache/lucene/search/FilteredDocIdSet.java b/src/java/org/apache/lucene/search/FilteredDocIdSet.java
index 99e301c..bddd4ee 100644
--- a/src/java/org/apache/lucene/search/FilteredDocIdSet.java
+++ b/src/java/org/apache/lucene/search/FilteredDocIdSet.java
@@ -70,6 +70,7 @@ public abstract class FilteredDocIdSet extends DocIdSet {
   @Override
   public DocIdSetIterator iterator() throws IOException {
     return new FilteredDocIdSetIterator(_innerSet.iterator()) {
+      @Override
       protected boolean match(int docid) throws IOException {
         return FilteredDocIdSet.this.match(docid);
       }
diff --git a/src/java/org/apache/lucene/search/FilteredDocIdSetIterator.java b/src/java/org/apache/lucene/search/FilteredDocIdSetIterator.java
index a3eba6f..8fb9008 100644
--- a/src/java/org/apache/lucene/search/FilteredDocIdSetIterator.java
+++ b/src/java/org/apache/lucene/search/FilteredDocIdSetIterator.java
@@ -49,10 +49,12 @@ public abstract class FilteredDocIdSetIterator extends DocIdSetIterator {
    */
   abstract protected boolean match(int doc) throws IOException;
 	
+  @Override
   public int docID() {
     return doc;
   }
   
+  @Override
   public int nextDoc() throws IOException {
     while ((doc = _innerIter.nextDoc()) != NO_MORE_DOCS) {
       if (match(doc)) {
@@ -62,6 +64,7 @@ public abstract class FilteredDocIdSetIterator extends DocIdSetIterator {
     return doc;
   }
   
+  @Override
   public int advance(int target) throws IOException {
     doc = _innerIter.advance(target);
     if (doc != NO_MORE_DOCS) {
diff --git a/src/java/org/apache/lucene/search/FilteredQuery.java b/src/java/org/apache/lucene/search/FilteredQuery.java
index 1884135..01bea83 100644
--- a/src/java/org/apache/lucene/search/FilteredQuery.java
+++ b/src/java/org/apache/lucene/search/FilteredQuery.java
@@ -58,6 +58,7 @@ extends Query {
    * Returns a Weight that applies the filter to the enclosed query's Weight.
    * This is accomplished by overriding the Scorer returned by the Weight.
    */
+  @Override
   public Weight createWeight(final Searcher searcher) throws IOException {
     final Weight weight = query.createWeight (searcher);
     final Similarity similarity = query.getSimilarity(searcher);
diff --git a/src/java/org/apache/lucene/search/FilteredTermEnum.java b/src/java/org/apache/lucene/search/FilteredTermEnum.java
index b44b50f..5780fa1 100644
--- a/src/java/org/apache/lucene/search/FilteredTermEnum.java
+++ b/src/java/org/apache/lucene/search/FilteredTermEnum.java
@@ -60,6 +60,7 @@ public abstract class FilteredTermEnum extends TermEnum {
      * Returns the docFreq of the current Term in the enumeration.
      * Returns -1 if no Term matches or all terms have been enumerated.
      */
+    @Override
     public int docFreq() {
         if (currentTerm == null) return -1;
         assert actualEnum != null;
@@ -67,6 +68,7 @@ public abstract class FilteredTermEnum extends TermEnum {
     }
     
     /** Increments the enumeration to the next element.  True if one exists. */
+    @Override
     public boolean next() throws IOException {
         if (actualEnum == null) return false; // the actual enumerator is not initialized!
         currentTerm = null;
@@ -87,11 +89,13 @@ public abstract class FilteredTermEnum extends TermEnum {
     
     /** Returns the current Term in the enumeration.
      * Returns null if no Term matches or all terms have been enumerated. */
+    @Override
     public Term term() {
         return currentTerm;
     }
     
     /** Closes the enumeration to further activity, freeing resources.  */
+    @Override
     public void close() throws IOException {
         if (actualEnum != null) actualEnum.close();
         currentTerm = null;
diff --git a/src/java/org/apache/lucene/search/FuzzyQuery.java b/src/java/org/apache/lucene/search/FuzzyQuery.java
index 5abd52a..03c1ea3 100644
--- a/src/java/org/apache/lucene/search/FuzzyQuery.java
+++ b/src/java/org/apache/lucene/search/FuzzyQuery.java
@@ -109,6 +109,7 @@ public class FuzzyQuery extends MultiTermQuery {
     return prefixLength;
   }
 
+  @Override
   protected FilteredTermEnum getEnum(IndexReader reader) throws IOException {
     return new FuzzyTermEnum(reader, getTerm(), minimumSimilarity, prefixLength);
   }
@@ -120,6 +121,7 @@ public class FuzzyQuery extends MultiTermQuery {
     return term;
   }
 
+  @Override
   public void setRewriteMethod(RewriteMethod method) {
     throw new UnsupportedOperationException("FuzzyQuery cannot change rewrite method");
   }
@@ -172,6 +174,7 @@ public class FuzzyQuery extends MultiTermQuery {
     return query;
   }
     
+  @Override
   public String toString(String field) {
     StringBuilder buffer = new StringBuilder();
     if (!term.field().equals(field)) {
diff --git a/src/java/org/apache/lucene/search/FuzzyTermEnum.java b/src/java/org/apache/lucene/search/FuzzyTermEnum.java
index 78033c0..a4cf7af 100644
--- a/src/java/org/apache/lucene/search/FuzzyTermEnum.java
+++ b/src/java/org/apache/lucene/search/FuzzyTermEnum.java
@@ -125,6 +125,7 @@ public final class FuzzyTermEnum extends FilteredTermEnum {
    * The termCompare method in FuzzyTermEnum uses Levenshtein distance to 
    * calculate the distance between the given term and the comparing term. 
    */
+  @Override
   protected final boolean termCompare(Term term) {
     if (field == term.field() && term.text().startsWith(prefix)) {
         final String target = term.text().substring(prefix.length());
@@ -136,11 +137,13 @@ public final class FuzzyTermEnum extends FilteredTermEnum {
   }
   
   /** {@inheritDoc} */
+  @Override
   public final float difference() {
     return (similarity - minimumSimilarity) * scale_factor;
   }
   
   /** {@inheritDoc} */
+  @Override
   public final boolean endEnum() {
     return endEnum;
   }
@@ -271,6 +274,7 @@ public final class FuzzyTermEnum extends FilteredTermEnum {
   }
 
   /** {@inheritDoc} */
+  @Override
   public void close() throws IOException {
     p = d = null;
     searchTerm = null;
diff --git a/src/java/org/apache/lucene/search/HitQueue.java b/src/java/org/apache/lucene/search/HitQueue.java
index 29040b6..7350f3e 100644
--- a/src/java/org/apache/lucene/search/HitQueue.java
+++ b/src/java/org/apache/lucene/search/HitQueue.java
@@ -68,6 +68,7 @@ final class HitQueue extends PriorityQueue<ScoreDoc> {
   }
 
   // Returns null if prePopulate is false.
+  @Override
   protected ScoreDoc getSentinelObject() {
     // Always set the doc Id to MAX_VALUE so that it won't be favored by
     // lessThan. This generally should not happen since if score is not NEG_INF,
@@ -75,6 +76,7 @@ final class HitQueue extends PriorityQueue<ScoreDoc> {
     return !prePopulate ? null : new ScoreDoc(Integer.MAX_VALUE, Float.NEGATIVE_INFINITY);
   }
   
+  @Override
   protected final boolean lessThan(ScoreDoc hitA, ScoreDoc hitB) {
     if (hitA.score == hitB.score)
       return hitA.doc > hitB.doc; 
diff --git a/src/java/org/apache/lucene/search/IndexSearcher.java b/src/java/org/apache/lucene/search/IndexSearcher.java
index 5f47c59..48d70a1 100644
--- a/src/java/org/apache/lucene/search/IndexSearcher.java
+++ b/src/java/org/apache/lucene/search/IndexSearcher.java
@@ -116,17 +116,20 @@ public class IndexSearcher extends Searcher {
    * If the IndexReader was supplied implicitly by specifying a directory, then
    * the IndexReader gets closed.
    */
+  @Override
   public void close() throws IOException {
     if(closeReader)
       reader.close();
   }
 
   // inherit javadoc
+  @Override
   public int docFreq(Term term) throws IOException {
     return reader.docFreq(term);
   }
 
   // inherit javadoc
+  @Override
   public Document doc(int i) throws CorruptIndexException, IOException {
     return reader.document(i);
   }
@@ -137,11 +140,13 @@ public class IndexSearcher extends Searcher {
   }
   
   // inherit javadoc
+  @Override
   public int maxDoc() throws IOException {
     return reader.maxDoc();
   }
 
   // inherit javadoc
+  @Override
   public TopDocs search(Weight weight, Filter filter, final int nDocs) throws IOException {
 
     if (nDocs <= 0) {
@@ -153,6 +158,7 @@ public class IndexSearcher extends Searcher {
     return collector.topDocs();
   }
 
+  @Override
   public TopFieldDocs search(Weight weight, Filter filter,
       final int nDocs, Sort sort) throws IOException {
     return search(weight, filter, nDocs, sort, true);
@@ -186,6 +192,7 @@ public class IndexSearcher extends Searcher {
     return (TopFieldDocs) collector.topDocs();
   }
 
+  @Override
   public void search(Weight weight, Filter filter, Collector collector)
       throws IOException {
     
@@ -251,6 +258,7 @@ public class IndexSearcher extends Searcher {
     }
   }
 
+  @Override
   public Query rewrite(Query original) throws IOException {
     Query query = original;
     for (Query rewrittenQuery = query.rewrite(reader); rewrittenQuery != query;
@@ -260,6 +268,7 @@ public class IndexSearcher extends Searcher {
     return query;
   }
 
+  @Override
   public Explanation explain(Weight weight, int doc) throws IOException {
     int n = ReaderUtil.subIndex(doc, docStarts);
     int deBasedDoc = doc - docStarts[n];
diff --git a/src/java/org/apache/lucene/search/MultiSearcher.java b/src/java/org/apache/lucene/search/MultiSearcher.java
index e222668..36d5ac2 100644
--- a/src/java/org/apache/lucene/search/MultiSearcher.java
+++ b/src/java/org/apache/lucene/search/MultiSearcher.java
@@ -52,6 +52,7 @@ public class MultiSearcher extends Searcher {
       setSimilarity(similarity);
     }
 
+    @Override
     public int docFreq(Term term) {
       int df;
       try {
@@ -63,6 +64,7 @@ public class MultiSearcher extends Searcher {
       return df;
     }
 
+    @Override
     public int[] docFreqs(Term[] terms) {
       int[] result = new int[terms.length];
       for (int i = 0; i < terms.length; i++) {
@@ -71,10 +73,12 @@ public class MultiSearcher extends Searcher {
       return result;
     }
 
+    @Override
     public int maxDoc() {
       return maxDoc;
     }
 
+    @Override
     public Query rewrite(Query query) {
       // this is a bit of a hack. We know that a query which
       // creates a Weight based on this Dummy-Searcher is
@@ -83,10 +87,12 @@ public class MultiSearcher extends Searcher {
       return query;
     }
 
+    @Override
     public void close() {
       throw new UnsupportedOperationException();
     }
 
+    @Override
     public Document doc(int i) {
       throw new UnsupportedOperationException();
     }
@@ -95,18 +101,22 @@ public class MultiSearcher extends Searcher {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     public Explanation explain(Weight weight,int doc) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
     public void search(Weight weight, Filter filter, Collector results) {
       throw new UnsupportedOperationException();
     }
     
+    @Override
     public TopDocs search(Weight weight,Filter filter,int n) {
       throw new UnsupportedOperationException();
     }
 
+    @Override
     public TopFieldDocs search(Weight weight,Filter filter,int n,Sort sort) {
       throw new UnsupportedOperationException();
     }
@@ -138,11 +148,13 @@ public class MultiSearcher extends Searcher {
   }
 
   // inherit javadoc
+  @Override
   public void close() throws IOException {
     for (int i = 0; i < searchables.length; i++)
       searchables[i].close();
   }
 
+  @Override
   public int docFreq(Term term) throws IOException {
     int docFreq = 0;
     for (int i = 0; i < searchables.length; i++)
@@ -151,6 +163,7 @@ public class MultiSearcher extends Searcher {
   }
 
   // inherit javadoc
+  @Override
   public Document doc(int n) throws CorruptIndexException, IOException {
     int i = subSearcher(n);			  // find searcher index
     return searchables[i].doc(n - starts[i]);	  // dispatch to searcher
@@ -174,10 +187,12 @@ public class MultiSearcher extends Searcher {
     return n - starts[subSearcher(n)];
   }
 
+  @Override
   public int maxDoc() throws IOException {
     return maxDoc;
   }
 
+  @Override
   public TopDocs search(Weight weight, Filter filter, int nDocs)
       throws IOException {
 
@@ -205,6 +220,7 @@ public class MultiSearcher extends Searcher {
     return new TopDocs(totalHits, scoreDocs, maxScore);
   }
 
+  @Override
   public TopFieldDocs search (Weight weight, Filter filter, int n, Sort sort)
   throws IOException {
     FieldDocSortedHitQueue hq = null;
@@ -247,6 +263,7 @@ public class MultiSearcher extends Searcher {
   }
 
   // inherit javadoc
+  @Override
   public void search(Weight weight, Filter filter, final Collector collector)
   throws IOException {
     for (int i = 0; i < searchables.length; i++) {
@@ -254,15 +271,19 @@ public class MultiSearcher extends Searcher {
       final int start = starts[i];
       
       final Collector hc = new Collector() {
+        @Override
         public void setScorer(Scorer scorer) throws IOException {
           collector.setScorer(scorer);
         }
+        @Override
         public void collect(int doc) throws IOException {
           collector.collect(doc);
         }
+        @Override
         public void setNextReader(IndexReader reader, int docBase) throws IOException {
           collector.setNextReader(reader, start + docBase);
         }
+        @Override
         public boolean acceptsDocsOutOfOrder() {
           return collector.acceptsDocsOutOfOrder();
         }
@@ -272,6 +293,7 @@ public class MultiSearcher extends Searcher {
     }
   }
 
+  @Override
   public Query rewrite(Query original) throws IOException {
     Query[] queries = new Query[searchables.length];
     for (int i = 0; i < searchables.length; i++) {
@@ -280,6 +302,7 @@ public class MultiSearcher extends Searcher {
     return queries[0].combine(queries);
   }
 
+  @Override
   public Explanation explain(Weight weight, int doc) throws IOException {
     int i = subSearcher(doc);			  // find searcher index
     return searchables[i].explain(weight, doc - starts[i]); // dispatch to searcher
@@ -300,6 +323,7 @@ public class MultiSearcher extends Searcher {
    *
    * @return rewritten queries
    */
+  @Override
   protected Weight createWeight(Query original) throws IOException {
     // step 1
     Query rewrittenQuery = rewrite(original);
diff --git a/src/java/org/apache/lucene/search/MultiTermQuery.java b/src/java/org/apache/lucene/search/MultiTermQuery.java
index 6b66c57..732f762 100644
--- a/src/java/org/apache/lucene/search/MultiTermQuery.java
+++ b/src/java/org/apache/lucene/search/MultiTermQuery.java
@@ -67,6 +67,7 @@ public abstract class MultiTermQuery extends Query {
   }
 
   private static final class ConstantScoreFilterRewrite extends RewriteMethod implements Serializable {
+    @Override
     public Query rewrite(IndexReader reader, MultiTermQuery query) {
       Query result = new ConstantScoreQuery(new MultiTermQueryWrapperFilter<MultiTermQuery>(query));
       result.setBoost(query.getBoost());
@@ -94,6 +95,7 @@ public abstract class MultiTermQuery extends Query {
   public final static RewriteMethod CONSTANT_SCORE_FILTER_REWRITE = new ConstantScoreFilterRewrite();
 
   private static class ScoringBooleanQueryRewrite extends RewriteMethod implements Serializable {
+    @Override
     public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {
 
       FilteredTermEnum enumerator = query.getEnum(reader);
@@ -138,6 +140,7 @@ public abstract class MultiTermQuery extends Query {
   public final static RewriteMethod SCORING_BOOLEAN_QUERY_REWRITE = new ScoringBooleanQueryRewrite();
 
   private static class ConstantScoreBooleanQueryRewrite extends ScoringBooleanQueryRewrite implements Serializable {
+    @Override
     public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {
       // strip the scores off
       Query result = new ConstantScoreQuery(new QueryWrapperFilter(super.rewrite(reader, query)));
@@ -146,6 +149,7 @@ public abstract class MultiTermQuery extends Query {
     }
 
     // Make sure we are still a singleton even after deserializing
+    @Override
     protected Object readResolve() {
       return CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE;
     }
@@ -212,6 +216,7 @@ public abstract class MultiTermQuery extends Query {
       return docCountPercent;
     }
 
+    @Override
     public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {
       // Get the enum and start visiting terms.  If we
       // exhaust the enum before hitting either of the
@@ -361,6 +366,7 @@ public abstract class MultiTermQuery extends Query {
     numberOfTerms += inc;
   }
 
+  @Override
   public Query rewrite(IndexReader reader) throws IOException {
     return rewriteMethod.rewrite(reader, this);
   }
diff --git a/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.java b/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.java
index 6183c76..639fbaf 100644
--- a/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.java
+++ b/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.java
@@ -142,6 +142,7 @@ public class MultiTermQueryWrapperFilter<Q extends MultiTermQuery> extends Filte
       // else fill into a OpenBitSet
       final OpenBitSet bitSet = new OpenBitSet(reader.maxDoc());
       new TermGenerator() {
+        @Override
         public void handleDoc(int doc) {
           bitSet.set(doc);
         }
diff --git a/src/java/org/apache/lucene/search/ParallelMultiSearcher.java b/src/java/org/apache/lucene/search/ParallelMultiSearcher.java
index 9edc82d..6d4a62e 100644
--- a/src/java/org/apache/lucene/search/ParallelMultiSearcher.java
+++ b/src/java/org/apache/lucene/search/ParallelMultiSearcher.java
@@ -32,7 +32,7 @@ public class ParallelMultiSearcher extends MultiSearcher {
 
   private Searchable[] searchables;
   private int[] starts;
-	
+
   /** Creates a searchable which searches <i>searchables</i>. */
   public ParallelMultiSearcher(Searchable... searchables) throws IOException {
     super(searchables);
@@ -43,6 +43,7 @@ public class ParallelMultiSearcher extends MultiSearcher {
   /**
    * TODO: parallelize this one too
    */
+  @Override
   public int docFreq(Term term) throws IOException {
     return super.docFreq(term);
   }
@@ -52,6 +53,7 @@ public class ParallelMultiSearcher extends MultiSearcher {
    * Searchable, waits for each search to complete and merge
    * the results back together.
    */
+  @Override
   public TopDocs search(Weight weight, Filter filter, int nDocs)
     throws IOException {
     HitQueue hq = new HitQueue(nDocs, false);
@@ -97,6 +99,7 @@ public class ParallelMultiSearcher extends MultiSearcher {
    * Searchable, waits for each search to complete and merges
    * the results back together.
    */
+  @Override
   public TopFieldDocs search(Weight weight, Filter filter, int nDocs, Sort sort)
     throws IOException {
     // don't specify the fields - we'll wait to do this until we get results
@@ -153,6 +156,7 @@ public class ParallelMultiSearcher extends MultiSearcher {
   * 
   * TODO: parallelize this one too
   */
+  @Override
   public void search(Weight weight, Filter filter, final Collector collector)
    throws IOException {
    for (int i = 0; i < searchables.length; i++) {
@@ -160,15 +164,22 @@ public class ParallelMultiSearcher extends MultiSearcher {
      final int start = starts[i];
 
      final Collector hc = new Collector() {
+       @Override
        public void setScorer(Scorer scorer) throws IOException {
          collector.setScorer(scorer);
        }
+       
+       @Override
        public void collect(int doc) throws IOException {
          collector.collect(doc);
        }
+       
+       @Override
        public void setNextReader(IndexReader reader, int docBase) throws IOException {
          collector.setNextReader(reader, start + docBase);
        }
+       
+       @Override
        public boolean acceptsDocsOutOfOrder() {
          return collector.acceptsDocsOutOfOrder();
        }
@@ -176,12 +187,13 @@ public class ParallelMultiSearcher extends MultiSearcher {
      
      searchables[i].search(weight, filter, hc);
    }
- }
+  }
 
   /*
    * TODO: this one could be parallelized too
    * @see org.apache.lucene.search.Searchable#rewrite(org.apache.lucene.search.Query)
    */
+  @Override
   public Query rewrite(Query original) throws IOException {
     return super.rewrite(original);
   }
@@ -230,6 +242,7 @@ class MultiSearcherThread extends Thread {
     this.sort = sort;
   }
 
+  @Override
   @SuppressWarnings ("unchecked")
   public void run() {
     try {
diff --git a/src/java/org/apache/lucene/search/PhraseQueue.java b/src/java/org/apache/lucene/search/PhraseQueue.java
index 5dcc9bf..4b3496a 100644
--- a/src/java/org/apache/lucene/search/PhraseQueue.java
+++ b/src/java/org/apache/lucene/search/PhraseQueue.java
@@ -24,6 +24,7 @@ final class PhraseQueue extends PriorityQueue<PhrasePositions> {
     initialize(size);
   }
 
+  @Override
   protected final boolean lessThan(PhrasePositions pp1, PhrasePositions pp2) {
     if (pp1.doc == pp2.doc) 
       if (pp1.position == pp2.position)
diff --git a/src/java/org/apache/lucene/search/PositiveScoresOnlyCollector.java b/src/java/org/apache/lucene/search/PositiveScoresOnlyCollector.java
index e13c62f..2dd47bc 100644
--- a/src/java/org/apache/lucene/search/PositiveScoresOnlyCollector.java
+++ b/src/java/org/apache/lucene/search/PositiveScoresOnlyCollector.java
@@ -35,16 +35,19 @@ public class PositiveScoresOnlyCollector extends Collector {
     this.c = c;
   }
   
+  @Override
   public void collect(int doc) throws IOException {
     if (scorer.score() > 0) {
       c.collect(doc);
     }
   }
 
+  @Override
   public void setNextReader(IndexReader reader, int docBase) throws IOException {
     c.setNextReader(reader, docBase);
   }
 
+  @Override
   public void setScorer(Scorer scorer) throws IOException {
     // Set a ScoreCachingWrappingScorer in case the wrapped Collector will call
     // score() also.
@@ -52,6 +55,7 @@ public class PositiveScoresOnlyCollector extends Collector {
     c.setScorer(this.scorer);
   }
 
+  @Override
   public boolean acceptsDocsOutOfOrder() {
     return c.acceptsDocsOutOfOrder();
   }
diff --git a/src/java/org/apache/lucene/search/PrefixFilter.java b/src/java/org/apache/lucene/search/PrefixFilter.java
index bb4b455..7adf080 100755
--- a/src/java/org/apache/lucene/search/PrefixFilter.java
+++ b/src/java/org/apache/lucene/search/PrefixFilter.java
@@ -32,6 +32,7 @@ public class PrefixFilter extends MultiTermQueryWrapperFilter<PrefixQuery> {
   public Term getPrefix() { return query.getPrefix(); }
 
   /** Prints a user-readable version of this query. */
+  @Override
   public String toString () {
     StringBuilder buffer = new StringBuilder();
     buffer.append("PrefixFilter(");
diff --git a/src/java/org/apache/lucene/search/PrefixQuery.java b/src/java/org/apache/lucene/search/PrefixQuery.java
index 0cb7679..0b67177 100644
--- a/src/java/org/apache/lucene/search/PrefixQuery.java
+++ b/src/java/org/apache/lucene/search/PrefixQuery.java
@@ -40,6 +40,7 @@ public class PrefixQuery extends MultiTermQuery {
   /** Returns the prefix of this query. */
   public Term getPrefix() { return prefix; }
   
+  @Override
   protected FilteredTermEnum getEnum(IndexReader reader) throws IOException {
     return new PrefixTermEnum(reader, prefix);
   }
diff --git a/src/java/org/apache/lucene/search/PrefixTermEnum.java b/src/java/org/apache/lucene/search/PrefixTermEnum.java
index 45ca056..6ba6208 100644
--- a/src/java/org/apache/lucene/search/PrefixTermEnum.java
+++ b/src/java/org/apache/lucene/search/PrefixTermEnum.java
@@ -41,10 +41,12 @@ public class PrefixTermEnum extends FilteredTermEnum {
     setEnum(reader.terms(new Term(prefix.field(), prefix.text())));
   }
 
+  @Override
   public float difference() {
     return 1.0f;
   }
 
+  @Override
   protected boolean endEnum() {
     return endEnum;
   }
@@ -53,6 +55,7 @@ public class PrefixTermEnum extends FilteredTermEnum {
       return prefix;
   }
 
+  @Override
   protected boolean termCompare(Term term) {
     if (term.field() == prefix.field() && term.text().startsWith(prefix.text())) {                                                                              
       return true;
diff --git a/src/java/org/apache/lucene/search/Query.java b/src/java/org/apache/lucene/search/Query.java
index 9d708ad..a33fa0c 100644
--- a/src/java/org/apache/lucene/search/Query.java
+++ b/src/java/org/apache/lucene/search/Query.java
@@ -78,6 +78,7 @@ public abstract class Query implements java.io.Serializable, Cloneable {
   public abstract String toString(String field);
 
   /** Prints a query to a string. */
+  @Override
   public String toString() {
     return toString("");
   }
@@ -204,6 +205,7 @@ public abstract class Query implements java.io.Serializable, Cloneable {
   }
 
   /** Returns a clone of this query. */
+  @Override
   public Object clone() {
     try {
       return super.clone();
@@ -212,6 +214,7 @@ public abstract class Query implements java.io.Serializable, Cloneable {
     }
   }
 
+  @Override
   public int hashCode() {
     final int prime = 31;
     int result = 1;
@@ -219,6 +222,7 @@ public abstract class Query implements java.io.Serializable, Cloneable {
     return result;
   }
 
+  @Override
   public boolean equals(Object obj) {
     if (this == obj)
       return true;
diff --git a/src/java/org/apache/lucene/search/QueryTermVector.java b/src/java/org/apache/lucene/search/QueryTermVector.java
index 9f265ce..3334c5f 100644
--- a/src/java/org/apache/lucene/search/QueryTermVector.java
+++ b/src/java/org/apache/lucene/search/QueryTermVector.java
@@ -106,6 +106,7 @@ public class QueryTermVector implements TermFreqVector {
     }
   }
   
+  @Override
   public final String toString() {
         StringBuilder sb = new StringBuilder();
         sb.append('{');
diff --git a/src/java/org/apache/lucene/search/ScoreDoc.java b/src/java/org/apache/lucene/search/ScoreDoc.java
index f0c386c..759f71a 100644
--- a/src/java/org/apache/lucene/search/ScoreDoc.java
+++ b/src/java/org/apache/lucene/search/ScoreDoc.java
@@ -35,6 +35,7 @@ public class ScoreDoc implements java.io.Serializable {
   }
   
   // A convenience method for debugging.
+  @Override
   public String toString() {
     return "doc=" + doc + " score=" + score;
   }
diff --git a/src/java/org/apache/lucene/search/SimilarityDelegator.java b/src/java/org/apache/lucene/search/SimilarityDelegator.java
index cde58c4..b83800c 100644
--- a/src/java/org/apache/lucene/search/SimilarityDelegator.java
+++ b/src/java/org/apache/lucene/search/SimilarityDelegator.java
@@ -34,34 +34,42 @@ public class SimilarityDelegator extends Similarity {
     this.delegee = delegee;
   }
 
+  @Override
   public float computeNorm(String fieldName, FieldInvertState state) {
     return delegee.computeNorm(fieldName, state);
   }
   
+  @Override
   public float lengthNorm(String fieldName, int numTerms) {
     return delegee.lengthNorm(fieldName, numTerms);
   }
   
+  @Override
   public float queryNorm(float sumOfSquaredWeights) {
     return delegee.queryNorm(sumOfSquaredWeights);
   }
 
+  @Override
   public float tf(float freq) {
     return delegee.tf(freq);
   }
     
+  @Override
   public float sloppyFreq(int distance) {
     return delegee.sloppyFreq(distance);
   }
     
+  @Override
   public float idf(int docFreq, int numDocs) {
     return delegee.idf(docFreq, numDocs);
   }
     
+  @Override
   public float coord(int overlap, int maxOverlap) {
     return delegee.coord(overlap, maxOverlap);
   }
 
+  @Override
   public float scorePayload(int docId, String fieldName, int start, int end, byte [] payload, int offset, int length) {
     return delegee.scorePayload(docId, fieldName, start, end, payload, offset, length);
   }
diff --git a/src/java/org/apache/lucene/search/SloppyPhraseScorer.java b/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
index 520db2a..d2e03e8 100644
--- a/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
+++ b/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
@@ -52,6 +52,7 @@ final class SloppyPhraseScorer extends PhraseScorer {
      * would get same score as "g f"~2, although "c b"~2 could be matched twice.
      * We may want to fix this in the future (currently not, for performance reasons).
      */
+    @Override
     protected final float phraseFreq() throws IOException {
         int end = initPhrasePositions();
         
diff --git a/src/java/org/apache/lucene/search/Sort.java b/src/java/org/apache/lucene/search/Sort.java
index a7b3d89..f66cd5c 100644
--- a/src/java/org/apache/lucene/search/Sort.java
+++ b/src/java/org/apache/lucene/search/Sort.java
@@ -151,6 +151,7 @@ implements Serializable {
     return fields;
   }
 
+  @Override
   public String toString() {
     StringBuilder buffer = new StringBuilder();
 
@@ -164,6 +165,7 @@ implements Serializable {
   }
 
   /** Returns true if <code>o</code> is equal to this. */
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (!(o instanceof Sort)) return false;
@@ -172,6 +174,7 @@ implements Serializable {
   }
 
   /** Returns a hash code value for this object. */
+  @Override
   public int hashCode() {
     return 0x45aaf665 + Arrays.hashCode(fields);
   }
diff --git a/src/java/org/apache/lucene/search/SortField.java b/src/java/org/apache/lucene/search/SortField.java
index 3a29d79..a78d4a1 100644
--- a/src/java/org/apache/lucene/search/SortField.java
+++ b/src/java/org/apache/lucene/search/SortField.java
@@ -260,6 +260,7 @@ implements Serializable {
     return reverse;
   }
 
+  @Override
   public String toString() {
     StringBuilder buffer = new StringBuilder();
     switch (type) {
@@ -323,6 +324,7 @@ implements Serializable {
    *  {@link FieldComparatorSource} or {@link
    *  FieldCache.Parser} was provided, it must properly
    *  implement equals (unless a singleton is always used). */
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (!(o instanceof SortField)) return false;
@@ -342,6 +344,7 @@ implements Serializable {
    *  FieldCache.Parser} was provided, it must properly
    *  implement hashCode (unless a singleton is always
    *  used). */
+  @Override
   public int hashCode() {
     int hash=type^0x346565dd + Boolean.valueOf(reverse).hashCode()^0xaf5998bb;
     if (field != null) hash += field.hashCode()^0xff5685dd;
diff --git a/src/java/org/apache/lucene/search/SpanQueryFilter.java b/src/java/org/apache/lucene/search/SpanQueryFilter.java
index b5fff96..93c0646 100644
--- a/src/java/org/apache/lucene/search/SpanQueryFilter.java
+++ b/src/java/org/apache/lucene/search/SpanQueryFilter.java
@@ -54,11 +54,13 @@ public class SpanQueryFilter extends SpanFilter {
     this.query = query;
   }
 
+  @Override
   public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
     SpanFilterResult result = bitSpans(reader);
     return result.getDocIdSet();
   }
 
+  @Override
   public SpanFilterResult bitSpans(IndexReader reader) throws IOException {
 
     final OpenBitSet bits = new OpenBitSet(reader.maxDoc());
@@ -86,14 +88,17 @@ public class SpanQueryFilter extends SpanFilter {
     return query;
   }
 
+  @Override
   public String toString() {
     return "SpanQueryFilter(" + query + ")";
   }
 
+  @Override
   public boolean equals(Object o) {
     return o instanceof SpanQueryFilter && this.query.equals(((SpanQueryFilter) o).query);
   }
 
+  @Override
   public int hashCode() {
     return query.hashCode() ^ 0x923F64B9;
   }
diff --git a/src/java/org/apache/lucene/search/TermRangeTermEnum.java b/src/java/org/apache/lucene/search/TermRangeTermEnum.java
index 2acc07a..edd0bba 100644
--- a/src/java/org/apache/lucene/search/TermRangeTermEnum.java
+++ b/src/java/org/apache/lucene/search/TermRangeTermEnum.java
@@ -93,14 +93,17 @@ public class TermRangeTermEnum extends FilteredTermEnum {
     setEnum(reader.terms(new Term(this.field, startTermText)));
   }
 
+  @Override
   public float difference() {
     return 1.0f;
   }
 
+  @Override
   protected boolean endEnum() {
     return endEnum;
   }
 
+  @Override
   protected boolean termCompare(Term term) {
     if (collator == null) {
       // Use Unicode code point ordering
diff --git a/src/java/org/apache/lucene/search/TimeLimitingCollector.java b/src/java/org/apache/lucene/search/TimeLimitingCollector.java
index a697909..9e623a0 100644
--- a/src/java/org/apache/lucene/search/TimeLimitingCollector.java
+++ b/src/java/org/apache/lucene/search/TimeLimitingCollector.java
@@ -70,6 +70,7 @@ public class TimeLimitingCollector extends Collector {
       this.setDaemon( true );
     }
 
+    @Override
     public void run() {
       while (true) {
         // TODO: Use System.nanoTime() when Lucene moves to Java SE 5.
@@ -194,6 +195,7 @@ public class TimeLimitingCollector extends Collector {
    * @throws TimeExceededException
    *           if the time allowed has exceeded.
    */
+  @Override
   public void collect(final int doc) throws IOException {
     long time = TIMER_THREAD.getMilliseconds();
     if (timeout < time) {
@@ -208,14 +210,17 @@ public class TimeLimitingCollector extends Collector {
     collector.collect(doc);
   }
   
+  @Override
   public void setNextReader(IndexReader reader, int base) throws IOException {
     collector.setNextReader(reader, base);
   }
   
+  @Override
   public void setScorer(Scorer scorer) throws IOException {
     collector.setScorer(scorer);
   }
 
+  @Override
   public boolean acceptsDocsOutOfOrder() {
     return collector.acceptsDocsOutOfOrder();
   }
diff --git a/src/java/org/apache/lucene/search/TopFieldCollector.java b/src/java/org/apache/lucene/search/TopFieldCollector.java
index 4cfbd33..0b41534 100644
--- a/src/java/org/apache/lucene/search/TopFieldCollector.java
+++ b/src/java/org/apache/lucene/search/TopFieldCollector.java
@@ -63,6 +63,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       bottom = pq.updateTop();
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       ++totalHits;
       if (queueFull) {
@@ -89,11 +90,13 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       }
     }
     
+    @Override
     public void setNextReader(IndexReader reader, int docBase) throws IOException {
       this.docBase = docBase;
       comparator.setNextReader(reader, docBase);
     }
     
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       comparator.setScorer(scorer);
     }
@@ -113,6 +116,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       super(queue, numHits, fillFields);
     }
     
+    @Override
     public void collect(int doc) throws IOException {
       ++totalHits;
       if (queueFull) {
@@ -138,6 +142,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       }
     }
     
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }
@@ -164,6 +169,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       bottom = pq.updateTop();
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       ++totalHits;
       if (queueFull) {
@@ -196,6 +202,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       }
     }
     
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       this.scorer = scorer;
       comparator.setScorer(scorer);
@@ -217,6 +224,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       super(queue, numHits, fillFields);
     }
     
+    @Override
     public void collect(int doc) throws IOException {
       ++totalHits;
       if (queueFull) {
@@ -248,6 +256,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       }
     }
     
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }
@@ -276,6 +285,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       bottom =  pq.updateTop();
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       final float score = scorer.score();
       if (score > maxScore) {
@@ -307,6 +317,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
 
     }
     
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       this.scorer = scorer;
       super.setScorer(scorer);
@@ -326,6 +337,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       super(queue, numHits, fillFields);
     }
     
+    @Override
     public void collect(int doc) throws IOException {
       final float score = scorer.score();
       if (score > maxScore) {
@@ -355,6 +367,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       }
     }
     
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }
@@ -383,6 +396,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       bottom = pq.updateTop();
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       ++totalHits;
       if (queueFull) {
@@ -429,6 +443,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       }
     }
 
+    @Override
     public void setNextReader(IndexReader reader, int docBase) throws IOException {
       this.docBase = docBase;
       for (int i = 0; i < comparators.length; i++) {
@@ -436,6 +451,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       }
     }
 
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       // set the scorer on all comparators
       for (int i = 0; i < comparators.length; i++) {
@@ -457,6 +473,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       super(queue, numHits, fillFields);
     }
     
+    @Override
     public void collect(int doc) throws IOException {
       ++totalHits;
       if (queueFull) {
@@ -505,6 +522,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       }
     }
     
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }
@@ -532,6 +550,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       bottom =  pq.updateTop();
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       final float score = scorer.score();
       if (score > maxScore) {
@@ -582,6 +601,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       }
     }
 
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       this.scorer = scorer;
       super.setScorer(scorer);
@@ -601,6 +621,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       super(queue, numHits, fillFields);
     }
     
+    @Override
     public void collect(int doc) throws IOException {
       final float score = scorer.score();
       if (score > maxScore) {
@@ -653,6 +674,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       }
     }
     
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }
@@ -678,6 +700,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       bottom = pq.updateTop();
     }
 
+    @Override
     public void collect(int doc) throws IOException {
       ++totalHits;
       if (queueFull) {
@@ -729,6 +752,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       }
     }
 
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       this.scorer = scorer;
       super.setScorer(scorer);
@@ -749,6 +773,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       super(queue, numHits, fillFields);
     }
     
+    @Override
     public void collect(int doc) throws IOException {
       ++totalHits;
       if (queueFull) {
@@ -802,11 +827,13 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
       }
     }
 
+    @Override
     public void setScorer(Scorer scorer) throws IOException {
       this.scorer = scorer;
       super.setScorer(scorer);
     }
     
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }
@@ -934,6 +961,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
    * topDocs(int, int) calls them to return the results.
    */
 
+  @Override
   protected void populateResults(ScoreDoc[] results, int howMany) {
     if (fillFields) {
       // avoid casting if unnecessary.
@@ -949,6 +977,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
     }
   }
   
+  @Override
   protected TopDocs newTopDocs(ScoreDoc[] results, int start) {
     if (results == null) {
       results = EMPTY_SCOREDOCS;
@@ -960,6 +989,7 @@ public abstract class TopFieldCollector extends TopDocsCollector<Entry> {
     return new TopFieldDocs(totalHits, results, ((FieldValueHitQueue) pq).getFields(), maxScore);
   }
   
+  @Override
   public boolean acceptsDocsOutOfOrder() {
     return false;
   }
diff --git a/src/java/org/apache/lucene/search/TopScoreDocCollector.java b/src/java/org/apache/lucene/search/TopScoreDocCollector.java
index f65f00d..196a8af 100644
--- a/src/java/org/apache/lucene/search/TopScoreDocCollector.java
+++ b/src/java/org/apache/lucene/search/TopScoreDocCollector.java
@@ -42,6 +42,7 @@ public abstract class TopScoreDocCollector extends TopDocsCollector<ScoreDoc> {
       super(numHits);
     }
     
+    @Override
     public void collect(int doc) throws IOException {
       float score = scorer.score();
       totalHits++;
@@ -56,6 +57,7 @@ public abstract class TopScoreDocCollector extends TopDocsCollector<ScoreDoc> {
       pqTop = pq.updateTop();
     }
     
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return false;
     }
@@ -67,6 +69,7 @@ public abstract class TopScoreDocCollector extends TopDocsCollector<ScoreDoc> {
       super(numHits);
     }
     
+    @Override
     public void collect(int doc) throws IOException {
       float score = scorer.score();
       totalHits++;
@@ -79,6 +82,7 @@ public abstract class TopScoreDocCollector extends TopDocsCollector<ScoreDoc> {
       pqTop = pq.updateTop();
     }
     
+    @Override
     public boolean acceptsDocsOutOfOrder() {
       return true;
     }
@@ -116,6 +120,7 @@ public abstract class TopScoreDocCollector extends TopDocsCollector<ScoreDoc> {
     pqTop = pq.top();
   }
 
+  @Override
   protected TopDocs newTopDocs(ScoreDoc[] results, int start) {
     if (results == null) {
       return EMPTY_TOPDOCS;
@@ -136,10 +141,12 @@ public abstract class TopScoreDocCollector extends TopDocsCollector<ScoreDoc> {
     return new TopDocs(totalHits, results, maxScore);
   }
   
+  @Override
   public void setNextReader(IndexReader reader, int base) {
     docBase = base;
   }
   
+  @Override
   public void setScorer(Scorer scorer) throws IOException {
     this.scorer = scorer;
   }
diff --git a/src/java/org/apache/lucene/search/WildcardQuery.java b/src/java/org/apache/lucene/search/WildcardQuery.java
index f1294dd..f6c42c3 100644
--- a/src/java/org/apache/lucene/search/WildcardQuery.java
+++ b/src/java/org/apache/lucene/search/WildcardQuery.java
@@ -50,6 +50,7 @@ public class WildcardQuery extends MultiTermQuery {
         && (text.indexOf('*') == text.length() - 1);
   }
 
+  @Override
   protected FilteredTermEnum getEnum(IndexReader reader) throws IOException {
     if (termContainsWildcard)
       return new WildcardTermEnum(reader, getTerm());
diff --git a/src/java/org/apache/lucene/search/WildcardTermEnum.java b/src/java/org/apache/lucene/search/WildcardTermEnum.java
index 330c0f1..82d60fd 100644
--- a/src/java/org/apache/lucene/search/WildcardTermEnum.java
+++ b/src/java/org/apache/lucene/search/WildcardTermEnum.java
@@ -65,6 +65,7 @@ public class WildcardTermEnum extends FilteredTermEnum {
     setEnum(reader.terms(new Term(searchTerm.field(), pre)));
   }
 
+  @Override
   protected final boolean termCompare(Term term) {
     if (field == term.field()) {
       String searchText = term.text();
@@ -76,10 +77,12 @@ public class WildcardTermEnum extends FilteredTermEnum {
     return false;
   }
 
+  @Override
   public float difference() {
     return 1.0f;
   }
 
+  @Override
   public final boolean endEnum() {
     return endEnum;
   }
diff --git a/src/java/org/apache/lucene/search/function/ByteFieldSource.java b/src/java/org/apache/lucene/search/function/ByteFieldSource.java
index afadb2b..879798b 100644
--- a/src/java/org/apache/lucene/search/function/ByteFieldSource.java
+++ b/src/java/org/apache/lucene/search/function/ByteFieldSource.java
@@ -66,27 +66,33 @@ public class ByteFieldSource extends FieldCacheSource {
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#description() */
+  @Override
   public String description() {
     return "byte(" + super.description() + ')';
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.FieldCacheSource#getCachedValues(org.apache.lucene.search.FieldCache, java.lang.String, org.apache.lucene.index.IndexReader) */
+  @Override
   public DocValues getCachedFieldValues (FieldCache cache, String field, IndexReader reader) throws IOException {
     final byte[] arr = cache.getBytes(reader, field, parser);
     return new DocValues() {
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */
+      @Override
       public float floatVal(int doc) { 
         return (float) arr[doc]; 
       }
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#intVal(int) */
+      @Override
       public  int intVal(int doc) { 
         return arr[doc]; 
       }
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */
+      @Override
       public String toString(int doc) { 
         return  description() + '=' + intVal(doc);  
       }
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */
+      @Override
       Object getInnerArray() {
         return arr;
       }
@@ -94,6 +100,7 @@ public class ByteFieldSource extends FieldCacheSource {
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.FieldCacheSource#cachedFieldSourceEquals(org.apache.lucene.search.function.FieldCacheSource) */
+  @Override
   public boolean cachedFieldSourceEquals(FieldCacheSource o) {
     if (o.getClass() !=  ByteFieldSource.class) {
       return false;
@@ -105,6 +112,7 @@ public class ByteFieldSource extends FieldCacheSource {
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.FieldCacheSource#cachedFieldSourceHashCode() */
+  @Override
   public int cachedFieldSourceHashCode() {
     return parser==null ? 
       Byte.class.hashCode() : parser.getClass().hashCode();
diff --git a/src/java/org/apache/lucene/search/function/FieldCacheSource.java b/src/java/org/apache/lucene/search/function/FieldCacheSource.java
index 0e71066..76f3ae6 100644
--- a/src/java/org/apache/lucene/search/function/FieldCacheSource.java
+++ b/src/java/org/apache/lucene/search/function/FieldCacheSource.java
@@ -60,11 +60,13 @@ public abstract class FieldCacheSource extends ValueSource {
   }
 
   /* (non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */
+  @Override
   public final DocValues getValues(IndexReader reader) throws IOException {
     return getCachedFieldValues(FieldCache.DEFAULT, field, reader);
   }
 
   /* (non-Javadoc) @see org.apache.lucene.search.function.ValueSource#description() */
+  @Override
   public String description() {
     return field;
   }
@@ -78,6 +80,7 @@ public abstract class FieldCacheSource extends ValueSource {
   public abstract DocValues getCachedFieldValues(FieldCache cache, String field, IndexReader reader) throws IOException;
 
   /*(non-Javadoc) @see java.lang.Object#equals(java.lang.Object) */
+  @Override
   public final boolean equals(Object o) {
     if (!(o instanceof FieldCacheSource)) {
       return false;
@@ -89,6 +92,7 @@ public abstract class FieldCacheSource extends ValueSource {
   }
 
   /*(non-Javadoc) @see java.lang.Object#hashCode() */
+  @Override
   public final int hashCode() {
     return 
       field.hashCode() +
diff --git a/src/java/org/apache/lucene/search/function/FieldScoreQuery.java b/src/java/org/apache/lucene/search/function/FieldScoreQuery.java
index df63db0..5c05c7b 100755
--- a/src/java/org/apache/lucene/search/function/FieldScoreQuery.java
+++ b/src/java/org/apache/lucene/search/function/FieldScoreQuery.java
@@ -90,6 +90,7 @@ public class FieldScoreQuery extends ValueSourceQuery {
       this.typeName = name;
     }
     /*(non-Javadoc) @see java.lang.Object#toString() */
+    @Override
     public String toString() {
       return getClass().getName()+"::"+typeName;
     }
diff --git a/src/java/org/apache/lucene/search/function/FloatFieldSource.java b/src/java/org/apache/lucene/search/function/FloatFieldSource.java
index 6ce7f69..0241104 100644
--- a/src/java/org/apache/lucene/search/function/FloatFieldSource.java
+++ b/src/java/org/apache/lucene/search/function/FloatFieldSource.java
@@ -66,23 +66,28 @@ public class FloatFieldSource extends FieldCacheSource {
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#description() */
+  @Override
   public String description() {
     return "float(" + super.description() + ')';
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.FieldCacheSource#getCachedValues(org.apache.lucene.search.FieldCache, java.lang.String, org.apache.lucene.index.IndexReader) */
+  @Override
   public DocValues getCachedFieldValues (FieldCache cache, String field, IndexReader reader) throws IOException {
     final float[] arr = cache.getFloats(reader, field, parser);
     return new DocValues() {
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */
+      @Override
       public float floatVal(int doc) {
         return arr[doc];      
       }
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */
+      @Override
       public String toString(int doc) { 
         return  description() + '=' + arr[doc];  
       }
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */
+      @Override
       Object getInnerArray() {
         return arr;
       }
@@ -90,6 +95,7 @@ public class FloatFieldSource extends FieldCacheSource {
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.FieldCacheSource#cachedFieldSourceEquals(org.apache.lucene.search.function.FieldCacheSource) */
+  @Override
   public boolean cachedFieldSourceEquals(FieldCacheSource o) {
     if (o.getClass() !=  FloatFieldSource.class) {
       return false;
@@ -101,6 +107,7 @@ public class FloatFieldSource extends FieldCacheSource {
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.FieldCacheSource#cachedFieldSourceHashCode() */
+  @Override
   public int cachedFieldSourceHashCode() {
     return parser==null ? 
       Float.class.hashCode() : parser.getClass().hashCode();
diff --git a/src/java/org/apache/lucene/search/function/IntFieldSource.java b/src/java/org/apache/lucene/search/function/IntFieldSource.java
index 64ed73b..83d63d0 100755
--- a/src/java/org/apache/lucene/search/function/IntFieldSource.java
+++ b/src/java/org/apache/lucene/search/function/IntFieldSource.java
@@ -66,27 +66,33 @@ public class IntFieldSource extends FieldCacheSource {
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#description() */
+  @Override
   public String description() {
     return "int(" + super.description() + ')';
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.FieldCacheSource#getCachedValues(org.apache.lucene.search.FieldCache, java.lang.String, org.apache.lucene.index.IndexReader) */
+  @Override
   public DocValues getCachedFieldValues (FieldCache cache, String field, IndexReader reader) throws IOException {
     final int[] arr = cache.getInts(reader, field, parser);
     return new DocValues() {
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */
+      @Override
       public float floatVal(int doc) { 
         return (float) arr[doc]; 
       }
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#intVal(int) */
+      @Override
       public  int intVal(int doc) { 
         return arr[doc]; 
       }
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */
+      @Override
       public String toString(int doc) { 
         return  description() + '=' + intVal(doc);  
       }
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */
+      @Override
       Object getInnerArray() {
         return arr;
       }
@@ -94,6 +100,7 @@ public class IntFieldSource extends FieldCacheSource {
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.FieldCacheSource#cachedFieldSourceEquals(org.apache.lucene.search.function.FieldCacheSource) */
+  @Override
   public boolean cachedFieldSourceEquals(FieldCacheSource o) {
     if (o.getClass() !=  IntFieldSource.class) {
       return false;
@@ -105,6 +112,7 @@ public class IntFieldSource extends FieldCacheSource {
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.FieldCacheSource#cachedFieldSourceHashCode() */
+  @Override
   public int cachedFieldSourceHashCode() {
     return parser==null ? 
       Integer.class.hashCode() : parser.getClass().hashCode();
diff --git a/src/java/org/apache/lucene/search/function/MultiValueSource.java b/src/java/org/apache/lucene/search/function/MultiValueSource.java
index 0ad04db..f3b93be 100644
--- a/src/java/org/apache/lucene/search/function/MultiValueSource.java
+++ b/src/java/org/apache/lucene/search/function/MultiValueSource.java
@@ -42,6 +42,7 @@ public final class MultiValueSource extends ValueSource {
     this.other = other;
   }
 
+  @Override
   public DocValues getValues(IndexReader reader) throws IOException {
 
     IndexReader[] subReaders = reader.getSequentialSubReaders();
@@ -54,10 +55,12 @@ public final class MultiValueSource extends ValueSource {
     }
   }
 
+  @Override
   public String description() {
     return other.description();
   }
 
+  @Override
   public boolean equals(Object o) {
     if (o instanceof MultiValueSource) {
       return ((MultiValueSource) o).other.equals(other);
@@ -66,6 +69,7 @@ public final class MultiValueSource extends ValueSource {
     }
   }
 
+  @Override
   public int hashCode() {
     return 31 * other.hashCode();
   }
@@ -86,36 +90,43 @@ public final class MultiValueSource extends ValueSource {
       }
     }
     
+    @Override
     public float floatVal(int doc) {
       final int n = ReaderUtil.subIndex(doc, docStarts);
       return docValues[n].floatVal(doc-docStarts[n]);
     }
 
+    @Override
     public int intVal(int doc) {
       final int n = ReaderUtil.subIndex(doc, docStarts);
       return docValues[n].intVal(doc-docStarts[n]);
     }
 
+    @Override
     public long longVal(int doc) {
       final int n = ReaderUtil.subIndex(doc, docStarts);
       return docValues[n].longVal(doc-docStarts[n]);
     }
 
+    @Override
     public double doubleVal(int doc) {
       final int n = ReaderUtil.subIndex(doc, docStarts);
       return docValues[n].doubleVal(doc-docStarts[n]);
     }
 
+    @Override
     public String strVal(int doc) {
       final int n = ReaderUtil.subIndex(doc, docStarts);
       return docValues[n].strVal(doc-docStarts[n]);
     }
 
+    @Override
     public String toString(int doc) {
       final int n = ReaderUtil.subIndex(doc, docStarts);
       return docValues[n].toString(doc-docStarts[n]);
     }
 
+    @Override
     public Explanation explain(int doc) {
       final int n = ReaderUtil.subIndex(doc, docStarts);
       return docValues[n].explain(doc-docStarts[n]);
diff --git a/src/java/org/apache/lucene/search/function/OrdFieldSource.java b/src/java/org/apache/lucene/search/function/OrdFieldSource.java
index 70311eb..c5197ff 100644
--- a/src/java/org/apache/lucene/search/function/OrdFieldSource.java
+++ b/src/java/org/apache/lucene/search/function/OrdFieldSource.java
@@ -67,28 +67,34 @@ public class OrdFieldSource extends ValueSource {
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#description() */
+  @Override
   public String description() {
     return "ord(" + field + ')';
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */
+  @Override
   public DocValues getValues(IndexReader reader) throws IOException {
     final int[] arr = FieldCache.DEFAULT.getStringIndex(reader, field).order;
     return new DocValues() {
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */
+      @Override
       public float floatVal(int doc) {
         return (float)arr[doc];
       }
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */
+      @Override
       public String strVal(int doc) {
         // the string value of the ordinal, not the string itself
         return Integer.toString(arr[doc]);
       }
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */
+      @Override
       public String toString(int doc) {
         return description() + '=' + intVal(doc);
       }
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */
+      @Override
       Object getInnerArray() {
         return arr;
       }
@@ -96,6 +102,7 @@ public class OrdFieldSource extends ValueSource {
   }
 
   /*(non-Javadoc) @see java.lang.Object#equals(java.lang.Object) */
+  @Override
   public boolean equals(Object o) {
     if (o.getClass() !=  OrdFieldSource.class) return false;
     OrdFieldSource other = (OrdFieldSource)o;
@@ -105,6 +112,7 @@ public class OrdFieldSource extends ValueSource {
   private static final int hcode = OrdFieldSource.class.hashCode();
   
   /*(non-Javadoc) @see java.lang.Object#hashCode() */
+  @Override
   public int hashCode() {
     return hcode + field.hashCode();
   }
diff --git a/src/java/org/apache/lucene/search/function/ReverseOrdFieldSource.java b/src/java/org/apache/lucene/search/function/ReverseOrdFieldSource.java
index e9bb112..c67d0bf 100644
--- a/src/java/org/apache/lucene/search/function/ReverseOrdFieldSource.java
+++ b/src/java/org/apache/lucene/search/function/ReverseOrdFieldSource.java
@@ -68,11 +68,13 @@ public class ReverseOrdFieldSource extends ValueSource {
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#description() */
+  @Override
   public String description() {
     return "rord("+field+')';
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */
+  @Override
   public DocValues getValues(IndexReader reader) throws IOException {
     final FieldCache.StringIndex sindex = FieldCache.DEFAULT.getStringIndex(reader, field);
 
@@ -81,23 +83,28 @@ public class ReverseOrdFieldSource extends ValueSource {
 
     return new DocValues() {
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */
+      @Override
       public float floatVal(int doc) {
         return (float)(end - arr[doc]);
       }
       /* (non-Javadoc) @see org.apache.lucene.search.function.DocValues#intVal(int) */
+      @Override
       public int intVal(int doc) {
         return end - arr[doc];
       }
       /* (non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */
+      @Override
       public String strVal(int doc) {
         // the string value of the ordinal, not the string itself
         return Integer.toString(intVal(doc));
       }
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */
+      @Override
       public String toString(int doc) {
         return description() + '=' + strVal(doc);
       }
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */
+      @Override
       Object getInnerArray() {
         return arr;
       }
@@ -105,6 +112,7 @@ public class ReverseOrdFieldSource extends ValueSource {
   }
 
   /*(non-Javadoc) @see java.lang.Object#equals(java.lang.Object) */
+  @Override
   public boolean equals(Object o) {
     if (o.getClass() !=  ReverseOrdFieldSource.class) return false;
     ReverseOrdFieldSource other = (ReverseOrdFieldSource)o;
@@ -114,6 +122,7 @@ public class ReverseOrdFieldSource extends ValueSource {
   private static final int hcode = ReverseOrdFieldSource.class.hashCode();
   
   /*(non-Javadoc) @see java.lang.Object#hashCode() */
+  @Override
   public int hashCode() {
     return hcode + field.hashCode();
   }
diff --git a/src/java/org/apache/lucene/search/function/ShortFieldSource.java b/src/java/org/apache/lucene/search/function/ShortFieldSource.java
index 83adc0b..8b10fdb 100644
--- a/src/java/org/apache/lucene/search/function/ShortFieldSource.java
+++ b/src/java/org/apache/lucene/search/function/ShortFieldSource.java
@@ -66,27 +66,33 @@ public class ShortFieldSource extends FieldCacheSource {
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#description() */
+  @Override
   public String description() {
     return "short(" + super.description() + ')';
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.FieldCacheSource#getCachedValues(org.apache.lucene.search.FieldCache, java.lang.String, org.apache.lucene.index.IndexReader) */
+  @Override
   public DocValues getCachedFieldValues (FieldCache cache, String field, IndexReader reader) throws IOException {
     final short[] arr = cache.getShorts(reader, field, parser);
     return new DocValues() {
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */
+      @Override
       public float floatVal(int doc) { 
         return (float) arr[doc];
       }
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#intVal(int) */
+      @Override
       public  int intVal(int doc) { 
         return arr[doc]; 
       }
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */
+      @Override
       public String toString(int doc) { 
         return  description() + '=' + intVal(doc);  
       }
       /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */
+      @Override
       Object getInnerArray() {
         return arr;
       }
@@ -94,6 +100,7 @@ public class ShortFieldSource extends FieldCacheSource {
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.FieldCacheSource#cachedFieldSourceEquals(org.apache.lucene.search.function.FieldCacheSource) */
+  @Override
   public boolean cachedFieldSourceEquals(FieldCacheSource o) {
     if (o.getClass() !=  ShortFieldSource.class) {
       return false;
@@ -105,6 +112,7 @@ public class ShortFieldSource extends FieldCacheSource {
   }
 
   /*(non-Javadoc) @see org.apache.lucene.search.function.FieldCacheSource#cachedFieldSourceHashCode() */
+  @Override
   public int cachedFieldSourceHashCode() {
     return parser==null ? 
       Short.class.hashCode() : parser.getClass().hashCode();
diff --git a/src/java/org/apache/lucene/search/function/ValueSource.java b/src/java/org/apache/lucene/search/function/ValueSource.java
index 72934e8..6d7d4bc 100755
--- a/src/java/org/apache/lucene/search/function/ValueSource.java
+++ b/src/java/org/apache/lucene/search/function/ValueSource.java
@@ -54,6 +54,7 @@ public abstract class ValueSource implements Serializable {
   public abstract String description();
 
   /* (non-Javadoc) @see java.lang.Object#toString() */
+  @Override
   public String toString() {
     return description();
   }
@@ -62,12 +63,14 @@ public abstract class ValueSource implements Serializable {
    * Needed for possible caching of query results - used by {@link ValueSourceQuery#equals(Object)}.
    * @see Object#equals(Object)
    */
+  @Override
   public abstract boolean equals(Object o);
 
   /**
    * Needed for possible caching of query results - used by {@link ValueSourceQuery#hashCode()}.
    * @see Object#hashCode()
    */
+  @Override
   public abstract int hashCode();
   
 }
diff --git a/src/java/org/apache/lucene/search/payloads/AveragePayloadFunction.java b/src/java/org/apache/lucene/search/payloads/AveragePayloadFunction.java
index 9101d57..f05a56b 100644
--- a/src/java/org/apache/lucene/search/payloads/AveragePayloadFunction.java
+++ b/src/java/org/apache/lucene/search/payloads/AveragePayloadFunction.java
@@ -26,14 +26,17 @@ package org.apache.lucene.search.payloads;
  **/
 public class AveragePayloadFunction extends PayloadFunction{
 
+  @Override
   public float currentScore(int docId, String field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {
     return currentPayloadScore + currentScore;
   }
 
+  @Override
   public float docScore(int docId, String field, int numPayloadsSeen, float payloadScore) {
     return numPayloadsSeen > 0 ? (payloadScore / numPayloadsSeen) : 1;
   }
 
+  @Override
   public int hashCode() {
     final int prime = 31;
     int result = 1;
@@ -41,6 +44,7 @@ public class AveragePayloadFunction extends PayloadFunction{
     return result;
   }
 
+  @Override
   public boolean equals(Object obj) {
     if (this == obj)
       return true;
diff --git a/src/java/org/apache/lucene/search/payloads/MaxPayloadFunction.java b/src/java/org/apache/lucene/search/payloads/MaxPayloadFunction.java
index ed8af9d..fae7b35 100644
--- a/src/java/org/apache/lucene/search/payloads/MaxPayloadFunction.java
+++ b/src/java/org/apache/lucene/search/payloads/MaxPayloadFunction.java
@@ -25,14 +25,17 @@ package org.apache.lucene.search.payloads;
  *
  **/
 public class MaxPayloadFunction extends PayloadFunction {
+  @Override
   public float currentScore(int docId, String field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {
     return Math.max(currentPayloadScore, currentScore);
   }
 
+  @Override
   public float docScore(int docId, String field, int numPayloadsSeen, float payloadScore) {
     return numPayloadsSeen > 0 ? payloadScore : 1;
   }
   
+  @Override
   public int hashCode() {
     final int prime = 31;
     int result = 1;
@@ -40,6 +43,7 @@ public class MaxPayloadFunction extends PayloadFunction {
     return result;
   }
 
+  @Override
   public boolean equals(Object obj) {
     if (this == obj)
       return true;
diff --git a/src/java/org/apache/lucene/search/payloads/MinPayloadFunction.java b/src/java/org/apache/lucene/search/payloads/MinPayloadFunction.java
index d2fdf75..9e5e9a2 100644
--- a/src/java/org/apache/lucene/search/payloads/MinPayloadFunction.java
+++ b/src/java/org/apache/lucene/search/payloads/MinPayloadFunction.java
@@ -23,14 +23,17 @@ package org.apache.lucene.search.payloads;
  **/
 public class MinPayloadFunction extends PayloadFunction {
 
+    @Override
     public float currentScore(int docId, String field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {
     return Math.min(currentPayloadScore, currentScore);
   }
 
+  @Override
   public float docScore(int docId, String field, int numPayloadsSeen, float payloadScore) {
     return numPayloadsSeen > 0 ? payloadScore : 1;
   }
   
+  @Override
   public int hashCode() {
     final int prime = 31;
     int result = 1;
@@ -38,6 +41,7 @@ public class MinPayloadFunction extends PayloadFunction {
     return result;
   }
 
+  @Override
   public boolean equals(Object obj) {
     if (this == obj)
       return true;
diff --git a/src/java/org/apache/lucene/search/payloads/PayloadFunction.java b/src/java/org/apache/lucene/search/payloads/PayloadFunction.java
index 2f9723f..0813fdd 100644
--- a/src/java/org/apache/lucene/search/payloads/PayloadFunction.java
+++ b/src/java/org/apache/lucene/search/payloads/PayloadFunction.java
@@ -56,8 +56,10 @@ public abstract class PayloadFunction implements Serializable {
    */
   public abstract float docScore(int docId, String field, int numPayloadsSeen, float payloadScore);
   
+  @Override
   public abstract int hashCode();
   
+  @Override
   public abstract boolean equals(Object o);
 
 }
diff --git a/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java b/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java
index d3f79e9..b5027c5 100644
--- a/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java
+++ b/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java
@@ -203,6 +203,7 @@ public class PayloadNearQuery extends SpanNearQuery {
     }
 
     //
+    @Override
     protected boolean setFreqCurrentDoc() throws IOException {
       if (!more) {
         return false;
diff --git a/src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java b/src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java
index 98929d5..218ddb2 100644
--- a/src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java
+++ b/src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java
@@ -79,6 +79,7 @@ public class FieldMaskingSpanQuery extends SpanQuery {
     this.field = maskedField;
   }
 
+  @Override
   public String getField() {
     return field;
   }
@@ -90,22 +91,27 @@ public class FieldMaskingSpanQuery extends SpanQuery {
   // :NOTE: getBoost and setBoost are not proxied to the maskedQuery
   // ...this is done to be more consistent with things like SpanFirstQuery
   
+  @Override
   public Spans getSpans(IndexReader reader) throws IOException {
     return maskedQuery.getSpans(reader);
   }
 
+  @Override
   public void extractTerms(Set<Term> terms) {
     maskedQuery.extractTerms(terms);
   }  
 
+  @Override
   public Weight createWeight(Searcher searcher) throws IOException {
     return maskedQuery.createWeight(searcher);
   }
 
+  @Override
   public Similarity getSimilarity(Searcher searcher) {
     return maskedQuery.getSimilarity(searcher);
   }
 
+  @Override
   public Query rewrite(IndexReader reader) throws IOException {
     FieldMaskingSpanQuery clone = null;
 
@@ -122,6 +128,7 @@ public class FieldMaskingSpanQuery extends SpanQuery {
     }
   }
 
+  @Override
   public String toString(String field) {
     StringBuilder buffer = new StringBuilder();
     buffer.append("mask(");
@@ -133,6 +140,7 @@ public class FieldMaskingSpanQuery extends SpanQuery {
     return buffer.toString();
   }
   
+  @Override
   public boolean equals(Object o) {
     if (!(o instanceof FieldMaskingSpanQuery))
       return false;
@@ -143,6 +151,7 @@ public class FieldMaskingSpanQuery extends SpanQuery {
 
   }
   
+  @Override
   public int hashCode() {
     return getMaskedQuery().hashCode()
       ^ getField().hashCode()
diff --git a/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java b/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java
index c0dbc8f..c72e1c3 100644
--- a/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java
+++ b/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java
@@ -101,12 +101,15 @@ public class NearSpansOrdered extends Spans {
   }
 
   // inherit javadocs
+  @Override
   public int doc() { return matchDoc; }
 
   // inherit javadocs
+  @Override
   public int start() { return matchStart; }
 
   // inherit javadocs
+  @Override
   public int end() { return matchEnd; }
   
   public Spans[] getSubSpans() {
@@ -115,16 +118,19 @@ public class NearSpansOrdered extends Spans {
 
   // TODO: Remove warning after API has been finalized
   // TODO: Would be nice to be able to lazy load payloads
+  @Override
   public Collection<byte[]> getPayload() throws IOException {
     return matchPayload;
   }
 
   // TODO: Remove warning after API has been finalized
- public boolean isPayloadAvailable() {
+  @Override
+  public boolean isPayloadAvailable() {
     return matchPayload.isEmpty() == false;
   }
 
   // inherit javadocs
+  @Override
   public boolean next() throws IOException {
     if (firstTime) {
       firstTime = false;
@@ -143,6 +149,7 @@ public class NearSpansOrdered extends Spans {
   }
 
   // inherit javadocs
+  @Override
   public boolean skipTo(int target) throws IOException {
     if (firstTime) {
       firstTime = false;
@@ -327,6 +334,7 @@ public class NearSpansOrdered extends Spans {
     return match; // ordered and allowed slop
   }
 
+  @Override
   public String toString() {
     return getClass().getName() + "("+query.toString()+")@"+
       (firstTime?"START":(more?(doc()+":"+start()+"-"+end()):"END"));
diff --git a/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java b/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
index db78483..a2dd6a6 100644
--- a/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
+++ b/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
@@ -56,6 +56,7 @@ public class NearSpansUnordered extends Spans {
       initialize(size);
     }
     
+    @Override
     protected final boolean lessThan(SpansCell spans1, SpansCell spans2) {
       if (spans1.doc() == spans2.doc()) {
         return NearSpansOrdered.docSpansOrdered(spans1, spans2);
@@ -78,10 +79,12 @@ public class NearSpansUnordered extends Spans {
       this.index = index;
     }
 
+    @Override
     public boolean next() throws IOException {
       return adjust(spans.next());
     }
 
+    @Override
     public boolean skipTo(int target) throws IOException {
       return adjust(spans.skipTo(target));
     }
@@ -103,19 +106,27 @@ public class NearSpansUnordered extends Spans {
       return condition;
     }
 
+    @Override
     public int doc() { return spans.doc(); }
+    
+    @Override
     public int start() { return spans.start(); }
+    
+    @Override
     public int end() { return spans.end(); }
                     // TODO: Remove warning after API has been finalized
+    @Override
     public Collection<byte[]> getPayload() throws IOException {
       return new ArrayList<byte[]>(spans.getPayload());
     }
 
     // TODO: Remove warning after API has been finalized
-   public boolean isPayloadAvailable() {
+    @Override
+    public boolean isPayloadAvailable() {
       return spans.isPayloadAvailable();
     }
 
+    @Override
     public String toString() { return spans.toString() + "#" + index; }
   }
 
@@ -138,6 +149,7 @@ public class NearSpansUnordered extends Spans {
   public Spans[] getSubSpans() {
 	  return subSpans;
   }
+  @Override
   public boolean next() throws IOException {
     if (firstTime) {
       initList(true);
@@ -189,6 +201,7 @@ public class NearSpansUnordered extends Spans {
     return false;                                 // no more matches
   }
 
+  @Override
   public boolean skipTo(int target) throws IOException {
     if (firstTime) {                              // initialize
       initList(false);
@@ -213,8 +226,11 @@ public class NearSpansUnordered extends Spans {
 
   private SpansCell min() { return queue.top(); }
 
+  @Override
   public int doc() { return min().doc(); }
+  @Override
   public int start() { return min().start(); }
+  @Override
   public int end() { return max.end(); }
 
   // TODO: Remove warning after API has been finalized
@@ -223,6 +239,7 @@ public class NearSpansUnordered extends Spans {
    * @return Collection of <code>byte[]</code> payloads
    * @throws IOException
    */
+  @Override
   public Collection<byte[]> getPayload() throws IOException {
     Set<byte[]> matchPayload = new HashSet<byte[]>();
     for (SpansCell cell = first; cell != null; cell = cell.next) {
@@ -234,6 +251,7 @@ public class NearSpansUnordered extends Spans {
   }
 
   // TODO: Remove warning after API has been finalized
+  @Override
   public boolean isPayloadAvailable() {
     SpansCell pointer = min();
     while (pointer != null) {
@@ -246,6 +264,7 @@ public class NearSpansUnordered extends Spans {
     return false;
   }
 
+  @Override
   public String toString() {
     return getClass().getName() + "("+query.toString()+")@"+
       (firstTime?"START":(more?(doc()+":"+start()+"-"+end()):"END"));
diff --git a/src/java/org/apache/lucene/search/spans/SpanFirstQuery.java b/src/java/org/apache/lucene/search/spans/SpanFirstQuery.java
index 16ecc2d..419f1e5 100644
--- a/src/java/org/apache/lucene/search/spans/SpanFirstQuery.java
+++ b/src/java/org/apache/lucene/search/spans/SpanFirstQuery.java
@@ -46,8 +46,10 @@ public class SpanFirstQuery extends SpanQuery implements Cloneable {
   /** Return the maximum end position permitted in a match. */
   public int getEnd() { return end; }
 
+  @Override
   public String getField() { return match.getField(); }
 
+  @Override
   public String toString(String field) {
     StringBuilder buffer = new StringBuilder();
     buffer.append("spanFirst(");
@@ -59,20 +61,24 @@ public class SpanFirstQuery extends SpanQuery implements Cloneable {
     return buffer.toString();
   }
   
+  @Override
   public Object clone() {
     SpanFirstQuery spanFirstQuery = new SpanFirstQuery((SpanQuery) match.clone(), end);
     spanFirstQuery.setBoost(getBoost());
     return spanFirstQuery;
   }
   
+  @Override
   public void extractTerms(Set<Term> terms) {
 	    match.extractTerms(terms);
   }
 
+  @Override
   public Spans getSpans(final IndexReader reader) throws IOException {
     return new Spans() {
         private Spans spans = match.getSpans(reader);
 
+        @Override
         public boolean next() throws IOException {
           while (spans.next()) {                  // scan to next match
             if (end() <= end)
@@ -81,6 +87,7 @@ public class SpanFirstQuery extends SpanQuery implements Cloneable {
           return false;
         }
 
+        @Override
         public boolean skipTo(int target) throws IOException {
           if (!spans.skipTo(target))
             return false;
@@ -89,11 +96,15 @@ public class SpanFirstQuery extends SpanQuery implements Cloneable {
 
         }
 
+        @Override
         public int doc() { return spans.doc(); }
+        @Override
         public int start() { return spans.start(); }
+        @Override
         public int end() { return spans.end(); }
 
       // TODO: Remove warning after API has been finalized
+      @Override
       public Collection<byte[]> getPayload() throws IOException {
         ArrayList<byte[]> result = null;
         if (spans.isPayloadAvailable()) {
@@ -103,10 +114,12 @@ public class SpanFirstQuery extends SpanQuery implements Cloneable {
       }
 
       // TODO: Remove warning after API has been finalized
-     public boolean isPayloadAvailable() {
+      @Override
+      public boolean isPayloadAvailable() {
         return spans.isPayloadAvailable();
       }
 
+      @Override
       public String toString() {
           return "spans(" + SpanFirstQuery.this.toString() + ")";
         }
@@ -114,6 +127,7 @@ public class SpanFirstQuery extends SpanQuery implements Cloneable {
       };
   }
 
+  @Override
   public Query rewrite(IndexReader reader) throws IOException {
     SpanFirstQuery clone = null;
 
@@ -130,6 +144,7 @@ public class SpanFirstQuery extends SpanQuery implements Cloneable {
     }
   }
 
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (!(o instanceof SpanFirstQuery)) return false;
@@ -140,6 +155,7 @@ public class SpanFirstQuery extends SpanQuery implements Cloneable {
          && this.getBoost() == other.getBoost();
   }
 
+  @Override
   public int hashCode() {
     int h = match.hashCode();
     h ^= (h << 8) | (h >>> 25);  // reversible
diff --git a/src/java/org/apache/lucene/search/spans/SpanNearQuery.java b/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
index 21f5617..402af83 100644
--- a/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
+++ b/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
@@ -79,8 +79,10 @@ public class SpanNearQuery extends SpanQuery implements Cloneable {
   /** Return true if matches are required to be in-order.*/
   public boolean isInOrder() { return inOrder; }
 
+  @Override
   public String getField() { return field; }
   
+  @Override
   public void extractTerms(Set<Term> terms) {
 	    for (final SpanQuery clause : clauses) {
 	      clause.extractTerms(terms);
@@ -88,6 +90,7 @@ public class SpanNearQuery extends SpanQuery implements Cloneable {
   }  
   
 
+  @Override
   public String toString(String field) {
     StringBuilder buffer = new StringBuilder();
     buffer.append("spanNear([");
@@ -108,6 +111,7 @@ public class SpanNearQuery extends SpanQuery implements Cloneable {
     return buffer.toString();
   }
 
+  @Override
   public Spans getSpans(final IndexReader reader) throws IOException {
     if (clauses.size() == 0)                      // optimize 0-clause case
       return new SpanOrQuery(getClauses()).getSpans(reader);
@@ -120,6 +124,7 @@ public class SpanNearQuery extends SpanQuery implements Cloneable {
             : (Spans) new NearSpansUnordered(this, reader);
   }
 
+  @Override
   public Query rewrite(IndexReader reader) throws IOException {
     SpanNearQuery clone = null;
     for (int i = 0 ; i < clauses.size(); i++) {
@@ -138,6 +143,7 @@ public class SpanNearQuery extends SpanQuery implements Cloneable {
     }
   }
   
+  @Override
   public Object clone() {
     int sz = clauses.size();
     SpanQuery[] newClauses = new SpanQuery[sz];
@@ -151,6 +157,7 @@ public class SpanNearQuery extends SpanQuery implements Cloneable {
   }
 
   /** Returns true iff <code>o</code> is equal to this. */
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (!(o instanceof SpanNearQuery)) return false;
@@ -164,6 +171,7 @@ public class SpanNearQuery extends SpanQuery implements Cloneable {
     return getBoost() == spanNearQuery.getBoost();
   }
 
+  @Override
   public int hashCode() {
     int result;
     result = clauses.hashCode();
diff --git a/src/java/org/apache/lucene/search/spans/SpanNotQuery.java b/src/java/org/apache/lucene/search/spans/SpanNotQuery.java
index c3792db..c6e891b 100644
--- a/src/java/org/apache/lucene/search/spans/SpanNotQuery.java
+++ b/src/java/org/apache/lucene/search/spans/SpanNotQuery.java
@@ -48,10 +48,13 @@ public class SpanNotQuery extends SpanQuery implements Cloneable {
   /** Return the SpanQuery whose matches must not overlap those returned. */
   public SpanQuery getExclude() { return exclude; }
 
+  @Override
   public String getField() { return include.getField(); }
 
+  @Override
   public void extractTerms(Set<Term> terms) { include.extractTerms(terms); }
 
+  @Override
   public String toString(String field) {
     StringBuilder buffer = new StringBuilder();
     buffer.append("spanNot(");
@@ -63,12 +66,14 @@ public class SpanNotQuery extends SpanQuery implements Cloneable {
     return buffer.toString();
   }
 
+  @Override
   public Object clone() {
     SpanNotQuery spanNotQuery = new SpanNotQuery((SpanQuery)include.clone(),(SpanQuery) exclude.clone());
     spanNotQuery.setBoost(getBoost());
     return  spanNotQuery;
   }
 
+  @Override
   public Spans getSpans(final IndexReader reader) throws IOException {
     return new Spans() {
         private Spans includeSpans = include.getSpans(reader);
@@ -77,6 +82,7 @@ public class SpanNotQuery extends SpanQuery implements Cloneable {
         private Spans excludeSpans = exclude.getSpans(reader);
         private boolean moreExclude = excludeSpans.next();
 
+        @Override
         public boolean next() throws IOException {
           if (moreInclude)                        // move to next include
             moreInclude = includeSpans.next();
@@ -102,6 +108,7 @@ public class SpanNotQuery extends SpanQuery implements Cloneable {
           return moreInclude;
         }
 
+        @Override
         public boolean skipTo(int target) throws IOException {
           if (moreInclude)                        // skip include
             moreInclude = includeSpans.skipTo(target);
@@ -127,11 +134,15 @@ public class SpanNotQuery extends SpanQuery implements Cloneable {
           return next();                          // scan to next match
         }
 
+        @Override
         public int doc() { return includeSpans.doc(); }
+        @Override
         public int start() { return includeSpans.start(); }
+        @Override
         public int end() { return includeSpans.end(); }
 
       // TODO: Remove warning after API has been finalized
+      @Override
       public Collection<byte[]> getPayload() throws IOException {
         ArrayList<byte[]> result = null;
         if (includeSpans.isPayloadAvailable()) {
@@ -141,10 +152,12 @@ public class SpanNotQuery extends SpanQuery implements Cloneable {
       }
 
       // TODO: Remove warning after API has been finalized
-     public boolean isPayloadAvailable() {
+      @Override
+      public boolean isPayloadAvailable() {
         return includeSpans.isPayloadAvailable();
       }
 
+      @Override
       public String toString() {
           return "spans(" + SpanNotQuery.this.toString() + ")";
         }
@@ -152,6 +165,7 @@ public class SpanNotQuery extends SpanQuery implements Cloneable {
       };
   }
 
+  @Override
   public Query rewrite(IndexReader reader) throws IOException {
     SpanNotQuery clone = null;
 
@@ -174,6 +188,7 @@ public class SpanNotQuery extends SpanQuery implements Cloneable {
   }
 
     /** Returns true iff <code>o</code> is equal to this. */
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (!(o instanceof SpanNotQuery)) return false;
@@ -184,6 +199,7 @@ public class SpanNotQuery extends SpanQuery implements Cloneable {
             && this.getBoost() == other.getBoost();
   }
 
+  @Override
   public int hashCode() {
     int h = include.hashCode();
     h = (h<<1) | (h >>> 31);  // rotate left
diff --git a/src/java/org/apache/lucene/search/spans/SpanOrQuery.java b/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
index a661028..baf1233 100644
--- a/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
+++ b/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
@@ -57,14 +57,17 @@ public class SpanOrQuery extends SpanQuery implements Cloneable {
     return clauses.toArray(new SpanQuery[clauses.size()]);
   }
 
+  @Override
   public String getField() { return field; }
 
+  @Override
   public void extractTerms(Set<Term> terms) {
     for(final SpanQuery clause: clauses) {
       clause.extractTerms(terms);
     }
   }
   
+  @Override
   public Object clone() {
     int sz = clauses.size();
     SpanQuery[] newClauses = new SpanQuery[sz];
@@ -77,6 +80,7 @@ public class SpanOrQuery extends SpanQuery implements Cloneable {
     return soq;
   }
 
+  @Override
   public Query rewrite(IndexReader reader) throws IOException {
     SpanOrQuery clone = null;
     for (int i = 0 ; i < clauses.size(); i++) {
@@ -95,6 +99,7 @@ public class SpanOrQuery extends SpanQuery implements Cloneable {
     }
   }
 
+  @Override
   public String toString(String field) {
     StringBuilder buffer = new StringBuilder();
     buffer.append("spanOr([");
@@ -111,6 +116,7 @@ public class SpanOrQuery extends SpanQuery implements Cloneable {
     return buffer.toString();
   }
 
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (o == null || getClass() != o.getClass()) return false;
@@ -123,6 +129,7 @@ public class SpanOrQuery extends SpanQuery implements Cloneable {
     return getBoost() == that.getBoost();
   }
 
+  @Override
   public int hashCode() {
     int h = clauses.hashCode();
     h ^= (h << 10) | (h >>> 23);
@@ -136,6 +143,7 @@ public class SpanOrQuery extends SpanQuery implements Cloneable {
       initialize(size);
     }
 
+    @Override
     protected final boolean lessThan(Spans spans1, Spans spans2) {
       if (spans1.doc() == spans2.doc()) {
         if (spans1.start() == spans2.start()) {
@@ -149,6 +157,7 @@ public class SpanOrQuery extends SpanQuery implements Cloneable {
     }
   }
 
+  @Override
   public Spans getSpans(final IndexReader reader) throws IOException {
     if (clauses.size() == 1)                      // optimize 1-clause case
       return (clauses.get(0)).getSpans(reader);
@@ -169,6 +178,7 @@ public class SpanOrQuery extends SpanQuery implements Cloneable {
           return queue.size() != 0;
         }
 
+        @Override
         public boolean next() throws IOException {
           if (queue == null) {
             return initSpanQueue(-1);
@@ -189,6 +199,7 @@ public class SpanOrQuery extends SpanQuery implements Cloneable {
 
         private Spans top() { return queue.top(); }
 
+        @Override
         public boolean skipTo(int target) throws IOException {
           if (queue == null) {
             return initSpanQueue(target);
@@ -210,10 +221,14 @@ public class SpanOrQuery extends SpanQuery implements Cloneable {
           return next();
         }
 
+        @Override
         public int doc() { return top().doc(); }
+        @Override
         public int start() { return top().start(); }
+        @Override
         public int end() { return top().end(); }
 
+      @Override
       public Collection<byte[]> getPayload() throws IOException {
         ArrayList<byte[]> result = null;
         Spans theTop = top();
@@ -223,11 +238,13 @@ public class SpanOrQuery extends SpanQuery implements Cloneable {
         return result;
       }
 
-     public boolean isPayloadAvailable() {
+      @Override
+      public boolean isPayloadAvailable() {
         Spans top = top();
         return top != null && top.isPayloadAvailable();
       }
 
+      @Override
       public String toString() {
           return "spans("+SpanOrQuery.this+")@"+
             ((queue == null)?"START"
diff --git a/src/java/org/apache/lucene/search/spans/SpanQuery.java b/src/java/org/apache/lucene/search/spans/SpanQuery.java
index 6a66d27..cae18b6 100644
--- a/src/java/org/apache/lucene/search/spans/SpanQuery.java
+++ b/src/java/org/apache/lucene/search/spans/SpanQuery.java
@@ -33,6 +33,7 @@ public abstract class SpanQuery extends Query {
   /** Returns the name of the field matched by this query.*/
   public abstract String getField();
 
+  @Override
   public Weight createWeight(Searcher searcher) throws IOException {
     return new SpanWeight(this, searcher);
   }
diff --git a/src/java/org/apache/lucene/search/spans/SpanTermQuery.java b/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
index 06a0b4e..2808c4b 100644
--- a/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
+++ b/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
@@ -34,12 +34,15 @@ public class SpanTermQuery extends SpanQuery {
   /** Return the term whose spans are matched. */
   public Term getTerm() { return term; }
 
+  @Override
   public String getField() { return term.field(); }
   
+  @Override
   public void extractTerms(Set<Term> terms) {
 	  terms.add(term);
   }
 
+  @Override
   public String toString(String field) {
     StringBuilder buffer = new StringBuilder();
     if (term.field().equals(field))
@@ -50,6 +53,7 @@ public class SpanTermQuery extends SpanQuery {
     return buffer.toString();
   }
 
+  @Override
   public int hashCode() {
     final int prime = 31;
     int result = super.hashCode();
@@ -57,6 +61,7 @@ public class SpanTermQuery extends SpanQuery {
     return result;
   }
 
+  @Override
   public boolean equals(Object obj) {
     if (this == obj)
       return true;
@@ -73,6 +78,7 @@ public class SpanTermQuery extends SpanQuery {
     return true;
   }
 
+  @Override
   public Spans getSpans(final IndexReader reader) throws IOException {
     return new TermSpans(reader.termPositions(term), term);
   }
diff --git a/src/java/org/apache/lucene/search/spans/TermSpans.java b/src/java/org/apache/lucene/search/spans/TermSpans.java
index 4a35ec4..091762a 100644
--- a/src/java/org/apache/lucene/search/spans/TermSpans.java
+++ b/src/java/org/apache/lucene/search/spans/TermSpans.java
@@ -43,6 +43,7 @@ public class TermSpans extends Spans {
     doc = -1;
   }
 
+  @Override
   public boolean next() throws IOException {
     if (count == freq) {
       if (!positions.next()) {
@@ -58,6 +59,7 @@ public class TermSpans extends Spans {
     return true;
   }
 
+  @Override
   public boolean skipTo(int target) throws IOException {
     if (!positions.skipTo(target)) {
       doc = Integer.MAX_VALUE;
@@ -74,19 +76,23 @@ public class TermSpans extends Spans {
     return true;
   }
 
+  @Override
   public int doc() {
     return doc;
   }
 
+  @Override
   public int start() {
     return position;
   }
 
+  @Override
   public int end() {
     return position + 1;
   }
 
   // TODO: Remove warning after API has been finalized
+  @Override
   public Collection<byte[]> getPayload() throws IOException {
     byte [] bytes = new byte[positions.getPayloadLength()]; 
     bytes = positions.getPayload(bytes, 0);
@@ -94,10 +100,12 @@ public class TermSpans extends Spans {
   }
 
   // TODO: Remove warning after API has been finalized
- public boolean isPayloadAvailable() {
+  @Override
+  public boolean isPayloadAvailable() {
     return positions.isPayloadAvailable();
   }
 
+  @Override
   public String toString() {
     return "spans(" + term.toString() + ")@" +
             (doc == -1 ? "START" : (doc == Integer.MAX_VALUE) ? "END" : doc + "-" + position);
diff --git a/src/java/org/apache/lucene/store/BufferedIndexInput.java b/src/java/org/apache/lucene/store/BufferedIndexInput.java
index 6b00a47..e29372e 100644
--- a/src/java/org/apache/lucene/store/BufferedIndexInput.java
+++ b/src/java/org/apache/lucene/store/BufferedIndexInput.java
@@ -33,6 +33,7 @@ public abstract class BufferedIndexInput extends IndexInput {
   private int bufferLength = 0;			  // end of valid bytes
   private int bufferPosition = 0;		  // next byte to read
 
+  @Override
   public byte readByte() throws IOException {
     if (bufferPosition >= bufferLength)
       refill();
@@ -88,10 +89,12 @@ public abstract class BufferedIndexInput extends IndexInput {
       throw new IllegalArgumentException("bufferSize must be greater than 0 (got " + bufferSize + ")");
   }
 
+  @Override
   public void readBytes(byte[] b, int offset, int len) throws IOException {
     readBytes(b, offset, len, true);
   }
 
+  @Override
   public void readBytes(byte[] b, int offset, int len, boolean useBuffer) throws IOException {
 
     if(len <= (bufferLength-bufferPosition)){
@@ -169,8 +172,10 @@ public abstract class BufferedIndexInput extends IndexInput {
   protected abstract void readInternal(byte[] b, int offset, int length)
           throws IOException;
 
+  @Override
   public long getFilePointer() { return bufferStart + bufferPosition; }
 
+  @Override
   public void seek(long pos) throws IOException {
     if (pos >= bufferStart && pos < (bufferStart + bufferLength))
       bufferPosition = (int)(pos - bufferStart);  // seek within buffer
@@ -188,6 +193,7 @@ public abstract class BufferedIndexInput extends IndexInput {
    */
   protected abstract void seekInternal(long pos) throws IOException;
 
+  @Override
   public Object clone() {
     BufferedIndexInput clone = (BufferedIndexInput)super.clone();
 
diff --git a/src/java/org/apache/lucene/store/BufferedIndexOutput.java b/src/java/org/apache/lucene/store/BufferedIndexOutput.java
index 2c97590..1dfbcec 100644
--- a/src/java/org/apache/lucene/store/BufferedIndexOutput.java
+++ b/src/java/org/apache/lucene/store/BufferedIndexOutput.java
@@ -30,6 +30,7 @@ public abstract class BufferedIndexOutput extends IndexOutput {
   /** Writes a single byte.
    * @see IndexInput#readByte()
    */
+  @Override
   public void writeByte(byte b) throws IOException {
     if (bufferPosition >= BUFFER_SIZE)
       flush();
@@ -41,6 +42,7 @@ public abstract class BufferedIndexOutput extends IndexOutput {
    * @param length the number of bytes to write
    * @see IndexInput#readBytes(byte[],int,int)
    */
+  @Override
   public void writeBytes(byte[] b, int offset, int length) throws IOException {
     int bytesLeft = BUFFER_SIZE - bufferPosition;
     // is there enough space in the buffer?
@@ -81,6 +83,7 @@ public abstract class BufferedIndexOutput extends IndexOutput {
   }
 
   /** Forces any buffered output to be written. */
+  @Override
   public void flush() throws IOException {
     flushBuffer(buffer, bufferPosition);
     bufferStart += bufferPosition;
@@ -105,6 +108,7 @@ public abstract class BufferedIndexOutput extends IndexOutput {
   protected abstract void flushBuffer(byte[] b, int offset, int len) throws IOException;
   
   /** Closes this stream to further operations. */
+  @Override
   public void close() throws IOException {
     flush();
   }
@@ -113,6 +117,7 @@ public abstract class BufferedIndexOutput extends IndexOutput {
    * occur.
    * @see #seek(long)
    */
+  @Override
   public long getFilePointer() {
     return bufferStart + bufferPosition;
   }
@@ -120,12 +125,14 @@ public abstract class BufferedIndexOutput extends IndexOutput {
   /** Sets current position in this file, where the next write will occur.
    * @see #getFilePointer()
    */
+  @Override
   public void seek(long pos) throws IOException {
     flush();
     bufferStart = pos;
   }
 
   /** The number of bytes in the file. */
+  @Override
   public abstract long length() throws IOException;
 
 
diff --git a/src/java/org/apache/lucene/store/ChecksumIndexInput.java b/src/java/org/apache/lucene/store/ChecksumIndexInput.java
index e90f6a6..d576e20 100644
--- a/src/java/org/apache/lucene/store/ChecksumIndexInput.java
+++ b/src/java/org/apache/lucene/store/ChecksumIndexInput.java
@@ -32,12 +32,14 @@ public class ChecksumIndexInput extends IndexInput {
     digest = new CRC32();
   }
 
+  @Override
   public byte readByte() throws IOException {
     final byte b = main.readByte();
     digest.update(b);
     return b;
   }
 
+  @Override
   public void readBytes(byte[] b, int offset, int len)
     throws IOException {
     main.readBytes(b, offset, len);
@@ -49,18 +51,22 @@ public class ChecksumIndexInput extends IndexInput {
     return digest.getValue();
   }
 
+  @Override
   public void close() throws IOException {
     main.close();
   }
 
+  @Override
   public long getFilePointer() {
     return main.getFilePointer();
   }
 
+  @Override
   public void seek(long pos) {
     throw new RuntimeException("not allowed");
   }
 
+  @Override
   public long length() {
     return main.length();
   }
diff --git a/src/java/org/apache/lucene/store/ChecksumIndexOutput.java b/src/java/org/apache/lucene/store/ChecksumIndexOutput.java
index ad2895b..4073b2a 100644
--- a/src/java/org/apache/lucene/store/ChecksumIndexOutput.java
+++ b/src/java/org/apache/lucene/store/ChecksumIndexOutput.java
@@ -32,11 +32,13 @@ public class ChecksumIndexOutput extends IndexOutput {
     digest = new CRC32();
   }
 
+  @Override
   public void writeByte(byte b) throws IOException {
     digest.update(b);
     main.writeByte(b);
   }
 
+  @Override
   public void writeBytes(byte[] b, int offset, int length) throws IOException {
     digest.update(b, offset, length);
     main.writeBytes(b, offset, length);
@@ -46,18 +48,22 @@ public class ChecksumIndexOutput extends IndexOutput {
     return digest.getValue();
   }
 
+  @Override
   public void flush() throws IOException {
     main.flush();
   }
 
+  @Override
   public void close() throws IOException {
     main.close();
   }
 
+  @Override
   public long getFilePointer() {
     return main.getFilePointer();
   }
 
+  @Override
   public void seek(long pos) {
     throw new RuntimeException("not allowed");    
   }
@@ -86,6 +92,7 @@ public class ChecksumIndexOutput extends IndexOutput {
     main.writeLong(getChecksum());
   }
 
+  @Override
   public long length() throws IOException {
     return main.length();
   }
diff --git a/src/java/org/apache/lucene/store/FSDirectory.java b/src/java/org/apache/lucene/store/FSDirectory.java
index f49d97a..fd7891b 100644
--- a/src/java/org/apache/lucene/store/FSDirectory.java
+++ b/src/java/org/apache/lucene/store/FSDirectory.java
@@ -238,12 +238,14 @@ public abstract class FSDirectory extends Directory {
   /** Lists all files (not subdirectories) in the
    * directory.
    * @see #listAll(File) */
+  @Override
   public String[] listAll() throws IOException {
     ensureOpen();
     return listAll(directory);
   }
 
   /** Returns true iff a file with the given name exists. */
+  @Override
   public boolean fileExists(String name) {
     ensureOpen();
     File file = new File(directory, name);
@@ -251,6 +253,7 @@ public abstract class FSDirectory extends Directory {
   }
 
   /** Returns the time the named file was last modified. */
+  @Override
   public long fileModified(String name) {
     ensureOpen();
     File file = new File(directory, name);
@@ -264,6 +267,7 @@ public abstract class FSDirectory extends Directory {
   }
 
   /** Set the modified time of an existing file to now. */
+  @Override
   public void touchFile(String name) {
     ensureOpen();
     File file = new File(directory, name);
@@ -271,6 +275,7 @@ public abstract class FSDirectory extends Directory {
   }
 
   /** Returns the length in bytes of a file in the directory. */
+  @Override
   public long fileLength(String name) {
     ensureOpen();
     File file = new File(directory, name);
@@ -278,6 +283,7 @@ public abstract class FSDirectory extends Directory {
   }
 
   /** Removes an existing file in the directory. */
+  @Override
   public void deleteFile(String name) throws IOException {
     ensureOpen();
     File file = new File(directory, name);
@@ -285,6 +291,7 @@ public abstract class FSDirectory extends Directory {
       throw new IOException("Cannot delete " + file);
   }
 
+  @Override
   public void sync(String name) throws IOException {
     ensureOpen();
     File fullFile = new File(directory, name);
@@ -323,6 +330,7 @@ public abstract class FSDirectory extends Directory {
   }
 
   // Inherit javadoc
+  @Override
   public IndexInput openInput(String name) throws IOException {
     ensureOpen();
     return openInput(name, BufferedIndexInput.BUFFER_SIZE);
@@ -335,6 +343,7 @@ public abstract class FSDirectory extends Directory {
   {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};
 
   
+  @Override
   public String getLockID() {
     ensureOpen();
     String dirName;                               // name to be hashed
@@ -360,6 +369,7 @@ public abstract class FSDirectory extends Directory {
   }
 
   /** Closes the store to future operations. */
+  @Override
   public synchronized void close() {
     isOpen = false;
   }
@@ -370,6 +380,7 @@ public abstract class FSDirectory extends Directory {
   }
 
   /** For debug output. */
+  @Override
   public String toString() {
     return this.getClass().getName() + "@" + directory;
   }
diff --git a/src/java/org/apache/lucene/store/FileSwitchDirectory.java b/src/java/org/apache/lucene/store/FileSwitchDirectory.java
index f060e70..9001402 100644
--- a/src/java/org/apache/lucene/store/FileSwitchDirectory.java
+++ b/src/java/org/apache/lucene/store/FileSwitchDirectory.java
@@ -59,6 +59,7 @@ public class FileSwitchDirectory extends Directory {
     return secondaryDir;
   }
   
+  @Override
   public void close() throws IOException {
     if (doClose) {
       try {
@@ -70,6 +71,7 @@ public class FileSwitchDirectory extends Directory {
     }
   }
   
+  @Override
   public String[] listAll() throws IOException {
     String[] primaryFiles = primaryDir.listAll();
     String[] secondaryFiles = secondaryDir.listAll();
@@ -97,34 +99,42 @@ public class FileSwitchDirectory extends Directory {
     }
   }
 
+  @Override
   public boolean fileExists(String name) throws IOException {
     return getDirectory(name).fileExists(name);
   }
 
+  @Override
   public long fileModified(String name) throws IOException {
     return getDirectory(name).fileModified(name);
   }
 
+  @Override
   public void touchFile(String name) throws IOException {
     getDirectory(name).touchFile(name);
   }
 
+  @Override
   public void deleteFile(String name) throws IOException {
     getDirectory(name).deleteFile(name);
   }
 
+  @Override
   public long fileLength(String name) throws IOException {
     return getDirectory(name).fileLength(name);
   }
 
+  @Override
   public IndexOutput createOutput(String name) throws IOException {
     return getDirectory(name).createOutput(name);
   }
 
+  @Override
   public void sync(String name) throws IOException {
     getDirectory(name).sync(name);
   }
 
+  @Override
   public IndexInput openInput(String name) throws IOException {
     return getDirectory(name).openInput(name);
   }
diff --git a/src/java/org/apache/lucene/store/IndexInput.java b/src/java/org/apache/lucene/store/IndexInput.java
index 9b52b63..a45e983 100644
--- a/src/java/org/apache/lucene/store/IndexInput.java
+++ b/src/java/org/apache/lucene/store/IndexInput.java
@@ -217,6 +217,7 @@ public abstract class IndexInput implements Cloneable,Closeable {
    * different points in the input from each other and from the stream they
    * were cloned from.
    */
+  @Override
   public Object clone() {
     IndexInput clone = null;
     try {
diff --git a/src/java/org/apache/lucene/store/MMapDirectory.java b/src/java/org/apache/lucene/store/MMapDirectory.java
index e447ccd..0f29394 100644
--- a/src/java/org/apache/lucene/store/MMapDirectory.java
+++ b/src/java/org/apache/lucene/store/MMapDirectory.java
@@ -202,6 +202,7 @@ public class MMapDirectory extends FSDirectory {
         this.buffer = raf.getChannel().map(MapMode.READ_ONLY, 0, length);
     }
 
+    @Override
     public byte readByte() throws IOException {
       try {
         return buffer.get();
@@ -210,6 +211,7 @@ public class MMapDirectory extends FSDirectory {
       }
     }
 
+    @Override
     public void readBytes(byte[] b, int offset, int len) throws IOException {
       try {
         buffer.get(b, offset, len);
@@ -218,18 +220,22 @@ public class MMapDirectory extends FSDirectory {
       }
     }
 
+    @Override
     public long getFilePointer() {
       return buffer.position();
     }
 
+    @Override
     public void seek(long pos) throws IOException {
       buffer.position((int)pos);
     }
 
+    @Override
     public long length() {
       return length;
     }
 
+    @Override
     public Object clone() {
       MMapIndexInput clone = (MMapIndexInput)super.clone();
       clone.isClone = true;
@@ -237,6 +243,7 @@ public class MMapDirectory extends FSDirectory {
       return clone;
     }
 
+    @Override
     public void close() throws IOException {
       if (isClone || buffer == null) return;
       // unmap the buffer (if enabled) and at least unset it for GC
@@ -299,6 +306,7 @@ public class MMapDirectory extends FSDirectory {
       seek(0L);
     }
   
+    @Override
     public byte readByte() throws IOException {
       // Performance might be improved by reading ahead into an array of
       // e.g. 128 bytes and readByte() from there.
@@ -314,6 +322,7 @@ public class MMapDirectory extends FSDirectory {
       return curBuf.get();
     }
   
+    @Override
     public void readBytes(byte[] b, int offset, int len) throws IOException {
       while (len > curAvail) {
         curBuf.get(b, offset, curAvail);
@@ -330,10 +339,12 @@ public class MMapDirectory extends FSDirectory {
       curAvail -= len;
     }
   
+    @Override
     public long getFilePointer() {
       return ((long) curBufIndex * maxBufSize) + curBuf.position();
     }
   
+    @Override
     public void seek(long pos) throws IOException {
       curBufIndex = (int) (pos / maxBufSize);
       curBuf = buffers[curBufIndex];
@@ -342,10 +353,12 @@ public class MMapDirectory extends FSDirectory {
       curAvail = bufSizes[curBufIndex] - bufOffset;
     }
   
+    @Override
     public long length() {
       return length;
     }
   
+    @Override
     public Object clone() {
       MultiMMapIndexInput clone = (MultiMMapIndexInput)super.clone();
       clone.isClone = true;
@@ -366,6 +379,7 @@ public class MMapDirectory extends FSDirectory {
       return clone;
     }
   
+    @Override
     public void close() throws IOException {
       if (isClone || buffers == null) return;
       try {
@@ -384,6 +398,7 @@ public class MMapDirectory extends FSDirectory {
   }
   
   /** Creates an IndexInput for the file with the given name. */
+  @Override
   public IndexInput openInput(String name, int bufferSize) throws IOException {
     ensureOpen();
     File f =  new File(getFile(), name);
@@ -398,6 +413,7 @@ public class MMapDirectory extends FSDirectory {
   }
 
   /** Creates an IndexOutput for the file with the given name. */
+  @Override
   public IndexOutput createOutput(String name) throws IOException {
     initOutput(name);
     return new SimpleFSDirectory.SimpleFSIndexOutput(new File(directory, name));
diff --git a/src/java/org/apache/lucene/store/NIOFSDirectory.java b/src/java/org/apache/lucene/store/NIOFSDirectory.java
index 5548f6f..78d60a8 100644
--- a/src/java/org/apache/lucene/store/NIOFSDirectory.java
+++ b/src/java/org/apache/lucene/store/NIOFSDirectory.java
@@ -61,12 +61,14 @@ public class NIOFSDirectory extends FSDirectory {
   }
 
   /** Creates an IndexInput for the file with the given name. */
+  @Override
   public IndexInput openInput(String name, int bufferSize) throws IOException {
     ensureOpen();
     return new NIOFSIndexInput(new File(getFile(), name), bufferSize, getReadChunkSize());
   }
 
   /** Creates an IndexOutput for the file with the given name. */
+  @Override
   public IndexOutput createOutput(String name) throws IOException {
     initOutput(name);
     return new SimpleFSDirectory.SimpleFSIndexOutput(new File(directory, name));
@@ -86,11 +88,13 @@ public class NIOFSDirectory extends FSDirectory {
       channel = file.getChannel();
     }
 
+    @Override
     protected void newBuffer(byte[] newBuffer) {
       super.newBuffer(newBuffer);
       byteBuf = ByteBuffer.wrap(newBuffer);
     }
 
+    @Override
     public void close() throws IOException {
       if (!isClone && file.isOpen) {
         // Close the channel & file
@@ -102,6 +106,7 @@ public class NIOFSDirectory extends FSDirectory {
       }
     }
 
+    @Override
     protected void readInternal(byte[] b, int offset, int len) throws IOException {
 
       final ByteBuffer bb;
diff --git a/src/java/org/apache/lucene/store/NativeFSLockFactory.java b/src/java/org/apache/lucene/store/NativeFSLockFactory.java
index 4649fbe..fa813d4 100755
--- a/src/java/org/apache/lucene/store/NativeFSLockFactory.java
+++ b/src/java/org/apache/lucene/store/NativeFSLockFactory.java
@@ -122,6 +122,7 @@ public class NativeFSLockFactory extends FSLockFactory {
     setLockDir(lockDir);
   }
 
+  @Override
   public synchronized Lock makeLock(String lockName) {
     acquireTestLock();
     if (lockPrefix != null)
@@ -129,6 +130,7 @@ public class NativeFSLockFactory extends FSLockFactory {
     return new NativeFSLock(lockDir, lockName);
   }
 
+  @Override
   public void clearLock(String lockName) throws IOException {
     // Note that this isn't strictly required anymore
     // because the existence of these files does not mean
@@ -175,6 +177,7 @@ class NativeFSLock extends Lock {
     return lock != null;
   }
 
+  @Override
   public synchronized boolean obtain() throws IOException {
 
     if (lockExists()) {
@@ -274,6 +277,7 @@ class NativeFSLock extends Lock {
     return lockExists();
   }
 
+  @Override
   public synchronized void release() throws IOException {
     if (lockExists()) {
       try {
@@ -299,6 +303,7 @@ class NativeFSLock extends Lock {
     }
   }
 
+  @Override
   public synchronized boolean isLocked() {
     // The test for is isLocked is not directly possible with native file locks:
     
@@ -318,6 +323,7 @@ class NativeFSLock extends Lock {
     }    
   }
 
+  @Override
   public String toString() {
     return "NativeFSLock@" + path;
   }
diff --git a/src/java/org/apache/lucene/store/NoLockFactory.java b/src/java/org/apache/lucene/store/NoLockFactory.java
index 2bc9d4b..32510ff 100755
--- a/src/java/org/apache/lucene/store/NoLockFactory.java
+++ b/src/java/org/apache/lucene/store/NoLockFactory.java
@@ -38,25 +38,31 @@ public class NoLockFactory extends LockFactory {
     return singleton;
   }
 
+  @Override
   public Lock makeLock(String lockName) {
     return singletonLock;
   }
 
+  @Override
   public void clearLock(String lockName) {};
 };
 
 class NoLock extends Lock {
+  @Override
   public boolean obtain() throws IOException {
     return true;
   }
 
+  @Override
   public void release() {
   }
 
+  @Override
   public boolean isLocked() {
     return false;
   }
 
+  @Override
   public String toString() {
     return "NoLock";
   }
diff --git a/src/java/org/apache/lucene/store/RAMDirectory.java b/src/java/org/apache/lucene/store/RAMDirectory.java
index a1b49d9..4f9742c 100644
--- a/src/java/org/apache/lucene/store/RAMDirectory.java
+++ b/src/java/org/apache/lucene/store/RAMDirectory.java
@@ -69,6 +69,7 @@ public class RAMDirectory extends Directory implements Serializable {
     Directory.copy(dir, this, closeDir);
   }
 
+  @Override
   public synchronized final String[] listAll() {
     ensureOpen();
     Set<String> fileNames = fileMap.keySet();
@@ -80,6 +81,7 @@ public class RAMDirectory extends Directory implements Serializable {
   }
 
   /** Returns true iff the named file exists in this directory. */
+  @Override
   public final boolean fileExists(String name) {
     ensureOpen();
     RAMFile file;
@@ -92,6 +94,7 @@ public class RAMDirectory extends Directory implements Serializable {
   /** Returns the time the named file was last modified.
    * @throws IOException if the file does not exist
    */
+  @Override
   public final long fileModified(String name) throws IOException {
     ensureOpen();
     RAMFile file;
@@ -106,6 +109,7 @@ public class RAMDirectory extends Directory implements Serializable {
   /** Set the modified time of an existing file to now.
    * @throws IOException if the file does not exist
    */
+  @Override
   public void touchFile(String name) throws IOException {
     ensureOpen();
     RAMFile file;
@@ -134,6 +138,7 @@ public class RAMDirectory extends Directory implements Serializable {
   /** Returns the length in bytes of a file in the directory.
    * @throws IOException if the file does not exist
    */
+  @Override
   public final long fileLength(String name) throws IOException {
     ensureOpen();
     RAMFile file;
@@ -156,6 +161,7 @@ public class RAMDirectory extends Directory implements Serializable {
   /** Removes an existing file in the directory.
    * @throws IOException if the file does not exist
    */
+  @Override
   public synchronized void deleteFile(String name) throws IOException {
     ensureOpen();
     RAMFile file = fileMap.get(name);
@@ -168,6 +174,7 @@ public class RAMDirectory extends Directory implements Serializable {
   }
 
   /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */
+  @Override
   public IndexOutput createOutput(String name) throws IOException {
     ensureOpen();
     RAMFile file = new RAMFile(this);
@@ -183,6 +190,7 @@ public class RAMDirectory extends Directory implements Serializable {
   }
 
   /** Returns a stream reading an existing file. */
+  @Override
   public IndexInput openInput(String name) throws IOException {
     ensureOpen();
     RAMFile file;
@@ -195,6 +203,7 @@ public class RAMDirectory extends Directory implements Serializable {
   }
 
   /** Closes the store to future operations, releasing associated memory. */
+  @Override
   public void close() {
     isOpen = false;
     fileMap = null;
diff --git a/src/java/org/apache/lucene/store/RAMInputStream.java b/src/java/org/apache/lucene/store/RAMInputStream.java
index 0655415..8de5511 100644
--- a/src/java/org/apache/lucene/store/RAMInputStream.java
+++ b/src/java/org/apache/lucene/store/RAMInputStream.java
@@ -49,14 +49,17 @@ class RAMInputStream extends IndexInput implements Cloneable {
     currentBuffer = null;
   }
 
+  @Override
   public void close() {
     // nothing to do here
   }
 
+  @Override
   public long length() {
     return length;
   }
 
+  @Override
   public byte readByte() throws IOException {
     if (bufferPosition >= bufferLength) {
       currentBufferIndex++;
@@ -65,6 +68,7 @@ class RAMInputStream extends IndexInput implements Cloneable {
     return currentBuffer[bufferPosition++];
   }
 
+  @Override
   public void readBytes(byte[] b, int offset, int len) throws IOException {
     while (len > 0) {
       if (bufferPosition >= bufferLength) {
@@ -100,10 +104,12 @@ class RAMInputStream extends IndexInput implements Cloneable {
     }
   }
 
+  @Override
   public long getFilePointer() {
     return currentBufferIndex < 0 ? 0 : bufferStart + bufferPosition;
   }
 
+  @Override
   public void seek(long pos) throws IOException {
     if (currentBuffer==null || pos < bufferStart || pos >= bufferStart + BUFFER_SIZE) {
       currentBufferIndex = (int) (pos / BUFFER_SIZE);
diff --git a/src/java/org/apache/lucene/store/RAMOutputStream.java b/src/java/org/apache/lucene/store/RAMOutputStream.java
index 5a38426..801a402 100644
--- a/src/java/org/apache/lucene/store/RAMOutputStream.java
+++ b/src/java/org/apache/lucene/store/RAMOutputStream.java
@@ -77,10 +77,12 @@ public class RAMOutputStream extends IndexOutput {
     file.setLength(0);
   }
 
+  @Override
   public void close() throws IOException {
     flush();
   }
 
+  @Override
   public void seek(long pos) throws IOException {
     // set the file length in case we seek back
     // and flush() has not been called yet
@@ -93,10 +95,12 @@ public class RAMOutputStream extends IndexOutput {
     bufferPosition = (int) (pos % BUFFER_SIZE);
   }
 
+  @Override
   public long length() {
     return file.length;
   }
 
+  @Override
   public void writeByte(byte b) throws IOException {
     if (bufferPosition == bufferLength) {
       currentBufferIndex++;
@@ -105,6 +109,7 @@ public class RAMOutputStream extends IndexOutput {
     currentBuffer[bufferPosition++] = b;
   }
 
+  @Override
   public void writeBytes(byte[] b, int offset, int len) throws IOException {
     assert b != null;
     while (len > 0) {
@@ -140,11 +145,13 @@ public class RAMOutputStream extends IndexOutput {
     }
   }
 
+  @Override
   public void flush() throws IOException {
     file.setLastModified(System.currentTimeMillis());
     setFileLength();
   }
 
+  @Override
   public long getFilePointer() {
     return currentBufferIndex < 0 ? 0 : bufferStart + bufferPosition;
   }
diff --git a/src/java/org/apache/lucene/store/SimpleFSDirectory.java b/src/java/org/apache/lucene/store/SimpleFSDirectory.java
index 00fbb3c..ee64c98 100644
--- a/src/java/org/apache/lucene/store/SimpleFSDirectory.java
+++ b/src/java/org/apache/lucene/store/SimpleFSDirectory.java
@@ -50,12 +50,14 @@ public class SimpleFSDirectory extends FSDirectory {
   }
 
   /** Creates an IndexOutput for the file with the given name. */
+  @Override
   public IndexOutput createOutput(String name) throws IOException {
     initOutput(name);
     return new SimpleFSIndexOutput(new File(directory, name));
   }
 
   /** Creates an IndexInput for the file with the given name. */
+  @Override
   public IndexInput openInput(String name, int bufferSize) throws IOException {
     ensureOpen();
     return new SimpleFSIndexInput(new File(directory, name), bufferSize, getReadChunkSize());
@@ -76,6 +78,7 @@ public class SimpleFSDirectory extends FSDirectory {
         length=length();
       }
   
+      @Override
       public void close() throws IOException {
         if (isOpen) {
           isOpen=false;
@@ -96,6 +99,7 @@ public class SimpleFSDirectory extends FSDirectory {
     }
   
     /** IndexInput methods */
+    @Override
     protected void readInternal(byte[] b, int offset, int len)
          throws IOException {
       synchronized (file) {
@@ -135,18 +139,22 @@ public class SimpleFSDirectory extends FSDirectory {
       }
     }
   
+    @Override
     public void close() throws IOException {
       // only close the file if this is not a clone
       if (!isClone) file.close();
     }
   
+    @Override
     protected void seekInternal(long position) {
     }
   
+    @Override
     public long length() {
       return file.length;
     }
   
+    @Override
     public Object clone() {
       SimpleFSIndexInput clone = (SimpleFSIndexInput)super.clone();
       clone.isClone = true;
@@ -174,9 +182,11 @@ public class SimpleFSDirectory extends FSDirectory {
     }
   
     /** output methods: */
+    @Override
     public void flushBuffer(byte[] b, int offset, int size) throws IOException {
       file.write(b, offset, size);
     }
+    @Override
     public void close() throws IOException {
       // only close the file if it has not been closed yet
       if (isOpen) {
@@ -199,13 +209,16 @@ public class SimpleFSDirectory extends FSDirectory {
     }
   
     /** Random-access methods */
+    @Override
     public void seek(long pos) throws IOException {
       super.seek(pos);
       file.seek(pos);
     }
+    @Override
     public long length() throws IOException {
       return file.length();
     }
+    @Override
     public void setLength(long length) throws IOException {
       file.setLength(length);
     }
diff --git a/src/java/org/apache/lucene/store/SimpleFSLockFactory.java b/src/java/org/apache/lucene/store/SimpleFSLockFactory.java
index c6e97c7..ab73f56 100755
--- a/src/java/org/apache/lucene/store/SimpleFSLockFactory.java
+++ b/src/java/org/apache/lucene/store/SimpleFSLockFactory.java
@@ -80,6 +80,7 @@ public class SimpleFSLockFactory extends FSLockFactory {
     setLockDir(new File(lockDirName));
   }
 
+  @Override
   public Lock makeLock(String lockName) {
     if (lockPrefix != null) {
       lockName = lockPrefix + "-" + lockName;
@@ -87,6 +88,7 @@ public class SimpleFSLockFactory extends FSLockFactory {
     return new SimpleFSLock(lockDir, lockName);
   }
 
+  @Override
   public void clearLock(String lockName) throws IOException {
     if (lockDir.exists()) {
       if (lockPrefix != null) {
@@ -110,6 +112,7 @@ class SimpleFSLock extends Lock {
     lockFile = new File(lockDir, lockFileName);
   }
 
+  @Override
   public boolean obtain() throws IOException {
 
     // Ensure that lockDir exists and is a directory:
@@ -124,15 +127,18 @@ class SimpleFSLock extends Lock {
     return lockFile.createNewFile();
   }
 
+  @Override
   public void release() throws LockReleaseFailedException {
     if (lockFile.exists() && !lockFile.delete())
       throw new LockReleaseFailedException("failed to delete " + lockFile);
   }
 
+  @Override
   public boolean isLocked() {
     return lockFile.exists();
   }
 
+  @Override
   public String toString() {
     return "SimpleFSLock@" + lockFile;
   }
diff --git a/src/java/org/apache/lucene/store/SingleInstanceLockFactory.java b/src/java/org/apache/lucene/store/SingleInstanceLockFactory.java
index efcd2bf..20c66e9 100755
--- a/src/java/org/apache/lucene/store/SingleInstanceLockFactory.java
+++ b/src/java/org/apache/lucene/store/SingleInstanceLockFactory.java
@@ -35,6 +35,7 @@ public class SingleInstanceLockFactory extends LockFactory {
 
   private HashSet<String> locks = new HashSet<String>();
 
+  @Override
   public Lock makeLock(String lockName) {
     // We do not use the LockPrefix at all, because the private
     // HashSet instance effectively scopes the locking to this
@@ -42,6 +43,7 @@ public class SingleInstanceLockFactory extends LockFactory {
     return new SingleInstanceLock(locks, lockName);
   }
 
+  @Override
   public void clearLock(String lockName) throws IOException {
     synchronized(locks) {
       if (locks.contains(lockName)) {
@@ -61,24 +63,28 @@ class SingleInstanceLock extends Lock {
     this.lockName = lockName;
   }
 
+  @Override
   public boolean obtain() throws IOException {
     synchronized(locks) {
       return locks.add(lockName);
     }
   }
 
+  @Override
   public void release() {
     synchronized(locks) {
       locks.remove(lockName);
     }
   }
 
+  @Override
   public boolean isLocked() {
     synchronized(locks) {
       return locks.contains(lockName);
     }
   }
 
+  @Override
   public String toString() {
     return super.toString() + ": " + lockName;
   }
diff --git a/src/java/org/apache/lucene/store/VerifyingLockFactory.java b/src/java/org/apache/lucene/store/VerifyingLockFactory.java
index 6f9f45e..6fd2555 100644
--- a/src/java/org/apache/lucene/store/VerifyingLockFactory.java
+++ b/src/java/org/apache/lucene/store/VerifyingLockFactory.java
@@ -68,6 +68,7 @@ public class VerifyingLockFactory extends LockFactory {
       }
     }
 
+    @Override
     public synchronized boolean obtain(long lockWaitTimeout)
       throws LockObtainFailedException, IOException {
       boolean obtained = lock.obtain(lockWaitTimeout);
@@ -76,15 +77,18 @@ public class VerifyingLockFactory extends LockFactory {
       return obtained;
     }
 
+    @Override
     public synchronized boolean obtain()
       throws LockObtainFailedException, IOException {
       return lock.obtain();
     }
 
+    @Override
     public synchronized boolean isLocked() {
       return lock.isLocked();
     }
 
+    @Override
     public synchronized void release() throws IOException {
       if (isLocked()) {
         verify((byte) 0);
@@ -108,10 +112,12 @@ public class VerifyingLockFactory extends LockFactory {
     this.port = port;
   }
 
+  @Override
   public synchronized Lock makeLock(String lockName) {
     return new CheckedLock(lf.makeLock(lockName));
   }
 
+  @Override
   public synchronized void clearLock(String lockName)
     throws IOException {
     lf.clearLock(lockName);
diff --git a/src/java/org/apache/lucene/util/AttributeImpl.java b/src/java/org/apache/lucene/util/AttributeImpl.java
index 1790bfd..774e796 100644
--- a/src/java/org/apache/lucene/util/AttributeImpl.java
+++ b/src/java/org/apache/lucene/util/AttributeImpl.java
@@ -48,6 +48,7 @@ public abstract class AttributeImpl implements Cloneable, Serializable, Attribut
    * 
    * This method may be overridden by subclasses.
    */
+  @Override
   public String toString() {
     StringBuilder buffer = new StringBuilder();
     Class clazz = this.getClass();
@@ -89,6 +90,7 @@ public abstract class AttributeImpl implements Cloneable, Serializable, Attribut
    * 
    * see also {@link #equals(Object)}
    */
+  @Override
   public abstract int hashCode();
   
   /**
@@ -97,6 +99,7 @@ public abstract class AttributeImpl implements Cloneable, Serializable, Attribut
    * 
    * see also {@link Object#equals(Object)}
    */
+  @Override
   public abstract boolean equals(Object other);
   
   /**
@@ -110,6 +113,7 @@ public abstract class AttributeImpl implements Cloneable, Serializable, Attribut
    * Shallow clone. Subclasses must override this if they 
    * need to clone any members deeply,
    */
+  @Override
   public Object clone() {
     Object clone = null;
     try {
diff --git a/src/java/org/apache/lucene/util/AttributeSource.java b/src/java/org/apache/lucene/util/AttributeSource.java
index 4286ec1..1a194ae 100644
--- a/src/java/org/apache/lucene/util/AttributeSource.java
+++ b/src/java/org/apache/lucene/util/AttributeSource.java
@@ -59,6 +59,7 @@ public class AttributeSource {
       
       private DefaultAttributeFactory() {}
     
+      @Override
       public AttributeImpl createAttributeInstance(Class<? extends Attribute> attClass) {
         try {
           return getClassForInterface(attClass).newInstance();
@@ -269,6 +270,7 @@ public class AttributeSource {
     private AttributeImpl attribute;
     private State next;
     
+    @Override
     public Object clone() {
       State clone = new State();
       clone.attribute = (AttributeImpl) attribute.clone();
@@ -352,6 +354,7 @@ public class AttributeSource {
     } while (state != null);
   }
 
+  @Override
   public int hashCode() {
     int code = 0;
     if (hasAttributes()) {
@@ -366,6 +369,7 @@ public class AttributeSource {
     return code;
   }
   
+  @Override
   public boolean equals(Object obj) {
     if (obj == this) {
       return true;
@@ -407,6 +411,7 @@ public class AttributeSource {
       return false;
   }
   
+  @Override
   public String toString() {
     StringBuilder sb = new StringBuilder().append('(');
     if (hasAttributes()) {
diff --git a/src/java/org/apache/lucene/util/AverageGuessMemoryModel.java b/src/java/org/apache/lucene/util/AverageGuessMemoryModel.java
index a19daec..4694cda 100644
--- a/src/java/org/apache/lucene/util/AverageGuessMemoryModel.java
+++ b/src/java/org/apache/lucene/util/AverageGuessMemoryModel.java
@@ -44,6 +44,7 @@ public class AverageGuessMemoryModel extends MemoryModel {
    * 
    * @see org.apache.lucene.util.MemoryModel#getArraySize()
    */
+  @Override
   public int getArraySize() {
     return 16;
   }
@@ -53,6 +54,7 @@ public class AverageGuessMemoryModel extends MemoryModel {
    * 
    * @see org.apache.lucene.util.MemoryModel#getClassSize()
    */
+  @Override
   public int getClassSize() {
     return 8;
   }
@@ -60,6 +62,7 @@ public class AverageGuessMemoryModel extends MemoryModel {
   /* (non-Javadoc)
    * @see org.apache.lucene.util.MemoryModel#getPrimitiveSize(java.lang.Class)
    */
+  @Override
   public int getPrimitiveSize(Class clazz) {
     return sizes.get(clazz).intValue();
   }
@@ -67,6 +70,7 @@ public class AverageGuessMemoryModel extends MemoryModel {
   /* (non-Javadoc)
    * @see org.apache.lucene.util.MemoryModel#getReferenceSize()
    */
+  @Override
   public int getReferenceSize() {
     return 4;
   }
diff --git a/src/java/org/apache/lucene/util/BitVector.java b/src/java/org/apache/lucene/util/BitVector.java
index 41ce022..1c451c7 100644
--- a/src/java/org/apache/lucene/util/BitVector.java
+++ b/src/java/org/apache/lucene/util/BitVector.java
@@ -49,6 +49,7 @@ public final class BitVector implements Cloneable {
     this.size = size;
   }
   
+  @Override
   public Object clone() {
     byte[] copyBits = new byte[bits.length];
     System.arraycopy(bits, 0, copyBits, 0, bits.length);
diff --git a/src/java/org/apache/lucene/util/DocIdBitSet.java b/src/java/org/apache/lucene/util/DocIdBitSet.java
index 7aae0e9..28fa7a9 100644
--- a/src/java/org/apache/lucene/util/DocIdBitSet.java
+++ b/src/java/org/apache/lucene/util/DocIdBitSet.java
@@ -31,11 +31,13 @@ public class DocIdBitSet extends DocIdSet {
     this.bitSet = bitSet;
   }
 
+  @Override
   public DocIdSetIterator iterator() {
     return new DocIdBitSetIterator(bitSet);
   }
 
   /** This DocIdSet implementation is cacheable. */
+  @Override
   public boolean isCacheable() {
     return true;
   }
@@ -56,10 +58,12 @@ public class DocIdBitSet extends DocIdSet {
       this.docId = -1;
     }
     
+    @Override
     public int docID() {
       return docId;
     }
     
+    @Override
     public int nextDoc() {
       // (docId + 1) on next line requires -1 initial value for docNr:
       int d = bitSet.nextSetBit(docId + 1);
@@ -68,6 +72,7 @@ public class DocIdBitSet extends DocIdSet {
       return docId;
     }
   
+    @Override
     public int advance(int target) {
       int d = bitSet.nextSetBit(target);
       // -1 returned by BitSet.nextSetBit() when exhausted
diff --git a/src/java/org/apache/lucene/util/FieldCacheSanityChecker.java b/src/java/org/apache/lucene/util/FieldCacheSanityChecker.java
index 430a018..b2ac7be 100644
--- a/src/java/org/apache/lucene/util/FieldCacheSanityChecker.java
+++ b/src/java/org/apache/lucene/util/FieldCacheSanityChecker.java
@@ -297,9 +297,11 @@ public final class FieldCacheSanityChecker {
       this.readerKey = readerKey;
       this.fieldName = fieldName;
     }
+    @Override
     public int hashCode() {
       return System.identityHashCode(readerKey) * fieldName.hashCode();
     }
+    @Override
     public boolean equals(Object that) {
       if (! (that instanceof ReaderField)) return false;
 
@@ -307,6 +309,7 @@ public final class FieldCacheSanityChecker {
       return (this.readerKey == other.readerKey &&
               this.fieldName.equals(other.fieldName));
     }
+    @Override
     public String toString() {
       return readerKey.toString() + "+" + fieldName;
     }
@@ -352,6 +355,7 @@ public final class FieldCacheSanityChecker {
      * the Type and Msg, followed by each CacheEntry.toString() on it's 
      * own line prefaced by a tab character
      */
+    @Override
     public String toString() {
       StringBuilder buf = new StringBuilder();
       buf.append(getType()).append(": ");
@@ -383,6 +387,7 @@ public final class FieldCacheSanityChecker {
     private InsanityType(final String label) {
       this.label = label;
     }
+    @Override
     public String toString() { return label; }
 
     /** 
diff --git a/src/java/org/apache/lucene/util/OpenBitSet.java b/src/java/org/apache/lucene/util/OpenBitSet.java
index f0ae300..eff8f9e 100644
--- a/src/java/org/apache/lucene/util/OpenBitSet.java
+++ b/src/java/org/apache/lucene/util/OpenBitSet.java
@@ -640,6 +640,7 @@ public class OpenBitSet extends DocIdSet implements Cloneable, Serializable {
 
 
 
+  @Override
   public Object clone() {
     try {
       OpenBitSet obs = (OpenBitSet)super.clone();
@@ -775,6 +776,7 @@ public class OpenBitSet extends DocIdSet implements Cloneable, Serializable {
 
 
   /** returns true if both sets have the same bits set */
+  @Override
   public boolean equals(Object o) {
     if (this == o) return true;
     if (!(o instanceof OpenBitSet)) return false;
@@ -800,6 +802,7 @@ public class OpenBitSet extends DocIdSet implements Cloneable, Serializable {
   }
 
 
+  @Override
   public int hashCode() {
       long h = 0x98761234;  // something non-zero for length==0
       for (int i = bits.length; --i>=0;) {
diff --git a/src/java/org/apache/lucene/util/OpenBitSetIterator.java b/src/java/org/apache/lucene/util/OpenBitSetIterator.java
index 1ae4f78..a732bbe 100644
--- a/src/java/org/apache/lucene/util/OpenBitSetIterator.java
+++ b/src/java/org/apache/lucene/util/OpenBitSetIterator.java
@@ -128,6 +128,7 @@ public class OpenBitSetIterator extends DocIdSetIterator {
   }
   ******/
 
+  @Override
   public int nextDoc() {
     if (indexArray == 0) {
       if (word != 0) {
@@ -155,6 +156,7 @@ public class OpenBitSetIterator extends DocIdSetIterator {
     return curDocId = (i<<6) + bitIndex;
   }
   
+  @Override
   public int advance(int target) {
     indexArray = 0;
     i = target >> 6;
@@ -185,6 +187,7 @@ public class OpenBitSetIterator extends DocIdSetIterator {
     return curDocId = (i<<6) + bitIndex;
   }
 
+  @Override
   public int docID() {
     return curDocId;
   }
diff --git a/src/java/org/apache/lucene/util/Parameter.java b/src/java/org/apache/lucene/util/Parameter.java
index a61458f..90b2f51 100644
--- a/src/java/org/apache/lucene/util/Parameter.java
+++ b/src/java/org/apache/lucene/util/Parameter.java
@@ -53,6 +53,7 @@ public abstract class Parameter implements Serializable
     return getClass() + " " + name;
   }
   
+  @Override
   public String toString() {
     return name;
   }
diff --git a/src/java/org/apache/lucene/util/SortedVIntList.java b/src/java/org/apache/lucene/util/SortedVIntList.java
index 13f1e0b..ec587d7 100644
--- a/src/java/org/apache/lucene/util/SortedVIntList.java
+++ b/src/java/org/apache/lucene/util/SortedVIntList.java
@@ -206,10 +206,12 @@ public class SortedVIntList extends DocIdSet {
         }
       }
       
+      @Override
       public int docID() {
         return doc;
       }
       
+      @Override
       public int nextDoc() {
         if (bytePos >= lastBytePos) {
           doc = NO_MORE_DOCS;
@@ -220,6 +222,7 @@ public class SortedVIntList extends DocIdSet {
         return doc;
       }
       
+      @Override
       public int advance(int target) {
         while (bytePos < lastBytePos) {
           advance();

