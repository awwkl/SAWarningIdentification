GitDiffStart: f3f8b8afb19b742a48f3d5e9cff218027b1186fd | Wed Feb 20 22:12:29 2013 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.java b/lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.java
new file mode 100644
index 0000000..3d6c039
--- /dev/null
+++ b/lucene/core/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.java
@@ -0,0 +1,165 @@
+package org.apache.lucene.search;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Comparator;
+
+import org.apache.lucene.index.AtomicReaderContext;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.SortedDocValues;
+import org.apache.lucene.index.SortedDocValuesTermsEnum;
+import org.apache.lucene.index.Terms;
+import org.apache.lucene.index.TermsEnum;
+import org.apache.lucene.util.Bits;
+import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.OpenBitSet;
+
+/**
+ * Rewrites MultiTermQueries into a filter, using the FieldCache for term enumeration.
+ * <p>
+ * This can be used to perform these queries against an unindexed docvalues field.
+ * @lucene.experimental
+ */
+public final class FieldCacheRewriteMethod extends MultiTermQuery.RewriteMethod {
+  
+  @Override
+  public Query rewrite(IndexReader reader, MultiTermQuery query) {
+    Query result = new ConstantScoreQuery(new MultiTermQueryFieldCacheWrapperFilter(query));
+    result.setBoost(query.getBoost());
+    return result;
+  }
+  
+  static class MultiTermQueryFieldCacheWrapperFilter extends Filter {
+    
+    protected final MultiTermQuery query;
+    
+    /**
+     * Wrap a {@link MultiTermQuery} as a Filter.
+     */
+    protected MultiTermQueryFieldCacheWrapperFilter(MultiTermQuery query) {
+      this.query = query;
+    }
+    
+    @Override
+    public String toString() {
+      // query.toString should be ok for the filter, too, if the query boost is 1.0f
+      return query.toString();
+    }
+    
+    @Override
+    public final boolean equals(final Object o) {
+      if (o==this) return true;
+      if (o==null) return false;
+      if (this.getClass().equals(o.getClass())) {
+        return this.query.equals( ((MultiTermQueryFieldCacheWrapperFilter)o).query );
+      }
+      return false;
+    }
+    
+    @Override
+    public final int hashCode() {
+      return query.hashCode();
+    }
+    
+    /** Returns the field name for this query */
+    public final String getField() { return query.getField(); }
+    
+    /**
+     * Returns a DocIdSet with documents that should be permitted in search
+     * results.
+     */
+    @Override
+    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {
+      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);
+      // Cannot use FixedBitSet because we require long index (ord):
+      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());
+      TermsEnum termsEnum = query.getTermsEnum(new Terms() {
+        
+        @Override
+        public Comparator<BytesRef> getComparator() {
+          return BytesRef.getUTF8SortedAsUnicodeComparator();
+        }
+        
+        @Override
+        public TermsEnum iterator(TermsEnum reuse) {
+          return new SortedDocValuesTermsEnum(fcsi);
+        }
+
+        @Override
+        public long getSumTotalTermFreq() {
+          return -1;
+        }
+
+        @Override
+        public long getSumDocFreq() {
+          return -1;
+        }
+
+        @Override
+        public int getDocCount() {
+          return -1;
+        }
+
+        @Override
+        public long size() {
+          return -1;
+        }
+
+        @Override
+        public boolean hasOffsets() {
+          return false;
+        }
+
+        @Override
+        public boolean hasPositions() {
+          return false;
+        }
+        
+        @Override
+        public boolean hasPayloads() {
+          return false;
+        }
+      });
+      
+      assert termsEnum != null;
+      if (termsEnum.next() != null) {
+        // fill into a OpenBitSet
+        do {
+          long ord = termsEnum.ord();
+          if (ord >= 0) {
+            termSet.set(ord);
+          }
+        } while (termsEnum.next() != null);
+      } else {
+        return DocIdSet.EMPTY_DOCIDSET;
+      }
+      
+      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {
+        @Override
+        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {
+          int ord = fcsi.getOrd(doc);
+          if (ord == -1) {
+            return false;
+          }
+          return termSet.get(ord);
+        }
+      };
+    }
+  }
+}
diff --git a/lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.java b/lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.java
deleted file mode 100644
index f55e33d..0000000
--- a/lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.java
+++ /dev/null
@@ -1,169 +0,0 @@
-package org.apache.lucene.search;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.Comparator;
-
-import org.apache.lucene.index.AtomicReaderContext;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.SortedDocValues;
-import org.apache.lucene.index.SortedDocValuesTermsEnum;
-import org.apache.lucene.index.Terms;
-import org.apache.lucene.index.TermsEnum;
-import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.util.OpenBitSet;
-
-/**
- * Rewrites MultiTermQueries into a filter, using the FieldCache for term enumeration.
- * <p>
- * WARNING: This is only appropriate for single-valued unanalyzed fields. Additionally, for 
- * most queries this method is actually SLOWER than using the default CONSTANT_SCORE_AUTO 
- * in MultiTermQuery. This method is only faster than other methods for certain queries,
- * such as ones that enumerate many terms.
- * 
- * @lucene.experimental
- */
-public final class FieldCacheRewriteMethod extends MultiTermQuery.RewriteMethod {
-  
-  @Override
-  public Query rewrite(IndexReader reader, MultiTermQuery query) {
-    Query result = new ConstantScoreQuery(new MultiTermQueryFieldCacheWrapperFilter(query));
-    result.setBoost(query.getBoost());
-    return result;
-  }
-  
-  static class MultiTermQueryFieldCacheWrapperFilter extends Filter {
-    
-    protected final MultiTermQuery query;
-    
-    /**
-     * Wrap a {@link MultiTermQuery} as a Filter.
-     */
-    protected MultiTermQueryFieldCacheWrapperFilter(MultiTermQuery query) {
-      this.query = query;
-    }
-    
-    @Override
-    public String toString() {
-      // query.toString should be ok for the filter, too, if the query boost is 1.0f
-      return query.toString();
-    }
-    
-    @Override
-    public final boolean equals(final Object o) {
-      if (o==this) return true;
-      if (o==null) return false;
-      if (this.getClass().equals(o.getClass())) {
-        return this.query.equals( ((MultiTermQueryFieldCacheWrapperFilter)o).query );
-      }
-      return false;
-    }
-    
-    @Override
-    public final int hashCode() {
-      return query.hashCode();
-    }
-    
-    /** Returns the field name for this query */
-    public final String getField() { return query.getField(); }
-    
-    /**
-     * Returns a DocIdSet with documents that should be permitted in search
-     * results.
-     */
-    @Override
-    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {
-      final SortedDocValues fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);
-      // Cannot use FixedBitSet because we require long index (ord):
-      final OpenBitSet termSet = new OpenBitSet(fcsi.getValueCount());
-      TermsEnum termsEnum = query.getTermsEnum(new Terms() {
-        
-        @Override
-        public Comparator<BytesRef> getComparator() {
-          return BytesRef.getUTF8SortedAsUnicodeComparator();
-        }
-        
-        @Override
-        public TermsEnum iterator(TermsEnum reuse) {
-          return new SortedDocValuesTermsEnum(fcsi);
-        }
-
-        @Override
-        public long getSumTotalTermFreq() {
-          return -1;
-        }
-
-        @Override
-        public long getSumDocFreq() {
-          return -1;
-        }
-
-        @Override
-        public int getDocCount() {
-          return -1;
-        }
-
-        @Override
-        public long size() {
-          return -1;
-        }
-
-        @Override
-        public boolean hasOffsets() {
-          return false;
-        }
-
-        @Override
-        public boolean hasPositions() {
-          return false;
-        }
-        
-        @Override
-        public boolean hasPayloads() {
-          return false;
-        }
-      });
-      
-      assert termsEnum != null;
-      if (termsEnum.next() != null) {
-        // fill into a OpenBitSet
-        do {
-          long ord = termsEnum.ord();
-          if (ord >= 0) {
-            termSet.set(ord);
-          }
-        } while (termsEnum.next() != null);
-      } else {
-        return DocIdSet.EMPTY_DOCIDSET;
-      }
-      
-      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {
-        @Override
-        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {
-          int ord = fcsi.getOrd(doc);
-          if (ord == -1) {
-            return false;
-          }
-          return termSet.get(ord);
-        }
-      };
-    }
-  }
-}
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index df3f8e2..874eba2 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -75,6 +75,9 @@ New Features
 
 * SOLR-4417: Reopen the IndexWriter on SolrCore reload. (Mark Miller)
 
+* SOLR-4477: Add support for queries (match-only) against docvalues fields. 
+  (Robert Muir)
+
 Bug Fixes
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java b/solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java
index 7d4ea32..3a9c9f0 100644
--- a/solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java
+++ b/solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java
@@ -626,7 +626,8 @@ public abstract class SolrQueryParserBase {
    */
   protected Query newPrefixQuery(Term prefix){
     PrefixQuery query = new PrefixQuery(prefix);
-    query.setRewriteMethod(multiTermRewriteMethod);
+    SchemaField sf = schema.getField(prefix.field());
+    query.setRewriteMethod(sf.getType().getRewriteMethod(parser, sf));
     return query;
   }
 
@@ -637,7 +638,8 @@ public abstract class SolrQueryParserBase {
    */
   protected Query newRegexpQuery(Term regexp) {
     RegexpQuery query = new RegexpQuery(regexp);
-    query.setRewriteMethod(multiTermRewriteMethod);
+    SchemaField sf = schema.getField(regexp.field());
+    query.setRewriteMethod(sf.getType().getRewriteMethod(parser, sf));
     return query;
   }
 
@@ -671,7 +673,8 @@ public abstract class SolrQueryParserBase {
    */
   protected Query newWildcardQuery(Term t) {
     WildcardQuery query = new WildcardQuery(t);
-    query.setRewriteMethod(multiTermRewriteMethod);
+    SchemaField sf = schema.getField(t.field());
+    query.setRewriteMethod(sf.getType().getRewriteMethod(parser, sf));
     return query;
   }
 
@@ -934,7 +937,7 @@ public abstract class SolrQueryParserBase {
     if (sf != null) {
       FieldType ft = sf.getType();
       // delegate to type for everything except tokenized fields
-      if (ft.isTokenized()) {
+      if (ft.isTokenized() && sf.indexed()) {
         return newFieldQuery(analyzer, field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));
       } else {
         return sf.getType().getFieldQuery(parser, sf, queryText);
diff --git a/solr/core/src/java/org/apache/solr/schema/FieldType.java b/solr/core/src/java/org/apache/solr/schema/FieldType.java
index 3bf13f1..288452b 100644
--- a/solr/core/src/java/org/apache/solr/schema/FieldType.java
+++ b/solr/core/src/java/org/apache/solr/schema/FieldType.java
@@ -34,6 +34,11 @@ import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.index.StorableField;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.queries.function.ValueSource;
+import org.apache.lucene.search.ConstantScoreQuery;
+import org.apache.lucene.search.FieldCacheRangeFilter;
+import org.apache.lucene.search.FieldCacheRewriteMethod;
+import org.apache.lucene.search.FieldCacheTermsFilter;
+import org.apache.lucene.search.MultiTermQuery;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.search.TermQuery;
@@ -592,11 +597,21 @@ public abstract class FieldType extends FieldProperties {
    */
   public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {
     // constant score mode is now enabled per default
-    return TermRangeQuery.newStringRange(
+    if (field.hasDocValues() && !field.indexed()) {
+      return new ConstantScoreQuery(FieldCacheRangeFilter.newStringRange(
+            field.getName(), 
+            part1 == null ? null : toInternal(part1),
+            part2 == null ? null : toInternal(part2),
+            minInclusive, maxInclusive));
+    } else {
+      MultiTermQuery rangeQuery = TermRangeQuery.newStringRange(
             field.getName(),
             part1 == null ? null : toInternal(part1),
             part2 == null ? null : toInternal(part2),
             minInclusive, maxInclusive);
+      rangeQuery.setRewriteMethod(getRewriteMethod(parser, field));
+      return rangeQuery;
+    }
   }
 
   /**
@@ -610,7 +625,26 @@ public abstract class FieldType extends FieldProperties {
   public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {
     BytesRef br = new BytesRef();
     readableToIndexed(externalVal, br);
-    return new TermQuery(new Term(field.getName(), br));
+    if (field.hasDocValues() && !field.indexed()) {
+      // match-only
+      return new ConstantScoreQuery(new FieldCacheTermsFilter(field.getName(), br));
+    } else {
+      return new TermQuery(new Term(field.getName(), br));
+    }
+  }
+  
+  /**
+   * Expert: Returns the rewrite method for multiterm queries such as wildcards.
+   * @param parser The {@link org.apache.solr.search.QParser} calling the method
+   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search
+   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.
+   */
+  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {
+    if (!field.indexed() && field.hasDocValues()) {
+      return new FieldCacheRewriteMethod();
+    } else {
+      return MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;
+    }
   }
 
   /**
diff --git a/solr/core/src/java/org/apache/solr/schema/TrieField.java b/solr/core/src/java/org/apache/solr/schema/TrieField.java
index 59c2023..1573cae 100644
--- a/solr/core/src/java/org/apache/solr/schema/TrieField.java
+++ b/solr/core/src/java/org/apache/solr/schema/TrieField.java
@@ -39,7 +39,9 @@ import org.apache.lucene.queries.function.valuesource.DoubleFieldSource;
 import org.apache.lucene.queries.function.valuesource.FloatFieldSource;
 import org.apache.lucene.queries.function.valuesource.IntFieldSource;
 import org.apache.lucene.queries.function.valuesource.LongFieldSource;
+import org.apache.lucene.search.ConstantScoreQuery;
 import org.apache.lucene.search.FieldCache;
+import org.apache.lucene.search.FieldCacheRangeFilter;
 import org.apache.lucene.search.NumericRangeQuery;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.SortField;
@@ -263,36 +265,72 @@ public class TrieField extends PrimitiveFieldType {
   public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {
     int ps = precisionStep;
     Query query = null;
+    final boolean matchOnly = field.hasDocValues() && !field.indexed();
     switch (type) {
       case INTEGER:
-        query = NumericRangeQuery.newIntRange(field.getName(), ps,
+        if (matchOnly) {
+          query = new ConstantScoreQuery(FieldCacheRangeFilter.newIntRange(field.getName(),
+                min == null ? null : Integer.parseInt(min),
+                max == null ? null : Integer.parseInt(max),
+                minInclusive, maxInclusive));
+        } else {
+          query = NumericRangeQuery.newIntRange(field.getName(), ps,
                 min == null ? null : Integer.parseInt(min),
                 max == null ? null : Integer.parseInt(max),
                 minInclusive, maxInclusive);
+        }
         break;
       case FLOAT:
-        query = NumericRangeQuery.newFloatRange(field.getName(), ps,
+        if (matchOnly) {
+          query = new ConstantScoreQuery(FieldCacheRangeFilter.newFloatRange(field.getName(),
+                min == null ? null : Float.parseFloat(min),
+                max == null ? null : Float.parseFloat(max),
+                minInclusive, maxInclusive));
+        } else {
+          query = NumericRangeQuery.newFloatRange(field.getName(), ps,
                 min == null ? null : Float.parseFloat(min),
                 max == null ? null : Float.parseFloat(max),
                 minInclusive, maxInclusive);
+        }
         break;
       case LONG:
-        query = NumericRangeQuery.newLongRange(field.getName(), ps,
+        if (matchOnly) {
+          query = new ConstantScoreQuery(FieldCacheRangeFilter.newLongRange(field.getName(),
+                min == null ? null : Long.parseLong(min),
+                max == null ? null : Long.parseLong(max),
+                minInclusive, maxInclusive));
+        } else {
+          query = NumericRangeQuery.newLongRange(field.getName(), ps,
                 min == null ? null : Long.parseLong(min),
                 max == null ? null : Long.parseLong(max),
                 minInclusive, maxInclusive);
+        }
         break;
       case DOUBLE:
-        query = NumericRangeQuery.newDoubleRange(field.getName(), ps,
+        if (matchOnly) {
+          query = new ConstantScoreQuery(FieldCacheRangeFilter.newDoubleRange(field.getName(),
+                min == null ? null : Double.parseDouble(min),
+                max == null ? null : Double.parseDouble(max),
+                minInclusive, maxInclusive));
+        } else {
+          query = NumericRangeQuery.newDoubleRange(field.getName(), ps,
                 min == null ? null : Double.parseDouble(min),
                 max == null ? null : Double.parseDouble(max),
                 minInclusive, maxInclusive);
+        }
         break;
       case DATE:
-        query = NumericRangeQuery.newLongRange(field.getName(), ps,
+        if (matchOnly) {
+          query = new ConstantScoreQuery(FieldCacheRangeFilter.newLongRange(field.getName(),
+                min == null ? null : dateField.parseMath(null, min).getTime(),
+                max == null ? null : dateField.parseMath(null, max).getTime(),
+                minInclusive, maxInclusive));
+        } else {
+          query = NumericRangeQuery.newLongRange(field.getName(), ps,
                 min == null ? null : dateField.parseMath(null, min).getTime(),
                 max == null ? null : dateField.parseMath(null, max).getTime(),
                 minInclusive, maxInclusive);
+        }
         break;
       default:
         throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Unknown type for trie field");
@@ -300,6 +338,16 @@ public class TrieField extends PrimitiveFieldType {
 
     return query;
   }
+  
+  @Override
+  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {
+    if (!field.indexed() && field.hasDocValues()) {
+      // currently implemented as singleton range
+      return getRangeQuery(parser, field, externalVal, externalVal, true, true);
+    } else {
+      return super.getFieldQuery(parser, field, externalVal);
+    }
+  }
 
   @Deprecated
   static int toInt(byte[] arr, int offset) {
diff --git a/solr/core/src/test/org/apache/solr/schema/DocValuesTest.java b/solr/core/src/test/org/apache/solr/schema/DocValuesTest.java
index 374abf9..848b24a 100644
--- a/solr/core/src/test/org/apache/solr/schema/DocValuesTest.java
+++ b/solr/core/src/test/org/apache/solr/schema/DocValuesTest.java
@@ -226,5 +226,92 @@ public class DocValuesTest extends SolrTestCaseJ4 {
         "//lst[@name='datedv']/lst[@name='1904-12-31T23:59:59.999Z']/long[@name='count'][.='8']",
         "//lst[@name='datedv']/lst[@name='1905-12-31T23:59:59.999Z']/long[@name='count'][.='8']");
   }
-
+  
+  /** Tests the ability to do basic queries (without scoring, just match-only) on
+   *  docvalues fields that are not inverted (indexed "forward" only)
+   */
+  public void testDocValuesMatch() throws Exception {
+    assertU(adoc("id", "1", "floatdv", "2", "intdv", "3", "doubledv", "4", "longdv", "5", "datedv", "1995-12-31T23:59:59.999Z", "stringdv", "b"));
+    assertU(adoc("id", "2", "floatdv", "5", "intdv", "4", "doubledv", "3", "longdv", "2", "datedv", "1997-12-31T23:59:59.999Z", "stringdv", "a"));
+    assertU(adoc("id", "3", "floatdv", "3", "intdv", "1", "doubledv", "2", "longdv", "1", "datedv", "1996-12-31T23:59:59.999Z", "stringdv", "c"));
+    assertU(adoc("id", "4", "floatdv", "3", "intdv", "1", "doubledv", "2", "longdv", "1", "datedv", "1996-12-31T23:59:59.999Z", "stringdv", "car"));
+    assertU(commit());
+    
+    // string: termquery
+    assertQ(req("q", "stringdv:car", "sort", "id asc"),
+        "//*[@numFound='1']",
+        "//result/doc[1]/str[@name='id'][.=4]"
+    );
+    
+    // string: range query
+    assertQ(req("q", "stringdv:[b TO d]", "sort", "id asc"),
+        "//*[@numFound='3']",
+        "//result/doc[1]/str[@name='id'][.=1]",
+        "//result/doc[2]/str[@name='id'][.=3]",
+        "//result/doc[3]/str[@name='id'][.=4]"
+    );
+    
+    // string: prefix query
+    assertQ(req("q", "stringdv:c*", "sort", "id asc"),
+        "//*[@numFound='2']",
+        "//result/doc[1]/str[@name='id'][.=3]",
+        "//result/doc[2]/str[@name='id'][.=4]"
+    );
+    
+    // string: wildcard query
+    assertQ(req("q", "stringdv:c?r", "sort", "id asc"),
+        "//*[@numFound='1']",
+        "//result/doc[1]/str[@name='id'][.=4]"
+    );
+    
+    // string: regexp query
+    assertQ(req("q", "stringdv:/c[a-b]r/", "sort", "id asc"),
+        "//*[@numFound='1']",
+        "//result/doc[1]/str[@name='id'][.=4]"
+    );
+    
+    // float: termquery
+    assertQ(req("q", "floatdv:3", "sort", "id asc"),
+        "//*[@numFound='2']",
+        "//result/doc[1]/str[@name='id'][.=3]",
+        "//result/doc[2]/str[@name='id'][.=4]"
+    );
+    
+    // float: rangequery
+    assertQ(req("q", "floatdv:[2 TO 3]", "sort", "id asc"),
+        "//*[@numFound='3']",
+        "//result/doc[1]/str[@name='id'][.=1]",
+        "//result/doc[2]/str[@name='id'][.=3]",
+        "//result/doc[3]/str[@name='id'][.=4]"
+    );
+    
+    // int: termquery
+    assertQ(req("q", "intdv:1", "sort", "id asc"),
+        "//*[@numFound='2']",
+        "//result/doc[1]/str[@name='id'][.=3]",
+        "//result/doc[2]/str[@name='id'][.=4]"
+    );
+    
+    // int: rangequery
+    assertQ(req("q", "intdv:[3 TO 4]", "sort", "id asc"),
+        "//*[@numFound='2']",
+        "//result/doc[1]/str[@name='id'][.=1]",
+        "//result/doc[2]/str[@name='id'][.=2]"
+    );
+    
+    // long: termquery
+    assertQ(req("q", "longdv:1", "sort", "id asc"),
+        "//*[@numFound='2']",
+        "//result/doc[1]/str[@name='id'][.=3]",
+        "//result/doc[2]/str[@name='id'][.=4]"
+    );
+    
+    // long: rangequery
+    assertQ(req("q", "longdv:[1 TO 2]", "sort", "id asc"),
+        "//*[@numFound='3']",
+        "//result/doc[1]/str[@name='id'][.=2]",
+        "//result/doc[2]/str[@name='id'][.=3]",
+        "//result/doc[3]/str[@name='id'][.=4]"
+    );
+  }
 }

