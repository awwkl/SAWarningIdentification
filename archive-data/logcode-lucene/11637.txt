GitDiffStart: 9130567fa618daccf8cef7d3fdb3acb16b9833b9 | Thu Aug 2 19:48:15 2012 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.java
index 3308c94..3fda3df 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.java
@@ -20,6 +20,7 @@ package org.apache.lucene.codecs.block;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.IntBuffer;
+import java.util.Arrays;
 
 import org.apache.lucene.codecs.BlockTermState;
 import org.apache.lucene.codecs.CodecUtil;
@@ -270,7 +271,10 @@ public final class BlockPostingsReader extends PostingsReaderBase {
                                                DocsAndPositionsEnum reuse, int flags)
     throws IOException {
 
-    if ((flags & DocsAndPositionsEnum.FLAG_OFFSETS) == 0 &&
+    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;
+    boolean indexHasPayloasd = fieldInfo.hasPayloads();
+
+    if ((!indexHasOffsets || (flags & DocsAndPositionsEnum.FLAG_OFFSETS) == 0) &&
         (!fieldInfo.hasPayloads() || (flags & DocsAndPositionsEnum.FLAG_PAYLOADS) == 0)) {
       BlockDocsAndPositionsEnum docsAndPositionsEnum;
       if (reuse instanceof BlockDocsAndPositionsEnum) {
@@ -361,6 +365,9 @@ public final class BlockPostingsReader extends PostingsReaderBase {
       skipOffset = termState.skipOffset;
 
       doc = -1;
+      if (!indexHasFreq) {
+        Arrays.fill(freqBuffer, 1);
+      }
       accum = 0;
       docUpto = 0;
       docBufferUpto = blockSize;
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.java
index d560e56..44dcb79 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.IntBuffer;
 import java.nio.LongBuffer;
+import java.util.Arrays;
 
 import org.apache.lucene.codecs.BlockTermState;
 import org.apache.lucene.codecs.CodecUtil;
@@ -274,7 +275,10 @@ public final class BlockPackedPostingsReader extends PostingsReaderBase {
                                                DocsAndPositionsEnum reuse, int flags)
     throws IOException {
 
-    if ((flags & DocsAndPositionsEnum.FLAG_OFFSETS) == 0 &&
+    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;
+    boolean indexHasPayloasd = fieldInfo.hasPayloads();
+
+    if ((!indexHasOffsets || (flags & DocsAndPositionsEnum.FLAG_OFFSETS) == 0) &&
         (!fieldInfo.hasPayloads() || (flags & DocsAndPositionsEnum.FLAG_PAYLOADS) == 0)) {
       BlockDocsAndPositionsEnum docsAndPositionsEnum;
       if (reuse instanceof BlockDocsAndPositionsEnum) {
@@ -365,6 +369,9 @@ public final class BlockPackedPostingsReader extends PostingsReaderBase {
       docTermStartFP = termState.docStartFP;
       docIn.seek(docTermStartFP);
       skipOffset = termState.skipOffset;
+      if (!indexHasFreq) {
+        Arrays.fill(freqBuffer, 1);
+      }
 
       doc = -1;
       accum = 0;
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestPostingsFormat.java b/lucene/core/src/test/org/apache/lucene/index/TestPostingsFormat.java
index 39ec96a..c98345c 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestPostingsFormat.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestPostingsFormat.java
@@ -908,7 +908,8 @@ public class TestPostingsFormat extends LuceneTestCase {
 
     // NOTE: you can also test "weaker" index options than
     // you indexed with:
-    testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
+    //testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
+    testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.THREADS)), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
 
     fieldsProducer.close();
     dir.close();

