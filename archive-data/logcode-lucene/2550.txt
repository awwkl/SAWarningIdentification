GitDiffStart: 8e929f3468961a1374e65badb27106cb848a7778 | Mon Oct 26 13:15:46 2015 +0000
diff --git a/solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java b/solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java
index 0273b0a..a927ed5 100644
--- a/solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java
+++ b/solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java
@@ -40,7 +40,14 @@ import java.util.concurrent.Executors;
 public class UpdateShardHandler {
   
   private static Logger log = LoggerFactory.getLogger(UpdateShardHandler.class);
-  
+
+  /*
+   * A downside to configuring an upper bound will be big update reorders (when that upper bound is hit)
+   * and then undetected shard inconsistency as a result.
+   * This update executor is used for different things too... both update streams (which may be very long lived)
+   * and control messages (peersync? LIR?) and could lead to starvation if limited.
+   * Therefore this thread pool is left unbounded. See SOLR-8205
+   */
   private ExecutorService updateExecutor = ExecutorUtil.newMDCAwareCachedThreadPool(
       new SolrjNamedThreadFactory("updateExecutor"));
   

