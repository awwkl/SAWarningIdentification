GitDiffStart: fa807c01d76eef4e1452b15cd0ebf981119d9121 | Thu Jun 4 07:20:08 2009 +0000
diff --git a/src/java/org/apache/solr/core/SolrConfig.java b/src/java/org/apache/solr/core/SolrConfig.java
index c4996c9..f39afdd 100644
--- a/src/java/org/apache/solr/core/SolrConfig.java
+++ b/src/java/org/apache/solr/core/SolrConfig.java
@@ -141,8 +141,10 @@ public class SolrConfig extends Config {
       conf = new CacheConfig(FastLRUCache.class, args, null);
     }
     fieldValueCacheConfig = conf;
+    unlockOnStartup = getBool("mainIndex/unlockOnStartup", false);
+    useColdSearcher = getBool("query/useColdSearcher",false);
 
-    userCacheConfigs = CacheConfig.getMultipleConfigs(this, "query/cache");     
+    userCacheConfigs = CacheConfig.getMultipleConfigs(this, "query/cache");
 
     org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);
 
@@ -160,6 +162,8 @@ public class SolrConfig extends Config {
     } else {
       jmxConfig = new JmxConfiguration(false, null, null);
     }
+     maxWarmingSearchers = getInt("query/maxWarmingSearchers",Integer.MAX_VALUE);
+
     
     Config.log.info("Loaded SolrConfig: " + name);
     
@@ -190,7 +194,11 @@ public class SolrConfig extends Config {
   // default & main index configurations
   public final SolrIndexConfig defaultIndexConfig;
   public final SolrIndexConfig mainIndexConfig;
-  
+
+  public final int maxWarmingSearchers;
+  public final boolean unlockOnStartup;
+  public final boolean useColdSearcher;
+
   //JMX configuration
   public final JmxConfiguration jmxConfig;
   
diff --git a/src/java/org/apache/solr/core/SolrCore.java b/src/java/org/apache/solr/core/SolrCore.java
index 90b820a..d99273f 100644
--- a/src/java/org/apache/solr/core/SolrCore.java
+++ b/src/java/org/apache/solr/core/SolrCore.java
@@ -360,7 +360,7 @@ public final class SolrCore implements SolrInfoMBean {
       synchronized (SolrCore.class) {
         firstTime = dirs.add(dirFile.getCanonicalPath());
       }
-      boolean removeLocks = solrConfig.getBool("mainIndex/unlockOnStartup", false);
+      boolean removeLocks = solrConfig.unlockOnStartup;
 
       initDirectoryFactory();
 
@@ -509,7 +509,7 @@ public final class SolrCore implements SolrInfoMBean {
     this.dataDir = dataDir;
     this.solrConfig = config;
     this.startTime = System.currentTimeMillis();
-    this.maxWarmingSearchers = config.getInt("query/maxWarmingSearchers",Integer.MAX_VALUE);
+    this.maxWarmingSearchers = config.maxWarmingSearchers;
 
     booleanQueryMaxClauseCount();
   
@@ -1104,7 +1104,7 @@ public final class SolrCore implements SolrInfoMBean {
         if (_searcher == null) {
           // if there isn't a current searcher then we may
           // want to register this one before warming is complete instead of waiting.
-          if (solrConfig.getBool("query/useColdSearcher",false)) {
+          if (solrConfig.useColdSearcher) {
             registerSearcher(newSearchHolder);
             decrementOnDeckCount[0]=false;
             alreadyRegistered=true;

