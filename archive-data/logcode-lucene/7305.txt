GitDiffStart: 22baafc512ab4c4e291a4f452d842479bd7e4496 | Tue Dec 17 23:14:11 2013 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index e9a05e6..2ec5a21 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -109,7 +109,7 @@ New Features
   set of distinct values and their count. This can also be specified per field
   e.g. 'f.field.stats.calcdistinct'. (Elran Dvir via shalin)
 
-* SOLR-5378: A new SuggestComponent that fully utilizes the Lucene suggester
+* SOLR-5378, SOLR-5528: A new SuggestComponent that fully utilizes the Lucene suggester
   module and adds pluggable dictionaries, payloads and better distributed support.
   This is intended to eventually replace the Suggester support through the
   SpellCheckComponent. (Areek Zillur, Varun Thacker via shalin)
diff --git a/solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.java b/solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.java
index 5aa0806..c8aea7d 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/SuggestComponent.java
@@ -83,7 +83,6 @@ public class SuggestComponent extends SearchComponent implements SolrCoreAware,
   private static class SuggesterResultLabels {
     static final String SUGGEST = "suggest";
     static final String SUGGESTIONS = "suggestions";
-    static final String SUGGESTION = "suggestion";
     static final String SUGGESTION_NUM_FOUND = "numFound";
     static final String SUGGESTION_TERM = "term";
     static final String SUGGESTION_WEIGHT = "weight";
@@ -100,7 +99,7 @@ public class SuggestComponent extends SearchComponent implements SolrCoreAware,
   @Override
   public void inform(SolrCore core) {
     if (initParams != null) {
-      LOG.info("Initializing SuggesterComponent");
+      LOG.info("Initializing SuggestComponent");
       boolean hasDefault = false;
       for (int i = 0; i < initParams.size(); i++) {
         if (initParams.getName(i).equals(CONFIG_PARAM_LABEL)) {
@@ -141,14 +140,18 @@ public class SuggestComponent extends SearchComponent implements SolrCoreAware,
   @Override
   public void prepare(ResponseBuilder rb) throws IOException {
     SolrParams params = rb.req.getParams();
-    LOG.info("Suggester prepare with : " + params);
+    LOG.info("SuggestComponent prepare with : " + params);
     if (!params.getBool(COMPONENT_NAME, false)) {
       return;
     }
 
     SolrSuggester suggester = getSuggester(params);
     if (suggester == null) {
-      throw new IllegalArgumentException("Error in configuration, no suggester found");
+      if (params.get(SUGGEST_DICT) != null) {
+        throw new IllegalArgumentException("No suggester named " + params.get(SUGGEST_DICT) +" was configured");
+      } else {
+        throw new IllegalArgumentException("No default suggester was configured");
+      }
     }
     if (params.getBool(SUGGEST_BUILD, false)) {
       suggester.build(rb.req.getCore(), rb.req.getSearcher());
@@ -163,7 +166,7 @@ public class SuggestComponent extends SearchComponent implements SolrCoreAware,
   @Override
   public int distributedProcess(ResponseBuilder rb) {
     SolrParams params = rb.req.getParams();
-    LOG.info("Suggester distributedProcess with : " + params);
+    LOG.info("SuggestComponent distributedProcess with : " + params);
     if (rb.stage < ResponseBuilder.STAGE_EXECUTE_QUERY) 
       return ResponseBuilder.STAGE_EXECUTE_QUERY;
     if (rb.stage == ResponseBuilder.STAGE_EXECUTE_QUERY) {
@@ -185,7 +188,7 @@ public class SuggestComponent extends SearchComponent implements SolrCoreAware,
   @Override
   public void process(ResponseBuilder rb) throws IOException {
     SolrParams params = rb.req.getParams();
-    LOG.info("Suggester process with : " + params);
+    LOG.info("SuggestComponent process with : " + params);
     if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {
       return;
     }
@@ -204,10 +207,8 @@ public class SuggestComponent extends SearchComponent implements SolrCoreAware,
       SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count); 
       SuggesterResult suggesterResult = suggester.getSuggestions(options);
       
-      NamedList response = new SimpleOrderedMap();
-      NamedList<NamedList> namedListResult = toNamedList(suggesterResult);
-      response.add(SuggesterResultLabels.SUGGESTIONS, namedListResult);
-      rb.rsp.add(SuggesterResultLabels.SUGGEST, response);
+      NamedList<NamedList<Object>> namedListResult = toNamedList(suggesterResult);
+      rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResult);
     }
   }
   
@@ -217,22 +218,25 @@ public class SuggestComponent extends SearchComponent implements SolrCoreAware,
   @Override
   public void finishStage(ResponseBuilder rb) {
     SolrParams params = rb.req.getParams();
-    LOG.info("Suggester finishStage with : " + params);
+    LOG.info("SuggestComponent finishStage with : " + params);
     if (!params.getBool(COMPONENT_NAME, false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)
       return;
     int count = params.getInt(SUGGEST_COUNT, 1);
     
     List<SuggesterResult> suggesterResults = new ArrayList<SuggesterResult>();
-    NamedList response = new SimpleOrderedMap();
-    NamedList<NamedList> namedListResult = null;
+    NamedList<NamedList<Object>> namedListResult = null;
     
     // Collect Shard responses
     for (ShardRequest sreq : rb.finished) {
       for (ShardResponse srsp : sreq.responses) {
-        NamedList<NamedList> namedList = 
-            (NamedList<NamedList>) srsp.getSolrResponse().getResponse().get(SuggesterResultLabels.SUGGEST);
-        LOG.info(srsp.getShard() + " : " + namedList);
-        suggesterResults.add(toSuggesterResult(namedList));
+        NamedList<Object> resp;
+        if((resp = srsp.getSolrResponse().getResponse()) != null) {
+          @SuppressWarnings("unchecked")
+          NamedList<NamedList<Object>> namedList = 
+              (NamedList<NamedList<Object>>) resp.get(SuggesterResultLabels.SUGGEST);
+          LOG.info(srsp.getShard() + " : " + namedList);
+          suggesterResults.add(toSuggesterResult(namedList));
+        }
       }
     }
     
@@ -240,9 +244,8 @@ public class SuggestComponent extends SearchComponent implements SolrCoreAware,
     SuggesterResult suggesterResult = merge(suggesterResults, count);
     namedListResult = toNamedList(suggesterResult);
       
-    response.add(SuggesterResultLabels.SUGGESTIONS, namedListResult);
-    rb.rsp.add(SuggesterResultLabels.SUGGEST, response);
-  };
+    rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResult);
+  }
 
   /** 
    * Given a list of {@link SuggesterResult} and <code>count</code>
@@ -251,6 +254,9 @@ public class SuggestComponent extends SearchComponent implements SolrCoreAware,
    * weights
    * */
   private static SuggesterResult merge(List<SuggesterResult> suggesterResults, int count) {
+    if (suggesterResults.size() == 1) {
+      return suggesterResults.get(0);
+    }
     SuggesterResult result = new SuggesterResult();
     Set<String> allTokens = new HashSet<String>();
     
@@ -300,7 +306,8 @@ public class SuggestComponent extends SearchComponent implements SolrCoreAware,
     return stats;
   }
   
-  private long sizeInBytes() {
+  /** Returns the total size of all the suggester */
+  public long sizeInBytes() {
     long sizeInBytes = 0;
     for (SolrSuggester suggester : suggesters.values()) {
       sizeInBytes += suggester.sizeInBytes();
@@ -321,60 +328,61 @@ public class SuggestComponent extends SearchComponent implements SolrCoreAware,
   }
   
   /** Convert {@link SuggesterResult} to NamedList for constructing responses */
-  private NamedList<NamedList> toNamedList(SuggesterResult suggesterResult) {
-    NamedList<NamedList> results = new NamedList<NamedList>();
+  private NamedList<NamedList<Object>> toNamedList(SuggesterResult suggesterResult) {
+    NamedList<NamedList<Object>> results = new SimpleOrderedMap<NamedList<Object>>();
     for (String token : suggesterResult.getTokens()) {
-      SimpleOrderedMap suggestionBody = new SimpleOrderedMap();
+      SimpleOrderedMap<Object> suggestionBody = new SimpleOrderedMap<Object>();
       List<LookupResult> lookupResults = suggesterResult.getLookupResult(token);
       suggestionBody.add(SuggesterResultLabels.SUGGESTION_NUM_FOUND, lookupResults.size());
-      
+      List<SimpleOrderedMap<Object>> suggestEntriesNamedList = new ArrayList<SimpleOrderedMap<Object>>();
       for (LookupResult lookupResult : lookupResults) {
         String suggestionString = lookupResult.key.toString();
         long weight = lookupResult.value;
         String payload = (lookupResult.payload != null) ? 
             lookupResult.payload.utf8ToString()
             : "";
-            
-        SimpleOrderedMap suggestEntryNamedList = new SimpleOrderedMap();
+        
+        SimpleOrderedMap<Object> suggestEntryNamedList = new SimpleOrderedMap<Object>();
         suggestEntryNamedList.add(SuggesterResultLabels.SUGGESTION_TERM, suggestionString);
         suggestEntryNamedList.add(SuggesterResultLabels.SUGGESTION_WEIGHT, weight);
         suggestEntryNamedList.add(SuggesterResultLabels.SUGGESTION_PAYLOAD, payload);
+        suggestEntriesNamedList.add(suggestEntryNamedList);
         
-        suggestionBody.add(SuggesterResultLabels.SUGGESTION, suggestEntryNamedList);
       }
+      suggestionBody.add(SuggesterResultLabels.SUGGESTIONS, suggestEntriesNamedList);
       results.add(token, suggestionBody);
     }
     return results;
   }
   
   /** Convert NamedList (suggester response) to {@link SuggesterResult} */
-  private SuggesterResult toSuggesterResult(NamedList<NamedList> suggesterRespNamedList) {
+  private SuggesterResult toSuggesterResult(NamedList<NamedList<Object>> suggestions) {
     SuggesterResult result = new SuggesterResult();
-    if (suggesterRespNamedList == null) {
+    if (suggestions == null) {
       return result;
     }
-    NamedList suggestions = (NamedList) suggesterRespNamedList.get(SuggesterResultLabels.SUGGESTIONS);
-    if (suggestions != null) {
-      // for each token
-      for(int i = 0; i < suggestions.size() ; i++) {
-        String tokenString = suggestions.getName(i);
-        List<LookupResult> lookupResults = new ArrayList<LookupResult>();
-        NamedList suggestion = (NamedList) suggestions.getVal(i);
-        // for each suggestion
-        for (int j = 0; j < suggestion.size(); j++) {
-          String property = suggestion.getName(j);
-          if (property.equals(SuggesterResultLabels.SUGGESTION)) {
-            NamedList suggestionEntry = (NamedList) suggestion.getVal(j);
+    // for each token
+    for(int i = 0; i < suggestions.size() ; i++) {
+      String tokenString = suggestions.getName(i);
+      List<LookupResult> lookupResults = new ArrayList<LookupResult>();
+      NamedList<Object> suggestion = (NamedList<Object>) suggestions.getVal(i);
+      // for each suggestion
+      for (int j = 0; j < suggestion.size(); j++) {
+        String property = suggestion.getName(j);
+        if (property.equals(SuggesterResultLabels.SUGGESTIONS)) {
+          @SuppressWarnings("unchecked")
+          List<NamedList<Object>> suggestionEntries = (List<NamedList<Object>>) suggestion.getVal(j);
+          for(NamedList<Object> suggestionEntry : suggestionEntries) {
             String term = (String) suggestionEntry.get(SuggesterResultLabels.SUGGESTION_TERM);
             Long weight = (Long) suggestionEntry.get(SuggesterResultLabels.SUGGESTION_WEIGHT);
             String payload = (String) suggestionEntry.get(SuggesterResultLabels.SUGGESTION_PAYLOAD);
             LookupResult res = new LookupResult(new CharsRef(term), weight, new BytesRef(payload));
             lookupResults.add(res);
           }
-          result.add(tokenString, lookupResults);
         }
+        result.add(tokenString, lookupResults);
       }
-    } 
+    }
     return result;
   }
   
@@ -393,8 +401,7 @@ public class SuggestComponent extends SearchComponent implements SolrCoreAware,
     }
 
     @Override
-    public void init(NamedList args) {
-    }
+    public void init(NamedList args) {}
 
     @Override
     public void newSearcher(SolrIndexSearcher newSearcher,
diff --git a/solr/core/src/test/org/apache/solr/handler/component/DistributedSuggestComponentTest.java b/solr/core/src/test/org/apache/solr/handler/component/DistributedSuggestComponentTest.java
new file mode 100644
index 0000000..bec8616
--- /dev/null
+++ b/solr/core/src/test/org/apache/solr/handler/component/DistributedSuggestComponentTest.java
@@ -0,0 +1,139 @@
+package org.apache.solr.handler.component;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import junit.framework.Assert;
+
+import org.apache.lucene.util.LuceneTestCase.Slow;
+import org.apache.solr.BaseDistributedSearchTestCase;
+import org.apache.solr.client.solrj.response.QueryResponse;
+import org.apache.solr.common.util.NamedList;
+import org.apache.solr.spelling.suggest.SuggesterParams;
+import org.junit.BeforeClass;
+
+/**
+ * Test for SuggestComponent's distributed querying
+ *
+ * @see org.apache.solr.handler.component.SuggestComponent
+ */
+@Slow
+public class DistributedSuggestComponentTest extends BaseDistributedSearchTestCase {
+  
+  public DistributedSuggestComponentTest() {
+    //Helpful for debugging
+    //fixShardCount=true;
+    //shardCount=2;
+    //stress=0;
+    //deadServers=null;
+    configString = "solrconfig-suggestercomponent.xml";
+  }
+
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    useFactory(null); // need an FS factory
+  }
+
+  @Override
+  public void setUp() throws Exception {
+    super.setUp();
+  }
+  
+  @Override
+  public void tearDown() throws Exception {
+    super.tearDown();
+  }
+  
+  @Override
+  public void validateControlData(QueryResponse control) throws Exception
+  {    
+    NamedList<Object> nl = control.getResponse();
+    @SuppressWarnings("unchecked")
+    NamedList<Object> sc = (NamedList<Object>) nl.get("suggest");
+    if(sc.size()==0) {
+      Assert.fail("Control data did not return any suggestions.");
+    }
+  } 
+  
+  @Override
+  public void doTest() throws Exception {
+    del("*:*");
+    index(id, "1", "cat", "This is another title", "price", "10", "weight", "10");
+    index(id, "2", "cat", "Yet another", "price", "15", "weight", "10");
+    index(id, "3", "cat", "Yet another title", "price", "20", "weight", "20");
+    index(id, "4", "cat", "suggestions for suggest", "price", "25", "weight", "20");
+    index(id, "5", "cat", "Red fox", "price", "30", "weight", "20");
+    index(id, "6", "cat", "Rad fox", "price", "35", "weight", "30");
+    index(id, "7", "cat", "example data", "price", "40", "weight", "30");
+    index(id, "8", "cat", "example inputdata", "price", "45", "weight", "30");
+    index(id, "9", "cat", "blah in blah", "price", "50", "weight", "40");
+    index(id, "10", "cat", "another blah in blah", "price", "55", "weight", "40");
+    commit();
+
+    handle.clear();
+    handle.put("QTime", SKIPVAL);
+    handle.put("timestamp", SKIPVAL);
+    handle.put("maxScore", SKIPVAL);
+    handle.put("response", SKIP);
+    
+    String requestHandlerName = "/suggest";
+    String docDictName = "suggest_fuzzy_doc_dict";
+    String docExprDictName = "suggest_fuzzy_doc_expr_dict";
+    
+    //Shortcut names
+    String build = SuggesterParams.SUGGEST_BUILD;
+    String count = SuggesterParams.SUGGEST_COUNT;
+    String dictionaryName = SuggesterParams.SUGGEST_DICT;
+    
+    //Build the suggest dictionary 
+    query(buildRequest("", true, requestHandlerName, build, "true", dictionaryName, docDictName));
+    query(buildRequest("", true, requestHandlerName, build, "true", dictionaryName, docExprDictName));
+    
+    //Test Basic Functionality
+    query(buildRequest("exampel", false, requestHandlerName, dictionaryName, docDictName, count, "2"));
+    query(buildRequest("Yet", false, requestHandlerName, dictionaryName, docExprDictName, count, "2"));
+    query(buildRequest("blah", true, requestHandlerName, dictionaryName, docExprDictName, count, "2"));
+    query(buildRequest("blah", true, requestHandlerName, dictionaryName, docDictName, count, "2"));
+    
+  }
+  private Object[] buildRequest(String q, boolean useSuggestQ, String handlerName, String... addlParams) {
+    List<Object> params = new ArrayList<Object>();
+
+    if(useSuggestQ) {
+      params.add("suggest.q");
+    } else {
+      params.add("q");
+    }
+    params.add(q);
+
+    params.add("qt");
+    params.add(handlerName);
+    
+    params.add("shards.qt");
+    params.add(handlerName);
+    
+    if(addlParams!=null) {
+      params.addAll(Arrays.asList(addlParams));
+    }
+    return params.toArray(new Object[params.size()]);    
+  }
+  
+}
diff --git a/solr/core/src/test/org/apache/solr/handler/component/DistributedSuggesterComponentTest.java b/solr/core/src/test/org/apache/solr/handler/component/DistributedSuggesterComponentTest.java
deleted file mode 100644
index 764b519..0000000
--- a/solr/core/src/test/org/apache/solr/handler/component/DistributedSuggesterComponentTest.java
+++ /dev/null
@@ -1,141 +0,0 @@
-package org.apache.solr.handler.component;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import junit.framework.Assert;
-
-import org.apache.lucene.util.LuceneTestCase.Slow;
-import org.apache.solr.BaseDistributedSearchTestCase;
-import org.apache.solr.client.solrj.response.QueryResponse;
-import org.apache.solr.common.util.NamedList;
-import org.apache.solr.spelling.suggest.SuggesterParams;
-import org.junit.BeforeClass;
-
-/**
- * Test for SuggestComponent's distributed querying
- *
- * @see org.apache.solr.handler.component.SuggestComponent
- */
-@Slow
-public class DistributedSuggesterComponentTest extends BaseDistributedSearchTestCase {
-  
-  public DistributedSuggesterComponentTest() {
-    //Helpful for debugging
-    //fixShardCount=true;
-    //shardCount=2;
-    //stress=0;
-    //deadServers=null;
-    configString = "solrconfig-suggestercomponent.xml";
-  }
-
-  @BeforeClass
-  public static void beforeClass() throws Exception {
-    useFactory(null); // need an FS factory
-  }
-
-  @Override
-  public void setUp() throws Exception {
-    super.setUp();
-  }
-  
-  @Override
-  public void tearDown() throws Exception {
-    super.tearDown();
-  }
-  
-  @Override
-  public void validateControlData(QueryResponse control) throws Exception
-  {    
-    NamedList<Object> nl = control.getResponse();
-    @SuppressWarnings("unchecked")
-    NamedList<Object> sc = (NamedList<Object>) nl.get("suggest");
-    @SuppressWarnings("unchecked")
-    NamedList<Object> sug = (NamedList<Object>) sc.get("suggestions");
-    if(sug.size()==0) {
-      Assert.fail("Control data did not return any suggestions.");
-    }
-  } 
-  
-  @Override
-  public void doTest() throws Exception {
-    del("*:*");
-    index(id, "1", "cat", "This is another title", "price", "10", "weight", "10");
-    index(id, "2", "cat", "Yet another", "price", "15", "weight", "10");
-    index(id, "3", "cat", "Yet another title", "price", "20", "weight", "20");
-    index(id, "4", "cat", "suggestions for suggest", "price", "25", "weight", "20");
-    index(id, "5", "cat", "Red fox", "price", "30", "weight", "20");
-    index(id, "6", "cat", "Rad fox", "price", "35", "weight", "30");
-    index(id, "7", "cat", "example data", "price", "40", "weight", "30");
-    index(id, "8", "cat", "example inputdata", "price", "45", "weight", "30");
-    index(id, "9", "cat", "blah in blah", "price", "50", "weight", "40");
-    index(id, "10", "cat", "another blah in blah", "price", "55", "weight", "40");
-    commit();
-
-    handle.clear();
-    handle.put("QTime", SKIPVAL);
-    handle.put("timestamp", SKIPVAL);
-    handle.put("maxScore", SKIPVAL);
-    handle.put("response", SKIP);
-    
-    String requestHandlerName = "/suggest";
-    String docDictName = "suggest_fuzzy_doc_dict";
-    String docExprDictName = "suggest_fuzzy_doc_expr_dict";
-    
-    //Shortcut names
-    String build = SuggesterParams.SUGGEST_BUILD;
-    String count = SuggesterParams.SUGGEST_COUNT;
-    String dictionaryName = SuggesterParams.SUGGEST_DICT;
-    
-    //Build the suggest dictionary 
-    query(buildRequest("", true, requestHandlerName, build, "true", dictionaryName, docDictName));
-    query(buildRequest("", true, requestHandlerName, build, "true", dictionaryName, docExprDictName));
-    
-    //Test Basic Functionality
-    query(buildRequest("exampel", false, requestHandlerName, dictionaryName, docDictName, count, "2"));
-    query(buildRequest("Yet", false, requestHandlerName, dictionaryName, docExprDictName, count, "2"));
-    query(buildRequest("blah", true, requestHandlerName, dictionaryName, docExprDictName, count, "2"));
-    query(buildRequest("blah", true, requestHandlerName, dictionaryName, docDictName, count, "2"));
-    
-  }
-  private Object[] buildRequest(String q, boolean useSuggestQ, String handlerName, String... addlParams) {
-    List<Object> params = new ArrayList<Object>();
-
-    if(useSuggestQ) {
-      params.add("suggest.q");
-    } else {
-      params.add("q");
-    }
-    params.add(q);
-
-    params.add("qt");
-    params.add(handlerName);
-    
-    params.add("shards.qt");
-    params.add(handlerName);
-    
-    if(addlParams!=null) {
-      params.addAll(Arrays.asList(addlParams));
-    }
-    return params.toArray(new Object[params.size()]);    
-  }
-  
-}
diff --git a/solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest.java b/solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest.java
index 86bfc08..931f793 100644
--- a/solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest.java
+++ b/solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest.java
@@ -66,11 +66,11 @@ public class SuggestComponentTest extends SolrTestCaseJ4 {
         SuggesterParams.SUGGEST_BUILD, "true",
         SuggesterParams.SUGGEST_Q, "exampel",
         SuggesterParams.SUGGEST_COUNT, "2"),
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='exampel']/int[@name='numFound'][.='2']",
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='exampel']/lst[@name='suggestion'][1]/str[@name='term'][.='example inputdata']",
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='exampel']/lst[@name='suggestion'][1]/long[@name='weight'][.='45']",
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='exampel']/lst[@name='suggestion'][2]/str[@name='term'][.='example data']",
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='exampel']/lst[@name='suggestion'][2]/long[@name='weight'][.='40']"
+        "//lst[@name='suggest']/lst[@name='exampel']/int[@name='numFound'][.='2']",
+        "//lst[@name='suggest']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='example inputdata']",
+        "//lst[@name='suggest']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='45']",
+        "//lst[@name='suggest']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='example data']",
+        "//lst[@name='suggest']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='40']"
         );
     
     assertQ(req("qt", rh, 
@@ -78,11 +78,11 @@ public class SuggestComponentTest extends SolrTestCaseJ4 {
         SuggesterParams.SUGGEST_BUILD, "true",
         SuggesterParams.SUGGEST_Q, "Rad",
         SuggesterParams.SUGGEST_COUNT, "2"),
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='Rad']/int[@name='numFound'][.='2']",
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='Rad']/lst[@name='suggestion'][1]/str[@name='term'][.='Rad fox']",
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='Rad']/lst[@name='suggestion'][1]/long[@name='weight'][.='35']",
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='Rad']/lst[@name='suggestion'][2]/str[@name='term'][.='Red fox']",
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='Rad']/lst[@name='suggestion'][2]/long[@name='weight'][.='30']"
+        "//lst[@name='suggest']/lst[@name='Rad']/int[@name='numFound'][.='2']",
+        "//lst[@name='suggest']/lst[@name='Rad']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='Rad fox']",
+        "//lst[@name='suggest']/lst[@name='Rad']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='35']",
+        "//lst[@name='suggest']/lst[@name='Rad']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='Red fox']",
+        "//lst[@name='suggest']/lst[@name='Rad']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='30']"
         );
   }
   
@@ -93,11 +93,11 @@ public class SuggestComponentTest extends SolrTestCaseJ4 {
         SuggesterParams.SUGGEST_BUILD, "true",
         SuggesterParams.SUGGEST_Q, "exampel",
         SuggesterParams.SUGGEST_COUNT, "2"),
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='exampel']/int[@name='numFound'][.='2']",
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='exampel']/lst[@name='suggestion'][1]/str[@name='term'][.='example inputdata']",
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='exampel']/lst[@name='suggestion'][1]/long[@name='weight'][.='120']",
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='exampel']/lst[@name='suggestion'][2]/str[@name='term'][.='example data']",
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='exampel']/lst[@name='suggestion'][2]/long[@name='weight'][.='110']"
+        "//lst[@name='suggest']/lst[@name='exampel']/int[@name='numFound'][.='2']",
+        "//lst[@name='suggest']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='example inputdata']",
+        "//lst[@name='suggest']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='120']",
+        "//lst[@name='suggest']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='example data']",
+        "//lst[@name='suggest']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='110']"
         );
   }
   
@@ -108,11 +108,11 @@ public class SuggestComponentTest extends SolrTestCaseJ4 {
         SuggesterParams.SUGGEST_BUILD, "true",
         SuggesterParams.SUGGEST_Q, "chn",
         SuggesterParams.SUGGEST_COUNT, "2"),
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chn']/int[@name='numFound'][.='2']",
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chn']/lst[@name='suggestion'][1]/str[@name='term'][.='chance']",
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chn']/lst[@name='suggestion'][1]/long[@name='weight'][.='1']",
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chn']/lst[@name='suggestion'][2]/str[@name='term'][.='change']",
-        "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chn']/lst[@name='suggestion'][2]/long[@name='weight'][.='1']"
+        "//lst[@name='suggest']/lst[@name='chn']/int[@name='numFound'][.='2']",
+        "//lst[@name='suggest']/lst[@name='chn']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='chance']",
+        "//lst[@name='suggest']/lst[@name='chn']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='1']",
+        "//lst[@name='suggest']/lst[@name='chn']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='change']",
+        "//lst[@name='suggest']/lst[@name='chn']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='1']"
         );
   }
 }
diff --git a/solr/core/src/test/org/apache/solr/spelling/suggest/TestFileDictionaryLookup.java b/solr/core/src/test/org/apache/solr/spelling/suggest/TestFileDictionaryLookup.java
index 5603c93..31531d8 100644
--- a/solr/core/src/test/org/apache/solr/spelling/suggest/TestFileDictionaryLookup.java
+++ b/solr/core/src/test/org/apache/solr/spelling/suggest/TestFileDictionaryLookup.java
@@ -33,28 +33,28 @@ public class TestFileDictionaryLookup extends SolrTestCaseJ4  {
     
     // tests to demonstrate default maxEdit parameter (value: 1), control for testWithMaxEdit2
     assertQ(req("qt", REQUEST_URI, "q", "chagn", SuggesterParams.SUGGEST_COUNT, "3"),
-      "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chagn']/int[@name='numFound'][.='2']",
-      "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chagn']/lst[@name='suggestion'][1]/str[@name='term'][.='chance']",
-      "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chagn']/lst[@name='suggestion'][2]/str[@name='term'][.='change']"
+      "//lst[@name='suggest']/lst[@name='chagn']/int[@name='numFound'][.='2']",
+      "//lst[@name='suggest']/lst[@name='chagn']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='chance']",
+      "//lst[@name='suggest']/lst[@name='chagn']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='change']"
       );
     
     assertQ(req("qt", REQUEST_URI, "q", "chacn", SuggesterParams.SUGGEST_COUNT, "3"),
-      "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chacn']/int[@name='numFound'][.='2']",
-      "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chacn']/lst[@name='suggestion'][1]/str[@name='term'][.='chance']",
-      "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chacn']/lst[@name='suggestion'][2]/str[@name='term'][.='change']"
+      "//lst[@name='suggest']/lst[@name='chacn']/int[@name='numFound'][.='2']",
+      "//lst[@name='suggest']/lst[@name='chacn']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='chance']",
+      "//lst[@name='suggest']/lst[@name='chacn']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='change']"
       );
     
     assertQ(req("qt", REQUEST_URI, "q", "chagr", SuggesterParams.SUGGEST_COUNT, "3"),
-      "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chagr']/int[@name='numFound'][.='1']",
-      "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chagr']/lst[@name='suggestion'][1]/str[@name='term'][.='charge']"
+      "//lst[@name='suggest']/lst[@name='chagr']/int[@name='numFound'][.='1']",
+      "//lst[@name='suggest']/lst[@name='chagr']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='charge']"
       );
     
     assertQ(req("qt", REQUEST_URI, "q", "chanr", SuggesterParams.SUGGEST_COUNT, "3"),
-    "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chanr']/int[@name='numFound'][.='3']"
+    "//lst[@name='suggest']/lst[@name='chanr']/int[@name='numFound'][.='3']"
     );
     
     assertQ(req("qt", REQUEST_URI, "q", "cyhnce", SuggesterParams.SUGGEST_COUNT, "3"),
-    "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='cyhnce']/int[@name='numFound'][.='0']"
+    "//lst[@name='suggest']/lst[@name='cyhnce']/int[@name='numFound'][.='0']"
     );
   }
 }
diff --git a/solr/core/src/test/org/apache/solr/spelling/suggest/TestHighFrequencyDictionaryFactory.java b/solr/core/src/test/org/apache/solr/spelling/suggest/TestHighFrequencyDictionaryFactory.java
index 4090a77..c5a6350 100644
--- a/solr/core/src/test/org/apache/solr/spelling/suggest/TestHighFrequencyDictionaryFactory.java
+++ b/solr/core/src/test/org/apache/solr/spelling/suggest/TestHighFrequencyDictionaryFactory.java
@@ -47,28 +47,28 @@ public class TestHighFrequencyDictionaryFactory extends SolrTestCaseJ4  {
     
  // tests to demonstrate default maxEdit parameter (value: 1), control for testWithMaxEdit2
     assertQ(req("qt", REQUEST_URI, "q", "chagn", SuggesterParams.SUGGEST_COUNT, "3"),
-      "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chagn']/int[@name='numFound'][.='2']",
-      "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chagn']/lst[@name='suggestion'][1]/str[@name='term'][.='chance']",
-      "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chagn']/lst[@name='suggestion'][2]/str[@name='term'][.='change']"
+      "//lst[@name='suggest']/lst[@name='chagn']/int[@name='numFound'][.='2']",
+      "//lst[@name='suggest']/lst[@name='chagn']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='chance']",
+      "//lst[@name='suggest']/lst[@name='chagn']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='change']"
       );
     
     assertQ(req("qt", REQUEST_URI, "q", "chacn", SuggesterParams.SUGGEST_COUNT, "3"),
-      "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chacn']/int[@name='numFound'][.='2']",
-      "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chacn']/lst[@name='suggestion'][1]/str[@name='term'][.='chance']",
-      "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chacn']/lst[@name='suggestion'][2]/str[@name='term'][.='change']"
+      "//lst[@name='suggest']/lst[@name='chacn']/int[@name='numFound'][.='2']",
+      "//lst[@name='suggest']/lst[@name='chacn']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='chance']",
+      "//lst[@name='suggest']/lst[@name='chacn']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='change']"
       );
     
     assertQ(req("qt", REQUEST_URI, "q", "chagr", SuggesterParams.SUGGEST_COUNT, "3"),
-      "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chagr']/int[@name='numFound'][.='1']",
-      "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chagr']/lst[@name='suggestion'][1]/str[@name='term'][.='charge']"
+      "//lst[@name='suggest']/lst[@name='chagr']/int[@name='numFound'][.='1']",
+      "//lst[@name='suggest']/lst[@name='chagr']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='charge']"
       );
     
     assertQ(req("qt", REQUEST_URI, "q", "chanr", SuggesterParams.SUGGEST_COUNT, "3"),
-    "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='chanr']/int[@name='numFound'][.='3']"
+    "//lst[@name='suggest']/lst[@name='chanr']/int[@name='numFound'][.='3']"
     );
     
     assertQ(req("qt", REQUEST_URI, "q", "cyhnce", SuggesterParams.SUGGEST_COUNT, "3"),
-    "//lst[@name='suggest']/lst[@name='suggestions']/lst[@name='cyhnce']/int[@name='numFound'][.='0']"
+    "//lst[@name='suggest']/lst[@name='cyhnce']/int[@name='numFound'][.='0']"
     );
   }
 }

