GitDiffStart: 63e5b30751e5506b029a6f353765faaee1a5380d | Fri Dec 18 16:44:21 2015 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 9e52842..b7073e7 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -233,6 +233,9 @@ New Features
 
 * SOLR-8434: Add a flag 'blockUnknown' to BasicAuthPlugin to block unauthenticated requests (noble)
 
+* SOLR-8230: JSON Facet API: add "facet-info" into debug section of response when debugQuery=true
+  (Michael Sun, yonik)
+
 
 Bug Fixes
 ----------------------
diff --git a/solr/core/src/java/org/apache/solr/handler/component/DebugComponent.java b/solr/core/src/java/org/apache/solr/handler/component/DebugComponent.java
index 48fea5d..41fecf9 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/DebugComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/DebugComponent.java
@@ -40,6 +40,7 @@ import org.apache.solr.common.util.SuppressForbidden;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.search.DocList;
 import org.apache.solr.search.QueryParsing;
+import org.apache.solr.search.facet.FacetDebugInfo;
 import org.apache.solr.util.SolrPluginUtils;
 
 import static org.apache.solr.common.params.CommonParams.FQ;
@@ -108,6 +109,11 @@ public class DebugComponent extends SearchComponent
         info.addAll( stdinfo );
       }
 
+      FacetDebugInfo fdebug = (FacetDebugInfo)(rb.req.getContext().get("FacetDebugInfo"));
+      if (fdebug != null) {
+        info.add("facet-trace", fdebug.getFacetDebugInfo());
+      }
+      
       if (rb.req.getJSON() != null) {
         info.add(JSON, rb.req.getJSON());
       }
diff --git a/solr/core/src/java/org/apache/solr/search/facet/FacetDebugInfo.java b/solr/core/src/java/org/apache/solr/search/facet/FacetDebugInfo.java
new file mode 100644
index 0000000..eb61bd2
--- /dev/null
+++ b/solr/core/src/java/org/apache/solr/search/facet/FacetDebugInfo.java
@@ -0,0 +1,94 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.search.facet;
+
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.solr.common.util.SimpleOrderedMap;
+
+public class FacetDebugInfo {
+  String processor;
+  long elapse;
+  String filter;
+  Map<String, Object> info;  // additional information
+  final List<FacetDebugInfo> children;
+  
+  Map<String, Object> reqDescription;
+  
+  public FacetDebugInfo() {
+    children = new ArrayList<FacetDebugInfo>();
+    info = new LinkedHashMap<String, Object>();
+  }
+  
+  public void addChild(FacetDebugInfo child) {
+    children.add(child);
+  }
+  
+  public void setProcessor(String processor) {
+    this.processor = processor;
+  }
+
+  public void setElapse(long elapse) {
+    this.elapse = elapse;
+  }
+
+  public void setReqDescription(Map<String, Object> reqDescription) {
+    this.reqDescription = reqDescription;
+  }
+
+  public void setFilter(String filter) {
+    this.filter = filter;
+  }
+
+  public void putInfoItem(String key, Object value) {
+    info.put(key, value);
+  }
+  
+  public Map<String, Object> getInfo() {
+    return info;
+  }
+  
+  public SimpleOrderedMap getFacetDebugInfo() {
+    SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();
+    
+    if (filter != null) info.add("filter", filter);
+    info.add("processor", processor);
+    info.add("elapse", elapse);
+    if (reqDescription != null) {
+      info.addAll(reqDescription);
+    } 
+    info.addAll(this.info);
+    
+    if (children != null && children.size() > 0) {
+      List<Object> subfacet = new ArrayList<Object>();
+      info.add("sub-facet", subfacet);
+      for (FacetDebugInfo child : children) {
+        subfacet.add(child.getFacetDebugInfo());
+      }
+    }     
+    return info;
+  } 
+
+  @Override
+  public String toString() {
+    return "facet debug info: processor " + processor + " elapse " + elapse + "ms";
+  }
+}
diff --git a/solr/core/src/java/org/apache/solr/search/facet/FacetField.java b/solr/core/src/java/org/apache/solr/search/facet/FacetField.java
index 6213003..4378a02 100644
--- a/solr/core/src/java/org/apache/solr/search/facet/FacetField.java
+++ b/solr/core/src/java/org/apache/solr/search/facet/FacetField.java
@@ -42,6 +42,7 @@ import org.apache.lucene.util.PriorityQueue;
 import org.apache.lucene.util.StringHelper;
 import org.apache.lucene.util.UnicodeUtil;
 import org.apache.solr.common.SolrException;
+import org.apache.solr.common.util.NamedList;
 import org.apache.solr.common.util.SimpleOrderedMap;
 import org.apache.solr.schema.FieldType;
 import org.apache.solr.schema.SchemaField;
@@ -153,6 +154,14 @@ public class FacetField extends FacetRequest {
   public FacetMerger createFacetMerger(Object prototype) {
     return new FacetFieldMerger(this);
   }
+  
+  @Override
+  public Map<String, Object> getFacetDescription() {
+    Map<String, Object> descr = new HashMap<String, Object>();
+    descr.put("field", field);
+    descr.put("limit", new Long(limit));
+    return descr;
+  }
 }
 
 
diff --git a/solr/core/src/java/org/apache/solr/search/facet/FacetModule.java b/solr/core/src/java/org/apache/solr/search/facet/FacetModule.java
index dbf8d82..8d965e7 100644
--- a/solr/core/src/java/org/apache/solr/search/facet/FacetModule.java
+++ b/solr/core/src/java/org/apache/solr/search/facet/FacetModule.java
@@ -41,6 +41,7 @@ import org.apache.solr.handler.component.ShardRequest;
 import org.apache.solr.handler.component.ShardResponse;
 import org.apache.solr.search.QueryContext;
 import org.apache.solr.search.SyntaxError;
+import org.apache.solr.util.RTimer;
 
 public class FacetModule extends SearchComponent {
 
@@ -81,7 +82,21 @@ public class FacetModule extends SearchComponent {
     }
 
     FacetProcessor fproc = facetState.facetRequest.createFacetProcessor(fcontext);
-    fproc.process();
+    if (rb.isDebug()) {
+      FacetDebugInfo fdebug = new FacetDebugInfo();
+      fcontext.setDebugInfo(fdebug);
+      fdebug.setReqDescription(facetState.facetRequest.getFacetDescription());
+      fdebug.setProcessor(fproc.getClass().getSimpleName());
+     
+      final RTimer timer = new RTimer();
+      fproc.process();
+      long timeElapsed = (long) timer.getTime();
+      fdebug.setElapse(timeElapsed);
+      rb.req.getContext().put("FacetDebugInfo", fdebug);
+    } else {
+      fproc.process();
+    }
+    
     rb.rsp.add("facets", fproc.getResponse());
   }
 
diff --git a/solr/core/src/java/org/apache/solr/search/facet/FacetProcessor.java b/solr/core/src/java/org/apache/solr/search/facet/FacetProcessor.java
index a5645b9..f4f03fd 100644
--- a/solr/core/src/java/org/apache/solr/search/facet/FacetProcessor.java
+++ b/solr/core/src/java/org/apache/solr/search/facet/FacetProcessor.java
@@ -42,6 +42,7 @@ import org.apache.solr.search.DocSet;
 import org.apache.solr.search.QParser;
 import org.apache.solr.search.SolrIndexSearcher;
 import org.apache.solr.search.SyntaxError;
+import org.apache.solr.util.RTimer;
 
 public class FacetProcessor<FacetRequestT extends FacetRequest>  {
   protected SimpleOrderedMap<Object> response;
@@ -219,7 +220,23 @@ public class FacetProcessor<FacetRequestT extends FacetRequest>  {
       // make a new context for each sub-facet since they can change the domain
       FacetContext subContext = fcontext.sub(filter, domain);
       FacetProcessor subProcessor = sub.getValue().createFacetProcessor(subContext);
-      subProcessor.process();
+      if (fcontext.getDebugInfo() != null) {   // if fcontext.debugInfo != null, it means rb.debug() == true
+        FacetDebugInfo fdebug = new FacetDebugInfo();
+        subContext.setDebugInfo(fdebug);
+        fcontext.getDebugInfo().addChild(fdebug);
+        
+        fdebug.setReqDescription(sub.getValue().getFacetDescription());
+        fdebug.setProcessor(subProcessor.getClass().getSimpleName());
+        if (subContext.filter != null) fdebug.setFilter(subContext.filter.toString());
+      
+        final RTimer timer = new RTimer();
+        subProcessor.process();
+        long timeElapsed = (long) timer.getTime();
+        fdebug.setElapse(timeElapsed);
+      } else {
+        subProcessor.process();
+      }
+
       response.add( sub.getKey(), subProcessor.getResponse() );
     }
   }
diff --git a/solr/core/src/java/org/apache/solr/search/facet/FacetQuery.java b/solr/core/src/java/org/apache/solr/search/facet/FacetQuery.java
index 3341d30..b668a6d 100644
--- a/solr/core/src/java/org/apache/solr/search/facet/FacetQuery.java
+++ b/solr/core/src/java/org/apache/solr/search/facet/FacetQuery.java
@@ -18,6 +18,8 @@ package org.apache.solr.search.facet;
  */
 
 import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
 
 import org.apache.lucene.search.Query;
 import org.apache.solr.common.util.SimpleOrderedMap;
@@ -35,6 +37,13 @@ public class FacetQuery extends FacetRequest {
   public FacetMerger createFacetMerger(Object prototype) {
     return new FacetQueryMerger(this);
   }
+  
+  @Override
+  public Map<String, Object> getFacetDescription() {
+    Map<String, Object> descr = new HashMap<String, Object>();
+    descr.put("query", q);
+    return descr;
+  }
 }
 
 
diff --git a/solr/core/src/java/org/apache/solr/search/facet/FacetRange.java b/solr/core/src/java/org/apache/solr/search/facet/FacetRange.java
index ea1159f..2ead222 100644
--- a/solr/core/src/java/org/apache/solr/search/facet/FacetRange.java
+++ b/solr/core/src/java/org/apache/solr/search/facet/FacetRange.java
@@ -21,7 +21,9 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.EnumSet;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 import org.apache.lucene.search.Query;
 import org.apache.lucene.util.LegacyNumericUtils;
@@ -33,8 +35,8 @@ import org.apache.solr.schema.SchemaField;
 import org.apache.solr.schema.TrieDateField;
 import org.apache.solr.schema.TrieField;
 import org.apache.solr.search.DocSet;
-import org.apache.solr.util.DateMathParser;
 import org.apache.solr.util.DateFormatUtil;
+import org.apache.solr.util.DateMathParser;
 
 public class FacetRange extends FacetRequest {
   String field;
@@ -56,6 +58,17 @@ public class FacetRange extends FacetRequest {
   public FacetMerger createFacetMerger(Object prototype) {
     return new FacetRangeMerger(this);
   }
+  
+  @Override
+  public Map<String, Object> getFacetDescription() {
+    Map<String, Object> descr = new HashMap<String, Object>();
+    descr.put("field", field);
+    descr.put("start", start);
+    descr.put("end", end);
+    descr.put("gap", gap);
+    return descr;
+  }
+  
 }
 
 
diff --git a/solr/core/src/java/org/apache/solr/search/facet/FacetRequest.java b/solr/core/src/java/org/apache/solr/search/facet/FacetRequest.java
index d8d233b..bb8302c 100644
--- a/solr/core/src/java/org/apache/solr/search/facet/FacetRequest.java
+++ b/solr/core/src/java/org/apache/solr/search/facet/FacetRequest.java
@@ -17,33 +17,19 @@ package org.apache.solr.search.facet;
  * limitations under the License.
  */
 
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collection;
 import java.util.EnumSet;
-import java.util.IdentityHashMap;
-import java.util.Iterator;
 import java.util.LinkedHashMap;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 
-import org.apache.lucene.index.LeafReaderContext;
-import org.apache.lucene.search.BooleanClause;
-import org.apache.lucene.search.BooleanQuery;
-import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.search.Query;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.params.FacetParams;
-import org.apache.solr.common.util.SimpleOrderedMap;
+import org.apache.solr.common.util.NamedList;
 import org.apache.solr.common.util.StrUtils;
-import org.apache.solr.handler.component.ResponseBuilder;
 import org.apache.solr.request.SolrQueryRequest;
-import org.apache.solr.request.SolrRequestInfo;
 import org.apache.solr.schema.IndexSchema;
-import org.apache.solr.schema.SchemaField;
-import org.apache.solr.search.BitDocSet;
-import org.apache.solr.search.DocIterator;
 import org.apache.solr.search.DocSet;
 import org.apache.solr.search.FunctionQParser;
 import org.apache.solr.search.FunctionQParserPlugin;
@@ -89,9 +75,22 @@ public abstract class FacetRequest {
     subFacets.put(key, facetRequest);
   }
 
+  @Override
+  public String toString() {
+    Map<String, Object> descr = getFacetDescription();
+    String s = "facet request: { ";
+    for (String key : descr.keySet()) {
+      s += key + ":" + descr.get(key) + ",";
+    }
+    s += "}";
+    return s;
+  }
+  
   public abstract FacetProcessor createFacetProcessor(FacetContext fcontext);
 
   public abstract FacetMerger createFacetMerger(Object prototype);
+  
+  public abstract Map<String, Object> getFacetDescription();
 }
 
 
@@ -106,7 +105,16 @@ class FacetContext {
   DocSet base;
   FacetContext parent;
   int flags;
-
+  FacetDebugInfo debugInfo;
+  
+  public void setDebugInfo(FacetDebugInfo debugInfo) {
+    this.debugInfo = debugInfo;
+  }
+  
+  public FacetDebugInfo getDebugInfo() {
+    return debugInfo;
+  }
+  
   public boolean isShard() {
     return (flags & IS_SHARD) != 0;
   }
diff --git a/solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets.java b/solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets.java
index d4c1c00..3127ca9 100644
--- a/solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets.java
+++ b/solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets.java
@@ -297,14 +297,14 @@ public class TestJsonFacets extends SolrTestCaseHS {
 
   @Test
   public void testStats() throws Exception {
-    doStats(Client.localClient, params());
+    doStats(Client.localClient, params("debugQuery", Boolean.toString(random().nextBoolean()) ));
   }
 
   @Test
   public void testDistrib() throws Exception {
     initServers();
     Client client = servers.getClient(random().nextInt());
-    client.queryDefaults().set( "shards", servers.getShards() );
+    client.queryDefaults().set( "shards", servers.getShards(), "debugQuery", Boolean.toString(random().nextBoolean()) );
     doStats( client, params() );
   }
 
@@ -392,6 +392,16 @@ public class TestJsonFacets extends SolrTestCaseHS {
     client.add(sdoc("id", "6", cat_s, "B", where_s, "NY", num_d, "-5", num_i, "-5", super_s,"hulk"     , date,"2002-03-01T03:02:01Z"                         , multi_ss, "b", multi_ss, "a", Z_num_i, ""+Integer.MAX_VALUE), null);
     client.commit();
 
+    // test for presence of debugging info
+    ModifiableSolrParams debugP = params(p);
+    debugP.set("debugQuery","true");
+    client.testJQ(params(debugP, "q", "*:*"
+          , "json.facet", "{catA:{query:{q:'${cat_s}:A'}},  catA2:{query:{query:'${cat_s}:A'}},  catA3:{query:'${cat_s}:A'}    }"
+      )
+        , "facets=={ 'count':6, 'catA':{ 'count':2}, 'catA2':{ 'count':2}, 'catA3':{ 'count':2}}"
+        , "debug/facet-trace=="  // just test for presence, not exact structure / values
+    );
+
 
     // straight query facets
     client.testJQ(params(p, "q", "*:*"

