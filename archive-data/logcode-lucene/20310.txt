GitDiffStart: 311640cd35c90856036b7aa3a6ac071c4819141f | Fri May 1 10:37:08 2009 +0000
diff --git a/common-build.xml b/common-build.xml
index 1dec3cc..b40c482 100644
--- a/common-build.xml
+++ b/common-build.xml
@@ -41,7 +41,7 @@
   <property name="name" value="${ant.project.name}"/>
   <property name="Name" value="Lucene"/>
   <property name="version" value="2.9-dev"/>
-  <property name="compatibility.tag" value="lucene_2_4_back_compat_tests_20090501"/>
+  <property name="compatibility.tag" value="lucene_2_4_back_compat_tests_20090501a"/>
   <property name="spec.version" value="${version}"/>	
   <property name="year" value="2000-${current.year}"/>
   <property name="final.name" value="lucene-${name}-${version}"/>
diff --git a/docs/fileformats.html b/docs/fileformats.html
index 8e3ce83..62fc879 100644
--- a/docs/fileformats.html
+++ b/docs/fileformats.html
@@ -1528,13 +1528,13 @@ document.write("Last Published: " + document.lastModified);
                 </p>
 <p>
                     FieldInfos
-                    (.fnm) --&gt; FieldsCount, &lt;FieldName,
+                    (.fnm) --&gt; FNMVersion,FieldsCount, &lt;FieldName,
                     FieldBits&gt;
                     <sup>FieldsCount</sup>
                 
 </p>
 <p>
-                    FieldsCount --&gt; VInt
+                    FNMVersion, FieldsCount --&gt; VInt
                 </p>
 <p>
                     FieldName --&gt; String
@@ -1575,6 +1575,9 @@ document.write("Last Published: " + document.lastModified);
                 
 </p>
 <p>
+		   FNMVersion (added in 2.9) is always -2.
+		</p>
+<p>
                     Fields are numbered by their order in this file. Thus field zero is
                     the
                     first field in the file, field one the next, and so on. Note that,
@@ -1730,7 +1733,7 @@ document.write("Last Published: " + document.lastModified);
 </li>
                 
 </ol>
-<a name="N105ED"></a><a name="Term Dictionary"></a>
+<a name="N105F0"></a><a name="Term Dictionary"></a>
 <h3 class="boxed">Term Dictionary</h3>
 <p>
                     The term dictionary is represented as two files:
@@ -1920,7 +1923,7 @@ document.write("Last Published: " + document.lastModified);
 </li>
                 
 </ol>
-<a name="N1066D"></a><a name="Frequencies"></a>
+<a name="N10670"></a><a name="Frequencies"></a>
 <h3 class="boxed">Frequencies</h3>
 <p>
                     The .frq file contains the lists of documents
@@ -2048,7 +2051,7 @@ document.write("Last Published: " + document.lastModified);
                    entry in level-1. In the example has entry 15 on level 1 a pointer to entry 15 on level 0 and entry 31 on level 1 a pointer
                    to entry 31 on level 0.                   
                 </p>
-<a name="N106F5"></a><a name="Positions"></a>
+<a name="N106F8"></a><a name="Positions"></a>
 <h3 class="boxed">Positions</h3>
 <p>
                     The .prx file contains the lists of positions that
@@ -2118,7 +2121,7 @@ document.write("Last Published: " + document.lastModified);
                     Payload. If PayloadLength is not stored, then this Payload has the same
                     length as the Payload at the previous position.
                 </p>
-<a name="N10731"></a><a name="Normalization Factors"></a>
+<a name="N10734"></a><a name="Normalization Factors"></a>
 <h3 class="boxed">Normalization Factors</h3>
 <p>
                     
@@ -2222,7 +2225,7 @@ document.write("Last Published: " + document.lastModified);
 <b>2.1 and above:</b>
                     Separate norm files are created (when adequate) for both compound and non compound segments.
                 </p>
-<a name="N1079A"></a><a name="Term Vectors"></a>
+<a name="N1079D"></a><a name="Term Vectors"></a>
 <h3 class="boxed">Term Vectors</h3>
 <p>
 		  Term Vector support is an optional on a field by
@@ -2355,7 +2358,7 @@ document.write("Last Published: " + document.lastModified);
 </li>
                 
 </ol>
-<a name="N10830"></a><a name="Deleted Documents"></a>
+<a name="N10833"></a><a name="Deleted Documents"></a>
 <h3 class="boxed">Deleted Documents</h3>
 <p>The .del file is
                     optional, and only exists when a segment contains deletions.
@@ -2427,7 +2430,7 @@ document.write("Last Published: " + document.lastModified);
 </div>
 
         
-<a name="N10873"></a><a name="Limitations"></a>
+<a name="N10876"></a><a name="Limitations"></a>
 <h2 class="boxed">Limitations</h2>
 <div class="section">
 <p>
diff --git a/docs/fileformats.pdf b/docs/fileformats.pdf
index 01a43c1..0670f59 100644
--- a/docs/fileformats.pdf
+++ b/docs/fileformats.pdf
@@ -31,11 +31,11 @@ Table of contents
                                                                                                             Apache Lucene - Index File Formats
 
  7.2 Term Dictionary.......................................................................................................... 12
- 7.3 Frequencies..................................................................................................................14
+ 7.3 Frequencies..................................................................................................................15
  7.4 Positions...................................................................................................................... 16
  7.5 Normalization Factors................................................................................................. 17
  7.6 Term Vectors............................................................................................................... 18
- 7.7 Deleted Documents..................................................................................................... 19
+ 7.7 Deleted Documents..................................................................................................... 20
 8 Limitations....................................................................................................................... 20
 
                                                                        Page 2
@@ -437,11 +437,12 @@ The remaining files are all per-segment, and are thus defined by suffix.
 7.1. Fields
 Field Info
 Field names are stored in the field info file, with suffix .fnm.
-FieldInfos (.fnm) --> FieldsCount, <FieldName, FieldBits> FieldsCount
-FieldsCount --> VInt
+FieldInfos (.fnm) --> FNMVersion,FieldsCount, <FieldName, FieldBits> FieldsCount
+FNMVersion, FieldsCount --> VInt
 FieldName --> String
 FieldBits --> Byte
 
+FNMVersion (added in 2.9) is always -2.
 Fields are numbered by their order in this file. Thus field zero is the first field in the file, field
 one the next, and so on. Note that, like document numbers, field numbers are segment
 relative.
@@ -450,13 +451,13 @@ Stored fields are represented by two files:
 1. The field index, or .fdx file.
 
     This contains, for each document, a pointer to its field data, as follows:
-    FieldIndex (.fdx) --> <FieldValuesPosition> SegSize
 
 Page 11
 
          Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
+    FieldIndex (.fdx) --> <FieldValuesPosition> SegSize
     FieldValuesPosition --> Uint64
     This is used to find the location within the field data file of the fields of a particular
     document. Because it contains fixed-length data, this file may be easily randomly
@@ -486,66 +487,68 @@ Page 11
 
 7.2. Term Dictionary
 The term dictionary is represented as two files:
-1. The term infos, or tis file.
 
                                                                        Page 12
 
 Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
-TermInfoFile (.tis)--> TIVersion, TermCount, IndexInterval, SkipInterval,
-MaxSkipLevels, TermInfos
+1. The term infos, or tis file.
+
+    TermInfoFile (.tis)--> TIVersion, TermCount, IndexInterval, SkipInterval,
+    MaxSkipLevels, TermInfos
 
-TIVersion --> UInt32
+    TIVersion --> UInt32
 
-TermCount --> UInt64
+    TermCount --> UInt64
 
-IndexInterval --> UInt32
+    IndexInterval --> UInt32
 
-SkipInterval --> UInt32
+    SkipInterval --> UInt32
 
-MaxSkipLevels --> UInt32
+    MaxSkipLevels --> UInt32
 
-TermInfos --> <TermInfo> TermCount
+    TermInfos --> <TermInfo> TermCount
 
-TermInfo --> <Term, DocFreq, FreqDelta, ProxDelta, SkipDelta>
+    TermInfo --> <Term, DocFreq, FreqDelta, ProxDelta, SkipDelta>
 
-Term --> <PrefixLength, Suffix, FieldNum>
+    Term --> <PrefixLength, Suffix, FieldNum>
 
-Suffix --> String
+    Suffix --> String
 
-PrefixLength, DocFreq, FreqDelta, ProxDelta, SkipDelta
---> VInt
+    PrefixLength, DocFreq, FreqDelta, ProxDelta, SkipDelta
+    --> VInt
 
-This file is sorted by Term. Terms are ordered first lexicographically (by UTF16
-character code) by the term's field name, and within that lexicographically (by UTF16
-character code) by the term's text.
+    This file is sorted by Term. Terms are ordered first lexicographically (by UTF16
+    character code) by the term's field name, and within that lexicographically (by UTF16
+    character code) by the term's text.
 
-TIVersion names the version of the format of this file and is -2 in Lucene 1.4.
+    TIVersion names the version of the format of this file and is -2 in Lucene 1.4.
 
-Term text prefixes are shared. The PrefixLength is the number of initial characters from
-the previous term which must be pre-pended to a term's suffix in order to form the term's
-text. Thus, if the previous term's text was "bone" and the term is "boy", the PrefixLength
-is two and the suffix is "y".
+    Term text prefixes are shared. The PrefixLength is the number of initial characters from
+    the previous term which must be pre-pended to a term's suffix in order to form the term's
+    text. Thus, if the previous term's text was "bone" and the term is "boy", the PrefixLength
+    is two and the suffix is "y".
 
-FieldNumber determines the term's field, whose name is stored in the .fdt file.
+    FieldNumber determines the term's field, whose name is stored in the .fdt file.
 
-DocFreq is the count of documents which contain the term.
+    DocFreq is the count of documents which contain the term.
 
-FreqDelta determines the position of this term's TermFreqs within the .frq file. In
-particular, it is the difference between the position of this term's data in that file and the
-position of the previous term's data (or zero, for the first term in the file).
+    FreqDelta determines the position of this term's TermFreqs within the .frq file. In
+    particular, it is the difference between the position of this term's data in that file and the
+    position of the previous term's data (or zero, for the first term in the file).
 
-ProxDelta determines the position of this term's TermPositions within the .prx file. In
-particular, it is the difference between the position of this term's data in that file and the
-position of the previous term's data (or zero, for the first term in the file. For fields with
-omitTf true, this will be 0 since prox information is not stored.
+    ProxDelta determines the position of this term's TermPositions within the .prx file. In
+    particular, it is the difference between the position of this term's data in that file and the
 
 Page 13
 
          Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
+    position of the previous term's data (or zero, for the first term in the file. For fields with
+    omitTf true, this will be 0 since prox information is not stored.
+
     SkipDelta determines the position of this term's SkipData within the .frq file. In
     particular, it is the number of bytes after TermFreqs that the SkipData starts. In other
     words, it is the length of the TermFreq data. SkipDelta is only stored if DocFreq is not
@@ -588,15 +591,14 @@ Page 13
     larger indexes but greater acceleration. See format of .frq file for more information about
     skip levels.
 
-7.3. Frequencies
-
-The .frq file contains the lists of documents which contain each term, along with the
-
                                                                        Page 14
 
 Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
+7.3. Frequencies
+
+The .frq file contains the lists of documents which contain each term, along with the
 frequency of the term in that document (if omitTf is false).
 
 FreqFile (.frq) --> <TermFreqs, SkipData> TermCount
@@ -640,15 +642,15 @@ If payloads are disabled for the term's field, then DocSkip represents the diffe
 previous value in the sequence. If payloads are enabled for the term's field, then DocSkip/2
 represents the difference from the previous value in the sequence. If payloads are enabled
 and DocSkip is odd, then PayloadLength is stored indicating the length of the last payload
-before the SkipIntervalth document in TermPositions. FreqSkip and ProxSkip record the
-position of every SkipInterval th entry in FreqFile and ProxFile, respectively. File positions
-are relative to the start of TermFreqs and Positions, to the previous SkipDatum in the
 
 Page 15
 
          Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
+before the SkipIntervalth document in TermPositions. FreqSkip and ProxSkip record the
+position of every SkipInterval th entry in FreqFile and ProxFile, respectively. File positions
+are relative to the start of TermFreqs and Positions, to the previous SkipDatum in the
 sequence.
 
 For example, if DocFreq=35 and SkipInterval=16, then there are two SkipData entries,
@@ -690,15 +692,14 @@ PayloadLength --> VInt
 
 PayloadData --> bytePayloadLength
 
-TermPositions are ordered by term (the term is implicit, from the .tis file).
-
-Positions entries are ordered by increasing document number (the document number is
-
                                                                        Page 16
 
 Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
+TermPositions are ordered by term (the term is implicit, from the .tis file).
+
+Positions entries are ordered by increasing document number (the document number is
 implicit from the .frq file).
 
 PositionDelta is, if payloads are disabled for the term's field, the difference between the
@@ -742,14 +743,14 @@ Each byte encodes a floating point value. Bits 0-2 contain the 3-bit mantissa, a
 contain the 5-bit exponent.
 
 These are converted to an IEEE single float value as follows:
-1. If the byte is zero, use a zero float.
-2. Otherwise, set the sign bit of the float to zero;
 
 Page 17
 
          Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
+1. If the byte is zero, use a zero float.
+2. Otherwise, set the sign bit of the float to zero;
 3. add 48 to the exponent and use this as the float's exponent;
 4. map the mantissa to the high-order 3 bits of the float's mantissa; and
 5. set the low-order 21 bits of the float's mantissa to zero.
@@ -792,15 +793,15 @@ Term Vector support is an optional on a field by field basis. It consists of 3 f
 
     FieldNums --> <FieldNumDelta> NumFields
 
-    FieldNumDelta --> VInt
-
-    FieldPositions --> <FieldPositionDelta> NumFields-1
-
                                                                        Page 18
 
 Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
+    FieldNumDelta --> VInt
+
+    FieldPositions --> <FieldPositionDelta> NumFields-1
+
     FieldPositionDelta --> VLong
 
     The .tvd file is used to map out the fields that have term vectors stored and where the
@@ -846,13 +847,13 @@ Copyright © 2006 The Apache Software Foundation. All rights reserved.
     ?? Offsets are stored as delta encoded VInts. The first VInt is the startOffset, the second
          is the endOffset.
 
-7.7. Deleted Documents
-
 Page 19
 
          Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
+7.7. Deleted Documents
+
 The .del file is optional, and only exists when a segment contains deletions.
 
 Although per-segment, this file is maintained exterior to compound segment files.
@@ -897,13 +898,13 @@ For example, if there are 8000 bits and only bits 10,12,32 are set, DGaps would
 When referring to term numbers, Lucene's current implementation uses a Java int, which
 means the maximum number of unique terms in any single index segment is 2,147,483,648.
 This is technically not a limitation of the index file format, just of Lucene's current
-implementation.
 
                                                                        Page 20
 
 Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
+implementation.
 Similarly, Lucene uses a Java int to refer to document numbers, and the index file format
 uses an Int32 on-disk to store document numbers. This is a limitation of both the index file
 format and the current implementation. Eventually these should be replaced with either
diff --git a/src/java/org/apache/lucene/index/FieldInfos.java b/src/java/org/apache/lucene/index/FieldInfos.java
index 3a4d7ee..a46a5fd 100644
--- a/src/java/org/apache/lucene/index/FieldInfos.java
+++ b/src/java/org/apache/lucene/index/FieldInfos.java
@@ -33,6 +33,14 @@ import java.util.*;
  *  accessing this object.
  */
 final class FieldInfos {
+
+  // Used internally (ie not written to *.fnm files) for pre-2.9 files
+  public static final int FORMAT_PRE = -1;
+
+  // First used in 2.9; prior to 2.9 there was no format header
+  public static final int FORMAT_START = -2;
+
+  static final int CURRENT_FORMAT = FORMAT_START;
   
   static final byte IS_INDEXED = 0x1;
   static final byte STORE_TERMVECTOR = 0x2;
@@ -44,6 +52,7 @@ final class FieldInfos {
   
   private ArrayList byNumber = new ArrayList();
   private HashMap byName = new HashMap();
+  private int format;
 
   FieldInfos() { }
 
@@ -57,7 +66,25 @@ final class FieldInfos {
   FieldInfos(Directory d, String name) throws IOException {
     IndexInput input = d.openInput(name);
     try {
-      read(input);
+      try {
+        read(input, name);
+      } catch (IOException ioe) {
+        if (format == FORMAT_PRE) {
+          // LUCENE-1623: FORMAT_PRE (before there was a
+          // format) may be 2.3.2 (pre-utf8) or 2.4.x (utf8)
+          // encoding; retry with input set to pre-utf8
+          input.seek(0);
+          input.setModifiedUTF8StringsMode();
+          byNumber = new ArrayList();
+          byName = new HashMap();
+          try {
+            read(input, name);
+          } catch (Throwable t) {
+            // Ignore any new exception & throw original IOE
+            throw ioe;
+          }
+        }
+      }
     } finally {
       input.close();
     }
@@ -278,6 +305,7 @@ final class FieldInfos {
   }
 
   public void write(IndexOutput output) throws IOException {
+    output.writeVInt(CURRENT_FORMAT);
     output.writeVInt(size());
     for (int i = 0; i < size(); i++) {
       FieldInfo fi = fieldInfo(i);
@@ -295,8 +323,27 @@ final class FieldInfos {
     }
   }
 
-  private void read(IndexInput input) throws IOException {
-    int size = input.readVInt();//read in the size
+  private void read(IndexInput input, String fileName) throws IOException {
+    int firstInt = input.readVInt();
+
+    if (firstInt < 0) {
+      // This is a real format
+      format = firstInt;
+    } else {
+      format = FORMAT_PRE;
+    }
+
+    if (format != FORMAT_PRE & format != FORMAT_START) {
+      throw new CorruptIndexException("unrecognized format " + format + " in file \"" + fileName + "\"");
+    }
+
+    int size;
+    if (format == FORMAT_PRE) {
+      size = firstInt;
+    } else {
+      size = input.readVInt(); //read in the size
+    }
+
     for (int i = 0; i < size; i++) {
       String name = input.readString().intern();
       byte bits = input.readByte();
@@ -309,6 +356,10 @@ final class FieldInfos {
       boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;
       
       addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);
+    }
+
+    if (input.getFilePointer() != input.length()) {
+      throw new CorruptIndexException("did not read all bytes from file \"" + fileName + "\": read " + input.getFilePointer() + " vs size " + input.length());
     }    
   }
 
diff --git a/src/site/src/documentation/content/xdocs/fileformats.xml b/src/site/src/documentation/content/xdocs/fileformats.xml
index c232b2e..b561f9e 100644
--- a/src/site/src/documentation/content/xdocs/fileformats.xml
+++ b/src/site/src/documentation/content/xdocs/fileformats.xml
@@ -1053,13 +1053,13 @@
                 </p>
                 <p>
                     FieldInfos
-                    (.fnm) --&gt; FieldsCount, &lt;FieldName,
+                    (.fnm) --&gt; FNMVersion,FieldsCount, &lt;FieldName,
                     FieldBits&gt;
                     <sup>FieldsCount</sup>
                 </p>
 
                 <p>
-                    FieldsCount --&gt; VInt
+                    FNMVersion, FieldsCount --&gt; VInt
                 </p>
 
                 <p>
@@ -1091,6 +1091,10 @@
                     </ul>
                 </p>
 
+		<p>
+		   FNMVersion (added in 2.9) is always -2.
+		</p>
+
                 <p>
                     Fields are numbered by their order in this file. Thus field zero is
                     the
@@ -1098,6 +1102,8 @@
                     like document numbers, field numbers are segment relative.
                 </p>
 
+
+
                 <p>
                     <br/>
                     <b>Stored Fields</b>
diff --git a/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java b/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
index 9655271..08b782c 100644
--- a/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
+++ b/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
@@ -125,6 +125,8 @@ public class TestBackwardsCompatibility extends LuceneTestCase
                              "22.nocfs",
                              "23.cfs",
                              "23.nocfs",
+                             "24.cfs",
+                             "24.nocfs",
   };
 
   public void testOptimizeOldIndex() throws IOException {
@@ -203,8 +205,12 @@ public class TestBackwardsCompatibility extends LuceneTestCase
       if (!reader.isDeleted(i)) {
         Document d = reader.document(i);
         List fields = d.getFields();
-        if (oldName.startsWith("23.")) {
-          assertEquals(4, fields.size());
+        if (!oldName.startsWith("19.") &&
+            !oldName.startsWith("20.") &&
+            !oldName.startsWith("21.") &&
+            !oldName.startsWith("22.")) {
+          // Test on indices >= 2.3
+          assertEquals(5, fields.size());
           Field f = (Field) d.getField("id");
           assertEquals(""+i, f.stringValue());
 
@@ -216,7 +222,10 @@ public class TestBackwardsCompatibility extends LuceneTestCase
         
           f = (Field) d.getField("content2");
           assertEquals("here is more content with aaa aaa aaa", f.stringValue());
-        }        
+
+          f = (Field) d.getField("fie\u2C77ld");
+          assertEquals("field with non-ascii name", f.stringValue());
+        }       
       } else
         // Only ID 7 is deleted
         assertEquals(7, i);
@@ -479,6 +488,7 @@ public class TestBackwardsCompatibility extends LuceneTestCase
     doc.add(new Field("autf8", "Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));
     doc.add(new Field("utf8", "Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));
     doc.add(new Field("content2", "here is more content with aaa aaa aaa", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));
+    doc.add(new Field("fie\u2C77ld", "field with non-ascii name", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));
     writer.addDocument(doc);
   }
 
diff --git a/src/test/org/apache/lucene/index/index.23.cfs.zip b/src/test/org/apache/lucene/index/index.23.cfs.zip
index edf3d94..b5fdeef 100644
Binary files a/src/test/org/apache/lucene/index/index.23.cfs.zip and b/src/test/org/apache/lucene/index/index.23.cfs.zip differ
diff --git a/src/test/org/apache/lucene/index/index.23.nocfs.zip b/src/test/org/apache/lucene/index/index.23.nocfs.zip
index f7bd917..9137ae6 100644
Binary files a/src/test/org/apache/lucene/index/index.23.nocfs.zip and b/src/test/org/apache/lucene/index/index.23.nocfs.zip differ
diff --git a/src/test/org/apache/lucene/index/index.24.cfs.zip b/src/test/org/apache/lucene/index/index.24.cfs.zip
new file mode 100644
index 0000000..fc73098
Binary files /dev/null and b/src/test/org/apache/lucene/index/index.24.cfs.zip differ
diff --git a/src/test/org/apache/lucene/index/index.24.nocfs.zip b/src/test/org/apache/lucene/index/index.24.nocfs.zip
new file mode 100644
index 0000000..37861e3
Binary files /dev/null and b/src/test/org/apache/lucene/index/index.24.nocfs.zip differ

