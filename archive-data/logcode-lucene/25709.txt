GitDiffStart: 8c70a95b155c3799f44df651c0f995f503cea60d | Fri Apr 19 20:29:19 2002 +0000
diff --git a/src/test/org/apache/lucene/search/TestDateFilter.java b/src/test/org/apache/lucene/search/TestDateFilter.java
index 4cb65f4..a1c0410 100644
--- a/src/test/org/apache/lucene/search/TestDateFilter.java
+++ b/src/test/org/apache/lucene/search/TestDateFilter.java
@@ -140,4 +140,62 @@ public class TestDateFilter
 	result = searcher.search(query2, df2);
 	assertEquals(0, result.length());
     }
+
+    /**
+     *
+     */
+    public static void testAfter()
+	throws IOException
+    {
+	// create an index
+        RAMDirectory indexStore = new RAMDirectory();
+        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);
+
+ 	long now = System.currentTimeMillis();
+
+ 	Document doc = new Document();
+ 	// add time that is in the future
+ 	doc.add(Field.Text("datefield", DateField.timeToString(now - 888888)));
+ 	doc.add(Field.Text("body", "Today is a very sunny day in New York City"));
+  	writer.addDocument(doc);
+ 	writer.optimize();
+	writer.close();
+
+	IndexSearcher searcher = new IndexSearcher(indexStore);
+
+	// filter that should preserve matches
+	DateFilter df1 = DateFilter.After("datefield", now);
+
+	// filter that should discard matches
+	DateFilter df2 = DateFilter.After("datefield", now + 999999);
+
+	// search something that doesn't exist with DateFilter
+	Query query1 = new TermQuery(new Term("body", "NoMatchForThis"));
+
+	// search for something that does exists
+	Query query2 = new TermQuery(new Term("body", "sunny"));
+
+	Hits result;
+
+	// ensure that queries return expected results without DateFilter first
+	result = searcher.search(query1);
+	assertEquals(0, result.length());
+
+	result = searcher.search(query2);
+	assertEquals(1, result.length());
+
+
+	// run queries with DateFilter
+	result = searcher.search(query1, df1);
+	assertEquals(0, result.length());
+
+	result = searcher.search(query1, df2);
+	assertEquals(0, result.length());
+
+ 	result = searcher.search(query2, df1);
+ 	assertEquals(1, result.length());
+
+	result = searcher.search(query2, df2);
+	assertEquals(0, result.length());
+    }
 }

