GitDiffStart: e4f0f6d86418c21b3b14b7a3104e69c9a3f37e6b | Thu Dec 20 16:29:26 2012 +0000
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesFormat.java b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesFormat.java
index cc4499e..67cc603 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesFormat.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesFormat.java
@@ -56,8 +56,7 @@ public class MemoryDocValuesFormat extends SimpleDocValuesFormat {
 
       @Override
       public NumericDocValues getNumeric(FieldInfo field) throws IOException {
-        // nocommit is that clone() ok...?  it IS necessary
-        NumericDocValues valuesIn = producer.clone().getNumeric(field);
+        NumericDocValues valuesIn = producer.getNumeric(field);
 
         final int maxDoc = valuesIn.size();
         final long minValue = valuesIn.minValue();
@@ -96,8 +95,7 @@ public class MemoryDocValuesFormat extends SimpleDocValuesFormat {
       
       @Override
       public BinaryDocValues getBinary(FieldInfo field) throws IOException {
-        // nocommit is that clone() ok...?  it IS necessary
-        BinaryDocValues valuesIn = producer.clone().getBinary(field);
+        BinaryDocValues valuesIn = producer.getBinary(field);
         final int maxDoc = valuesIn.size();
         final int maxLength = valuesIn.maxLength();
         final boolean fixedLength = valuesIn.isFixedLength();
@@ -138,8 +136,7 @@ public class MemoryDocValuesFormat extends SimpleDocValuesFormat {
 
       @Override
       public SortedDocValues getSorted(FieldInfo field) throws IOException {
-        // nocommit is that clone() ok...?  it IS necessary
-        SortedDocValues valuesIn = producer.clone().getSorted(field);
+        SortedDocValues valuesIn = producer.getSorted(field);
         final int maxDoc = valuesIn.size();
         final int maxLength = valuesIn.maxLength();
         final boolean fixedLength = valuesIn.isFixedLength();
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.java b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.java
index 958a354..ffa0466 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.java
@@ -491,17 +491,6 @@ public class SimpleTextSimpleDocValuesFormat extends SimpleDocValuesFormat {
       assert !fields.isEmpty();
     }
 
-    private SimpleTextDocValuesReader(SimpleTextDocValuesReader other) {
-      this.data = other.data.clone();
-      this.fields.putAll(other.fields);
-      this.maxDoc = other.maxDoc;
-    }
-
-    @Override
-    public SimpleDVProducer clone() {
-      return new SimpleTextDocValuesReader(this);
-    }
-
     @Override
     public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {
       final OneField field = fields.get(fieldInfo.name);
@@ -511,7 +500,7 @@ public class SimpleTextSimpleDocValuesFormat extends SimpleDocValuesFormat {
       // valid:
       assert field != null: "field=" + fieldInfo.name + " fields=" + fields;
 
-      final IndexInput in = data;
+      final IndexInput in = data.clone();
       final BytesRef scratch = new BytesRef();
       final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));
 
@@ -567,7 +556,7 @@ public class SimpleTextSimpleDocValuesFormat extends SimpleDocValuesFormat {
       // valid:
       assert field != null;
 
-      final IndexInput in = data;
+      final IndexInput in = data.clone();
       final BytesRef scratch = new BytesRef();
       final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));
 
@@ -623,7 +612,7 @@ public class SimpleTextSimpleDocValuesFormat extends SimpleDocValuesFormat {
       // valid:
       assert field != null;
 
-      final IndexInput in = data;
+      final IndexInput in = data.clone();
       final BytesRef scratch = new BytesRef();
       final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));
       final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/SimpleDVProducer.java b/lucene/core/src/java/org/apache/lucene/codecs/SimpleDVProducer.java
index ed97315..d25a64b 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/SimpleDVProducer.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/SimpleDVProducer.java
@@ -37,6 +37,4 @@ public abstract class SimpleDVProducer implements Closeable {
   public abstract BinaryDocValues getBinary(FieldInfo field) throws IOException;
 
   public abstract SortedDocValues getSorted(FieldInfo field) throws IOException;
-
-  public abstract SimpleDVProducer clone();
 }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/SimpleDocValuesFormat.java b/lucene/core/src/java/org/apache/lucene/codecs/SimpleDocValuesFormat.java
index 151433d..b051ecd 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/SimpleDocValuesFormat.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/SimpleDocValuesFormat.java
@@ -50,6 +50,7 @@ public abstract class SimpleDocValuesFormat implements NamedSPILoader.NamedSPI {
   }
 
   public abstract SimpleDVConsumer fieldsConsumer(SegmentWriteState state) throws IOException;
+
   // nocommit do this:
   public abstract SimpleDVProducer fieldsProducer(SegmentReadState state) throws IOException;
 
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.java b/lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.java
index 3cadfb0..47c6bc0 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.java
@@ -228,7 +228,7 @@ public abstract class PerFieldDocValuesFormat extends SimpleDocValuesFormat {
       Map<SimpleDVProducer,SimpleDVProducer> oldToNew = new IdentityHashMap<SimpleDVProducer,SimpleDVProducer>();
       // First clone all formats
       for(Map.Entry<String,SimpleDVProducer> ent : other.formats.entrySet()) {
-        SimpleDVProducer values = ent.getValue().clone();
+        SimpleDVProducer values = ent.getValue();
         formats.put(ent.getKey(), values);
         oldToNew.put(ent.getValue(), values);
       }
diff --git a/lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders.java b/lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders.java
index 9fcf4ad..dcd26d1 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders.java
@@ -19,7 +19,9 @@ package org.apache.lucene.index;
 
 import java.io.IOException;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.LinkedHashSet;
+import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -83,19 +85,17 @@ final class SegmentCoreReaders {
     }
   };
 
-  final CloseableThreadLocal<SimpleDVProducer> simpleDocValuesLocal = new CloseableThreadLocal<SimpleDVProducer>() {
+  final CloseableThreadLocal<Map<String,Object>> simpleDocValuesLocal = new CloseableThreadLocal<Map<String,Object>>() {
     @Override
-    protected SimpleDVProducer initialValue() {
-      // nocommit remove null check
-      return (simpleDVProducer == null) ? null : simpleDVProducer.clone();
+    protected Map<String,Object> initialValue() {
+      return new HashMap<String,Object>();
     }
   };
 
-  final CloseableThreadLocal<SimpleDVProducer> simpleNormsLocal = new CloseableThreadLocal<SimpleDVProducer>() {
+  final CloseableThreadLocal<Map<String,Object>> simpleNormsLocal = new CloseableThreadLocal<Map<String,Object>>() {
     @Override
-    protected SimpleDVProducer initialValue() {
-      // nocommit remove null check
-      return (simpleNormsProducer == null) ? null : simpleNormsProducer.clone();
+    protected Map<String,Object> initialValue() {
+      return new HashMap<String,Object>();
     }
   };
 
@@ -202,7 +202,15 @@ final class SegmentCoreReaders {
       return null;
     }
 
-    return simpleDocValuesLocal.get().getNumeric(fi);
+    Map<String,Object> dvFields = simpleDocValuesLocal.get();
+
+    NumericDocValues dvs = (NumericDocValues) dvFields.get(field);
+    if (dvs == null) {
+      dvs = simpleDVProducer.getNumeric(fi);
+      dvFields.put(field, dvs);
+    }
+
+    return dvs;
   }
 
   BinaryDocValues getBinaryDocValues(String field) throws IOException {
@@ -225,7 +233,15 @@ final class SegmentCoreReaders {
       return null;
     }
 
-    return simpleDocValuesLocal.get().getBinary(fi);
+    Map<String,Object> dvFields = simpleDocValuesLocal.get();
+
+    BinaryDocValues dvs = (BinaryDocValues) dvFields.get(field);
+    if (dvs == null) {
+      dvs = simpleDVProducer.getBinary(fi);
+      dvFields.put(field, dvs);
+    }
+
+    return dvs;
   }
 
   SortedDocValues getSortedDocValues(String field) throws IOException {
@@ -248,7 +264,15 @@ final class SegmentCoreReaders {
       return null;
     }
 
-    return simpleDocValuesLocal.get().getSorted(fi);
+    Map<String,Object> dvFields = simpleDocValuesLocal.get();
+
+    SortedDocValues dvs = (SortedDocValues) dvFields.get(field);
+    if (dvs == null) {
+      dvs = simpleDVProducer.getSorted(fi);
+      dvFields.put(field, dvs);
+    }
+
+    return dvs;
   }
 
   NumericDocValues getSimpleNormValues(String field) throws IOException {
@@ -264,7 +288,16 @@ final class SegmentCoreReaders {
     if (simpleNormsProducer == null) {
       return null;
     }
-    return simpleNormsLocal.get().getNumeric(fi);
+
+    Map<String,Object> normFields = simpleNormsLocal.get();
+
+    NumericDocValues norms = (NumericDocValues) normFields.get(field);
+    if (norms == null) {
+      norms = simpleNormsProducer.getNumeric(fi);
+      normFields.put(field, norms);
+    }
+
+    return norms;
   }
 
   void decRef() throws IOException {
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.java b/lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.java
index 9a5d2c9..b7e4fbf 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.java
@@ -32,6 +32,7 @@ import org.apache.lucene.search.similarities.PerFieldSimilarityWrapper;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
 import org.apache.lucene.util.LuceneTestCase;
 
 /**
@@ -40,6 +41,8 @@ import org.apache.lucene.util.LuceneTestCase;
  * In the example, a docvalues field is used as a per-document boost (separate from the norm)
  * @lucene.experimental
  */
+// nocommit Lucene40 doesn't yet impl SimpleDV:
+@SuppressCodecs("Lucene40")
 public class TestDocValuesScoring extends LuceneTestCase {
   private static final float SCORE_EPSILON = 0.001f; /* for comparing floats */
 
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil.java b/lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil.java
index a9badf1..9d1110f 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil.java
@@ -251,6 +251,8 @@ public class _TestUtil {
       ((TieredMergePolicy) mp).setUseCompoundFile(v);
     } else if (mp instanceof LogMergePolicy) {
       ((LogMergePolicy) mp).setUseCompoundFile(v);
+    } else {
+      throw new IllegalArgumentException("cannot set compound file for MergePolicy " + mp);
     }
   }
 

