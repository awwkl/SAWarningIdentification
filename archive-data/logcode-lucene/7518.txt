GitDiffStart: f6cd7fda747a2089457bcb707e3bea784c96f3b4 | Mon Nov 18 21:10:45 2013 +0000
diff --git a/TODO b/TODO
index 828e1b4..9034b0c 100644
--- a/TODO
+++ b/TODO
@@ -2,7 +2,6 @@ nocommit this!
 
 TODO
   - associations
-    - make SumFloat too
   - cutover taxo writer/reader to pathToString/stringToPath
   - wrap an IW instead of extending one?  or, FacetDocument?
   - re-enable ALL_BUT_DIM somehow?
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/simple/FastTaxonomyFacetCounts.java b/lucene/facet/src/java/org/apache/lucene/facet/simple/FastTaxonomyFacetCounts.java
index 9d17653..e5b1317 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/simple/FastTaxonomyFacetCounts.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/simple/FastTaxonomyFacetCounts.java
@@ -146,26 +146,26 @@ public class FastTaxonomyFacetCounts extends Facets {
 
   private SimpleFacetResult getTopChildren(FacetLabel path, int dimOrd, int topN) throws IOException {
 
-    TopOrdCountQueue q = new TopOrdCountQueue(topN);
+    TopOrdAndIntQueue q = new TopOrdAndIntQueue(topN);
     
     int bottomCount = 0;
 
     int ord = children[dimOrd];
     int totCount = 0;
 
-    TopOrdCountQueue.OrdAndCount reuse = null;
+    TopOrdAndIntQueue.OrdAndValue reuse = null;
     while(ord != TaxonomyReader.INVALID_ORDINAL) {
       if (counts[ord] > 0) {
         totCount += counts[ord];
         if (counts[ord] > bottomCount) {
           if (reuse == null) {
-            reuse = new TopOrdCountQueue.OrdAndCount();
+            reuse = new TopOrdAndIntQueue.OrdAndValue();
           }
           reuse.ord = ord;
-          reuse.count = counts[ord];
+          reuse.value = counts[ord];
           reuse = q.insertWithOverflow(reuse);
           if (q.size() == topN) {
-            bottomCount = q.top().count;
+            bottomCount = q.top().value;
           }
         }
       }
@@ -187,9 +187,9 @@ public class FastTaxonomyFacetCounts extends Facets {
 
     LabelAndValue[] labelValues = new LabelAndValue[q.size()];
     for(int i=labelValues.length-1;i>=0;i--) {
-      TopOrdCountQueue.OrdAndCount ordAndCount = q.pop();
-      FacetLabel child = taxoReader.getPath(ordAndCount.ord);
-      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndCount.count);
+      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();
+      FacetLabel child = taxoReader.getPath(ordAndValue.ord);
+      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);
     }
 
     return new SimpleFacetResult(path, totCount, labelValues);
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts.java b/lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts.java
index 1efd51e..d00fc03 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts.java
@@ -85,13 +85,13 @@ public class SortedSetDocValuesFacetCounts extends Facets {
 
   private final SimpleFacetResult getDim(String dim, OrdRange ordRange, int topN) {
 
-    TopOrdCountQueue q = null;
+    TopOrdAndIntQueue q = null;
 
     int bottomCount = 0;
 
     int dimCount = 0;
 
-    TopOrdCountQueue.OrdAndCount reuse = null;
+    TopOrdAndIntQueue.OrdAndValue reuse = null;
     //System.out.println("getDim : " + ordRange.start + " - " + ordRange.end);
     for(int ord=ordRange.start; ord<=ordRange.end; ord++) {
       //System.out.println("  ord=" + ord + " count=" + counts[ord]);
@@ -99,18 +99,18 @@ public class SortedSetDocValuesFacetCounts extends Facets {
         dimCount += counts[ord];
         if (counts[ord] > bottomCount) {
           if (reuse == null) {
-            reuse = new TopOrdCountQueue.OrdAndCount();
+            reuse = new TopOrdAndIntQueue.OrdAndValue();
           }
           reuse.ord = ord;
-          reuse.count = counts[ord];
+          reuse.value = counts[ord];
           if (q == null) {
             // Lazy init, so we don't create this for the
             // sparse case unnecessarily
-            q = new TopOrdCountQueue(topN);
+            q = new TopOrdAndIntQueue(topN);
           }
           reuse = q.insertWithOverflow(reuse);
           if (q.size() == topN) {
-            bottomCount = q.top().count;
+            bottomCount = q.top().value;
           }
         }
       }
@@ -124,10 +124,10 @@ public class SortedSetDocValuesFacetCounts extends Facets {
 
     LabelAndValue[] labelValues = new LabelAndValue[q.size()];
     for(int i=labelValues.length-1;i>=0;i--) {
-      TopOrdCountQueue.OrdAndCount ordAndCount = q.pop();
-      dv.lookupOrd(ordAndCount.ord, scratch);
+      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();
+      dv.lookupOrd(ordAndValue.ord, scratch);
       String s = scratch.utf8ToString();
-      labelValues[i] = new LabelAndValue(s.substring(dim.length()+1, s.length()), ordAndCount.count);
+      labelValues[i] = new LabelAndValue(s.substring(dim.length()+1, s.length()), ordAndValue.value);
     }
 
     return new SimpleFacetResult(new FacetLabel(dim), dimCount, labelValues);
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/simple/SumFloatAssociationFacets.java b/lucene/facet/src/java/org/apache/lucene/facet/simple/SumFloatAssociationFacets.java
index 8c79fe5..05debd4 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/simple/SumFloatAssociationFacets.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/simple/SumFloatAssociationFacets.java
@@ -151,20 +151,20 @@ public class SumFloatAssociationFacets extends Facets {
 
   private SimpleFacetResult getTopChildren(FacetLabel path, int dimOrd, int topN) throws IOException {
 
-    TopOrdValueQueue q = new TopOrdValueQueue(topN);
+    TopOrdAndFloatQueue q = new TopOrdAndFloatQueue(topN);
     
     float bottomValue = 0;
 
     int ord = children[dimOrd];
     float sumValue = 0;
 
-    TopOrdValueQueue.OrdAndValue reuse = null;
+    TopOrdAndFloatQueue.OrdAndValue reuse = null;
     while(ord != TaxonomyReader.INVALID_ORDINAL) {
       if (values[ord] > 0) {
         sumValue += values[ord];
         if (values[ord] > bottomValue) {
           if (reuse == null) {
-            reuse = new TopOrdValueQueue.OrdAndValue();
+            reuse = new TopOrdAndFloatQueue.OrdAndValue();
           }
           reuse.ord = ord;
           reuse.value = values[ord];
@@ -194,7 +194,7 @@ public class SumFloatAssociationFacets extends Facets {
 
     LabelAndValue[] labelValues = new LabelAndValue[q.size()];
     for(int i=labelValues.length-1;i>=0;i--) {
-      TopOrdValueQueue.OrdAndValue ordAndValue = q.pop();
+      TopOrdAndFloatQueue.OrdAndValue ordAndValue = q.pop();
       FacetLabel child = taxoReader.getPath(ordAndValue.ord);
       labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);
     }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/simple/SumIntAssociationFacets.java b/lucene/facet/src/java/org/apache/lucene/facet/simple/SumIntAssociationFacets.java
index 73131c8..12373ae 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/simple/SumIntAssociationFacets.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/simple/SumIntAssociationFacets.java
@@ -151,26 +151,26 @@ public class SumIntAssociationFacets extends Facets {
 
   private SimpleFacetResult getTopChildren(FacetLabel path, int dimOrd, int topN) throws IOException {
 
-    TopOrdCountQueue q = new TopOrdCountQueue(topN);
+    TopOrdAndIntQueue q = new TopOrdAndIntQueue(topN);
     
     int bottomValue = 0;
 
     int ord = children[dimOrd];
     long sumValue = 0;
 
-    TopOrdCountQueue.OrdAndCount reuse = null;
+    TopOrdAndIntQueue.OrdAndValue reuse = null;
     while(ord != TaxonomyReader.INVALID_ORDINAL) {
       if (values[ord] > 0) {
         sumValue += values[ord];
         if (values[ord] > bottomValue) {
           if (reuse == null) {
-            reuse = new TopOrdCountQueue.OrdAndCount();
+            reuse = new TopOrdAndIntQueue.OrdAndValue();
           }
           reuse.ord = ord;
-          reuse.count = values[ord];
+          reuse.value = values[ord];
           reuse = q.insertWithOverflow(reuse);
           if (q.size() == topN) {
-            bottomValue = q.top().count;
+            bottomValue = q.top().value;
           }
         }
       }
@@ -194,9 +194,9 @@ public class SumIntAssociationFacets extends Facets {
 
     LabelAndValue[] labelValues = new LabelAndValue[q.size()];
     for(int i=labelValues.length-1;i>=0;i--) {
-      TopOrdCountQueue.OrdAndCount ordAndCount = q.pop();
-      FacetLabel child = taxoReader.getPath(ordAndCount.ord);
-      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndCount.count);
+      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();
+      FacetLabel child = taxoReader.getPath(ordAndValue.ord);
+      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);
     }
 
     return new SimpleFacetResult(path, sumValue, labelValues);
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetCounts.java b/lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetCounts.java
index d4f1a94..024d6e8 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetCounts.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetCounts.java
@@ -129,26 +129,26 @@ public class TaxonomyFacetCounts extends Facets {
 
   private SimpleFacetResult getTopChildren(FacetLabel path, int dimOrd, int topN) throws IOException {
 
-    TopOrdCountQueue q = new TopOrdCountQueue(topN);
+    TopOrdAndIntQueue q = new TopOrdAndIntQueue(topN);
     
     int bottomCount = 0;
 
     int ord = children[dimOrd];
     int totCount = 0;
 
-    TopOrdCountQueue.OrdAndCount reuse = null;
+    TopOrdAndIntQueue.OrdAndValue reuse = null;
     while(ord != TaxonomyReader.INVALID_ORDINAL) {
       if (counts[ord] > 0) {
         totCount += counts[ord];
         if (counts[ord] > bottomCount) {
           if (reuse == null) {
-            reuse = new TopOrdCountQueue.OrdAndCount();
+            reuse = new TopOrdAndIntQueue.OrdAndValue();
           }
           reuse.ord = ord;
-          reuse.count = counts[ord];
+          reuse.value = counts[ord];
           reuse = q.insertWithOverflow(reuse);
           if (q.size() == topN) {
-            bottomCount = q.top().count;
+            bottomCount = q.top().value;
           }
         }
       }
@@ -170,9 +170,9 @@ public class TaxonomyFacetCounts extends Facets {
 
     LabelAndValue[] labelValues = new LabelAndValue[q.size()];
     for(int i=labelValues.length-1;i>=0;i--) {
-      TopOrdCountQueue.OrdAndCount ordAndCount = q.pop();
-      FacetLabel child = taxoReader.getPath(ordAndCount.ord);
-      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndCount.count);
+      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();
+      FacetLabel child = taxoReader.getPath(ordAndValue.ord);
+      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);
     }
 
     return new SimpleFacetResult(path, totCount, labelValues);
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource.java b/lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource.java
index 64858e8..a9dc9c4 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource.java
@@ -156,20 +156,20 @@ public class TaxonomyFacetSumValueSource extends Facets {
 
   private SimpleFacetResult getTopChildren(FacetLabel path, int dimOrd, int topN) throws IOException {
 
-    TopOrdValueQueue q = new TopOrdValueQueue(topN);
+    TopOrdAndFloatQueue q = new TopOrdAndFloatQueue(topN);
     
     float bottomValue = 0;
 
     int ord = children[dimOrd];
     float sumValues = 0;
 
-    TopOrdValueQueue.OrdAndValue reuse = null;
+    TopOrdAndFloatQueue.OrdAndValue reuse = null;
     while(ord != TaxonomyReader.INVALID_ORDINAL) {
       if (values[ord] > 0) {
         sumValues += values[ord];
         if (values[ord] > bottomValue) {
           if (reuse == null) {
-            reuse = new TopOrdValueQueue.OrdAndValue();
+            reuse = new TopOrdAndFloatQueue.OrdAndValue();
           }
           reuse.ord = ord;
           reuse.value = values[ord];
@@ -194,7 +194,7 @@ public class TaxonomyFacetSumValueSource extends Facets {
 
     LabelAndValue[] labelValues = new LabelAndValue[q.size()];
     for(int i=labelValues.length-1;i>=0;i--) {
-      TopOrdValueQueue.OrdAndValue ordAndValue = q.pop();
+      TopOrdAndFloatQueue.OrdAndValue ordAndValue = q.pop();
       FacetLabel child = taxoReader.getPath(ordAndValue.ord);
       labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);
     }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/simple/TopOrdAndFloatQueue.java b/lucene/facet/src/java/org/apache/lucene/facet/simple/TopOrdAndFloatQueue.java
new file mode 100644
index 0000000..c76a951
--- /dev/null
+++ b/lucene/facet/src/java/org/apache/lucene/facet/simple/TopOrdAndFloatQueue.java
@@ -0,0 +1,47 @@
+package org.apache.lucene.facet.simple;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.util.PriorityQueue;
+
+// nocommit make value a double and merge with TopOrdCountValueQueue?
+
+/** Keeps highest results, first by largest float value,
+ *  then tie break by smallest ord. */
+class TopOrdAndFloatQueue extends PriorityQueue<TopOrdAndFloatQueue.OrdAndValue> {
+
+  public static final class OrdAndValue {
+    int ord;
+    float value;
+  }
+
+  public TopOrdAndFloatQueue(int topN) {
+    super(topN, false);
+  }
+
+  @Override
+  protected boolean lessThan(OrdAndValue a, OrdAndValue b) {
+    if (a.value < b.value) {
+      return true;
+    } else if (a.value > b.value) {
+      return false;
+    } else {
+      return a.ord > b.ord;
+    }
+  }
+}
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/simple/TopOrdAndIntQueue.java b/lucene/facet/src/java/org/apache/lucene/facet/simple/TopOrdAndIntQueue.java
new file mode 100644
index 0000000..9bb812d
--- /dev/null
+++ b/lucene/facet/src/java/org/apache/lucene/facet/simple/TopOrdAndIntQueue.java
@@ -0,0 +1,45 @@
+package org.apache.lucene.facet.simple;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.util.PriorityQueue;
+
+/** Keeps highest results, first by largest int value,
+ *  then tie break by smallest ord. */
+class TopOrdAndIntQueue extends PriorityQueue<TopOrdAndIntQueue.OrdAndValue> {
+
+  public static final class OrdAndValue {
+    int ord;
+    int value;
+  }
+
+  public TopOrdAndIntQueue(int topN) {
+    super(topN, false);
+  }
+
+  @Override
+  protected boolean lessThan(OrdAndValue a, OrdAndValue b) {
+    if (a.value < b.value) {
+      return true;
+    } else if (a.value > b.value) {
+      return false;
+    } else {
+      return a.ord > b.ord;
+    }
+  }
+}
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/simple/TopOrdCountQueue.java b/lucene/facet/src/java/org/apache/lucene/facet/simple/TopOrdCountQueue.java
deleted file mode 100644
index 4b625ef..0000000
--- a/lucene/facet/src/java/org/apache/lucene/facet/simple/TopOrdCountQueue.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package org.apache.lucene.facet.simple;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import org.apache.lucene.util.PriorityQueue;
-
-// nocommit rename to TopOrdIntQueue?
-
-/** Keeps highest count results. */
-class TopOrdCountQueue extends PriorityQueue<TopOrdCountQueue.OrdAndCount> {
-
-  public static final class OrdAndCount {
-    int ord;
-    int count;
-  }
-
-  public TopOrdCountQueue(int topN) {
-    super(topN, false);
-  }
-
-  @Override
-  protected boolean lessThan(OrdAndCount a, OrdAndCount b) {
-    if (a.count < b.count) {
-      return true;
-    } else if (a.count > b.count) {
-      return false;
-    } else {
-      return a.ord > b.ord;
-    }
-  }
-}
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/simple/TopOrdValueQueue.java b/lucene/facet/src/java/org/apache/lucene/facet/simple/TopOrdValueQueue.java
deleted file mode 100644
index 85cb626..0000000
--- a/lucene/facet/src/java/org/apache/lucene/facet/simple/TopOrdValueQueue.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package org.apache.lucene.facet.simple;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import org.apache.lucene.util.PriorityQueue;
-
-// nocommit make value a double and merge with TopOrdCountValueQueue?
-
-/** Keeps highest results. */
-class TopOrdValueQueue extends PriorityQueue<TopOrdValueQueue.OrdAndValue> {
-
-  public static final class OrdAndValue {
-    int ord;
-    float value;
-  }
-
-  public TopOrdValueQueue(int topN) {
-    super(topN, false);
-  }
-
-  @Override
-  protected boolean lessThan(OrdAndValue a, OrdAndValue b) {
-    if (a.value < b.value) {
-      return true;
-    } else if (a.value > b.value) {
-      return false;
-    } else {
-      return a.ord > b.ord;
-    }
-  }
-}

