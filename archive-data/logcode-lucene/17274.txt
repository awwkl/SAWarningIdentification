GitDiffStart: 51d4dcd5823c0c7e04578bb05c6de187fb00f0b6 | Thu Oct 7 01:18:30 2010 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 7700308..3419e9d 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -682,8 +682,7 @@ Optimizations
 
 * LUCENE-2123, LUCENE-2261: Move FuzzyQuery rewrite to separate RewriteMode 
   into MultiTermQuery. The number of fuzzy expansions can be specified with
-  the maxExpansions parameter to FuzzyQuery, but the default is limited to
-  BooleanQuery.maxClauseCount() as before. 
+  the maxExpansions parameter to FuzzyQuery.
   (Uwe Schindler, Robert Muir, Mike McCandless)
 
 * LUCENE-2164: ConcurrentMergeScheduler has more control over merge
diff --git a/lucene/src/java/org/apache/lucene/search/MultiTermQuery.java b/lucene/src/java/org/apache/lucene/search/MultiTermQuery.java
index 7477795..ac8b713 100644
--- a/lucene/src/java/org/apache/lucene/search/MultiTermQuery.java
+++ b/lucene/src/java/org/apache/lucene/search/MultiTermQuery.java
@@ -283,14 +283,6 @@ public abstract class MultiTermQuery extends Query {
       this.size = size;
     }
     
-    /** 
-     * Create a TopTermsBooleanQueryRewrite that is limited
-     * to at most {@link BooleanQuery#getMaxClauseCount} terms. 
-     */
-    public TopTermsBooleanQueryRewrite() {
-      this(Integer.MAX_VALUE);
-    }
-    
     /** Return a suitable Query for a MultiTermQuery term. */
     protected abstract Query getQuery(Term term, int docCount);
 
@@ -380,14 +372,6 @@ public abstract class MultiTermQuery extends Query {
       TopTermsBooleanQueryRewrite {
 
     /** 
-     * Create a TopTermsScoringBooleanQueryRewrite that is limited
-     * to at most {@link BooleanQuery#getMaxClauseCount} terms. 
-     */
-    public TopTermsScoringBooleanQueryRewrite() {
-      super();
-    }
-
-    /** 
      * Create a TopTermsScoringBooleanQueryRewrite for 
      * at most <code>size</code> terms.
      * <p>
@@ -418,14 +402,6 @@ public abstract class MultiTermQuery extends Query {
       TopTermsBooleanQueryRewrite {
     
     /** 
-     * Create a TopTermsBoostOnlyBooleanQueryRewrite that is limited
-     * to at most {@link BooleanQuery#getMaxClauseCount} terms. 
-     */
-    public TopTermsBoostOnlyBooleanQueryRewrite() {
-      super();
-    }
-
-    /** 
      * Create a TopTermsBoostOnlyBooleanQueryRewrite for 
      * at most <code>size</code> terms.
      * <p>
diff --git a/lucene/src/test/org/apache/lucene/search/TestFuzzyQuery.java b/lucene/src/test/org/apache/lucene/search/TestFuzzyQuery.java
index 27180cd..af90837 100644
--- a/lucene/src/test/org/apache/lucene/search/TestFuzzyQuery.java
+++ b/lucene/src/test/org/apache/lucene/search/TestFuzzyQuery.java
@@ -329,7 +329,7 @@ public class TestFuzzyQuery extends LuceneTestCase {
     writer.close();
     
     FuzzyQuery query = new FuzzyQuery(new Term("field", "lucene"));
-    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite());
+    query.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(50));
     ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;
     assertEquals(3, hits.length);
     // normally, 'Lucenne' would be the first result as IDF will skew the score.
diff --git a/lucene/src/test/org/apache/lucene/search/TestTermRangeQuery.java b/lucene/src/test/org/apache/lucene/search/TestTermRangeQuery.java
index d5f3bd8..b886551 100644
--- a/lucene/src/test/org/apache/lucene/search/TestTermRangeQuery.java
+++ b/lucene/src/test/org/apache/lucene/search/TestTermRangeQuery.java
@@ -138,7 +138,7 @@ public class TestTermRangeQuery extends LuceneTestCase {
   }
   
   private void checkBooleanTerms(Searcher searcher, TermRangeQuery query, String... terms) throws IOException {
-    query.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite());
+    query.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(50));
     final BooleanQuery bq = (BooleanQuery) searcher.rewrite(query);
     final Set<String> allowedTerms = new HashSet<String>(Arrays.asList(terms));
     assertEquals(allowedTerms.size(), bq.clauses().size());

