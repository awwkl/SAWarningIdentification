GitDiffStart: d00a997ad73b39acc24b83463abbbafe91b0ec1b | Fri Aug 15 11:53:34 2008 +0000
diff --git a/contrib/dataimporthandler/CHANGES.txt b/contrib/dataimporthandler/CHANGES.txt
index 8dea342..c98bdd4 100644
--- a/contrib/dataimporthandler/CHANGES.txt
+++ b/contrib/dataimporthandler/CHANGES.txt
@@ -28,6 +28,9 @@ New Features
 Changes in runtime behavior
 
 Bug Fixes
+1. SOLR-704:  NumberFormatTransformer can silently ignore part of the string while parsing. Now it tries to
+              use the complete string for parsing. Failure to do so will result in an exception.
+              (Stefan Oestreicher via shalin)
 
 Other Changes
 
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer.java
index 5b8606f..919da5f 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer.java
@@ -2,6 +2,7 @@ package org.apache.solr.handler.dataimport;
 
 import java.text.NumberFormat;
 import java.text.ParseException;
+import java.text.ParsePosition;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
@@ -88,18 +89,27 @@ public class NumberFormatTransformer extends Transformer {
 
   private Number process(String val, String style, Locale locale) throws ParseException {
     if (INTEGER.equals(style)) {
-      return NumberFormat.getIntegerInstance(locale).parse(val);
+      return parseNumber(val, NumberFormat.getIntegerInstance(locale));
     } else if (NUMBER.equals(style)) {
-      return NumberFormat.getNumberInstance(locale).parse(val);
+      return parseNumber(val, NumberFormat.getNumberInstance(locale));
     } else if (CURRENCY.equals(style)) {
-      return NumberFormat.getCurrencyInstance(locale).parse(val);
+      return parseNumber(val, NumberFormat.getCurrencyInstance(locale));
     } else if (PERCENT.equals(style)) {
-      return NumberFormat.getPercentInstance(locale).parse(val);
+      return parseNumber(val, NumberFormat.getPercentInstance(locale));
     }
 
     return null;
   }
 
+  private Number parseNumber(String val, NumberFormat numFormat) throws ParseException {
+    ParsePosition parsePos = new ParsePosition(0);
+    Number num = numFormat.parse(val, parsePos);
+    if (parsePos.getIndex() != val.length()) {
+      throw new ParseException("illegal number format", parsePos.getIndex());
+    }
+    return num;
+  }
+
   public static final String FORMAT_STYLE = "formatStyle";
 
   public static final String LOCALE = "locale";
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestNumberFormatTransformer.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestNumberFormatTransformer.java
index 5556285..73f1728 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestNumberFormatTransformer.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestNumberFormatTransformer.java
@@ -35,6 +35,7 @@ import java.util.Map;
  */
 public class TestNumberFormatTransformer {
   private char GROUPING_SEP = new DecimalFormatSymbols().getGroupingSeparator();
+  private char DECIMAL_SEP = new DecimalFormatSymbols().getDecimalSeparator();
 
   @Test
   @SuppressWarnings("unchecked")
@@ -83,4 +84,92 @@ public class TestNumberFormatTransformer {
 
     Assert.assertEquals(outputRow, row);
   }
+
+  @Test(expected = DataImportHandlerException.class)
+  @SuppressWarnings("unchecked")
+  public void testTransformRow_InvalidInput1_Number() {
+    List l = new ArrayList();
+    l.add(AbstractDataImportHandlerTest.createMap("column", "num",
+            NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER));
+    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, 0,
+            l, null);
+    Map m = AbstractDataImportHandlerTest.createMap("num", "123" + GROUPING_SEP + "5a67");
+    new NumberFormatTransformer().transformRow(m, c);
+  }
+
+  @Test(expected = DataImportHandlerException.class)
+  @SuppressWarnings("unchecked")
+  public void testTransformRow_InvalidInput2_Number() {
+    List l = new ArrayList();
+    l.add(AbstractDataImportHandlerTest.createMap("column", "num",
+            NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER));
+    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, 0,
+            l, null);
+    Map m = AbstractDataImportHandlerTest.createMap("num", "123" + GROUPING_SEP + "567b");
+    new NumberFormatTransformer().transformRow(m, c);
+  }
+
+  @Test(expected = DataImportHandlerException.class)
+  @SuppressWarnings("unchecked")
+  public void testTransformRow_InvalidInput2_Currency() {
+    List l = new ArrayList();
+    l.add(AbstractDataImportHandlerTest.createMap("column", "num",
+            NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.CURRENCY));
+    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, 0,
+            l, null);
+    Map m = AbstractDataImportHandlerTest.createMap("num", "123" + GROUPING_SEP + "567b");
+    new NumberFormatTransformer().transformRow(m, c);
+  }
+
+  @Test(expected = DataImportHandlerException.class)
+  @SuppressWarnings("unchecked")
+  public void testTransformRow_InvalidInput1_Percent() {
+    List l = new ArrayList();
+    l.add(AbstractDataImportHandlerTest.createMap("column", "num",
+            NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.PERCENT));
+    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, 0,
+            l, null);
+    Map m = AbstractDataImportHandlerTest.createMap("num", "123" + GROUPING_SEP + "5a67");
+    new NumberFormatTransformer().transformRow(m, c);
+  }
+
+  @Test(expected = DataImportHandlerException.class)
+  @SuppressWarnings("unchecked")
+  public void testTransformRow_InvalidInput3_Currency() {
+    List l = new ArrayList();
+    l.add(AbstractDataImportHandlerTest.createMap("column", "num",
+            NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.CURRENCY));
+    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, 0,
+            l, null);
+    Map m = AbstractDataImportHandlerTest.createMap(
+            "num", "123" + DECIMAL_SEP + "456" + DECIMAL_SEP + "789");
+    new NumberFormatTransformer().transformRow(m, c);
+  }
+
+  @Test(expected = DataImportHandlerException.class)
+  @SuppressWarnings("unchecked")
+  public void testTransformRow_InvalidInput3_Number() {
+    List l = new ArrayList();
+    l.add(AbstractDataImportHandlerTest.createMap("column", "num",
+            NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER));
+    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, 0,
+            l, null);
+    Map m = AbstractDataImportHandlerTest.createMap(
+            "num", "123" + DECIMAL_SEP + "456" + DECIMAL_SEP + "789");
+    new NumberFormatTransformer().transformRow(m, c);
+  }
+
+  @Test
+  @SuppressWarnings("unchecked")
+  public void testTransformRow_MalformedInput_Number() {
+    List l = new ArrayList();
+    l.add(AbstractDataImportHandlerTest.createMap("column", "num",
+            NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER));
+    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, 0,
+            l, null);
+    Map m = AbstractDataImportHandlerTest.createMap(
+            "num", "123" + GROUPING_SEP + GROUPING_SEP + "789");
+    new NumberFormatTransformer().transformRow(m, c);
+    Assert.assertEquals(new Long(123789), m.get("num"));
+  }
 }

