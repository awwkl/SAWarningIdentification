GitDiffStart: 359d41adf5c78f1d5ab37fd0f749adbd790dbdd7 | Thu Jan 16 11:25:57 2014 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 7c9c1b5..2338f70 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -149,6 +149,8 @@ New Features
   Andrzej Bialecki, Patrick Hunt, Wolfgang Hoschek, Roman Shaposhnik, 
   Eric Wong)
 
+* SOLR-5476: Overseer Role for nodes (Noble Paul)
+
 Bug Fixes
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java b/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
index 301dc95..24d9e54 100644
--- a/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
+++ b/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
@@ -432,10 +432,10 @@ final class OverseerElectionContext extends ElectionContext {
   
   private final SolrZkClient zkClient;
   private Overseer overseer;
-
+  public static final String PATH = "/overseer_elect";
 
   public OverseerElectionContext(SolrZkClient zkClient, Overseer overseer, final String zkNodeName) {
-    super(zkNodeName, "/overseer_elect", "/overseer_elect/leader", null, zkClient);
+    super(zkNodeName,PATH , PATH+"/leader", null, zkClient);
     this.overseer = overseer;
     this.zkClient = zkClient;
     try {
@@ -477,5 +477,5 @@ final class OverseerElectionContext extends ElectionContext {
     // leader changed - close the overseer
     overseer.close();
   }
-  
+
 }
diff --git a/solr/core/src/java/org/apache/solr/cloud/LeaderElector.java b/solr/core/src/java/org/apache/solr/cloud/LeaderElector.java
index 15a0327..799fcf1 100644
--- a/solr/core/src/java/org/apache/solr/cloud/LeaderElector.java
+++ b/solr/core/src/java/org/apache/solr/cloud/LeaderElector.java
@@ -59,7 +59,8 @@ public  class LeaderElector {
   
   private final static Pattern LEADER_SEQ = Pattern.compile(".*?/?.*?-n_(\\d+)");
   private final static Pattern SESSION_ID = Pattern.compile(".*?/?(.*?-.*?)-n_\\d+");
-  
+  private final static Pattern  NODE_NAME = Pattern.compile(".*?/?(.*?-)(.*?)-n_\\d+");
+
   protected SolrZkClient zkClient;
   
   private ZkCmdExecutor zkCmdExecutor;
@@ -168,7 +169,7 @@ public  class LeaderElector {
    * 
    * @return sequence number
    */
-  private int getSeq(String nStringSequence) {
+  public static int getSeq(String nStringSequence) {
     int seq = 0;
     Matcher m = LEADER_SEQ.matcher(nStringSequence);
     if (m.matches()) {
@@ -191,6 +192,19 @@ public  class LeaderElector {
     }
     return id;
   }
+
+  public static String getNodeName(String nStringSequence){
+    String result;
+    Matcher m = NODE_NAME.matcher(nStringSequence);
+    if (m.matches()) {
+      result = m.group(2);
+    } else {
+      throw new IllegalStateException("Could not find regex match in:"
+          + nStringSequence);
+    }
+    return result;
+
+  }
   
   /**
    * Returns int list given list of form n_0000000001, n_0000000003, etc.
@@ -291,7 +305,7 @@ public  class LeaderElector {
   /**
    * Sort n string sequence list.
    */
-  private void sortSeqs(List<String> seqs) {
+  public static void sortSeqs(List<String> seqs) {
     Collections.sort(seqs, new Comparator<String>() {
       
       @Override
@@ -301,4 +315,8 @@ public  class LeaderElector {
       }
     });
   }
+  void retryElection() throws KeeperException, InterruptedException, IOException {
+    context.cancelElection();
+    joinElection(context, true);
+  }
 }
diff --git a/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java b/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
index fa01d42..30f458f 100644
--- a/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
+++ b/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
@@ -39,6 +39,7 @@ import org.apache.solr.common.cloud.PlainIdRouter;
 import org.apache.solr.common.cloud.Replica;
 import org.apache.solr.common.cloud.RoutingRule;
 import org.apache.solr.common.cloud.Slice;
+import org.apache.solr.common.cloud.SolrZkClient;
 import org.apache.solr.common.cloud.ZkCoreNodeProps;
 import org.apache.solr.common.cloud.ZkNodeProps;
 import org.apache.solr.common.cloud.ZkStateReader;
@@ -54,7 +55,9 @@ import org.apache.solr.handler.component.ShardHandler;
 import org.apache.solr.handler.component.ShardRequest;
 import org.apache.solr.handler.component.ShardResponse;
 import org.apache.solr.update.SolrIndexSplitter;
+import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.KeeperException;
+import org.apache.zookeeper.data.Stat;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -64,6 +67,7 @@ import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -73,6 +77,8 @@ import static org.apache.solr.cloud.Assign.getNodesForNewShard;
 import static org.apache.solr.common.cloud.ZkStateReader.COLLECTION_PROP;
 import static org.apache.solr.common.cloud.ZkStateReader.REPLICA_PROP;
 import static org.apache.solr.common.cloud.ZkStateReader.SHARD_ID_PROP;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.ADDROLE;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.REMOVEROLE;
 
 
 public class OverseerCollectionProcessor implements Runnable, ClosableThread {
@@ -158,7 +164,14 @@ public class OverseerCollectionProcessor implements Runnable, ClosableThread {
          log.debug("am_i_leader unclear {}", isLeader);
          isLeader = amILeader();  // not a no, not a yes, try ask again
        }
-       while (!this.isClosed) {
+
+    try {
+      prioritizeOverseerNodes();
+    } catch (Exception e) {
+      log.error("Unable to prioritize overseer ", e);
+
+    }
+    while (!this.isClosed) {
          try {
            isLeader = amILeader();
            if (LeaderStatus.NO == isLeader) {
@@ -198,7 +211,96 @@ public class OverseerCollectionProcessor implements Runnable, ClosableThread {
   public void close() {
     isClosed = true;
   }
-  
+
+  private void prioritizeOverseerNodes() throws KeeperException, InterruptedException {
+    log.info("prioritizing overseer nodes");
+    SolrZkClient zk = zkStateReader.getZkClient();
+    if(!zk.exists(ZkStateReader.ROLES,true))return;
+    Map m = (Map) ZkStateReader.fromJSON(zk.getData(ZkStateReader.ROLES, null, new Stat(), true));
+
+    List overseerDesignates = (List) m.get("overseer");
+    if(overseerDesignates==null || overseerDesignates.isEmpty()) return;
+
+    log.debug("overseer designates {}", overseerDesignates);
+
+    List<String> children = zk.getChildren(OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE, null, true);
+
+
+    if(children.size()<2) return;
+
+    LeaderElector.sortSeqs(children);
+    ArrayList<String> nodeNames = new ArrayList<>(children.size());
+    for (String c : children) nodeNames.add(LeaderElector.getNodeName(c));
+    boolean overseerDesignateAvailable = false;
+    //ensure that the node right behind the leader , i.r at position 1 is a Overseer
+    String newOverseerDesignate = null;
+    log.debug("sorted nodes {}", nodeNames);
+    for (int i = 1; i < nodeNames.size(); i++) {
+      String s = nodeNames.get(i);
+      if (overseerDesignates.contains(s)) {
+        log.info(" found an overseer designate to be promoted to the front : {}, pushing others back", s);
+        overseerDesignateAvailable = true;
+        newOverseerDesignate = s;
+        for (int j = 1; j < i; j++) {
+          String nodeName = nodeNames.get(j);
+          log.debug("pushing back {} ", nodeName);
+          invokeRejoinOverseer(nodeName);
+        }
+        break;
+      }
+      if(overseerDesignateAvailable) break;
+    }
+
+    if(overseerDesignateAvailable){
+      //wait for a while to ensure the designate has indeed come in front
+      boolean prioritizationComplete = false;
+      long timeout = System.currentTimeMillis() + 5000;
+
+      for(;System.currentTimeMillis()< timeout ;){
+        children = zk.getChildren(OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE, null, true);
+        LeaderElector.sortSeqs(children);
+
+        String frontRunner = LeaderElector.getNodeName(children.get(1));
+        log.debug("Frontrunner : {}", frontRunner);
+        if(newOverseerDesignate.equals(frontRunner)){
+          prioritizationComplete = true;
+          break;
+        }
+        Thread.sleep(50);
+      }
+
+      if(!prioritizationComplete) {
+        log.warn("Could not make the Overseer designate '{}' the frontrunner", newOverseerDesignate);
+      }
+
+    } else {
+      log.warn("No overseer designates are available");
+      return;
+    }
+
+
+
+    if(!overseerDesignates.contains( nodeNames.get(0)) && overseerDesignateAvailable){
+      //this means there are designated Overseer nodes and I am not one of them , kill myself
+      invokeRejoinOverseer(nodeNames.get(0));
+    }
+
+
+  }
+
+  private void invokeRejoinOverseer(String nodeName) {
+    ModifiableSolrParams params = new ModifiableSolrParams();
+    params.set(CoreAdminParams.ACTION, CoreAdminAction.REJOINOVERSEERELECTION.toString());
+    params.set("qt", adminPath);
+    ShardRequest sreq = new ShardRequest();
+    sreq.purpose = 1;
+    String replica = nodeName.replaceFirst("_", "/");
+    sreq.shards = new String[]{replica};
+    sreq.actualShards = sreq.shards;
+    sreq.params = params;
+    shardHandler.submit(sreq, replica, sreq.params);
+  }
+
   protected LeaderStatus amILeader() {
     try {
       ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(
@@ -250,7 +352,11 @@ public class OverseerCollectionProcessor implements Runnable, ClosableThread {
         deleteReplica(zkStateReader.getClusterState(), message, results);
       } else if (MIGRATE.equals(operation)) {
         migrate(zkStateReader.getClusterState(), message, results);
-      } else {
+      } else if(REMOVEROLE.toString().toLowerCase().equals(operation) || ADDROLE.toString().toLowerCase().equals(operation) ){
+        processRoleCommand(message, operation);
+      }
+
+      else {
         throw new SolrException(ErrorCode.BAD_REQUEST, "Unknown operation:"
             + operation);
       }
@@ -267,6 +373,48 @@ public class OverseerCollectionProcessor implements Runnable, ClosableThread {
     
     return new OverseerSolrResponse(results);
   }
+  private void processRoleCommand(ZkNodeProps message, String operation) throws KeeperException, InterruptedException {
+    SolrZkClient zkClient = zkStateReader.getZkClient();
+    Map roles = null;
+    String node = message.getStr("node");
+
+    String roleName = message.getStr("role");
+    boolean nodeExists = false;
+    if(nodeExists = zkClient.exists(ZkStateReader.ROLES, true)){
+      roles = (Map) ZkStateReader.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));
+    } else {
+      roles = new LinkedHashMap(1);
+    }
+
+    List nodeList= (List) roles.get(roleName);
+    if(nodeList == null) roles.put(roleName, nodeList = new ArrayList());
+    if(ADDROLE.toString().toLowerCase().equals(operation) ){
+      log.info("Overseer role added to {}", node);
+      if(!nodeList.contains(node)) nodeList.add(node);
+    } else if(REMOVEROLE.toString().toLowerCase().equals(operation)) {
+      log.info("Overseer role removed from {}", node);
+      nodeList.remove(node);
+    }
+
+    if(nodeExists){
+      zkClient.setData(ZkStateReader.ROLES, ZkStateReader.toJSON(roles),true);
+    } else {
+      zkClient.create(ZkStateReader.ROLES, ZkStateReader.toJSON(roles), CreateMode.PERSISTENT,true);
+    }
+    //if there are too many nodes this command may time out. And most likely dedicated
+    // overseers are created when there are too many nodes  . So , do this operation in a separate thread
+    new Thread(){
+      @Override
+      public void run() {
+        try {
+          prioritizeOverseerNodes();
+        } catch (Exception e) {
+          log.error("Error in prioritizing Overseer",e);
+        }
+
+      }
+    }.start();
+  }
 
   private void deleteReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {
     checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP,REPLICA_PROP);
diff --git a/solr/core/src/java/org/apache/solr/cloud/ZkController.java b/solr/core/src/java/org/apache/solr/cloud/ZkController.java
index 39fdc92..c426562 100644
--- a/solr/core/src/java/org/apache/solr/cloud/ZkController.java
+++ b/solr/core/src/java/org/apache/solr/cloud/ZkController.java
@@ -1602,4 +1602,14 @@ public final class ZkController {
     }
     return out;
   }
+
+  public void rejoinOverseerElection() {
+    try {
+      overseerElector.retryElection();
+    } catch (Exception e) {
+      throw new SolrException(ErrorCode.SERVER_ERROR, "Unable to rejoin election", e);
+    }
+
+  }
+
 }
diff --git a/solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler.java b/solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler.java
index 83b7734..0fd39f0 100644
--- a/solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler.java
@@ -17,6 +17,8 @@ package org.apache.solr.handler.admin;
  * limitations under the License.
  */
 
+import com.google.common.collect.ImmutableSet;
+import org.apache.commons.lang.StringUtils;
 import org.apache.solr.client.solrj.SolrResponse;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.impl.HttpSolrServer;
@@ -32,6 +34,7 @@ import org.apache.solr.common.cloud.ImplicitDocRouter;
 import org.apache.solr.common.cloud.ZkCoreNodeProps;
 import org.apache.solr.common.cloud.ZkNodeProps;
 import org.apache.solr.common.cloud.ZkStateReader;
+import org.apache.solr.common.params.CollectionParams;
 import org.apache.solr.common.params.CollectionParams.CollectionAction;
 import org.apache.solr.common.params.CoreAdminParams;
 import org.apache.solr.common.params.ModifiableSolrParams;
@@ -51,6 +54,7 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
+import java.util.Set;
 
 import static org.apache.solr.cloud.Overseer.QUEUE_OPERATION;
 import static org.apache.solr.cloud.OverseerCollectionProcessor.COLL_CONF;
@@ -65,6 +69,8 @@ import static org.apache.solr.cloud.OverseerCollectionProcessor.SHARDS_PROP;
 import static org.apache.solr.common.cloud.ZkNodeProps.makeMap;
 import static org.apache.solr.common.cloud.ZkStateReader.COLLECTION_PROP;
 import static org.apache.solr.common.cloud.ZkStateReader.SHARD_ID_PROP;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.ADDROLE;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.REMOVEROLE;
 
 public class CollectionsHandler extends RequestHandlerBase {
   protected static Logger log = LoggerFactory.getLogger(CollectionsHandler.class);
@@ -173,6 +179,12 @@ public class CollectionsHandler extends RequestHandlerBase {
       case MIGRATE: {
         this.handleMigrate(req, rsp);
         break;
+      } case ADDROLE:{
+        handleRole(ADDROLE, req, rsp);
+        break;
+      } case REMOVEROLE:{
+        handleRole(REMOVEROLE, req, rsp);
+        break;
       }
       default: {
           throw new RuntimeException("Unknown action: " + action);
@@ -181,7 +193,18 @@ public class CollectionsHandler extends RequestHandlerBase {
 
     rsp.setHttpCaching(false);
   }
-  
+
+  static Set<String> KNOWN_ROLES = ImmutableSet.of("overseer");
+
+  private void handleRole(CollectionAction action, SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {
+    req.getParams().required().check("role", "node");
+    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, action.toString().toLowerCase());
+    copyIfNotNull(req.getParams(), map,"role", "node");
+    ZkNodeProps m = new ZkNodeProps(map);
+    if(!KNOWN_ROLES.contains(m.getStr("role"))) throw new SolrException(ErrorCode.BAD_REQUEST,"Unknown role. Supported roles are ,"+ KNOWN_ROLES);
+    handleResponse(action.toString().toLowerCase(), m, rsp);
+  }
+
   public static long DEFAULT_ZK_TIMEOUT = 60*1000;
 
   private void handleResponse(String operation, ZkNodeProps m,
diff --git a/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java b/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
index 2a23ad7..deecf8c 100644
--- a/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
@@ -218,6 +218,13 @@ public class CoreAdminHandler extends RequestHandlerBase {
           this.handleRequestBufferUpdatesAction(req, rsp);
           break;
         }
+        case REJOINOVERSEERELECTION:{
+          ZkController zkController = coreContainer.getZkController();
+          if(zkController != null){
+            zkController.rejoinOverseerElection();
+          }
+          break;
+        }
         default: {
           this.handleCustomAction(req, rsp);
           break;
diff --git a/solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest.java b/solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest.java
new file mode 100644
index 0000000..e315fcf
--- /dev/null
+++ b/solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest.java
@@ -0,0 +1,194 @@
+package org.apache.solr.cloud;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.solr.client.solrj.SolrRequest;
+import org.apache.solr.client.solrj.SolrServerException;
+import org.apache.solr.client.solrj.impl.CloudSolrServer;
+import org.apache.solr.client.solrj.request.QueryRequest;
+import org.apache.solr.common.cloud.ZkStateReader;
+import org.apache.solr.common.params.MapSolrParams;
+import org.apache.solr.common.params.SolrParams;
+import org.apache.zookeeper.KeeperException;
+import org.apache.zookeeper.data.Stat;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.BeforeClass;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import static org.apache.solr.cloud.OverseerCollectionProcessor.MAX_SHARDS_PER_NODE;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.NUM_SLICES;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.REPLICATION_FACTOR;
+import static org.apache.solr.common.cloud.ZkNodeProps.makeMap;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction;
+
+public class OverseerRolesTest  extends AbstractFullDistribZkTestBase{
+  private CloudSolrServer client;
+
+  @BeforeClass
+  public static void beforeThisClass2() throws Exception {
+
+  }
+
+  @Before
+  @Override
+  public void setUp() throws Exception {
+    super.setUp();
+    System.setProperty("numShards", Integer.toString(sliceCount));
+    System.setProperty("solr.xml.persist", "true");
+    client = createCloudClient(null);
+  }
+
+  @After
+  public void tearDown() throws Exception {
+    super.tearDown();
+    client.shutdown();
+  }
+
+  protected String getSolrXml() {
+    return "solr-no-core.xml";
+  }
+
+  public OverseerRolesTest() {
+    fixShardCount = true;
+
+    sliceCount = 2;
+    shardCount = 6;
+
+    checkCreatedVsState = false;
+  }
+
+  @Override
+  public void doTest() throws Exception {
+    addOverseerRole2ExistingNodes();
+
+  }
+
+  private void addOverseerRole2ExistingNodes() throws Exception {
+    String collectionName = "testOverseerCol";
+
+    createCollection(collectionName, client);
+
+    waitForRecoveriesToFinish(collectionName, false);
+    Set<String> nodes = client.getZkStateReader().getClusterState().getLiveNodes();
+
+    ArrayList<String> l = new ArrayList<>(nodes);
+    log.info("All nodes {}", l);
+    String currentLeader = getLeaderNode(client);
+    log.info("Current leader {} ", currentLeader);
+    l.remove(currentLeader);
+
+    Collections.shuffle(l);
+    String overseerDesignate = l.get(0);
+    log.info("overseerDesignate {}",overseerDesignate);
+    setOverseerRole(CollectionAction.ADDROLE,overseerDesignate);
+
+    long timeout = System.currentTimeMillis()+10000;
+
+    boolean leaderchanged = false;
+    for(;System.currentTimeMillis() < timeout;){
+      if(getLeaderNode(client).equals(overseerDesignate)){
+        log.info("overseer designate is the new overseer");
+        leaderchanged =true;
+        break;
+      }
+      Thread.sleep(100);
+    }
+    assertTrue("could not set the new overseer",leaderchanged);
+
+
+
+    //add another node as overseer
+
+
+    l.remove(overseerDesignate);
+
+    Collections.shuffle(l);
+
+    String anotherOverseer = l.get(0);
+    log.info("Adding another overseer designate {}", anotherOverseer);
+    setOverseerRole(CollectionAction.ADDROLE, anotherOverseer);
+
+    timeout = System.currentTimeMillis()+10000;
+    leaderchanged = false;
+    for(;System.currentTimeMillis() < timeout;){
+      log.info(" count {}", System.currentTimeMillis());
+      List<String> seqs = client.getZkStateReader().getZkClient().getChildren("/overseer_elect/election", null, true);
+      LeaderElector.sortSeqs(seqs);
+
+      log.info("seqs : {} ",seqs);
+//
+      if(LeaderElector.getNodeName(seqs.get(1)).equals(anotherOverseer)){
+        leaderchanged =true;
+        break;
+      }
+      Thread.sleep(100);
+    }
+
+    assertTrue("New overseer not the frontrunner", leaderchanged);
+
+
+    client.shutdown();
+
+
+  }
+
+  private void setOverseerRole(CollectionAction action, String overseerDesignate) throws SolrServerException, IOException {
+    log.info("Adding overseer designate {} ", overseerDesignate);
+    Map m = makeMap(
+        "action", action.toString().toLowerCase(),
+        "role", "overseer",
+        "node", overseerDesignate);
+    SolrParams params = new MapSolrParams(m);
+    SolrRequest request = new QueryRequest(params);
+    request.setPath("/admin/collections");
+    client.request(request);
+  }
+
+  private String getLeaderNode(CloudSolrServer client) throws KeeperException, InterruptedException {
+    Map m = (Map) ZkStateReader.fromJSON(client.getZkStateReader().getZkClient().getData("/overseer_elect/leader", null, new Stat(), true));
+    String s = (String) m.get("id");
+//    log.info("leader-id {}",s);
+    String nodeName = LeaderElector.getNodeName(s);
+//    log.info("Leader {}", nodeName);
+    return nodeName;
+  }
+
+  protected void createCollection(String COLL_NAME, CloudSolrServer client) throws Exception {
+    int replicationFactor = 2;
+    int numShards = 4;
+    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()
+        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;
+
+    Map<String, Object> props = makeMap(
+        REPLICATION_FACTOR, replicationFactor,
+        MAX_SHARDS_PER_NODE, maxShardsPerNode,
+        NUM_SLICES, numShards);
+    Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();
+    createCollection(collectionInfos, COLL_NAME, props, client);
+  }
+
+
+}
diff --git a/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java b/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java
index 7eecadd..5810103 100644
--- a/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java
+++ b/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java
@@ -68,7 +68,8 @@ public class ZkStateReader {
   public static final String LIVE_NODES_ZKNODE = "/live_nodes";
   public static final String ALIASES = "/aliases.json";
   public static final String CLUSTER_STATE = "/clusterstate.json";
-  
+  public static final String ROLES = "/roles.json";
+
   public static final String RECOVERING = "recovering";
   public static final String RECOVERY_FAILED = "recovery_failed";
   public static final String ACTIVE = "active";
diff --git a/solr/solrj/src/java/org/apache/solr/common/params/CollectionParams.java b/solr/solrj/src/java/org/apache/solr/common/params/CollectionParams.java
index ac99e13..8e75a9c 100644
--- a/solr/solrj/src/java/org/apache/solr/common/params/CollectionParams.java
+++ b/solr/solrj/src/java/org/apache/solr/common/params/CollectionParams.java
@@ -28,7 +28,7 @@ public interface CollectionParams
 
 
   public enum CollectionAction {
-    CREATE, DELETE, RELOAD, SYNCSHARD, CREATEALIAS, DELETEALIAS, SPLITSHARD, DELETESHARD, CREATESHARD, DELETEREPLICA, MIGRATE;
+    CREATE, DELETE, RELOAD, SYNCSHARD, CREATEALIAS, DELETEALIAS, SPLITSHARD, DELETESHARD, CREATESHARD, DELETEREPLICA, MIGRATE, ADDROLE,REMOVEROLE ;
     
     public static CollectionAction get( String p )
     {
diff --git a/solr/solrj/src/java/org/apache/solr/common/params/CoreAdminParams.java b/solr/solrj/src/java/org/apache/solr/common/params/CoreAdminParams.java
index b1291f3..08d59b3 100644
--- a/solr/solrj/src/java/org/apache/solr/common/params/CoreAdminParams.java
+++ b/solr/solrj/src/java/org/apache/solr/common/params/CoreAdminParams.java
@@ -127,7 +127,8 @@ public abstract class CoreAdminParams
     REQUESTBUFFERUPDATES,
     REQUESTAPPLYUPDATES,
     LOAD_ON_STARTUP,
-    TRANSIENT;
+    TRANSIENT,
+    REJOINOVERSEERELECTION;
     
     public static CoreAdminAction get( String p )
     {

