GitDiffStart: 6f5f23444cbe448502087a62bb8d4fbb530c2886 | Mon Apr 4 12:25:16 2005 +0000
diff --git a/contrib/analyzers/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java b/contrib/analyzers/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
index 78823fe..8d6e513 100644
--- a/contrib/analyzers/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
+++ b/contrib/analyzers/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
@@ -1,171 +1,171 @@
-package org.apache.lucene.analysis;
-
-/**
- * Copyright 2005 The Apache Software Foundation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * A filter that replace accented characters in the ISO Latin 1 character set by
- * their unaccented equivalent. The case will not be altered.
- * <p>
- * For instance, '?' will be replaced by 'a'.
- * <p>
- */
-public class ISOLatin1AccentFilter extends TokenFilter {
-	public ISOLatin1AccentFilter(TokenStream input) {
-		super(input);
-	}
-
-	/**
-	 * To replace accented characters by unaccented equivalents.
-	 */
-	public final Token next() throws java.io.IOException {
-		final Token t = input.next();
-		if (t == null)
-			return null;
-		// Return a token with filtered characters.
-		return new Token(RemoveAccents(t.termText()), t.startOffset(), t.endOffset(), t.type());
-	}
-
-	/**
-	 * To replace accented characters in a String by unaccented equivalents.
-	 */
-	public final static String RemoveAccents(String input) {
-		final StringBuffer output = new StringBuffer();
-		for (int i = 0; i < input.length(); i++) {
-			switch (input.charAt(i)) {
-				case '\u00C0' : // ?
-				case '\u00C1' : // ?
-				case '\u00C2' : // ?
-				case '\u00C3' : // ?
-				case '\u00C4' : // ?
-				case '\u00C5' : // ?
-					output.append("A");
-					break;
-				case '\u00C6' : // ?
-					output.append("AE");
-					break;
-				case '\u00C7' : // ?
-					output.append("C");
-					break;
-				case '\u00C8' : // ?
-				case '\u00C9' : // ?
-				case '\u00CA' : // ?
-				case '\u00CB' : // ?
-					output.append("E");
-					break;
-				case '\u00CC' : // ?
-				case '\u00CD' : // ?
-				case '\u00CE' : // ?
-				case '\u00CF' : // ?
-					output.append("I");
-					break;
-				case '\u00D0' : // ?
-					output.append("D");
-					break;
-				case '\u00D1' : // ?
-					output.append("N");
-					break;
-				case '\u00D2' : // ?
-				case '\u00D3' : // ?
-				case '\u00D4' : // ?
-				case '\u00D5' : // ?
-				case '\u00D6' : // ?
-				case '\u00D8' : // ?
-					output.append("O");
-					break;
-				case '\u0152' : // ?
-					output.append("OE");
-					break;
-				case '\u00DE' : // ?
-					output.append("TH");
-					break;
-				case '\u00D9' : // ?
-				case '\u00DA' : // ?
-				case '\u00DB' : // ?
-				case '\u00DC' : // ?
-					output.append("U");
-					break;
-				case '\u00DD' : // ?
-				case '\u0178' : // ?
-					output.append("Y");
-					break;
-				case '\u00E0' : // ?
-				case '\u00E1' : // ?
-				case '\u00E2' : // ?
-				case '\u00E3' : // ?
-				case '\u00E4' : // ?
-				case '\u00E5' : // ?
-					output.append("a");
-					break;
-				case '\u00E6' : // ?
-					output.append("ae");
-					break;
-				case '\u00E7' : // ?
-					output.append("c");
-					break;
-				case '\u00E8' : // ?
-				case '\u00E9' : // ?
-				case '\u00EA' : // ?
-				case '\u00EB' : // ?
-					output.append("e");
-					break;
-				case '\u00EC' : // ?
-				case '\u00ED' : // ?
-				case '\u00EE' : // ?
-				case '\u00EF' : // ?
-					output.append("i");
-					break;
-				case '\u00F0' : // ?
-					output.append("d");
-					break;
-				case '\u00F1' : // ?
-					output.append("n");
-					break;
-				case '\u00F2' : // ?
-				case '\u00F3' : // ?
-				case '\u00F4' : // ?
-				case '\u00F5' : // ?
-				case '\u00F6' : // ?
-				case '\u00F8' : // ?
-					output.append("o");
-					break;
-				case '\u0153' : // ?
-					output.append("oe");
-					break;
-				case '\u00DF' : // ?
-					output.append("ss");
-					break;
-				case '\u00FE' : // ?
-					output.append("th");
-					break;
-				case '\u00F9' : // ?
-				case '\u00FA' : // ?
-				case '\u00FB' : // ?
-				case '\u00FC' : // ?
-					output.append("u");
-					break;
-				case '\u00FD' : // ?
-				case '\u00FF' : // ?
-					output.append("y");
-					break;
-				default :
-					output.append(input.charAt(i));
-					break;
-			}
-		}
-		return output.toString();
-	}
+package org.apache.lucene.analysis;
+
+/**
+ * Copyright 2005 The Apache Software Foundation
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * A filter that replace accented characters in the ISO Latin 1 character set by
+ * their unaccented equivalent. The case will not be altered.
+ * <p>
+ * For instance, '?' will be replaced by 'a'.
+ * <p>
+ */
+public class ISOLatin1AccentFilter extends TokenFilter {
+	public ISOLatin1AccentFilter(TokenStream input) {
+		super(input);
+	}
+
+	/**
+	 * To replace accented characters by unaccented equivalents.
+	 */
+	public final Token next() throws java.io.IOException {
+		final Token t = input.next();
+		if (t == null)
+			return null;
+		// Return a token with filtered characters.
+		return new Token(RemoveAccents(t.termText()), t.startOffset(), t.endOffset(), t.type());
+	}
+
+	/**
+	 * To replace accented characters in a String by unaccented equivalents.
+	 */
+	public final static String RemoveAccents(String input) {
+		final StringBuffer output = new StringBuffer();
+		for (int i = 0; i < input.length(); i++) {
+			switch (input.charAt(i)) {
+				case '\u00C0' : // ?
+				case '\u00C1' : // ?
+				case '\u00C2' : // ?
+				case '\u00C3' : // ?
+				case '\u00C4' : // ?
+				case '\u00C5' : // ?
+					output.append("A");
+					break;
+				case '\u00C6' : // ?
+					output.append("AE");
+					break;
+				case '\u00C7' : // ?
+					output.append("C");
+					break;
+				case '\u00C8' : // ?
+				case '\u00C9' : // ?
+				case '\u00CA' : // ?
+				case '\u00CB' : // ?
+					output.append("E");
+					break;
+				case '\u00CC' : // ?
+				case '\u00CD' : // ?
+				case '\u00CE' : // ?
+				case '\u00CF' : // ?
+					output.append("I");
+					break;
+				case '\u00D0' : // ?
+					output.append("D");
+					break;
+				case '\u00D1' : // ?
+					output.append("N");
+					break;
+				case '\u00D2' : // ?
+				case '\u00D3' : // ?
+				case '\u00D4' : // ?
+				case '\u00D5' : // ?
+				case '\u00D6' : // ?
+				case '\u00D8' : // ?
+					output.append("O");
+					break;
+				case '\u0152' : // ?
+					output.append("OE");
+					break;
+				case '\u00DE' : // ?
+					output.append("TH");
+					break;
+				case '\u00D9' : // ?
+				case '\u00DA' : // ?
+				case '\u00DB' : // ?
+				case '\u00DC' : // ?
+					output.append("U");
+					break;
+				case '\u00DD' : // ?
+				case '\u0178' : // Ÿ
+					output.append("Y");
+					break;
+				case '\u00E0' : // ?
+				case '\u00E1' : // á
+				case '\u00E2' : // â
+				case '\u00E3' : // ã
+				case '\u00E4' : // ä
+				case '\u00E5' : // å
+					output.append("a");
+					break;
+				case '\u00E6' : // æ
+					output.append("ae");
+					break;
+				case '\u00E7' : // ç
+					output.append("c");
+					break;
+				case '\u00E8' : // è
+				case '\u00E9' : // é
+				case '\u00EA' : // ê
+				case '\u00EB' : // ë
+					output.append("e");
+					break;
+				case '\u00EC' : // ì
+				case '\u00ED' : // í
+				case '\u00EE' : // î
+				case '\u00EF' : // ï
+					output.append("i");
+					break;
+				case '\u00F0' : // ð
+					output.append("d");
+					break;
+				case '\u00F1' : // ñ
+					output.append("n");
+					break;
+				case '\u00F2' : // ò
+				case '\u00F3' : // ó
+				case '\u00F4' : // ô
+				case '\u00F5' : // õ
+				case '\u00F6' : // ö
+				case '\u00F8' : // ø
+					output.append("o");
+					break;
+				case '\u0153' : // ?
+					output.append("oe");
+					break;
+				case '\u00DF' : // ?
+					output.append("ss");
+					break;
+				case '\u00FE' : // þ
+					output.append("th");
+					break;
+				case '\u00F9' : // ù
+				case '\u00FA' : // ú
+				case '\u00FB' : // û
+				case '\u00FC' : // ü
+					output.append("u");
+					break;
+				case '\u00FD' : // ý
+				case '\u00FF' : // ÿ
+					output.append("y");
+					break;
+				default :
+					output.append(input.charAt(i));
+					break;
+			}
+		}
+		return output.toString();
+	}
 }
\ No newline at end of file
diff --git a/contrib/analyzers/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter.java b/contrib/analyzers/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter.java
index 2da1d12..c0bf422 100644
--- a/contrib/analyzers/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter.java
+++ b/contrib/analyzers/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter.java
@@ -6,11 +6,79 @@ import java.io.StringReader;
 
 public class TestISOLatin1AccentFilter extends TestCase {
   public void testU() throws Exception {
-    TokenStream stream = new WhitespaceTokenizer(new StringReader("\u00FC"));
+    TokenStream stream = new WhitespaceTokenizer(new StringReader("Des mot clés ? LA CHA?NE ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? Ÿ ? á â ã ä å æ ç è é ê ë ì í î ï ð ñ ò ó ô õ ö ø ? ? þ ù ú û ü ý ÿ"));
     ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);
-    Token token = filter.next();
-    assertEquals("u", token.termText);
-
+    assertEquals("Des", filter.next().termText());
+    assertEquals("mot", filter.next().termText());
+    assertEquals("cles", filter.next().termText());
+    assertEquals("A", filter.next().termText());
+    assertEquals("LA", filter.next().termText());
+    assertEquals("CHAINE", filter.next().termText());
+    assertEquals("A", filter.next().termText());
+    assertEquals("A", filter.next().termText());
+    assertEquals("A", filter.next().termText());
+    assertEquals("A", filter.next().termText());
+    assertEquals("A", filter.next().termText());
+    assertEquals("A", filter.next().termText());
+    assertEquals("AE", filter.next().termText());
+    assertEquals("C", filter.next().termText());
+    assertEquals("E", filter.next().termText());
+    assertEquals("E", filter.next().termText());
+    assertEquals("E", filter.next().termText());
+    assertEquals("E", filter.next().termText());
+    assertEquals("I", filter.next().termText());
+    assertEquals("I", filter.next().termText());
+    assertEquals("I", filter.next().termText());
+    assertEquals("I", filter.next().termText());
+    assertEquals("D", filter.next().termText());
+    assertEquals("N", filter.next().termText());
+    assertEquals("O", filter.next().termText());
+    assertEquals("O", filter.next().termText());
+    assertEquals("O", filter.next().termText());
+    assertEquals("O", filter.next().termText());
+    assertEquals("O", filter.next().termText());
+    assertEquals("O", filter.next().termText());
+    assertEquals("OE", filter.next().termText());
+    assertEquals("TH", filter.next().termText());
+    assertEquals("U", filter.next().termText());
+    assertEquals("U", filter.next().termText());
+    assertEquals("U", filter.next().termText());
+    assertEquals("U", filter.next().termText());
+    assertEquals("Y", filter.next().termText());
+    assertEquals("Y", filter.next().termText());
+    assertEquals("a", filter.next().termText());
+    assertEquals("a", filter.next().termText());
+    assertEquals("a", filter.next().termText());
+    assertEquals("a", filter.next().termText());
+    assertEquals("a", filter.next().termText());
+    assertEquals("a", filter.next().termText());
+    assertEquals("ae", filter.next().termText());
+    assertEquals("c", filter.next().termText());
+    assertEquals("e", filter.next().termText());
+    assertEquals("e", filter.next().termText());
+    assertEquals("e", filter.next().termText());
+    assertEquals("e", filter.next().termText());
+    assertEquals("i", filter.next().termText());
+    assertEquals("i", filter.next().termText());
+    assertEquals("i", filter.next().termText());
+    assertEquals("i", filter.next().termText());
+    assertEquals("d", filter.next().termText());
+    assertEquals("n", filter.next().termText());
+    assertEquals("o", filter.next().termText());
+    assertEquals("o", filter.next().termText());
+    assertEquals("o", filter.next().termText());
+    assertEquals("o", filter.next().termText());
+    assertEquals("o", filter.next().termText());
+    assertEquals("o", filter.next().termText());
+    assertEquals("oe", filter.next().termText());
+    assertEquals("ss", filter.next().termText());
+    assertEquals("th", filter.next().termText());
+    assertEquals("u", filter.next().termText());
+    assertEquals("u", filter.next().termText());
+    assertEquals("u", filter.next().termText());
+    assertEquals("u", filter.next().termText());
+    assertEquals("y", filter.next().termText());
+    assertEquals("y", filter.next().termText());
     assertNull(filter.next());
   }
-}
+}
\ No newline at end of file

