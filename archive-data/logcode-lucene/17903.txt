GitDiffStart: c5ae13f39ef5a175a0fd4d77c548cc5f0642bfea | Tue May 18 22:12:17 2010 +0000
diff --git a/solr/src/test/org/apache/solr/request/TestWriterPerf.java b/solr/src/test/org/apache/solr/request/TestWriterPerf.java
index 09c7784..e7da448 100755
--- a/solr/src/test/org/apache/solr/request/TestWriterPerf.java
+++ b/solr/src/test/org/apache/solr/request/TestWriterPerf.java
@@ -25,11 +25,18 @@ import org.apache.solr.client.solrj.ResponseParser;
 import org.apache.solr.client.solrj.impl.BinaryResponseParser;
 import org.apache.solr.client.solrj.impl.XMLResponseParser;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import java.util.ArrayList;
 import java.io.*;
 
 
 public class TestWriterPerf extends AbstractSolrTestCase {
+
+  public static final Logger log 
+    = LoggerFactory.getLogger(TestWriterPerf.class);
+
   public String getSchemaFile() { return "schema11.xml"; }
   public String getSolrConfigFile() { return "solrconfig-functionquery.xml"; }
   public String getCoreName() { return "basic"; }
@@ -131,7 +138,7 @@ public class TestWriterPerf extends AbstractSolrTestCase {
 
     long decodeTime = Math.max(System.currentTimeMillis() - start, 1);
 
-    System.out.println("writer "+writerName+", size="+out.size()+", encodeRate="+(encodeTime==1 ? "N/A":  ""+(encIter*1000L/encodeTime)) + ", decodeRate="+(decodeTime==1 ? "N/A":  ""+(decIter*1000L/decodeTime)) );
+    log.info("writer "+writerName+", size="+out.size()+", encodeRate="+(encodeTime==1 ? "N/A":  ""+(encIter*1000L/encodeTime)) + ", decodeRate="+(decodeTime==1 ? "N/A":  ""+(decIter*1000L/decodeTime)) );
 
     req.close();
   }
diff --git a/solr/src/test/org/apache/solr/update/TestIndexingPerformance.java b/solr/src/test/org/apache/solr/update/TestIndexingPerformance.java
index bf1fca8..5eb3bee 100755
--- a/solr/src/test/org/apache/solr/update/TestIndexingPerformance.java
+++ b/solr/src/test/org/apache/solr/update/TestIndexingPerformance.java
@@ -24,6 +24,9 @@ import org.apache.solr.schema.IndexSchema;
 import org.apache.solr.util.AbstractSolrTestCase;
 import org.apache.solr.common.util.StrUtils;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import java.io.IOException;
 import java.util.Arrays;
 
@@ -34,6 +37,9 @@ import java.util.Arrays;
  */
 public class TestIndexingPerformance extends AbstractSolrTestCase {
 
+  public static final Logger log 
+    = LoggerFactory.getLogger(TestIndexingPerformance.class);
+
   public String getSchemaFile() { return "schema12.xml"; }
   public String getSolrConfigFile() { return "solrconfig_perf.xml"; }
 
@@ -104,8 +110,8 @@ public class TestIndexingPerformance extends AbstractSolrTestCase {
       updateHandler.addDoc(add);
     }
     long end = System.currentTimeMillis();
-    System.out.println("includeDoc="+includeDoc+" doc="+ Arrays.toString(fields));
-    System.out.println("iter="+iter +" time=" + (end-start) + " throughput=" + ((long)iter*1000)/(end-start));
+    log.info("includeDoc="+includeDoc+" doc="+ Arrays.toString(fields));
+    log.info("iter="+iter +" time=" + (end-start) + " throughput=" + ((long)iter*1000)/(end-start));
 
     //discard all the changes
     updateHandler.rollback(new RollbackUpdateCommand());
@@ -113,4 +119,4 @@ public class TestIndexingPerformance extends AbstractSolrTestCase {
     req.close();
   }
 
-}
\ No newline at end of file
+}

