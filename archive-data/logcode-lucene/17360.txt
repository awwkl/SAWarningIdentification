GitDiffStart: 68ff68ca5fb2ae503b1b27884f7ba71bb7b26b8a | Tue Sep 21 14:05:54 2010 +0000
diff --git a/lucene/src/java/org/apache/lucene/search/WildcardQuery.java b/lucene/src/java/org/apache/lucene/search/WildcardQuery.java
index 81ac8f0..e844597 100644
--- a/lucene/src/java/org/apache/lucene/search/WildcardQuery.java
+++ b/lucene/src/java/org/apache/lucene/search/WildcardQuery.java
@@ -54,8 +54,9 @@ public class WildcardQuery extends AutomatonQuery {
   
   /**
    * Convert Lucene wildcard syntax into an automaton.
+   * @lucene.internal
    */
-  static Automaton toAutomaton(Term wildcardquery) {
+  public static Automaton toAutomaton(Term wildcardquery) {
     List<Automaton> automata = new ArrayList<Automaton>();
     
     String wildcardText = wildcardquery.text();
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index dc45c6d..2d5908b 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -487,6 +487,9 @@ Bug Fixes
 
 * SOLR-2083: SpellCheckComponent misreports suggestions when distributed (James Dyer via gsingers)  
 
+* SOLR-2108: Fixed false positives when using wildcard queries on fields with reversed
+  wildcard support. For example, a query of *zemog* would match documents that contain
+  'gomez'.  (Landon Kuhn via Robert Muir)
 
 Other Changes
 ----------------------
diff --git a/solr/src/java/org/apache/solr/search/SolrQueryParser.java b/solr/src/java/org/apache/solr/search/SolrQueryParser.java
index e8f44cf..7f92bd4 100644
--- a/solr/src/java/org/apache/solr/search/SolrQueryParser.java
+++ b/solr/src/java/org/apache/solr/search/SolrQueryParser.java
@@ -25,7 +25,11 @@ import org.apache.lucene.index.Term;
 import org.apache.lucene.queryParser.ParseException;
 import org.apache.lucene.queryParser.QueryParser;
 import org.apache.lucene.search.*;
+import org.apache.lucene.util.ToStringUtils;
 import org.apache.lucene.util.Version;
+import org.apache.lucene.util.automaton.Automaton;
+import org.apache.lucene.util.automaton.BasicAutomata;
+import org.apache.lucene.util.automaton.BasicOperations;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.solr.analysis.*;
 import org.apache.solr.common.SolrException;
@@ -196,13 +200,38 @@ public class SolrQueryParser extends QueryParser {
     // can we use reversed wildcards in this field?
     String type = schema.getFieldType(field).getTypeName();
     ReversedWildcardFilterFactory factory = leadingWildcards.get(type);
-    if (factory != null && factory.shouldReverse(termStr)) {
-      int len = termStr.length();
-      char[] chars = new char[len+1];
-      chars[0] = factory.getMarkerChar();      
-      termStr.getChars(0, len, chars, 1);
-      ReversedWildcardFilter.reverse(chars, 1, len);
-      termStr = new String(chars);
+    if (factory != null) {
+      if (factory.shouldReverse(termStr)) {
+        int len = termStr.length();
+        char[] chars = new char[len+1];
+        chars[0] = factory.getMarkerChar();      
+        termStr.getChars(0, len, chars, 1);
+        ReversedWildcardFilter.reverse(chars, 1, len);
+        termStr = new String(chars);
+      } else { 
+        // reverse wildcardfilter is active: remove false positives
+        Term term = new Term(field, termStr);
+        // fsa representing the query
+        Automaton a = WildcardQuery.toAutomaton(term);
+        // fsa representing false positives (markerChar*)
+        Automaton falsePositives = BasicOperations.concatenate(
+            BasicAutomata.makeChar(factory.getMarkerChar()), 
+            BasicAutomata.makeAnyString());
+        return new AutomatonQuery(term, BasicOperations.minus(a, falsePositives)) {
+          // override toString so its completely transparent
+          @Override
+          public String toString(String field) {
+            StringBuilder buffer = new StringBuilder();
+            if (!getField().equals(field)) {
+              buffer.append(getField());
+              buffer.append(":");
+            }
+            buffer.append(term.text());
+            buffer.append(ToStringUtils.boost(getBoost()));
+            return buffer.toString();
+          }
+        };
+      }
     }
     Query q = super.getWildcardQuery(field, termStr);
     if (q instanceof WildcardQuery) {
diff --git a/solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory.java b/solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory.java
index 00ff0cd..17eb3f6 100644
--- a/solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory.java
+++ b/solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory.java
@@ -139,4 +139,24 @@ public class TestReversedWildcardFilterFactory extends SolrTestCaseJ4 {
     assertEquals(expected, q.toString());
   }
 
+  @Test
+  public void testFalsePositives() throws Exception {
+    // add a doc
+    assertU(adoc("id", "1", "one", "gomez", "two", "gomez", "three", "gomez"));
+    assertU(commit());
+    
+    assertQ("false positive",
+        req("+id:1 +one:*zemog*"),
+        "//result[@numFound=0]");
+    assertQ("false positive",
+        req("+id:1 +two:*zemog*"),
+        "//result[@numFound=0]");
+    assertQ("false positive",
+        req("+id:1 +three:*zemog*"),
+        "//result[@numFound=0]");
+    
+    assertQ("should have matched",
+        req("+id:1 +one:*omez*"),
+        "//result[@numFound=1]");
+  }
 }

