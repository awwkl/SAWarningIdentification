GitDiffStart: 396af9aee6d52f63935238d826586f8e437ffc8a | Thu Jul 16 11:14:59 2015 +0000
diff --git a/solr/core/src/java/org/apache/solr/util/hll/HLL.java b/solr/core/src/java/org/apache/solr/util/hll/HLL.java
index 4210b18..432401b 100644
--- a/solr/core/src/java/org/apache/solr/util/hll/HLL.java
+++ b/solr/core/src/java/org/apache/solr/util/hll/HLL.java
@@ -26,12 +26,12 @@ import com.carrotsearch.hppc.cursors.LongCursor;
 
 /**
  * A probabilistic set of hashed <code>long</code> elements. Useful for computing
- * the approximate cardinality of a stream of data in very small storage.<p/>
+ * the approximate cardinality of a stream of data in very small storage.
  *
  * A modified version of the <a href="http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf">
  * 'HyperLogLog' data structure and algorithm</a> is used, which combines both
  * probabilistic and non-probabilistic techniques to improve the accuracy and
- * storage requirements of the original algorithm.<p/>
+ * storage requirements of the original algorithm.
  *
  * More specifically, initializing and storing a new {@link HLL} will
  * allocate a sentinel value symbolizing the empty set ({@link HLLType#EMPTY}).
@@ -40,7 +40,7 @@ import com.carrotsearch.hppc.cursors.LongCursor;
  * be sacrificed for memory footprint: the values in the sorted list are
  * "promoted" to a "{@link HLLType#SPARSE}" map-based HyperLogLog structure.
  * Finally, when enough registers are set, the map-based HLL will be converted
- * to a bit-packed "{@link HLLType#FULL}" HyperLogLog structure.<p/>
+ * to a bit-packed "{@link HLLType#FULL}" HyperLogLog structure.
  *
  * This data structure is interoperable with the implementations found at:
  * <ul>
@@ -146,23 +146,6 @@ public class HLL implements Cloneable {
      * @param expthresh tunes when the {@link HLLType#EXPLICIT} to
      *        {@link HLLType#SPARSE} promotion occurs,
      *        based on the set's cardinality. Must be at least -1 and at most 18.
-     *        <table>
-     *        <thead><tr><th><code>expthresh</code> value</th><th>Meaning</th></tr></thead>
-     *        <tbody>
-     *        <tr>
-     *            <td>-1</td>
-     *            <td>Promote at whatever cutoff makes sense for optimal memory usage. ('auto' mode)</td>
-     *        </tr>
-     *        <tr>
-     *            <td>0</td>
-     *            <td>Skip <code>EXPLICIT</code> representation in hierarchy.</td>
-     *        </tr>
-     *        <tr>
-     *            <td>1-18</td>
-     *            <td>Promote at 2<sup>expthresh - 1</sup> cardinality</td>
-     *        </tr>
-     *        </tbody>
-     *        </table>
      * @param sparseon Flag indicating if the {@link HLLType#SPARSE}
      *        representation should be used.
      * @param type the type in the promotion hierarchy which this instance should
@@ -228,7 +211,7 @@ public class HLL implements Cloneable {
     }
 
     /**
-     *  Construct an empty HLL with the given {@code log2m} and {@code regwidth}.<p/>
+     *  Construct an empty HLL with the given {@code log2m} and {@code regwidth}.
      *
      *  This is equivalent to calling <code>HLL(log2m, regwidth, -1, true, HLLType.EMPTY)</code>.
      *
@@ -597,7 +580,7 @@ public class HLL implements Cloneable {
     // Clear
     /**
      * Clears the HLL. The HLL will have cardinality zero and will act as if no
-     * elements have been added.<p/>
+     * elements have been added.
      *
      * NOTE: Unlike {@link #addRaw(long)}, <code>clear</code> does NOT handle
      * transitions between {@link HLLType}s - a probabilistic type will remain
@@ -945,7 +928,7 @@ public class HLL implements Cloneable {
 
     /**
      * Deserializes the HLL (in {@link #toBytes(ISchemaVersion)} format) serialized
-     * into <code>bytes</code>.<p/>
+     * into <code>bytes</code>.
      *
      * @param  bytes the serialized bytes of new HLL
      * @return the deserialized HLL. This will never be <code>null</code>.
diff --git a/solr/core/src/java/org/apache/solr/util/hll/IWordDeserializer.java b/solr/core/src/java/org/apache/solr/util/hll/IWordDeserializer.java
index 7a7bf1c..7e37425 100644
--- a/solr/core/src/java/org/apache/solr/util/hll/IWordDeserializer.java
+++ b/solr/core/src/java/org/apache/solr/util/hll/IWordDeserializer.java
@@ -28,7 +28,7 @@ public interface IWordDeserializer {
     long readWord();
 
     /**
-     * Returns the number of words that could be encoded in the sequence.<p/>
+     * Returns the number of words that could be encoded in the sequence.
      *
      * NOTE:  the sequence that was encoded may be shorter than the value this
      *        method returns due to padding issues within bytes. This guarantees

