GitDiffStart: 49dd305f6903086b540d6def2af3d4a2551aa1a3 | Thu Jan 10 22:37:27 2008 +0000
diff --git a/contrib/queries/readme.txt b/contrib/queries/readme.txt
deleted file mode 100644
index b4355cd..0000000
--- a/contrib/queries/readme.txt
+++ /dev/null
@@ -1,27 +0,0 @@
-This module contains a number of filter and query objects that add to core lucene.
-
-The "MoreLikeThis" class from the "similarity" module has been copied into here.
-If people are generally happy with this move then the similarity module can be deleted, or at least a 
-"Moved to queries module..." note left in its place.
-
-==== FuzzyLikeThis  - mixes the behaviour of FuzzyQuery and MoreLikeThis but with special consideration
-of fuzzy scoring factors. This generally produces good results for queries where users may provide details in a number of 
-fields and have no knowledge of boolean query syntax and also want a degree of fuzzy matching. The query is fast because, like
-MoreLikeThis, it optimizes the query to only the most distinguishing terms.
-
-==== BoostingQuery - effectively demotes search results that match a given query. 
-Unlike the "NOT" clause, this still selects documents that contain undesirable terms, 
-but reduces the overall score of docs containing these terms.
-
-
-==== TermsFilter -  Unlike a RangeFilter this can be used for filtering on multiple terms that are not necessarily in 
-a sequence. An example might be a collection of primary keys from a database query result or perhaps 
-a choice of "category" labels picked by the end user.
-
-
-
-
-Mark Harwood
-25/02/2006
-
-
diff --git a/contrib/surround/README.txt b/contrib/surround/README.txt
new file mode 100644
index 0000000..8341aa9
--- /dev/null
+++ b/contrib/surround/README.txt
@@ -0,0 +1,75 @@
+Description of Surround:
+
+Surround consists of operators (uppercase/lowercase):
+
+AND/OR/NOT/nW/nN/() as infix and
+AND/OR/nW/nN        as prefix.
+
+Distance operators W and N have default n=1, max 99.
+Implemented as SpanQuery with slop = (n - 1).
+An example prefix form is:
+
+20n(aa*, bb*, cc*)
+
+The name Surround was chosen because of this prefix form
+and because it uses the newly introduced span queries
+to implement the proximity operators.
+The names of the operators and the prefix and suffix
+forms have been borrowed from various other query
+languages described on the internet.
+
+
+Query terms from the Lucene standard query parser:
+
+field:termtext
+^ boost
+* internal and suffix truncation
+? one character
+
+
+Some examples:
+
+aa
+aa and bb
+aa and bb or cc        same effect as:  (aa and bb) or cc
+aa NOT bb NOT cc       same effect as:  (aa NOT bb) NOT cc
+
+and(aa,bb,cc)          aa and bb and cc
+99w(aa,bb,cc)          ordered span query with slop 98
+99n(aa,bb,cc)          unordered span query with slop 98
+
+20n(aa*,bb*)
+3w(a?a or bb?, cc+)
+
+title: text: aa
+title : text : aa or bb
+title:text: aa not bb
+title:aa not text:bb
+
+cc 3w dd               infix: dual.
+
+cc N dd N ee           same effect as:   (cc N dd) N ee
+
+text: aa 3d bb
+
+For examples on using the Surround language, see the
+test packages.
+
+
+Development status
+
+Not tested: multiple fields, internally mapped to OR queries,
+not compared to Lucene's MultipleFieldQuery.
+
+* suffix truncation is implemented very similar to Lucene's PrefixQuery.
+
+Wildcards (? and internal *) are implemented with regular expressions
+allow further variations. A reimplementation using
+WildCardTermEnum (correct name?) should be no problem.
+
+Warnings about missing terms are sent to System.out, this might
+be replaced by another stream.
+
+BooleanQueryTest.TestCollector uses a results checking method that should
+be replaced by the checking method from Lucene's TestBasics.java.
+
diff --git a/contrib/surround/surround.txt b/contrib/surround/surround.txt
deleted file mode 100644
index 8341aa9..0000000
--- a/contrib/surround/surround.txt
+++ /dev/null
@@ -1,75 +0,0 @@
-Description of Surround:
-
-Surround consists of operators (uppercase/lowercase):
-
-AND/OR/NOT/nW/nN/() as infix and
-AND/OR/nW/nN        as prefix.
-
-Distance operators W and N have default n=1, max 99.
-Implemented as SpanQuery with slop = (n - 1).
-An example prefix form is:
-
-20n(aa*, bb*, cc*)
-
-The name Surround was chosen because of this prefix form
-and because it uses the newly introduced span queries
-to implement the proximity operators.
-The names of the operators and the prefix and suffix
-forms have been borrowed from various other query
-languages described on the internet.
-
-
-Query terms from the Lucene standard query parser:
-
-field:termtext
-^ boost
-* internal and suffix truncation
-? one character
-
-
-Some examples:
-
-aa
-aa and bb
-aa and bb or cc        same effect as:  (aa and bb) or cc
-aa NOT bb NOT cc       same effect as:  (aa NOT bb) NOT cc
-
-and(aa,bb,cc)          aa and bb and cc
-99w(aa,bb,cc)          ordered span query with slop 98
-99n(aa,bb,cc)          unordered span query with slop 98
-
-20n(aa*,bb*)
-3w(a?a or bb?, cc+)
-
-title: text: aa
-title : text : aa or bb
-title:text: aa not bb
-title:aa not text:bb
-
-cc 3w dd               infix: dual.
-
-cc N dd N ee           same effect as:   (cc N dd) N ee
-
-text: aa 3d bb
-
-For examples on using the Surround language, see the
-test packages.
-
-
-Development status
-
-Not tested: multiple fields, internally mapped to OR queries,
-not compared to Lucene's MultipleFieldQuery.
-
-* suffix truncation is implemented very similar to Lucene's PrefixQuery.
-
-Wildcards (? and internal *) are implemented with regular expressions
-allow further variations. A reimplementation using
-WildCardTermEnum (correct name?) should be no problem.
-
-Warnings about missing terms are sent to System.out, this might
-be replaced by another stream.
-
-BooleanQueryTest.TestCollector uses a results checking method that should
-be replaced by the checking method from Lucene's TestBasics.java.
-
diff --git a/contrib/xml-query-parser/readme.htm b/contrib/xml-query-parser/readme.htm
deleted file mode 100644
index 7352ca2..0000000
--- a/contrib/xml-query-parser/readme.htm
+++ /dev/null
@@ -1,35 +0,0 @@
-<html>
-	<body>
-		<h1>XML based query syntax
-		</h1>
-		<p>
-			This module contains:
-			<ul>
-				<li>a modular Lucene Query Parser where queries are expressed as XML</li>
-				<li>JUnit test</li>
-				<li>DTD schemas and <a href="docs/index.html">generated documentation</a> </li>
-				<li>Example XML queries</li>
-				<li>Test index (subset of Reuters 21578)</li>
-			</ul>
-		</p>
-		<p>
-			The original motivation for creating this package was outlined and discussed <a href="http://marc.theaimsgroup.com/?l=lucene-dev&m=113355526731460&w=2">here</a>.
-		</p>
-		<p>
-			Parser support includes:
-			<ul>
-				<li>"Span" queries</li>
-				<li>Simple caching for filters</li>
-				<li>"Like this" queries</li>
-				<li>Boolean, Term, and UserInput (parsed with existing query parser)</li>
-				<li>BoostingQuery - a class that can downgrade scores for hits on
-				certain terms rather than the hard-line approach taken by BooleanClause.Occurs.MUST_NOT</li>
-				<li>FilteredQuery, RangeFilter, DuplicateFilter and "TermsFilter" for non-sequential terms</li>
-				<li>"FuzzyLikeThis" a new query which is a cross between "LikeThis" and "fuzzy" but with
-					better scoring of fuzzy terms than standard fuzzy queries</li>
-				<li>A modular design with expandable support for new query/filter types</li>
-			</ul>
-		</p>
-		<p>This code is dependent on the "queries" contrib module although the "CoreParser" can be compiled with just Lucene core if required</p>
-	</body>
-</html>
\ No newline at end of file

