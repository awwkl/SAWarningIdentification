GitDiffStart: 2350513c894ff19d01959f4fdf786aaf39629a49 | Sun Sep 21 13:45:33 2003 +0000
diff --git a/src/test/org/apache/lucene/search/TestPositionIncrement.java b/src/test/org/apache/lucene/search/TestPositionIncrement.java
index b79e127..9147aaf 100644
--- a/src/test/org/apache/lucene/search/TestPositionIncrement.java
+++ b/src/test/org/apache/lucene/search/TestPositionIncrement.java
@@ -63,44 +63,43 @@ import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.Token;
 import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 
 import java.io.Reader;
 import java.io.IOException;
+import java.io.StringReader;
 
 import junit.framework.TestCase;
 
- /**
-  * Term position unit test.
-  *
-  * @author Doug Cutting
-  * @version $Revision$
-  */
+/**
+ * Term position unit test.
+ *
+ * @author Doug Cutting
+ * @version $Revision$
+ */
 public class TestPositionIncrement extends TestCase {
-  public TestPositionIncrement(String name) {
-    super(name);
-  }
-  
 
-  public static void test() throws Exception {
+  public void testSetPosition() throws Exception {
     Analyzer analyzer = new Analyzer() {
-        public TokenStream tokenStream(String fieldName, Reader reader) {
-          return new TokenStream() {
-              private final String[] TOKENS = {"1", "2", "3", "4", "5"};
-              private final int[] INCREMENTS = {1, 2,  1,    0,   1};
-              private int i = 0;
-              public Token next() throws IOException {
-                if (i == TOKENS.length)
-                  return null;
-                Token t = new Token(TOKENS[i], i, i);
-                t.setPositionIncrement(INCREMENTS[i]);
-                i++;
-                return t;
-              }
-            };
-        }
-      };
+      public TokenStream tokenStream(String fieldName, Reader reader) {
+        return new TokenStream() {
+          private final String[] TOKENS = {"1", "2", "3", "4", "5"};
+          private final int[] INCREMENTS = {1, 2, 1, 0, 1};
+          private int i = 0;
+
+          public Token next() throws IOException {
+            if (i == TOKENS.length)
+              return null;
+            Token t = new Token(TOKENS[i], i, i);
+            t.setPositionIncrement(INCREMENTS[i]);
+            i++;
+            return t;
+          }
+        };
+      }
+    };
     RAMDirectory store = new RAMDirectory();
     IndexWriter writer = new IndexWriter(store, analyzer, true);
     Document d = new Document();
@@ -114,46 +113,61 @@ public class TestPositionIncrement extends TestCase {
     Hits hits;
 
     q = new PhraseQuery();
-    q.add(new Term("field","1"));
-    q.add(new Term("field","2"));
+    q.add(new Term("field", "1"));
+    q.add(new Term("field", "2"));
     hits = searcher.search(q);
     assertEquals(0, hits.length());
 
     q = new PhraseQuery();
-    q.add(new Term("field","2"));
-    q.add(new Term("field","3"));
+    q.add(new Term("field", "2"));
+    q.add(new Term("field", "3"));
     hits = searcher.search(q);
     assertEquals(1, hits.length());
 
     q = new PhraseQuery();
-    q.add(new Term("field","3"));
-    q.add(new Term("field","4"));
+    q.add(new Term("field", "3"));
+    q.add(new Term("field", "4"));
     hits = searcher.search(q);
     assertEquals(0, hits.length());
 
     q = new PhraseQuery();
-    q.add(new Term("field","2"));
-    q.add(new Term("field","4"));
+    q.add(new Term("field", "2"));
+    q.add(new Term("field", "4"));
     hits = searcher.search(q);
     assertEquals(1, hits.length());
 
     q = new PhraseQuery();
-    q.add(new Term("field","3"));
-    q.add(new Term("field","5"));
+    q.add(new Term("field", "3"));
+    q.add(new Term("field", "5"));
     hits = searcher.search(q);
     assertEquals(1, hits.length());
 
     q = new PhraseQuery();
-    q.add(new Term("field","4"));
-    q.add(new Term("field","5"));
+    q.add(new Term("field", "4"));
+    q.add(new Term("field", "5"));
     hits = searcher.search(q);
     assertEquals(1, hits.length());
 
     q = new PhraseQuery();
-    q.add(new Term("field","2"));
-    q.add(new Term("field","5"));
+    q.add(new Term("field", "2"));
+    q.add(new Term("field", "5"));
     hits = searcher.search(q);
     assertEquals(0, hits.length());
+  }
+
+  /**
+   * Basic analyzer behavior should be to keep sequential terms in one
+   * increment from one another.
+   */
+  public void testIncrementingPositions() throws Exception {
+    Analyzer analyzer = new WhitespaceAnalyzer();
+    TokenStream ts = analyzer.tokenStream("field",
+                                new StringReader("one two three four five"));
 
+    while (true) {
+      Token token = ts.next();
+      if (token == null) break;
+      assertEquals(token.termText(), 1, token.getPositionIncrement());
+    }
   }
 }

