GitDiffStart: ea611beacc8a85fc95891a7562c8ef8b3eb7c6fc | Thu Mar 29 18:58:57 2012 +0000
diff --git a/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java b/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
index 76d6e53..5708d17 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
@@ -35,6 +35,7 @@ import org.apache.lucene.util.AttributeImpl;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.LineFileDocs;
 import org.apache.lucene.util._TestUtil;
+import org.apache.lucene.util.Rethrow;
 
 /** 
  * Base class for all Lucene unit tests that use TokenStreams. 
@@ -335,7 +336,7 @@ public abstract class BaseTokenStreamTestCase extends LuceneTestCase {
         // to verify reproducability/reuse: hopefully this would catch thread hazards.
         checkRandomData(random, a, iterations, maxWordLength, random.nextBoolean(), simple);
       } catch (IOException e) {
-        throw new RuntimeException(e);
+        Rethrow.rethrow(e);
       }
     }
   };
@@ -395,7 +396,7 @@ public abstract class BaseTokenStreamTestCase extends LuceneTestCase {
         checkAnalysisConsistency(random, a, useCharFilter, text);
       } catch (Throwable t) {
         System.err.println("TEST FAIL: useCharFilter=" + useCharFilter + " text='" + text + "'");
-        throw new RuntimeException(t);
+        Rethrow.rethrow(t);
       }
     }
   }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/Rethrow.java b/lucene/test-framework/src/java/org/apache/lucene/util/Rethrow.java
new file mode 100644
index 0000000..eceb4c2
--- /dev/null
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/Rethrow.java
@@ -0,0 +1,46 @@
+package org.apache.lucene.util;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Sneaky: rethrowing checked exceptions as unchecked
+ * ones. Eh, it is sometimes useful...
+ *
+ * <p>Pulled from http://www.javapuzzlers.com (I
+ * think?).</p>
+ */
+
+public final class Rethrow {
+  /**
+   * Classy puzzler to rethrow any checked exception as an unchecked one.
+   */
+  @SuppressWarnings("all")
+  private static class Rethrower<T extends Throwable> {
+    private void rethrow(Throwable t) throws T {
+      throw (T) t;
+    }
+  }
+  
+  /**
+   * Rethrows <code>t</code> (identical object).
+   */
+  public static void rethrow(Throwable t) {
+    new Rethrower<Error>().rethrow(t);
+  }
+}
+

