GitDiffStart: 411a2fe607095595f2de418c7aca3462a319239e | Wed Oct 29 17:21:59 2008 +0000
diff --git a/src/java/org/apache/solr/common/util/ConcurrentLRUCache.java b/src/java/org/apache/solr/common/util/ConcurrentLRUCache.java
index f7f44f8..3b92d9d 100644
--- a/src/java/org/apache/solr/common/util/ConcurrentLRUCache.java
+++ b/src/java/org/apache/solr/common/util/ConcurrentLRUCache.java
@@ -13,7 +13,9 @@ import java.util.concurrent.locks.ReentrantLock;
  * contention and synchronization overhead to utilize multiple CPU cores more effectively.
  *
  * Note that the implementation does not follow a true LRU (least-recently-used) eviction
- * strategy. Instead it strives to 
+ * strategy. Instead it strives to remove least recently used items but when the initial
+ * cleanup does not remove enough items to reach the 'acceptableWaterMark' limit, it can
+ * remove more items forcefully regardless of access order.
  *
  * @version $Id$
  * @since solr 1.4

