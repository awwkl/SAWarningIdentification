GitDiffStart: c22fb58a9d30920f270a062d0db93acbbcd6f196 | Thu Mar 8 09:56:41 2012 +0000
diff --git a/modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.java b/modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.java
index e746c18..b97a83a 100644
--- a/modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.java
+++ b/modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.java
@@ -19,9 +19,11 @@ package org.apache.lucene.search.grouping.dv;
 
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.DocValues;
-import org.apache.lucene.index.DocValues.Type; // javadocs
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.search.*;
+import org.apache.lucene.index.DocValues.Type;
+import org.apache.lucene.search.FieldComparator;
+import org.apache.lucene.search.Scorer;
+import org.apache.lucene.search.Sort;
+import org.apache.lucene.search.SortField;
 import org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector;
 import org.apache.lucene.util.BytesRef;
 
@@ -37,7 +39,7 @@ import java.util.Map;
  * @lucene.experimental
  */
 //TODO - (MvG): Add more optimized implementations
-public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsCollector.GroupHead> extends AbstractAllGroupHeadsCollector<GH> {
+public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsCollector.GroupHead<?>> extends AbstractAllGroupHeadsCollector<GH> {
 
   final String groupField;
   final boolean diskResident;
@@ -65,7 +67,7 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
    * @return an <code>AbstractAllGroupHeadsCollector</code> instance based on the supplied arguments
    * @throws IOException If I/O related errors occur
    */
-  public static AbstractAllGroupHeadsCollector create(String groupField, Sort sortWithinGroup, DocValues.Type type, boolean diskResident) throws IOException {
+  public static AbstractAllGroupHeadsCollector<?> create(String groupField, Sort sortWithinGroup, DocValues.Type type, boolean diskResident) throws IOException {
     switch (type) {
       case VAR_INTS:
       case FIXED_INTS_8:
@@ -89,16 +91,16 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
     }
   }
 
-  static class GroupHead extends AbstractAllGroupHeadsCollector.GroupHead<Comparable> {
+  static class GroupHead extends AbstractAllGroupHeadsCollector.GroupHead<Comparable<?>> {
 
-    final FieldComparator[] comparators;
+    final FieldComparator<?>[] comparators;
     AtomicReaderContext readerContext;
     Scorer scorer;
 
-    GroupHead(Comparable groupValue, Sort sort, int doc, AtomicReaderContext readerContext, Scorer scorer) throws IOException {
+    GroupHead(Comparable<?> groupValue, Sort sort, int doc, AtomicReaderContext readerContext, Scorer scorer) throws IOException {
       super(groupValue, doc + readerContext.docBase);
       final SortField[] sortFields = sort.getSort();
-      comparators = new FieldComparator[sortFields.length];
+      comparators = new FieldComparator<?>[sortFields.length];
       for (int i = 0; i < sortFields.length; i++) {
         comparators[i] = sortFields[i].getComparator(1, i).setNextReader(readerContext);
         comparators[i].setScorer(scorer);
@@ -115,7 +117,7 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
     }
 
     public void updateDocHead(int doc) throws IOException {
-      for (FieldComparator comparator : comparators) {
+      for (FieldComparator<?> comparator : comparators) {
         comparator.copy(0, doc);
         comparator.setBottom(0);
       }
@@ -156,12 +158,12 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
   static abstract class GeneralAllGroupHeadsCollector extends DVAllGroupHeadsCollector<DVAllGroupHeadsCollector.GroupHead> {
 
     private final Sort sortWithinGroup;
-    private final Map<Comparable, GroupHead> groups;
+    private final Map<Comparable<?>, GroupHead> groups;
 
     GeneralAllGroupHeadsCollector(String groupField, DocValues.Type valueType, Sort sortWithinGroup, boolean diskResident) throws IOException {
       super(groupField, valueType, sortWithinGroup.getSort().length, diskResident);
       this.sortWithinGroup = sortWithinGroup;
-      groups = new HashMap<Comparable, GroupHead>();
+      groups = new HashMap<Comparable<?>, GroupHead>();
 
       final SortField[] sortFields = sortWithinGroup.getSort();
       for (int i = 0; i < sortFields.length; i++) {
@@ -170,7 +172,7 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
     }
 
     protected void retrieveGroupHeadAndAddIfNotExist(int doc) throws IOException {
-      final Comparable groupValue = getGroupValue(doc);
+      final Comparable<?> groupValue = getGroupValue(doc);
       GroupHead groupHead = groups.get(groupValue);
       if (groupHead == null) {
         groupHead = new GroupHead(groupValue, sortWithinGroup, doc, readerContext, scorer);
@@ -182,9 +184,9 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
       temporalResult.groupHead = groupHead;
     }
 
-    protected abstract Comparable getGroupValue(int doc);
+    protected abstract Comparable<?> getGroupValue(int doc);
 
-    protected abstract Comparable duplicate(Comparable value);
+    protected abstract Comparable<?> duplicate(Comparable<?> value);
 
     protected Collection<GroupHead> getCollectedGroupHeads() {
       return groups.values();
@@ -204,7 +206,7 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
       this.scorer = scorer;
       for (GroupHead groupHead : groups.values()) {
         groupHead.scorer = scorer;
-        for (FieldComparator comparator : groupHead.comparators) {
+        for (FieldComparator<?> comparator : groupHead.comparators) {
           comparator.setScorer(scorer);
         }
       }
@@ -218,11 +220,11 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
         super(groupField, valueType, sortWithinGroup, diskResident);
       }
 
-      protected Comparable getGroupValue(int doc) {
+      protected Comparable<?> getGroupValue(int doc) {
         return source.getBytes(doc, scratchBytesRef);
       }
 
-      protected Comparable duplicate(Comparable value) {
+      protected Comparable<?> duplicate(Comparable<?> value) {
         return BytesRef.deepCopyOf((BytesRef) value);
       }
 
@@ -244,11 +246,11 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
         super(groupField, valueType, sortWithinGroup, diskResident);
       }
 
-      protected Comparable getGroupValue(int doc) {
+      protected Comparable<?> getGroupValue(int doc) {
         return source.getBytes(doc, scratchBytesRef);
       }
 
-      protected Comparable duplicate(Comparable value) {
+      protected Comparable<?> duplicate(Comparable<?> value) {
         return BytesRef.deepCopyOf((BytesRef) value);
       }
 
@@ -266,11 +268,11 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
         super(groupField, valueType, sortWithinGroup, diskResident);
       }
 
-      protected Comparable getGroupValue(int doc) {
+      protected Comparable<?> getGroupValue(int doc) {
         return source.getInt(doc);
       }
 
-      protected Comparable duplicate(Comparable value) {
+      protected Comparable<?> duplicate(Comparable<?> value) {
         return value;
       }
 
@@ -287,11 +289,11 @@ public abstract class DVAllGroupHeadsCollector<GH extends AbstractAllGroupHeadsC
         super(groupField, valueType, sortWithinGroup, diskResident);
       }
 
-      protected Comparable getGroupValue(int doc) {
+      protected Comparable<?> getGroupValue(int doc) {
         return source.getFloat(doc);
       }
 
-      protected Comparable duplicate(Comparable value) {
+      protected Comparable<?> duplicate(Comparable<?> value) {
         return value;
       }
 
diff --git a/modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector.java b/modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector.java
index 28cf37e..5e2c5d3 100644
--- a/modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector.java
+++ b/modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector.java
@@ -52,7 +52,7 @@ public abstract class DVAllGroupsCollector<GROUP_VALUE_TYPE> extends AbstractAll
    *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!
    * @return the most optimal all groups collector implementation for grouping by {@link DocValues}
    */
-  public static DVAllGroupsCollector create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {
+  public static DVAllGroupsCollector<?> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {
     switch (type) {
       case VAR_INTS:
       case FIXED_INTS_8:
@@ -87,7 +87,7 @@ public abstract class DVAllGroupsCollector<GROUP_VALUE_TYPE> extends AbstractAll
    * @param diskResident Wether the values to group by should be disk resident
    * @return the most optimal all groups collector implementation for grouping by {@link DocValues}
    */
-  public static DVAllGroupsCollector create(String groupField, DocValues.Type type, boolean diskResident) {
+  public static DVAllGroupsCollector<?> create(String groupField, DocValues.Type type, boolean diskResident) {
     return create(groupField, type, diskResident, DEFAULT_INITIAL_SIZE);
   }
 

