GitDiffStart: 2754d4d87c7357a2350b04ecd05484020d84eb83 | Tue Aug 19 17:29:51 2008 +0000
diff --git a/client/java/solrj/CHANGES.txt b/client/java/solrj/CHANGES.txt
index 25af78d..7120e15 100644
--- a/client/java/solrj/CHANGES.txt
+++ b/client/java/solrj/CHANGES.txt
@@ -43,6 +43,8 @@ Changes in runtime behavior
  5. SOLR-476: CommonsHttpSolrServer can set the ResponseParser on a per 
     request basis.  (Grant Ingersoll, ryan)
 
+ 6. SOLR-430: Added support for reading SpellCheckComponent's responses. (shalin)
+
 Bug Fixes
 
 Other Changes
diff --git a/client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse.java b/client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse.java
index 21270a4..430bbc2 100644
--- a/client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse.java
+++ b/client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse.java
@@ -44,6 +44,7 @@ public class QueryResponse extends SolrResponseBase
   private NamedList<Object> _facetInfo = null;
   private NamedList<Object> _debugInfo = null;
   private NamedList<Object> _highlightingInfo = null;
+  private NamedList<Object> _spellInfo = null;
 
   // Facet stuff
   private Map<String,Integer> _facetQuery = null;
@@ -53,6 +54,9 @@ public class QueryResponse extends SolrResponseBase
 
   // Highlight Info
   private Map<String,Map<String,List<String>>> _highlighting = null;
+
+  // SpellCheck Response
+  private SpellCheckResponse _spellResponse = null;
   
   // Debug Info
   private Map<String,Object> _debugMap = null;
@@ -102,9 +106,17 @@ public class QueryResponse extends SolrResponseBase
         _highlightingInfo = (NamedList<Object>) res.getVal( i );
         extractHighlightingInfo( _highlightingInfo );
       }
+      else if ( "spellcheck".equals( n ) )  {
+        _spellInfo = (NamedList<Object>) res.getVal( i );
+        extractSpellCheckInfo( _spellInfo );
+      }
     }
   }
-    
+
+  private void extractSpellCheckInfo(NamedList<Object> spellInfo) {
+    _spellResponse = new SpellCheckResponse(spellInfo);
+  }
+
   private void extractDebugInfo( NamedList<Object> debug )
   {
     _debugMap = new LinkedHashMap<String, Object>(); // keep the order
@@ -234,6 +246,10 @@ public class QueryResponse extends SolrResponseBase
     return _highlighting;
   }
 
+  public SpellCheckResponse getSpellCheckResponse() {
+    return _spellResponse;
+  }
+
   public List<FacetField> getFacetFields() {
     return _facetFields;
   }
diff --git a/client/java/solrj/src/org/apache/solr/client/solrj/response/SpellCheckResponse.java b/client/java/solrj/src/org/apache/solr/client/solrj/response/SpellCheckResponse.java
new file mode 100644
index 0000000..94abfd4
--- /dev/null
+++ b/client/java/solrj/src/org/apache/solr/client/solrj/response/SpellCheckResponse.java
@@ -0,0 +1,135 @@
+package org.apache.solr.client.solrj.response;
+
+import org.apache.solr.common.util.NamedList;
+import org.apache.solr.common.util.SimpleOrderedMap;
+
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Encapsulates responses from SpellCheckComponent
+ *
+ * @version $Id$
+ * @since solr 1.3
+ */
+public class SpellCheckResponse {
+  private boolean correctlySpelled;
+  private String collation;
+  private List<Suggestion> suggestions = new ArrayList<Suggestion>();
+  Map<String, Suggestion> suggestionMap = new LinkedHashMap<String, Suggestion>();
+
+  public SpellCheckResponse(NamedList<Object> spellInfo) {
+    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get("suggestions");
+    if (sugg == null) {
+      correctlySpelled = true;
+      return;
+    }
+    for (int i = 0; i < sugg.size(); i++) {
+      String n = sugg.getName(i);
+      if ("correctlySpelled".equals(n)) {
+        correctlySpelled = (Boolean) sugg.getVal(i);
+      } else if ("collation".equals(n)) {
+        collation = (String) sugg.getVal(i);
+      } else {
+        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));
+        suggestionMap.put(n, s);
+        suggestions.add(s);
+      }
+    }
+  }
+
+  public boolean isCorrectlySpelled() {
+    return correctlySpelled;
+  }
+
+  public List<Suggestion> getSuggestions() {
+    return suggestions;
+  }
+
+  public Map<String, Suggestion> getSuggestionMap() {
+    return suggestionMap;
+  }
+
+  public Suggestion getSuggestion(String token) {
+    return suggestionMap.get(token);
+  }
+
+  public String getFirstSuggestion(String token) {
+    Suggestion s = suggestionMap.get(token);
+    if (s != null) {
+      return s.getSuggestions().isEmpty() ? null : s.getSuggestions().get(0);
+    }
+    return null;
+  }
+
+  public String getCollatedResult() {
+    return collation;
+  }
+
+  public static class Suggestion {
+    private String token;
+    private int numFound;
+    private int startOffset;
+    private int endOffset;
+    private int originalFrequency;
+    private List<String> suggestions = new ArrayList<String>();
+    private List<Integer> suggestionFrequencies = new ArrayList<Integer>();
+
+    public Suggestion(String token, NamedList<Object> suggestion) {
+      this.token = token;
+      for (int i = 0; i < suggestion.size(); i++) {
+        String n = suggestion.getName(i);
+
+        if ("numFound".equals(n)) {
+          numFound = (Integer) suggestion.getVal(i);
+        } else if ("startOffset".equals(n)) {
+          startOffset = (Integer) suggestion.getVal(i);
+        } else if ("endOffset".equals(n)) {
+          endOffset = (Integer) suggestion.getVal(i);
+        } else if ("origFreq".equals(n)) {
+          originalFrequency = (Integer) suggestion.getVal(i);
+        } else if ("suggestion".equals(n)) {
+          Object o = suggestion.getVal(i);
+          if (o instanceof List) {
+            List<String> list = (List<String>) o;
+            suggestions.addAll(list);
+          } else if (o instanceof SimpleOrderedMap) {
+            SimpleOrderedMap map = (SimpleOrderedMap) o;
+            suggestions.add((String) map.get("word"));
+            suggestionFrequencies.add((Integer) map.get("frequency"));
+          }
+        }
+      }
+    }
+
+    public String getToken() {
+      return token;
+    }
+
+    public int getNumFound() {
+      return numFound;
+    }
+
+    public int getStartOffset() {
+      return startOffset;
+    }
+
+    public int getEndOffset() {
+      return endOffset;
+    }
+
+    public int getOriginalFrequency() {
+      return originalFrequency;
+    }
+
+    public List<String> getSuggestions() {
+      return suggestions;
+    }
+
+    public List<Integer> getSuggestionFrequencies() {
+      return suggestionFrequencies;
+    }
+  }
+}
diff --git a/client/java/solrj/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java b/client/java/solrj/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java
new file mode 100644
index 0000000..d51b071
--- /dev/null
+++ b/client/java/solrj/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java
@@ -0,0 +1,91 @@
+package org.apache.solr.client.solrj.response;
+
+import junit.framework.Assert;
+import org.apache.solr.client.solrj.SolrExampleTestBase;
+import org.apache.solr.client.solrj.SolrQuery;
+import org.apache.solr.client.solrj.SolrServer;
+import org.apache.solr.client.solrj.embedded.JettySolrRunner;
+import org.apache.solr.client.solrj.impl.CommonsHttpSolrServer;
+import org.apache.solr.client.solrj.request.QueryRequest;
+import org.apache.solr.common.SolrInputDocument;
+import org.apache.solr.common.params.CommonParams;
+import org.apache.solr.common.params.SpellingParams;
+
+/**
+ * Test for SpellCheckComponent's response in Solrj
+ *
+ * @version $Id$
+ * @since solr 1.3
+ */
+public class TestSpellCheckResponse extends SolrExampleTestBase {
+
+  SolrServer server;
+  JettySolrRunner jetty;
+
+  int port = 0;
+  static final String context = "/example";
+
+  public void setUp() throws Exception {
+    super.setUp();
+
+    jetty = new JettySolrRunner(context, 0);
+    jetty.start();
+    port = jetty.getLocalPort();
+    System.out.println("Assigned Port: " + port);
+    server = this.createNewSolrServer();
+  }
+
+  public void testSpellCheckResponse() throws Exception {
+    SolrInputDocument doc = new SolrInputDocument();
+    doc.setField("id", "AAA");
+    doc.setField("name", "Samsung");
+    server.add(doc);
+    server.commit(true, true);
+
+    SolrQuery query = new SolrQuery("*:*");
+    query.set(CommonParams.QT, "/spellCheckCompRH");
+    query.set("spellcheck", true);
+    query.set(SpellingParams.SPELLCHECK_Q, "samsang");
+    query.set(SpellingParams.SPELLCHECK_BUILD, true);
+    QueryRequest request = new QueryRequest(query);
+    SpellCheckResponse response = request.process(server).getSpellCheckResponse();
+    Assert.assertEquals("Incorrect spelling results", "samsung", response.getFirstSuggestion("samsang"));
+  }
+
+  public void testSpellCheckResponse_Extended() throws Exception {
+    SolrInputDocument doc = new SolrInputDocument();
+    doc.setField("id", "AAA");
+    doc.setField("name", "Samsung");
+    server.add(doc);
+    server.commit(true, true);
+
+    SolrQuery query = new SolrQuery("*:*");
+    query.set(CommonParams.QT, "/spellCheckCompRH");
+    query.set("spellcheck", true);
+    query.set(SpellingParams.SPELLCHECK_Q, "samsang");
+    query.set(SpellingParams.SPELLCHECK_BUILD, true);
+    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);
+    QueryRequest request = new QueryRequest(query);
+    SpellCheckResponse response = request.process(server).getSpellCheckResponse();
+    Assert.assertEquals("Incorrect spelling results", "samsung", response.getFirstSuggestion("samsang"));
+  }
+
+  protected SolrServer getSolrServer() {
+    return server;
+  }
+
+  protected SolrServer createNewSolrServer() {
+    try {
+      // setup the server...
+      String url = "http://localhost:" + port + context;
+      CommonsHttpSolrServer s = new CommonsHttpSolrServer(url);
+      s.setConnectionTimeout(100); // 1/10th sec
+      s.setDefaultMaxConnectionsPerHost(100);
+      s.setMaxTotalConnections(100);
+      return s;
+    }
+    catch (Exception ex) {
+      throw new RuntimeException(ex);
+    }
+  }
+}

