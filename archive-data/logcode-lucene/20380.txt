GitDiffStart: 49a83c536e6be4a8fa9adafce0af0ec06df4ee4e | Thu Apr 16 08:01:10 2009 +0000
diff --git a/contrib/dataimporthandler/CHANGES.txt b/contrib/dataimporthandler/CHANGES.txt
index 64527bd..042c403 100644
--- a/contrib/dataimporthandler/CHANGES.txt
+++ b/contrib/dataimporthandler/CHANGES.txt
@@ -20,6 +20,10 @@ The formatDate evaluator's syntax has been changed. The new syntax is formatDate
 For example, formatDate(x.date, 'yyyy-MM-dd'). In the old syntax, the date string was written without a single-quotes.
 The old syntax has been deprecated and will be removed in 1.5, until then, using the old syntax will log a warning.
 
+The Context API has been changed in a non back-compatible way. In particular, the Context.currentProcess() method
+now returns a String describing the type of the current import process instead of an int. Similarily, the public
+constants in Context viz. FULL_DUMP, DELTA_DUMP and FIND_DELTA are changed to a String type. See SOLR-969 for details.
+
 Detailed Change List
 ----------------------
 
@@ -245,6 +249,10 @@ Other
 7. SOLR-1087: Deprecate 'where' attribute in CachedSqlEntityProcessor in favor of cacheKey and cacheLookup.
               (Noble Paul via shalin)
 
+8. SOLR-969:  Change the FULL_DUMP, DELTA_DUMP, FIND_DELTA constants in Context to String.
+              Change Context.currentProcess() to return a string instead of an integer.
+              (Kay Kay, Noble Paul, shalin)
+
 ================== Release 1.3.0 20080915 ==================
 
 Status
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTest.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTest.java
index 8e6b2f8..257624d 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTest.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTest.java
@@ -79,7 +79,7 @@ public abstract class AbstractDataImportHandlerTest extends
   @SuppressWarnings("unchecked")
   public static TestContext getContext(DataConfig.Entity parentEntity,
                                    VariableResolverImpl resolver, DataSource parentDataSource,
-                                   int currProcess, final List<Map<String, String>> entityFields,
+                                   String currProcess, final List<Map<String, String>> entityFields,
                                    final Map<String, String> entityAttrs) {
     if (resolver == null) resolver = new VariableResolverImpl();
     final Context delegate = new ContextImpl(parentEntity, resolver,
@@ -139,7 +139,7 @@ public abstract class AbstractDataImportHandlerTest extends
       return false;
     }
 
-    public int currentProcess() {
+    public String currentProcess() {
       return delegate.currentProcess();
     }
 
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/Context.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/Context.java
index e4314e4..eb11ad1 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/Context.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/Context.java
@@ -39,7 +39,7 @@ import java.util.Map;
  * @since solr 1.3
  */
 public abstract class Context {
-  public static final int FULL_DUMP = 1, DELTA_DUMP = 2, FIND_DELTA = 3;
+  public static final String FULL_DUMP = "FULL_DUMP", DELTA_DUMP = "DELTA_DUMP", FIND_DELTA = "FIND_DELTA";
 
   /**
    * An object stored in entity scope is valid only for the current entity for the current document only.
@@ -160,11 +160,11 @@ public abstract class Context {
   public abstract boolean isRootEntity();
 
   /**
-   * Returns the current process FULL_DUMP =1, DELTA_DUMP=2, FIND_DELTA=3
+   * Returns the current process FULL_DUMP, DELTA_DUMP, FIND_DELTA
    *
-   * @return the code of the current running process
+   * @return the type of the current running process
    */
-  public abstract int currentProcess();
+  public abstract String currentProcess();
 
   /**
    * Exposing the actual SolrCore to the components
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java
index 3aa5352..83256a2 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java
@@ -42,7 +42,7 @@ public class ContextImpl extends Context {
 
   private DataSource ds;
 
-  private int currProcess;
+  private String currProcess;
 
   private Map<String, Object> requestParams;
 
@@ -53,7 +53,7 @@ public class ContextImpl extends Context {
   DocBuilder docBuilder;
 
   public ContextImpl(DataConfig.Entity entity, VariableResolverImpl resolver,
-                     DataSource ds, int currProcess,
+                     DataSource ds, String currProcess,
                      Map<String, Object> global, ContextImpl parentContext, DocBuilder docBuilder) {
     this.entity = entity;
     this.resolver = resolver;
@@ -101,7 +101,7 @@ public class ContextImpl extends Context {
     return entity.isDocRoot;
   }
 
-  public int currentProcess() {
+  public String currentProcess() {
     return currProcess;
   }
 
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java
index c49c721..6d691a4 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java
@@ -100,7 +100,7 @@ public class DocBuilder {
   private void invokeEventListener(String className) {
     try {
       EventListener listener = (EventListener) loadClass(className, dataImporter.getCore()).newInstance();
-      int currentProcess = -1;
+      String currentProcess;
       if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {
         currentProcess = Context.DELTA_DUMP;
       } else {
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor.java
index a735e56..3ed6792 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor.java
@@ -45,8 +45,7 @@ public class TestCachedSqlEntityProcessor {
     VariableResolverImpl vr = new VariableResolverImpl();
 
     vr.addNamespace("x", AbstractDataImportHandlerTest.createMap("id", 1));
-    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, 0,
-            fields, entityAttrs);
+    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);
     List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();
     rows.add(AbstractDataImportHandlerTest.createMap("id", 1, "desc", "one"));
     rows.add(AbstractDataImportHandlerTest.createMap("id", 1, "desc",
@@ -88,8 +87,7 @@ public class TestCachedSqlEntityProcessor {
     VariableResolverImpl vr = new VariableResolverImpl();
 
     vr.addNamespace("x", AbstractDataImportHandlerTest.createMap("id", 1));
-    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, 0,
-            fields, entityAttrs);
+    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);
     List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();
     rows.add(AbstractDataImportHandlerTest.createMap("id", 1, "desc", "one"));
     rows.add(AbstractDataImportHandlerTest.createMap("id", 1, "desc",
@@ -132,8 +130,7 @@ public class TestCachedSqlEntityProcessor {
     VariableResolverImpl vr = new VariableResolverImpl();
 
     vr.addNamespace("x", AbstractDataImportHandlerTest.createMap("id", 1));
-    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, 0,
-            fields, entityAttrs);
+    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);
     List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();
     rows.add(AbstractDataImportHandlerTest.createMap("id", 1, "desc", "one"));
     rows.add(AbstractDataImportHandlerTest.createMap("id", 1, "desc",
@@ -200,10 +197,7 @@ public class TestCachedSqlEntityProcessor {
     VariableResolverImpl vr = new VariableResolverImpl();
     Map xNamespace = AbstractDataImportHandlerTest.createMap("id", 0);
     vr.addNamespace("x", xNamespace);
-    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, 0,
-            fields, entityAttrs);
-
-
+    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);
     doWhereTest(q, context, ds, xNamespace);
   }
 
@@ -213,16 +207,12 @@ public class TestCachedSqlEntityProcessor {
     fields.add(AbstractDataImportHandlerTest.createMap("column", "id"));
     fields.add(AbstractDataImportHandlerTest.createMap("column", "desc"));
     String q = "select * from x";
-    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(
-            "query", q, "where", "id=x.id");    
+    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap("query", q, "where", "id=x.id");
     MockDataSource ds = new MockDataSource();
     VariableResolverImpl vr = new VariableResolverImpl();
     Map xNamespace = AbstractDataImportHandlerTest.createMap("id", 0);
     vr.addNamespace("x", xNamespace);
-    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, 0,
-            fields, entityAttrs);
-
-
+    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);
     doWhereTest(q, context, ds, xNamespace);
   }
 
@@ -233,10 +223,8 @@ public class TestCachedSqlEntityProcessor {
     rows.add(AbstractDataImportHandlerTest.createMap("id", 2, "desc",
             "another two"));
     rows.add(AbstractDataImportHandlerTest.createMap("id", 3, "desc", "three"));
-    rows.add(AbstractDataImportHandlerTest.createMap("id", 3, "desc",
-            "another three"));
-    rows.add(AbstractDataImportHandlerTest.createMap("id", 3, "desc",
-            "another another three"));
+    rows.add(AbstractDataImportHandlerTest.createMap("id", 3, "desc", "another three"));
+    rows.add(AbstractDataImportHandlerTest.createMap("id", 3, "desc", "another another three"));
     MockDataSource.setIterator(q, rows.iterator());
     CachedSqlEntityProcessor csep = new CachedSqlEntityProcessor();
     csep.init(context);
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDateFormatTransformer.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDateFormatTransformer.java
index 49fe246..7ebd2ef 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDateFormatTransformer.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDateFormatTransformer.java
@@ -52,7 +52,7 @@ public class TestDateFormatTransformer {
     resolver.addNamespace("e", row);
 
     Context context = AbstractDataImportHandlerTest.getContext(null, resolver,
-            null, 0, fields, null);
+            null, Context.FULL_DUMP, fields, null);
     new DateFormatTransformer().transformRow(row, context);
     Assert.assertEquals(now, row.get("dateAdded"));
   }
@@ -81,7 +81,7 @@ public class TestDateFormatTransformer {
     resolver.addNamespace("e", row);
 
     Context context = AbstractDataImportHandlerTest.getContext(null, resolver,
-            null, 0, fields, null);
+            null, Context.FULL_DUMP, fields, null);
     new DateFormatTransformer().transformRow(row, context);
     List output = new ArrayList();
     output.add(now1);
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEntityProcessorBase.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEntityProcessorBase.java
index 1d40883..c14a8d2 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEntityProcessorBase.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEntityProcessorBase.java
@@ -43,7 +43,8 @@ public class TestEntityProcessorBase {
     fields.add(TestRegexTransformer.getField("A", null, null, null, null));
     fields.add(TestRegexTransformer.getField("B", null, null, null, null));
 
-    Context context = AbstractDataImportHandlerTest.getContext(null, null, new MockDataSource(), 0, fields, entity);
+    Context context = AbstractDataImportHandlerTest.getContext(null, null, new MockDataSource(), Context.FULL_DUMP,
+            fields, entity);
     Map<String, Object> src = new HashMap<String, Object>();
     src.put("A", "NA");
     src.put("B", "NA");
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag.java
index 814a650..6f221fb 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag.java
@@ -97,7 +97,7 @@ public class TestEvaluatorBag {
   @Test
   public void testEscapeSolrQueryFunction() {
     final VariableResolverImpl resolver = new VariableResolverImpl();
-    ContextImpl context = new ContextImpl(null, resolver, null, 0, Collections.EMPTY_MAP, null, null);
+    ContextImpl context = new ContextImpl(null, resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null, null);
     resolver.context = context;
     Map m= new HashMap();
     m.put("query","c:t");
@@ -115,7 +115,7 @@ public class TestEvaluatorBag {
   @Test
   public void testGetDateFormatEvaluator() {
     Evaluator dateFormatEval = EvaluatorBag.getDateFormatEvaluator();
-    resolver.context = new ContextImpl(null, resolver, null, 0, Collections.EMPTY_MAP, null, null);
+    resolver.context = new ContextImpl(null, resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null, null);
 
     assertEquals(new SimpleDateFormat("yyyy-MM-dd HH:mm").format(new Date()),
             dateFormatEval.evaluate("'NOW','yyyy-MM-dd HH:mm'", resolver.context));
@@ -129,7 +129,7 @@ public class TestEvaluatorBag {
   }
 
   private void runTests(Map<String, String> tests, Evaluator evaluator) {
-    ContextImpl ctx = new ContextImpl(null, resolver, null, 0, Collections.EMPTY_MAP, null, null);
+    ContextImpl ctx = new ContextImpl(null, resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null, null);
     resolver.context = ctx;
     for (Map.Entry<String, String> entry : tests.entrySet()) {
       Map<String, Object> values = new HashMap<String, Object>();
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor.java
index f2da214..84fee85 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor.java
@@ -51,7 +51,7 @@ public class TestFileListEntityProcessor {
             FileListEntityProcessor.FILE_NAME, "xml$",
             FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath());
     Context c = AbstractDataImportHandlerTest.getContext(null,
-            new VariableResolverImpl(), null, 0, Collections.EMPTY_LIST, attrs);
+            new VariableResolverImpl(), null, Context.FULL_DUMP, Collections.EMPTY_LIST, attrs);
     FileListEntityProcessor fileListEntityProcessor = new FileListEntityProcessor();
     fileListEntityProcessor.init(c);
     List<String> fList = new ArrayList<String>();
@@ -78,7 +78,7 @@ public class TestFileListEntityProcessor {
             FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),
             FileListEntityProcessor.OLDER_THAN, "'NOW'");
     Context c = AbstractDataImportHandlerTest.getContext(null,
-            new VariableResolverImpl(), null, 0, Collections.EMPTY_LIST, attrs);
+            new VariableResolverImpl(), null, Context.FULL_DUMP, Collections.EMPTY_LIST, attrs);
     FileListEntityProcessor fileListEntityProcessor = new FileListEntityProcessor();
     fileListEntityProcessor.init(c);
     List<String> fList = new ArrayList<String>();
@@ -95,7 +95,7 @@ public class TestFileListEntityProcessor {
             FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),
             FileListEntityProcessor.NEWER_THAN, "'NOW-2HOURS'");
     c = AbstractDataImportHandlerTest.getContext(null,
-            new VariableResolverImpl(), null, 0, Collections.EMPTY_LIST, attrs);
+            new VariableResolverImpl(), null, Context.FULL_DUMP, Collections.EMPTY_LIST, attrs);
     fileListEntityProcessor.init(c);
     fList.clear();
     while (true) {
@@ -125,7 +125,7 @@ public class TestFileListEntityProcessor {
             FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),
             FileListEntityProcessor.RECURSIVE, "true");
     Context c = AbstractDataImportHandlerTest.getContext(null,
-            new VariableResolverImpl(), null, 0, Collections.EMPTY_LIST, attrs);
+            new VariableResolverImpl(), null, Context.FULL_DUMP, Collections.EMPTY_LIST, attrs);
     FileListEntityProcessor fileListEntityProcessor = new FileListEntityProcessor();
     fileListEntityProcessor.init(c);
     List<String> fList = new ArrayList<String>();
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource.java
index 95d499d..ae9f699 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource.java
@@ -57,7 +57,7 @@ public class TestJdbcDataSource {
     flds.add(f);
 
     Context c = AbstractDataImportHandlerTest.getContext(null, null,
-            dataSource, 0, flds, null);
+            dataSource, Context.FULL_DUMP, flds, null);
     dataSource.init(c, p);
     Iterator<Map<String, Object>> i = dataSource
             .getData("select make,model,year,msrp,trim_id from atrimlisting where make='Acura'");
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestNumberFormatTransformer.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestNumberFormatTransformer.java
index 73f1728..09d877d 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestNumberFormatTransformer.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestNumberFormatTransformer.java
@@ -46,8 +46,7 @@ public class TestNumberFormatTransformer {
             NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER));
     l.add(AbstractDataImportHandlerTest.createMap("column", "localizedNum",
             NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER, NumberFormatTransformer.LOCALE, "de-DE"));
-    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, 0,
-            l, null);
+    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, Context.FULL_DUMP, l, null);
     Map m = AbstractDataImportHandlerTest.createMap("num", "123" + GROUPING_SEP + "567", "localizedNum", "123" + GERMAN_GROUPING_SEP + "567");
     new NumberFormatTransformer().transformRow(m, c);
     Assert.assertEquals(new Long(123567), m.get("num"));
@@ -72,8 +71,7 @@ public class TestNumberFormatTransformer {
     VariableResolverImpl resolver = new VariableResolverImpl();
     resolver.addNamespace("e", row);
 
-    Context context = AbstractDataImportHandlerTest.getContext(null, resolver,
-            null, 0, fields, null);
+    Context context = AbstractDataImportHandlerTest.getContext(null, resolver, null, Context.FULL_DUMP, fields, null);
     new NumberFormatTransformer().transformRow(row, context);
 
     List output = new ArrayList();
@@ -91,8 +89,7 @@ public class TestNumberFormatTransformer {
     List l = new ArrayList();
     l.add(AbstractDataImportHandlerTest.createMap("column", "num",
             NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER));
-    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, 0,
-            l, null);
+    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, Context.FULL_DUMP, l, null);
     Map m = AbstractDataImportHandlerTest.createMap("num", "123" + GROUPING_SEP + "5a67");
     new NumberFormatTransformer().transformRow(m, c);
   }
@@ -103,8 +100,7 @@ public class TestNumberFormatTransformer {
     List l = new ArrayList();
     l.add(AbstractDataImportHandlerTest.createMap("column", "num",
             NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER));
-    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, 0,
-            l, null);
+    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, Context.FULL_DUMP, l, null);
     Map m = AbstractDataImportHandlerTest.createMap("num", "123" + GROUPING_SEP + "567b");
     new NumberFormatTransformer().transformRow(m, c);
   }
@@ -115,8 +111,7 @@ public class TestNumberFormatTransformer {
     List l = new ArrayList();
     l.add(AbstractDataImportHandlerTest.createMap("column", "num",
             NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.CURRENCY));
-    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, 0,
-            l, null);
+    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, Context.FULL_DUMP, l, null);
     Map m = AbstractDataImportHandlerTest.createMap("num", "123" + GROUPING_SEP + "567b");
     new NumberFormatTransformer().transformRow(m, c);
   }
@@ -127,8 +122,7 @@ public class TestNumberFormatTransformer {
     List l = new ArrayList();
     l.add(AbstractDataImportHandlerTest.createMap("column", "num",
             NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.PERCENT));
-    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, 0,
-            l, null);
+    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, Context.FULL_DUMP, l, null);
     Map m = AbstractDataImportHandlerTest.createMap("num", "123" + GROUPING_SEP + "5a67");
     new NumberFormatTransformer().transformRow(m, c);
   }
@@ -139,8 +133,7 @@ public class TestNumberFormatTransformer {
     List l = new ArrayList();
     l.add(AbstractDataImportHandlerTest.createMap("column", "num",
             NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.CURRENCY));
-    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, 0,
-            l, null);
+    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, Context.FULL_DUMP, l, null);
     Map m = AbstractDataImportHandlerTest.createMap(
             "num", "123" + DECIMAL_SEP + "456" + DECIMAL_SEP + "789");
     new NumberFormatTransformer().transformRow(m, c);
@@ -152,8 +145,7 @@ public class TestNumberFormatTransformer {
     List l = new ArrayList();
     l.add(AbstractDataImportHandlerTest.createMap("column", "num",
             NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER));
-    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, 0,
-            l, null);
+    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, Context.FULL_DUMP, l, null);
     Map m = AbstractDataImportHandlerTest.createMap(
             "num", "123" + DECIMAL_SEP + "456" + DECIMAL_SEP + "789");
     new NumberFormatTransformer().transformRow(m, c);
@@ -165,8 +157,7 @@ public class TestNumberFormatTransformer {
     List l = new ArrayList();
     l.add(AbstractDataImportHandlerTest.createMap("column", "num",
             NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER));
-    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, 0,
-            l, null);
+    Context c = AbstractDataImportHandlerTest.getContext(null, null, null, Context.FULL_DUMP, l, null);
     Map m = AbstractDataImportHandlerTest.createMap(
             "num", "123" + GROUPING_SEP + GROUPING_SEP + "789");
     new NumberFormatTransformer().transformRow(m, c);
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer.java
index 342d466..6e45d93 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer.java
@@ -40,7 +40,7 @@ public class TestRegexTransformer {
     List<Map<String, String>> fields = new ArrayList<Map<String, String>>();
     // <field column="col1" sourceColName="a" splitBy="," />
     fields.add(getField("col1", "string", null, "a", ","));
-    Context context = AbstractDataImportHandlerTest.getContext(null, null, null, 0, fields, null);
+    Context context = AbstractDataImportHandlerTest.getContext(null, null, null, Context.FULL_DUMP, fields, null);
 
     Map<String, Object> src = new HashMap<String, Object>();
     src.put("a", "a,bb,cc,d");
@@ -60,7 +60,7 @@ public class TestRegexTransformer {
     m.put(GROUP_NAMES,",firstName,lastName");
     m.put(REGEX,"(\\w*) (\\w*) (\\w*)");
     fields.add(m);
-    Context context = AbstractDataImportHandlerTest.getContext(null, null, null, 0, fields, null);
+    Context context = AbstractDataImportHandlerTest.getContext(null, null, null, Context.FULL_DUMP, fields, null);
     Map<String, Object> src = new HashMap<String, Object>();
     src.put("fullName", "Mr Noble Paul");
 
@@ -89,7 +89,7 @@ public class TestRegexTransformer {
     fld.put("replaceWith", "''");
     fields.add(fld);
     Context context = AbstractDataImportHandlerTest.getContext(null, null,
-            null, 0, fields, null);
+            null, Context.FULL_DUMP, fields, null);
 
     Map<String, Object> src = new HashMap<String, Object>();
     String s = "D'souza";
@@ -118,7 +118,7 @@ public class TestRegexTransformer {
     VariableResolverImpl resolver = new VariableResolverImpl();
     resolver.addNamespace("e", row);
     Map<String, String> eAttrs = AbstractDataImportHandlerTest.createMap("name", "e");
-    Context context = AbstractDataImportHandlerTest.getContext(null, resolver, null, 0, fields, eAttrs);
+    Context context = AbstractDataImportHandlerTest.getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);
 
     Map<String, Object> result = new RegexTransformer().transformRow(row, context);
     Assert.assertEquals(4, result.size());
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer.java
index 0fa6bf4..60b0d3d 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer.java
@@ -66,7 +66,7 @@ public class TestScriptTransformer {
     entity.put("transformer", "script:" + funcName);
 
     AbstractDataImportHandlerTest.TestContext context = AbstractDataImportHandlerTest.getContext(null, null, null,
-            0, fields, entity);
+            Context.FULL_DUMP, fields, entity);
     context.script = script;
     context.scriptlang = "JavaScript";
     return context;
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestTemplateTransformer.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestTemplateTransformer.java
index a23ef36..78b7b09 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestTemplateTransformer.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestTemplateTransformer.java
@@ -58,7 +58,7 @@ public class TestTemplateTransformer {
             "name", "e");
 
     Context context = AbstractDataImportHandlerTest.getContext(null, resolver,
-            null, 0, fields, entityAttrs);
+            null, Context.FULL_DUMP, fields, entityAttrs);
     new TemplateTransformer().transformRow(row, context);
     Assert.assertEquals("Mangar, Shalin Shekhar", row.get("name"));
     Assert.assertEquals("Mr Mangar, Shalin Shekhar", row.get("mrname"));
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver.java
index 662bca4..27fd218 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver.java
@@ -68,7 +68,7 @@ public class TestVariableResolver {
   @Test
   public void dateNamespaceWithValue() {
     VariableResolverImpl vri = new VariableResolverImpl();
-    ContextImpl context = new ContextImpl(null,vri, null, 0,Collections.EMPTY_MAP, null,null);
+    ContextImpl context = new ContextImpl(null,vri, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null,null);
     vri.context = context;
     vri.addNamespace("dataimporter.functions", EvaluatorBag
             .getFunctionsNamespace(Collections.EMPTY_LIST, null));
@@ -83,7 +83,7 @@ public class TestVariableResolver {
   @Test
   public void dateNamespaceWithExpr() {
     VariableResolverImpl vri = new VariableResolverImpl();
-    ContextImpl context = new ContextImpl(null,vri, null, 0,Collections.EMPTY_MAP, null,null);
+    ContextImpl context = new ContextImpl(null,vri, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null,null);
     vri.context = context;
     vri.addNamespace("dataimporter.functions", EvaluatorBag
             .getFunctionsNamespace(Collections.EMPTY_LIST,null));
@@ -114,7 +114,7 @@ public class TestVariableResolver {
   @Test
   public void testFunctionNamespace1() {
     final VariableResolverImpl resolver = new VariableResolverImpl();
-    ContextImpl context = new ContextImpl(null,resolver, null, 0,Collections.EMPTY_MAP, null,null);
+    ContextImpl context = new ContextImpl(null,resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null,null);
     resolver.context = context;
     final List<Map<String ,String >> l = new ArrayList<Map<String, String>>();
     Map<String ,String > m = new HashMap<String, String>();
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor.java
index ca079ed..91963e8 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor.java
@@ -52,7 +52,7 @@ public class TestXPathEntityProcessor {
     fields.add(createMap("column", "artist", "xpath", "/catalog/cd/artist"));
     fields.add(createMap("column", "year", "xpath", "/catalog/cd/year"));
     Context c = AbstractDataImportHandlerTest.getContext(null,
-            new VariableResolverImpl(), getDataSource(cdData), 0, fields, entityAttrs);
+            new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);
     XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();
     xPathEntityProcessor.init(c);
     List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
@@ -75,7 +75,7 @@ public class TestXPathEntityProcessor {
     List fields = new ArrayList();
     fields.add(createMap("column", "a", "xpath", "/root/a", DataImporter.MULTI_VALUED, "true"));
     Context c = AbstractDataImportHandlerTest.getContext(null,
-            new VariableResolverImpl(), getDataSource(testXml), 0, fields, entityAttrs);
+            new VariableResolverImpl(), getDataSource(testXml), Context.FULL_DUMP, fields, entityAttrs);
     XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();
     xPathEntityProcessor.init(c);
     List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
@@ -97,7 +97,7 @@ public class TestXPathEntityProcessor {
     fields.add(createMap("column", "artist", "xpath", "/catalog/cd/artist"));
     fields.add(createMap("column", "year", "xpath", "/catalog/cd/year"));
     Context c = AbstractDataImportHandlerTest.getContext(null,
-        new VariableResolverImpl(), getDataSource(cdData), 0, fields, entityAttrs);
+        new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);
     XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();
     xPathEntityProcessor.init(c);
     List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
@@ -125,7 +125,7 @@ public class TestXPathEntityProcessor {
             XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, "true", "xsl", ""
             + new File(tmpdir, "x.xsl").getAbsolutePath(), "url", "cd.xml");
     Context c = AbstractDataImportHandlerTest.getContext(null,
-            new VariableResolverImpl(), getDataSource(cdData), 0, null, entityAttrs);
+            new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);
     XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();
     xPathEntityProcessor.init(c);
     List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();

