GitDiffStart: 52bffef75bcd92881883d4fe3450bbf8fbfb2d20 | Tue Aug 25 18:08:45 2009 +0000
diff --git a/src/demo/org/apache/lucene/demo/DeleteFiles.java b/src/demo/org/apache/lucene/demo/DeleteFiles.java
index 99593bc..a5588eb 100644
--- a/src/demo/org/apache/lucene/demo/DeleteFiles.java
+++ b/src/demo/org/apache/lucene/demo/DeleteFiles.java
@@ -40,7 +40,7 @@ public class DeleteFiles {
     }
     try {
       Directory directory = FSDirectory.open(new File("index"));
-      IndexReader reader = IndexReader.open(directory);
+      IndexReader reader = IndexReader.open(directory, false); // we don't want read-only because we are about to delete
 
       Term term = new Term("path", args[0]);
       int deleted = reader.deleteDocuments(term);
diff --git a/src/demo/org/apache/lucene/demo/IndexFiles.java b/src/demo/org/apache/lucene/demo/IndexFiles.java
index ebe498b..6b17541 100644
--- a/src/demo/org/apache/lucene/demo/IndexFiles.java
+++ b/src/demo/org/apache/lucene/demo/IndexFiles.java
@@ -19,6 +19,8 @@ package org.apache.lucene.demo;
 
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.util.Version;
 
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -53,7 +55,7 @@ public class IndexFiles {
     
     Date start = new Date();
     try {
-      IndexWriter writer = new IndexWriter(INDEX_DIR, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);
+      IndexWriter writer = new IndexWriter(FSDirectory.open(INDEX_DIR), new StandardAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);
       System.out.println("Indexing to directory '" +INDEX_DIR+ "'...");
       indexDocs(writer, docDir);
       System.out.println("Optimizing...");
diff --git a/src/demo/org/apache/lucene/demo/IndexHTML.java b/src/demo/org/apache/lucene/demo/IndexHTML.java
index f3950ab..359c087 100644
--- a/src/demo/org/apache/lucene/demo/IndexHTML.java
+++ b/src/demo/org/apache/lucene/demo/IndexHTML.java
@@ -23,6 +23,9 @@ import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermEnum;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.util.Version;
+
 import java.io.File;
 import java.util.Date;
 import java.util.Arrays;
@@ -68,7 +71,7 @@ public class IndexHTML {
         deleting = true;
         indexDocs(root, index, create);
       }
-      writer = new IndexWriter(index, new StandardAnalyzer(), create, 
+      writer = new IndexWriter(FSDirectory.open(new File(index)), new StandardAnalyzer(Version.LUCENE_CURRENT), create, 
                                new IndexWriter.MaxFieldLength(1000000));
       indexDocs(root, index, create);		  // add new docs
 
@@ -97,7 +100,7 @@ public class IndexHTML {
        throws Exception {
     if (!create) {				  // incrementally update
 
-      reader = IndexReader.open(index);		  // open existing index
+      reader = IndexReader.open(FSDirectory.open(new File(index)), false);		  // open existing index
       uidIter = reader.terms(new Term("uid", "")); // init uid iterator
 
       indexDocs(file);
diff --git a/src/demo/org/apache/lucene/demo/SearchFiles.java b/src/demo/org/apache/lucene/demo/SearchFiles.java
index 8ab7f83..6af6b3c 100644
--- a/src/demo/org/apache/lucene/demo/SearchFiles.java
+++ b/src/demo/org/apache/lucene/demo/SearchFiles.java
@@ -18,6 +18,7 @@ package org.apache.lucene.demo;
  */
 
 import java.io.BufferedReader;
+import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -29,12 +30,15 @@ import org.apache.lucene.document.Document;
 import org.apache.lucene.index.FilterIndexReader;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.queryParser.QueryParser;
-import org.apache.lucene.search.HitCollector;
+import org.apache.lucene.search.Collector;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.Searcher;
 import org.apache.lucene.search.TopScoreDocCollector;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.util.Version;
 
 /** Simple command-line based search demo. */
 public class SearchFiles {
@@ -109,13 +113,13 @@ public class SearchFiles {
       }
     }
     
-    IndexReader reader = IndexReader.open(index);
+    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true
 
     if (normsField != null)
       reader = new OneNormsReader(reader, normsField);
 
     Searcher searcher = new IndexSearcher(reader);
-    Analyzer analyzer = new StandardAnalyzer();
+    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);
 
     BufferedReader in = null;
     if (queries != null) {
@@ -167,11 +171,26 @@ public class SearchFiles {
    *  be processed, regardless of their relevance.
    */
   public static void doStreamingSearch(final Searcher searcher, Query query) throws IOException {
-    HitCollector streamingHitCollector = new HitCollector() {
+    Collector streamingHitCollector = new Collector() {
+      private Scorer scorer;
+      private int docBase;
       
       // simply print docId and score of every matching document
-      public void collect(int doc, float score) {
-        System.out.println("doc="+doc+" score="+score);
+      public void collect(int doc) throws IOException {
+        System.out.println("doc=" + doc + docBase + " score=" + scorer.score());
+      }
+
+      public boolean acceptsDocsOutOfOrder() {
+        return true;
+      }
+
+      public void setNextReader(IndexReader reader, int docBase)
+          throws IOException {
+        this.docBase = docBase;
+      }
+
+      public void setScorer(Scorer scorer) throws IOException {
+        this.scorer = scorer;
       }
       
     };

