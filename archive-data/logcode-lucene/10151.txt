GitDiffStart: 679dbf00b9338e7a22988e9757e01dccb4c1c4a3 | Sun Dec 16 16:08:36 2012 +0000
diff --git a/solr/core/src/java/org/apache/solr/update/UpdateHandler.java b/solr/core/src/java/org/apache/solr/update/UpdateHandler.java
index 21288da..51af2d0 100644
--- a/solr/core/src/java/org/apache/solr/update/UpdateHandler.java
+++ b/solr/core/src/java/org/apache/solr/update/UpdateHandler.java
@@ -87,8 +87,8 @@ public abstract class UpdateHandler implements SolrInfoMBean {
   // not thread safe - for startup
   protected void clearLog() throws IOException {
     if (ulog != null) {
-      ulog.close(false);
-      FileUtils.deleteDirectory(ulog.getLogDir());
+      ulog.close(false, true);
+      //FileUtils.deleteDirectory(ulog.getLogDir());
       initLog();
     }
   }
diff --git a/solr/core/src/java/org/apache/solr/update/UpdateLog.java b/solr/core/src/java/org/apache/solr/update/UpdateLog.java
index 5ae47db..8e2b562 100644
--- a/solr/core/src/java/org/apache/solr/update/UpdateLog.java
+++ b/solr/core/src/java/org/apache/solr/update/UpdateLog.java
@@ -813,6 +813,10 @@ public class UpdateLog implements PluginInfoInitialized {
   }
   
   public void close(boolean committed) {
+    close(committed, false);
+  }
+  
+  public void close(boolean committed, boolean deleteOnClose) {
     synchronized (this) {
       try {
         recoveryExecutor.shutdownNow();
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.java b/solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.java
index 9afa3d1..ac83e4f 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/request/CoreAdminRequest.java
@@ -477,11 +477,21 @@ public class CoreAdminRequest extends SolrRequest
     return CoreAdminRequest.createCore(name, instanceDir, server, null, null);
   }
   
-  public static CoreAdminResponse createCore( String name, String instanceDir, SolrServer server, String configFile, String schemaFile ) throws SolrServerException, IOException 
+  public static CoreAdminResponse createCore( String name, String instanceDir, SolrServer server, String configFile, String schemaFile ) throws SolrServerException, IOException { 
+    return createCore(name, instanceDir, server, configFile, schemaFile, null, null);
+  }
+  
+  public static CoreAdminResponse createCore( String name, String instanceDir, SolrServer server, String configFile, String schemaFile, String dataDir, String tlogDir ) throws SolrServerException, IOException 
   {
     CoreAdminRequest.Create req = new CoreAdminRequest.Create();
     req.setCoreName( name );
     req.setInstanceDir(instanceDir);
+    if (dataDir != null) {
+      req.setDataDir(dataDir);
+    }
+    if (tlogDir != null) {
+      req.setUlogDir(tlogDir);
+    }
     if(configFile != null){
       req.setConfigName(configFile);
     }
diff --git a/solr/solrj/src/test-files/solrj/solr/shared/solr.xml b/solr/solrj/src/test-files/solrj/solr/shared/solr.xml
index a42fe16..38a8d87 100644
--- a/solr/solrj/src/test-files/solrj/solr/shared/solr.xml
+++ b/solr/solrj/src/test-files/solrj/solr/shared/solr.xml
@@ -32,13 +32,13 @@
   -->
   <cores adminPath="/admin/cores" defaultCoreName="core0" host="127.0.0.1" hostPort="${hostPort:8983}" hostContext="${hostContext:}" zkClientTimeout="8000">
     <core name="collection1" instanceDir="." />
-    <core name="core0" instanceDir="${theInstanceDir:./}" collection="${collection:acollection}">
+    <core name="core0" instanceDir="${theInstanceDir:./}" dataDir="${dataDir1}" collection="${collection:acollection}">
       <property name="version" value="3.5"/>
       <property name="l10n" value="EN"/>
       <property name="ctlField" value="core0"/>
       <property name="comment" value="This is a sample with a sys prop ${sysprop:default}"/>
     </core>
-    <core name="core1" instanceDir="./">
+    <core name="core1" instanceDir="./" dataDir="${dataDir2}">
       <property name="version" value="2.4"/>
       <property name="l10n" value="FR"/>
       <property name="ctlField" value="core1"/>
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/AbstractEmbeddedSolrServerTestCase.java b/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/AbstractEmbeddedSolrServerTestCase.java
index 55a81bd..43e9fda 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/AbstractEmbeddedSolrServerTestCase.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/AbstractEmbeddedSolrServerTestCase.java
@@ -38,9 +38,11 @@ public abstract class AbstractEmbeddedSolrServerTestCase extends LuceneTestCase
   protected CoreContainer cores = null;
   protected File tempDir;
 
-  private void createTempDir() {
-    tempDir = new File(TEMP_DIR, "solrtest-" + getTestClass().getSimpleName() + "-" + System.currentTimeMillis());
-    tempDir.mkdirs();
+  protected void createTempDir() {
+    if (tempDir == null) {
+      tempDir = new File(TEMP_DIR, "solrtest-" + getTestClass().getSimpleName() + "-" + System.currentTimeMillis());
+      tempDir.mkdirs();
+    }
   }
 
   @Override
@@ -52,6 +54,11 @@ public abstract class AbstractEmbeddedSolrServerTestCase extends LuceneTestCase
 
     //The index is always stored within a temporary directory
     createTempDir();
+    
+    File dataDir = new File(tempDir,"data1");
+    File dataDir2 = new File(tempDir,"data2");
+    System.setProperty("dataDir1", dataDir.getAbsolutePath());
+    System.setProperty("dataDir2", dataDir2.getAbsolutePath());
     System.setProperty("tempDir", tempDir.getAbsolutePath());
 
     cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), getSolrXml());
@@ -65,6 +72,9 @@ public abstract class AbstractEmbeddedSolrServerTestCase extends LuceneTestCase
     if (cores != null)
       cores.shutdown();
 
+    System.clearProperty("dataDir1");
+    System.clearProperty("dataDir2");
+    
     deleteAdditionalFiles();
 
     File dataDir = new File(tempDir,"data");
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties.java b/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties.java
index daa6d60..10084b2 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties.java
@@ -32,6 +32,8 @@ import org.apache.solr.client.solrj.response.CoreAdminResponse;
 import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.core.CoreContainer;
 import org.apache.solr.util.FileUtils;
+import org.junit.After;
+import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.RuleChain;
@@ -71,6 +73,18 @@ public class TestSolrProperties extends AbstractEmbeddedSolrServerTestCase {
   private static final XPathFactory xpathFactory = XPathFactory.newInstance();
 
   @Override
+  @Before
+  public void setUp() throws Exception {
+    super.setUp();
+  }
+  
+  @Override
+  @After
+  public void tearDown() throws Exception {
+   super.tearDown(); 
+  }
+  
+  @Override
   protected File getSolrXml() throws Exception {
     //This test writes on the directory where the solr.xml is located. Better to copy the solr.xml to
     //the temporary directory where we store the index
@@ -196,6 +210,7 @@ public class TestSolrProperties extends AbstractEmbeddedSolrServerTestCase {
     }
     
     CoreAdminRequest.renameCore(name, "renamed_core", coreadmin);
+    
     mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());
     
 //    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));
@@ -215,8 +230,13 @@ public class TestSolrProperties extends AbstractEmbeddedSolrServerTestCase {
     }
     
     coreadmin = getRenamedSolrAdmin();
-    CoreAdminRequest.createCore("newCore", SOLR_HOME.getAbsolutePath(), coreadmin);
-    
+    File dataDir = new File(tempDir,"data3");
+    File tlogDir = new File(tempDir,"tlog3");
+
+    CoreAdminRequest.createCore("newCore", SOLR_HOME.getAbsolutePath(),
+        coreadmin, null, null, dataDir.getAbsolutePath(),
+        tlogDir.getAbsolutePath());
+
 //    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));
 //    solrPersistXml = IOUtils.toString(fis);
 //    System.out.println("xml:" + solrPersistXml);
@@ -240,9 +260,14 @@ public class TestSolrProperties extends AbstractEmbeddedSolrServerTestCase {
     // test reload and parse
     cores.shutdown();
     
+//   fis = new FileInputStream(new File(getSolrXml().getParent(),
+//   SOLR_PERSIST_XML));
+//   String solrPersistXml = IOUtils.toString(fis);
+//   System.out.println("xml:" + solrPersistXml);
+//   fis.close();
+    
     cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));
  
-    
     mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());
     
 //     fis = new FileInputStream(new File(solrXml.getParent(),

