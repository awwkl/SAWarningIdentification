GitDiffStart: c03b74d1bdf3d52d9a49f34bc48eeb1da472ac12 | Wed Jan 23 18:42:38 2013 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesFormat.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesFormat.java
index a7dfaf2..4080635 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesFormat.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesFormat.java
@@ -54,4 +54,14 @@ public class Lucene40DocValuesFormat extends DocValuesFormat {
   
   static final byte VAR_INTS_PACKED = 0x00;
   static final byte VAR_INTS_FIXED_64 = 0x01;
+  
+  // constants for FIXED_INTS_8, FIXED_INTS_16, FIXED_INTS_32, FIXED_INTS_64
+  static final String INTS_CODEC_NAME = "Ints";
+  static final int INTS_VERSION_START = 0;
+  static final int INTS_VERSION_CURRENT = INTS_VERSION_START;
+  
+  // constants for FLOAT_32, FLOAT_64
+  static final String FLOATS_CODEC_NAME = "Floats";
+  static final int FLOATS_VERSION_START = 0;
+  static final int FLOATS_VERSION_CURRENT = FLOATS_VERSION_START;
 }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader.java
index 3be7830..8b09893 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader.java
@@ -64,6 +64,24 @@ class Lucene40DocValuesReader extends DocValuesProducer {
         case VAR_INTS:
           instance = loadVarIntsField(field);
           break;
+        case FIXED_INTS_8:
+          instance = loadByteField(field);
+          break;
+        case FIXED_INTS_16:
+          instance = loadShortField(field);
+          break;
+        case FIXED_INTS_32:
+          instance = loadIntField(field);
+          break;
+        case FIXED_INTS_64:
+          instance = loadLongField(field);
+          break;
+        case FLOAT_32:
+          instance = loadFloatField(field);
+          break;
+        case FLOAT_64:
+          instance = loadDoubleField(field);
+          break;
         default: 
           throw new AssertionError(); // nocommit, implement the other types
       }
@@ -119,6 +137,178 @@ class Lucene40DocValuesReader extends DocValuesProducer {
       }
     }
   }
+  
+  private NumericDocValues loadByteField(FieldInfo field) throws IOException {
+    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), "dat");
+    IndexInput input = dir.openInput(fileName, state.context);
+    boolean success = false;
+    try {
+      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME, 
+                                   Lucene40DocValuesFormat.INTS_VERSION_START, 
+                                   Lucene40DocValuesFormat.INTS_VERSION_CURRENT);
+      input.readInt();
+      int maxDoc = state.segmentInfo.getDocCount();
+      final byte values[] = new byte[maxDoc];
+      input.readBytes(values, 0, values.length);
+      return new NumericDocValues() {
+        @Override
+        public long get(int docID) {
+          return values[docID];
+        }
+      };
+    } finally {
+      if (success) {
+        IOUtils.close(input);
+      } else {
+        IOUtils.closeWhileHandlingException(input);
+      }
+    }
+  }
+  
+  private NumericDocValues loadShortField(FieldInfo field) throws IOException {
+    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), "dat");
+    IndexInput input = dir.openInput(fileName, state.context);
+    boolean success = false;
+    try {
+      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME, 
+                                   Lucene40DocValuesFormat.INTS_VERSION_START, 
+                                   Lucene40DocValuesFormat.INTS_VERSION_CURRENT);
+      input.readInt();
+      int maxDoc = state.segmentInfo.getDocCount();
+      final short values[] = new short[maxDoc];
+      for (int i = 0; i < values.length; i++) {
+        values[i] = input.readShort();
+      }
+      return new NumericDocValues() {
+        @Override
+        public long get(int docID) {
+          return values[docID];
+        }
+      };
+    } finally {
+      if (success) {
+        IOUtils.close(input);
+      } else {
+        IOUtils.closeWhileHandlingException(input);
+      }
+    }
+  }
+  
+  private NumericDocValues loadIntField(FieldInfo field) throws IOException {
+    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), "dat");
+    IndexInput input = dir.openInput(fileName, state.context);
+    boolean success = false;
+    try {
+      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME, 
+                                   Lucene40DocValuesFormat.INTS_VERSION_START, 
+                                   Lucene40DocValuesFormat.INTS_VERSION_CURRENT);
+      input.readInt();
+      int maxDoc = state.segmentInfo.getDocCount();
+      final int values[] = new int[maxDoc];
+      for (int i = 0; i < values.length; i++) {
+        values[i] = input.readInt();
+      }
+      return new NumericDocValues() {
+        @Override
+        public long get(int docID) {
+          return values[docID];
+        }
+      };
+    } finally {
+      if (success) {
+        IOUtils.close(input);
+      } else {
+        IOUtils.closeWhileHandlingException(input);
+      }
+    }
+  }
+  
+  private NumericDocValues loadLongField(FieldInfo field) throws IOException {
+    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), "dat");
+    IndexInput input = dir.openInput(fileName, state.context);
+    boolean success = false;
+    try {
+      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME, 
+                                   Lucene40DocValuesFormat.INTS_VERSION_START, 
+                                   Lucene40DocValuesFormat.INTS_VERSION_CURRENT);
+      input.readInt();
+      int maxDoc = state.segmentInfo.getDocCount();
+      final long values[] = new long[maxDoc];
+      for (int i = 0; i < values.length; i++) {
+        values[i] = input.readLong();
+      }
+      return new NumericDocValues() {
+        @Override
+        public long get(int docID) {
+          return values[docID];
+        }
+      };
+    } finally {
+      if (success) {
+        IOUtils.close(input);
+      } else {
+        IOUtils.closeWhileHandlingException(input);
+      }
+    }
+  }
+  
+  private NumericDocValues loadFloatField(FieldInfo field) throws IOException {
+    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), "dat");
+    IndexInput input = dir.openInput(fileName, state.context);
+    boolean success = false;
+    try {
+      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.FLOATS_CODEC_NAME, 
+                                   Lucene40DocValuesFormat.FLOATS_VERSION_START, 
+                                   Lucene40DocValuesFormat.FLOATS_VERSION_CURRENT);
+      input.readInt();
+      int maxDoc = state.segmentInfo.getDocCount();
+      final int values[] = new int[maxDoc];
+      for (int i = 0; i < values.length; i++) {
+        values[i] = input.readInt();
+      }
+      return new NumericDocValues() {
+        @Override
+        public long get(int docID) {
+          return values[docID];
+        }
+      };
+    } finally {
+      if (success) {
+        IOUtils.close(input);
+      } else {
+        IOUtils.closeWhileHandlingException(input);
+      }
+    }
+  }
+  
+  private NumericDocValues loadDoubleField(FieldInfo field) throws IOException {
+    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), "dat");
+    IndexInput input = dir.openInput(fileName, state.context);
+    boolean success = false;
+    try {
+      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.FLOATS_CODEC_NAME, 
+                                   Lucene40DocValuesFormat.FLOATS_VERSION_START, 
+                                   Lucene40DocValuesFormat.FLOATS_VERSION_CURRENT);
+      input.readInt();
+      int maxDoc = state.segmentInfo.getDocCount();
+      final long values[] = new long[maxDoc];
+      for (int i = 0; i < values.length; i++) {
+        values[i] = input.readLong();
+      }
+      return new NumericDocValues() {
+        @Override
+        public long get(int docID) {
+          return values[docID];
+        }
+      };
+    } finally {
+      if (success) {
+        IOUtils.close(input);
+      } else {
+        IOUtils.closeWhileHandlingException(input);
+      }
+    }
+  }
 
   @Override
   public synchronized BinaryDocValues getBinary(FieldInfo field) throws IOException {

