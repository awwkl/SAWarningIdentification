GitDiffStart: 46f7f124550e9cc4fcdefa7881f3279e6a44f228 | Tue Jan 15 22:46:33 2013 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/index/FieldInfo.java b/lucene/core/src/java/org/apache/lucene/index/FieldInfo.java
index d5b799f..63ba2c5 100644
--- a/lucene/core/src/java/org/apache/lucene/index/FieldInfo.java
+++ b/lucene/core/src/java/org/apache/lucene/index/FieldInfo.java
@@ -210,6 +210,7 @@ public final class FieldInfo {
     assert checkConsistency();
   }
 
+  // nocommit type is always number?  should we remove this?
   void setNormValueType(DocValuesType type) {
     normType = type;
     assert checkConsistency();
diff --git a/lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField.java b/lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField.java
index 55aa7d1..ee41086 100644
--- a/lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField.java
+++ b/lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField.java
@@ -43,6 +43,7 @@ final class NormsConsumerPerField extends InvertedDocEndConsumerPerField impleme
   void finish() throws IOException {
     if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {
       if (consumer == null) {
+        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);
         consumer = new NumberDVWriter(fieldInfo, docState.docWriter.bytesUsed);
       }
       consumer.addValue(docState.docID, similarity.computeNorm(fieldState));
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount.java b/lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount.java
index cd7e45c..172f5ec 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount.java
@@ -70,6 +70,7 @@ public class TestUniqueTermCount extends LuceneTestCase {
   
   public void test() throws Exception {
     NumericDocValues fooNorms = MultiSimpleDocValues.simpleNormValues(reader, "foo");
+    assertNotNull(fooNorms);
     for (int i = 0; i < reader.maxDoc(); i++) {
       assertEquals(expected.get(i).longValue(), fooNorms.get(i));
     }

