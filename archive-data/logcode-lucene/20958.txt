GitDiffStart: c2f7d554a3e8886fc2781a7402fae746e4ee5ad2 | Thu Nov 13 00:01:43 2008 +0000
diff --git a/contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter.java b/contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter.java
index 20661cd..ea9adae 100644
--- a/contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter.java
+++ b/contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter.java
@@ -33,6 +33,7 @@ public class SimpleSpanFragmenter implements Fragmenter {
   private int position = -1;
   private SpanScorer spanScorer;
   private int waitForPos = -1;
+  private int textSize;
 
   /**
    * @param spanscorer SpanScorer that was used to score hits
@@ -70,14 +71,14 @@ public class SimpleSpanFragmenter implements Fragmenter {
       for (int i = 0; i < positionSpans.size(); i++) {
         if (((PositionSpan) positionSpans.get(i)).start == position) {
           waitForPos = ((PositionSpan) positionSpans.get(i)).end + 1;
-
-          return true;
+          break;
         }
       }
     }
 
-    boolean isNewFrag = token.endOffset() >= (fragmentSize * currentNumFrags);
-
+    boolean isNewFrag = token.endOffset() >= (fragmentSize * currentNumFrags)
+        && (textSize - token.endOffset()) >= (fragmentSize >>> 1);
+    
     if (isNewFrag) {
       currentNumFrags++;
     }
@@ -89,7 +90,8 @@ public class SimpleSpanFragmenter implements Fragmenter {
    * @see org.apache.lucene.search.highlight.Fragmenter#start(java.lang.String)
    */
   public void start(String originalText) {
-    position = 0;
+    position = -1;
     currentNumFrags = 1;
+    textSize = originalText.length();
   }
 }
diff --git a/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java b/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
index 1ffdfc0..32d69f0 100644
--- a/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
+++ b/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
@@ -242,6 +242,46 @@ public class HighlighterTest extends TestCase implements Formatter {
     }
   }
   
+  public void testSimpleSpanFragmenter() throws Exception {
+    doSearching("\"piece of text that is very long\"");
+
+    int maxNumFragmentsRequired = 2;
+
+    for (int i = 0; i < hits.length(); i++) {
+      String text = hits.doc(i).get(FIELD_NAME);
+      CachingTokenFilter tokenStream = new CachingTokenFilter(analyzer
+          .tokenStream(FIELD_NAME, new StringReader(text)));
+      SpanScorer spanscorer = new SpanScorer(query, FIELD_NAME, tokenStream);
+      Highlighter highlighter = new Highlighter(this, spanscorer);
+      highlighter.setTextFragmenter(new SimpleSpanFragmenter(spanscorer, 5));
+      tokenStream.reset();
+
+      String result = highlighter.getBestFragments(tokenStream, text,
+          maxNumFragmentsRequired, "...");
+      System.out.println("\t" + result);
+
+    }
+    
+    doSearching("\"been shot\"");
+
+    maxNumFragmentsRequired = 2;
+
+    for (int i = 0; i < hits.length(); i++) {
+      String text = hits.doc(i).get(FIELD_NAME);
+      CachingTokenFilter tokenStream = new CachingTokenFilter(analyzer
+          .tokenStream(FIELD_NAME, new StringReader(text)));
+      SpanScorer spanscorer = new SpanScorer(query, FIELD_NAME, tokenStream);
+      Highlighter highlighter = new Highlighter(this, spanscorer);
+      highlighter.setTextFragmenter(new SimpleSpanFragmenter(spanscorer, 20));
+      tokenStream.reset();
+
+      String result = highlighter.getBestFragments(tokenStream, text,
+          maxNumFragmentsRequired, "...");
+      System.out.println("\t" + result);
+
+    }
+  }
+  
   // position sensitive query added after position insensitive query
   public void testPosTermStdTerm() throws Exception {
     doSearching("y \"x y z\"");

