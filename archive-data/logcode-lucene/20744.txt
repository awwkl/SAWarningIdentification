GitDiffStart: 0afd451f24dd4930806a27449c00738cd4a71bc7 | Tue Dec 30 18:00:56 2008 +0000
diff --git a/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilter.java b/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilter.java
deleted file mode 100644
index 8fc4086..0000000
--- a/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilter.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.lucene.spatial.tier;
-
-import java.math.BigDecimal;
-import java.math.RoundingMode;
-import java.util.logging.Logger;
-
-import org.apache.lucene.search.Filter;
-import org.apache.lucene.spatial.geometry.shape.Rectangle;
-import org.apache.lucene.spatial.tier.projections.CartesianTierPlotter;
-import org.apache.lucene.spatial.tier.projections.IProjector;
-import org.apache.lucene.spatial.tier.projections.SinusoidalProjector;
-
-
-/**
- *
- */
-public class CartesianPolyFilter {
-
-  private IProjector projector = new SinusoidalProjector();
-  private Logger log = Logger.getLogger(getClass().getName());
-  
-  public Shape getBoxShape(double latitude, double longitude, int miles)
-  {  
-    Rectangle box = DistanceUtils.getInstance().getBoundary(latitude, longitude, miles);
-    
-    double latY = box.getMaxPoint().getY();//box.getY();
-    double latX = box.getMinPoint().getY() ; //box.getMaxY();
-    
-    double longY = box.getMaxPoint().getX(); ///box.getX();
-    double longX = box.getMinPoint().getX();//box.getMaxX();
-    
-    CartesianTierPlotter ctp = new CartesianTierPlotter(2, projector);
-    int bestFit = ctp.bestFit(miles);
-    
-    log.info("Best Fit is : " + bestFit);
-    ctp = new CartesianTierPlotter(bestFit, projector);
-    Shape shape = new Shape(ctp.getTierFieldName());
-    
-    // generate shape
-    // iterate from startX->endX
-    //     iterate from startY -> endY
-    //      shape.add(currentLat.currentLong);
-    
-   
-    double beginAt = ctp.getTierBoxId(latX, longX);
-    double endAt = ctp.getTierBoxId(latY, longY);
-    
-    double tierVert = ctp.getTierVerticalPosDivider();
-    log.fine(" | "+ beginAt+" | "+ endAt);
-    
-    double startX = beginAt - (beginAt %1);
-    double startY = beginAt - startX ; //should give a whole number
-    
-    double endX = endAt - (endAt %1);
-    double endY = endAt -endX; //should give a whole number
-    
-    int scale = (int)Math.log10(tierVert);
-    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();
-    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();
-    log.fine("scale "+scale+" startX "+ startX + " endX "+endX +" startY "+ startY + " endY "+ endY +" tierVert "+ tierVert);
-    
-    double xInc = 1.0d / tierVert;
-    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();
-    
-    for (; startX <= endX; startX++){
-      
-      double itY = startY;
-      while (itY <= endY){
-        //create a boxId
-        // startX.startY
-        double boxId = startX + itY ;
-        shape.addBox(boxId);
-        //System.out.println("----"+boxId);
-        itY += xInc;
-        
-        // java keeps 0.0001 as 1.0E-1
-        // which ends up as 0.00011111
-        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();
-      }
-    }
-    return shape;
-  }
-  
-  public Filter getBoundingArea(double latitude, double longitude, int miles) 
-  {
-    Shape shape = getBoxShape(latitude, longitude, miles);
-    return new CartesianShapeFilter(shape, shape.getTierId());
-  }
-}
diff --git a/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder.java b/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder.java
new file mode 100644
index 0000000..24ffe7d
--- /dev/null
+++ b/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder.java
@@ -0,0 +1,106 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.spatial.tier;
+
+import java.math.BigDecimal;
+import java.math.RoundingMode;
+import java.util.logging.Logger;
+
+import org.apache.lucene.search.Filter;
+import org.apache.lucene.spatial.geometry.shape.Rectangle;
+import org.apache.lucene.spatial.tier.projections.CartesianTierPlotter;
+import org.apache.lucene.spatial.tier.projections.IProjector;
+import org.apache.lucene.spatial.tier.projections.SinusoidalProjector;
+
+
+/**
+ *
+ */
+public class CartesianPolyFilterBuilder {
+
+  private IProjector projector = new SinusoidalProjector();
+  private Logger log = Logger.getLogger(getClass().getName());
+  
+  public Shape getBoxShape(double latitude, double longitude, int miles)
+  {  
+    Rectangle box = DistanceUtils.getInstance().getBoundary(latitude, longitude, miles);
+    
+    double latY = box.getMaxPoint().getY();//box.getY();
+    double latX = box.getMinPoint().getY() ; //box.getMaxY();
+    
+    double longY = box.getMaxPoint().getX(); ///box.getX();
+    double longX = box.getMinPoint().getX();//box.getMaxX();
+    
+    CartesianTierPlotter ctp = new CartesianTierPlotter(2, projector);
+    int bestFit = ctp.bestFit(miles);
+    
+    log.info("Best Fit is : " + bestFit);
+    ctp = new CartesianTierPlotter(bestFit, projector);
+    Shape shape = new Shape(ctp.getTierFieldName());
+    
+    // generate shape
+    // iterate from startX->endX
+    //     iterate from startY -> endY
+    //      shape.add(currentLat.currentLong);
+    
+   
+    double beginAt = ctp.getTierBoxId(latX, longX);
+    double endAt = ctp.getTierBoxId(latY, longY);
+    
+    double tierVert = ctp.getTierVerticalPosDivider();
+    log.fine(" | "+ beginAt+" | "+ endAt);
+    
+    double startX = beginAt - (beginAt %1);
+    double startY = beginAt - startX ; //should give a whole number
+    
+    double endX = endAt - (endAt %1);
+    double endY = endAt -endX; //should give a whole number
+    
+    int scale = (int)Math.log10(tierVert);
+    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();
+    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();
+    log.fine("scale "+scale+" startX "+ startX + " endX "+endX +" startY "+ startY + " endY "+ endY +" tierVert "+ tierVert);
+    
+    double xInc = 1.0d / tierVert;
+    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();
+    
+    for (; startX <= endX; startX++){
+      
+      double itY = startY;
+      while (itY <= endY){
+        //create a boxId
+        // startX.startY
+        double boxId = startX + itY ;
+        shape.addBox(boxId);
+        //System.out.println("----"+boxId);
+        itY += xInc;
+        
+        // java keeps 0.0001 as 1.0E-1
+        // which ends up as 0.00011111
+        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();
+      }
+    }
+    return shape;
+  }
+  
+  public Filter getBoundingArea(double latitude, double longitude, int miles) 
+  {
+    Shape shape = getBoxShape(latitude, longitude, miles);
+    return new CartesianShapeFilter(shape, shape.getTierId());
+  }
+}
diff --git a/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQuery.java b/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQuery.java
deleted file mode 100644
index 9ac0e21..0000000
--- a/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQuery.java
+++ /dev/null
@@ -1,104 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.lucene.spatial.tier;
-
-import org.apache.lucene.search.ConstantScoreQuery;
-import org.apache.lucene.search.Filter;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.QueryWrapperFilter;
-import org.apache.lucene.spatial.SerialChainFilter;
-
-
-public class DistanceQuery {
-
-  private static final long serialVersionUID = 1L;
-  
-  public BoundaryBoxFilter latFilter;
-  public BoundaryBoxFilter lngFilter;
-  public DistanceFilter distanceFilter;
-  
-  private double lat;
-  private double lng;
-  private double miles;
-  private Filter cartesianFilter;
-  
-  /**
-   * Create a distance query using
-   * a boundary box wrapper around a more precise
-   * DistanceFilter.
-   * 
-   * @see SerialChainFilter
-   * @param lat
-   * @param lng
-   * @param miles
-   */
-  public DistanceQuery (double lat, double lng, double miles, String latField, String lngField, boolean needPrecise){
-
-    this.lat = lat;
-    this.lng = lng;
-    this.miles = miles;
-    
-    
-    CartesianPolyFilter cpf = new CartesianPolyFilter();
-    cartesianFilter = cpf.getBoundingArea(lat, lng, (int)miles);
-
-    /* create precise distance filter */
-    if( needPrecise)
-    	distanceFilter = new DistanceFilter(lat, lng, miles, latField, lngField);
-    
-  }
-
-   /**
-  * Create a distance query using
-  * a boundary box wrapper around a more precise
-  * DistanceFilter.
-  * 
-  * @see SerialChainFilter
-  * @param lat
-  * @param lng
-  * @param miles
-  */
-  public Filter getFilter() {
-    
-      return new SerialChainFilter(new Filter[] {cartesianFilter, distanceFilter},
-                    new int[] {SerialChainFilter.AND,
-                           SerialChainFilter.SERIALAND});
-
-   
-  }
-  
-  public Filter getFilter(Query query) {
-    QueryWrapperFilter qf = new QueryWrapperFilter(query);
-    
-    
-    return new SerialChainFilter(new Filter[] {cartesianFilter, qf, distanceFilter},
-          new int[] {SerialChainFilter.AND, 
-              SerialChainFilter.AND,
-              SerialChainFilter.SERIALAND});
-  
-  }
-    
-  public Query getQuery() {
-      return new ConstantScoreQuery(getFilter());
-  }
-    
-  @Override
-  public String toString() {
-    return "DistanceQuery lat: " + lat + " lng: " + lng + " miles: "+ miles;
-  }
-}
diff --git a/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder.java b/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder.java
new file mode 100644
index 0000000..b197f09
--- /dev/null
+++ b/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder.java
@@ -0,0 +1,104 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.spatial.tier;
+
+import org.apache.lucene.search.ConstantScoreQuery;
+import org.apache.lucene.search.Filter;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.QueryWrapperFilter;
+import org.apache.lucene.spatial.SerialChainFilter;
+
+
+public class DistanceQueryBuilder {
+
+  private static final long serialVersionUID = 1L;
+  
+  public BoundaryBoxFilter latFilter;
+  public BoundaryBoxFilter lngFilter;
+  public DistanceFilter distanceFilter;
+  
+  private double lat;
+  private double lng;
+  private double miles;
+  private Filter cartesianFilter;
+  
+  /**
+   * Create a distance query using
+   * a boundary box wrapper around a more precise
+   * DistanceFilter.
+   * 
+   * @see SerialChainFilter
+   * @param lat
+   * @param lng
+   * @param miles
+   */
+  public DistanceQueryBuilder (double lat, double lng, double miles, String latField, String lngField, boolean needPrecise){
+
+    this.lat = lat;
+    this.lng = lng;
+    this.miles = miles;
+    
+    
+    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder();
+    cartesianFilter = cpf.getBoundingArea(lat, lng, (int)miles);
+
+    /* create precise distance filter */
+    if( needPrecise)
+    	distanceFilter = new DistanceFilter(lat, lng, miles, latField, lngField);
+    
+  }
+
+   /**
+  * Create a distance query using
+  * a boundary box wrapper around a more precise
+  * DistanceFilter.
+  * 
+  * @see SerialChainFilter
+  * @param lat
+  * @param lng
+  * @param miles
+  */
+  public Filter getFilter() {
+    
+      return new SerialChainFilter(new Filter[] {cartesianFilter, distanceFilter},
+                    new int[] {SerialChainFilter.AND,
+                           SerialChainFilter.SERIALAND});
+
+   
+  }
+  
+  public Filter getFilter(Query query) {
+    QueryWrapperFilter qf = new QueryWrapperFilter(query);
+    
+    
+    return new SerialChainFilter(new Filter[] {cartesianFilter, qf, distanceFilter},
+          new int[] {SerialChainFilter.AND, 
+              SerialChainFilter.AND,
+              SerialChainFilter.SERIALAND});
+  
+  }
+    
+  public Query getQuery() {
+      return new ConstantScoreQuery(getFilter());
+  }
+    
+  @Override
+  public String toString() {
+    return "DistanceQuery lat: " + lat + " lng: " + lng + " miles: "+ miles;
+  }
+}
diff --git a/contrib/spatial/src/test/org/apache/lucene/spatial/tier/PolyShape.java b/contrib/spatial/src/test/org/apache/lucene/spatial/tier/PolyShape.java
index b65cc2c..9bb8a80 100644
--- a/contrib/spatial/src/test/org/apache/lucene/spatial/tier/PolyShape.java
+++ b/contrib/spatial/src/test/org/apache/lucene/spatial/tier/PolyShape.java
@@ -1 +1 @@
-/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.lucene.spatial.tier;


/**
 *
 */
public class PolyShape {

  private static double lat = 38.969398; 
  private static double lng= -77.386398;
  private static int miles = 1000;
  /**
   * @param args
   */
  public static void main(String[] args) {
  
    CartesianPolyFilter cpf = new CartesianPolyFilter();
    cpf.getBoxShape(lat, lng, miles);
    
  }

}
\ No newline at end of file
+/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.lucene.spatial.tier;


/**
 *
 */
public class PolyShape {

  private static double lat = 38.969398; 
  private static double lng= -77.386398;
  private static int miles = 1000;
  /**
   * @param args
   */
  public static void main(String[] args) {
  
    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder();
    cpf.getBoxShape(lat, lng, miles);
    
  }

}
\ No newline at end of file
diff --git a/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java b/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java
index d53a7de..d171411 100644
--- a/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java
+++ b/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian.java
@@ -35,7 +35,7 @@ import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.spatial.tier.DistanceQuery;
+import org.apache.lucene.spatial.tier.DistanceQueryBuilder;
 import org.apache.lucene.spatial.tier.DistanceSortSource;
 import org.apache.lucene.spatial.tier.DistanceUtils;
 import org.apache.lucene.spatial.tier.InvalidGeoException;
@@ -149,7 +149,7 @@ public class TestCartesian extends TestCase{
     final double miles = 6.0;
     
     // create a distance query
-    final DistanceQuery dq = new DistanceQuery(lat, lng, miles, latField, lngField, true);
+    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, latField, lngField, true);
      
     System.out.println(dq);
     //create a term query to search against all documents
diff --git a/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestDistance.java b/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestDistance.java
index e45cfc5..69f9b7c 100644
--- a/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestDistance.java
+++ b/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestDistance.java
@@ -32,7 +32,7 @@ import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.spatial.tier.DistanceQuery;
+import org.apache.lucene.spatial.tier.DistanceQueryBuilder;
 import org.apache.lucene.spatial.tier.DistanceSortSource;
 import org.apache.lucene.spatial.tier.DistanceUtils;
 import org.apache.lucene.spatial.tier.InvalidGeoException;

