GitDiffStart: a5dc94a6c012e6846c11f3464c23bcdcd977458e | Wed Mar 17 18:34:50 2010 +0000
diff --git a/contrib/velocity/src/main/java/org/apache/solr/request/PageTool.java b/contrib/velocity/src/main/java/org/apache/solr/request/PageTool.java
deleted file mode 100644
index b96566f..0000000
--- a/contrib/velocity/src/main/java/org/apache/solr/request/PageTool.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.request;
-
-import org.apache.solr.response.SolrQueryResponse;
-import org.apache.solr.search.DocSlice;
-import org.apache.solr.common.SolrDocumentList;
-
-public class PageTool {
-  private long start;
-  private int results_per_page = 10;
-  private long results_found;
-  private int page_count;
-  private int current_page_number;
-
-  public PageTool(SolrQueryRequest request, SolrQueryResponse response) {
-    String rows = request.getParams().get("rows");
-
-    if (rows != null) {
-      results_per_page = new Integer(rows);
-    }
-
-    Object docs = response.getValues().get("response");
-    if (docs != null) {
-      if (docs instanceof DocSlice) {
-        DocSlice doc_slice = (DocSlice) docs;
-        results_found = doc_slice.matches();
-        start = doc_slice.offset();
-      } else {
-        SolrDocumentList doc_list = (SolrDocumentList) docs;
-        results_found = doc_list.getNumFound();
-        start = doc_list.getStart();
-      }
-    }
-
-    page_count = (int) Math.ceil(results_found / (double) results_per_page);
-    current_page_number = (int) Math.ceil(start / (double) results_per_page) + (page_count > 0 ? 1 : 0);
-  }
-
-  public long getStart() {
-    return start;
-  }
-
-  public int getResults_per_page() {
-    return results_per_page;
-  }
-
-  public long getResults_found() {
-    return results_found;
-  }
-
-  public int getPage_count() {
-    return page_count;
-  }
-
-  public int getCurrent_page_number() {
-    return current_page_number;
-  }
-
-  public String toString() {
-    return "Found " + results_found +
-           " Page " + current_page_number + " of " + page_count +
-           " Starting at " + start + " per page " + results_per_page;
-  }
-}
diff --git a/contrib/velocity/src/main/java/org/apache/solr/request/SolrParamResourceLoader.java b/contrib/velocity/src/main/java/org/apache/solr/request/SolrParamResourceLoader.java
deleted file mode 100644
index 73064f5..0000000
--- a/contrib/velocity/src/main/java/org/apache/solr/request/SolrParamResourceLoader.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.request;
-
-import org.apache.velocity.runtime.resource.loader.ResourceLoader;
-import org.apache.velocity.runtime.resource.Resource;
-import org.apache.velocity.exception.ResourceNotFoundException;
-import org.apache.commons.collections.ExtendedProperties;
-
-import java.io.ByteArrayInputStream;
-import java.io.InputStream;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-
-public class SolrParamResourceLoader extends ResourceLoader {
-  private Map<String,String> templates = new HashMap<String,String>();
-  public SolrParamResourceLoader(SolrQueryRequest request) {
-    super();
-
-    // TODO: Consider using content streams, but need a template name associated with each stream
-    // for now, a custom param convention of template.<name>=<template body> is a nice example
-    // of per-request overrides of templates
-
-    org.apache.solr.common.params.SolrParams params = request.getParams();
-    Iterator<String> names = params.getParameterNamesIterator();
-    while (names.hasNext()) {
-      String name = names.next();
-      
-      if (name.startsWith("v.template.")) {
-        templates.put(name.substring(11) + ".vm",params.get(name));
-      }
-    }
-  }
-
-  public void init(ExtendedProperties extendedProperties) {
-  }
-
-  public InputStream getResourceStream(String s) throws ResourceNotFoundException {
-    String template = templates.get(s);
-    return template == null ? null : new ByteArrayInputStream(template.getBytes());
-  }
-
-  public boolean isSourceModified(Resource resource) {
-    return false;
-  }
-
-  public long getLastModified(Resource resource) {
-    return 0;
-  }
-}
diff --git a/contrib/velocity/src/main/java/org/apache/solr/request/SolrVelocityResourceLoader.java b/contrib/velocity/src/main/java/org/apache/solr/request/SolrVelocityResourceLoader.java
deleted file mode 100644
index ceea89a..0000000
--- a/contrib/velocity/src/main/java/org/apache/solr/request/SolrVelocityResourceLoader.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.solr.request;
-
-import org.apache.velocity.runtime.resource.loader.ResourceLoader;
-import org.apache.velocity.runtime.resource.Resource;
-import org.apache.velocity.exception.ResourceNotFoundException;
-import org.apache.commons.collections.ExtendedProperties;
-import org.apache.solr.core.SolrResourceLoader;
-
-import java.io.InputStream;
-
-// TODO: the name of this class seems ridiculous
-public class SolrVelocityResourceLoader extends ResourceLoader {
-  private SolrResourceLoader loader;
-
-  public SolrVelocityResourceLoader(SolrResourceLoader loader) {
-    super();
-    this.loader = loader;
-  }
-
-  public void init(ExtendedProperties extendedProperties) {
-  }
-
-  public InputStream getResourceStream(String template_name) throws ResourceNotFoundException {
-    return loader.openResource(template_name);
-  }
-
-  public boolean isSourceModified(Resource resource) {
-    return false;
-  }
-
-  public long getLastModified(Resource resource) {
-    return 0;
-  }
-}
diff --git a/contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter.java b/contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter.java
deleted file mode 100644
index 30f8989..0000000
--- a/contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter.java
+++ /dev/null
@@ -1,194 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.request;
-
-import org.apache.solr.common.util.NamedList;
-import org.apache.solr.client.solrj.SolrResponse;
-import org.apache.solr.client.solrj.response.QueryResponse;
-import org.apache.solr.client.solrj.response.SolrResponseBase;
-import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;
-import org.apache.solr.response.QueryResponseWriter;
-import org.apache.solr.response.SolrQueryResponse;
-import org.apache.velocity.Template;
-import org.apache.velocity.VelocityContext;
-import org.apache.velocity.tools.generic.*;
-import org.apache.velocity.app.VelocityEngine;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.util.Properties;
-
-public class VelocityResponseWriter implements QueryResponseWriter {
-  
-  private static final Logger log = LoggerFactory.getLogger(VelocityResponseWriter.class);
-
-  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {
-    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine
-
-    // TODO: Add layout capability, render to string buffer, then render layout
-    Template template = getTemplate(engine, request);
-
-    VelocityContext context = new VelocityContext();
-
-    context.put("request", request);
-
-    // Turn the SolrQueryResponse into a SolrResponse.
-    // QueryResponse has lots of conveniences suitable for a view
-    // Problem is, which SolrResponse class to use?
-    // One patch to SOLR-620 solved this by passing in a class name as
-    // as a parameter and using reflection and Solr's class loader to
-    // create a new instance.  But for now the implementation simply
-    // uses QueryResponse, and if it chokes in a known way, fall back
-    // to bare bones SolrResponseBase.
-    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least
-    SolrResponse rsp = new QueryResponse();
-    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);
-    try {
-      rsp.setResponse(parsedResponse);
-
-      // page only injected if QueryResponse works
-      context.put("page",new PageTool(request,response));  // page tool only makes sense for a SearchHandler request... *sigh*
-    } catch (ClassCastException e) {
-      // known edge case where QueryResponse's extraction assumes "response" is a SolrDocumentList
-      // (AnalysisRequestHandler emits a "response")
-      rsp = new SolrResponseBase();
-      rsp.setResponse(parsedResponse);
-    }
-    context.put("response", rsp);
-
-    // Velocity context tools - TODO: make these pluggable
-    context.put("esc", new EscapeTool());
-    context.put("sort", new SortTool());
-    context.put("number", new NumberTool());
-    context.put("list", new ListTool());
-    context.put("date", new ComparisonDateTool());
-    context.put("math", new MathTool());
-    context.put("engine", engine);  // for $engine.resourceExists(...)
-
-    String layout_template = request.getParams().get("v.layout");
-    String json_wrapper = request.getParams().get("v.json");
-    boolean wrap_response = (layout_template != null) || (json_wrapper !=null);
-    
-    // create output, optionally wrap it into a json object
-    if (wrap_response) {
-      StringWriter stringWriter = new StringWriter();
-      template.merge(context, stringWriter);
-      
-      if (layout_template != null) {
-        context.put("content", stringWriter.toString());
-        stringWriter = new StringWriter();
-        try {
-          engine.getTemplate(layout_template + ".vm").merge(context, stringWriter);
-        } catch (Exception e) {
-          throw new IOException(e.getMessage());
-        }
-      }
-      
-      if (json_wrapper != null) {
-        writer.write(request.getParams().get("v.json") + "(");
-        writer.write(getJSONWrap(stringWriter.toString()));
-        writer.write(')');
-      } else {  // using a layout, but not JSON wrapping
-        writer.write(stringWriter.toString());
-      }
-    } else {
-      template.merge(context, writer);
-    }
-  }
-
-  private VelocityEngine getEngine(SolrQueryRequest request) {
-    VelocityEngine engine = new VelocityEngine();
-    String template_root = request.getParams().get("v.base_dir");
-    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), "velocity");
-    if (template_root != null) {
-      baseDir = new File(template_root);
-    }
-    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());
-    engine.setProperty("params.resource.loader.instance", new SolrParamResourceLoader(request));
-    SolrVelocityResourceLoader resourceLoader =
-      new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());
-    engine.setProperty("solr.resource.loader.instance", resourceLoader);
-    engine.setProperty(VelocityEngine.RESOURCE_LOADER, "params,file,solr");
-    String propFile = request.getParams().get("v.properties");
-    try{
-      if( propFile == null )
-        engine.init();
-      else{
-        InputStream is = null;
-        try{
-          is = resourceLoader.getResourceStream( propFile );
-          Properties props = new Properties();
-          props.load( is );
-          engine.init( props );
-        }
-        finally{
-          if( is != null ) is.close();
-        }
-      }
-    }
-    catch( Exception e ){
-      throw new RuntimeException( e );
-    }
-
-    return engine;
-  }
-
-  private Template getTemplate(VelocityEngine engine, SolrQueryRequest request) throws IOException {
-    Template template;
-
-    String template_name = request.getParams().get("v.template");
-    String qt = request.getParams().get("qt");
-    String path = (String) request.getContext().get("path");
-    if (template_name == null && path != null) {
-      template_name = path;
-    }  // TODO: path is never null, so qt won't get picked up  maybe special case for '/select' to use qt, otherwise use path?
-    if (template_name == null && qt != null) {
-      template_name = qt;
-    }
-    if (template_name == null) template_name = "index";
-    try {
-      template = engine.getTemplate(template_name + ".vm");
-    } catch (Exception e) {
-      throw new IOException(e.getMessage());
-    }
-
-    return template;
-  }
-
-  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
-    return request.getParams().get("v.contentType","text/html");
-  }
-  
-  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?
-    // escape the double quotes and backslashes
-    String replace1 = xmlResult.replaceAll("\\\\", "\\\\\\\\");
-    replace1 = replace1.replaceAll("\\n", "\\\\n");
-    replace1 = replace1.replaceAll("\\r", "\\\\r");
-    String replaced = replace1.replaceAll("\"", "\\\\\"");
-    // wrap it in a JSON object
-    return "{\"result\":\"" + replaced + "\"}";
-  }
-  
-  public void init(NamedList args) {
-  }
-}
diff --git a/contrib/velocity/src/main/java/org/apache/solr/response/PageTool.java b/contrib/velocity/src/main/java/org/apache/solr/response/PageTool.java
new file mode 100644
index 0000000..ab817cd
--- /dev/null
+++ b/contrib/velocity/src/main/java/org/apache/solr/response/PageTool.java
@@ -0,0 +1,81 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.response;
+
+import org.apache.solr.request.SolrQueryRequest;
+import org.apache.solr.response.SolrQueryResponse;
+import org.apache.solr.search.DocSlice;
+import org.apache.solr.common.SolrDocumentList;
+
+public class PageTool {
+  private long start;
+  private int results_per_page = 10;
+  private long results_found;
+  private int page_count;
+  private int current_page_number;
+
+  public PageTool(SolrQueryRequest request, SolrQueryResponse response) {
+    String rows = request.getParams().get("rows");
+
+    if (rows != null) {
+      results_per_page = new Integer(rows);
+    }
+
+    Object docs = response.getValues().get("response");
+    if (docs != null) {
+      if (docs instanceof DocSlice) {
+        DocSlice doc_slice = (DocSlice) docs;
+        results_found = doc_slice.matches();
+        start = doc_slice.offset();
+      } else {
+        SolrDocumentList doc_list = (SolrDocumentList) docs;
+        results_found = doc_list.getNumFound();
+        start = doc_list.getStart();
+      }
+    }
+
+    page_count = (int) Math.ceil(results_found / (double) results_per_page);
+    current_page_number = (int) Math.ceil(start / (double) results_per_page) + (page_count > 0 ? 1 : 0);
+  }
+
+  public long getStart() {
+    return start;
+  }
+
+  public int getResults_per_page() {
+    return results_per_page;
+  }
+
+  public long getResults_found() {
+    return results_found;
+  }
+
+  public int getPage_count() {
+    return page_count;
+  }
+
+  public int getCurrent_page_number() {
+    return current_page_number;
+  }
+
+  public String toString() {
+    return "Found " + results_found +
+           " Page " + current_page_number + " of " + page_count +
+           " Starting at " + start + " per page " + results_per_page;
+  }
+}
diff --git a/contrib/velocity/src/main/java/org/apache/solr/response/SolrParamResourceLoader.java b/contrib/velocity/src/main/java/org/apache/solr/response/SolrParamResourceLoader.java
new file mode 100644
index 0000000..c9381cf
--- /dev/null
+++ b/contrib/velocity/src/main/java/org/apache/solr/response/SolrParamResourceLoader.java
@@ -0,0 +1,67 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.response;
+
+import org.apache.solr.request.SolrQueryRequest;
+import org.apache.velocity.runtime.resource.loader.ResourceLoader;
+import org.apache.velocity.runtime.resource.Resource;
+import org.apache.velocity.exception.ResourceNotFoundException;
+import org.apache.commons.collections.ExtendedProperties;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+public class SolrParamResourceLoader extends ResourceLoader {
+  private Map<String,String> templates = new HashMap<String,String>();
+  public SolrParamResourceLoader(SolrQueryRequest request) {
+    super();
+
+    // TODO: Consider using content streams, but need a template name associated with each stream
+    // for now, a custom param convention of template.<name>=<template body> is a nice example
+    // of per-request overrides of templates
+
+    org.apache.solr.common.params.SolrParams params = request.getParams();
+    Iterator<String> names = params.getParameterNamesIterator();
+    while (names.hasNext()) {
+      String name = names.next();
+      
+      if (name.startsWith("v.template.")) {
+        templates.put(name.substring(11) + ".vm",params.get(name));
+      }
+    }
+  }
+
+  public void init(ExtendedProperties extendedProperties) {
+  }
+
+  public InputStream getResourceStream(String s) throws ResourceNotFoundException {
+    String template = templates.get(s);
+    return template == null ? null : new ByteArrayInputStream(template.getBytes());
+  }
+
+  public boolean isSourceModified(Resource resource) {
+    return false;
+  }
+
+  public long getLastModified(Resource resource) {
+    return 0;
+  }
+}
diff --git a/contrib/velocity/src/main/java/org/apache/solr/response/SolrVelocityResourceLoader.java b/contrib/velocity/src/main/java/org/apache/solr/response/SolrVelocityResourceLoader.java
new file mode 100644
index 0000000..c42dc10
--- /dev/null
+++ b/contrib/velocity/src/main/java/org/apache/solr/response/SolrVelocityResourceLoader.java
@@ -0,0 +1,50 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.solr.response;
+
+import org.apache.velocity.runtime.resource.loader.ResourceLoader;
+import org.apache.velocity.runtime.resource.Resource;
+import org.apache.velocity.exception.ResourceNotFoundException;
+import org.apache.commons.collections.ExtendedProperties;
+import org.apache.solr.core.SolrResourceLoader;
+
+import java.io.InputStream;
+
+// TODO: the name of this class seems ridiculous
+public class SolrVelocityResourceLoader extends ResourceLoader {
+  private SolrResourceLoader loader;
+
+  public SolrVelocityResourceLoader(SolrResourceLoader loader) {
+    super();
+    this.loader = loader;
+  }
+
+  public void init(ExtendedProperties extendedProperties) {
+  }
+
+  public InputStream getResourceStream(String template_name) throws ResourceNotFoundException {
+    return loader.openResource(template_name);
+  }
+
+  public boolean isSourceModified(Resource resource) {
+    return false;
+  }
+
+  public long getLastModified(Resource resource) {
+    return 0;
+  }
+}
diff --git a/contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter.java b/contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter.java
new file mode 100644
index 0000000..37b9e29
--- /dev/null
+++ b/contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter.java
@@ -0,0 +1,193 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.response;
+
+import org.apache.solr.client.solrj.SolrResponse;
+import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;
+import org.apache.solr.client.solrj.response.QueryResponse;
+import org.apache.solr.client.solrj.response.SolrResponseBase;
+import org.apache.solr.common.util.NamedList;
+import org.apache.solr.request.SolrQueryRequest;
+import org.apache.velocity.Template;
+import org.apache.velocity.VelocityContext;
+import org.apache.velocity.app.VelocityEngine;
+import org.apache.velocity.tools.generic.*;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.*;
+import java.util.Properties;
+
+public class VelocityResponseWriter implements QueryResponseWriter {
+
+  // TODO: maybe pass this Logger to the template for logging from there?
+  private static final Logger log = LoggerFactory.getLogger(VelocityResponseWriter.class);
+
+  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {
+    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine
+
+    Template template = getTemplate(engine, request);
+
+    VelocityContext context = new VelocityContext();
+
+    context.put("request", request);
+
+    // Turn the SolrQueryResponse into a SolrResponse.
+    // QueryResponse has lots of conveniences suitable for a view
+    // Problem is, which SolrResponse class to use?
+    // One patch to SOLR-620 solved this by passing in a class name as
+    // as a parameter and using reflection and Solr's class loader to
+    // create a new instance.  But for now the implementation simply
+    // uses QueryResponse, and if it chokes in a known way, fall back
+    // to bare bones SolrResponseBase.
+    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least
+    SolrResponse rsp = new QueryResponse();
+    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);
+    try {
+      rsp.setResponse(parsedResponse);
+
+      // page only injected if QueryResponse works
+      context.put("page", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*
+    } catch (ClassCastException e) {
+      // known edge case where QueryResponse's extraction assumes "response" is a SolrDocumentList
+      // (AnalysisRequestHandler emits a "response")
+      e.printStackTrace();
+      rsp = new SolrResponseBase();
+      rsp.setResponse(parsedResponse);
+    }
+    context.put("response", rsp);
+
+    // Velocity context tools - TODO: make these pluggable
+    context.put("esc", new EscapeTool());
+    context.put("date", new ComparisonDateTool());
+    context.put("list", new ListTool());
+    context.put("math", new MathTool());
+    context.put("number", new NumberTool());
+    context.put("sort", new SortTool());
+
+    context.put("engine", engine);  // for $engine.resourceExists(...)
+
+    String layout_template = request.getParams().get("v.layout");
+    String json_wrapper = request.getParams().get("v.json");
+    boolean wrap_response = (layout_template != null) || (json_wrapper != null);
+
+    // create output, optionally wrap it into a json object
+    if (wrap_response) {
+      StringWriter stringWriter = new StringWriter();
+      template.merge(context, stringWriter);
+
+      if (layout_template != null) {
+        context.put("content", stringWriter.toString());
+        stringWriter = new StringWriter();
+        try {
+          engine.getTemplate(layout_template + ".vm").merge(context, stringWriter);
+        } catch (Exception e) {
+          throw new IOException(e.getMessage());
+        }
+      }
+
+      if (json_wrapper != null) {
+        writer.write(request.getParams().get("v.json") + "(");
+        writer.write(getJSONWrap(stringWriter.toString()));
+        writer.write(')');
+      } else {  // using a layout, but not JSON wrapping
+        writer.write(stringWriter.toString());
+      }
+    } else {
+      template.merge(context, writer);
+    }
+  }
+
+  private VelocityEngine getEngine(SolrQueryRequest request) {
+    VelocityEngine engine = new VelocityEngine();
+    String template_root = request.getParams().get("v.base_dir");
+    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), "velocity");
+    if (template_root != null) {
+      baseDir = new File(template_root);
+    }
+    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());
+    engine.setProperty("params.resource.loader.instance", new SolrParamResourceLoader(request));
+    SolrVelocityResourceLoader resourceLoader =
+        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());
+    engine.setProperty("solr.resource.loader.instance", resourceLoader);
+
+    // TODO: Externalize Velocity properties
+    engine.setProperty(VelocityEngine.RESOURCE_LOADER, "params,file,solr");
+    String propFile = request.getParams().get("v.properties");
+    try {
+      if (propFile == null)
+        engine.init();
+      else {
+        InputStream is = null;
+        try {
+          is = resourceLoader.getResourceStream(propFile);
+          Properties props = new Properties();
+          props.load(is);
+          engine.init(props);
+        }
+        finally {
+          if (is != null) is.close();
+        }
+      }
+    }
+    catch (Exception e) {
+      throw new RuntimeException(e);
+    }
+
+    return engine;
+  }
+
+  private Template getTemplate(VelocityEngine engine, SolrQueryRequest request) throws IOException {
+    Template template;
+
+    String template_name = request.getParams().get("v.template");
+    String qt = request.getParams().get("qt");
+    String path = (String) request.getContext().get("path");
+    if (template_name == null && path != null) {
+      template_name = path;
+    }  // TODO: path is never null, so qt won't get picked up  maybe special case for '/select' to use qt, otherwise use path?
+    if (template_name == null && qt != null) {
+      template_name = qt;
+    }
+    if (template_name == null) template_name = "index";
+    try {
+      template = engine.getTemplate(template_name + ".vm");
+    } catch (Exception e) {
+      throw new IOException(e.getMessage());
+    }
+
+    return template;
+  }
+
+  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
+    return request.getParams().get("v.contentType", "text/html");
+  }
+
+  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?
+    // escape the double quotes and backslashes
+    String replace1 = xmlResult.replaceAll("\\\\", "\\\\\\\\");
+    replace1 = replace1.replaceAll("\\n", "\\\\n");
+    replace1 = replace1.replaceAll("\\r", "\\\\r");
+    String replaced = replace1.replaceAll("\"", "\\\\\"");
+    // wrap it in a JSON object
+    return "{\"result\":\"" + replaced + "\"}";
+  }
+
+  public void init(NamedList args) {
+  }
+}

