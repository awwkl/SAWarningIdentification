GitDiffStart: 39e750d4b9847280f64a95b4b8e2e4cdcfa9fd9c | Thu Oct 30 05:35:31 2008 +0000
diff --git a/src/java/org/apache/solr/common/util/ConcurrentLRUCache.java b/src/java/org/apache/solr/common/util/ConcurrentLRUCache.java
index 3b92d9d..839aff9 100644
--- a/src/java/org/apache/solr/common/util/ConcurrentLRUCache.java
+++ b/src/java/org/apache/solr/common/util/ConcurrentLRUCache.java
@@ -11,7 +11,7 @@ import java.util.concurrent.locks.ReentrantLock;
 /**
  * A LRU cache implementation based upon ConcurrentHashMap and other techniques to reduce
  * contention and synchronization overhead to utilize multiple CPU cores more effectively.
- *
+ * <p/>
  * Note that the implementation does not follow a true LRU (least-recently-used) eviction
  * strategy. Instead it strives to remove least recently used items but when the initial
  * cleanup does not remove enough items to reach the 'acceptableWaterMark' limit, it can
@@ -104,7 +104,18 @@ public class ConcurrentLRUCache {
     return oldCacheEntry == null ? null : oldCacheEntry.value;
   }
 
-  private void markAndSweep() {
+  /**
+   * Removes items from the cache to bring the size down
+   * to an acceptable value ('acceptableWaterMark').
+   * <p/>
+   * It is done in two stages. In the first stage, least recently used items are evicted.
+   * If, after the first stage, the cache size is still greater than 'acceptableSize'
+   * config parameter, the second stage takes over.
+   * <p/>
+   * The second stage is more intensive and tries to bring down the cache size
+   * to the 'minSize' config parameter.
+   */
+  public void markAndSweep() {
     if (!markAndSweepLock.tryLock()) return;
     try {
       int size = stats.size.get();

