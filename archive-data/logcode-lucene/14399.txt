GitDiffStart: 277c4a1a5d9b6e1de0a217ba57ea82bc90813d19 | Wed Nov 30 11:08:45 2011 +0000
diff --git a/lucene/contrib/CHANGES.txt b/lucene/contrib/CHANGES.txt
index 5690a63..6cebcf1 100644
--- a/lucene/contrib/CHANGES.txt
+++ b/lucene/contrib/CHANGES.txt
@@ -92,6 +92,10 @@ Bug Fixes
    assert if such a parent doc was the first doc in the segment).
    (Shay Banon, Mike McCandless)
 
+ * LUCENE-3609: Fix regression in BooleanFilter, introduced in Lucene 3.5,
+   to correctly handle minShouldMatch behaviour of previous versions.
+   (Shay Banon, Uwe Schindler)
+ 
 Documentation
 
  * LUCENE-3599: Javadocs for DistanceUtils.haversine() were incorrectly 
diff --git a/modules/queries/src/java/org/apache/lucene/queries/BooleanFilter.java b/modules/queries/src/java/org/apache/lucene/queries/BooleanFilter.java
index f5ef73f..88af526 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/BooleanFilter.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/BooleanFilter.java
@@ -54,8 +54,10 @@ public class BooleanFilter extends Filter implements Iterable<FilterClause> {
     FixedBitSet res = null;
     final IndexReader reader = context.reader;
     
+    boolean hasShouldClauses = false;
     for (final FilterClause fc : clauses) {
       if (fc.getOccur() == Occur.SHOULD) {
+        hasShouldClauses = true;
         final DocIdSetIterator disi = getDISI(fc.getFilter(), context);
         if (disi == null) continue;
         if (res == null) {
@@ -64,10 +66,13 @@ public class BooleanFilter extends Filter implements Iterable<FilterClause> {
         res.or(disi);
       }
     }
+    if (hasShouldClauses && res == null)
+      return DocIdSet.EMPTY_DOCIDSET;
     
     for (final FilterClause fc : clauses) {
       if (fc.getOccur() == Occur.MUST_NOT) {
         if (res == null) {
+          assert !hasShouldClauses;
           res = new FixedBitSet(reader.maxDoc());
           res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs
         }
diff --git a/modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java b/modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java
index 6f68222..ba07b79 100644
--- a/modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java
+++ b/modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java
@@ -36,6 +36,7 @@ import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.QueryWrapperFilter;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.Bits;
+import org.apache.lucene.util.FixedBitSet;
 import org.apache.lucene.util.LuceneTestCase;
 
 import java.io.IOException;
@@ -92,6 +93,15 @@ public class BooleanFilterTest extends LuceneTestCase {
     return new QueryWrapperFilter(new TermQuery(new Term(field, text)));
   }
   
+  private Filter getEmptyFilter() {
+    return new Filter() {
+      @Override
+      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {
+        return new FixedBitSet(context.reader.maxDoc());
+      }
+    };
+  }
+
   private Filter getNullDISFilter() {
     return new Filter() {
       @Override
@@ -309,4 +319,21 @@ public class BooleanFilterTest extends LuceneTestCase {
     booleanFilter.add(getNullDISIFilter(), Occur.MUST_NOT);
     tstFilterCard("A single MUST_NOT filter that returns a null DIS should be invisible", 5, booleanFilter);
   }
+  
+  public void testNonMatchingShouldsAndMusts() throws Exception {
+    BooleanFilter booleanFilter = new BooleanFilter();
+    booleanFilter.add(getEmptyFilter(), Occur.SHOULD);
+    booleanFilter.add(getTermsFilter("accessRights", "admin"), Occur.MUST);
+    tstFilterCard(">0 shoulds with no matches should return no docs", 0, booleanFilter);
+    
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(getNullDISFilter(), Occur.SHOULD);
+    booleanFilter.add(getTermsFilter("accessRights", "admin"), Occur.MUST);
+    tstFilterCard(">0 shoulds with no matches should return no docs", 0, booleanFilter);
+    
+    booleanFilter = new BooleanFilter();
+    booleanFilter.add(getNullDISIFilter(), Occur.SHOULD);
+    booleanFilter.add(getTermsFilter("accessRights", "admin"), Occur.MUST);
+    tstFilterCard(">0 shoulds with no matches should return no docs", 0, booleanFilter);
+  }
 }

