GitDiffStart: 6f00fa6f7d123ffd74413038aa8fb7791c080e2a | Thu Feb 5 19:41:55 2009 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index a8d3c7d..5dc4d1f 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -168,6 +168,9 @@ Optimizations
     with reusable priority queue entries to reduce the amount of
     generated garbage during searching.  (Mark Miller via yonik)
 
+ 6. SOLR-971: Replace StringBuffer with StringBuilder for instances that do not require thread-safety.
+    (Kay Kay via shalin)
+
 Bug Fixes
 ----------------------
  1. SOLR-774: Fixed logging level display (Sean Timm via Otis Gospodnetic)
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.java
index ee10797..0e51e08 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.java
@@ -163,7 +163,7 @@ public class DataConfig {
 
     public Script(Element e) {
       this.language = getStringAttribute(e, "language", "JavaScript");
-      StringBuffer buffer = new StringBuffer();
+      StringBuilder buffer = new StringBuilder();
       String script = getTxt(e, buffer);
       if (script != null)
         this.script = script.trim();
@@ -268,8 +268,7 @@ public class DataConfig {
     return m;
   }
 
-  public static String getTxt(Node elem, StringBuffer buffer) {
-
+  public static String getTxt(Node elem, StringBuilder buffer) {
     if (elem.getNodeType() != Node.CDATA_SECTION_NODE) {
       NodeList childs = elem.getChildNodes();
       for (int i = 0; i < childs.getLength(); i++) {
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java
index 6000b53..824ae28 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java
@@ -136,7 +136,7 @@ public class DataImporter {
     }
 
     if (!errors.isEmpty()) {
-      StringBuffer sb = new StringBuffer("There are errors in the Schema\n");
+      StringBuilder sb = new StringBuilder("There are errors in the Schema\n");
       for (String error : errors) {
         sb.append(error).append("\n");
       }
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor.java
index 384958b..5f9a1d7 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor.java
@@ -129,7 +129,7 @@ public class SqlEntityProcessor extends EntityProcessorBase {
     if(deltaImportQuery != null){
       return resolver.replaceTokens(deltaImportQuery);
     }
-    StringBuffer sb = new StringBuffer(queryString);
+    StringBuilder sb = new StringBuilder(queryString);
     if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {
       sb.append(" and ");
     } else {
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString.java
index 7278dac..dfffd57 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString.java
@@ -86,7 +86,7 @@ public class TemplateString {
       s[i] = val == null ? "" : getObjectAsString(val);
     }
 
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     for (int i = 0; i < pcs.size(); i++) {
       sb.append(pcs.get(i));
       if (i < s.length) {
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolverImpl.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolverImpl.java
index 5acb180..c262b19 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolverImpl.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolverImpl.java
@@ -107,7 +107,7 @@ public class VariableResolverImpl extends VariableResolver {
   private String mergeAll(String[] parts, int i) {
     if (i == parts.length - 1)
       return parts[parts.length - 1];
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     for (int j = i; j < parts.length; j++) {
       sb.append(parts[j]);
       if (j < parts.length - 1)
diff --git a/contrib/javascript/example/reuters/importer/java/org/apache/solr/solrjs/ReutersService.java b/contrib/javascript/example/reuters/importer/java/org/apache/solr/solrjs/ReutersService.java
index 864a394..5d176e6 100644
--- a/contrib/javascript/example/reuters/importer/java/org/apache/solr/solrjs/ReutersService.java
+++ b/contrib/javascript/example/reuters/importer/java/org/apache/solr/solrjs/ReutersService.java
@@ -235,7 +235,7 @@ public class ReutersService {
 	 * @throws java.io.IOException
 	 */
 	private static String readFileAsString(File file) throws java.io.IOException {
-        StringBuffer fileData = new StringBuffer(1000);
+        StringBuilder fileData = new StringBuilder(1000);
         BufferedReader reader = new BufferedReader(new FileReader(file));
         char[] buf = new char[1024];
         int numRead=0;
diff --git a/src/common/org/apache/solr/common/util/DOMUtil.java b/src/common/org/apache/solr/common/util/DOMUtil.java
index 206f4b0..4494b97 100644
--- a/src/common/org/apache/solr/common/util/DOMUtil.java
+++ b/src/common/org/apache/solr/common/util/DOMUtil.java
@@ -287,7 +287,7 @@ public class DOMUtil {
     List<String> propertyRefs = new ArrayList<String>();
     parsePropertyString(value, fragments, propertyRefs);
 
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     Iterator<String> i = fragments.iterator();
     Iterator<String> j = propertyRefs.iterator();
 
diff --git a/src/common/org/apache/solr/common/util/NamedList.java b/src/common/org/apache/solr/common/util/NamedList.java
index 4439f8c..e1d1025 100644
--- a/src/common/org/apache/solr/common/util/NamedList.java
+++ b/src/common/org/apache/solr/common/util/NamedList.java
@@ -198,7 +198,7 @@ public class NamedList<T> implements Cloneable, Serializable, Iterable<Map.Entry
   }
 
   public String toString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append('{');
     int sz = size();
     for (int i=0; i<sz; i++) {
diff --git a/src/java/org/apache/solr/analysis/BaseCharFilter.java b/src/java/org/apache/solr/analysis/BaseCharFilter.java
index 2dec328..f7457a4 100644
--- a/src/java/org/apache/solr/analysis/BaseCharFilter.java
+++ b/src/java/org/apache/solr/analysis/BaseCharFilter.java
@@ -63,7 +63,7 @@ public abstract class BaseCharFilter extends CharFilter {
     }
 
     public String toString(){
-      StringBuffer sb = new StringBuffer();
+      StringBuilder sb = new StringBuilder();
       sb.append('(');
       sb.append(pos);
       sb.append(',');
diff --git a/src/java/org/apache/solr/search/ConstantScorePrefixQuery.java b/src/java/org/apache/solr/search/ConstantScorePrefixQuery.java
index c1665ba..228e647 100644
--- a/src/java/org/apache/solr/search/ConstantScorePrefixQuery.java
+++ b/src/java/org/apache/solr/search/ConstantScorePrefixQuery.java
@@ -49,7 +49,7 @@ public class ConstantScorePrefixQuery extends Query {
   /** Prints a user-readable version of this query. */
   public String toString(String field)
   {
-    StringBuffer buffer = new StringBuffer();
+    StringBuilder buffer = new StringBuilder();
     if (!prefix.field().equals(field)) {
       buffer.append(prefix.field());
       buffer.append(":");
diff --git a/src/java/org/apache/solr/util/TestHarness.java b/src/java/org/apache/solr/util/TestHarness.java
index c0e33a6..ade2511 100644
--- a/src/java/org/apache/solr/util/TestHarness.java
+++ b/src/java/org/apache/solr/util/TestHarness.java
@@ -263,7 +263,7 @@ public class TestHarness {
   public String validateAddDoc(String... fieldsAndValues)
     throws XPathExpressionException, SAXException, IOException {
 
-    StringBuffer buf = new StringBuffer();
+    StringBuilder buf = new StringBuilder();
     buf.append("<add>");
     appendSimpleDoc(buf, fieldsAndValues);
     buf.append("</add>");
@@ -392,7 +392,19 @@ public class TestHarness {
   /**
    * A helper that adds an xml &lt;doc&gt; containing all of the
    * fields and values specified (odds are fields, evens are values)
+   * to a StringBuilder
+   */
+  public void appendSimpleDoc(StringBuilder buf, String... fieldsAndValues)
+    throws IOException {
+
+    buf.append(makeSimpleDoc(fieldsAndValues));
+  }
+
+  /**
+   * A helper that adds an xml &lt;doc&gt; containing all of the
+   * fields and values specified (odds are fields, evens are values)
    * to a StringBuffer.
+   * @deprecated see {@link #appendSimpleDoc(StringBuilder, String...)}
    */
   public void appendSimpleDoc(StringBuffer buf, String... fieldsAndValues)
     throws IOException {
diff --git a/src/solrj/org/apache/solr/client/solrj/util/ClientUtils.java b/src/solrj/org/apache/solr/client/solrj/util/ClientUtils.java
index 0c9e046..bf65a1a 100644
--- a/src/solrj/org/apache/solr/client/solrj/util/ClientUtils.java
+++ b/src/solrj/org/apache/solr/client/solrj/util/ClientUtils.java
@@ -176,7 +176,7 @@ public class ClientUtils
    * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping Special Characters
    */
   public static String escapeQueryChars(String s) {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     for (int i = 0; i < s.length(); i++) {
       char c = s.charAt(i);
       // These characters are part of the query syntax and must be escaped
diff --git a/src/test/org/apache/solr/analysis/BaseTokenTestCase.java b/src/test/org/apache/solr/analysis/BaseTokenTestCase.java
index 322b19f..cf2c17b 100644
--- a/src/test/org/apache/solr/analysis/BaseTokenTestCase.java
+++ b/src/test/org/apache/solr/analysis/BaseTokenTestCase.java
@@ -34,7 +34,7 @@ import junit.framework.TestCase;
 public abstract class BaseTokenTestCase extends AnalysisTestCase
 {
   public static String tsToString(TokenStream in) throws IOException {
-    StringBuffer out = new StringBuffer();
+    StringBuilder out = new StringBuilder();
     Token t = in.next();
     if (null != t)
       out.append(new String(t.termBuffer(), 0, t.termLength()));
diff --git a/src/test/org/apache/solr/common/util/IteratorChainTest.java b/src/test/org/apache/solr/common/util/IteratorChainTest.java
index d6708cc..bf2f286 100644
--- a/src/test/org/apache/solr/common/util/IteratorChainTest.java
+++ b/src/test/org/apache/solr/common/util/IteratorChainTest.java
@@ -96,7 +96,7 @@ public class IteratorChainTest extends TestCase {
   
   /** dump the contents of it to a String */
   private String getString(Iterator<String> it) {
-    final StringBuffer sb = new StringBuffer();
+    final StringBuilder sb = new StringBuilder();
     sb.append("");
     while(it.hasNext()) {
       sb.append(it.next());

