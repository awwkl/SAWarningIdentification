GitDiffStart: c711709168db6f719ac9e6acf22e3441a9ff7710 | Mon Oct 18 02:54:20 2010 +0000
diff --git a/lucene/contrib/CHANGES.txt b/lucene/contrib/CHANGES.txt
index cc7674c..3f0c67e 100644
--- a/lucene/contrib/CHANGES.txt
+++ b/lucene/contrib/CHANGES.txt
@@ -154,7 +154,11 @@ API Changes
 
  * LUCENE-2626: FastVectorHighlighter: enable FragListBuilder and FragmentsBuilder
    to be set per-field override. (Koji Sekiguchi)
-   
+
+ * LUCENE-2712: FieldBoostMapAttribute in contrib/queryparser was changed from 
+   a Map<CharSequence,Float> to a Map<String,Float>. Per the CharSequence javadoc,
+   CharSequence is inappropriate as a map key. (Robert Muir)
+    
 New features
 
  * LUCENE-2306: Add NumericRangeFilter and NumericRangeQuery support to XMLQueryParser.
diff --git a/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/MultiFieldQueryParserWrapper.java b/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/MultiFieldQueryParserWrapper.java
index 8cb3db5..46eb864 100644
--- a/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/MultiFieldQueryParserWrapper.java
+++ b/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/MultiFieldQueryParserWrapper.java
@@ -74,8 +74,7 @@ public class MultiFieldQueryParserWrapper extends QueryParserWrapper {
    * what fields they appear.
    * </p>
    */
-  @SuppressWarnings("unchecked")
-public MultiFieldQueryParserWrapper(String[] fields, Analyzer analyzer, Map boosts) {
+public MultiFieldQueryParserWrapper(String[] fields, Analyzer analyzer, Map<String, Float> boosts) {
     this(fields, analyzer);
     StandardQueryParser qpHelper = getQueryParserHelper();
 
diff --git a/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/QueryParserWrapper.java b/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/QueryParserWrapper.java
index 7572d7a..839cfa3 100644
--- a/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/QueryParserWrapper.java
+++ b/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/QueryParserWrapper.java
@@ -49,6 +49,7 @@ import org.apache.lucene.queryParser.standard.config.RangeCollatorAttribute;
 import org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler;
 import org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser;
 import org.apache.lucene.queryParser.standard.processors.StandardQueryNodeProcessorPipeline;
+import org.apache.lucene.search.BooleanClause;
 import org.apache.lucene.search.FuzzyQuery;
 import org.apache.lucene.search.MultiTermQuery;
 import org.apache.lucene.search.Query;
@@ -462,8 +463,7 @@ public class QueryParserWrapper {
     throw new UnsupportedOperationException();
   }
 
-  @SuppressWarnings("unchecked")
-  protected Query getBooleanQuery(List clauses, boolean disableCoord)
+  protected Query getBooleanQuery(List<BooleanClause> clauses, boolean disableCoord)
       throws ParseException {
     throw new UnsupportedOperationException();
   }
diff --git a/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser.java b/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser.java
index 30229f2..1cadb1b 100644
--- a/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser.java
+++ b/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/StandardQueryParser.java
@@ -413,7 +413,7 @@ public class StandardQueryParser extends QueryParserHelper {
     attr.setFuzzyMinSimilarity(fuzzyMinSim);
   }
   
-  public void setFieldsBoost(Map<CharSequence, Float> boosts) {
+  public void setFieldsBoost(Map<String, Float> boosts) {
     FieldBoostMapAttribute attr = getQueryConfigHandler().addAttribute(FieldBoostMapAttribute.class);
     attr.setFieldBoostMap(boosts);
   }
diff --git a/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldBoostMapAttribute.java b/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldBoostMapAttribute.java
index ba0a702..81965be 100644
--- a/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldBoostMapAttribute.java
+++ b/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldBoostMapAttribute.java
@@ -30,6 +30,6 @@ public interface FieldBoostMapAttribute extends Attribute {
   /**
    * @param boosts a mapping from field name to its default boost
    */
-  public void setFieldBoostMap(Map<CharSequence, Float> boosts);
-  public Map<CharSequence, Float> getFieldBoostMap();
+  public void setFieldBoostMap(Map<String, Float> boosts);
+  public Map<String, Float> getFieldBoostMap();
 }
diff --git a/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldBoostMapAttributeImpl.java b/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldBoostMapAttributeImpl.java
index 853b4ce..debcc56 100644
--- a/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldBoostMapAttributeImpl.java
+++ b/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/config/FieldBoostMapAttributeImpl.java
@@ -38,18 +38,18 @@ public class FieldBoostMapAttributeImpl extends AttributeImpl
 
   private static final long serialVersionUID = -2104763012523049527L;
 
-  private Map<CharSequence, Float> boosts = new LinkedHashMap<CharSequence, Float>();
+  private Map<String, Float> boosts = new LinkedHashMap<String, Float>();
   
 
   public FieldBoostMapAttributeImpl() {
     // empty constructor
   }
 
-  public void setFieldBoostMap(Map<CharSequence, Float> boosts) {
+  public void setFieldBoostMap(Map<String, Float> boosts) {
     this.boosts = boosts;
   }
   
-  public Map<CharSequence, Float> getFieldBoostMap() {
+  public Map<String, Float> getFieldBoostMap() {
     return this.boosts;
   }
 
diff --git a/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper.java b/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper.java
index f74727a..9eb4c2c 100644
--- a/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper.java
+++ b/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper.java
@@ -143,7 +143,7 @@ public class TestMultiFieldQPHelper extends LuceneTestCase {
   }
 
   public void testBoostsSimple() throws Exception {
-    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();
+    Map<String,Float> boosts = new HashMap<String,Float>();
     boosts.put("b", Float.valueOf(5));
     boosts.put("t", Float.valueOf(10));
     String[] fields = { "b", "t" };
diff --git a/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper.java b/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper.java
index 3d0ae08..5a04882 100644
--- a/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper.java
+++ b/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper.java
@@ -144,7 +144,7 @@ public class TestMultiFieldQueryParserWrapper extends LuceneTestCase {
   }
 
   public void testBoostsSimple() throws Exception {
-    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();
+    Map<String,Float> boosts = new HashMap<String,Float>();
     boosts.put("b", Float.valueOf(5));
     boosts.put("t", Float.valueOf(10));
     String[] fields = { "b", "t" };

