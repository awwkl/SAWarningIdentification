GitDiffStart: 8c037c2115de181ded8b524abb171390a189c426 | Tue May 22 22:00:08 2012 +0000
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer.java b/solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer.java
index 69b8116..6f0fc4d 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer.java
@@ -179,6 +179,17 @@ public abstract class SolrServer implements Serializable
     return new UpdateRequest().setAction( UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher ).process( this );
   }
 
+  /**
+   * Performs an explicit commit, causing pending documents to be committed for indexing
+   * @param waitFlush  block until index changes are flushed to disk
+   * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible
+   * @throws SolrServerException
+   * @throws IOException
+   */
+  public UpdateResponse commit( boolean waitFlush, boolean waitSearcher, boolean softCommit ) throws SolrServerException, IOException {
+    return new UpdateRequest().setAction( UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher, softCommit ).process( this );
+  }
+
   /** 
    * Performs an explicit optimize, causing a merge of all segments to one.
    * <p>
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/request/AbstractUpdateRequest.java b/solr/solrj/src/java/org/apache/solr/client/solrj/request/AbstractUpdateRequest.java
index 7d73b5f..a8805ba 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/request/AbstractUpdateRequest.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/request/AbstractUpdateRequest.java
@@ -48,7 +48,15 @@ public abstract class AbstractUpdateRequest extends SolrRequest {
     return setAction(action, waitFlush, waitSearcher, 1);
   }
 
+  public AbstractUpdateRequest setAction(ACTION action, boolean waitFlush, boolean waitSearcher, boolean softCommit ) {
+    return setAction(action, waitFlush, waitSearcher, softCommit, 1);
+  }
+
   public AbstractUpdateRequest setAction(ACTION action, boolean waitFlush, boolean waitSearcher, int maxSegments ) {
+    return setAction(action, waitFlush, waitSearcher, false, maxSegments);
+  }
+
+  public AbstractUpdateRequest setAction(ACTION action, boolean waitFlush, boolean waitSearcher, boolean softCommit, int maxSegments ) {
     if (params == null)
       params = new ModifiableSolrParams();
 
@@ -58,17 +66,22 @@ public abstract class AbstractUpdateRequest extends SolrRequest {
     }
     else if( action == ACTION.COMMIT ) {
       params.set( UpdateParams.COMMIT, "true" );
+      params.set( UpdateParams.SOFT_COMMIT, String.valueOf(softCommit));
     }
     params.set( UpdateParams.WAIT_SEARCHER, String.valueOf(waitSearcher));
     return this;
   }
 
-  public AbstractUpdateRequest setAction(ACTION action, boolean waitFlush, boolean waitSearcher, int maxSegments , boolean expungeDeletes) {
-    setAction(action, waitFlush, waitSearcher,maxSegments) ;
+  public AbstractUpdateRequest setAction(ACTION action, boolean waitFlush, boolean waitSearcher, int maxSegments , boolean softCommit, boolean expungeDeletes) {
+    setAction(action, waitFlush, waitSearcher,softCommit,maxSegments) ;
     params.set(UpdateParams.EXPUNGE_DELETES, String.valueOf(expungeDeletes));
     return this;
   }
 
+  public AbstractUpdateRequest setAction(ACTION action, boolean waitFlush, boolean waitSearcher, int maxSegments , boolean expungeDeletes) {
+    return setAction(action, waitFlush, waitSearcher,maxSegments,false,expungeDeletes);
+  }
+
   /**
    * @since Solr 1.4
    */

