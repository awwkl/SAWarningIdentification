GitDiffStart: a456d7e11234303fcbdb4cfb48e340e3a9de529e | Sun Jan 29 13:37:43 2012 +0000
diff --git a/lucene/src/java/org/apache/lucene/index/AtomicIndexReader.java b/lucene/src/java/org/apache/lucene/index/AtomicIndexReader.java
index a33684f..bc5b13e 100644
--- a/lucene/src/java/org/apache/lucene/index/AtomicIndexReader.java
+++ b/lucene/src/java/org/apache/lucene/index/AtomicIndexReader.java
@@ -68,12 +68,17 @@ import org.apache.lucene.util.ReaderUtil;         // for javadocs
 */
 public abstract class AtomicIndexReader extends IndexReader {
 
+  private final AtomicReaderContext readerContext = new AtomicReaderContext(this);
+  
   protected AtomicIndexReader() {
     super();
   }
 
   @Override
-  public abstract AtomicReaderContext getTopReaderContext();
+  public final AtomicReaderContext getTopReaderContext() {
+    ensureOpen();
+    return readerContext;
+  }
 
   /** Returns true if there are norms stored for this field. */
   public boolean hasNorms(String field) throws IOException {
diff --git a/lucene/src/java/org/apache/lucene/index/BaseMultiReader.java b/lucene/src/java/org/apache/lucene/index/BaseMultiReader.java
index 8d5fbe1..3b0828a 100644
--- a/lucene/src/java/org/apache/lucene/index/BaseMultiReader.java
+++ b/lucene/src/java/org/apache/lucene/index/BaseMultiReader.java
@@ -26,7 +26,6 @@ import org.apache.lucene.util.ReaderUtil;
 abstract class BaseMultiReader<R extends IndexReader> extends CompositeIndexReader {
   protected final R[] subReaders;
   protected final int[] starts;       // 1st docno for each segment
-  private final CompositeReaderContext topLevelContext;
   private final int maxDoc;
   private final int numDocs;
   private final boolean hasDeletions;
@@ -40,7 +39,6 @@ abstract class BaseMultiReader<R extends IndexReader> extends CompositeIndexRead
       starts[i] = maxDoc;
       maxDoc += subReaders[i].maxDoc();      // compute maxDocs
       numDocs += subReaders[i].numDocs();    // compute numDocs
-
       if (subReaders[i].hasDeletions()) {
         hasDeletions = true;
       }
@@ -49,7 +47,6 @@ abstract class BaseMultiReader<R extends IndexReader> extends CompositeIndexRead
     this.maxDoc = maxDoc;
     this.numDocs = numDocs;
     this.hasDeletions = hasDeletions;
-    topLevelContext = (CompositeReaderContext) ReaderUtil.buildReaderContext(this);
   }
 
   @Override
@@ -106,9 +103,4 @@ abstract class BaseMultiReader<R extends IndexReader> extends CompositeIndexRead
   public IndexReader[] getSequentialSubReaders() {
     return subReaders;
   }
-  
-  @Override
-  public CompositeReaderContext getTopReaderContext() {
-    return topLevelContext;
-  }
 }
diff --git a/lucene/src/java/org/apache/lucene/index/CompositeIndexReader.java b/lucene/src/java/org/apache/lucene/index/CompositeIndexReader.java
index b208845..aca7cb3 100644
--- a/lucene/src/java/org/apache/lucene/index/CompositeIndexReader.java
+++ b/lucene/src/java/org/apache/lucene/index/CompositeIndexReader.java
@@ -34,6 +34,7 @@ import org.apache.lucene.store.*;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.ReaderUtil;         // for javadocs
+import org.apache.lucene.util.SetOnce;
 
 /** IndexReader is an abstract class, providing an interface for accessing an
  index.  Search of an index is done entirely through this abstract interface,
@@ -69,6 +70,8 @@ import org.apache.lucene.util.ReaderUtil;         // for javadocs
 */
 public abstract class CompositeIndexReader extends IndexReader {
 
+  private CompositeReaderContext readerContext = null; // lazy init
+
   protected CompositeIndexReader() { 
     super();
   }
@@ -90,11 +93,19 @@ public abstract class CompositeIndexReader extends IndexReader {
   }
 
   @Override
-  public abstract CompositeReaderContext getTopReaderContext();
-
+  public final CompositeReaderContext getTopReaderContext() {
+    ensureOpen();
+    // lazy init without thread safety for perf resaons: Building the readerContext twice does not hurt!
+    if (readerContext == null) {
+      assert getSequentialSubReaders() != null;
+      readerContext = (CompositeReaderContext) ReaderUtil.buildReaderContext(this);
+    }
+    return readerContext;
+  }
+  
   /** Expert: returns the sequential sub readers that this
-   *  reader is logically composed of. If this reader is not composed
-   *  of sequential child readers, it should return null.
+   *  reader is logically composed of. It contrast to previous
+   *  Lucene versions may not return null.
    *  If this method returns an empty array, that means this
    *  reader is a null reader (for example a MultiReader
    *  that has no sub readers).
diff --git a/lucene/src/java/org/apache/lucene/index/FilterIndexReader.java b/lucene/src/java/org/apache/lucene/index/FilterIndexReader.java
index d2c2d6b..f3452f8 100644
--- a/lucene/src/java/org/apache/lucene/index/FilterIndexReader.java
+++ b/lucene/src/java/org/apache/lucene/index/FilterIndexReader.java
@@ -351,12 +351,6 @@ public class FilterIndexReader extends AtomicIndexReader {
   }
   
   @Override
-  public AtomicReaderContext getTopReaderContext() {
-    ensureOpen();
-    return in.getTopReaderContext();
-  }
-
-  @Override
   public Fields fields() throws IOException {
     ensureOpen();
     return in.fields();
diff --git a/lucene/src/java/org/apache/lucene/index/ParallelReader.java b/lucene/src/java/org/apache/lucene/index/ParallelReader.java
index 59210be..f46ab4e 100644
--- a/lucene/src/java/org/apache/lucene/index/ParallelReader.java
+++ b/lucene/src/java/org/apache/lucene/index/ParallelReader.java
@@ -49,7 +49,6 @@ public class ParallelReader extends AtomicIndexReader {
   private Map<AtomicIndexReader,Collection<String>> readerToFields = new HashMap<AtomicIndexReader,Collection<String>>();
   private List<AtomicIndexReader> storedFieldReaders = new ArrayList<AtomicIndexReader>();
   private Map<String, DocValues> normsCache = new HashMap<String,DocValues>();
-  private final AtomicReaderContext topLevelReaderContext = new AtomicReaderContext(this);
   private int maxDoc;
   private int numDocs;
   private boolean hasDeletions;
@@ -285,12 +284,6 @@ public class ParallelReader extends AtomicIndexReader {
     }
   }
 
-  @Override
-  public AtomicReaderContext getTopReaderContext() {
-    ensureOpen();
-    return topLevelReaderContext;
-  }
-
   // TODO: I suspect this is completely untested!!!!!
   @Override
   public DocValues docValues(String field) throws IOException {
diff --git a/lucene/src/java/org/apache/lucene/index/SegmentReader.java b/lucene/src/java/org/apache/lucene/index/SegmentReader.java
index d51bcfc..1403f41 100644
--- a/lucene/src/java/org/apache/lucene/index/SegmentReader.java
+++ b/lucene/src/java/org/apache/lucene/index/SegmentReader.java
@@ -33,8 +33,6 @@ import org.apache.lucene.util.Bits;
 public final class SegmentReader extends AtomicIndexReader {
 
   private final SegmentInfo si;
-  private final AtomicReaderContext readerContext = new AtomicReaderContext(this);
-  
   private final Bits liveDocs;
 
   // Normally set to si.docCount - si.delDocCount, unless we
@@ -186,12 +184,6 @@ public final class SegmentReader extends AtomicIndexReader {
     return si.toString(core.dir, si.docCount - numDocs - si.getDelCount());
   }
   
-  @Override
-  public AtomicReaderContext getTopReaderContext() {
-    ensureOpen();
-    return readerContext;
-  }
-
   /**
    * Return the name of the segment this reader is reading.
    */
diff --git a/lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper.java b/lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper.java
index e5c05cc..5f94bf2 100644
--- a/lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper.java
+++ b/lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper.java
@@ -53,15 +53,26 @@ import org.apache.lucene.index.MultiReader; // javadoc
 public final class SlowMultiReaderWrapper extends AtomicIndexReader {
 
   private final CompositeIndexReader in;
-  private final AtomicReaderContext readerContext;
   private final Map<String, DocValues> normsCache = new HashMap<String, DocValues>();
   private final Fields fields;
   private final Bits liveDocs;
   
-  public SlowMultiReaderWrapper(CompositeIndexReader other) throws IOException {
+  /** This method is sugar for getting an {@link AtomicIndexReader} from
+   * an {@link IndexReader} of any kind. If the reader is already atomic,
+   * it is returned unchanged, otherwise wrapped by this class.
+   */
+  public static AtomicIndexReader wrap(IndexReader reader) throws IOException {
+    if (reader instanceof CompositeIndexReader) {
+      return new SlowMultiReaderWrapper((CompositeIndexReader) reader);
+    } else {
+      assert reader instanceof AtomicIndexReader;
+      return (AtomicIndexReader) reader;
+    }
+  }
+  
+  public SlowMultiReaderWrapper(CompositeIndexReader reader) throws IOException {
     super();
-    in = other;
-    readerContext = new AtomicReaderContext(this);
+    in = reader;
     fields = MultiFields.getFields(in);
     liveDocs = MultiFields.getLiveDocs(in);
   }
@@ -124,12 +135,6 @@ public final class SlowMultiReaderWrapper extends AtomicIndexReader {
     ensureOpen();
     return liveDocs;
   }
-  
-  @Override
-  public AtomicReaderContext getTopReaderContext() {
-    ensureOpen();
-    return readerContext;
-  }
 
   @Override
   public FieldInfos getFieldInfos() {
@@ -145,7 +150,7 @@ public final class SlowMultiReaderWrapper extends AtomicIndexReader {
 
   @Override
   protected void doClose() throws IOException {
-    // TODO: as this is a wrapper, should we really close the delegate?
+    // nocommit: as this is a wrapper, should we really close the delegate?
     in.close();
   }
 }

