GitDiffStart: 32fb624ebca6cd627877c69c8836fd3d0549e633 | Thu Sep 22 13:38:58 2005 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index 4d5979c..c1475ea 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -213,6 +213,10 @@ Bug fixes
     inside a BooleanQuery.
     (Hans Hjelm and Scotty Allen via Daniel Naber, Bug #35626)
 
+11. Fixed SnowballFilter to pass through the position increment from
+    the original token.
+    (Yonik Seeley via Erik Hatcher, LUCENE-437)
+
 Optimizations
      
  1. Disk usage (peak requirements during indexing and optimization)
diff --git a/contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter.java b/contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter.java
index bbb39f9..5385719 100644
--- a/contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter.java
+++ b/contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter.java
@@ -69,7 +69,10 @@ public class SnowballFilter extends TokenFilter {
     } catch (Exception e) {
       throw new RuntimeException(e.toString());
     }
-    return new Token(stemmer.getCurrent(),
-                     token.startOffset(), token.endOffset(), token.type());
+    
+    Token newToken = new Token(stemmer.getCurrent(),
+                      token.startOffset(), token.endOffset(), token.type());
+    newToken.setPositionIncrement(token.getPositionIncrement());
+    return newToken;
   }
 }
diff --git a/contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java b/contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java
index 581b789..f7d9681 100644
--- a/contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java
+++ b/contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java
@@ -55,6 +55,7 @@ package org.apache.lucene.analysis.snowball;
  */
 
 import java.io.*;
+
 import junit.framework.*;
 
 import org.apache.lucene.analysis.*;
@@ -65,7 +66,7 @@ public class TestSnowball extends TestCase {
                                String input,
                                String[] output) throws Exception {
     TokenStream ts = a.tokenStream("dummy", new StringReader(input));
-    for (int i=0; i<output.length; i++) {
+    for (int i = 0; i < output.length; i++) {
       Token t = ts.next();
       assertNotNull(t);
       assertEquals(output[i], t.termText());
@@ -77,7 +78,30 @@ public class TestSnowball extends TestCase {
   public void testEnglish() throws Exception {
     Analyzer a = new SnowballAnalyzer("English");
     assertAnalyzesTo(a, "he abhorred accents",
-                     new String[] { "he", "abhor", "accent" });
+        new String[]{"he", "abhor", "accent"});
+  }
+
+
+  public void testFilterTokens() throws Exception {
+    final Token tok = new Token("accents", 2, 7, "wrd");
+    tok.setPositionIncrement(3);
+
+    SnowballFilter filter = new SnowballFilter(
+        new TokenStream() {
+          public Token next() {
+            return tok;
+          }
+        },
+        "English"
+    );
+
+    Token newtok = filter.next();
+
+    assertEquals("accent", newtok.termText());
+    assertEquals(2, newtok.startOffset());
+    assertEquals(7, newtok.endOffset());
+    assertEquals("wrd", newtok.type());
+    assertEquals(3, newtok.getPositionIncrement());
   }
 }
 

