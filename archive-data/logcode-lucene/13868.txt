GitDiffStart: 4a654875b94c3be7d2da735936b46f2dcb90d266 | Sun Jan 29 17:14:48 2012 +0000
diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java b/lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java
index 98e43a3..4d11f14 100644
--- a/lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java
+++ b/lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java
@@ -71,7 +71,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     
     IndexWriter writer = new IndexWriter(dir1, iwc);
     for (int i = 0; i < 97 ; i++) {
-      IndexReader reader = writer.getReader();
+      DirectoryReader reader = writer.getReader();
       if (i == 0) {
         writer.addDocument(DocHelper.createDocument(i, "x", 1 + random.nextInt(5)));
       } else {
@@ -96,7 +96,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
       reader.close();
     }
     writer.forceMerge(1); // make sure all merging is done etc.
-    IndexReader reader = writer.getReader();
+    DirectoryReader reader = writer.getReader();
     writer.commit(); // no changes that are not visible to the reader
     assertTrue(reader.isCurrent());
     writer.close();
@@ -137,7 +137,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     // writer.flush(false, true, true);
 
     // get a reader
-    IndexReader r1 = writer.getReader();
+    DirectoryReader r1 = writer.getReader();
     assertTrue(r1.isCurrent());
 
     String id10 = r1.document(10).getField("id").stringValue();
@@ -148,7 +148,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     writer.updateDocument(new Term("id", id10), newDoc);
     assertFalse(r1.isCurrent());
 
-    IndexReader r2 = writer.getReader();
+    DirectoryReader r2 = writer.getReader();
     assertTrue(r2.isCurrent());
     assertEquals(0, count(new Term("id", id10), r2));
     if (VERBOSE) {
@@ -160,7 +160,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     writer.close();
     assertTrue(r2.isCurrent());
     
-    IndexReader r3 = IndexReader.open(dir1);
+    DirectoryReader r3 = IndexReader.open(dir1);
     assertTrue(r3.isCurrent());
     assertTrue(r2.isCurrent());
     assertEquals(0, count(new Term("id", id10), r3));
@@ -198,7 +198,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     writer = new IndexWriter(dir, iwc);
     doc = new Document();
     doc.add(newField("field", "a b c", TextField.TYPE_UNSTORED));
-    IndexReader nrtReader = writer.getReader();
+    DirectoryReader nrtReader = writer.getReader();
     assertTrue(nrtReader.isCurrent());
     writer.addDocument(doc);
     assertFalse(nrtReader.isCurrent()); // should see the changes
@@ -206,7 +206,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     assertFalse(nrtReader.isCurrent());
     nrtReader.close();
     
-    IndexReader dirReader = IndexReader.open(dir);
+    DirectoryReader dirReader = IndexReader.open(dir);
     nrtReader = writer.getReader();
     
     assertTrue(dirReader.isCurrent());
@@ -253,13 +253,13 @@ public class TestIndexWriterReader extends LuceneTestCase {
     createIndexNoClose(!doFullMerge, "index2", writer2);
     writer2.close();
 
-    IndexReader r0 = writer.getReader();
+    DirectoryReader r0 = writer.getReader();
     assertTrue(r0.isCurrent());
     writer.addIndexes(dir2);
     assertFalse(r0.isCurrent());
     r0.close();
 
-    IndexReader r1 = writer.getReader();
+    DirectoryReader r1 = writer.getReader();
     assertTrue(r1.isCurrent());
 
     writer.commit();
@@ -602,7 +602,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
   private static class MyWarmer extends IndexWriter.IndexReaderWarmer {
     int warmCount;
     @Override
-    public void warm(IndexReader reader) throws IOException {
+    public void warm(AtomicIndexReader reader) throws IOException {
       warmCount++;
     }
   }
@@ -656,7 +656,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     createIndexNoClose(false, "test", writer);
 
     // get a reader to put writer into near real-time mode
-    IndexReader r1 = writer.getReader();
+    DirectoryReader r1 = writer.getReader();
     _TestUtil.checkIndex(dir1);
     writer.commit();
     _TestUtil.checkIndex(dir1);
@@ -667,7 +667,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     }
     ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();
 
-    IndexReader r2 = IndexReader.openIfChanged(r1);
+    DirectoryReader r2 = DirectoryReader.openIfChanged(r1);
     if (r2 != null) {
       r1.close();
       r1 = r2;
@@ -686,7 +686,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     // create the index
     createIndexNoClose(false, "test", writer);
 
-    IndexReader r = writer.getReader();
+    DirectoryReader r = writer.getReader();
     writer.close();
 
     _TestUtil.checkIndex(dir1);
@@ -697,7 +697,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     IndexSearcher searcher = newSearcher(r);
     assertEquals(100, searcher.search(q, 10).totalHits);
     try {
-      IndexReader.openIfChanged(r);
+      DirectoryReader.openIfChanged(r);
       fail("failed to hit AlreadyClosedException");
     } catch (AlreadyClosedException ace) {
       // expected
@@ -724,7 +724,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
       dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));
     }
 
-    IndexReader r = writer.getReader();
+    DirectoryReader r = writer.getReader();
 
     final float SECONDS = 0.5f;
 
@@ -753,7 +753,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
 
     int lastCount = 0;
     while(System.currentTimeMillis() < endTime) {
-      IndexReader r2 = IndexReader.openIfChanged(r);
+      DirectoryReader r2 = DirectoryReader.openIfChanged(r);
       if (r2 != null) {
         r.close();
         r = r2;
@@ -769,7 +769,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
       threads[i].join();
     }
     // final check
-    IndexReader r2 = IndexReader.openIfChanged(r);
+    DirectoryReader r2 = DirectoryReader.openIfChanged(r);
     if (r2 != null) {
       r.close();
       r = r2;
@@ -802,7 +802,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
     createIndexNoClose(false, "test", writer);
     writer.commit();
 
-    IndexReader r = writer.getReader();
+    DirectoryReader r = writer.getReader();
 
     final float SECONDS = 0.5f;
 
@@ -841,7 +841,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
 
     int sum = 0;
     while(System.currentTimeMillis() < endTime) {
-      IndexReader r2 = IndexReader.openIfChanged(r);
+      DirectoryReader r2 = DirectoryReader.openIfChanged(r);
       if (r2 != null) {
         r.close();
         r = r2;
@@ -855,7 +855,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
       threads[i].join();
     }
     // at least search once
-    IndexReader r2 = IndexReader.openIfChanged(r);
+    DirectoryReader r2 = DirectoryReader.openIfChanged(r);
     if (r2 != null) {
       r.close();
       r = r2;
@@ -946,7 +946,7 @@ public class TestIndexWriterReader extends LuceneTestCase {
             setReaderPooling(true).
             setMergedSegmentWarmer(new IndexWriter.IndexReaderWarmer() {
               @Override
-              public void warm(IndexReader r) throws IOException {
+              public void warm(AtomicIndexReader r) throws IOException {
                 IndexSearcher s = newSearcher(r);
                 TopDocs hits = s.search(new TermQuery(new Term("foo", "bar")), 10);
                 assertEquals(20, hits.totalHits);
@@ -1005,13 +1005,13 @@ public class TestIndexWriterReader extends LuceneTestCase {
         d,
         newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));
 
-    IndexReader r = w.getReader(); // start pooling readers
+    DirectoryReader r = w.getReader(); // start pooling readers
 
-    IndexReader r2 = IndexReader.openIfChanged(r);
+    DirectoryReader r2 = DirectoryReader.openIfChanged(r);
     assertNull(r2);
     
     w.addDocument(new Document());
-    IndexReader r3 = IndexReader.openIfChanged(r);
+    DirectoryReader r3 = DirectoryReader.openIfChanged(r);
     assertNotNull(r3);
     assertTrue(r3.getVersion() != r.getVersion());
     assertTrue(r3.isCurrent());
@@ -1021,12 +1021,12 @@ public class TestIndexWriterReader extends LuceneTestCase {
 
     // ... but IW marks this as not current:
     assertFalse(r3.isCurrent());
-    IndexReader r4 = IndexReader.openIfChanged(r3);
+    DirectoryReader r4 = DirectoryReader.openIfChanged(r3);
     assertNull(r4);
 
     // Deletes nothing in reality...:
     w.deleteDocuments(new Term("foo", "bar"));
-    IndexReader r5 = IndexReader.openIfChanged(r3, w, true);
+    DirectoryReader r5 = DirectoryReader.openIfChanged(r3, w, true);
     assertNull(r5);
 
     r3.close();
diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java b/lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java
index da5eca0..0321775 100644
--- a/lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java
+++ b/lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode.java
@@ -32,6 +32,7 @@ import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
 import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util.ReaderUtil;
 import org.apache.lucene.util.UnicodeUtil;
 
 public class TestIndexWriterUnicode extends LuceneTestCase {
@@ -317,10 +318,12 @@ public class TestIndexWriterUnicode extends LuceneTestCase {
     IndexReader r = writer.getReader();
 
     // Test each sub-segment
-    final IndexReader[] subs = r.getSequentialSubReaders();
-    for(int i=0;i<subs.length;i++) {
-      checkTermsOrder(subs[i], allTerms, false);
-    }
+    new ReaderUtil.Gather(r) {
+      @Override
+      protected void add(int base, AtomicIndexReader r) throws IOException {
+        checkTermsOrder(r, allTerms, false);
+      }
+    }.run();
     checkTermsOrder(r, allTerms, true);
 
     // Test multi segment

