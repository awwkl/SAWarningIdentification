GitDiffStart: c1460bf233e1ae09826d82b5e6bda5fb424d0a1a | Thu Feb 2 23:01:47 2006 +0000
diff --git a/src/apps/SolarTest/newtest.txt b/src/apps/SolarTest/newtest.txt
index b01f6f3..4481e36 100644
--- a/src/apps/SolarTest/newtest.txt
+++ b/src/apps/SolarTest/newtest.txt
@@ -535,6 +535,22 @@ id:13 AND syn:foo %//*[@numFound="1"]
 id:13 AND syn:bar %//*[@numFound="1"]
 id:13 AND syn:baz %//*[@numFound="1"]
 
+
+#test position increment gaps between field values
+<delete><id>44</id></delete>
+<delete><id>45</id></delete>
+<add><doc><field name="id">44</field><field name="textgap">aa bb cc</field><field name="textgap">dd ee ff</field></doc></add>
+<add><doc><field name="id">45</field><field name="text">aa bb cc</field><field name="text">dd ee ff</field></doc></add>
+<commit/>
++id:44 +textgap:"aa bb cc"  %//*[@numFound="1"]
++id:44 +textgap:"dd ee ff"  %//*[@numFound="1"]
++id:44 +textgap:"cc dd"  %//*[@numFound="0"]
++id:44 +textgap:"cc dd"~100  %//*[@numFound="1"]
++id:44 +textgap:"bb cc dd ee"~90  %//*[@numFound="0"]
++id:44 +textgap:"bb cc dd ee"~100  %//*[@numFound="1"]
++id:45 +text:"cc dd"  %//*[@numFound="1"]
+
+
 #trigger output of custom value test
 values %%qt=test
 
diff --git a/src/apps/SolarTest/schema.xml b/src/apps/SolarTest/schema.xml
index 694ad92..6fbab1c 100644
--- a/src/apps/SolarTest/schema.xml
+++ b/src/apps/SolarTest/schema.xml
@@ -225,7 +225,16 @@
     </fieldtype>
 
     <fieldtype  name="unstored" class="solar.StrField" indexed="true" stored="false"/>
-  </types>
+
+
+  <fieldtype name="textgap" class="solar.TextField" multiValued="true" positionIncrementGap="100">
+      <analyzer>
+          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+          <filter class="solar.LowerCaseFilterFactory"/>
+      </analyzer>
+  </fieldtype>
+
+ </types>
 
 
  <fields>
@@ -281,6 +290,8 @@
    <field name="sku1" type="skutype1" indexed="true" stored="true"/>
    <field name="sku2" type="skutype2" indexed="true" stored="true"/>
 
+   <field name="textgap" type="textgap" indexed="true" stored="true"/>
+
    <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
         will be used if the name matches any of the patterns.
         RESTRICTION: the glob-like pattern in the name attribute must have
@@ -309,6 +320,7 @@
    <dynamicField name="*aaa" type="integer" indexed="false" stored="true"/>
 
 
+
  </fields>
 
  <defaultSearchField>text</defaultSearchField>
diff --git a/src/java/org/apache/solr/analysis/SolrAnalyzer.java b/src/java/org/apache/solr/analysis/SolrAnalyzer.java
new file mode 100644
index 0000000..730ee2b
--- /dev/null
+++ b/src/java/org/apache/solr/analysis/SolrAnalyzer.java
@@ -0,0 +1,19 @@
+package org.apache.solr.analysis;
+
+import org.apache.lucene.analysis.Analyzer;
+
+/**
+ * @author yonik
+ * @version $Id$
+ */
+public abstract class SolrAnalyzer extends Analyzer {
+  int posIncGap=0;
+  
+  public void setPositionIncrementGap(int gap) {
+    posIncGap=gap;
+  }
+
+  public int getPositionIncrementGap(String fieldName) {
+    return posIncGap;
+  }
+}
diff --git a/src/java/org/apache/solr/analysis/TokenizerChain.java b/src/java/org/apache/solr/analysis/TokenizerChain.java
index 84b43a3..dbc53a3 100644
--- a/src/java/org/apache/solr/analysis/TokenizerChain.java
+++ b/src/java/org/apache/solr/analysis/TokenizerChain.java
@@ -31,7 +31,7 @@ import java.io.Reader;
 // An analyzer that uses a tokenizer and a list of token filters to
 // create a TokenStream.
 //
-public class TokenizerChain extends Analyzer {
+public class TokenizerChain extends SolrAnalyzer {
   final private TokenizerFactory tokenizer;
   final private TokenFilterFactory[] filters;
 
diff --git a/src/java/org/apache/solr/schema/BoolField.java b/src/java/org/apache/solr/schema/BoolField.java
index 08bb379..10629d3 100644
--- a/src/java/org/apache/solr/schema/BoolField.java
+++ b/src/java/org/apache/solr/schema/BoolField.java
@@ -25,6 +25,7 @@ import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.document.Field;
 import org.apache.solr.request.XMLWriter;
+import org.apache.solr.analysis.SolrAnalyzer;
 
 import java.util.Map;
 import java.io.Reader;
@@ -54,7 +55,7 @@ public class BoolField extends FieldType {
   // handle single valued non-text fields (int,bool,etc) if needed.
 
 
-  protected final static Analyzer boolAnalyzer = new Analyzer() {
+  protected final static Analyzer boolAnalyzer = new SolrAnalyzer() {
       public TokenStream tokenStream(String fieldName, Reader reader) {
         return new Tokenizer(reader) {
           boolean done=false;
diff --git a/src/java/org/apache/solr/schema/FieldType.java b/src/java/org/apache/solr/schema/FieldType.java
index ce8320e..7d457ac 100644
--- a/src/java/org/apache/solr/schema/FieldType.java
+++ b/src/java/org/apache/solr/schema/FieldType.java
@@ -26,6 +26,7 @@ import org.apache.solr.search.function.ValueSource;
 import org.apache.solr.search.function.OrdFieldSource;
 import org.apache.solr.search.Sorting;
 import org.apache.solr.request.XMLWriter;
+import org.apache.solr.analysis.SolrAnalyzer;
 
 import java.util.logging.Logger;
 import java.util.Map;
@@ -48,10 +49,6 @@ public abstract class FieldType extends FieldProperties {
   protected int falseProperties;  // properties explicitly set to false
   int properties;
 
-  // these are common enough, they were moved to the base class to handle.
-  // not all subclasses will be able to support these options.
-  protected int positionIncrementGap;
-
   protected boolean isTokenized() {
     return (properties & TOKENIZED) != 0;
   }
@@ -73,12 +70,6 @@ public abstract class FieldType extends FieldProperties {
     this.args=args;
     Map<String,String> initArgs = new HashMap<String,String>(args);
 
-    String str;
-
-    str = initArgs.get("positionIncrementGap");
-    if (str!=null) positionIncrementGap = Integer.parseInt(str);
-    initArgs.remove("positionIncrementGap");
-
     trueProperties = FieldProperties.parseProperties(initArgs,true);
     falseProperties = FieldProperties.parseProperties(initArgs,false);
 
@@ -89,6 +80,23 @@ public abstract class FieldType extends FieldProperties {
 
     init(schema, initArgs);
 
+    String positionInc = initArgs.get("positionIncrementGap");
+    if (positionInc != null) {
+      Analyzer analyzer = getAnalyzer();
+      if (analyzer instanceof SolrAnalyzer) {
+        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));
+      } else {
+        throw new RuntimeException("Can't set positionIncrementGap on custom analyzer " + analyzer.getClass());
+      }
+      analyzer = getQueryAnalyzer();
+      if (analyzer instanceof SolrAnalyzer) {
+        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));
+      } else {
+        throw new RuntimeException("Can't set positionIncrementGap on custom analyzer " + analyzer.getClass());
+      }
+      initArgs.remove("positionIncrementGap");
+    }
+
     if (initArgs.size() > 0) {
       throw new RuntimeException("schema fieldtype " + typeName
               + "("+ this.getClass().getName() + ")"
@@ -195,7 +203,7 @@ public abstract class FieldType extends FieldProperties {
   // Default analyzer for types that only produce 1 verbatim token...
   // A maximum size of chars to be read must be specified
   //
-  protected final class DefaultAnalyzer extends Analyzer {
+  protected final class DefaultAnalyzer extends SolrAnalyzer {
     final int maxChars;
 
     DefaultAnalyzer(int maxChars) {
@@ -213,10 +221,6 @@ public abstract class FieldType extends FieldProperties {
         };
       };
     }
-
-    public int getPositionIncrementGap(String fieldName) {
-      return positionIncrementGap;
-    }
   }
 
 
diff --git a/src/java/org/apache/solr/schema/IndexSchema.java b/src/java/org/apache/solr/schema/IndexSchema.java
index cb1e7f0..17db3de 100644
--- a/src/java/org/apache/solr/schema/IndexSchema.java
+++ b/src/java/org/apache/solr/schema/IndexSchema.java
@@ -121,10 +121,10 @@ public final class IndexSchema {
 
 
 
-  private class SolrAnalyzer extends Analyzer {
+  private class SolrIndexAnalyzer extends Analyzer {
     protected final HashMap<String,Analyzer> analyzers;
 
-    SolrAnalyzer() {
+    SolrIndexAnalyzer() {
       analyzers = analyzerCache();
     }
 
@@ -154,7 +154,7 @@ public final class IndexSchema {
   }
 
 
-  private class SolrQueryAnalyzer extends SolrAnalyzer {
+  private class SolrQueryAnalyzer extends SolrIndexAnalyzer {
     protected HashMap<String,Analyzer> analyzerCache() {
       HashMap<String,Analyzer> cache = new HashMap<String,Analyzer>();
        for (SchemaField f : getFields().values()) {
@@ -348,7 +348,7 @@ public final class IndexSchema {
       throw new SolrException(1,"Schema Parsing Failed",e,false);
     }
 
-     analyzer = new SolrAnalyzer();
+     analyzer = new SolrIndexAnalyzer();
      queryAnalyzer = new SolrQueryAnalyzer();
   }
 

