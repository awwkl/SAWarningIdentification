GitDiffStart: 59c10713460604b3ff4300abc11d0f1a79a42307 | Tue Sep 27 12:01:42 2016 +0100
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index c770f65..70253b8 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -188,7 +188,8 @@ Other Changes
 * SOLR-9544: Allow ObjectReleaseTracker more time to check for asynchronously
   closing resources (Alan Woodward)
 
-* SOLR-6677: Reduced logging during Solr startup, moved more logs to DEBUG level (janhoy, Shawn Heisey)
+* SOLR-6677: Reduced logging during startup and shutdown, moved more logs to DEBUG level
+  (janhoy, Shawn Heisey, Alan Woodward)
 
 * SOLR-6090: Remove unreachable printLayout usage in cloud tests. (Cao Manh Dat via shalin)
 
diff --git a/solr/core/src/java/org/apache/solr/core/Config.java b/solr/core/src/java/org/apache/solr/core/Config.java
index 9244409..11a381e 100644
--- a/solr/core/src/java/org/apache/solr/core/Config.java
+++ b/solr/core/src/java/org/apache/solr/core/Config.java
@@ -120,7 +120,7 @@ public class Config {
         InputStream in = loader.openConfig(name);
         if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {
           zkVersion = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();
-          log.info("loaded config {} with version {} ",name,zkVersion);
+          log.debug("loaded config {} with version {} ",name,zkVersion);
         }
         is = new InputSource(in);
         is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));
diff --git a/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java b/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
index f953913..228260a 100644
--- a/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
+++ b/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java
@@ -312,7 +312,7 @@ public abstract class DirectoryFactory implements NamedListInitializedPlugin,
   public void cleanupOldIndexDirectories(final String dataDirPath, final String currentIndexDirPath) {
     File dataDir = new File(dataDirPath);
     if (!dataDir.isDirectory()) {
-      log.warn("{} does not point to a valid data directory; skipping clean-up of old index directories.", dataDirPath);
+      log.debug("{} does not point to a valid data directory; skipping clean-up of old index directories.", dataDirPath);
       return;
     }
 
diff --git a/solr/core/src/java/org/apache/solr/core/PluginBag.java b/solr/core/src/java/org/apache/solr/core/PluginBag.java
index 343f988..77e2379 100644
--- a/solr/core/src/java/org/apache/solr/core/PluginBag.java
+++ b/solr/core/src/java/org/apache/solr/core/PluginBag.java
@@ -230,7 +230,7 @@ public class PluginBag<T> implements AutoCloseable {
       if (old != null) log.warn("Multiple entries of {} with name {}", meta.getCleanTag(), name);
     }
     if (infos.size() > 0) { // Aggregate logging
-      log.info("[{}] Initialized {} plugins of type {}: {}", solrCore.getName(), infos.size(), meta.getCleanTag(),
+      log.debug("[{}] Initialized {} plugins of type {}: {}", solrCore.getName(), infos.size(), meta.getCleanTag(),
           infos.stream().map(i -> i.name).collect(Collectors.toList()));
     }
     for (Map.Entry<String, T> e : defaults.entrySet()) {
diff --git a/solr/core/src/java/org/apache/solr/core/RequestHandlers.java b/solr/core/src/java/org/apache/solr/core/RequestHandlers.java
index 0f5022a..dd06fa5 100644
--- a/solr/core/src/java/org/apache/solr/core/RequestHandlers.java
+++ b/solr/core/src/java/org/apache/solr/core/RequestHandlers.java
@@ -129,7 +129,7 @@ public final class RequestHandlers {
     }
     handlers.init(Collections.emptyMap(),core, modifiedInfos);
     handlers.alias(handlers.getDefault(), "");
-    log.info("Registered paths: {}" , StrUtils.join(new ArrayList<>(handlers.keySet()) , ',' ));
+    log.debug("Registered paths: {}" , StrUtils.join(new ArrayList<>(handlers.keySet()) , ',' ));
     if (handlers.get("") == null && !handlers.alias("/select", "")) {
       if (handlers.get("") == null && !handlers.alias("standard", "")) {
         log.warn("no default request handler is registered (either '/select' or 'standard')");
diff --git a/solr/core/src/java/org/apache/solr/core/SolrConfig.java b/solr/core/src/java/org/apache/solr/core/SolrConfig.java
index a661f6c..2f5ca7f 100644
--- a/solr/core/src/java/org/apache/solr/core/SolrConfig.java
+++ b/solr/core/src/java/org/apache/solr/core/SolrConfig.java
@@ -327,7 +327,7 @@ public class SolrConfig extends Config implements MapSerializable {
     }
 
     solrRequestParsers = new SolrRequestParsers(this);
-    log.info("Loaded SolrConfig: {}", name);
+    log.debug("Loaded SolrConfig: {}", name);
   }
 
   public static final List<SolrPluginInfo> plugins = ImmutableList.<SolrPluginInfo>builder()
diff --git a/solr/core/src/java/org/apache/solr/core/SolrCore.java b/solr/core/src/java/org/apache/solr/core/SolrCore.java
index dc4209e..dd422ad 100644
--- a/solr/core/src/java/org/apache/solr/core/SolrCore.java
+++ b/solr/core/src/java/org/apache/solr/core/SolrCore.java
@@ -357,7 +357,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
       }
     }
     if (!result.equals(lastNewIndexDir)) {
-      log.info("New index directory detected: old="+lastNewIndexDir + " new=" + result);
+      log.debug("New index directory detected: old="+lastNewIndexDir + " new=" + result);
     }
     lastNewIndexDir = result;
     return result;
@@ -598,7 +598,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
 
     // Create the index if it doesn't exist.
     if(!indexExists) {
-      log.warn(logid + "Solr index directory '" + new File(indexDir) + "' doesn't exist."
+      log.debug(logid + "Solr index directory '" + new File(indexDir) + "' doesn't exist."
           + " Creating new index...");
 
       SolrIndexWriter writer = SolrIndexWriter.create(this, "SolrCore.initIndex", indexDir, getDirectoryFactory(), true,
diff --git a/solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.java b/solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.java
index 9db2fd2..af3f0c6 100644
--- a/solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.java
+++ b/solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.java
@@ -109,7 +109,7 @@ public abstract class ManagedResourceStorage {
     } else {
       if (zkClient != null) {
         String znodeBase = "/configs/"+zkConfigName;
-        log.info("Setting up ZooKeeper-based storage for the RestManager with znodeBase: "+znodeBase);      
+        log.debug("Setting up ZooKeeper-based storage for the RestManager with znodeBase: "+znodeBase);
         storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);
       } else {
         storageIO = new FileStorageIO();        
@@ -271,10 +271,10 @@ public abstract class ManagedResourceStorage {
       }
       
       if (znodeData != null) {
-        log.info("Read {} bytes from znode {}", znodeData.length, znodePath);
+        log.debug("Read {} bytes from znode {}", znodeData.length, znodePath);
       } else {
         znodeData = new byte[0];
-        log.info("No data found for znode {}", znodePath);
+        log.debug("No data found for znode {}", znodePath);
       }
       
       return new ByteArrayInputStream(znodeData);
@@ -327,7 +327,7 @@ public abstract class ManagedResourceStorage {
       // this might be overkill for a delete operation
       try {
         if (zkClient.exists(znodePath, retryOnConnLoss)) {
-          log.info("Attempting to delete znode {}", znodePath);
+          log.debug("Attempting to delete znode {}", znodePath);
           zkClient.delete(znodePath, -1, retryOnConnLoss);
           wasDeleted = zkClient.exists(znodePath, retryOnConnLoss);
           
@@ -489,7 +489,7 @@ public abstract class ManagedResourceStorage {
   public Object load(String resourceId) throws IOException {
     String storedResourceId = getStoredResourceId(resourceId);
     
-    log.info("Reading {} using {}", storedResourceId, storageIO.getInfo());
+    log.debug("Reading {} using {}", storedResourceId, storageIO.getInfo());
     
     InputStream inputStream = storageIO.openInputStream(storedResourceId);
     if (inputStream == null) {
diff --git a/solr/core/src/java/org/apache/solr/rest/RestManager.java b/solr/core/src/java/org/apache/solr/rest/RestManager.java
index dadf4b4..04eb236 100644
--- a/solr/core/src/java/org/apache/solr/rest/RestManager.java
+++ b/solr/core/src/java/org/apache/solr/rest/RestManager.java
@@ -611,7 +611,7 @@ public class RestManager {
                    StorageIO storageIO) 
       throws SolrException
   {
-    log.info("Initializing RestManager with initArgs: "+initArgs);
+    log.debug("Initializing RestManager with initArgs: "+initArgs);
 
     if (storageIO == null)
       throw new IllegalArgumentException(
@@ -630,7 +630,7 @@ public class RestManager {
     managed.put(SCHEMA_BASE_PATH+MANAGED_ENDPOINT, endpoint);
             
     // init registered managed resources
-    log.info("Initializing {} registered ManagedResources", registry.registered.size());
+    log.debug("Initializing {} registered ManagedResources", registry.registered.size());
     for (ManagedResourceRegistration reg : registry.registered.values()) {
       // keep track of this for lookups during request processing
       managed.put(reg.resourceId, createManagedResource(reg));
diff --git a/solr/core/src/java/org/apache/solr/schema/IndexSchema.java b/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
index 63c82ef..3de59ee 100644
--- a/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
+++ b/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
@@ -534,7 +534,7 @@ public class IndexSchema {
             throw new SolrException(ErrorCode.SERVER_ERROR, msg);
           }
         }
-        log.info("[{}] default search field in schema is {}. WARNING: Deprecated, please use 'df' on request instead.",
+        log.warn("[{}] default search field in schema is {}. WARNING: Deprecated, please use 'df' on request instead.",
             coreName, defaultSearchFieldName);
       }
 
@@ -546,7 +546,7 @@ public class IndexSchema {
       } else {
         isExplicitQueryParserDefaultOperator = true;
         queryParserDefaultOperator=node.getNodeValue().trim();
-        log.info("[{}] query parser default operator is {}. WARNING: Deprecated, please use 'q.op' on request instead.",
+        log.warn("[{}] query parser default operator is {}. WARNING: Deprecated, please use 'q.op' on request instead.",
             coreName, queryParserDefaultOperator);
       }
 
@@ -576,9 +576,7 @@ public class IndexSchema {
         }
         uniqueKeyFieldName=uniqueKeyField.getName();
         uniqueKeyFieldType=uniqueKeyField.getType();
-        log.info("[{}] unique key field: {}",
-            coreName, uniqueKeyFieldName);
-      
+
         // Unless the uniqueKeyField is marked 'required=false' then make sure it exists
         if( Boolean.FALSE != explicitRequiredProp.get( uniqueKeyFieldName ) ) {
           uniqueKeyField.required = true;
@@ -606,6 +604,8 @@ public class IndexSchema {
 
     // create the field analyzers
     refreshAnalyzers();
+
+    log.info("Loaded schema {}/{} with uniqueid field {}", name, version, uniqueKeyFieldName);
   }
 
   private String getCoreName(String defaultVal) {
diff --git a/solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader.java b/solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader.java
index 25cf158..ee65fe8 100644
--- a/solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader.java
+++ b/solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader.java
@@ -15,6 +15,10 @@
  * limitations under the License.
  */
 package org.apache.solr.schema;
+import java.io.ByteArrayInputStream;
+import java.lang.invoke.MethodHandles;
+import java.util.concurrent.TimeUnit;
+
 import org.apache.solr.cloud.ZkSolrResourceLoader;
 import org.apache.solr.common.SolrException.ErrorCode;
 import org.apache.solr.common.cloud.OnReconnect;
@@ -31,10 +35,6 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.xml.sax.InputSource;
 
-import java.io.ByteArrayInputStream;
-import java.lang.invoke.MethodHandles;
-import java.util.concurrent.TimeUnit;
-
 /** Keeps a ManagedIndexSchema up-to-date when changes are made to the serialized managed schema in ZooKeeper */
 public class ZkIndexSchemaReader implements OnReconnect {
   private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());
@@ -57,7 +57,7 @@ public class ZkIndexSchemaReader implements OnReconnect {
       public void preClose(SolrCore core) {
         CoreContainer cc = core.getCoreDescriptor().getCoreContainer();
         if (cc.isZooKeeperAware()) {
-          log.info("Removing ZkIndexSchemaReader OnReconnect listener as core "+core.getName()+" is shutting down.");
+          log.debug("Removing ZkIndexSchemaReader OnReconnect listener as core "+core.getName()+" is shutting down.");
           ZkIndexSchemaReader.this.isRemoved = true;
           cc.getZkController().removeOnReconnectListener(ZkIndexSchemaReader.this);
         }
diff --git a/solr/core/src/java/org/apache/solr/update/UpdateLog.java b/solr/core/src/java/org/apache/solr/update/UpdateLog.java
index 5b917b8..9c0f1cf 100644
--- a/solr/core/src/java/org/apache/solr/update/UpdateLog.java
+++ b/solr/core/src/java/org/apache/solr/update/UpdateLog.java
@@ -1597,14 +1597,14 @@ public class UpdateLog implements PluginInfoInitialized {
       log.warn("Failed to determine the max value of the version field due to: "+ioExc, ioExc);
     }
 
-    log.info("Took {}ms to seed version buckets with highest version {}",
+    log.debug("Took {}ms to seed version buckets with highest version {}",
         timer.getTime(), String.valueOf(highestVersion));
 
     return highestVersion;
   }
 
   public void seedBucketsWithHighestVersion(SolrIndexSearcher newSearcher) {
-    log.info("Looking up max value of version field to seed version buckets");
+    log.debug("Looking up max value of version field to seed version buckets");
     versionInfo.blockUpdates();
     try {
       maxVersionFromIndex = seedBucketsWithHighestVersion(newSearcher, versionInfo);
diff --git a/solr/core/src/java/org/apache/solr/update/VersionInfo.java b/solr/core/src/java/org/apache/solr/update/VersionInfo.java
index 0003c24..3c55172 100644
--- a/solr/core/src/java/org/apache/solr/update/VersionInfo.java
+++ b/solr/core/src/java/org/apache/solr/update/VersionInfo.java
@@ -223,7 +223,7 @@ public class VersionInfo {
 
     String versionFieldName = versionField.getName();
 
-    log.info("Refreshing highest value of {} for {} version buckets from index", versionFieldName, buckets.length);
+    log.debug("Refreshing highest value of {} for {} version buckets from index", versionFieldName, buckets.length);
     long maxVersionInIndex = 0L;
 
     // if indexed, then we have terms to get the max from
@@ -233,9 +233,9 @@ public class VersionInfo {
       Long max = (versionTerms != null) ? LegacyNumericUtils.getMaxLong(versionTerms) : null;
       if (max != null) {
         maxVersionInIndex = max.longValue();
-        log.info("Found MAX value {} from Terms for {} in index", maxVersionInIndex, versionFieldName);
+        log.debug("Found MAX value {} from Terms for {} in index", maxVersionInIndex, versionFieldName);
       } else {
-        log.info("No terms found for {}, cannot seed version bucket highest value from index", versionFieldName);
+        log.debug("No terms found for {}, cannot seed version bucket highest value from index", versionFieldName);
       }
     } else {
       ValueSource vs = versionField.getType().getValueSource(versionField, null);
diff --git a/solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain.java b/solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain.java
index bd23b4b..e77dd82 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain.java
@@ -16,27 +16,26 @@
  */
 package org.apache.solr.update.processor;
 
+import java.lang.invoke.MethodHandles;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Objects;
+
+import org.apache.solr.common.SolrException;
 import org.apache.solr.common.params.MapSolrParams;
 import org.apache.solr.common.params.SolrParams;
+import org.apache.solr.common.util.NamedList;
 import org.apache.solr.common.util.StrUtils;
+import org.apache.solr.core.PluginInfo;
+import org.apache.solr.core.SolrCore;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.response.SolrQueryResponse;
 import org.apache.solr.util.plugin.PluginInfoInitialized;
-import org.apache.solr.common.util.NamedList;
-import org.apache.solr.common.SolrException;
-import org.apache.solr.core.PluginInfo;
-import org.apache.solr.core.SolrCore;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.util.Collections;
-import java.util.LinkedList;
-import java.util.List;
-import java.lang.invoke.MethodHandles;
-import java.util.ArrayList;
-import java.util.Objects;
-
 /**
  * Manages a chain of UpdateRequestProcessorFactories.
  * <p>
@@ -118,11 +117,11 @@ public final class UpdateRequestProcessorChain implements PluginInfoInitialized
       (null != info.name ? info.name : "") + "\"" + 
       (info.isDefault() ? " (default)" : "");
 
-    log.info("creating " + infomsg);
+    log.debug("creating " + infomsg);
 
     // wrap in an ArrayList so we know we know we can do fast index lookups 
     // and that add(int,Object) is supported
-    List<UpdateRequestProcessorFactory> list = new ArrayList
+    List<UpdateRequestProcessorFactory> list = new ArrayList<>
       (solrCore.initPlugins(info.getChildren("processor"),UpdateRequestProcessorFactory.class,null));
 
     if(list.isEmpty()){
@@ -155,7 +154,7 @@ public final class UpdateRequestProcessorChain implements PluginInfoInitialized
       distrib.init(new NamedList());
       list.add(runIndex, distrib);
 
-      log.info("inserting DistributedUpdateProcessorFactory into " + infomsg);
+      log.debug("inserting DistributedUpdateProcessorFactory into " + infomsg);
     }
 
     chain = list;
@@ -230,7 +229,7 @@ public final class UpdateRequestProcessorChain implements PluginInfoInitialized
 
   public static UpdateRequestProcessorChain constructChain(UpdateRequestProcessorChain defaultUrp,
                                                            ProcessorInfo processorInfo, SolrCore core) {
-    LinkedList<UpdateRequestProcessorFactory> urps = new LinkedList(defaultUrp.chain);
+    LinkedList<UpdateRequestProcessorFactory> urps = new LinkedList<>(defaultUrp.chain);
     List<UpdateRequestProcessorFactory> p = getReqProcessors(processorInfo.processor, core);
     List<UpdateRequestProcessorFactory> post = getReqProcessors(processorInfo.postProcessor, core);
     //processor are tried to be inserted before LogUpdateprocessor+DistributedUpdateProcessor
@@ -241,7 +240,7 @@ public final class UpdateRequestProcessorChain implements PluginInfoInitialized
     if (log.isInfoEnabled()) {
       ArrayList<String> names = new ArrayList<>(urps.size());
       for (UpdateRequestProcessorFactory urp : urps) names.add(urp.getClass().getSimpleName());
-      log.info("New dynamic chain constructed : " + StrUtils.join(names, '>'));
+      log.debug("New dynamic chain constructed : " + StrUtils.join(names, '>'));
     }
     return result;
   }
@@ -263,7 +262,7 @@ public final class UpdateRequestProcessorChain implements PluginInfoInitialized
   }
 
   static List<UpdateRequestProcessorFactory> getReqProcessors(String processor, SolrCore core) {
-    if (processor == null) return Collections.EMPTY_LIST;
+    if (processor == null) return Collections.emptyList();
     List<UpdateRequestProcessorFactory> result = new ArrayList<>();
     List<String> names = StrUtils.splitSmart(processor, ',');
     for (String s : names) {

