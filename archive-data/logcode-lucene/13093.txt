GitDiffStart: fb33754168a52ce2be6cf981e996fb4ba1d0c6d4 | Sun Mar 25 01:20:55 2012 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 1cccfd9..7e12459 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -902,6 +902,9 @@ New Features
 * LUCENE-3789: Expose MTQ TermsEnum via RewriteMethod for non package private
   access (Simon Willnauer)
 
+* LUCENE-3881: Added UAX29URLEmailAnalyzer: a standard analyzer that recognizes
+  URLs and emails. (Steve Rowe)
+
 Bug fixes
 
 * LUCENE-3595: Fixed FieldCacheRangeFilter and FieldCacheTermsFilter
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer.java
new file mode 100755
index 0000000..e7e7951
--- /dev/null
+++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer.java
@@ -0,0 +1,113 @@
+package org.apache.lucene.analysis.standard;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.core.LowerCaseFilter;
+import org.apache.lucene.analysis.core.StopAnalyzer;
+import org.apache.lucene.analysis.core.StopFilter;
+import org.apache.lucene.analysis.util.CharArraySet;
+import org.apache.lucene.analysis.util.StopwordAnalyzerBase;
+import org.apache.lucene.util.Version;
+
+import java.io.IOException;
+import java.io.Reader;
+
+/**
+ * Filters {@link org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer}
+ * with {@link org.apache.lucene.analysis.standard.StandardFilter},
+ * {@link org.apache.lucene.analysis.core.LowerCaseFilter} and
+ * {@link org.apache.lucene.analysis.core.StopFilter}, using a list of
+ * English stop words.
+ *
+ * <a name="version"/>
+ * <p>
+ *   You must specify the required {@link org.apache.lucene.util.Version}
+ *   compatibility when creating UAX29URLEmailAnalyzer
+ * </p>
+ */
+public final class UAX29URLEmailAnalyzer extends StopwordAnalyzerBase {
+
+  /** Default maximum allowed token length */
+  public static final int DEFAULT_MAX_TOKEN_LENGTH = StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH;
+
+  private int maxTokenLength = DEFAULT_MAX_TOKEN_LENGTH;
+
+  /** An unmodifiable set containing some common English words that are usually not
+  useful for searching. */
+  public static final CharArraySet STOP_WORDS_SET = StopAnalyzer.ENGLISH_STOP_WORDS_SET;
+
+  /** Builds an analyzer with the given stop words.
+   * @param matchVersion Lucene version to match See {@link
+   * <a href="#version">above</a>}
+   * @param stopWords stop words */
+  public UAX29URLEmailAnalyzer(Version matchVersion, CharArraySet stopWords) {
+    super(matchVersion, stopWords);
+  }
+
+  /** Builds an analyzer with the default stop words ({@link
+   * #STOP_WORDS_SET}).
+   * @param matchVersion Lucene version to match See {@link
+   * <a href="#version">above</a>}
+   */
+  public UAX29URLEmailAnalyzer(Version matchVersion) {
+    this(matchVersion, STOP_WORDS_SET);
+  }
+
+  /** Builds an analyzer with the stop words from the given reader.
+   * @see org.apache.lucene.analysis.util.WordlistLoader#getWordSet(java.io.Reader, org.apache.lucene.util.Version)
+   * @param matchVersion Lucene version to match See {@link
+   * <a href="#version">above</a>}
+   * @param stopwords Reader to read stop words from */
+  public UAX29URLEmailAnalyzer(Version matchVersion, Reader stopwords) throws IOException {
+    this(matchVersion, loadStopwordSet(stopwords, matchVersion));
+  }
+
+  /**
+   * Set maximum allowed token length.  If a token is seen
+   * that exceeds this length then it is discarded.  This
+   * setting only takes effect the next time tokenStream or
+   * tokenStream is called.
+   */
+  public void setMaxTokenLength(int length) {
+    maxTokenLength = length;
+  }
+    
+  /**
+   * @see #setMaxTokenLength
+   */
+  public int getMaxTokenLength() {
+    return maxTokenLength;
+  }
+
+  @Override
+  protected TokenStreamComponents createComponents(final String fieldName, final Reader reader) {
+    final UAX29URLEmailTokenizer src = new UAX29URLEmailTokenizer(matchVersion, reader);
+    src.setMaxTokenLength(maxTokenLength);
+    TokenStream tok = new StandardFilter(matchVersion, src);
+    tok = new LowerCaseFilter(matchVersion, tok);
+    tok = new StopFilter(matchVersion, tok, stopwords);
+    return new TokenStreamComponents(src, tok) {
+      @Override
+      protected void reset(final Reader reader) throws IOException {
+        src.setMaxTokenLength(UAX29URLEmailAnalyzer.this.maxTokenLength);
+        super.reset(reader);
+      }
+    };
+  }
+}
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/standard/package.html b/modules/analysis/common/src/java/org/apache/lucene/analysis/standard/package.html
index e39f74b..0d76c89 100644
--- a/modules/analysis/common/src/java/org/apache/lucene/analysis/standard/package.html
+++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/standard/package.html
@@ -54,6 +54,12 @@
         algorithm, as specified in 
         <a href="http://unicode.org/reports/tr29/">Unicode Standard Annex #29</a>.
         URLs and email addresses are also tokenized according to the relevant RFCs.
+        <br/>
+        <code><a href="UAX29URLEmailAnalyzer">UAX29URLEmailAnalyzer</a></code> includes
+        <code>UAX29URLEmailTokenizer</code>,
+        <code><a href="StandardFilter">StandardFilter</a></code>,
+        <code><a href="../../../../../../all/org/apache/lucene/analysis/LowerCaseFilter.html">LowerCaseFilter</a></code>
+        and <code><a href="../../../../../../all/org/apache/lucene/analysis/StopFilter.html">StopFilter</a></code>.
     </li>
 </ul>
 </body>
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailAnalyzer.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailAnalyzer.java
new file mode 100755
index 0000000..b07da80
--- /dev/null
+++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailAnalyzer.java
@@ -0,0 +1,267 @@
+package org.apache.lucene.analysis.core;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.BaseTokenStreamTestCase;
+import org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer;
+import org.apache.lucene.util.Version;
+
+import java.io.IOException;
+import java.util.Arrays;
+
+public class TestUAX29URLEmailAnalyzer extends BaseTokenStreamTestCase {
+
+  private Analyzer a = new UAX29URLEmailAnalyzer(TEST_VERSION_CURRENT);
+
+  public void testHugeDoc() throws IOException {
+    StringBuilder sb = new StringBuilder();
+    char whitespace[] = new char[4094];
+    Arrays.fill(whitespace, ' ');
+    sb.append(whitespace);
+    sb.append("testing 1234");
+    String input = sb.toString();
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, input, new String[]{"testing", "1234"}) ;
+  }
+
+  public void testArmenian() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "?Õ«?Õ«ÕºÕ¥Õ¤Õ«Õ¡ÕµÕ« 13 Õ´Õ«Õ¬Õ«Õ¸Õ¶ Õ°Õ¸Õ¤Õ¾Õ¡Õ®Õ¶Õ¥?Õ¨ (4,600` Õ°Õ¡ÕµÕ¥?Õ¥Õ¶ Õ¾Õ«?Õ«ÕºÕ¥Õ¤Õ«Õ¡ÕµÕ¸?Õ´) Õ£?Õ¾Õ¥Õ¬ Õ¥Õ¶ Õ¯Õ¡Õ´Õ¡Õ¾Õ¸?Õ¶Õ¥?Õ« Õ¯Õ¸Õ²Õ´Õ«? Õ¸? Õ°Õ¡Õ´Õ¡?ÕµÕ¡ Õ¢Õ¸Õ¬Õ¸? Õ°Õ¸Õ¤Õ¾Õ¡Õ®Õ¶Õ¥?Õ¨ Õ¯Õ¡?Õ¸Õ² Õ§ Õ­Õ´Õ¢Õ¡Õ£?Õ¥Õ¬ ?Õ¡Õ¶Õ¯Õ¡? Õ´Õ¡?Õ¤ Õ¸Õ¾ Õ¯Õ¡?Õ¸Õ² Õ§ Õ¢Õ¡?Õ¥Õ¬ ?Õ«?Õ«ÕºÕ¥Õ¤Õ«Õ¡ÕµÕ« Õ¯Õ¡Õµ?Õ¨?",
+        new String[] { "Õ¾Õ«?Õ«ÕºÕ¥Õ¤Õ«Õ¡ÕµÕ«", "13", "Õ´Õ«Õ¬Õ«Õ¸Õ¶", "Õ°Õ¸Õ¤Õ¾Õ¡Õ®Õ¶Õ¥?Õ¨", "4,600", "Õ°Õ¡ÕµÕ¥?Õ¥Õ¶", "Õ¾Õ«?Õ«ÕºÕ¥Õ¤Õ«Õ¡ÕµÕ¸?Õ´", "Õ£?Õ¾Õ¥Õ¬", "Õ¥Õ¶", "Õ¯Õ¡Õ´Õ¡Õ¾Õ¸?Õ¶Õ¥?Õ«", "Õ¯Õ¸Õ²Õ´Õ«?",
+        "Õ¸?", "Õ°Õ¡Õ´Õ¡?ÕµÕ¡", "Õ¢Õ¸Õ¬Õ¸?", "Õ°Õ¸Õ¤Õ¾Õ¡Õ®Õ¶Õ¥?Õ¨", "Õ¯Õ¡?Õ¸Õ²", "Õ§", "Õ­Õ´Õ¢Õ¡Õ£?Õ¥Õ¬", "?Õ¡Õ¶Õ¯Õ¡?", "Õ´Õ¡?Õ¤", "Õ¸Õ¾", "Õ¯Õ¡?Õ¸Õ²", "Õ§", "Õ¢Õ¡?Õ¥Õ¬", "Õ¾Õ«?Õ«ÕºÕ¥Õ¤Õ«Õ¡ÕµÕ«", "Õ¯Õ¡Õµ?Õ¨" } );
+  }
+  
+  public void testAmharic() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "???????? ?¨á??? ?¥á? ????? ?¨á???? ?µá??????? ??? ?????? ??????? (?¢á??³á?????????) ????? ????????",
+        new String[] { "????????", "?¨á???", "?¥á?", "?????", "?¨á????", "?µá???????", "???", "??????", "???????", "?¢á??³á?????????", "???", "????????" } );
+  }
+  
+  public void testArabic() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "Ø§????? Ø§??Ø«Ø§Ø¦?? Ø§?Ø£?? Ø¹? ????Ø¨?Ø¯?Ø§ ?Ø³?? \"Ø§?Ø­???Ø© Ø¨Ø§?Ø£Ø±?Ø§?: ?ØµØ© ????Ø¨?Ø¯?Ø§\" (Ø¨Ø§?Ø¥?Ø¬??Ø²?Ø©: Truth in Numbers: The Wikipedia Story)? Ø³?Øª? Ø¥Ø·?Ø§?? ?? 2008.",
+        new String[] { "Ø§?????", "Ø§??Ø«Ø§Ø¦??", "Ø§?Ø£??", "Ø¹?", "????Ø¨?Ø¯?Ø§", "?Ø³??", "Ø§?Ø­???Ø©", "Ø¨Ø§?Ø£Ø±?Ø§?", "?ØµØ©", "????Ø¨?Ø¯?Ø§",
+        "Ø¨Ø§?Ø¥?Ø¬??Ø²?Ø©", "truth", "numbers", "wikipedia", "story", "Ø³?Øª?", "Ø¥Ø·?Ø§??", "??", "2008" } );
+  }
+  
+  public void testAramaic() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "??Ü©?Ü¦??? (?Ü¢????: Wikipedia) ?? ??Ü¢Ü£Ü©??Ü¦??? ??ÜªÜ¬? ??Ü¢?ÜªÜ¢? ??Ü«Ü¢?? Ü£?????? Ü«Ü¡? ?Ü¬? Ü¡Ü¢ Ü¡??Ü¬? ?\"??Ü©?\" ?\"??Ü¢Ü£Ü©??Ü¦???\"?",
+        new String[] { "??Ü©?Ü¦???", "?Ü¢????", "wikipedia", "??", "??Ü¢Ü£Ü©??Ü¦???", "??ÜªÜ¬?", "??Ü¢?ÜªÜ¢?", "??Ü«Ü¢??", "Ü£?????", "Ü«Ü¡?",
+        "?Ü¬?", "Ü¡Ü¢", "Ü¡??Ü¬?", "?", "??Ü©?", "?", "??Ü¢Ü£Ü©??Ü¦???"});
+  }
+  
+  public void testBengali() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "à¦?? à¦??à¦¶à?à¦??à§?¦· à¦?¦°à¦¿à?à¦¾à¦²à¦¨à? à¦?¦°à§? à¦??à¦??à¦??à¦¡à?à¦??à¦? à¦??à¦?¦¨à§?¦¡à§?¦¶à¦? (à¦??à¦?? à¦?¦²à¦¾à¦­à¦?¦¨à¦? à¦¸à?à¦¸à?à¦¥à?)à¥? à¦??à¦??à¦??à¦¡à?à¦??à¦¾à¦° à¦¶à?à¦°à? à§§à§« à¦??à¦¨à?à¦??à¦¾à¦°à¦?, à§¨à§¦à§?§§ à¦¸à?à¦²à?à¥? à¦??à¦? à¦?¦°à§?¦¯à¦¨à?à¦? à§¨à§¦à§??à¦¿à¦°à¦? à¦??à¦¶à? à¦??à¦·à?à¦?? à¦??à¦??à¦??à¦¡à?à¦??à¦? à¦°à¦¯à¦¼à?à¦??à¥?",
+        new String[] { "à¦??", "à¦??à¦¶à?à¦??à§?¦·", "à¦?¦°à¦¿à?à¦¾à¦²à¦¨à?", "à¦?¦°à§?", "à¦??à¦??à¦??à¦¡à?à¦??à¦?", "à¦??à¦?¦¨à§?¦¡à§?¦¶à¦?", "à¦??à¦??", "à¦?¦²à¦¾à¦­à¦?¦¨à¦?", "à¦¸à?à¦¸à?à¦¥à?", "à¦??à¦??à¦??à¦¡à?à¦??à¦¾à¦°",
+        "à¦¶à?à¦°à?", "à§§à§«", "à¦??à¦¨à?à¦??à¦¾à¦°à¦?", "à§¨à§¦à§?§§", "à¦¸à?à¦²à?", "à¦??à¦?", "à¦?¦°à§?¦¯à¦¨à?à¦?", "à§¨à§¦à§??à¦¿à¦°à¦?", "à¦??à¦¶à?", "à¦??à¦·à?à¦??", "à¦??à¦??à¦??à¦¡à?à¦??à¦?", "à¦°à¦¯à¦¼à?à¦??" });
+  }
+  
+  public void testFarsi() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "??Ú©? Ù¾Ø¯?Ø§? Ø§?Ú¯??Ø³? Ø¯Ø± ØªØ§Ø±?Ø® Û²Ûµ Ø¯? Û±Û³Û·Û¹ Ø¨? Øµ?Ø±Øª ?Ú©??? Ø¨Ø±Ø§? Ø¯Ø§?Ø´?Ø§??? ØªØ®ØµØµ? ??Ù¾Ø¯?Ø§ ??Ø´Øª? Ø´Ø¯.",
+        new String[] { "??Ú©?", "Ù¾Ø¯?Ø§?", "Ø§?Ú¯??Ø³?", "Ø¯Ø±", "ØªØ§Ø±?Ø®", "Û²Ûµ", "Ø¯?", "Û±Û³Û·Û¹", "Ø¨?", "Øµ?Ø±Øª", "?Ú©???",
+        "Ø¨Ø±Ø§?", "Ø¯Ø§?Ø´?Ø§???", "ØªØ®ØµØµ?", "??Ù¾Ø¯?Ø§", "??Ø´Øª?", "Ø´Ø¯" });
+  }
+  
+  public void testGreek() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "??Î¬?Îµ?Î±Î¹ ?Îµ ??Î½Îµ?Î³Î±?Î¯Î± Î±?? ÎµÎ¸ÎµÎ»Î¿Î½?Î­? Î¼Îµ ?Î¿ Î»Î¿Î³Î¹?Î¼Î¹Îº? wiki, ÎºÎ¬?Î¹ ?Î¿? ?Î·Î¼Î±Î¯Î½ÎµÎ¹ ??Î¹ Î¬?Î¸?Î± Î¼?Î¿?ÎµÎ¯ Î½Î± ??Î¿??ÎµÎ¸Î¿?Î½ Î® Î½Î± Î±Î»Î»Î¬Î¾Î¿?Î½ Î±?? ?Î¿Î½ ÎºÎ±Î¸Î­Î½Î±.",
+        new String[] { "Î³?Î¬?Îµ?Î±Î¹", "?Îµ", "??Î½Îµ?Î³Î±?Î¯Î±", "Î±??", "ÎµÎ¸ÎµÎ»Î¿Î½?Î­?", "Î¼Îµ", "?Î¿", "Î»Î¿Î³Î¹?Î¼Î¹Îº?", "wiki", "ÎºÎ¬?Î¹", "?Î¿?",
+        "?Î·Î¼Î±Î¯Î½ÎµÎ¹", "??Î¹", "Î¬?Î¸?Î±", "Î¼?Î¿?ÎµÎ¯", "Î½Î±", "??Î¿??ÎµÎ¸Î¿?Î½", "Î®", "Î½Î±", "Î±Î»Î»Î¬Î¾Î¿?Î½", "Î±??", "?Î¿Î½", "ÎºÎ±Î¸Î­Î½Î±" });
+  }
+
+  public void testThai() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "à¸?¸²à¸£à?à¸µà?à¹??à¹??à¹?¸­à¸??à¸??à¸?¸§à¹?¸²à¸?¸²à¸??à¸?. à¹?¸¥à¹?¸§à¹?à¸?¸­à¸?¸°à¹??à¹?¸«à¸?? à¹??à¹??",
+        new String[] { "à¸?¸²à¸£à?à¸µà?à¹??à¹??à¹?¸­à¸??à¸??à¸?¸§à¹?¸²à¸?¸²à¸??à¸?", "à¹?¸¥à¹?¸§à¹?à¸?¸­à¸?¸°à¹??à¹?¸«à¸?", "à¹??à¹??" });
+  }
+  
+  public void testLao() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "àº?º²àº?º²àº¥àº°àº?º°àº¥àº±àº? àº?º°àº?º²àº?º´àº?º°à»?? àº?º°àº?º²àº?º»àº?º¥àº²àº§", 
+        new String[] { "àº?º²àº?º²àº¥àº°àº?º°àº¥àº±àº?", "àº?º°àº?º²àº?º´àº?º°à»??", "àº?º°àº?º²àº?º»àº?º¥àº²àº§" });
+  }
+  
+  public void testTibetan() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "à½?¾£à½¼à?à¼??à½?½¼à½??à½??à¼?½£à½??à½??à½²à½¦à¼??à½¼à?à¼?½¡à½²à?à¼??à½²à?à½??à½??à½?½¼à½??à½??à½ºà½£à¼??à½´à?à½??à½¼à?à¼??à½¢à?à½§à?à½??à¼??à½?½ºà¼??à½??à¼??à½?½²à½??à½?½¼à¼? à¼?",
+                     new String[] { "à½?¾£à½¼à?", "à½??à½¼à?", "à½??", "à½£à½¦", "à½??à½²à½¦", "à½?½¼à½?", "à½¡à½²à½?", 
+                                    "à½?½²", "à½??à½?", "à½?½¼à½?", "à½??à½ºà½£", "à½?½´", "à½??à½¼à?", "à½?½¢", 
+                                    "à½?", "à½??", "à½??à½?", "à½??à½?", "à½??à½²à½¦", "à½?½¼" });
+  }
+  
+  /*
+   * For chinese, tokenize as char (these can later form bigrams or whatever)
+   */
+  public void testChinese() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "???ä¸??äººã?? ï¼??ï¼?? ï¼´ï?ï½??ï½? ",
+        new String[] { "??", "??", "ä¸?", "??", "äº?", "ï¼??ï¼??", "ï½??ï½??ï½?"});
+  }
+  
+  public void testEmpty() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "", new String[] {});
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, ".", new String[] {});
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, " ", new String[] {});
+  }
+  
+  /* test various jira issues this analyzer is related to */
+  
+  public void testLUCENE1545() throws Exception {
+    /*
+     * Standard analyzer does not correctly tokenize combining character U+0364 COMBINING LATIN SMALL LETTER E.
+     * The word "moÍ¤chte" is incorrectly tokenized into "mo" "chte", the combining character is lost.
+     * Expected result is only one token "moÍ¤chte".
+     */
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "moÍ¤chte", new String[] { "moÍ¤chte" }); 
+  }
+  
+  /* Tests from StandardAnalyzer, just to show behavior is similar */
+  public void testAlphanumericSA() throws Exception {
+    // alphanumeric tokens
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "B2B", new String[]{"b2b"});
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "2B", new String[]{"2b"});
+  }
+
+  public void testDelimitersSA() throws Exception {
+    // other delimiters: "-", "/", ","
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "some-dashed-phrase", new String[]{"some", "dashed", "phrase"});
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "dogs,chase,cats", new String[]{"dogs", "chase", "cats"});
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "ac/dc", new String[]{"ac", "dc"});
+  }
+
+  public void testApostrophesSA() throws Exception {
+    // internal apostrophes: O'Reilly, you're, O'Reilly's
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "O'Reilly", new String[]{"o'reilly"});
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "you're", new String[]{"you're"});
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "she's", new String[]{"she's"});
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "Jim's", new String[]{"jim's"});
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "don't", new String[]{"don't"});
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "O'Reilly's", new String[]{"o'reilly's"});
+  }
+
+  public void testNumericSA() throws Exception {
+    // floating point, serial, model numbers, ip addresses, etc.
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "21.35", new String[]{"21.35"});
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "R2D2 C3PO", new String[]{"r2d2", "c3po"});
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "216.239.63.104", new String[]{"216.239.63.104"});
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "216.239.63.104", new String[]{"216.239.63.104"});
+  }
+
+  public void testTextWithNumbersSA() throws Exception {
+    // numbers
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "David has 5000 bones", new String[]{"david", "has", "5000", "bones"});
+  }
+
+  public void testVariousTextSA() throws Exception {
+    // various
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "C embedded developers wanted", new String[]{"c", "embedded", "developers", "wanted"});
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "foo bar FOO BAR", new String[]{"foo", "bar", "foo", "bar"});
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "foo      bar .  FOO <> BAR", new String[]{"foo", "bar", "foo", "bar"});
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "\"QUOTED\" word", new String[]{"quoted", "word"});
+  }
+
+  public void testKoreanSA() throws Exception {
+    // Korean words
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "???????? ????????", new String[]{"????????", "????????"});
+  }
+  
+  public void testOffsets() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "David has 5000 bones", 
+        new String[] {"david", "has", "5000", "bones"},
+        new int[] {0, 6, 10, 15},
+        new int[] {5, 9, 14, 20});
+  }
+  
+  public void testTypes() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "david has 5000 bones",
+        new String[] {"david", "has", "5000", "bones"},
+        new String[] { "<ALPHANUM>", "<ALPHANUM>", "<NUM>", "<ALPHANUM>" });
+  }
+  
+  public void testSupplementary() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "ð©??±é??¹æ???", 
+        new String[] {"ð©?", "??", "??", "??", "??", "??"},
+        new String[] { "<IDEOGRAPHIC>", "<IDEOGRAPHIC>", "<IDEOGRAPHIC>", "<IDEOGRAPHIC>", "<IDEOGRAPHIC>", "<IDEOGRAPHIC>" });
+  }
+  
+  public void testKorean() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "??????",
+        new String[] { "??????" },
+        new String[] { "<HANGUL>" });
+  }
+  
+  public void testJapanese() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "ä»???£ã? ??????",
+        new String[] { "ä»?", "??", "??", "??", "??????" },
+        new String[] { "<IDEOGRAPHIC>", "<IDEOGRAPHIC>", "<IDEOGRAPHIC>", "<HIRAGANA>", "<KATAKANA>" });
+  }
+  
+  public void testCombiningMarks() throws Exception {
+    checkOneTerm(a, "???", "???"); // hiragana
+    checkOneTerm(a, "?µã?", "?µã?"); // katakana
+    checkOneTerm(a, "å£¹ã?", "å£¹ã?"); // ideographic
+    checkOneTerm(a, "???",  "???"); // hangul
+  }
+  
+  /** @deprecated remove this and sophisticated backwards layer in 5.0 */
+  @Deprecated
+  public void testCombiningMarksBackwards() throws Exception {
+    Analyzer a = new UAX29URLEmailAnalyzer(Version.LUCENE_33);
+    checkOneTerm(a, "???", "??"); // hiragana Bug
+    checkOneTerm(a, "?µã?", "?µã?"); // katakana Works
+    checkOneTerm(a, "å£¹ã?", "å£?"); // ideographic Bug
+    checkOneTerm(a, "???",  "???"); // hangul Works
+  }
+
+  public void testBasicEmails() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a,
+        "one test@example.com two three [A@example.CO.UK] \"ArakaBanassaMassanaBakarA\" <info@Info.info>",
+        new String[] {"one", "test@example.com", "two", "three", "a@example.co.uk", "arakabanassamassanabakara", "info@info.info",},
+        new String[] { "<ALPHANUM>", "<EMAIL>", "<ALPHANUM>", "<ALPHANUM>", "<EMAIL>", "<ALPHANUM>", "<EMAIL>" });
+  }
+
+  public void testMailtoSchemeEmails () throws Exception {
+    // See LUCENE-3880
+    BaseTokenStreamTestCase.assertAnalyzesTo(a, "MAILTO:Test@Example.ORG",
+        new String[] {"mailto", "test@example.org"},
+        new String[] { "<ALPHANUM>", "<EMAIL>" });
+
+    // TODO: Support full mailto: scheme URIs. See RFC 6068: http://tools.ietf.org/html/rfc6068
+    BaseTokenStreamTestCase.assertAnalyzesTo
+        (a,  "mailto:personA@example.com,personB@example.com?cc=personC@example.com"
+            + "&subject=Subjectivity&body=Corpusivity%20or%20something%20like%20that",
+            new String[] { "mailto",
+                "persona@example.com",
+                // TODO: recognize ',' address delimiter. Also, see examples of ';' delimiter use at: http://www.mailto.co.uk/
+                ",personb@example.com",
+                "?cc=personc@example.com", // TODO: split field keys/values
+                "subject", "subjectivity",
+                "body", "corpusivity", "20or", "20something","20like", "20that" }, // TODO: Hex decoding + re-tokenization
+            new String[] { "<ALPHANUM>",
+                "<EMAIL>",
+                "<EMAIL>",
+                "<EMAIL>",
+                "<ALPHANUM>", "<ALPHANUM>",
+                "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>", "<ALPHANUM>" });
+  }
+
+  public void testBasicURLs() throws Exception {
+    BaseTokenStreamTestCase.assertAnalyzesTo(a,
+        "a <HTTPs://example.net/omg/isnt/that/NICE?no=its&n%30t#mntl-E>b-D ftp://www.example.com/ABC.txt file:///C:/path/to/a/FILE.txt C",
+        new String[] {"https://example.net/omg/isnt/that/nice?no=its&n%30t#mntl-e", "b", "d", "ftp://www.example.com/abc.txt", "file:///c:/path/to/a/file.txt", "c" },
+        new String[] { "<URL>", "<ALPHANUM>", "<ALPHANUM>", "<URL>", "<URL>", "<ALPHANUM>" });
+  }
+
+  
+  /** blast some random strings through the analyzer */
+  public void testRandomStrings() throws Exception {
+    checkRandomData(random, new UAX29URLEmailAnalyzer(TEST_VERSION_CURRENT), 10000*RANDOM_MULTIPLIER);
+  }
+}

