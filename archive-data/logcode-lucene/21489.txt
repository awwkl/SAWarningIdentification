GitDiffStart: 40997321953ac39452cac3ed706fcc40404488cf | Fri Jul 4 09:20:41 2008 +0000
diff --git a/src/java/org/apache/lucene/index/FieldsReader.java b/src/java/org/apache/lucene/index/FieldsReader.java
index f9b98f3..61b7820 100644
--- a/src/java/org/apache/lucene/index/FieldsReader.java
+++ b/src/java/org/apache/lucene/index/FieldsReader.java
@@ -550,28 +550,31 @@ final class FieldsReader {
   private final byte[] uncompress(final byte[] input)
           throws CorruptIndexException, IOException {
 
-    Inflater decompressor = new Inflater();
-    decompressor.setInput(input);
-
     // Create an expandable byte array to hold the decompressed data
     ByteArrayOutputStream bos = new ByteArrayOutputStream(input.length);
 
-    // Decompress the data
-    byte[] buf = new byte[1024];
-    while (!decompressor.finished()) {
-      try {
-        int count = decompressor.inflate(buf);
-        bos.write(buf, 0, count);
-      }
-      catch (DataFormatException e) {
-        // this will happen if the field is not compressed
-        CorruptIndexException newException = new CorruptIndexException("field data are in wrong format: " + e.toString());
-        newException.initCause(e);
-        throw newException;
+    Inflater decompressor = new Inflater();
+
+    try {
+      decompressor.setInput(input);
+
+      // Decompress the data
+      byte[] buf = new byte[1024];
+      while (!decompressor.finished()) {
+        try {
+          int count = decompressor.inflate(buf);
+          bos.write(buf, 0, count);
+        }
+        catch (DataFormatException e) {
+          // this will happen if the field is not compressed
+          CorruptIndexException newException = new CorruptIndexException("field data are in wrong format: " + e.toString());
+          newException.initCause(e);
+          throw newException;
+        }
       }
+    } finally {  
+      decompressor.end();
     }
-  
-    decompressor.end();
     
     // Get the decompressed data
     return bos.toByteArray();
diff --git a/src/java/org/apache/lucene/index/FieldsWriter.java b/src/java/org/apache/lucene/index/FieldsWriter.java
index e6dff0f..cdb89b4 100644
--- a/src/java/org/apache/lucene/index/FieldsWriter.java
+++ b/src/java/org/apache/lucene/index/FieldsWriter.java
@@ -225,14 +225,6 @@ final class FieldsWriter
 
     private final byte[] compress (byte[] input) {
 
-      // Create the compressor with highest level of compression
-      Deflater compressor = new Deflater();
-      compressor.setLevel(Deflater.BEST_COMPRESSION);
-
-      // Give the compressor the data to compress
-      compressor.setInput(input);
-      compressor.finish();
-
       /*
        * Create an expandable byte array to hold the compressed data.
        * You cannot use an array that's the same size as the orginal because
@@ -241,14 +233,26 @@ final class FieldsWriter
        */
       ByteArrayOutputStream bos = new ByteArrayOutputStream(input.length);
 
-      // Compress the data
-      byte[] buf = new byte[1024];
-      while (!compressor.finished()) {
-        int count = compressor.deflate(buf);
-        bos.write(buf, 0, count);
+      // Create the compressor with highest level of compression
+      Deflater compressor = new Deflater();
+
+      try {
+        compressor.setLevel(Deflater.BEST_COMPRESSION);
+
+        // Give the compressor the data to compress
+        compressor.setInput(input);
+        compressor.finish();
+
+        // Compress the data
+        byte[] buf = new byte[1024];
+        while (!compressor.finished()) {
+          int count = compressor.deflate(buf);
+          bos.write(buf, 0, count);
+        }
+
+      } finally {      
+        compressor.end();
       }
-      
-      compressor.end();
 
       // Get the compressed data
       return bos.toByteArray();

