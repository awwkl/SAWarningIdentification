GitDiffStart: 29f71547d34279e1f72b7b5082e45f332277d8a0 | Sun Apr 22 12:59:34 2012 +0000
diff --git a/lucene/JRE_VERSION_MIGRATION.txt b/lucene/JRE_VERSION_MIGRATION.txt
index 5889849..142ed55 100644
--- a/lucene/JRE_VERSION_MIGRATION.txt
+++ b/lucene/JRE_VERSION_MIGRATION.txt
@@ -31,6 +31,6 @@ using this Analyzer you are NOT affected.
 
 * SimpleAnalyzer, StopAnalyzer, LetterTokenizer, LowerCaseFilter, and 
 LowerCaseTokenizer may return different results, along with many other Analyzers
-and TokenStreams in Lucene's contrib area. If you are using one of these 
+and TokenStreams in Lucene's analysis modules. If you are using one of these 
 components, you may be affected.
 
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/collation/CollationAttributeFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/collation/CollationAttributeFactory.java
index ae294c8..21a101c 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/collation/CollationAttributeFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/collation/CollationAttributeFactory.java
@@ -51,8 +51,8 @@ import org.apache.lucene.util.AttributeSource;
  *   </li>
  * </ol> 
  * <p>
- *   The <code>ICUCollationAttributeFactory</code> in the icu package of Lucene's
- *   contrib area uses ICU4J's Collator, which makes its
+ *   The <code>ICUCollationAttributeFactory</code> in the analysis-icu package 
+ *   uses ICU4J's Collator, which makes its
  *   version available, thus allowing collation to be versioned independently
  *   from the JVM.  ICUCollationAttributeFactory is also significantly faster and
  *   generates significantly shorter keys than CollationAttributeFactory.  See
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/collation/CollationKeyAnalyzer.java b/lucene/analysis/common/src/java/org/apache/lucene/collation/CollationKeyAnalyzer.java
index 97b6a3f..948847e 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/collation/CollationKeyAnalyzer.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/collation/CollationKeyAnalyzer.java
@@ -58,8 +58,8 @@ import java.io.Reader;
  *   </li>
  * </ol> 
  * <p>
- *   The <code>ICUCollationKeyAnalyzer</code> in the icu package of Lucene's
- *   contrib area uses ICU4J's Collator, which makes its
+ *   The <code>ICUCollationKeyAnalyzer</code> in the analysis-icu package 
+ *   uses ICU4J's Collator, which makes its
  *   its version available, thus allowing collation to be versioned
  *   independently from the JVM.  ICUCollationKeyAnalyzer is also significantly
  *   faster and generates significantly shorter keys than CollationKeyAnalyzer.
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/collation/CollationKeyFilter.java b/lucene/analysis/common/src/java/org/apache/lucene/collation/CollationKeyFilter.java
index 39ac699..05b10ac 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/collation/CollationKeyFilter.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/collation/CollationKeyFilter.java
@@ -55,8 +55,8 @@ import java.text.Collator;
  *   </li>
  * </ol> 
  * <p>
- *   The <code>ICUCollationKeyFilter</code> in the icu package of Lucene's
- *   contrib area uses ICU4J's Collator, which makes its
+ *   The <code>ICUCollationKeyFilter</code> in the analysis-icu package 
+ *   uses ICU4J's Collator, which makes its
  *   version available, thus allowing collation to be versioned independently
  *   from the JVM.  ICUCollationKeyFilter is also significantly faster and
  *   generates significantly shorter keys than CollationKeyFilter.  See
diff --git a/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java b/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
index ab6b7ca..b5edf27 100644
--- a/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
+++ b/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
@@ -325,7 +325,7 @@ public class MemoryIndex {
    * Equivalent to adding a tokenized, indexed, termVectorStored, unstored,
    * Lucene {@link org.apache.lucene.document.Field}.
    * Finally closes the token stream. Note that untokenized keywords can be added with this method via 
-   * {@link #keywordTokenStream(Collection)}, the Lucene contrib <code>KeywordTokenizer</code> or similar utilities.
+   * {@link #keywordTokenStream(Collection)}, the Lucene <code>KeywordTokenizer</code> or similar utilities.
    * 
    * @param fieldName
    *            a name to be associated with the text
diff --git a/lucene/module-build.xml b/lucene/module-build.xml
index 290da91..62cfd96 100644
--- a/lucene/module-build.xml
+++ b/lucene/module-build.xml
@@ -20,7 +20,7 @@
 <project name="module-build" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
   <echo>Building ${ant.project.name}...</echo>
 
-  <!-- TODO: adjust build.dir/dist.dir appropriately when a contrib project is run individually -->
+  <!-- TODO: adjust build.dir/dist.dir appropriately when a module is run individually -->
   <dirname file="${ant.file.module-build}" property="module-build.dir"/>
   <property name="build.dir" location="${module-build.dir}/build/${ant.project.name}"/>
   <property name="dist.dir" location="${module-build.dir}/dist/${ant.project.name}"/>
diff --git a/lucene/queryparser/docs/xml/README.htm b/lucene/queryparser/docs/xml/README.htm
index 0724113..649698b 100644
--- a/lucene/queryparser/docs/xml/README.htm
+++ b/lucene/queryparser/docs/xml/README.htm
@@ -30,6 +30,6 @@
 				<li>A modular design with expandable support for new query/filter types</li>
 			</ul>
 		</p>
-		<p>This code is dependent on the "queries" contrib module although the "CoreParser" can be compiled with just Lucene core if required</p>
+		<p>This code is dependent on the "queries" module although the "CoreParser" can be compiled with just Lucene core if required</p>
 	</body>
 </html>
\ No newline at end of file
diff --git a/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java b/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java
index 0f5e79c..51dae23 100644
--- a/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java
+++ b/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.java
@@ -893,7 +893,7 @@ public class TestQPHelper extends LuceneTestCase {
     assertEscapedQueryEquals("&& abc &&", a, "\\&\\& abc \\&\\&");
   }
 
-  @Ignore("contrib queryparser shouldn't escape wildcard terms")
+  @Ignore("flexible queryparser shouldn't escape wildcard terms")
   public void testEscapedWildcard() throws Exception {
     StandardQueryParser qp = new StandardQueryParser();
     qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));
diff --git a/lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java b/lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
index 88190c1..96af099 100644
--- a/lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
+++ b/lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
@@ -52,7 +52,7 @@ import org.apache.lucene.util.automaton.RegExp;
  * Base Test class for QueryParser subclasses
  */
 // TODO: it would be better to refactor the parts that are specific really
-// to the core QP and subclass/use the parts that are not in the contrib QP
+// to the core QP and subclass/use the parts that are not in the flexible QP
 public abstract class QueryParserTestBase extends LuceneTestCase {
   
   public static Analyzer qpAnalyzer = new QPTestAnalyzer();

