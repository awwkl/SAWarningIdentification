GitDiffStart: 0aec4dee4d16990c99137a4f00edc594164ea3db | Wed Sep 19 22:16:20 2012 +0000
diff --git a/lucene/build.xml b/lucene/build.xml
index 613fb23..dc3d9b2 100644
--- a/lucene/build.xml
+++ b/lucene/build.xml
@@ -263,6 +263,7 @@
       <!-- too much to fix for now, but enforce full javadocs for key packages -->
       <check-missing-javadocs dir="build/docs/core/org/apache/lucene/analysis" level="method"/>
       <check-missing-javadocs dir="build/docs/core/org/apache/lucene/document" level="method"/>
+      <check-missing-javadocs dir="build/docs/core/org/apache/lucene/search/similarities" level="method"/>
     </sequential>
   </target>
   
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader.java
index 40b97ed..85df40e 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader.java
@@ -100,8 +100,7 @@ public class Lucene40FieldInfosReader extends FieldInfosReader {
     }
   }
 
-  public DocValues.Type getDocValuesType(
-      final byte b) {
+  private static DocValues.Type getDocValuesType(final byte b) {
     switch(b) {
       case 0:
         return null;
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/AfterEffect.java b/lucene/core/src/java/org/apache/lucene/search/similarities/AfterEffect.java
index 0566947..0aa15f1 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/AfterEffect.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/AfterEffect.java
@@ -30,6 +30,13 @@ import org.apache.lucene.search.Explanation;
  * @lucene.experimental
  */
 public abstract class AfterEffect {
+  
+  /**
+   * Sole constructor. (For invocation by subclass 
+   * constructors, typically implicit.)
+   */
+  public AfterEffect() {}
+
   /** Returns the aftereffect score. */
   public abstract float score(BasicStats stats, float tfn);
   
@@ -38,6 +45,10 @@ public abstract class AfterEffect {
 
   /** Implementation used when there is no aftereffect. */
   public static final class NoAfterEffect extends AfterEffect {
+    
+    /** Sole constructor: parameter-free */
+    public NoAfterEffect() {}
+    
     @Override
     public final float score(BasicStats stats, float tfn) {
       return 1f;
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/AfterEffectB.java b/lucene/core/src/java/org/apache/lucene/search/similarities/AfterEffectB.java
index 149cace..0c9b98c 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/AfterEffectB.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/AfterEffectB.java
@@ -24,6 +24,10 @@ import org.apache.lucene.search.Explanation;
  * @lucene.experimental
  */
 public class AfterEffectB extends AfterEffect {
+
+  /** Sole constructor: parameter-free */
+  public AfterEffectB() {}
+
   @Override
   public final float score(BasicStats stats, float tfn) {
     long F = stats.getTotalTermFreq()+1;
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/AfterEffectL.java b/lucene/core/src/java/org/apache/lucene/search/similarities/AfterEffectL.java
index 8fd4e0d..9e0d8b0 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/AfterEffectL.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/AfterEffectL.java
@@ -24,6 +24,10 @@ import org.apache.lucene.search.Explanation;
  * @lucene.experimental
  */
 public class AfterEffectL extends AfterEffect {
+  
+  /** Sole constructor: parameter-free */
+  public AfterEffectL() {}
+
   @Override
   public final float score(BasicStats stats, float tfn) {
     return 1 / (tfn + 1);
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.java
index f9c51ed..aac624f 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.java
@@ -41,6 +41,11 @@ public class BM25Similarity extends Similarity {
   private final float b;
   // TODO: should we add a delta like sifaka.cs.uiuc.edu/~ylv2/pub/sigir11-bm25l.pdf ?
 
+  /**
+   * BM25 with the supplied parameter values.
+   * @param k1 Controls non-linear term frequency normalization (saturation).
+   * @param b Controls to what degree document length normalizes tf values.
+   */
   public BM25Similarity(float k1, float b) {
     this.k1 = k1;
     this.b  = b;
@@ -98,17 +103,23 @@ public class BM25Similarity extends Similarity {
     return NORM_TABLE[b & 0xFF];
   }
   
-  // Default true
+  /** 
+   * True if overlap tokens (tokens with a position of increment of zero) are
+   * discounted from the document's length.
+   */
   protected boolean discountOverlaps = true;
 
-  /** Determines whether overlap tokens (Tokens with 0 position increment) are 
+  /** Sets whether overlap tokens (Tokens with 0 position increment) are 
    *  ignored when computing norm.  By default this is true, meaning overlap
    *  tokens do not count when computing norms. */
   public void setDiscountOverlaps(boolean v) {
     discountOverlaps = v;
   }
 
-  /** @see #setDiscountOverlaps */
+  /**
+   * Returns true if overlap tokens are discounted from the document's length. 
+   * @see #setDiscountOverlaps 
+   */
   public boolean getDiscountOverlaps() {
     return discountOverlaps;
   }
@@ -130,6 +141,28 @@ public class BM25Similarity extends Similarity {
     norm.setByte(encodeNormValue(state.getBoost(), numTerms));
   }
 
+  /**
+   * Computes a score factor for a simple term and returns an explanation
+   * for that score factor.
+   * 
+   * <p>
+   * The default implementation uses:
+   * 
+   * <pre class="prettyprint">
+   * idf(docFreq, searcher.maxDoc());
+   * </pre>
+   * 
+   * Note that {@link CollectionStatistics#maxDoc()} is used instead of
+   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also 
+   * {@link TermStatistics#docFreq()} is used, and when the latter 
+   * is inaccurate, so is {@link CollectionStatistics#maxDoc()}, and in the same direction.
+   * In addition, {@link CollectionStatistics#maxDoc()} is more efficient to compute
+   *   
+   * @param collectionStats collection-level statistics
+   * @param termStats term-level statistics for the term
+   * @return an Explain object that includes both an idf score factor 
+             and an explanation for the term.
+   */
   public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats) {
     final long df = termStats.docFreq();
     final long max = collectionStats.maxDoc();
@@ -137,6 +170,19 @@ public class BM25Similarity extends Similarity {
     return new Explanation(idf, "idf(docFreq=" + df + ", maxDocs=" + max + ")");
   }
 
+  /**
+   * Computes a score factor for a phrase.
+   * 
+   * <p>
+   * The default implementation sums the idf factor for
+   * each term in the phrase.
+   * 
+   * @param collectionStats collection-level statistics
+   * @param termStats term-level statistics for the terms in the phrase
+   * @return an Explain object that includes both an idf 
+   *         score factor for the phrase and an explanation 
+   *         for each term.
+   */
   public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {
     final long max = collectionStats.maxDoc();
     float idf = 0.0f;
@@ -344,10 +390,18 @@ public class BM25Similarity extends Similarity {
     return "BM25(k1=" + k1 + ",b=" + b + ")";
   }
   
+  /** 
+   * Returns the <code>k1</code> parameter
+   * @see #BM25Similarity(float, float) 
+   */
   public float getK1() {
     return k1;
   }
   
+  /**
+   * Returns the <code>b</code> parameter 
+   * @see #BM25Similarity(float, float) 
+   */
   public float getB() {
     return b;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModel.java b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModel.java
index 13ef257..116fc2a 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModel.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModel.java
@@ -29,6 +29,13 @@ import org.apache.lucene.search.Explanation;
  * @lucene.experimental
  */
 public abstract class BasicModel {
+  
+  /**
+   * Sole constructor. (For invocation by subclass 
+   * constructors, typically implicit.)
+   */
+  public BasicModel() {}
+
   /** Returns the informative content score. */
   public abstract float score(BasicStats stats, float tfn);
   
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelBE.java b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelBE.java
index c1513d6..c12f8d7 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelBE.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelBE.java
@@ -30,6 +30,10 @@ import static org.apache.lucene.search.similarities.SimilarityBase.log2;
  * but with less practical problems. 
  */
 public class BasicModelBE extends BasicModel {
+  
+  /** Sole constructor: parameter-free */
+  public BasicModelBE() {}
+
   @Override
   public final float score(BasicStats stats, float tfn) {
     double F = stats.getTotalTermFreq() + 1 + tfn;
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelD.java b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelD.java
index 982afe4..f5b2013 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelD.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelD.java
@@ -32,6 +32,10 @@ import static org.apache.lucene.search.similarities.SimilarityBase.log2;
  * @lucene.experimental
  */
 public class BasicModelD extends BasicModel {
+  
+  /** Sole constructor: parameter-free */
+  public BasicModelD() {}
+  
   @Override
   public final float score(BasicStats stats, float tfn) {
     // we have to ensure phi is always < 1 for tiny TTF values, otherwise nphi can go negative,
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelG.java b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelG.java
index 674e018..2e287c6 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelG.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelG.java
@@ -26,6 +26,10 @@ import static org.apache.lucene.search.similarities.SimilarityBase.log2;
  * @lucene.experimental
  */
 public class BasicModelG extends BasicModel {
+  
+  /** Sole constructor: parameter-free */
+  public BasicModelG() {}
+
   @Override
   public final float score(BasicStats stats, float tfn) {
     // just like in BE, approximation only holds true when F << N, so we use lambda = F / (N + F)
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIF.java b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIF.java
index f97be3e..e5c5841 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIF.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIF.java
@@ -24,6 +24,10 @@ import static org.apache.lucene.search.similarities.SimilarityBase.log2;
  * @lucene.experimental
  */ 
 public class BasicModelIF extends BasicModel {
+  
+  /** Sole constructor: parameter-free */
+  public BasicModelIF() {}
+
   @Override
   public final float score(BasicStats stats, float tfn) {
     long N = stats.getNumberOfDocuments();
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIn.java b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIn.java
index 7bd3ab0..c52ad43 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIn.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIn.java
@@ -25,6 +25,10 @@ import static org.apache.lucene.search.similarities.SimilarityBase.log2;
  * @lucene.experimental
  */ 
 public class BasicModelIn extends BasicModel {
+  
+  /** Sole constructor: parameter-free */
+  public BasicModelIn() {}
+
   @Override
   public final float score(BasicStats stats, float tfn) {
     long N = stats.getNumberOfDocuments();
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIne.java b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIne.java
index 1377680..4bae8b1 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIne.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIne.java
@@ -25,6 +25,10 @@ import static org.apache.lucene.search.similarities.SimilarityBase.log2;
  * @lucene.experimental
  */ 
 public class BasicModelIne extends BasicModel {
+  
+  /** Sole constructor: parameter-free */
+  public BasicModelIne() {}
+
   @Override
   public final float score(BasicStats stats, float tfn) {
     long N = stats.getNumberOfDocuments();
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelP.java b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelP.java
index e981764..9528bac 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelP.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelP.java
@@ -31,6 +31,9 @@ public class BasicModelP extends BasicModel {
   /** {@code log2(Math.E)}, precomputed. */
   protected static double LOG2_E = log2(Math.E);
   
+  /** Sole constructor: parameter-free */
+  public BasicModelP() {}
+  
   @Override
   public final float score(BasicStats stats, float tfn) {
     float lambda = (float)(stats.getTotalTermFreq()+1) / (stats.getNumberOfDocuments()+1);
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/DFRSimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/DFRSimilarity.java
index ff45f21..974a8f6 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/DFRSimilarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/DFRSimilarity.java
@@ -18,6 +18,8 @@ package org.apache.lucene.search.similarities;
  */
 
 import org.apache.lucene.search.Explanation;
+import org.apache.lucene.search.similarities.AfterEffect.NoAfterEffect;
+import org.apache.lucene.search.similarities.Normalization.NoNormalization;
 
 /**
  * Implements the <em>divergence from randomness (DFR)</em> framework
@@ -31,6 +33,41 @@ import org.apache.lucene.search.Explanation;
  * {@code BasicModel}, {@code AfterEffect} and {@code Normalization},
  * respectively. The names of these classes were chosen to match the names of
  * their counterparts in the Terrier IR engine.</p>
+ * <p>To construct a DFRSimilarity, you must specify the implementations for 
+ * all three components of DFR:
+ * <ol>
+ *    <li>{@link BasicModel}: Basic model of information content:
+ *        <ul>
+ *           <li>{@link BasicModelBE}: Limiting form of Bose-Einstein
+ *           <li>{@link BasicModelG}: Geometric approximation of Bose-Einstein
+ *           <li>{@link BasicModelP}: Poisson approximation of the Binomial
+ *           <li>{@link BasicModelD}: Divergence approximation of the Binomial 
+ *           <li>{@link BasicModelIn}: Inverse document frequency
+ *           <li>{@link BasicModelIne}: Inverse expected document
+ *               frequency [mixture of Poisson and IDF]
+ *           <li>{@link BasicModelIF}: Inverse term frequency
+ *               [approximation of I(ne)]
+ *        </ul>
+ *    <li>{@link AfterEffect}: First normalization of information
+ *        gain:
+ *        <ul>
+ *           <li>{@link AfterEffectL}: Laplace's law of succession
+ *           <li>{@link AfterEffectB}: Ratio of two Bernoulli processes
+ *           <li>{@link NoAfterEffect}: no first normalization
+ *        </ul>
+ *    <li>{@link Normalization}: Second (length) normalization:
+ *        <ul>
+ *           <li>{@link NormalizationH1}: Uniform distribution of term
+ *               frequency
+ *           <li>{@link NormalizationH2}: term frequency density inversely
+ *               related to length
+ *           <li>{@link NormalizationH3}: term frequency normalization
+ *               provided by Dirichlet prior
+ *           <li>{@link NormalizationZ}: term frequency normalization provided
+ *                by a Zipfian relation
+ *           <li>{@link NoNormalization}: no second normalization
+ *        </ul>
+ * </ol>
  * <p>Note that <em>qtf</em>, the multiplicity of term-occurrence in the query,
  * is not handled by this implementation.</p>
  * @see BasicModel
@@ -46,6 +83,16 @@ public class DFRSimilarity extends SimilarityBase {
   /** The term frequency normalization. */
   protected final Normalization normalization;
   
+  /**
+   * Creates DFRSimilarity from the three components.
+   * <p>
+   * Note that <code>null</code> values are not allowed:
+   * if you want no normalization or after-effect, instead pass 
+   * {@link NoNormalization} or {@link NoAfterEffect} respectively.
+   * @param basicModel Basic model of information content
+   * @param afterEffect First normalization of information gain
+   * @param normalization Second (length) normalization
+   */
   public DFRSimilarity(BasicModel basicModel,
                        AfterEffect afterEffect,
                        Normalization normalization) {
@@ -84,14 +131,23 @@ public class DFRSimilarity extends SimilarityBase {
                   + normalization.toString();
   }
   
+  /**
+   * Returns the basic model of information content
+   */
   public BasicModel getBasicModel() {
     return basicModel;
   }
   
+  /**
+   * Returns the first normalization
+   */
   public AfterEffect getAfterEffect() {
     return afterEffect;
   }
   
+  /**
+   * Returns the second normalization
+   */
   public Normalization getNormalization() {
     return normalization;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity.java
index c2d25a8..faa9904 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity.java
@@ -24,6 +24,9 @@ import org.apache.lucene.util.BytesRef;
 /** Expert: Default scoring implementation. */
 public class DefaultSimilarity extends TFIDFSimilarity {
   
+  /** Sole constructor: parameter-free */
+  public DefaultSimilarity() {}
+  
   /** Implemented as <code>overlap / maxOverlap</code>. */
   public float coord(int overlap, int maxOverlap) {
     return overlap / (float)maxOverlap;
@@ -76,7 +79,10 @@ public class DefaultSimilarity extends TFIDFSimilarity {
     return (float)(Math.log(numDocs/(double)(docFreq+1)) + 1.0);
   }
     
-  // Default true
+  /** 
+   * True if overlap tokens (tokens with a position of increment of zero) are
+   * discounted from the document's length.
+   */
   protected boolean discountOverlaps = true;
 
   /** Determines whether overlap tokens (Tokens with
@@ -92,7 +98,10 @@ public class DefaultSimilarity extends TFIDFSimilarity {
     discountOverlaps = v;
   }
 
-  /** @see #setDiscountOverlaps */
+  /**
+   * Returns true if overlap tokens are discounted from the document's length. 
+   * @see #setDiscountOverlaps 
+   */
   public boolean getDiscountOverlaps() {
     return discountOverlaps;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/Distribution.java b/lucene/core/src/java/org/apache/lucene/search/similarities/Distribution.java
index 98d73ed..bbd07ea 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/Distribution.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/Distribution.java
@@ -26,6 +26,13 @@ import org.apache.lucene.search.Explanation;
  * @lucene.experimental
  */
 public abstract class Distribution {
+  
+  /**
+   * Sole constructor. (For invocation by subclass 
+   * constructors, typically implicit.)
+   */
+  public Distribution() {}
+
   /** Computes the score. */
   public abstract float score(BasicStats stats, float tfn, float lambda);
   
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/DistributionLL.java b/lucene/core/src/java/org/apache/lucene/search/similarities/DistributionLL.java
index da4e817..85cdd38 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/DistributionLL.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/DistributionLL.java
@@ -25,6 +25,10 @@ package org.apache.lucene.search.similarities;
  * @lucene.experimental
  */
 public class DistributionLL extends Distribution {
+
+  /** Sole constructor: parameter-free */
+  public DistributionLL() {}
+
   @Override
   public final float score(BasicStats stats, float tfn, float lambda) {
     return (float)-Math.log(lambda / (tfn + lambda));
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/DistributionSPL.java b/lucene/core/src/java/org/apache/lucene/search/similarities/DistributionSPL.java
index 54cf065..1b13469 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/DistributionSPL.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/DistributionSPL.java
@@ -26,6 +26,10 @@ package org.apache.lucene.search.similarities;
  * @lucene.experimental
  */
 public class DistributionSPL extends Distribution {
+  
+  /** Sole constructor: parameter-free */
+  public DistributionSPL() {}
+
   @Override
   public final float score(BasicStats stats, float tfn, float lambda) {
     if (lambda == 1f) {
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/IBSimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/IBSimilarity.java
index bdbb499..f09549f 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/IBSimilarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/IBSimilarity.java
@@ -18,6 +18,7 @@ package org.apache.lucene.search.similarities;
  */
 
 import org.apache.lucene.search.Explanation;
+import org.apache.lucene.search.similarities.Normalization.NoNormalization;
 
 /**
  * Provides a framework for the family of information-based models, as described
@@ -39,6 +40,32 @@ import org.apache.lucene.search.Explanation;
  * <p>The framework described in the paper has many similarities to the DFR
  * framework (see {@link DFRSimilarity}). It is possible that the two
  * Similarities will be merged at one point.</p>
+ * <p>To construct an IBSimilarity, you must specify the implementations for 
+ * all three components of the Information-Based model.
+ * <ol>
+ *     <li>{@link Distribution}: Probabilistic distribution used to
+ *         model term occurrence
+ *         <ul>
+ *             <li>{@link DistributionLL}: Log-logistic</li>
+ *             <li>{@link DistributionLL}: Smoothed power-law</li>
+ *         </ul>
+ *     </li>
+ *     <li>{@link Lambda}: &lambda;<sub>w</sub> parameter of the
+ *         probability distribution
+ *         <ul>
+ *             <li>{@link LambdaDF}: <code>N<sub>w</sub>/N</code> or average
+ *                 number of documents where w occurs</li>
+ *             <li>{@link LambdaTTF}: <code>F<sub>w</sub>/N</code> or
+ *                 average number of occurrences of w in the collection</li>
+ *         </ul>
+ *     </li>
+ *     <li>{@link Normalization}: Term frequency normalization 
+ *         <blockquote>Any supported DFR normalization (listed in
+ *                      {@link DFRSimilarity})</blockquote>
+ *     </li>
+ * </ol>
+ * <p>
+ * @see DFRSimilarity
  * @lucene.experimental 
  */
 public class IBSimilarity extends SimilarityBase {
@@ -49,6 +76,16 @@ public class IBSimilarity extends SimilarityBase {
   /** The term frequency normalization. */
   protected final Normalization normalization;
   
+  /**
+   * Creates IBSimilarity from the three components.
+   * <p>
+   * Note that <code>null</code> values are not allowed:
+   * if you want no normalization, instead pass 
+   * {@link NoNormalization}.
+   * @param distribution probabilistic distribution modeling term occurrence
+   * @param lambda distribution's &lambda;<sub>w</sub> parameter
+   * @param normalization term frequency normalization
+   */
   public IBSimilarity(Distribution distribution,
                       Lambda lambda,
                       Normalization normalization) {
@@ -92,14 +129,23 @@ public class IBSimilarity extends SimilarityBase {
                  + normalization.toString();
   }
   
+  /**
+   * Returns the distribution
+   */
   public Distribution getDistribution() {
     return distribution;
   }
   
+  /**
+   * Returns the distribution's lambda parameter
+   */
   public Lambda getLambda() {
     return lambda;
   }
-  
+
+  /**
+   * Returns the term frequency normalization
+   */
   public Normalization getNormalization() {
     return normalization;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/LMDirichletSimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/LMDirichletSimilarity.java
index 0c537d1..9cc4b62 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/LMDirichletSimilarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/LMDirichletSimilarity.java
@@ -40,13 +40,13 @@ public class LMDirichletSimilarity extends LMSimilarity {
   /** The &mu; parameter. */
   private final float mu;
   
-  /** @param mu the &mu; parameter. */
+  /** Instantiates the similarity with the provided &mu; parameter. */
   public LMDirichletSimilarity(CollectionModel collectionModel, float mu) {
     super(collectionModel);
     this.mu = mu;
   }
   
-  /** @param mu the &mu; parameter. */
+  /** Instantiates the similarity with the provided &mu; parameter. */
   public LMDirichletSimilarity(float mu) {
     this.mu = mu;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.java
index 1edb8f0..36f4b9c 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.java
@@ -37,14 +37,14 @@ public class LMJelinekMercerSimilarity extends LMSimilarity {
   /** The &lambda; parameter. */
   private final float lambda;
   
-  /** @param lambda the &lambda; parameter. */
+  /** Instantiates with the specified collectionModel and &lambda; parameter. */
   public LMJelinekMercerSimilarity(
       CollectionModel collectionModel, float lambda) {
     super(collectionModel);
     this.lambda = lambda;
   }
 
-  /** @param lambda the &lambda; parameter. */
+  /** Instantiates with the specified &lambda; parameter. */
   public LMJelinekMercerSimilarity(float lambda) {
     this.lambda = lambda;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/LMSimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/LMSimilarity.java
index 8018ae1..0476736 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/LMSimilarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/LMSimilarity.java
@@ -104,6 +104,9 @@ public abstract class LMSimilarity extends SimilarityBase {
     /** The probability that the current term is generated by the collection. */
     private float collectionProbability;
     
+    /**
+     * Creates LMStats for the provided field and query-time boost
+     */
     public LMStats(String field, float queryBoost) {
       super(field, queryBoost);
     }
@@ -142,6 +145,10 @@ public abstract class LMSimilarity extends SimilarityBase {
    * collection, divided by the total number of tokens {@code + 1}.
    */
   public static class DefaultCollectionModel implements CollectionModel {
+
+    /** Sole constructor: parameter-free */
+    public DefaultCollectionModel() {}
+
     @Override
     public float computeProbability(BasicStats stats) {
       return (stats.getTotalTermFreq()+1F) / (stats.getNumberOfFieldTokens()+1F);
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/Lambda.java b/lucene/core/src/java/org/apache/lucene/search/similarities/Lambda.java
index cefdb2c..7680325 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/Lambda.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/Lambda.java
@@ -26,6 +26,13 @@ import org.apache.lucene.search.Explanation;
  * @lucene.experimental
  */
 public abstract class Lambda {
+  
+  /**
+   * Sole constructor. (For invocation by subclass 
+   * constructors, typically implicit.)
+   */
+  public Lambda() {}
+
   /** Computes the lambda parameter. */
   public abstract float lambda(BasicStats stats);
   /** Explains the lambda parameter. */
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/LambdaDF.java b/lucene/core/src/java/org/apache/lucene/search/similarities/LambdaDF.java
index 862a22b..58ac353 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/LambdaDF.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/LambdaDF.java
@@ -24,6 +24,10 @@ import org.apache.lucene.search.Explanation;
  * @lucene.experimental
  */
 public class LambdaDF extends Lambda {
+  
+  /** Sole constructor: parameter-free */
+  public LambdaDF() {}
+
   @Override
   public final float lambda(BasicStats stats) {
     return (stats.getDocFreq()+1F) / (stats.getNumberOfDocuments()+1F);
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/LambdaTTF.java b/lucene/core/src/java/org/apache/lucene/search/similarities/LambdaTTF.java
index 58bc0ba..a9a856e 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/LambdaTTF.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/LambdaTTF.java
@@ -24,6 +24,10 @@ import org.apache.lucene.search.Explanation;
  * @lucene.experimental
  */
 public class LambdaTTF extends Lambda {  
+  
+  /** Sole constructor: parameter-free */
+  public LambdaTTF() {}
+
   @Override
   public final float lambda(BasicStats stats) {
     return (stats.getTotalTermFreq()+1F) / (stats.getNumberOfDocuments()+1F);
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/MultiSimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/MultiSimilarity.java
index 67c98ed..e34d9cc 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/MultiSimilarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/MultiSimilarity.java
@@ -34,8 +34,11 @@ import org.apache.lucene.util.BytesRef;
  * @lucene.experimental
  */
 public class MultiSimilarity extends Similarity {
+  /** the sub-similarities used to create the combined score */
   protected final Similarity sims[];
   
+  /** Creates a MultiSimilarity which will sum the scores
+   * of the provided <code>sims</code>. */
   public MultiSimilarity(Similarity sims[]) {
     this.sims = sims;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/Normalization.java b/lucene/core/src/java/org/apache/lucene/search/similarities/Normalization.java
index 29bd4c89..e27159f 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/Normalization.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/Normalization.java
@@ -27,6 +27,13 @@ import org.apache.lucene.search.Explanation;
  * @lucene.experimental
  */
 public abstract class Normalization {
+  
+  /**
+   * Sole constructor. (For invocation by subclass 
+   * constructors, typically implicit.)
+   */
+  public Normalization() {}
+
   /** Returns the normalized term frequency.
    * @param len the field length. */
   public abstract float tfn(BasicStats stats, float tf, float len);
@@ -50,6 +57,10 @@ public abstract class Normalization {
 
   /** Implementation used when there is no normalization. */
   public static final class NoNormalization extends Normalization {
+    
+    /** Sole constructor: parameter-free */
+    public NoNormalization() {}
+    
     @Override
     public final float tfn(BasicStats stats, float tf, float len) {
       return tf;
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationH1.java b/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationH1.java
index 29c3813..c9a6187 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationH1.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationH1.java
@@ -30,10 +30,18 @@ package org.apache.lucene.search.similarities;
 public class NormalizationH1 extends Normalization {
   private final float c;
   
+  /**
+   * Creates NormalizationH1 with the supplied parameter <code>c</code>.
+   * @param c hyper-parameter that controls the term frequency 
+   * normalization with respect to the document length.
+   */
   public NormalizationH1(float c) {
     this.c = c;
   }
   
+  /**
+   * Calls {@link #NormalizationH1(float) NormalizationH1(1)}
+   */
   public NormalizationH1() {
     this(1);
   }
@@ -48,6 +56,10 @@ public class NormalizationH1 extends Normalization {
     return "1";
   }
   
+  /**
+   * Returns the <code>c</code> parameter.
+   * @see #NormalizationH1(float)
+   */
   public float getC() {
     return c;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationH2.java b/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationH2.java
index da5221e..cbeaef1 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationH2.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationH2.java
@@ -32,10 +32,18 @@ import static org.apache.lucene.search.similarities.SimilarityBase.log2;
 public class NormalizationH2 extends Normalization {
   private final float c;
   
+  /**
+   * Creates NormalizationH2 with the supplied parameter <code>c</code>.
+   * @param c hyper-parameter that controls the term frequency 
+   * normalization with respect to the document length.
+   */
   public NormalizationH2(float c) {
     this.c = c;
   }
 
+  /**
+   * Calls {@link #NormalizationH2(float) NormalizationH2(1)}
+   */
   public NormalizationH2() {
     this(1);
   }
@@ -50,6 +58,10 @@ public class NormalizationH2 extends Normalization {
     return "2";
   }
   
+  /**
+   * Returns the <code>c</code> parameter.
+   * @see #NormalizationH2(float)
+   */
   public float getC() {
     return c;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationH3.java b/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationH3.java
index 903bdf3..5a1bae8 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationH3.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationH3.java
@@ -24,10 +24,17 @@ package org.apache.lucene.search.similarities;
 public class NormalizationH3 extends Normalization {
   private final float mu;
   
+  /**
+   * Calls {@link #NormalizationH3(float) NormalizationH3(800)}
+   */
   public NormalizationH3() {
     this(800F);
   }
   
+  /**
+   * Creates NormalizationH3 with the supplied parameter <code>&mu;</code>.
+   * @param mu smoothing parameter <code>&mu;</code>
+   */
   public NormalizationH3(float mu) {
     this.mu = mu;
   }
@@ -42,6 +49,10 @@ public class NormalizationH3 extends Normalization {
     return "3(" + mu + ")";
   }
   
+  /**
+   * Returns the parameter <code>&mu;</code>
+   * @see #NormalizationH3(float)
+   */
   public float getMu() {
     return mu;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationZ.java b/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationZ.java
index 61ebdf1..d5551a6 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationZ.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/NormalizationZ.java
@@ -24,10 +24,18 @@ package org.apache.lucene.search.similarities;
 public class NormalizationZ extends Normalization {
   final float z;
 
+  /**
+   * Calls {@link #NormalizationZ(float) NormalizationZ(0.3)}
+   */
   public NormalizationZ() {
     this(0.30F);
   }
 
+  /**
+   * Creates NormalizationZ with the supplied parameter <code>z</code>.
+   * @param z represents <code>A/(A+1)</code> where <code>A</code> 
+   *          measures the specificity of the language.
+   */
   public NormalizationZ(float z) {
     this.z = z;
   }
@@ -42,6 +50,10 @@ public class NormalizationZ extends Normalization {
     return "Z(" + z + ")";
   }
   
+  /**
+   * Returns the parameter <code>z</code>
+   * @see #NormalizationZ(float)
+   */
   public float getZ() {
     return z;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/PerFieldSimilarityWrapper.java b/lucene/core/src/java/org/apache/lucene/search/similarities/PerFieldSimilarityWrapper.java
index 117787a..975a934 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/PerFieldSimilarityWrapper.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/PerFieldSimilarityWrapper.java
@@ -34,6 +34,12 @@ import org.apache.lucene.search.TermStatistics;
  * @lucene.experimental
  */
 public abstract class PerFieldSimilarityWrapper extends Similarity {
+  
+  /**
+   * Sole constructor. (For invocation by subclass 
+   * constructors, typically implicit.)
+   */
+  public PerFieldSimilarityWrapper() {}
 
   @Override
   public final void computeNorm(FieldInvertState state, Norm norm) {
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.java
index 198ef8c..bacd4e6 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.java
@@ -109,6 +109,12 @@ import org.apache.lucene.util.SmallFloat; // javadoc
  */
 public abstract class Similarity {
   
+  /**
+   * Sole constructor. (For invocation by subclass 
+   * constructors, typically implicit.)
+   */
+  public Similarity() {}
+  
   /** Hook to integrate coordinate-level matching.
    * <p>
    * By default this is disabled (returns <code>1</code>), as with
@@ -193,6 +199,13 @@ public abstract class Similarity {
    * Frequencies are integers (the term or phrase frequency within the document)
    */
   public static abstract class ExactSimScorer {
+    
+    /**
+     * Sole constructor. (For invocation by subclass 
+     * constructors, typically implicit.)
+     */
+    public ExactSimScorer() {}
+
     /**
      * Score a single document
      * @param doc document id
@@ -224,6 +237,13 @@ public abstract class Similarity {
    * {@link SloppySimScorer#computeSlopFactor(int)}.
    */
   public static abstract class SloppySimScorer {
+    
+    /**
+     * Sole constructor. (For invocation by subclass 
+     * constructors, typically implicit.)
+     */
+    public SloppySimScorer() {}
+
     /**
      * Score a single document
      * @param doc document id within the inverted index segment
@@ -259,6 +279,12 @@ public abstract class Similarity {
    */
   public static abstract class SimWeight {
     
+    /**
+     * Sole constructor. (For invocation by subclass 
+     * constructors, typically implicit.)
+     */
+    public SimWeight() {}
+    
     /** The value for normalization of contained query clauses (e.g. sum of squared weights).
      * <p>
      * NOTE: a Similarity implementation might not use any query normalization at all,
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase.java b/lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase.java
index 798a6ef..d047446 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase.java
@@ -48,9 +48,18 @@ public abstract class SimilarityBase extends Similarity {
   /** For {@link #log2(double)}. Precomputed for efficiency reasons. */
   private static final double LOG_2 = Math.log(2);
   
-  /** @see #setDiscountOverlaps */
+  /** 
+   * True if overlap tokens (tokens with a position of increment of zero) are
+   * discounted from the document's length.
+   */
   protected boolean discountOverlaps = true;
   
+  /**
+   * Sole constructor. (For invocation by subclass 
+   * constructors, typically implicit.)
+   */
+  public SimilarityBase() {}
+  
   /** Determines whether overlap tokens (Tokens with
    *  0 position increment) are ignored when computing
    *  norm.  By default this is true, meaning overlap
@@ -64,7 +73,10 @@ public abstract class SimilarityBase extends Similarity {
     discountOverlaps = v;
   }
 
-  /** @see #setDiscountOverlaps */
+  /**
+   * Returns true if overlap tokens are discounted from the document's length. 
+   * @see #setDiscountOverlaps 
+   */
   public boolean getDiscountOverlaps() {
     return discountOverlaps;
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.java
index 637a4f0..eba562b 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.java
@@ -525,6 +525,12 @@ import org.apache.lucene.util.SmallFloat;
  */
 public abstract class TFIDFSimilarity extends Similarity {
   
+  /**
+   * Sole constructor. (For invocation by subclass 
+   * constructors, typically implicit.)
+   */
+  public TFIDFSimilarity() {}
+  
   /** Computes a score factor based on the fraction of all query terms that a
    * document contains.  This value is multiplied into scores.
    *

