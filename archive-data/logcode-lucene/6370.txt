GitDiffStart: b2a01a6504c5f08cd8d26da403531dc87d1eda24 | Sun Apr 27 16:05:30 2014 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index ba1592b..0b2c5af 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -138,6 +138,9 @@ Other Changes
 * SOLR-5974: Remove ShardDoc.score and use parent's ScoreDoc.score.
   (Tomás Fernández Löbbe via Ryan Ernst)
 
+* SOLR-6025: Replace mentions of CommonsHttpSolrServer with HttpSolrServer and
+  StreamingUpdateSolrServer with ConcurrentUpdateSolrServer. (Ahmet Arslan via shalin)
+
 Build
 ---------------------
 
diff --git a/solr/contrib/morphlines-core/src/test-files/solr/collection1/conf/schema.xml b/solr/contrib/morphlines-core/src/test-files/solr/collection1/conf/schema.xml
index a1c6787..f46885f 100644
--- a/solr/contrib/morphlines-core/src/test-files/solr/collection1/conf/schema.xml
+++ b/solr/contrib/morphlines-core/src/test-files/solr/collection1/conf/schema.xml
@@ -39,7 +39,7 @@
   - for best index size and searching performance, set "index" to false
     for all general text fields, use copyField to copy them to the
     catchall "text" field, and use that for searching.
-  - For maximum indexing performance, use the StreamingUpdateSolrServer
+  - For maximum indexing performance, use the ConcurrentUpdateSolrServer
     java client.
   - Remember to run the JVM in server mode, and use a higher logging level
     that avoids logging every request
diff --git a/solr/contrib/morphlines-core/src/test-files/solr/minimr/conf/schema.xml b/solr/contrib/morphlines-core/src/test-files/solr/minimr/conf/schema.xml
index c32d13f..74c061b 100644
--- a/solr/contrib/morphlines-core/src/test-files/solr/minimr/conf/schema.xml
+++ b/solr/contrib/morphlines-core/src/test-files/solr/minimr/conf/schema.xml
@@ -39,7 +39,7 @@
   - for best index size and searching performance, set "index" to false
     for all general text fields, use copyField to copy them to the
     catchall "text" field, and use that for searching.
-  - For maximum indexing performance, use the StreamingUpdateSolrServer
+  - For maximum indexing performance, use the ConcurrentUpdateSolrServer
     java client.
   - Remember to run the JVM in server mode, and use a higher logging level
     that avoids logging every request
diff --git a/solr/contrib/morphlines-core/src/test-files/solr/mrunit/conf/schema.xml b/solr/contrib/morphlines-core/src/test-files/solr/mrunit/conf/schema.xml
index 5c04e77..c5beada 100644
--- a/solr/contrib/morphlines-core/src/test-files/solr/mrunit/conf/schema.xml
+++ b/solr/contrib/morphlines-core/src/test-files/solr/mrunit/conf/schema.xml
@@ -39,7 +39,7 @@
   - for best index size and searching performance, set "index" to false
     for all general text fields, use copyField to copy them to the
     catchall "text" field, and use that for searching.
-  - For maximum indexing performance, use the StreamingUpdateSolrServer
+  - For maximum indexing performance, use the ConcurrentUpdateSolrServer
     java client.
   - Remember to run the JVM in server mode, and use a higher logging level
     that avoids logging every request
diff --git a/solr/contrib/morphlines-core/src/test-files/solr/solrcelltest/collection1/conf/schema.xml b/solr/contrib/morphlines-core/src/test-files/solr/solrcelltest/collection1/conf/schema.xml
index 709737a..46b3fb0 100644
--- a/solr/contrib/morphlines-core/src/test-files/solr/solrcelltest/collection1/conf/schema.xml
+++ b/solr/contrib/morphlines-core/src/test-files/solr/solrcelltest/collection1/conf/schema.xml
@@ -39,7 +39,7 @@
   - for best index size and searching performance, set "index" to false
     for all general text fields, use copyField to copy them to the
     catchall "text" field, and use that for searching.
-  - For maximum indexing performance, use the StreamingUpdateSolrServer
+  - For maximum indexing performance, use the ConcurrentUpdateSolrServer
     java client.
   - Remember to run the JVM in server mode, and use a higher logging level
     that avoids logging every request
diff --git a/solr/contrib/uima/src/test-files/uima/solr/collection1/conf/schema.xml b/solr/contrib/uima/src/test-files/uima/solr/collection1/conf/schema.xml
index eb1ba78..fe70b37 100644
--- a/solr/contrib/uima/src/test-files/uima/solr/collection1/conf/schema.xml
+++ b/solr/contrib/uima/src/test-files/uima/solr/collection1/conf/schema.xml
@@ -34,7 +34,7 @@
     size and searching performance, set "index" to false for all general
     text fields, use copyField to copy them to the catchall "text"
     field, and use that for searching. - For maximum indexing
-    performance, use the StreamingUpdateSolrServer java client. -
+    performance, use the ConcurrentUpdateSolrServer java client. -
     Remember to run the JVM in server mode, and use a higher logging
     level that avoids logging every request
   -->
diff --git a/solr/contrib/uima/src/test-files/uima/uima-tokenizers-schema.xml b/solr/contrib/uima/src/test-files/uima/uima-tokenizers-schema.xml
index b361630..f63705b 100644
--- a/solr/contrib/uima/src/test-files/uima/uima-tokenizers-schema.xml
+++ b/solr/contrib/uima/src/test-files/uima/uima-tokenizers-schema.xml
@@ -34,7 +34,7 @@
     size and searching performance, set "index" to false for all general
     text fields, use copyField to copy them to the catchall "text"
     field, and use that for searching. - For maximum indexing
-    performance, use the StreamingUpdateSolrServer java client. -
+    performance, use the ConcurrentUpdateSolrServer java client. -
     Remember to run the JVM in server mode, and use a higher logging
     level that avoids logging every request
   -->
diff --git a/solr/example/example-DIH/solr/db/conf/schema.xml b/solr/example/example-DIH/solr/db/conf/schema.xml
index 63a24f4..0e2badc 100755
--- a/solr/example/example-DIH/solr/db/conf/schema.xml
+++ b/solr/example/example-DIH/solr/db/conf/schema.xml
@@ -39,7 +39,7 @@
   - for best index size and searching performance, set "index" to false
     for all general text fields, use copyField to copy them to the
     catchall "text" field, and use that for searching.
-  - For maximum indexing performance, use the StreamingUpdateSolrServer
+  - For maximum indexing performance, use the ConcurrentUpdateSolrServer
     java client.
   - Remember to run the JVM in server mode, and use a higher logging level
     that avoids logging every request
diff --git a/solr/example/example-DIH/solr/mail/conf/schema.xml b/solr/example/example-DIH/solr/mail/conf/schema.xml
index bd93f55..9f83427 100755
--- a/solr/example/example-DIH/solr/mail/conf/schema.xml
+++ b/solr/example/example-DIH/solr/mail/conf/schema.xml
@@ -39,7 +39,7 @@
   - for best index size and searching performance, set "index" to false
     for all general text fields, use copyField to copy them to the
     catchall "text" field, and use that for searching.
-  - For maximum indexing performance, use the StreamingUpdateSolrServer
+  - For maximum indexing performance, use the ConcurrentUpdateSolrServer
     java client.
   - Remember to run the JVM in server mode, and use a higher logging level
     that avoids logging every request
diff --git a/solr/example/example-DIH/solr/rss/conf/schema.xml b/solr/example/example-DIH/solr/rss/conf/schema.xml
index ae15e71..c95c6b2 100755
--- a/solr/example/example-DIH/solr/rss/conf/schema.xml
+++ b/solr/example/example-DIH/solr/rss/conf/schema.xml
@@ -39,7 +39,7 @@
   - for best index size and searching performance, set "index" to false
     for all general text fields, use copyField to copy them to the
     catchall "text" field, and use that for searching.
-  - For maximum indexing performance, use the StreamingUpdateSolrServer
+  - For maximum indexing performance, use the ConcurrentUpdateSolrServer
     java client.
   - Remember to run the JVM in server mode, and use a higher logging level
     that avoids logging every request
diff --git a/solr/example/example-DIH/solr/solr/conf/schema.xml b/solr/example/example-DIH/solr/solr/conf/schema.xml
index c61b681..f5b0ed5 100755
--- a/solr/example/example-DIH/solr/solr/conf/schema.xml
+++ b/solr/example/example-DIH/solr/solr/conf/schema.xml
@@ -39,7 +39,7 @@
   - for best index size and searching performance, set "index" to false
     for all general text fields, use copyField to copy them to the
     catchall "text" field, and use that for searching.
-  - For maximum indexing performance, use the StreamingUpdateSolrServer
+  - For maximum indexing performance, use the ConcurrentUpdateSolrServer
     java client.
   - Remember to run the JVM in server mode, and use a higher logging level
     that avoids logging every request
diff --git a/solr/example/example-DIH/solr/tika/conf/schema.xml b/solr/example/example-DIH/solr/tika/conf/schema.xml
index 535c368..f58e222 100755
--- a/solr/example/example-DIH/solr/tika/conf/schema.xml
+++ b/solr/example/example-DIH/solr/tika/conf/schema.xml
@@ -39,7 +39,7 @@
   - for best index size and searching performance, set "index" to false
     for all general text fields, use copyField to copy them to the
     catchall "text" field, and use that for searching.
-  - For maximum indexing performance, use the StreamingUpdateSolrServer
+  - For maximum indexing performance, use the ConcurrentUpdateSolrServer
     java client.
   - Remember to run the JVM in server mode, and use a higher logging level
     that avoids logging every request
diff --git a/solr/example/example-schemaless/solr/collection1/conf/schema.xml b/solr/example/example-schemaless/solr/collection1/conf/schema.xml
index 86b599c..1f73d17 100755
--- a/solr/example/example-schemaless/solr/collection1/conf/schema.xml
+++ b/solr/example/example-schemaless/solr/collection1/conf/schema.xml
@@ -39,7 +39,7 @@
   - for best index size and searching performance, set "index" to false
     for all general text fields, use copyField to copy them to the
     catchall "text" field, and use that for searching.
-  - For maximum indexing performance, use the StreamingUpdateSolrServer
+  - For maximum indexing performance, use the ConcurrentUpdateSolrServer
     java client.
   - Remember to run the JVM in server mode, and use a higher logging level
     that avoids logging every request
diff --git a/solr/example/solr/collection1/conf/schema.xml b/solr/example/solr/collection1/conf/schema.xml
index 009eb40..895bbe4 100755
--- a/solr/example/solr/collection1/conf/schema.xml
+++ b/solr/example/solr/collection1/conf/schema.xml
@@ -39,7 +39,7 @@
   - for best index size and searching performance, set "index" to false
     for all general text fields, use copyField to copy them to the
     catchall "text" field, and use that for searching.
-  - For maximum indexing performance, use the StreamingUpdateSolrServer
+  - For maximum indexing performance, use the ConcurrentUpdateSolrServer
     java client.
   - Remember to run the JVM in server mode, and use a higher logging level
     that avoids logging every request
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java
index 8587957..fc7675d 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java
@@ -86,7 +86,7 @@ public class LBHttpSolrServer extends SolrServer {
   }
 
   // keys to the maps are currently of the form "http://localhost:8983/solr"
-  // which should be equivalent to CommonsHttpSolrServer.getBaseURL()
+  // which should be equivalent to HttpSolrServer.getBaseURL()
   private final Map<String, ServerWrapper> aliveServers = new LinkedHashMap<>();
   // access to aliveServers should be synchronized on itself
   
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate.java b/solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate.java
index 38c8322..c0c45d0 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate.java
@@ -50,28 +50,28 @@ public class TestBatchUpdate extends SolrJettyTestBase {
 
   @Test
   public void testWithXml() throws Exception {
-    HttpSolrServer commonsHttpSolrServer = (HttpSolrServer) getSolrServer();
-    commonsHttpSolrServer.setRequestWriter(new RequestWriter());
-    commonsHttpSolrServer.deleteByQuery( "*:*" ); // delete everything!    
-    doIt(commonsHttpSolrServer);
+    HttpSolrServer httpSolrServer = (HttpSolrServer) getSolrServer();
+    httpSolrServer.setRequestWriter(new RequestWriter());
+    httpSolrServer.deleteByQuery( "*:*" ); // delete everything!
+    doIt(httpSolrServer);
   }
 
   @Test
   public void testWithBinary()throws Exception{
-    HttpSolrServer commonsHttpSolrServer = (HttpSolrServer) getSolrServer();
-    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());
-    commonsHttpSolrServer.deleteByQuery( "*:*" ); // delete everything!
-    doIt(commonsHttpSolrServer);
+    HttpSolrServer httpSolrServer = (HttpSolrServer) getSolrServer();
+    httpSolrServer.setRequestWriter(new BinaryRequestWriter());
+    httpSolrServer.deleteByQuery( "*:*" ); // delete everything!
+    doIt(httpSolrServer);
   }
 
   @Test
   public void testWithBinaryBean()throws Exception{
-    HttpSolrServer commonsHttpSolrServer = (HttpSolrServer) getSolrServer();
-    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());
-    commonsHttpSolrServer.deleteByQuery( "*:*" ); // delete everything!
+    HttpSolrServer httpSolrServer = (HttpSolrServer) getSolrServer();
+    httpSolrServer.setRequestWriter(new BinaryRequestWriter());
+    httpSolrServer.deleteByQuery( "*:*" ); // delete everything!
     final int[] counter = new int[1];
     counter[0] = 0;
-    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {
+    httpSolrServer.addBeans(new Iterator<Bean>() {
 
       @Override
       public boolean hasNext() {
@@ -91,9 +91,9 @@ public class TestBatchUpdate extends SolrJettyTestBase {
         //do nothing
       }
     });
-    commonsHttpSolrServer.commit();
+    httpSolrServer.commit();
     SolrQuery query = new SolrQuery("*:*");
-    QueryResponse response = commonsHttpSolrServer.query(query);
+    QueryResponse response = httpSolrServer.query(query);
     assertEquals(0, response.getStatus());
     assertEquals(numdocs, response.getResults().getNumFound());
   }
@@ -105,10 +105,10 @@ public class TestBatchUpdate extends SolrJettyTestBase {
     String cat;
   }
        
-  private void doIt(HttpSolrServer commonsHttpSolrServer) throws SolrServerException, IOException {
+  private void doIt(HttpSolrServer httpSolrServer) throws SolrServerException, IOException {
     final int[] counter = new int[1];
     counter[0] = 0;
-    commonsHttpSolrServer.add(new Iterator<SolrInputDocument>() {
+    httpSolrServer.add(new Iterator<SolrInputDocument>() {
 
       @Override
       public boolean hasNext() {
@@ -129,9 +129,9 @@ public class TestBatchUpdate extends SolrJettyTestBase {
 
       }
     });
-    commonsHttpSolrServer.commit();
+    httpSolrServer.commit();
     SolrQuery query = new SolrQuery("*:*");
-    QueryResponse response = commonsHttpSolrServer.query(query);
+    QueryResponse response = httpSolrServer.query(query);
     assertEquals(0, response.getStatus());
     assertEquals(numdocs, response.getResults().getNumFound());
   }
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest.java b/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest.java
index 43e77da..a304953 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest.java
@@ -46,7 +46,7 @@ public class SolrExampleJettyTest extends SolrExampleTests {
       // setup the server...
       String url = "http" + (isSSLMode() ? "s" : "") +  "://127.0.0.1/?core=xxx";
       HttpSolrServer s = new HttpSolrServer( url );
-      Assert.fail( "CommonsHttpSolrServer should not allow a path with a parameter: "+s.getBaseURL() );
+      Assert.fail("HttpSolrServer should not allow a path with a parameter: "+s.getBaseURL() );
     }
     catch( Exception ex ) {
       // expected
diff --git a/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java b/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
index 2d8694f..384c5d7 100644
--- a/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
+++ b/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
@@ -672,7 +672,7 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
     // random.nextInt(sliceCount-1));
     // }
     //
-    // CommonsHttpSolrServer client = (CommonsHttpSolrServer)
+    // HttpSolrServer client = (HttpSolrServer)
     // clients.get(which);
     
     UpdateRequest ureq = new UpdateRequest();
@@ -1767,4 +1767,4 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
     createCollection(collectionInfos, collName, props, client);
   }
 
-}
\ No newline at end of file
+}

