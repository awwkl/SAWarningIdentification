GitDiffStart: 06f7a379436a042f5533adda1fc48e919ebc293b | Sat May 8 16:17:27 2010 +0000
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader.java b/lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader.java
index bb90099..7a7af74 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader.java
@@ -25,7 +25,7 @@ import org.apache.lucene.index.Term;
 import org.apache.lucene.index.IndexFileNames;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.CloseableThreadLocal;
-import org.apache.lucene.util.cache.DoubleBarrelLRUCache;
+import org.apache.lucene.util.DoubleBarrelLRUCache;
 
 /** This stores a monotonically increasing set of <Term, TermInfo> pairs in a
  * Directory.  Pairs are accessed either by Term or by ordinal position the
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.java b/lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.java
index d4371fa..15725dd 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.java
@@ -37,7 +37,7 @@ import org.apache.lucene.index.codecs.FieldsProducer;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.cache.DoubleBarrelLRUCache;
+import org.apache.lucene.util.DoubleBarrelLRUCache;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CodecUtil;
 
diff --git a/lucene/src/java/org/apache/lucene/util/DoubleBarrelLRUCache.java b/lucene/src/java/org/apache/lucene/util/DoubleBarrelLRUCache.java
index b9081c5..f0986f3 100644
--- a/lucene/src/java/org/apache/lucene/util/DoubleBarrelLRUCache.java
+++ b/lucene/src/java/org/apache/lucene/util/DoubleBarrelLRUCache.java
@@ -1,4 +1,4 @@
-package org.apache.lucene.util.cache;
+package org.apache.lucene.util;
 
 /**
  * Licensed to the Apache Software Foundation (ASF) under one or more
diff --git a/lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache.java b/lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache.java
new file mode 100644
index 0000000..233d176
--- /dev/null
+++ b/lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache.java
@@ -0,0 +1,140 @@
+package org.apache.lucene.util;
+
+/**
+* Licensed to the Apache Software Foundation (ASF) under one or more
+* contributor license agreements.  See the NOTICE file distributed with
+* this work for additional information regarding copyright ownership.
+* The ASF licenses this file to You under the Apache License, Version 2.0
+* (the "License"); you may not use this file except in compliance with
+* the License.  You may obtain a copy of the License at
+*
+*     http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+
+public class TestDoubleBarrelLRUCache extends LuceneTestCase {
+
+  private void testCache(DoubleBarrelLRUCache<Integer,Object> cache, int n) throws Exception {
+    Object dummy = new Object();
+    
+    for (int i = 0; i < n; i++) {
+      cache.put(Integer.valueOf(i), dummy);
+    }
+    
+    // access every 2nd item in cache
+    for (int i = 0; i < n; i+=2) {
+      assertNotNull(cache.get(Integer.valueOf(i)));
+    }
+    
+    // add n/2 elements to cache, the ones that weren't
+    // touched in the previous loop should now be thrown away
+    for (int i = n; i < n + (n / 2); i++) {
+      cache.put(Integer.valueOf(i), dummy);
+    }
+    
+    // access every 4th item in cache
+    for (int i = 0; i < n; i+=4) {
+      assertNotNull(cache.get(Integer.valueOf(i)));
+    }
+
+    // add 3/4n elements to cache, the ones that weren't
+    // touched in the previous loops should now be thrown away
+    for (int i = n; i < n + (n * 3 / 4); i++) {
+      cache.put(Integer.valueOf(i), dummy);
+    }
+    
+    // access every 4th item in cache
+    for (int i = 0; i < n; i+=4) {
+      assertNotNull(cache.get(Integer.valueOf(i)));
+    }
+  }
+    
+  public void testLRUCache() throws Exception {
+    final int n = 100;
+    testCache(new DoubleBarrelLRUCache<Integer,Object>(n), n);
+  }
+
+  private class CacheThread extends Thread {
+    private final Object[] objs;
+    private final DoubleBarrelLRUCache<Object,Object> c;
+    private final long endTime;
+    volatile boolean failed;
+
+    public CacheThread(DoubleBarrelLRUCache<Object,Object> c,
+                     Object[] objs, long endTime) {
+      this.c = c;
+      this.objs = objs;
+      this.endTime = endTime;
+    }
+
+    @Override
+    public void run() {
+      try {
+        long count = 0;
+        long miss = 0;
+        long hit = 0;
+        final int limit = objs.length;
+
+        while(true) {
+          final Object obj = objs[(int) ((count/2) % limit)];
+          Object v = c.get(obj);
+          if (v == null) {
+            c.put(obj, obj);
+            miss++;
+          } else {
+            assert obj == v;
+            hit++;
+          }
+          if ((++count % 10000) == 0) {
+            if (System.currentTimeMillis() >= endTime)  {
+              break;
+            }
+          }
+        }
+
+        addResults(miss, hit);
+      } catch (Throwable t) {
+        failed = true;
+        throw new RuntimeException(t);
+      }
+    }
+  }
+
+  long totMiss, totHit;
+  void addResults(long miss, long hit) {
+    totMiss += miss;
+    totHit += hit;
+  }
+
+  public void testThreadCorrectness() throws Exception {
+    final int NUM_THREADS = 4;
+    final int CACHE_SIZE = 512;
+    final int OBJ_COUNT = 3*CACHE_SIZE;
+
+    DoubleBarrelLRUCache<Object,Object> c = new DoubleBarrelLRUCache<Object,Object>(1024);
+
+    Object[] objs = new Object[OBJ_COUNT];
+    for(int i=0;i<OBJ_COUNT;i++) {
+      objs[i] = new Object();
+    }
+    
+    final CacheThread[] threads = new CacheThread[NUM_THREADS];
+    final long endTime = System.currentTimeMillis()+1000L;
+    for(int i=0;i<NUM_THREADS;i++) {
+      threads[i] = new CacheThread(c, objs, endTime);
+      threads[i].start();
+    }
+    for(int i=0;i<NUM_THREADS;i++) {
+      threads[i].join();
+      assert !threads[i].failed;
+    }
+    //System.out.println("hits=" + totHit + " misses=" + totMiss);
+  }
+  
+}
diff --git a/lucene/src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache.java b/lucene/src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache.java
deleted file mode 100644
index 505c3fd..0000000
--- a/lucene/src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache.java
+++ /dev/null
@@ -1,141 +0,0 @@
-package org.apache.lucene.util.cache;
-
-/**
-* Licensed to the Apache Software Foundation (ASF) under one or more
-* contributor license agreements.  See the NOTICE file distributed with
-* this work for additional information regarding copyright ownership.
-* The ASF licenses this file to You under the Apache License, Version 2.0
-* (the "License"); you may not use this file except in compliance with
-* the License.  You may obtain a copy of the License at
-*
-*     http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-import org.apache.lucene.util.LuceneTestCase;
-
-public class TestDoubleBarrelLRUCache extends LuceneTestCase {
-
-  private void testCache(DoubleBarrelLRUCache<Integer,Object> cache, int n) throws Exception {
-    Object dummy = new Object();
-    
-    for (int i = 0; i < n; i++) {
-      cache.put(Integer.valueOf(i), dummy);
-    }
-    
-    // access every 2nd item in cache
-    for (int i = 0; i < n; i+=2) {
-      assertNotNull(cache.get(Integer.valueOf(i)));
-    }
-    
-    // add n/2 elements to cache, the ones that weren't
-    // touched in the previous loop should now be thrown away
-    for (int i = n; i < n + (n / 2); i++) {
-      cache.put(Integer.valueOf(i), dummy);
-    }
-    
-    // access every 4th item in cache
-    for (int i = 0; i < n; i+=4) {
-      assertNotNull(cache.get(Integer.valueOf(i)));
-    }
-
-    // add 3/4n elements to cache, the ones that weren't
-    // touched in the previous loops should now be thrown away
-    for (int i = n; i < n + (n * 3 / 4); i++) {
-      cache.put(Integer.valueOf(i), dummy);
-    }
-    
-    // access every 4th item in cache
-    for (int i = 0; i < n; i+=4) {
-      assertNotNull(cache.get(Integer.valueOf(i)));
-    }
-  }
-    
-  public void testLRUCache() throws Exception {
-    final int n = 100;
-    testCache(new DoubleBarrelLRUCache<Integer,Object>(n), n);
-  }
-
-  private class CacheThread extends Thread {
-    private final Object[] objs;
-    private final DoubleBarrelLRUCache<Object,Object> c;
-    private final long endTime;
-    volatile boolean failed;
-
-    public CacheThread(DoubleBarrelLRUCache<Object,Object> c,
-                     Object[] objs, long endTime) {
-      this.c = c;
-      this.objs = objs;
-      this.endTime = endTime;
-    }
-
-    @Override
-    public void run() {
-      try {
-        long count = 0;
-        long miss = 0;
-        long hit = 0;
-        final int limit = objs.length;
-
-        while(true) {
-          final Object obj = objs[(int) ((count/2) % limit)];
-          Object v = c.get(obj);
-          if (v == null) {
-            c.put(obj, obj);
-            miss++;
-          } else {
-            assert obj == v;
-            hit++;
-          }
-          if ((++count % 10000) == 0) {
-            if (System.currentTimeMillis() >= endTime)  {
-              break;
-            }
-          }
-        }
-
-        addResults(miss, hit);
-      } catch (Throwable t) {
-        failed = true;
-        throw new RuntimeException(t);
-      }
-    }
-  }
-
-  long totMiss, totHit;
-  void addResults(long miss, long hit) {
-    totMiss += miss;
-    totHit += hit;
-  }
-
-  public void testThreadCorrectness() throws Exception {
-    final int NUM_THREADS = 4;
-    final int CACHE_SIZE = 512;
-    final int OBJ_COUNT = 3*CACHE_SIZE;
-
-    DoubleBarrelLRUCache<Object,Object> c = new DoubleBarrelLRUCache<Object,Object>(1024);
-
-    Object[] objs = new Object[OBJ_COUNT];
-    for(int i=0;i<OBJ_COUNT;i++) {
-      objs[i] = new Object();
-    }
-    
-    final CacheThread[] threads = new CacheThread[NUM_THREADS];
-    final long endTime = System.currentTimeMillis()+1000L;
-    for(int i=0;i<NUM_THREADS;i++) {
-      threads[i] = new CacheThread(c, objs, endTime);
-      threads[i].start();
-    }
-    for(int i=0;i<NUM_THREADS;i++) {
-      threads[i].join();
-      assert !threads[i].failed;
-    }
-    //System.out.println("hits=" + totHit + " misses=" + totMiss);
-  }
-  
-}

