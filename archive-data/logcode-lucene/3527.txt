GitDiffStart: 6503e980c3887a26137acfb55feb4203a95b4ec8 | Thu May 14 14:10:34 2015 +0000
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/ComparatorLambda.java b/solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/ComparatorLambda.java
index 30ed4a0..90346bf 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/ComparatorLambda.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/ComparatorLambda.java
@@ -1,5 +1,7 @@
 package org.apache.solr.client.solrj.io.comp;
 
+import java.io.Serializable;
+
 import org.apache.solr.client.solrj.io.Tuple;
 
 /*
@@ -22,6 +24,6 @@ import org.apache.solr.client.solrj.io.Tuple;
 /**
  * Interface for use with a comparator lambda
  */
-public interface ComparatorLambda {
+public interface ComparatorLambda extends Serializable {
   public int compare(Tuple leftTuple, Tuple rightTuple);
 }
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator.java b/solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator.java
index 449a355..8b63ec2 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/FieldComparator.java
@@ -70,22 +70,21 @@ public class FieldComparator extends StreamComparator implements Comparator<Tupl
    */
   private void assignComparator(){
     if(ComparatorOrder.DESCENDING == order){
-      // What black magic is this type intersection??
-      // Because this class is serializable we need to make sure the lambda is also serializable.
-      // This can be done by providing this type intersection on the definition of the lambda.
-      // Why not do it in the lambda interface? Functional Interfaces don't allow extends clauses
-      comparator = (ComparatorLambda & Serializable)(leftTuple, rightTuple) -> {
-        Comparable leftComp = (Comparable)leftTuple.get(leftField);
-        Comparable rightComp = (Comparable)rightTuple.get(rightField);
-        return rightComp.compareTo(leftComp);
+      comparator = new ComparatorLambda() {
+        public int compare(Tuple leftTuple, Tuple rightTuple) {
+          Comparable leftComp = (Comparable)leftTuple.get(leftField);
+          Comparable rightComp = (Comparable)rightTuple.get(rightField);
+          return rightComp.compareTo(leftComp);
+        }
       };
     }
     else{
-      // See above for black magic reasoning.
-      comparator = (ComparatorLambda & Serializable)(leftTuple, rightTuple) -> {
-        Comparable leftComp = (Comparable)leftTuple.get(leftField);
-        Comparable rightComp = (Comparable)rightTuple.get(rightField);
-        return leftComp.compareTo(rightComp);
+      comparator = new ComparatorLambda() {
+        public int compare(Tuple leftTuple, Tuple rightTuple) {
+          Comparable leftComp = (Comparable)leftTuple.get(leftField);
+          Comparable rightComp = (Comparable)rightTuple.get(rightField);
+          return leftComp.compareTo(rightComp);
+        }
       };
     }
   }
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java b/solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java
index d389896..ba16740 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java
@@ -54,7 +54,10 @@ public class StreamFactory implements Serializable {
     return this;
   }
   public String getCollectionZkHost(String collectionName){
-    return this.collectionZkHosts.getOrDefault(collectionName, null);
+    if(this.collectionZkHosts.containsKey(collectionName)){
+      return this.collectionZkHosts.get(collectionName);
+    }
+    return null;
   }
   
   public Map<String,Class> getStreamFunctions(){

