GitDiffStart: 1d43a36bf935422f80e380b2c46112944f028344 | Thu Jan 1 06:50:50 2009 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index 371a7d2..de1f4eb 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -210,6 +210,9 @@ Bug Fixes
 24. SOLR-902: FastInputStream#read(byte b[], int off, int len) gives incorrect results when amount left to read is less
     than buffer size (Noble Paul via shalin)
 
+25. SOLR-947: ConstantScoreRangeQuery should be checked before RangeQuery in QueryParsing.toString().
+    This causes NPE when requesting open ended range query with debugQuery=on (koji)
+
 
 Other Changes
 ----------------------
diff --git a/src/java/org/apache/solr/search/QueryParsing.java b/src/java/org/apache/solr/search/QueryParsing.java
index afd725a..8bc074a 100644
--- a/src/java/org/apache/solr/search/QueryParsing.java
+++ b/src/java/org/apache/solr/search/QueryParsing.java
@@ -317,17 +317,17 @@ public class QueryParsing {
       Term t = q.getTerm();
       FieldType ft = writeFieldName(t.field(), schema, out, flags);
       writeFieldVal(t.text(), ft, out, flags);
-    } else if (query instanceof RangeQuery) {
-      RangeQuery q = (RangeQuery)query;
+    } else if (query instanceof ConstantScoreRangeQuery) {
+      ConstantScoreRangeQuery q = (ConstantScoreRangeQuery)query;
       String fname = q.getField();
       FieldType ft = writeFieldName(fname, schema, out, flags);
-      out.append( q.isInclusive() ? '[' : '{' );
-      Term lt = q.getLowerTerm();
-      Term ut = q.getUpperTerm();
+      out.append( q.includesLower() ? '[' : '{' );
+      String lt = q.getLowerVal();
+      String ut = q.getUpperVal();
       if (lt==null) {
         out.append('*');
       } else {
-        writeFieldVal(lt.text(), ft, out, flags);
+        writeFieldVal(lt, ft, out, flags);
       }
 
       out.append(" TO ");
@@ -335,22 +335,21 @@ public class QueryParsing {
       if (ut==null) {
         out.append('*');
       } else {
-        writeFieldVal(ut.text(), ft, out, flags);
+        writeFieldVal(ut, ft, out, flags);
       }
 
-      out.append( q.isInclusive() ? ']' : '}' );
-
-    } else if (query instanceof ConstantScoreRangeQuery) {
-      ConstantScoreRangeQuery q = (ConstantScoreRangeQuery)query;
+      out.append( q.includesUpper() ? ']' : '}' );
+    } else if (query instanceof RangeQuery) {
+      RangeQuery q = (RangeQuery)query;
       String fname = q.getField();
       FieldType ft = writeFieldName(fname, schema, out, flags);
-      out.append( q.includesLower() ? '[' : '{' );
-      String lt = q.getLowerVal();
-      String ut = q.getUpperVal();
+      out.append( q.isInclusive() ? '[' : '{' );
+      Term lt = q.getLowerTerm();
+      Term ut = q.getUpperTerm();
       if (lt==null) {
         out.append('*');
       } else {
-        writeFieldVal(lt, ft, out, flags);
+        writeFieldVal(lt.text(), ft, out, flags);
       }
 
       out.append(" TO ");
@@ -358,10 +357,11 @@ public class QueryParsing {
       if (ut==null) {
         out.append('*');
       } else {
-        writeFieldVal(ut, ft, out, flags);
+        writeFieldVal(ut.text(), ft, out, flags);
       }
 
-      out.append( q.includesUpper() ? ']' : '}' );
+      out.append( q.isInclusive() ? ']' : '}' );
+
     } else if (query instanceof BooleanQuery) {
       BooleanQuery q = (BooleanQuery)query;
       boolean needParens=false;

