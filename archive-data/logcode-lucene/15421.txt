GitDiffStart: 9bf4c3fd8fee035077bc15f2bcdaae41735f5e90 | Sat Jun 25 00:03:35 2011 +0000
diff --git a/dev-tools/eclipse/dot.classpath b/dev-tools/eclipse/dot.classpath
index 1d76929..b10fb8b 100644
--- a/dev-tools/eclipse/dot.classpath
+++ b/dev-tools/eclipse/dot.classpath
@@ -40,6 +40,8 @@
 	<classpathentry kind="src" path="modules/analysis/stempel/src/test"/>
 	<classpathentry kind="src" path="modules/benchmark/src/java"/>
 	<classpathentry kind="src" path="modules/benchmark/src/test"/>
+	<classpathentry kind="src" path="modules/common/src/java"/>
+	<classpathentry kind="src" path="modules/common/src/test"/>
 	<classpathentry kind="src" path="modules/grouping/src/java"/>
 	<classpathentry kind="src" path="modules/grouping/src/test"/>
 	<classpathentry kind="src" path="modules/suggest/src/java"/>
diff --git a/dev-tools/idea/.idea/modules.xml b/dev-tools/idea/.idea/modules.xml
index ea39d1a..cbb3914 100644
--- a/dev-tools/idea/.idea/modules.xml
+++ b/dev-tools/idea/.idea/modules.xml
@@ -14,12 +14,13 @@
       <module filepath="$PROJECT_DIR$/lucene/contrib/spatial/spatial.iml" />
       <module filepath="$PROJECT_DIR$/lucene/contrib/wordnet/wordnet.iml" />
       <module filepath="$PROJECT_DIR$/lucene/contrib/xml-query-parser/xml-query-parser.iml" />
-      <module filepath="$PROJECT_DIR$/modules/analysis/common/common.iml" />
+      <module filepath="$PROJECT_DIR$/modules/analysis/common/analysis-common.iml" />
       <module filepath="$PROJECT_DIR$/modules/analysis/icu/icu.iml" />
       <module filepath="$PROJECT_DIR$/modules/analysis/phonetic/phonetic.iml" />
       <module filepath="$PROJECT_DIR$/modules/analysis/smartcn/smartcn.iml" />
       <module filepath="$PROJECT_DIR$/modules/analysis/stempel/stempel.iml" />
       <module filepath="$PROJECT_DIR$/modules/benchmark/benchmark.iml" />
+      <module filepath="$PROJECT_DIR$/modules/common/common.iml" />
       <module filepath="$PROJECT_DIR$/modules/grouping/grouping.iml" />
       <module filepath="$PROJECT_DIR$/modules/suggest/suggest.iml" />
       <module filepath="$PROJECT_DIR$/solr/solr.iml" />
diff --git a/dev-tools/idea/.idea/workspace.xml b/dev-tools/idea/.idea/workspace.xml
index 0bca3b2..593a8fd 100644
--- a/dev-tools/idea/.idea/workspace.xml
+++ b/dev-tools/idea/.idea/workspace.xml
@@ -22,9 +22,16 @@
       <option name="VM_PARAMETERS" value="-ea -Dtests.luceneMatchVersion=4.0 -DtempDir=temp -Djetty.testMode=1 -Djetty.insecurerandom=1 -Dsolr.directoryFactory=org.apache.solr.core.MockDirectoryFactory" />
       <option name="TEST_SEARCH_SCOPE"><value defaultName="singleModule" /></option>
     </configuration>
-    <configuration default="false" name="common analysis module" type="JUnit" factoryName="JUnit">
+    <configuration default="false" name="common module" type="JUnit" factoryName="JUnit">
       <module name="common" />
       <option name="TEST_OBJECT" value="package" />
+      <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$/modules/common/build" />
+      <option name="VM_PARAMETERS" value="-ea  -DtempDir=temp" />
+      <option name="TEST_SEARCH_SCOPE"><value defaultName="singleModule" /></option>
+    </configuration>
+    <configuration default="false" name="common analysis module" type="JUnit" factoryName="JUnit">
+      <module name="analysis-common" />
+      <option name="TEST_OBJECT" value="package" />
       <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$/modules/analysis/build/common" />
       <option name="VM_PARAMETERS" value="-ea  -DtempDir=temp" />
       <option name="TEST_SEARCH_SCOPE"><value defaultName="singleModule" /></option>
@@ -113,6 +120,13 @@
       <option name="VM_PARAMETERS" value="-ea -DtempDir=temp" />
       <option name="TEST_SEARCH_SCOPE"><value defaultName="singleModule" /></option>
     </configuration>
+    <configuration default="false" name="queries module" type="JUnit" factoryName="JUnit">
+      <module name="queries-module" />
+      <option name="TEST_OBJECT" value="package" />
+      <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$/modules/queries/build" />
+      <option name="VM_PARAMETERS" value="-ea -DtempDir=temp" />
+      <option name="TEST_SEARCH_SCOPE"><value defaultName="singleModule" /></option>
+    </configuration>
     <configuration default="false" name="queryparser contrib" type="JUnit" factoryName="JUnit">
       <module name="queryparser" />
       <option name="TEST_OBJECT" value="package" />
@@ -176,32 +190,33 @@
       <option name="VM_PARAMETERS" value="-ea -DtempDir=temp" />
       <option name="TEST_SEARCH_SCOPE"><value defaultName="singleModule" /></option>
     </configuration>
-    <list size="25">
+    <list size="26">
       <item index="0" class="java.lang.String" itemvalue="JUnit.analysis-extras contrib" />
       <item index="1" class="java.lang.String" itemvalue="JUnit.benchmark module" />
       <item index="2" class="java.lang.String" itemvalue="JUnit.clustering contrib" />
-      <item index="3" class="java.lang.String" itemvalue="JUnit.common analysis module" />
-      <item index="4" class="java.lang.String" itemvalue="JUnit.dataimporthandler contrib" />
-      <item index="5" class="java.lang.String" itemvalue="JUnit.extraction contrib" />
-      <item index="6" class="java.lang.String" itemvalue="JUnit.extras from dataimporthandler contrib" />
-      <item index="7" class="java.lang.String" itemvalue="JUnit.grouping module" />
-      <item index="8" class="java.lang.String" itemvalue="JUnit.highlighter contrib" />
-      <item index="9" class="java.lang.String" itemvalue="JUnit.icu analysis module" />
-      <item index="10" class="java.lang.String" itemvalue="JUnit.instantiated contrib" />
-      <item index="11" class="java.lang.String" itemvalue="JUnit.lucene" />
-      <item index="12" class="java.lang.String" itemvalue="JUnit.memory contrib" />
-      <item index="13" class="java.lang.String" itemvalue="JUnit.misc contrib" />
-      <item index="14" class="java.lang.String" itemvalue="JUnit.phonetic analysis module" />
-      <item index="15" class="java.lang.String" itemvalue="JUnit.queries contrib" />
-      <item index="16" class="java.lang.String" itemvalue="JUnit.queryparser contrib" />
-      <item index="17" class="java.lang.String" itemvalue="JUnit.smartcn analysis module" />
-      <item index="18" class="java.lang.String" itemvalue="JUnit.solr" />
-      <item index="19" class="java.lang.String" itemvalue="JUnit.spatial contrib" />
-      <item index="20" class="java.lang.String" itemvalue="JUnit.stempel analysis module" />
-      <item index="21" class="java.lang.String" itemvalue="JUnit.suggest module" />
-      <item index="22" class="java.lang.String" itemvalue="JUnit.uima contrib" />
-      <item index="23" class="java.lang.String" itemvalue="JUnit.wordnet contrib" />
-      <item index="24" class="java.lang.String" itemvalue="JUnit.xml-query-parser contrib" />
+      <item index="3" class="java.lang.String" itemvalue="JUnit.common module" />
+      <item index="4" class="java.lang.String" itemvalue="JUnit.common analysis module" />
+      <item index="5" class="java.lang.String" itemvalue="JUnit.dataimporthandler contrib" />
+      <item index="6" class="java.lang.String" itemvalue="JUnit.extraction contrib" />
+      <item index="7" class="java.lang.String" itemvalue="JUnit.extras from dataimporthandler contrib" />
+      <item index="8" class="java.lang.String" itemvalue="JUnit.grouping module" />
+      <item index="9" class="java.lang.String" itemvalue="JUnit.highlighter contrib" />
+      <item index="10" class="java.lang.String" itemvalue="JUnit.icu analysis module" />
+      <item index="11" class="java.lang.String" itemvalue="JUnit.instantiated contrib" />
+      <item index="12" class="java.lang.String" itemvalue="JUnit.lucene" />
+      <item index="13" class="java.lang.String" itemvalue="JUnit.memory contrib" />
+      <item index="14" class="java.lang.String" itemvalue="JUnit.misc contrib" />
+      <item index="15" class="java.lang.String" itemvalue="JUnit.phonetic analysis module" />
+      <item index="16" class="java.lang.String" itemvalue="JUnit.queries contrib" />
+      <item index="17" class="java.lang.String" itemvalue="JUnit.queryparser contrib" />
+      <item index="18" class="java.lang.String" itemvalue="JUnit.smartcn analysis module" />
+      <item index="19" class="java.lang.String" itemvalue="JUnit.solr" />
+      <item index="20" class="java.lang.String" itemvalue="JUnit.spatial contrib" />
+      <item index="21" class="java.lang.String" itemvalue="JUnit.stempel analysis module" />
+      <item index="22" class="java.lang.String" itemvalue="JUnit.suggest module" />
+      <item index="23" class="java.lang.String" itemvalue="JUnit.uima contrib" />
+      <item index="24" class="java.lang.String" itemvalue="JUnit.wordnet contrib" />
+      <item index="25" class="java.lang.String" itemvalue="JUnit.xml-query-parser contrib" />
     </list>
   </component>
 </project>
diff --git a/dev-tools/idea/modules/analysis/common/analysis-common.iml b/dev-tools/idea/modules/analysis/common/analysis-common.iml
new file mode 100644
index 0000000..4882b81
--- /dev/null
+++ b/dev-tools/idea/modules/analysis/common/analysis-common.iml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="false">
+    <output url="file://$MODULE_DIR$/../build/common/classes/java" />
+    <output-test url="file://$MODULE_DIR$/../build/common/classes/test" />
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/resources" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/java/tools" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test" isTestSource="true" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" scope="TEST" name="JUnit" level="project" />
+    <orderEntry type="module" module-name="lucene" />
+  </component>
+</module>
diff --git a/dev-tools/idea/modules/analysis/common/common.iml b/dev-tools/idea/modules/analysis/common/common.iml
deleted file mode 100644
index 4882b81..0000000
--- a/dev-tools/idea/modules/analysis/common/common.iml
+++ /dev/null
@@ -1,18 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/../build/common/classes/java" />
-    <output-test url="file://$MODULE_DIR$/../build/common/classes/test" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/resources" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/java/tools" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test" isTestSource="true" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" scope="TEST" name="JUnit" level="project" />
-    <orderEntry type="module" module-name="lucene" />
-  </component>
-</module>
diff --git a/dev-tools/idea/modules/common/common.iml b/dev-tools/idea/modules/common/common.iml
new file mode 100644
index 0000000..50cb281
--- /dev/null
+++ b/dev-tools/idea/modules/common/common.iml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="false">
+    <output url="file://$MODULE_DIR$/build/classes/java" />
+    <output-test url="file://$MODULE_DIR$/build/classes/test" />
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/work" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" scope="TEST" name="JUnit" level="project" />
+    <orderEntry type="module" module-name="lucene" />
+  </component>
+</module>
diff --git a/dev-tools/idea/solr/solr.iml b/dev-tools/idea/solr/solr.iml
index f0e93e3..7fb2fb4 100644
--- a/dev-tools/idea/solr/solr.iml
+++ b/dev-tools/idea/solr/solr.iml
@@ -31,6 +31,7 @@
     <orderEntry type="module" module-name="phonetic" />
     <orderEntry type="module" module-name="suggest" />
     <orderEntry type="module" module-name="common" />
+    <orderEntry type="module" module-name="analysis-common" />
     <orderEntry type="module" module-name="lucene" />
   </component>
 </module>
diff --git a/dev-tools/maven/modules/common/pom.xml.template b/dev-tools/maven/modules/common/pom.xml.template
new file mode 100644
index 0000000..4609108
--- /dev/null
+++ b/dev-tools/maven/modules/common/pom.xml.template
@@ -0,0 +1,66 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <!--
+    Licensed to the Apache Software Foundation (ASF) under one
+    or more contributor license agreements.  See the NOTICE file
+    distributed with this work for additional information
+    regarding copyright ownership.  The ASF licenses this file
+    to you under the Apache License, Version 2.0 (the
+    "License"); you may not use this file except in compliance
+    with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+  -->
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <groupId>org.apache.lucene</groupId>
+    <artifactId>lucene-parent</artifactId>
+    <version>@version@</version>
+    <relativePath>../../lucene/pom.xml</relativePath>
+  </parent>
+  <groupId>org.apache.lucene</groupId>
+  <artifactId>lucene-common</artifactId>
+  <packaging>jar</packaging>
+  <name>Lucene Common</name>
+  <description>Lucene Common Module</description>
+  <properties>
+    <module-directory>modules/common</module-directory>
+    <build-directory>build</build-directory>
+  </properties>
+  <dependencies>
+    <dependency>
+      <groupId>${project.groupId}</groupId>
+      <artifactId>lucene-test-framework</artifactId>
+      <version>${project.version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+  <build>
+    <directory>${build-directory}</directory>
+    <outputDirectory>${build-directory}/classes/java</outputDirectory>
+    <testOutputDirectory>${build-directory}/classes/test</testOutputDirectory>
+    <sourceDirectory>src/java</sourceDirectory>
+    <testSourceDirectory>src/test</testSourceDirectory>
+    <testResources>
+      <testResource>
+        <directory>${project.build.testSourceDirectory}</directory>
+        <excludes>
+          <exclude>**/*.java</exclude>
+        </excludes>
+      </testResource>
+    </testResources>
+  </build>
+</project>
diff --git a/dev-tools/maven/modules/pom.xml.template b/dev-tools/maven/modules/pom.xml.template
index 880ce44..f650df6 100644
--- a/dev-tools/maven/modules/pom.xml.template
+++ b/dev-tools/maven/modules/pom.xml.template
@@ -33,6 +33,7 @@
   <modules>
     <module>analysis</module>
     <module>benchmark</module>
+    <module>common</module>
     <module>grouping</module>
     <module>suggest</module>
   </modules>
diff --git a/dev-tools/maven/solr/src/pom.xml.template b/dev-tools/maven/solr/src/pom.xml.template
index 785dcf5..4fd6c3c 100644
--- a/dev-tools/maven/solr/src/pom.xml.template
+++ b/dev-tools/maven/solr/src/pom.xml.template
@@ -97,6 +97,11 @@
       <version>${project.version}</version>
     </dependency>
     <dependency>
+      <groupId>org.apache.lucene</groupId>
+      <artifactId>lucene-common</artifactId>
+      <version>${project.version}</version>
+    <dependency>
+    <dependency>
       <groupId>org.apache.solr</groupId>
       <artifactId>solr-commons-csv</artifactId>
     </dependency>
diff --git a/modules/build.xml b/modules/build.xml
index c57d55c..b7a72a1 100644
--- a/modules/build.xml
+++ b/modules/build.xml
@@ -23,6 +23,7 @@
       <subant target="test" inheritall="false" failonerror="true">
         <fileset dir="analysis" includes="build.xml" />
         <fileset dir="benchmark" includes="build.xml" />
+        <fileset dir="common" includes="build.xml" />
         <fileset dir="grouping" includes="build.xml" />
         <fileset dir="suggest" includes="build.xml" />
       </subant>
@@ -34,6 +35,7 @@
       <subant target="compile" inheritall="false" failonerror="true">
         <fileset dir="analysis" includes="build.xml" />
         <fileset dir="benchmark" includes="build.xml" />
+        <fileset dir="common" includes="build.xml" />
         <fileset dir="grouping" includes="build.xml" />
         <fileset dir="suggest" includes="build.xml" />
       </subant>
@@ -45,6 +47,7 @@
       <subant target="compile-test" inheritall="false" failonerror="true">
         <fileset dir="analysis" includes="build.xml" />
         <fileset dir="benchmark" includes="build.xml" />
+        <fileset dir="common" includes="build.xml" />
         <fileset dir="grouping" includes="build.xml" />
         <fileset dir="suggest" includes="build.xml" />
       </subant>
@@ -56,6 +59,7 @@
       <subant target="javadocs" inheritall="false" failonerror="true">
         <fileset dir="analysis" includes="build.xml" />
         <fileset dir="benchmark" includes="build.xml" />
+        <fileset dir="common" includes="build.xml" />
         <fileset dir="grouping" includes="build.xml" />
         <fileset dir="suggest" includes="build.xml" />
       </subant>
@@ -68,6 +72,7 @@
       <subant target="dist-maven" inheritall="false" failonerror="true">
         <fileset dir="analysis" includes="build.xml" />
         <fileset dir="benchmark" includes="build.xml" />
+        <fileset dir="common" includes="build.xml" />
         <fileset dir="grouping" includes="build.xml" />
         <fileset dir="suggest" includes="build.xml" />
       </subant>
@@ -78,6 +83,7 @@
       <subant target="validate" inheritall="false" failonerror="true">
         <fileset dir="analysis" includes="build.xml" />
         <fileset dir="benchmark" includes="build.xml" />
+        <fileset dir="common" includes="build.xml" />
         <fileset dir="grouping" includes="build.xml" />
         <fileset dir="suggest" includes="build.xml" />
       </subant>
@@ -90,6 +96,7 @@
       <subant target="clean" inheritall="false" failonerror="true">
         <fileset dir="analysis" includes="build.xml" />
         <fileset dir="benchmark" includes="build.xml" />
+        <fileset dir="common" includes="build.xml" />
         <fileset dir="grouping" includes="build.xml" />
         <fileset dir="suggest" includes="build.xml" />
       </subant>
diff --git a/modules/common/LICENSE.txt b/modules/common/LICENSE.txt
new file mode 100644
index 0000000..d645695
--- /dev/null
+++ b/modules/common/LICENSE.txt
@@ -0,0 +1,202 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
diff --git a/modules/common/NOTICE.txt b/modules/common/NOTICE.txt
new file mode 100644
index 0000000..b48d3ed
--- /dev/null
+++ b/modules/common/NOTICE.txt
@@ -0,0 +1,5 @@
+Apache Lucene Common
+Copyright 2011 The Apache Software Foundation
+
+This product includes software developed by
+The Apache Software Foundation (http://www.apache.org/).
diff --git a/modules/common/build.xml b/modules/common/build.xml
new file mode 100644
index 0000000..896bad4
--- /dev/null
+++ b/modules/common/build.xml
@@ -0,0 +1,31 @@
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  -->
+
+<project name="common" default="default">
+    <description>
+        Module containing common classes to be used by Solr and other modules
+    </description>
+
+    <property name="build.dir" location="build/" />
+    <property name="dist.dir" location="dist/" />
+    <property name="maven.dist.dir" location="../dist/maven" />
+
+    <import file="../../lucene/contrib/contrib-build.xml"/>
+    <property name="working.dir" location="work"/>
+
+    <target name="dist-maven" depends="jar-core,javadocs,contrib-build.dist-maven" />
+</project>
\ No newline at end of file
diff --git a/modules/common/src/java/org/apache/lucene/common/mutable/MutableValue.java b/modules/common/src/java/org/apache/lucene/common/mutable/MutableValue.java
new file mode 100755
index 0000000..05d98bf
--- /dev/null
+++ b/modules/common/src/java/org/apache/lucene/common/mutable/MutableValue.java
@@ -0,0 +1,62 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.common.mutable;
+
+/** @lucene.internal */
+public abstract class MutableValue implements Comparable {
+  public boolean exists = true;
+
+  public abstract void copy(MutableValue source);
+  public abstract MutableValue duplicate();
+  public abstract boolean equalsSameType(Object other);
+  public abstract int compareSameType(Object other);
+  public abstract Object toObject();
+
+  public boolean exists() {
+    return exists;
+  }
+
+  public int compareTo(Object other) {
+    Class c1 = this.getClass();
+    Class c2 = other.getClass();
+    if (c1 != c2) {
+      int c = c1.hashCode() - c2.hashCode();
+      if (c == 0) {
+        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());
+      }
+      return c;
+    }
+    return compareSameType(other);
+  }
+
+  @Override
+  public boolean equals(Object other) {
+    Class c1 = this.getClass();
+    Class c2 = other.getClass();
+    return (c1 == c2) && this.equalsSameType(other);
+  }
+
+  @Override
+  public abstract int hashCode();
+
+  @Override
+  public String toString() {
+    return exists() ? toObject().toString() : "(null)";
+  }
+}
+
+
diff --git a/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueBool.java b/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueBool.java
new file mode 100644
index 0000000..394b11a
--- /dev/null
+++ b/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueBool.java
@@ -0,0 +1,60 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.common.mutable;
+
+public class MutableValueBool extends MutableValue {
+  public boolean value;
+
+  @Override
+  public Object toObject() {
+    return exists ? value : null;
+  }
+
+  @Override
+  public void copy(MutableValue source) {
+    MutableValueBool s = (MutableValueBool) source;
+    value = s.value;
+    exists = s.exists;
+  }
+
+  @Override
+  public MutableValue duplicate() {
+    MutableValueBool v = new MutableValueBool();
+    v.value = this.value;
+    v.exists = this.exists;
+    return v;
+  }
+
+  @Override
+  public boolean equalsSameType(Object other) {
+    MutableValueBool b = (MutableValueBool)other;
+    return value == b.value && exists == b.exists;
+  }
+
+  @Override
+  public int compareSameType(Object other) {
+    MutableValueBool b = (MutableValueBool)other;
+    if (value != b.value) return value ? 1 : 0;
+    if (exists == b.exists) return 0;
+    return exists ? 1 : -1;
+  }
+
+  @Override
+  public int hashCode() {
+    return value ? 2 : (exists ? 1 : 0);
+  }
+}
diff --git a/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueDate.java b/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueDate.java
new file mode 100755
index 0000000..6fd420a
--- /dev/null
+++ b/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueDate.java
@@ -0,0 +1,34 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.common.mutable;
+
+import java.util.Date;
+
+public class MutableValueDate extends MutableValueLong {
+  @Override
+  public Object toObject() {
+    return exists ? new Date(value) : null;
+  }
+
+  @Override
+  public MutableValue duplicate() {
+    MutableValueDate v = new MutableValueDate();
+    v.value = this.value;
+    v.exists = this.exists;
+    return v;
+  }  
+}
\ No newline at end of file
diff --git a/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueDouble.java b/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueDouble.java
new file mode 100755
index 0000000..f832541
--- /dev/null
+++ b/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueDouble.java
@@ -0,0 +1,63 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.common.mutable;
+
+public class MutableValueDouble extends MutableValue {
+  public double value;
+
+  @Override
+  public Object toObject() {
+    return exists ? value : null;
+  }
+
+  @Override
+  public void copy(MutableValue source) {
+    MutableValueDouble s = (MutableValueDouble) source;
+    value = s.value;
+    exists = s.exists;
+  }
+
+  @Override
+  public MutableValue duplicate() {
+    MutableValueDouble v = new MutableValueDouble();
+    v.value = this.value;
+    v.exists = this.exists;
+    return v;
+  }
+
+  @Override
+  public boolean equalsSameType(Object other) {
+    MutableValueDouble b = (MutableValueDouble)other;
+    return value == b.value && exists == b.exists;
+  }
+
+  @Override
+  public int compareSameType(Object other) {
+    MutableValueDouble b = (MutableValueDouble)other;
+    int c = Double.compare(value, b.value);
+    if (c != 0) return c;
+    if (!exists) return -1;
+    if (!b.exists) return 1;
+    return 0;
+  }
+
+  @Override
+  public int hashCode() {
+    long x = Double.doubleToLongBits(value);
+    return (int)x + (int)(x>>>32);
+  }
+}
diff --git a/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueFloat.java b/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueFloat.java
new file mode 100755
index 0000000..0d3b06a
--- /dev/null
+++ b/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueFloat.java
@@ -0,0 +1,61 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.common.mutable;
+
+public class MutableValueFloat extends MutableValue {
+  public float value;
+
+  @Override
+  public Object toObject() {
+    return exists ? value : null;
+  }
+
+  @Override
+  public void copy(MutableValue source) {
+    MutableValueFloat s = (MutableValueFloat) source;
+    value = s.value;
+    exists = s.exists;
+  }
+
+  @Override
+  public MutableValue duplicate() {
+    MutableValueFloat v = new MutableValueFloat();
+    v.value = this.value;
+    v.exists = this.exists;
+    return v;
+  }
+
+  @Override
+  public boolean equalsSameType(Object other) {
+    MutableValueFloat b = (MutableValueFloat)other;
+    return value == b.value && exists == b.exists;
+  }
+
+  @Override
+  public int compareSameType(Object other) {
+    MutableValueFloat b = (MutableValueFloat)other;
+    int c = Float.compare(value, b.value);
+    if (c != 0) return c;
+    if (exists == b.exists) return 0;
+    return exists ? 1 : -1;
+  }
+
+  @Override
+  public int hashCode() {
+    return Float.floatToIntBits(value);
+  }
+}
diff --git a/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueInt.java b/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueInt.java
new file mode 100755
index 0000000..d05f513
--- /dev/null
+++ b/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueInt.java
@@ -0,0 +1,66 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.common.mutable;
+
+public class MutableValueInt extends MutableValue {
+  public int value;
+  
+  @Override
+  public Object toObject() {
+    return exists ? value : null;
+  }
+
+  @Override
+  public void copy(MutableValue source) {
+    MutableValueInt s = (MutableValueInt) source;
+    value = s.value;
+    exists = s.exists;
+  }
+
+  @Override
+  public MutableValue duplicate() {
+    MutableValueInt v = new MutableValueInt();
+    v.value = this.value;
+    v.exists = this.exists;
+    return v;
+  }
+
+  @Override
+  public boolean equalsSameType(Object other) {
+    MutableValueInt b = (MutableValueInt)other;
+    return value == b.value && exists == b.exists;
+  }
+
+  @Override
+  public int compareSameType(Object other) {
+    MutableValueInt b = (MutableValueInt)other;
+    int ai = value;
+    int bi = b.value;
+    if (ai<bi) return -1;
+    else if (ai>bi) return 1;
+
+    if (exists == b.exists) return 0;
+    return exists ? 1 : -1;
+  }
+
+
+  @Override
+  public int hashCode() {
+    // TODO: if used in HashMap, it already mixes the value... maybe use a straight value?
+    return (value>>8) + (value>>16);
+  }
+}
diff --git a/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueLong.java b/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueLong.java
new file mode 100644
index 0000000..5410f64
--- /dev/null
+++ b/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueLong.java
@@ -0,0 +1,63 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.common.mutable;
+
+public class MutableValueLong extends MutableValue {
+  public long value;
+
+  @Override
+  public Object toObject() {
+    return exists ? value : null;
+  }
+
+  @Override
+  public void copy(MutableValue source) {
+    MutableValueLong s = (MutableValueLong) source;
+    exists = s.exists;
+    value = s.value;
+  }
+
+  @Override
+  public MutableValue duplicate() {
+    MutableValueLong v = new MutableValueLong();
+    v.value = this.value;
+    v.exists = this.exists;
+    return v;
+  }
+
+  @Override
+  public boolean equalsSameType(Object other) {
+    MutableValueLong b = (MutableValueLong)other;
+    return value == b.value && exists == b.exists;
+  }
+
+  @Override
+  public int compareSameType(Object other) {
+    MutableValueLong b = (MutableValueLong)other;
+    long bv = b.value;
+    if (value<bv) return -1;
+    if (value>bv) return 1;
+    if (exists == b.exists) return 0;
+    return exists ? 1 : -1;
+  }
+
+
+  @Override
+  public int hashCode() {
+    return (int)value + (int)(value>>32);
+  }
+}
diff --git a/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueStr.java b/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueStr.java
new file mode 100755
index 0000000..6d50756
--- /dev/null
+++ b/modules/common/src/java/org/apache/lucene/common/mutable/MutableValueStr.java
@@ -0,0 +1,64 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.common.mutable;
+
+import org.apache.lucene.util.BytesRef;
+
+public class MutableValueStr extends MutableValue {
+  public BytesRef value = new BytesRef();
+
+  @Override
+  public Object toObject() {
+    return exists ? value.utf8ToString() : null;
+  }
+
+  @Override
+  public void copy(MutableValue source) {
+    MutableValueStr s = (MutableValueStr) source;
+    exists = s.exists;
+    value.copy(s.value);
+  }
+
+  @Override
+  public MutableValue duplicate() {
+    MutableValueStr v = new MutableValueStr();
+    v.value.copy(value);
+    v.exists = this.exists;
+    return v;
+  }
+
+  @Override
+  public boolean equalsSameType(Object other) {
+    MutableValueStr b = (MutableValueStr)other;
+    return value.equals(b.value) && exists == b.exists;
+  }
+
+  @Override
+  public int compareSameType(Object other) {
+    MutableValueStr b = (MutableValueStr)other;
+    int c = value.compareTo(b.value);
+    if (c != 0) return c;
+    if (exists == b.exists) return 0;
+    return exists ? 1 : -1;
+  }
+
+
+  @Override
+  public int hashCode() {
+    return value.hashCode();
+  }
+}
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index ae7a688..4cd152a 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -238,6 +238,8 @@ Other Changes
 
 * SOLR-2576: Remove deprecated SpellingResult.add(Token, int).
   (James Dyer via rmuir)
+
+* LUCENE-3232: Moved MutableValue classes to new 'common' module. (Chris Male)
   
 Documentation
 ----------------------
diff --git a/solr/common-build.xml b/solr/common-build.xml
index 76b8fde..0a7d83c 100644
--- a/solr/common-build.xml
+++ b/solr/common-build.xml
@@ -199,7 +199,8 @@
     <pathelement location="${common-solr.dir}/../lucene/build/contrib/queries/classes/java" />
     <pathelement location="${common-solr.dir}/../lucene/build/contrib/spatial/classes/java" />
     <pathelement location="${common-solr.dir}/../modules/grouping/build/classes/java" />
-  </path>   
+    <pathelement location="${common-solr.dir}/../modules/common/build/classes/java" />
+  </path>
 
   <target name="prep-lucene-jars">
     <sequential>
@@ -216,6 +217,7 @@
         <fileset dir="../lucene/contrib/queries" includes="build.xml" />
         <fileset dir="../lucene/contrib/spatial" includes="build.xml" />
         <fileset dir="../modules/grouping" includes="build.xml" />
+        <fileset dir="../modules/common" includes="build.xml" />
       </subant>
     </sequential>
   </target>
@@ -253,6 +255,9 @@
       <fileset dir="../modules/grouping/build">
         <include name="lucene-grouping-${version}.jar" />
       </fileset>
+      <fileset dir="../modules/common/build">
+        <include name="lucene-queries-${version}.jar" />
+      </fileset>
       </copy>
   </target>  
   
@@ -268,6 +273,7 @@
       <fileset dir="../lucene/contrib/queries" includes="build.xml"/>
       <fileset dir="../lucene/contrib/spatial" includes="build.xml"/>
       <fileset dir="../modules/grouping" includes="build.xml"/>
+      <fileset dir="../modules/common" includes="build.xml"/>
     </subant>
   </target>
    
diff --git a/solr/src/java/org/apache/solr/schema/BoolField.java b/solr/src/java/org/apache/solr/schema/BoolField.java
index 10e1c86..ce9ae5d 100644
--- a/solr/src/java/org/apache/solr/schema/BoolField.java
+++ b/solr/src/java/org/apache/solr/schema/BoolField.java
@@ -17,14 +17,13 @@
 
 package org.apache.solr.schema;
 
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueBool;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
-import org.apache.solr.search.MutableValue;
-import org.apache.solr.search.MutableValueBool;
-import org.apache.solr.search.MutableValueInt;
 import org.apache.solr.search.QParser;
 import org.apache.solr.search.function.*;
 import org.apache.lucene.analysis.Analyzer;
diff --git a/solr/src/java/org/apache/solr/schema/SortableDoubleField.java b/solr/src/java/org/apache/solr/schema/SortableDoubleField.java
index e31a671..ee6149b 100644
--- a/solr/src/java/org/apache/solr/schema/SortableDoubleField.java
+++ b/solr/src/java/org/apache/solr/schema/SortableDoubleField.java
@@ -17,11 +17,11 @@
 
 package org.apache.solr.schema;
 
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueDouble;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
-import org.apache.solr.search.MutableValueDouble;
-import org.apache.solr.search.MutableValue;
 import org.apache.solr.search.QParser;
 import org.apache.solr.search.function.ValueSource;
 import org.apache.solr.search.function.FieldCacheSource;
diff --git a/solr/src/java/org/apache/solr/schema/SortableFloatField.java b/solr/src/java/org/apache/solr/schema/SortableFloatField.java
index d5a5315..b15a9a6 100644
--- a/solr/src/java/org/apache/solr/schema/SortableFloatField.java
+++ b/solr/src/java/org/apache/solr/schema/SortableFloatField.java
@@ -17,11 +17,11 @@
 
 package org.apache.solr.schema;
 
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueFloat;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
-import org.apache.solr.search.MutableValueFloat;
-import org.apache.solr.search.MutableValue;
 import org.apache.solr.search.QParser;
 import org.apache.solr.search.function.ValueSource;
 import org.apache.solr.search.function.FieldCacheSource;
diff --git a/solr/src/java/org/apache/solr/schema/SortableIntField.java b/solr/src/java/org/apache/solr/schema/SortableIntField.java
index e13c2c3..8b0926b 100644
--- a/solr/src/java/org/apache/solr/schema/SortableIntField.java
+++ b/solr/src/java/org/apache/solr/schema/SortableIntField.java
@@ -17,11 +17,11 @@
 
 package org.apache.solr.schema;
 
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueInt;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
-import org.apache.solr.search.MutableValueInt;
-import org.apache.solr.search.MutableValue;
 import org.apache.solr.search.QParser;
 import org.apache.solr.search.function.ValueSource;
 import org.apache.solr.search.function.FieldCacheSource;
diff --git a/solr/src/java/org/apache/solr/schema/SortableLongField.java b/solr/src/java/org/apache/solr/schema/SortableLongField.java
index 7834431..8727fd0 100644
--- a/solr/src/java/org/apache/solr/schema/SortableLongField.java
+++ b/solr/src/java/org/apache/solr/schema/SortableLongField.java
@@ -17,11 +17,11 @@
 
 package org.apache.solr.schema;
 
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueLong;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
-import org.apache.solr.search.MutableValueLong;
-import org.apache.solr.search.MutableValue;
 import org.apache.solr.search.QParser;
 import org.apache.solr.search.function.ValueSource;
 import org.apache.solr.search.function.FieldCacheSource;
diff --git a/solr/src/java/org/apache/solr/schema/TrieField.java b/solr/src/java/org/apache/solr/schema/TrieField.java
index 8fbde52..1cc37e0 100644
--- a/solr/src/java/org/apache/solr/schema/TrieField.java
+++ b/solr/src/java/org/apache/solr/schema/TrieField.java
@@ -16,6 +16,8 @@
  */
 package org.apache.solr.schema;
 
+import org.apache.lucene.common.mutable.MutableValueDate;
+import org.apache.lucene.common.mutable.MutableValueLong;
 import org.apache.lucene.document.Fieldable;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.NumericField;
@@ -31,8 +33,6 @@ import org.apache.lucene.util.NumericUtils;
 import org.apache.solr.analysis.*;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.response.TextResponseWriter;
-import org.apache.solr.search.MutableValueDate;
-import org.apache.solr.search.MutableValueLong;
 import org.apache.solr.search.QParser;
 import org.apache.solr.search.function.*;
 
diff --git a/solr/src/java/org/apache/solr/search/Grouping.java b/solr/src/java/org/apache/solr/search/Grouping.java
index ce33795..bf604d7 100755
--- a/solr/src/java/org/apache/solr/search/Grouping.java
+++ b/solr/src/java/org/apache/solr/search/Grouping.java
@@ -18,6 +18,7 @@
 package org.apache.solr.search;
 
 import org.apache.commons.lang.ArrayUtils;
+import org.apache.lucene.common.mutable.MutableValue;
 import org.apache.lucene.document.Fieldable;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.queryParser.ParseException;
diff --git a/solr/src/java/org/apache/solr/search/MutableValue.java b/solr/src/java/org/apache/solr/search/MutableValue.java
deleted file mode 100755
index 28fbbb9..0000000
--- a/solr/src/java/org/apache/solr/search/MutableValue.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.solr.search;
-
-/** @lucene.internal */
-public abstract class MutableValue implements Comparable {
-  public boolean exists = true;
-
-  public abstract void copy(MutableValue source);
-  public abstract MutableValue duplicate();
-  public abstract boolean equalsSameType(Object other);
-  public abstract int compareSameType(Object other);
-  public abstract Object toObject();
-
-  public boolean exists() {
-    return exists;
-  }
-
-  public int compareTo(Object other) {
-    Class c1 = this.getClass();
-    Class c2 = other.getClass();
-    if (c1 != c2) {
-      int c = c1.hashCode() - c2.hashCode();
-      if (c == 0) {
-        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());
-      }
-      return c;
-    }
-    return compareSameType(other);
-  }
-
-  @Override
-  public boolean equals(Object other) {
-    Class c1 = this.getClass();
-    Class c2 = other.getClass();
-    return (c1 == c2) && this.equalsSameType(other);
-  }
-
-  @Override
-  public abstract int hashCode();
-
-  @Override
-  public String toString() {
-    return exists() ? toObject().toString() : "(null)";
-  }
-}
-
-
diff --git a/solr/src/java/org/apache/solr/search/MutableValueBool.java b/solr/src/java/org/apache/solr/search/MutableValueBool.java
deleted file mode 100644
index 0328ff7..0000000
--- a/solr/src/java/org/apache/solr/search/MutableValueBool.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.solr.search;
-
-public class MutableValueBool extends MutableValue {
-  public boolean value;
-
-  @Override
-  public Object toObject() {
-    return exists ? value : null;
-  }
-
-  @Override
-  public void copy(MutableValue source) {
-    MutableValueBool s = (MutableValueBool) source;
-    value = s.value;
-    exists = s.exists;
-  }
-
-  @Override
-  public MutableValue duplicate() {
-    MutableValueBool v = new MutableValueBool();
-    v.value = this.value;
-    v.exists = this.exists;
-    return v;
-  }
-
-  @Override
-  public boolean equalsSameType(Object other) {
-    MutableValueBool b = (MutableValueBool)other;
-    return value == b.value && exists == b.exists;
-  }
-
-  @Override
-  public int compareSameType(Object other) {
-    MutableValueBool b = (MutableValueBool)other;
-    if (value != b.value) return value ? 1 : 0;
-    if (exists == b.exists) return 0;
-    return exists ? 1 : -1;
-  }
-
-  @Override
-  public int hashCode() {
-    return value ? 2 : (exists ? 1 : 0);
-  }
-}
diff --git a/solr/src/java/org/apache/solr/search/MutableValueDate.java b/solr/src/java/org/apache/solr/search/MutableValueDate.java
deleted file mode 100755
index 953fcdb..0000000
--- a/solr/src/java/org/apache/solr/search/MutableValueDate.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.solr.search;
-
-import java.util.Date;
-
-public class MutableValueDate extends MutableValueLong {
-  @Override
-  public Object toObject() {
-    return exists ? new Date(value) : null;
-  }
-
-  @Override
-  public MutableValue duplicate() {
-    MutableValueDate v = new MutableValueDate();
-    v.value = this.value;
-    v.exists = this.exists;
-    return v;
-  }  
-}
\ No newline at end of file
diff --git a/solr/src/java/org/apache/solr/search/MutableValueDouble.java b/solr/src/java/org/apache/solr/search/MutableValueDouble.java
deleted file mode 100755
index 424ecb9..0000000
--- a/solr/src/java/org/apache/solr/search/MutableValueDouble.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.solr.search;
-
-public class MutableValueDouble extends MutableValue {
-  public double value;
-
-  @Override
-  public Object toObject() {
-    return exists ? value : null;
-  }
-
-  @Override
-  public void copy(MutableValue source) {
-    MutableValueDouble s = (MutableValueDouble) source;
-    value = s.value;
-    exists = s.exists;
-  }
-
-  @Override
-  public MutableValue duplicate() {
-    MutableValueDouble v = new MutableValueDouble();
-    v.value = this.value;
-    v.exists = this.exists;
-    return v;
-  }
-
-  @Override
-  public boolean equalsSameType(Object other) {
-    MutableValueDouble b = (MutableValueDouble)other;
-    return value == b.value && exists == b.exists;
-  }
-
-  @Override
-  public int compareSameType(Object other) {
-    MutableValueDouble b = (MutableValueDouble)other;
-    int c = Double.compare(value, b.value);
-    if (c != 0) return c;
-    if (!exists) return -1;
-    if (!b.exists) return 1;
-    return 0;
-  }
-
-  @Override
-  public int hashCode() {
-    long x = Double.doubleToLongBits(value);
-    return (int)x + (int)(x>>>32);
-  }
-}
diff --git a/solr/src/java/org/apache/solr/search/MutableValueFloat.java b/solr/src/java/org/apache/solr/search/MutableValueFloat.java
deleted file mode 100755
index 73b3bbb..0000000
--- a/solr/src/java/org/apache/solr/search/MutableValueFloat.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.solr.search;
-
-public class MutableValueFloat extends MutableValue {
-  public float value;
-
-  @Override
-  public Object toObject() {
-    return exists ? value : null;
-  }
-
-  @Override
-  public void copy(MutableValue source) {
-    MutableValueFloat s = (MutableValueFloat) source;
-    value = s.value;
-    exists = s.exists;
-  }
-
-  @Override
-  public MutableValue duplicate() {
-    MutableValueFloat v = new MutableValueFloat();
-    v.value = this.value;
-    v.exists = this.exists;
-    return v;
-  }
-
-  @Override
-  public boolean equalsSameType(Object other) {
-    MutableValueFloat b = (MutableValueFloat)other;
-    return value == b.value && exists == b.exists;
-  }
-
-  @Override
-  public int compareSameType(Object other) {
-    MutableValueFloat b = (MutableValueFloat)other;
-    int c = Float.compare(value, b.value);
-    if (c != 0) return c;
-    if (exists == b.exists) return 0;
-    return exists ? 1 : -1;
-  }
-
-  @Override
-  public int hashCode() {
-    return Float.floatToIntBits(value);
-  }
-}
diff --git a/solr/src/java/org/apache/solr/search/MutableValueInt.java b/solr/src/java/org/apache/solr/search/MutableValueInt.java
deleted file mode 100755
index 1502b13..0000000
--- a/solr/src/java/org/apache/solr/search/MutableValueInt.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.solr.search;
-
-public class MutableValueInt extends MutableValue {
-  public int value;
-  
-  @Override
-  public Object toObject() {
-    return exists ? value : null;
-  }
-
-  @Override
-  public void copy(MutableValue source) {
-    MutableValueInt s = (MutableValueInt) source;
-    value = s.value;
-    exists = s.exists;
-  }
-
-  @Override
-  public MutableValue duplicate() {
-    MutableValueInt v = new MutableValueInt();
-    v.value = this.value;
-    v.exists = this.exists;
-    return v;
-  }
-
-  @Override
-  public boolean equalsSameType(Object other) {
-    MutableValueInt b = (MutableValueInt)other;
-    return value == b.value && exists == b.exists;
-  }
-
-  @Override
-  public int compareSameType(Object other) {
-    MutableValueInt b = (MutableValueInt)other;
-    int ai = value;
-    int bi = b.value;
-    if (ai<bi) return -1;
-    else if (ai>bi) return 1;
-
-    if (exists == b.exists) return 0;
-    return exists ? 1 : -1;
-  }
-
-
-  @Override
-  public int hashCode() {
-    // TODO: if used in HashMap, it already mixes the value... maybe use a straight value?
-    return (value>>8) + (value>>16);
-  }
-}
diff --git a/solr/src/java/org/apache/solr/search/MutableValueLong.java b/solr/src/java/org/apache/solr/search/MutableValueLong.java
deleted file mode 100644
index 8cc5729..0000000
--- a/solr/src/java/org/apache/solr/search/MutableValueLong.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.solr.search;
-
-public class MutableValueLong extends MutableValue {
-  public long value;
-
-  @Override
-  public Object toObject() {
-    return exists ? value : null;
-  }
-
-  @Override
-  public void copy(MutableValue source) {
-    MutableValueLong s = (MutableValueLong) source;
-    exists = s.exists;
-    value = s.value;
-  }
-
-  @Override
-  public MutableValue duplicate() {
-    MutableValueLong v = new MutableValueLong();
-    v.value = this.value;
-    v.exists = this.exists;
-    return v;
-  }
-
-  @Override
-  public boolean equalsSameType(Object other) {
-    MutableValueLong b = (MutableValueLong)other;
-    return value == b.value && exists == b.exists;
-  }
-
-  @Override
-  public int compareSameType(Object other) {
-    MutableValueLong b = (MutableValueLong)other;
-    long bv = b.value;
-    if (value<bv) return -1;
-    if (value>bv) return 1;
-    if (exists == b.exists) return 0;
-    return exists ? 1 : -1;
-  }
-
-
-  @Override
-  public int hashCode() {
-    return (int)value + (int)(value>>32);
-  }
-}
diff --git a/solr/src/java/org/apache/solr/search/MutableValueStr.java b/solr/src/java/org/apache/solr/search/MutableValueStr.java
deleted file mode 100755
index 3c97a8f..0000000
--- a/solr/src/java/org/apache/solr/search/MutableValueStr.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.solr.search;
-
-import org.apache.lucene.util.BytesRef;
-
-public class MutableValueStr extends MutableValue {
-  public BytesRef value = new BytesRef();
-
-  @Override
-  public Object toObject() {
-    return exists ? value.utf8ToString() : null;
-  }
-
-  @Override
-  public void copy(MutableValue source) {
-    MutableValueStr s = (MutableValueStr) source;
-    exists = s.exists;
-    value.copy(s.value);
-  }
-
-  @Override
-  public MutableValue duplicate() {
-    MutableValueStr v = new MutableValueStr();
-    v.value.copy(value);
-    v.exists = this.exists;
-    return v;
-  }
-
-  @Override
-  public boolean equalsSameType(Object other) {
-    MutableValueStr b = (MutableValueStr)other;
-    return value.equals(b.value) && exists == b.exists;
-  }
-
-  @Override
-  public int compareSameType(Object other) {
-    MutableValueStr b = (MutableValueStr)other;
-    int c = value.compareTo(b.value);
-    if (c != 0) return c;
-    if (exists == b.exists) return 0;
-    return exists ? 1 : -1;
-  }
-
-
-  @Override
-  public int hashCode() {
-    return value.hashCode();
-  }
-}
diff --git a/solr/src/java/org/apache/solr/search/function/BoolDocValues.java b/solr/src/java/org/apache/solr/search/function/BoolDocValues.java
index 443f379..79442d6 100644
--- a/solr/src/java/org/apache/solr/search/function/BoolDocValues.java
+++ b/solr/src/java/org/apache/solr/search/function/BoolDocValues.java
@@ -1,8 +1,8 @@
 package org.apache.solr.search.function;
 
-import org.apache.solr.search.MutableValue;
-import org.apache.solr.search.MutableValueBool;
-import org.apache.solr.search.MutableValueInt;
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueBool;
+
 
 public abstract class BoolDocValues extends DocValues {
   protected final ValueSource vs;
diff --git a/solr/src/java/org/apache/solr/search/function/DocValues.java b/solr/src/java/org/apache/solr/search/function/DocValues.java
index af71b15..889ef51 100644
--- a/solr/src/java/org/apache/solr/search/function/DocValues.java
+++ b/solr/src/java/org/apache/solr/search/function/DocValues.java
@@ -17,11 +17,11 @@
 
 package org.apache.solr.search.function;
 
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueFloat;
 import org.apache.lucene.search.*;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.util.BytesRef;
-import org.apache.solr.search.MutableValue;
-import org.apache.solr.search.MutableValueFloat;
 
 /**
  * Represents field values as different types.
diff --git a/solr/src/java/org/apache/solr/search/function/DoubleDocValues.java b/solr/src/java/org/apache/solr/search/function/DoubleDocValues.java
index 70ff39d..f331b43 100644
--- a/solr/src/java/org/apache/solr/search/function/DoubleDocValues.java
+++ b/solr/src/java/org/apache/solr/search/function/DoubleDocValues.java
@@ -1,7 +1,7 @@
 package org.apache.solr.search.function;
 
-import org.apache.solr.search.MutableValue;
-import org.apache.solr.search.MutableValueDouble;
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueDouble;
 
 public abstract class DoubleDocValues extends DocValues {
   protected final ValueSource vs;
diff --git a/solr/src/java/org/apache/solr/search/function/DoubleFieldSource.java b/solr/src/java/org/apache/solr/search/function/DoubleFieldSource.java
index 0d20617..cf97a74 100644
--- a/solr/src/java/org/apache/solr/search/function/DoubleFieldSource.java
+++ b/solr/src/java/org/apache/solr/search/function/DoubleFieldSource.java
@@ -17,13 +17,13 @@
 
 package org.apache.solr.search.function;
 
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueDouble;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.search.cache.DoubleValuesCreator;
 import org.apache.lucene.search.cache.CachedArray.DoubleValues;
-import org.apache.solr.search.MutableValue;
-import org.apache.solr.search.MutableValueDouble;
 
 import java.io.IOException;
 import java.util.Map;
diff --git a/solr/src/java/org/apache/solr/search/function/FloatDocValues.java b/solr/src/java/org/apache/solr/search/function/FloatDocValues.java
index 4d3a3e4..ce7f369 100644
--- a/solr/src/java/org/apache/solr/search/function/FloatDocValues.java
+++ b/solr/src/java/org/apache/solr/search/function/FloatDocValues.java
@@ -1,7 +1,7 @@
 package org.apache.solr.search.function;
 
-import org.apache.solr.search.MutableValue;
-import org.apache.solr.search.MutableValueFloat;
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueFloat;
 
 public abstract class FloatDocValues extends DocValues {
   protected final ValueSource vs;
diff --git a/solr/src/java/org/apache/solr/search/function/FloatFieldSource.java b/solr/src/java/org/apache/solr/search/function/FloatFieldSource.java
index abcd634..fa790ce 100644
--- a/solr/src/java/org/apache/solr/search/function/FloatFieldSource.java
+++ b/solr/src/java/org/apache/solr/search/function/FloatFieldSource.java
@@ -20,12 +20,12 @@ package org.apache.solr.search.function;
 import java.io.IOException;
 import java.util.Map;
 
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueFloat;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.search.cache.FloatValuesCreator;
 import org.apache.lucene.search.cache.CachedArray.FloatValues;
-import org.apache.solr.search.MutableValue;
-import org.apache.solr.search.MutableValueFloat;
 
 /**
  * Obtains float field values from the {@link org.apache.lucene.search.FieldCache}
diff --git a/solr/src/java/org/apache/solr/search/function/IntDocValues.java b/solr/src/java/org/apache/solr/search/function/IntDocValues.java
index 157ace2..0ae6a25 100644
--- a/solr/src/java/org/apache/solr/search/function/IntDocValues.java
+++ b/solr/src/java/org/apache/solr/search/function/IntDocValues.java
@@ -1,7 +1,8 @@
 package org.apache.solr.search.function;
 
-import org.apache.solr.search.MutableValue;
-import org.apache.solr.search.MutableValueInt;
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueInt;
+
 
 public abstract class IntDocValues extends DocValues {
   protected final ValueSource vs;
diff --git a/solr/src/java/org/apache/solr/search/function/IntFieldSource.java b/solr/src/java/org/apache/solr/search/function/IntFieldSource.java
index 8f7a580..80bfc95 100644
--- a/solr/src/java/org/apache/solr/search/function/IntFieldSource.java
+++ b/solr/src/java/org/apache/solr/search/function/IntFieldSource.java
@@ -17,11 +17,11 @@
 
 package org.apache.solr.search.function;
 
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueInt;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.util.Bits;
-import org.apache.solr.search.MutableValueInt;
-import org.apache.solr.search.MutableValue;
 import org.apache.lucene.search.cache.IntValuesCreator;
 import org.apache.lucene.search.cache.CachedArray.IntValues;
 
diff --git a/solr/src/java/org/apache/solr/search/function/LongDocValues.java b/solr/src/java/org/apache/solr/search/function/LongDocValues.java
index f0e8f6d..7eee432 100644
--- a/solr/src/java/org/apache/solr/search/function/LongDocValues.java
+++ b/solr/src/java/org/apache/solr/search/function/LongDocValues.java
@@ -1,7 +1,8 @@
 package org.apache.solr.search.function;
 
-import org.apache.solr.search.MutableValue;
-import org.apache.solr.search.MutableValueLong;
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueLong;
+
 
 public abstract class LongDocValues extends DocValues {
   protected final ValueSource vs;
diff --git a/solr/src/java/org/apache/solr/search/function/LongFieldSource.java b/solr/src/java/org/apache/solr/search/function/LongFieldSource.java
index 03ff11e..8b149dc 100644
--- a/solr/src/java/org/apache/solr/search/function/LongFieldSource.java
+++ b/solr/src/java/org/apache/solr/search/function/LongFieldSource.java
@@ -17,13 +17,13 @@
 
 package org.apache.solr.search.function;
 
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueLong;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.search.cache.LongValuesCreator;
 import org.apache.lucene.search.cache.CachedArray.LongValues;
-import org.apache.solr.search.MutableValue;
-import org.apache.solr.search.MutableValueLong;
 
 
 import java.io.IOException;
diff --git a/solr/src/java/org/apache/solr/search/function/OrdFieldSource.java b/solr/src/java/org/apache/solr/search/function/OrdFieldSource.java
index f4ac613..6cdc52a 100644
--- a/solr/src/java/org/apache/solr/search/function/OrdFieldSource.java
+++ b/solr/src/java/org/apache/solr/search/function/OrdFieldSource.java
@@ -17,12 +17,12 @@
 
 package org.apache.solr.search.function;
 
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueInt;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.util.ReaderUtil;
-import org.apache.solr.search.MutableValue;
-import org.apache.solr.search.MutableValueInt;
 
 import java.io.IOException;
 import java.util.Map;
diff --git a/solr/src/java/org/apache/solr/search/function/QueryValueSource.java b/solr/src/java/org/apache/solr/search/function/QueryValueSource.java
index f0c15c6..c22617d 100755
--- a/solr/src/java/org/apache/solr/search/function/QueryValueSource.java
+++ b/solr/src/java/org/apache/solr/search/function/QueryValueSource.java
@@ -17,14 +17,14 @@
 
 package org.apache.solr.search.function;
 
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueFloat;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.search.*;
 import org.apache.lucene.search.Weight.ScorerContext;
 import org.apache.lucene.util.ReaderUtil;
 import org.apache.solr.common.SolrException;
-import org.apache.solr.search.MutableValue;
-import org.apache.solr.search.MutableValueFloat;
 
 import java.io.IOException;
 import java.util.Map;
diff --git a/solr/src/java/org/apache/solr/search/function/StrDocValues.java b/solr/src/java/org/apache/solr/search/function/StrDocValues.java
index 40d398e..fd9e7ac 100644
--- a/solr/src/java/org/apache/solr/search/function/StrDocValues.java
+++ b/solr/src/java/org/apache/solr/search/function/StrDocValues.java
@@ -1,9 +1,8 @@
 package org.apache.solr.search.function;
 
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueStr;
 import org.apache.lucene.util.BytesRef;
-import org.apache.solr.search.MutableValue;
-import org.apache.solr.search.MutableValueFloat;
-import org.apache.solr.search.MutableValueStr;
 
 public abstract class StrDocValues extends DocValues {
   protected final ValueSource vs;
diff --git a/solr/src/java/org/apache/solr/search/function/StringIndexDocValues.java b/solr/src/java/org/apache/solr/search/function/StringIndexDocValues.java
index 71db0ab..e98b19a 100755
--- a/solr/src/java/org/apache/solr/search/function/StringIndexDocValues.java
+++ b/solr/src/java/org/apache/solr/search/function/StringIndexDocValues.java
@@ -17,13 +17,13 @@
 
 package org.apache.solr.search.function;
 
+import org.apache.lucene.common.mutable.MutableValue;
+import org.apache.lucene.common.mutable.MutableValueStr;
 import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
-import org.apache.solr.search.MutableValue;
-import org.apache.solr.search.MutableValueStr;
 
 import java.io.IOException;
 

