GitDiffStart: fcd36f577089d664b5cf2c9f8b7a2a0e529c9bc0 | Mon Jan 17 21:25:46 2011 +0000
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermState.java b/lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermState.java
index 50b4fd3..aa4119a 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermState.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermState.java
@@ -16,6 +16,7 @@ package org.apache.lucene.index.codecs;
  * limitations under the License.
  */
 
+import org.apache.lucene.index.DocsEnum; // javadocs
 import org.apache.lucene.index.OrdTermState;
 import org.apache.lucene.index.TermState;
 
diff --git a/lucene/src/java/org/apache/lucene/search/FieldComparator.java b/lucene/src/java/org/apache/lucene/search/FieldComparator.java
index 54bc20b..1b2fc61 100644
--- a/lucene/src/java/org/apache/lucene/search/FieldComparator.java
+++ b/lucene/src/java/org/apache/lucene/search/FieldComparator.java
@@ -82,7 +82,7 @@ import org.apache.lucene.util.packed.PackedInts;
  *       priority queue.  The {@link FieldValueHitQueue}
  *       calls this method when a new hit is competitive.
  *
- *  <li> {@link #setNextReader(AtomicReaderContext)} Invoked
+ *  <li> {@link #setNextReader(IndexReader.AtomicReaderContext)} Invoked
  *       when the search is switching to the next segment.
  *       You may need to update internal state of the
  *       comparator, for example retrieving new values from
diff --git a/lucene/src/java/org/apache/lucene/search/Filter.java b/lucene/src/java/org/apache/lucene/search/Filter.java
index f4404c7..468a43b 100644
--- a/lucene/src/java/org/apache/lucene/search/Filter.java
+++ b/lucene/src/java/org/apache/lucene/search/Filter.java
@@ -19,6 +19,7 @@ package org.apache.lucene.search;
 
 import java.io.IOException;
 
+import org.apache.lucene.index.IndexReader; // javadocs
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.util.DocIdBitSet;
 
diff --git a/lucene/src/java/org/apache/lucene/search/Weight.java b/lucene/src/java/org/apache/lucene/search/Weight.java
index 8c26047..65cc6ec 100644
--- a/lucene/src/java/org/apache/lucene/search/Weight.java
+++ b/lucene/src/java/org/apache/lucene/search/Weight.java
@@ -34,7 +34,7 @@ import org.apache.lucene.index.IndexReader.ReaderContext;
  * {@link IndexReader} dependent state should reside in the {@link Scorer}.
  * <p>
  * Since {@link Weight} creates {@link Scorer} instances for a given
- * {@link AtomicReaderContext} ({@link #scorer(AtomicReaderContext, boolean, boolean)})
+ * {@link AtomicReaderContext} ({@link #scorer(IndexReader.AtomicReaderContext, ScorerContext)})
  * callers must maintain the relationship between the searcher's top-level
  * {@link ReaderContext} and the context used to create a {@link Scorer}. 
  * <p>
@@ -49,7 +49,7 @@ import org.apache.lucene.index.IndexReader.ReaderContext;
  * <li>The query normalization factor is passed to {@link #normalize(float)}. At
  * this point the weighting is complete.
  * <li>A <code>Scorer</code> is constructed by
- * {@link #scorer(AtomicReaderContext, ScorerContext)}.
+ * {@link #scorer(IndexReader.AtomicReaderContext, ScorerContext)}.
  * </ol>
  * 
  * @since 2.9
@@ -89,7 +89,7 @@ public abstract class Weight implements Serializable {
    * 
    * @param context
    *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.
-   * @param scorercontext the {@link ScorerContext} holding the scores context variables
+   * @param scorerContext the {@link ScorerContext} holding the scores context variables
    * @return a {@link Scorer} which scores documents in/out-of order.
    * @throws IOException
    */
@@ -102,7 +102,7 @@ public abstract class Weight implements Serializable {
    * Returns true iff this implementation scores docs only out of order. This
    * method is used in conjunction with {@link Collector}'s
    * {@link Collector#acceptsDocsOutOfOrder() acceptsDocsOutOfOrder} and
-   * {@link #scorer(AtomicReaderContext, boolean, boolean)} to
+   * {@link #scorer(IndexReader.AtomicReaderContext, ScorerContext)} to
    * create a matching {@link Scorer} instance for a given {@link Collector}, or
    * vice versa.
    * <p>
diff --git a/lucene/src/java/org/apache/lucene/search/function/ValueSource.java b/lucene/src/java/org/apache/lucene/search/function/ValueSource.java
index b2c9603..debaa16 100755
--- a/lucene/src/java/org/apache/lucene/search/function/ValueSource.java
+++ b/lucene/src/java/org/apache/lucene/search/function/ValueSource.java
@@ -19,7 +19,6 @@ package org.apache.lucene.search.function;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.index.IndexReader.CompositeReaderContext;
-import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.search.function.DocValues;
 
@@ -52,7 +51,7 @@ public abstract class ValueSource implements Serializable {
    * Return the DocValues used by the function query.
    * @deprecated (4.0) This method is temporary, to ease the migration to segment-based
    * searching. Please change your code to not pass {@link CompositeReaderContext} to these
-   * APIs. Use {@link #getValues(AtomicReaderContext)} instead
+   * APIs. Use {@link #getValues(IndexReader.AtomicReaderContext)} instead
    */
   @Deprecated
   public DocValues getValues(ReaderContext context) throws IOException {
diff --git a/lucene/src/java/org/apache/lucene/util/PerReaderTermState.java b/lucene/src/java/org/apache/lucene/util/PerReaderTermState.java
index bff514d..81ad4ce 100644
--- a/lucene/src/java/org/apache/lucene/util/PerReaderTermState.java
+++ b/lucene/src/java/org/apache/lucene/util/PerReaderTermState.java
@@ -138,9 +138,9 @@ public final class PerReaderTermState {
 
   /**
    *  Returns the accumulated document frequency of all {@link TermState}
-   *         instances passed to {@link #register(TermState, int)}.
+   *         instances passed to {@link #register(TermState, int, int)}.
    * @return the accumulated document frequency of all {@link TermState}
-   *         instances passed to {@link #register(TermState, int)}.
+   *         instances passed to {@link #register(TermState, int, int)}.
    */
   public int docFreq() {
     return docFreq;

