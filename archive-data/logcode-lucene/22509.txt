GitDiffStart: 8cc3fa4d04534db017abf8721869130f35fc89ed | Thu Jun 14 16:39:59 2007 +0000
diff --git a/src/java/org/apache/solr/analysis/SynonymFilterFactory.java b/src/java/org/apache/solr/analysis/SynonymFilterFactory.java
index a5785c8..34c22e8 100644
--- a/src/java/org/apache/solr/analysis/SynonymFilterFactory.java
+++ b/src/java/org/apache/solr/analysis/SynonymFilterFactory.java
@@ -18,9 +18,9 @@
 package org.apache.solr.analysis;
 
 import org.apache.lucene.analysis.TokenStream;
+import org.apache.solr.common.util.StrUtils;
 import org.apache.solr.core.Config;
 import org.apache.solr.core.SolrCore;
-import org.apache.solr.util.StrUtils;
 
 import java.io.IOException;
 import java.util.ArrayList;
diff --git a/src/java/org/apache/solr/common/params/MapSolrParams.java b/src/java/org/apache/solr/common/params/MapSolrParams.java
index 2fa5f85..8766caf 100644
--- a/src/java/org/apache/solr/common/params/MapSolrParams.java
+++ b/src/java/org/apache/solr/common/params/MapSolrParams.java
@@ -17,7 +17,7 @@
 
 package org.apache.solr.common.params;
 
-import org.apache.solr.util.StrUtils;
+import org.apache.solr.common.util.StrUtils;
 
 import java.util.Iterator;
 import java.util.Map;
diff --git a/src/java/org/apache/solr/common/params/MultiMapSolrParams.java b/src/java/org/apache/solr/common/params/MultiMapSolrParams.java
index bbd3214..c25fce2 100644
--- a/src/java/org/apache/solr/common/params/MultiMapSolrParams.java
+++ b/src/java/org/apache/solr/common/params/MultiMapSolrParams.java
@@ -17,7 +17,7 @@
 
 package org.apache.solr.common.params;
 
-import org.apache.solr.util.StrUtils;
+import org.apache.solr.common.util.StrUtils;
 
 import java.util.Iterator;
 import java.util.Map;
diff --git a/src/java/org/apache/solr/common/util/StrUtils.java b/src/java/org/apache/solr/common/util/StrUtils.java
new file mode 100644
index 0000000..261973f
--- /dev/null
+++ b/src/java/org/apache/solr/common/util/StrUtils.java
@@ -0,0 +1,210 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.common.util;
+
+import java.util.List;
+import java.util.ArrayList;
+import java.io.IOException;
+
+/**
+ * @author yonik
+ * @version $Id$
+ */
+public class StrUtils {
+
+  /**
+   * Split a string based on a separator, but don't split if it's inside
+   * a string.  Assume '\' escapes the next char both inside and
+   * outside strings.
+   */
+  public static List<String> splitSmart(String s, char separator) {
+    ArrayList<String> lst = new ArrayList<String>(4);
+    int pos=0, start=0, end=s.length();
+    char inString=0;
+    char ch=0;
+    while (pos < end) {
+      char prevChar=ch;
+      ch = s.charAt(pos++);
+      if (ch=='\\') {    // skip escaped chars
+        pos++;
+      } else if (inString != 0 && ch==inString) {
+        inString=0;
+      } else if (ch=='\'' || ch=='"') {
+        // If char is directly preceeded by a number or letter
+        // then don't treat it as the start of a string.
+        // Examples: 50" TV, or can't
+        if (!Character.isLetterOrDigit(prevChar)) {
+          inString=ch;
+        }
+      } else if (ch==separator && inString==0) {
+        lst.add(s.substring(start,pos-1));
+        start=pos;
+      }
+    }
+    if (start < end) {
+      lst.add(s.substring(start,end));
+    }
+
+    /***
+    if (SolrCore.log.isLoggable(Level.FINEST)) {
+      SolrCore.log.finest("splitCommand=" + lst);
+    }
+    ***/
+
+    return lst;
+  }
+
+  /** Splits a backslash escaped string on the separator.
+   * <p>
+   * Current backslash escaping supported:
+   * <br> \n \t \r \b \f are escaped the same as a Java String
+   * <br> Other characters following a backslash are produced verbatim (\c => c)
+   *
+   * @param s  the string to split
+   * @param separator the separator to split on
+   * @param decode decode backslash escaping
+   */
+  public static List<String> splitSmart(String s, String separator, boolean decode) {
+    ArrayList<String> lst = new ArrayList<String>(2);
+    StringBuilder sb = new StringBuilder();
+    int pos=0, end=s.length();
+    while (pos < end) {
+      if (s.startsWith(separator,pos)) {
+        if (sb.length() > 0) {
+          lst.add(sb.toString());
+          sb=new StringBuilder();
+        }
+        pos+=separator.length();
+        continue;
+      }
+
+      char ch = s.charAt(pos++);
+      if (ch=='\\') {
+        if (!decode) sb.append(ch);
+        if (pos>=end) break;  // ERROR, or let it go?
+        ch = s.charAt(pos++);
+        if (decode) {
+          switch(ch) {
+            case 'n' : ch='\n'; break;
+            case 't' : ch='\t'; break;
+            case 'r' : ch='\r'; break;
+            case 'b' : ch='\b'; break;
+            case 'f' : ch='\f'; break;
+          }
+        }
+      }
+
+      sb.append(ch);
+    }
+
+    if (sb.length() > 0) {
+      lst.add(sb.toString());
+    }
+
+    return lst;
+  }
+
+
+
+  public static List<String> splitWS(String s, boolean decode) {
+    ArrayList<String> lst = new ArrayList<String>(2);
+    StringBuilder sb = new StringBuilder();
+    int pos=0, end=s.length();
+    while (pos < end) {
+      char ch = s.charAt(pos++);
+      if (Character.isWhitespace(ch)) {
+        if (sb.length() > 0) {
+          lst.add(sb.toString());
+          sb=new StringBuilder();
+        }
+        continue;
+      }
+
+      if (ch=='\\') {
+        if (!decode) sb.append(ch);
+        if (pos>=end) break;  // ERROR, or let it go?
+        ch = s.charAt(pos++);
+        if (decode) {
+          switch(ch) {
+            case 'n' : ch='\n'; break;
+            case 't' : ch='\t'; break;
+            case 'r' : ch='\r'; break;
+            case 'b' : ch='\b'; break;
+            case 'f' : ch='\f'; break;
+          }
+        }
+      }
+
+      sb.append(ch);
+    }
+
+    if (sb.length() > 0) {
+      lst.add(sb.toString());
+    }
+
+    return lst;
+  }
+
+  public static List<String> toLower(List<String> strings) {
+    ArrayList<String> ret = new ArrayList<String>(strings.size());
+    for (String str : strings) {
+      ret.add(str.toLowerCase());
+    }
+    return ret;
+  }
+
+
+
+  /** Return if a string starts with '1', 't', or 'T'
+   *  and return false otherwise.
+   */
+  public static boolean parseBoolean(String s) {
+    char ch = s.length()>0 ? s.charAt(0) : 0;
+    return (ch=='1' || ch=='t' || ch=='T');
+  }
+
+  /**
+   * URLEncodes a value, replacing only enough chars so that
+   * the URL may be unambiguously pasted back into a browser.
+   * <p>
+   * Characters with a numeric value less than 32 are encoded.
+   * &amp;,=,%,+,space are encoded.
+   * <p>
+   */
+  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {
+    for (int i=0; i<val.length(); i++) {
+      char ch = val.charAt(i);
+      if (ch < 32) {
+        dest.append('%');
+        // Hmmm, if we used StringBuilder rather than Appendable, it
+        // could add an integer more efficiently.
+        dest.append(Integer.toString(ch));
+      } else {
+        switch (ch) {
+          case ' ': dest.append('+'); break;
+          case '&': dest.append("%26"); break;
+          case '%': dest.append("%25"); break;
+          case '=': dest.append("%3D"); break;
+          case '+': dest.append("%2B"); break;
+          default : dest.append(ch); break;
+        }
+      }
+    }
+  }
+
+}
diff --git a/src/java/org/apache/solr/handler/CSVRequestHandler.java b/src/java/org/apache/solr/handler/CSVRequestHandler.java
index ffe2549..90b6b1e 100755
--- a/src/java/org/apache/solr/handler/CSVRequestHandler.java
+++ b/src/java/org/apache/solr/handler/CSVRequestHandler.java
@@ -22,9 +22,9 @@ import org.apache.solr.request.SolrQueryResponse;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.ContentStream;
+import org.apache.solr.common.util.StrUtils;
 import org.apache.solr.schema.IndexSchema;
 import org.apache.solr.schema.SchemaField;
-import org.apache.solr.util.StrUtils;
 import org.apache.solr.update.*;
 import org.apache.commons.csv.CSVStrategy;
 import org.apache.commons.csv.CSVParser;
diff --git a/src/java/org/apache/solr/handler/StandardRequestHandler.java b/src/java/org/apache/solr/handler/StandardRequestHandler.java
index 24ff0dc..548833c 100644
--- a/src/java/org/apache/solr/handler/StandardRequestHandler.java
+++ b/src/java/org/apache/solr/handler/StandardRequestHandler.java
@@ -24,7 +24,6 @@ import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.solr.util.StrUtils;
 import org.apache.solr.util.HighlightingUtils;
 import org.apache.solr.util.SolrPluginUtils;
 import org.apache.solr.request.SimpleFacets;
@@ -35,6 +34,7 @@ import org.apache.solr.common.SolrException;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.MoreLikeThisParams;
 import org.apache.solr.common.util.NamedList;
+import org.apache.solr.common.util.StrUtils;
 import org.apache.solr.core.SolrCore;
 
 import static org.apache.solr.common.params.SolrParams.*;
diff --git a/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java b/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java
index 8cd804e..997a4ff 100644
--- a/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java
+++ b/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java
@@ -29,6 +29,7 @@ import org.apache.solr.common.SolrException;
 import org.apache.solr.common.util.ContentStream;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.common.util.SimpleOrderedMap;
+import org.apache.solr.common.util.StrUtils;
 import org.apache.solr.common.util.XML;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.request.SolrQueryRequest;
@@ -40,7 +41,6 @@ import org.apache.solr.update.CommitUpdateCommand;
 import org.apache.solr.update.DeleteUpdateCommand;
 import org.apache.solr.update.DocumentBuilder;
 import org.apache.solr.update.UpdateHandler;
-import org.apache.solr.util.StrUtils;
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 import org.xmlpull.v1.XmlPullParserFactory;
diff --git a/src/java/org/apache/solr/tst/OldRequestHandler.java b/src/java/org/apache/solr/tst/OldRequestHandler.java
index 2af3bfd..6bf486b 100644
--- a/src/java/org/apache/solr/tst/OldRequestHandler.java
+++ b/src/java/org/apache/solr/tst/OldRequestHandler.java
@@ -25,10 +25,10 @@ import java.util.logging.Level;
 import java.io.IOException;
 import java.net.URL;
 
-import org.apache.solr.util.StrUtils;
 import org.apache.solr.search.DocSlice;
 import org.apache.solr.search.QueryParsing;
 import org.apache.solr.common.util.NamedList;
+import org.apache.solr.common.util.StrUtils;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.request.SolrRequestHandler;
 import org.apache.solr.request.SolrQueryResponse;
diff --git a/src/java/org/apache/solr/tst/TestRequestHandler.java b/src/java/org/apache/solr/tst/TestRequestHandler.java
index 5a0e07e..9ac752c 100644
--- a/src/java/org/apache/solr/tst/TestRequestHandler.java
+++ b/src/java/org/apache/solr/tst/TestRequestHandler.java
@@ -28,11 +28,11 @@ import java.util.logging.Logger;
 import java.util.logging.Level;
 import java.net.URL;
 
-import org.apache.solr.util.StrUtils;
 import org.apache.solr.util.OpenBitSet;
 import org.apache.solr.search.*;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.util.NamedList;
+import org.apache.solr.common.util.StrUtils;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.request.SolrRequestHandler;
 import org.apache.solr.request.SolrQueryRequest;
diff --git a/src/java/org/apache/solr/util/SolrPluginUtils.java b/src/java/org/apache/solr/util/SolrPluginUtils.java
index 1279f7a..784a3c8 100644
--- a/src/java/org/apache/solr/util/SolrPluginUtils.java
+++ b/src/java/org/apache/solr/util/SolrPluginUtils.java
@@ -30,6 +30,7 @@ import org.apache.solr.common.params.DefaultSolrParams;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.common.util.SimpleOrderedMap;
+import org.apache.solr.common.util.StrUtils;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.request.SolrQueryResponse;
diff --git a/src/java/org/apache/solr/util/StrUtils.java b/src/java/org/apache/solr/util/StrUtils.java
deleted file mode 100644
index c26ffcb..0000000
--- a/src/java/org/apache/solr/util/StrUtils.java
+++ /dev/null
@@ -1,210 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.util;
-
-import java.util.List;
-import java.util.ArrayList;
-import java.io.IOException;
-
-/**
- * @author yonik
- * @version $Id$
- */
-public class StrUtils {
-
-  /**
-   * Split a string based on a separator, but don't split if it's inside
-   * a string.  Assume '\' escapes the next char both inside and
-   * outside strings.
-   */
-  public static List<String> splitSmart(String s, char separator) {
-    ArrayList<String> lst = new ArrayList<String>(4);
-    int pos=0, start=0, end=s.length();
-    char inString=0;
-    char ch=0;
-    while (pos < end) {
-      char prevChar=ch;
-      ch = s.charAt(pos++);
-      if (ch=='\\') {    // skip escaped chars
-        pos++;
-      } else if (inString != 0 && ch==inString) {
-        inString=0;
-      } else if (ch=='\'' || ch=='"') {
-        // If char is directly preceeded by a number or letter
-        // then don't treat it as the start of a string.
-        // Examples: 50" TV, or can't
-        if (!Character.isLetterOrDigit(prevChar)) {
-          inString=ch;
-        }
-      } else if (ch==separator && inString==0) {
-        lst.add(s.substring(start,pos-1));
-        start=pos;
-      }
-    }
-    if (start < end) {
-      lst.add(s.substring(start,end));
-    }
-
-    /***
-    if (SolrCore.log.isLoggable(Level.FINEST)) {
-      SolrCore.log.finest("splitCommand=" + lst);
-    }
-    ***/
-
-    return lst;
-  }
-
-  /** Splits a backslash escaped string on the separator.
-   * <p>
-   * Current backslash escaping supported:
-   * <br> \n \t \r \b \f are escaped the same as a Java String
-   * <br> Other characters following a backslash are produced verbatim (\c => c)
-   *
-   * @param s  the string to split
-   * @param separator the separator to split on
-   * @param decode decode backslash escaping
-   */
-  public static List<String> splitSmart(String s, String separator, boolean decode) {
-    ArrayList<String> lst = new ArrayList<String>(2);
-    StringBuilder sb = new StringBuilder();
-    int pos=0, end=s.length();
-    while (pos < end) {
-      if (s.startsWith(separator,pos)) {
-        if (sb.length() > 0) {
-          lst.add(sb.toString());
-          sb=new StringBuilder();
-        }
-        pos+=separator.length();
-        continue;
-      }
-
-      char ch = s.charAt(pos++);
-      if (ch=='\\') {
-        if (!decode) sb.append(ch);
-        if (pos>=end) break;  // ERROR, or let it go?
-        ch = s.charAt(pos++);
-        if (decode) {
-          switch(ch) {
-            case 'n' : ch='\n'; break;
-            case 't' : ch='\t'; break;
-            case 'r' : ch='\r'; break;
-            case 'b' : ch='\b'; break;
-            case 'f' : ch='\f'; break;
-          }
-        }
-      }
-
-      sb.append(ch);
-    }
-
-    if (sb.length() > 0) {
-      lst.add(sb.toString());
-    }
-
-    return lst;
-  }
-
-
-
-  public static List<String> splitWS(String s, boolean decode) {
-    ArrayList<String> lst = new ArrayList<String>(2);
-    StringBuilder sb = new StringBuilder();
-    int pos=0, end=s.length();
-    while (pos < end) {
-      char ch = s.charAt(pos++);
-      if (Character.isWhitespace(ch)) {
-        if (sb.length() > 0) {
-          lst.add(sb.toString());
-          sb=new StringBuilder();
-        }
-        continue;
-      }
-
-      if (ch=='\\') {
-        if (!decode) sb.append(ch);
-        if (pos>=end) break;  // ERROR, or let it go?
-        ch = s.charAt(pos++);
-        if (decode) {
-          switch(ch) {
-            case 'n' : ch='\n'; break;
-            case 't' : ch='\t'; break;
-            case 'r' : ch='\r'; break;
-            case 'b' : ch='\b'; break;
-            case 'f' : ch='\f'; break;
-          }
-        }
-      }
-
-      sb.append(ch);
-    }
-
-    if (sb.length() > 0) {
-      lst.add(sb.toString());
-    }
-
-    return lst;
-  }
-
-  public static List<String> toLower(List<String> strings) {
-    ArrayList<String> ret = new ArrayList<String>(strings.size());
-    for (String str : strings) {
-      ret.add(str.toLowerCase());
-    }
-    return ret;
-  }
-
-
-
-  /** Return if a string starts with '1', 't', or 'T'
-   *  and return false otherwise.
-   */
-  public static boolean parseBoolean(String s) {
-    char ch = s.length()>0 ? s.charAt(0) : 0;
-    return (ch=='1' || ch=='t' || ch=='T');
-  }
-
-  /**
-   * URLEncodes a value, replacing only enough chars so that
-   * the URL may be unambiguously pasted back into a browser.
-   * <p>
-   * Characters with a numeric value less than 32 are encoded.
-   * &amp;,=,%,+,space are encoded.
-   * <p>
-   */
-  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {
-    for (int i=0; i<val.length(); i++) {
-      char ch = val.charAt(i);
-      if (ch < 32) {
-        dest.append('%');
-        // Hmmm, if we used StringBuilder rather than Appendable, it
-        // could add an integer more efficiently.
-        dest.append(Integer.toString(ch));
-      } else {
-        switch (ch) {
-          case ' ': dest.append('+'); break;
-          case '&': dest.append("%26"); break;
-          case '%': dest.append("%25"); break;
-          case '=': dest.append("%3D"); break;
-          case '+': dest.append("%2B"); break;
-          default : dest.append(ch); break;
-        }
-      }
-    }
-  }
-
-}
diff --git a/src/java/org/apache/solr/util/UpdateParams.java b/src/java/org/apache/solr/util/UpdateParams.java
new file mode 100644
index 0000000..5ade505
--- /dev/null
+++ b/src/java/org/apache/solr/util/UpdateParams.java
@@ -0,0 +1,27 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.util;
+
+/**
+ * This class is scheduled for deletion.  Please update your code to the moved package.
+ */
+@Deprecated
+public interface UpdateParams extends org.apache.solr.common.params.UpdateParams
+{
+  
+}

