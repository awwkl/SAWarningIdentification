GitDiffStart: e1c82f69fb61f8d3297a8e47bb4394ea1ba9c6c7 | Sun Apr 13 20:07:02 2008 +0000
diff --git a/src/java/org/apache/solr/analysis/WordDelimiterFilter.java b/src/java/org/apache/solr/analysis/WordDelimiterFilter.java
index af33531..c6057f3 100644
--- a/src/java/org/apache/solr/analysis/WordDelimiterFilter.java
+++ b/src/java/org/apache/solr/analysis/WordDelimiterFilter.java
@@ -244,7 +244,9 @@ final class WordDelimiterFilter extends TokenFilter {
 
     int origPosIncrement;
     while(true) {
-      Token t = input.next();
+      // t is either returned, or a new token is made from it, so it should
+      // be safe to use the next(Token) method.
+      Token t = input.next(in);
       if (t == null) return null;
 
       char [] termBuffer = t.termBuffer();
diff --git a/src/test/org/apache/solr/analysis/TestSynonymFilter.java b/src/test/org/apache/solr/analysis/TestSynonymFilter.java
index 3f1cb5d..4659f31 100644
--- a/src/test/org/apache/solr/analysis/TestSynonymFilter.java
+++ b/src/test/org/apache/solr/analysis/TestSynonymFilter.java
@@ -50,10 +50,11 @@ public class TestSynonymFilter extends BaseTokenTestCase {
 
     SynonymFilter sf = new SynonymFilter(ts, dict);
 
+    Token target = new Token();  // test with token reuse
     while(true) {
-      Token t = sf.next();
+      Token t = sf.next(target);
       if (t==null) return lst;
-      lst.add(t);
+      lst.add((Token)t.clone());
     }
   }
 

