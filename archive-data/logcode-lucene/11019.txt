GitDiffStart: e7763767272abae272fa6bf1e29af217d41c85b0 | Thu Sep 20 14:07:10 2012 +0000
diff --git a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUFoldingFilterFactory.java b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUFoldingFilterFactory.java
index 05b3cd4..5d711fb 100644
--- a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUFoldingFilterFactory.java
+++ b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUFoldingFilterFactory.java
@@ -2,7 +2,7 @@ package org.apache.lucene.analysis.icu;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.icu.ICUFoldingFilter;
-import org.apache.lucene.analysis.util.AbstractAnalysisFactory;
+import org.apache.lucene.analysis.util.AbstractAnalysisFactory; // javadocs
 import org.apache.lucene.analysis.util.MultiTermAwareComponent;
 import org.apache.lucene.analysis.util.TokenFilterFactory;
 
@@ -26,6 +26,9 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
 /** Factory for {@link ICUFoldingFilter} */
 public class ICUFoldingFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
 
+  /** Sole constructor. See {@link AbstractAnalysisFactory} for initialization lifecycle. */
+  public ICUFoldingFilterFactory() {}
+
   @Override
   public TokenStream create(TokenStream input) {
     return new ICUFoldingFilter(input);
diff --git a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory.java b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory.java
index 56186c7..ab58c8c 100644
--- a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory.java
+++ b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory.java
@@ -21,7 +21,7 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.icu.ICUNormalizer2Filter;
-import org.apache.lucene.analysis.util.AbstractAnalysisFactory;
+import org.apache.lucene.analysis.util.AbstractAnalysisFactory; // javadocs
 import org.apache.lucene.analysis.util.MultiTermAwareComponent;
 import org.apache.lucene.analysis.util.TokenFilterFactory;
 
@@ -48,6 +48,9 @@ import com.ibm.icu.text.UnicodeSet;
 public class ICUNormalizer2FilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
   private Normalizer2 normalizer;
 
+  /** Sole constructor. See {@link AbstractAnalysisFactory} for initialization lifecycle. */
+  public ICUNormalizer2FilterFactory() {}
+
   // TODO: support custom normalization
   @Override
   public void init(Map<String,String> args) {
diff --git a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilterFactory.java b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilterFactory.java
index 66b3c0a..ea8091e 100644
--- a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilterFactory.java
+++ b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUTransformFilterFactory.java
@@ -21,7 +21,7 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.icu.ICUTransformFilter;
-import org.apache.lucene.analysis.util.AbstractAnalysisFactory;
+import org.apache.lucene.analysis.util.AbstractAnalysisFactory; // javadocs
 import org.apache.lucene.analysis.util.MultiTermAwareComponent;
 import org.apache.lucene.analysis.util.TokenFilterFactory;
 
@@ -40,6 +40,9 @@ import com.ibm.icu.text.Transliterator;
 public class ICUTransformFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {
   private Transliterator transliterator;
   
+  /** Sole constructor. See {@link AbstractAnalysisFactory} for initialization lifecycle. */
+  public ICUTransformFilterFactory() {}
+  
   // TODO: add support for custom rules
   @Override
   public void init(Map<String,String> args) {
diff --git a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/DefaultICUTokenizerConfig.java b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/DefaultICUTokenizerConfig.java
index 8d65a3b..f7ac994 100644
--- a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/DefaultICUTokenizerConfig.java
+++ b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/DefaultICUTokenizerConfig.java
@@ -75,6 +75,12 @@ public class DefaultICUTokenizerConfig extends ICUTokenizerConfig {
   private static final BreakIterator myanmarBreakIterator = 
     readBreakIterator("Myanmar.brk");
   
+  /** 
+   * Creates a new config. This object is lightweight, but the first
+   * time the class is referenced, breakiterators will be initialized.
+   */
+  public DefaultICUTokenizerConfig() {}
+
   @Override
   public BreakIterator getBreakIterator(int script) {
     switch(script) {
diff --git a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerConfig.java b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerConfig.java
index 8113def..550db3c 100644
--- a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerConfig.java
+++ b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerConfig.java
@@ -25,6 +25,12 @@ import com.ibm.icu.text.BreakIterator;
  * @lucene.experimental
  */
 public abstract class ICUTokenizerConfig {
+  
+  /**
+   * Sole constructor. (For invocation by subclass 
+   * constructors, typically implicit.)
+   */
+  public ICUTokenizerConfig() {}
   /** Return a breakiterator capable of processing a given script. */
   public abstract BreakIterator getBreakIterator(int script);
   /** Return a token type value for a given script and BreakIterator
diff --git a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory.java b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory.java
index d3c39cb..7ed1ef7 100644
--- a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory.java
+++ b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory.java
@@ -21,10 +21,15 @@ import java.io.Reader;
 
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.icu.segmentation.ICUTokenizer;
+import org.apache.lucene.analysis.util.AbstractAnalysisFactory; // javadocs
 import org.apache.lucene.analysis.util.TokenizerFactory;
 
 /** Factory for {@link ICUTokenizer} */
 public class ICUTokenizerFactory extends TokenizerFactory {
+  
+  /** Sole constructor. See {@link AbstractAnalysisFactory} for initialization lifecycle. */
+  public ICUTokenizerFactory() {}
+
   // TODO: add support for custom configs
   @Override
   public Tokenizer create(Reader input) {
diff --git a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/LaoBreakIterator.java b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/LaoBreakIterator.java
index 3b91cc5..16e56a4 100644
--- a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/LaoBreakIterator.java
+++ b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/LaoBreakIterator.java
@@ -73,6 +73,10 @@ public class LaoBreakIterator extends BreakIterator {
     laoSet.freeze();
   }
   
+  /** 
+   * Creates a new iterator, performing the backtracking verification
+   * across the provided <code>rules</code>.
+   */
   public LaoBreakIterator(RuleBasedBreakIterator rules) {
     this.rules = (RuleBasedBreakIterator) rules.clone();
     this.verify = (RuleBasedBreakIterator) rules.clone();
diff --git a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/tokenattributes/ScriptAttributeImpl.java b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/tokenattributes/ScriptAttributeImpl.java
index 9c2fc8d..d6a5997 100644
--- a/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/tokenattributes/ScriptAttributeImpl.java
+++ b/lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/tokenattributes/ScriptAttributeImpl.java
@@ -30,6 +30,9 @@ import com.ibm.icu.lang.UScript;
 public class ScriptAttributeImpl extends AttributeImpl implements ScriptAttribute, Cloneable {
   private int code = UScript.COMMON;
   
+  /** Initializes this attribute with <code>UScript.COMMON</code> */
+  public ScriptAttributeImpl() {}
+  
   public int getCode() {
     return code;
   }
diff --git a/lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory.java b/lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory.java
index 4e3b9e4..5a0307c 100644
--- a/lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory.java
+++ b/lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory.java
@@ -25,6 +25,7 @@ import morfologik.stemming.PolishStemmer.DICTIONARY;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.morfologik.MorfologikFilter;
+import org.apache.lucene.analysis.util.AbstractAnalysisFactory; // javadocs
 import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
@@ -51,6 +52,9 @@ public class MorfologikFilterFactory extends TokenFilterFactory {
   /** Schema attribute. */
   public static final String DICTIONARY_SCHEMA_ATTRIBUTE = "dictionary";
   
+  /** Sole constructor. See {@link AbstractAnalysisFactory} for initialization lifecycle. */
+  public MorfologikFilterFactory() {}
+
   /**
    * {@inheritDoc}
    */
diff --git a/lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorphosyntacticTagsAttributeImpl.java b/lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorphosyntacticTagsAttributeImpl.java
index 8e3a8c4..4ed0c6e 100644
--- a/lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorphosyntacticTagsAttributeImpl.java
+++ b/lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorphosyntacticTagsAttributeImpl.java
@@ -29,6 +29,9 @@ import org.apache.lucene.util.AttributeImpl;
 public class MorphosyntacticTagsAttributeImpl extends AttributeImpl 
   implements MorphosyntacticTagsAttribute, Cloneable {
   
+  /** Initializes this attribute with no tags */
+  public MorphosyntacticTagsAttributeImpl() {}
+  
   /**
    * A list of potential tag variants for the current token.
    */
diff --git a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilterFactory.java b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilterFactory.java
index 6502def..1433397 100644
--- a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilterFactory.java
+++ b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilterFactory.java
@@ -27,6 +27,7 @@ import org.apache.commons.codec.language.bm.PhoneticEngine;
 import org.apache.commons.codec.language.bm.RuleType;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.phonetic.BeiderMorseFilter;
+import org.apache.lucene.analysis.util.AbstractAnalysisFactory; // javadocs
 import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /** 
@@ -47,6 +48,9 @@ public class BeiderMorseFilterFactory extends TokenFilterFactory {
   private PhoneticEngine engine;
   private LanguageSet languageSet;
   
+  /** Sole constructor. See {@link AbstractAnalysisFactory} for initialization lifecycle. */
+  public BeiderMorseFilterFactory() {}
+  
   public void init(Map<String,String> args) {
     super.init(args);
     
diff --git a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilter.java b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilter.java
index f755a16..ef04430 100644
--- a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilter.java
+++ b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilter.java
@@ -38,6 +38,10 @@ public final class DoubleMetaphoneFilter extends TokenFilter {
   private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
   private final PositionIncrementAttribute posAtt = addAttribute(PositionIncrementAttribute.class);
 
+  /** Creates a DoubleMetaphoneFilter with the specified maximum code length, 
+   *  and either adding encoded forms as synonyms (<code>inject=true</code>) or
+   *  replacing them.
+   */
   public DoubleMetaphoneFilter(TokenStream input, int maxCodeLength, boolean inject) {
     super(input);
     this.encoder.setMaxCodeLen(maxCodeLength);
diff --git a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterFactory.java b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterFactory.java
index df465c9..3168090 100644
--- a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterFactory.java
+++ b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterFactory.java
@@ -21,6 +21,7 @@ import java.util.Map;
 
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilter;
+import org.apache.lucene.analysis.util.AbstractAnalysisFactory; // javadocs
 import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
@@ -36,14 +37,19 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
  */
 public class DoubleMetaphoneFilterFactory extends TokenFilterFactory
 {
+  /** parameter name: true if encoded tokens should be added as synonyms */
   public static final String INJECT = "inject"; 
+  /** parameter name: restricts the length of the phonetic code */
   public static final String MAX_CODE_LENGTH = "maxCodeLength"; 
-
+  /** default maxCodeLength if not specified */
   public static final int DEFAULT_MAX_CODE_LENGTH = 4;
 
   private boolean inject = true;
   private int maxCodeLength = DEFAULT_MAX_CODE_LENGTH;
 
+  /** Sole constructor. See {@link AbstractAnalysisFactory} for initialization lifecycle. */
+  public DoubleMetaphoneFilterFactory() {}
+
   @Override
   public void init(Map<String, String> args) {
     super.init(args);
diff --git a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilter.java b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilter.java
index e444209..be2dabf 100644
--- a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilter.java
+++ b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilter.java
@@ -32,13 +32,19 @@ import java.io.IOException;
  */
 public final class PhoneticFilter extends TokenFilter 
 {
+  /** true if encoded tokens should be added as synonyms */
   protected boolean inject = true; 
+  /** phonetic encoder */
   protected Encoder encoder = null;
-  
+  /** captured state, non-null when <code>inject=true</code> and a token is buffered */
   protected State save = null;
   private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
   private final PositionIncrementAttribute posAtt = addAttribute(PositionIncrementAttribute.class);
 
+  /** Creates a PhoneticFilter with the specified encoder, and either
+   *  adding encoded forms as synonyms (<code>inject=true</code>) or
+   *  replacing them.
+   */
   public PhoneticFilter(TokenStream in, Encoder encoder, boolean inject) {
     super(in);
     this.encoder = encoder;
diff --git a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory.java b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory.java
index 2613d57..0e8a94b 100644
--- a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory.java
+++ b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory.java
@@ -27,6 +27,7 @@ import java.util.Map;
 import org.apache.commons.codec.Encoder;
 import org.apache.commons.codec.language.*;
 import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.util.AbstractAnalysisFactory; // javadocs
 import org.apache.lucene.analysis.util.ResourceLoader;
 import org.apache.lucene.analysis.util.ResourceLoaderAware;
 import org.apache.lucene.analysis.util.TokenFilterFactory;
@@ -61,8 +62,11 @@ import org.apache.lucene.analysis.util.TokenFilterFactory;
 public class PhoneticFilterFactory extends TokenFilterFactory
   implements ResourceLoaderAware
 {
+  /** parameter name: either a short name or a full class name */
   public static final String ENCODER = "encoder";
+  /** parameter name: true if encoded tokens should be added as synonyms */
   public static final String INJECT = "inject"; // boolean
+  /** parameter name: restricts the length of the phonetic code */
   public static final String MAX_CODE_LENGTH = "maxCodeLength";
   private static final String PACKAGE_CONTAINING_ENCODERS = "org.apache.commons.codec.language.";
 
@@ -83,6 +87,9 @@ public class PhoneticFilterFactory extends TokenFilterFactory
   private Class<? extends Encoder> clazz = null;
   private Method setMaxCodeLenMethod = null;
   private Integer maxCodeLength = null;
+  
+  /** Sole constructor. See {@link AbstractAnalysisFactory} for initialization lifecycle. */
+  public PhoneticFilterFactory() {}
 
   @Override
   public void inform(ResourceLoader loader) throws IOException {
diff --git a/lucene/analysis/stempel/src/java/org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory.java b/lucene/analysis/stempel/src/java/org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory.java
index 64abe3c..73fecca 100644
--- a/lucene/analysis/stempel/src/java/org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory.java
+++ b/lucene/analysis/stempel/src/java/org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory.java
@@ -21,12 +21,17 @@ import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.pl.PolishAnalyzer;
 import org.apache.lucene.analysis.stempel.StempelFilter;
 import org.apache.lucene.analysis.stempel.StempelStemmer;
+import org.apache.lucene.analysis.util.AbstractAnalysisFactory; // javadocs
 import org.apache.lucene.analysis.util.TokenFilterFactory;
 
 /**
  * Factory for {@link StempelFilter} using a Polish stemming table.
  */
 public class StempelPolishStemFilterFactory extends TokenFilterFactory {  
+  
+  /** Sole constructor. See {@link AbstractAnalysisFactory} for initialization lifecycle. */
+  public StempelPolishStemFilterFactory() {}
+
   public TokenStream create(TokenStream input) {
     return new StempelFilter(input, new StempelStemmer(PolishAnalyzer.getDefaultTable()));
   }
diff --git a/lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile.java b/lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile.java
index 156ad3e..9ec3efa 100644
--- a/lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile.java
+++ b/lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile.java
@@ -74,7 +74,10 @@ public class Compile {
   static boolean backward;
   static boolean multi;
   static Trie trie;
-  
+
+  /** no instantiation */
+  private Compile() {}
+
   /**
    * Entry point to the Compile application.
    * <p>
diff --git a/lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt.java b/lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt.java
index 19a3fd3..f4bb8d7 100644
--- a/lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt.java
+++ b/lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt.java
@@ -67,6 +67,9 @@ import java.util.StringTokenizer;
  */
 public class DiffIt {
   
+  /** no instantiation */
+  private DiffIt() {}
+  
   static int get(int i, String s) {
     try {
       return Integer.parseInt(s.substring(i, i + 1));
diff --git a/lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie.java b/lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie.java
index 20ea467..b330e83 100644
--- a/lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie.java
+++ b/lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie.java
@@ -376,6 +376,7 @@ public class Trie {
     return by.optimize(this);
   }
   
+  /** writes debugging info to the printstream */
   public void printInfo(PrintStream out, CharSequence prefix) {
     out.println(prefix + "nds " + rows.size() + " cmds " + cmds.size()
         + " cells " + getCells() + " valcells " + getCellsVal() + " pntcells "
diff --git a/lucene/build.xml b/lucene/build.xml
index dc3d9b2..8aab530 100644
--- a/lucene/build.xml
+++ b/lucene/build.xml
@@ -235,18 +235,18 @@
            can prevent the modules that don't have problems
            from getting any worse -->
       <check-missing-javadocs dir="build/docs/analyzers-common" level="class"/>
-      <check-missing-javadocs dir="build/docs/analyzers-icu" level="class"/>
+      <check-missing-javadocs dir="build/docs/analyzers-icu" level="method"/>
       <check-missing-javadocs dir="build/docs/analyzers-kuromoji" level="class"/>
-      <check-missing-javadocs dir="build/docs/analyzers-morfologik" level="class"/>
-      <check-missing-javadocs dir="build/docs/analyzers-phonetic" level="class"/>
+      <check-missing-javadocs dir="build/docs/analyzers-morfologik" level="method"/>
+      <check-missing-javadocs dir="build/docs/analyzers-phonetic" level="method"/>
       <check-missing-javadocs dir="build/docs/analyzers-smartcn" level="class"/>
-      <check-missing-javadocs dir="build/docs/analyzers-stempel" level="class"/>
+      <check-missing-javadocs dir="build/docs/analyzers-stempel" level="method"/>
       <check-missing-javadocs dir="build/docs/analyzers-uima" level="class"/>
       <check-missing-javadocs dir="build/docs/benchmark" level="class"/>
       <check-missing-javadocs dir="build/docs/classification" level="method"/>
       <check-missing-javadocs dir="build/docs/codecs" level="class"/>
       <check-missing-javadocs dir="build/docs/core" level="class"/>
-      <check-missing-javadocs dir="build/docs/demo" level="class"/>
+      <check-missing-javadocs dir="build/docs/demo" level="method"/>
       <check-missing-javadocs dir="build/docs/facet" level="class"/>
       <check-missing-javadocs dir="build/docs/grouping" level="class"/>
       <check-missing-javadocs dir="build/docs/highlighter" level="class"/>
diff --git a/lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo.java b/lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo.java
index 9f437b3..acef8a5 100644
--- a/lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo.java
+++ b/lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo.java
@@ -65,6 +65,9 @@ public class FormBasedXmlQueryDemo extends HttpServlet {
   private IndexSearcher searcher;
   private Analyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);
 
+  /** for instantiation by the servlet container */
+  public FormBasedXmlQueryDemo() {}
+
   @Override
   public void init(ServletConfig config) throws ServletException {
     super.init(config);

