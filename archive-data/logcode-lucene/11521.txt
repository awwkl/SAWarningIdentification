GitDiffStart: 0df8e43b226ae86e56b46d72a3903bbcf7a43ec7 | Fri Aug 10 16:29:44 2012 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsFormat.java b/lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsFormat.java
index 3195524..afd04ff 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsFormat.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsFormat.java
@@ -42,9 +42,7 @@ public final class BlockPostingsFormat extends PostingsFormat {
   private final int minTermBlockSize;
   private final int maxTermBlockSize;
 
-  // nocommit is this right?:
-  // NOTE: should be at least 64 because of PackedInts long-aligned encoding/decoding
-  // NOTE: must be factor of ... 64?
+  // NOTE: must be factor of 64 because of PackedInts long-aligned encoding/decoding
   public final static int BLOCK_SIZE = 128;
 
   public BlockPostingsFormat() {
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.java
index 7286c86..e570811 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.java
@@ -62,12 +62,8 @@ public final class BlockPostingsReader extends PostingsReaderBase {
 
   public static boolean DEBUG = false;
 
-  // nocommit
-  final String segment;
-
   public BlockPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {
     boolean success = false;
-    segment = segmentInfo.name;
     IndexInput docIn = null;
     IndexInput posIn = null;
     IndexInput payIn = null;
@@ -376,7 +372,7 @@ public final class BlockPostingsReader extends PostingsReaderBase {
     public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {
       this.liveDocs = liveDocs;
       if (DEBUG) {
-        System.out.println("  FPR.reset: seg=" + segment + " termState=" + termState);
+        System.out.println("  FPR.reset: termState=" + termState);
       }
       docFreq = termState.docFreq;
       docTermStartFP = termState.docStartFP;
@@ -475,7 +471,7 @@ public final class BlockPostingsReader extends PostingsReaderBase {
 
     @Override
     public int advance(int target) throws IOException {
-      // nocommit make frq block load lazy/skippable
+      // TODO: make frq block load lazy/skippable
       if (DEBUG) {
         System.out.println("  FPR.advance target=" + target);
       }
@@ -781,7 +777,7 @@ public final class BlockPostingsReader extends PostingsReaderBase {
     
     @Override
     public int advance(int target) throws IOException {
-      // nocommit make frq block load lazy/skippable
+      // TODO: make frq block load lazy/skippable
       if (DEBUG) {
         System.out.println("  FPR.advance target=" + target);
       }
@@ -878,7 +874,7 @@ public final class BlockPostingsReader extends PostingsReaderBase {
       }
     }
 
-    // nocommit in theory we could avoid loading frq block
+    // TODO: in theory we could avoid loading frq block
     // when not needed, ie, use skip data to load how far to
     // seek the pos pointe ... instead of having to load frq
     // blocks only to sum up how many positions to skip
@@ -1272,7 +1268,7 @@ public final class BlockPostingsReader extends PostingsReaderBase {
     
     @Override
     public int advance(int target) throws IOException {
-      // nocommit make frq block load lazy/skippable
+      // TODO: make frq block load lazy/skippable
       if (DEBUG) {
         System.out.println("  FPR.advance target=" + target);
       }
@@ -1375,7 +1371,7 @@ public final class BlockPostingsReader extends PostingsReaderBase {
       }
     }
 
-    // nocommit in theory we could avoid loading frq block
+    // TODO: in theory we could avoid loading frq block
     // when not needed, ie, use skip data to load how far to
     // seek the pos pointe ... instead of having to load frq
     // blocks only to sum up how many positions to skip
@@ -1393,9 +1389,6 @@ public final class BlockPostingsReader extends PostingsReaderBase {
           if (indexHasPayloads) {
             payloadByteUpto += payloadLengthBuffer[posBufferUpto];
           }
-          if (indexHasOffsets) {
-            lastStartOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];
-          }
           posBufferUpto++;
         }
         if (DEBUG) {
@@ -1420,13 +1413,8 @@ public final class BlockPostingsReader extends PostingsReaderBase {
           }
 
           if (indexHasOffsets) {
-            // Must load offset blocks merely to sum
-            // up into lastStartOffset:
-            forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);
-            forUtil.readBlock(payIn, encoded, offsetLengthBuffer);
-            for(int i=0;i<BLOCK_SIZE;i++) {
-              lastStartOffset += offsetStartDeltaBuffer[i] + offsetLengthBuffer[i];
-            }
+            forUtil.skipBlock(payIn);
+            forUtil.skipBlock(payIn);
           }
           toSkip -= BLOCK_SIZE;
         }
@@ -1437,9 +1425,6 @@ public final class BlockPostingsReader extends PostingsReaderBase {
           if (indexHasPayloads) {
             payloadByteUpto += payloadLengthBuffer[posBufferUpto];
           }
-          if (indexHasOffsets) {
-            lastStartOffset += offsetStartDeltaBuffer[posBufferUpto] + offsetLengthBuffer[posBufferUpto];
-          }
           posBufferUpto++;
         }
         if (DEBUG) {
@@ -1449,8 +1434,6 @@ public final class BlockPostingsReader extends PostingsReaderBase {
 
       position = 0;
       payloadLength = 0;
-      // nocommit why carefully sum up lastStartOffset above
-      // only to set it to 0 now?
       lastStartOffset = 0;
     }
 
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter.java b/lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter.java
index 272797f..97bcb42 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter.java
@@ -53,8 +53,6 @@ import org.apache.lucene.util.packed.PackedInts;
  */
 public final class BlockPostingsWriter extends PostingsWriterBase {
 
-  // nocommit move these constants to the PF:
-
   static final int maxSkipLevels = 10;
 
   final static String TERMS_CODEC = "BlockPostingsWriterTerms";
@@ -170,7 +168,7 @@ public final class BlockPostingsWriter extends PostingsWriterBase {
     docDeltaBuffer = new int[MAX_DATA_SIZE];
     freqBuffer = new int[MAX_DATA_SIZE];
 
-    // nocommit should we try skipping every 2/4 blocks...?
+    // TODO: should we try skipping every 2/4 blocks...?
     skipWriter = new BlockSkipWriter(maxSkipLevels,
                                      BLOCK_SIZE, 
                                      state.segmentInfo.getDocCount(),
@@ -418,7 +416,7 @@ public final class BlockPostingsWriter extends PostingsWriterBase {
       if (posBufferUpto > 0) {
         posOut.writeVInt(posBufferUpto);
         
-        // nocommit should we send offsets/payloads to
+        // TODO: should we send offsets/payloads to
         // .pay...?  seems wasteful (have to store extra
         // vLong for low (< BLOCK_SIZE) DF terms = vast vast
         // majority)
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil.java b/lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil.java
index ebac7be..1454100 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil.java
@@ -214,7 +214,6 @@ final class ForUtil {
     in.seek(in.getFilePointer() + encodedSize);
   }
 
-  // nocommit: we must have a util function for this, hmm?
   private static boolean isAllEqual(final int[] data) {
     final long v = data[0];
     for (int i = 1; i < BLOCK_SIZE; ++i) {
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestPostingsFormat.java b/lucene/core/src/test/org/apache/lucene/index/TestPostingsFormat.java
index c98345c..dceaf3f 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestPostingsFormat.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestPostingsFormat.java
@@ -908,8 +908,8 @@ public class TestPostingsFormat extends LuceneTestCase {
 
     // NOTE: you can also test "weaker" index options than
     // you indexed with:
-    //testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
-    testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.THREADS)), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
+    testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
+    //testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.THREADS)), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
 
     fieldsProducer.close();
     dir.close();

