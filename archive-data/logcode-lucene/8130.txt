GitDiffStart: cb0d85ba034781b0148fad1f16029b4d1f1ef56d | Sat Aug 17 15:54:55 2013 +0000
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.java b/lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.java
index c02cfe6..1f1b8a8 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.java
@@ -24,6 +24,7 @@ import java.util.Iterator;
 import java.util.TreeMap;
 import java.util.Arrays;
 
+import org.apache.lucene.codecs.BlockTermState;
 import org.apache.lucene.codecs.CodecUtil;
 import org.apache.lucene.codecs.FieldsProducer;
 import org.apache.lucene.codecs.TempPostingsReaderBase;
@@ -293,7 +294,7 @@ public class TempBlockTermsReader extends FieldsProducer {
     // Iterates through terms in this field
     private final class SegmentTermsEnum extends TermsEnum {
       private final IndexInput in;
-      private final TempTermState state;
+      private final BlockTermState state;
       private final boolean doOrd;
       private final FieldAndTerm fieldTerm = new FieldAndTerm();
       private final TermsIndexReaderBase.FieldIndexEnum indexEnum;
@@ -696,8 +697,8 @@ public class TempBlockTermsReader extends FieldsProducer {
       @Override
       public void seekExact(BytesRef target, TermState otherState) {
         //System.out.println("BTR.seekExact termState target=" + target.utf8ToString() + " " + target + " this=" + this);
-        assert otherState != null && otherState instanceof TempTermState;
-        assert !doOrd || ((TempTermState) otherState).ord < numTerms;
+        assert otherState != null && otherState instanceof BlockTermState;
+        assert !doOrd || ((BlockTermState) otherState).ord < numTerms;
         state.copyFrom(otherState);
         seekPending = true;
         indexIsCurrent = false;
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/BlockTermState.java b/lucene/core/src/java/org/apache/lucene/codecs/BlockTermState.java
index 04ec3b7..fc9c145 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/BlockTermState.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/BlockTermState.java
@@ -34,6 +34,7 @@ public class BlockTermState extends OrdTermState {
   /** the term's ord in the current block */
   public int termBlockOrd;
   /** fp into the terms dict primary file (_X.tim) that holds this term */
+  // nocommit: update BTR to nuke this
   public long blockFilePointer;
 
   /** Sole constructor. (For invocation by subclass 
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/TempPostingsReaderBase.java b/lucene/core/src/java/org/apache/lucene/codecs/TempPostingsReaderBase.java
index d503318..8495a72 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/TempPostingsReaderBase.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/TempPostingsReaderBase.java
@@ -26,7 +26,6 @@ import org.apache.lucene.index.FieldInfo;
 import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.store.DataInput;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.codecs.temp.TempTermState;
 
 /** The core terms dictionaries (BlockTermsReader,
  *  BlockTreeTermsReader) interact with a single instance
@@ -54,18 +53,18 @@ public abstract class TempPostingsReaderBase implements Closeable {
   public abstract void init(IndexInput termsIn) throws IOException;
 
   /** Return a newly created empty TermState */
-  public abstract TempTermState newTermState() throws IOException;
+  public abstract BlockTermState newTermState() throws IOException;
 
   /** Actually decode metadata for next term */
-  public abstract void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, TempTermState state) throws IOException;
+  public abstract void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState state) throws IOException;
 
   /** Must fully consume state, since after this call that
    *  TermState may be reused. */
-  public abstract DocsEnum docs(FieldInfo fieldInfo, TempTermState state, Bits skipDocs, DocsEnum reuse, int flags) throws IOException;
+  public abstract DocsEnum docs(FieldInfo fieldInfo, BlockTermState state, Bits skipDocs, DocsEnum reuse, int flags) throws IOException;
 
   /** Must fully consume state, since after this call that
    *  TermState may be reused. */
-  public abstract DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, TempTermState state, Bits skipDocs, DocsAndPositionsEnum reuse,
+  public abstract DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState state, Bits skipDocs, DocsAndPositionsEnum reuse,
                                                         int flags) throws IOException;
 
   @Override
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.java
index 9c49d26..0b0eb94 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.java
@@ -57,6 +57,7 @@ import org.apache.lucene.util.fst.FST;
 import org.apache.lucene.util.fst.Outputs;
 import org.apache.lucene.util.fst.Util;
 import org.apache.lucene.codecs.FieldsProducer;
+import org.apache.lucene.codecs.BlockTermState;
 import org.apache.lucene.codecs.TempPostingsReaderBase;
 import org.apache.lucene.codecs.CodecUtil;
 import org.apache.lucene.codecs.PostingsBaseFormat;  // javadoc
@@ -619,7 +620,7 @@ public class TempBlockTreeTermsReader extends FieldsProducer {
 
         FST.Arc<BytesRef> arc;
 
-        final TempTermState termState;
+        final BlockTermState termState;
   
         // metadata buffer, holding monotonical values
         public long[] longs;
@@ -2230,7 +2231,7 @@ public class TempBlockTreeTermsReader extends FieldsProducer {
         // }
         assert clearEOF();
         if (target.compareTo(term) != 0 || !termExists) {
-          assert otherState != null && otherState instanceof TempTermState;
+          assert otherState != null && otherState instanceof BlockTermState;
           currentFrame = staticFrame;
           currentFrame.state.copyFrom(otherState);
           term.copyBytes(target);
@@ -2318,7 +2319,7 @@ public class TempBlockTreeTermsReader extends FieldsProducer {
         // metaData
         int metaDataUpto;
 
-        final TempTermState state;
+        final BlockTermState state;
 
         // metadata buffer, holding monotonical values
         public long[] longs;
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.java
index 1e97ea9..47859eb 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.java
@@ -56,6 +56,7 @@ import org.apache.lucene.util.fst.FST;
 import org.apache.lucene.util.fst.Outputs;
 import org.apache.lucene.util.fst.PositiveIntOutputs;
 import org.apache.lucene.util.fst.Util;
+import org.apache.lucene.codecs.BlockTermState;
 import org.apache.lucene.codecs.FieldsProducer;
 import org.apache.lucene.codecs.TempPostingsReaderBase;
 import org.apache.lucene.codecs.CodecUtil;
@@ -263,7 +264,7 @@ public class TempFSTOrdTermsReader extends FieldsProducer {
       long ord;
 
       /* Current term stats + decoded metadata (customized by PBF) */
-      final TempTermState state;
+      final BlockTermState state;
 
       /* Datainput to load stats & metadata */
       final ByteArrayDataInput statsReader = new ByteArrayDataInput();
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.java
index 0e57722..1e1fa9d 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.java
@@ -54,6 +54,7 @@ import org.apache.lucene.util.fst.BytesRefFSTEnum.InputOutput;
 import org.apache.lucene.util.fst.FST;
 import org.apache.lucene.util.fst.Outputs;
 import org.apache.lucene.util.fst.Util;
+import org.apache.lucene.codecs.BlockTermState;
 import org.apache.lucene.codecs.FieldsProducer;
 import org.apache.lucene.codecs.TempPostingsReaderBase;
 import org.apache.lucene.codecs.CodecUtil;
@@ -225,7 +226,7 @@ public class TempFSTTermsReader extends FieldsProducer {
       BytesRef term;
 
       /* Current term stats + decoded metadata (customized by PBF) */
-      final TempTermState state;
+      final BlockTermState state;
 
       /* Current term stats + undecoded metadata (long[] & byte[]) */
       TempTermOutputs.TempMetaData meta;
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.java
index 18bcf1e..900ee38 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.java
@@ -24,6 +24,7 @@ import static org.apache.lucene.codecs.lucene41.ForUtil.MAX_ENCODED_SIZE;
 import java.io.IOException;
 import java.util.Arrays;
 
+import org.apache.lucene.codecs.BlockTermState;
 import org.apache.lucene.codecs.CodecUtil;
 import org.apache.lucene.codecs.TempPostingsReaderBase;
 import org.apache.lucene.index.DocsAndPositionsEnum;
@@ -144,7 +145,7 @@ public final class TempPostingsReader extends TempPostingsReaderBase {
   }
 
   // Must keep final because we do non-standard clone
-  private final static class IntBlockTermState extends TempTermState {
+  private final static class IntBlockTermState extends BlockTermState {
     long docStartFP;
     long posStartFP;
     long payStartFP;
@@ -190,7 +191,7 @@ public final class TempPostingsReader extends TempPostingsReaderBase {
   }
 
   @Override
-  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, TempTermState _termState)
+  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState)
     throws IOException {
     final IntBlockTermState termState = (IntBlockTermState) _termState;
     final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;
@@ -226,7 +227,7 @@ public final class TempPostingsReader extends TempPostingsReaderBase {
   }
     
   @Override
-  public DocsEnum docs(FieldInfo fieldInfo, TempTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {
+  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {
     BlockDocsEnum docsEnum;
     if (reuse instanceof BlockDocsEnum) {
       docsEnum = (BlockDocsEnum) reuse;
@@ -242,7 +243,7 @@ public final class TempPostingsReader extends TempPostingsReaderBase {
   // TODO: specialize to liveDocs vs not
   
   @Override
-  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, TempTermState termState, Bits liveDocs,
+  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,
                                                DocsAndPositionsEnum reuse, int flags)
     throws IOException {
 
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermState.java b/lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermState.java
deleted file mode 100644
index 7bed837..0000000
--- a/lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermState.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package org.apache.lucene.codecs.temp;
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.util.Arrays;
-
-import org.apache.lucene.index.DocsEnum; // javadocs
-import org.apache.lucene.codecs.TempPostingsReaderBase; // javadocs
-import org.apache.lucene.index.OrdTermState;
-import org.apache.lucene.index.TermState;
-import org.apache.lucene.store.ByteArrayDataInput;
-
-/**
- * Holds all state required for {@link TempPostingsReaderBase}
- * to produce a {@link DocsEnum} without re-seeking the
- * terms dict.
- */
-public class TempTermState extends OrdTermState {
-  /** how many docs have this term */
-  public int docFreq;
-  /** total number of occurrences of this term */
-  public long totalTermFreq;
-
-  /** the term's ord in the current block */
-  public int termBlockOrd;
-  /** fp into the terms dict primary file (_X.tim) that holds this term */
-  public long blockFilePointer;
-
-  /** Sole constructor. (For invocation by subclass 
-   *  constructors, typically implicit.) */
-  protected TempTermState() {
-  }
-
-  @Override
-  public void copyFrom(TermState _other) {
-    assert _other instanceof TempTermState : "can not copy from " + _other.getClass().getName();
-    TempTermState other = (TempTermState) _other;
-    super.copyFrom(_other);
-    docFreq = other.docFreq;
-    totalTermFreq = other.totalTermFreq;
-    termBlockOrd = other.termBlockOrd;
-    blockFilePointer = other.blockFilePointer;
-  }
-
-  @Override
-  public String toString() {
-    return "docFreq=" + docFreq + " totalTermFreq=" + totalTermFreq + " termBlockOrd=" + termBlockOrd + " blockFP=" + blockFilePointer;
-  }
-}

