GitDiffStart: cf18c45b8e528363c5102731cd53e4e8b209e610 | Tue Oct 4 19:12:20 2016 +0200
diff --git a/lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldDocValuesFormat.java b/lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldDocValuesFormat.java
index 5b985a4..d3ededf 100644
--- a/lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldDocValuesFormat.java
+++ b/lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldDocValuesFormat.java
@@ -204,28 +204,28 @@ public class TestPerFieldDocValuesFormat extends BaseDocValuesFormatTestCase {
       final DocValuesConsumer consumer = delegate.fieldsConsumer(state);
       return new DocValuesConsumer() {
         @Override
-        public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {
+        public void addNumericField(FieldInfo field, DocValuesProducer values) throws IOException {
           consumer.addNumericField(field, values);
         }
 
         @Override
-        public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {
+        public void addBinaryField(FieldInfo field, DocValuesProducer values) throws IOException {
           consumer.addBinaryField(field, values);
         }
 
         @Override
-        public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {
-          consumer.addSortedField(field, values, docToOrd);
+        public void addSortedField(FieldInfo field, DocValuesProducer values) throws IOException {
+          consumer.addSortedField(field, values);
         }
 
         @Override
-        public void addSortedNumericField(FieldInfo field, Iterable<Number> docToValueCount, Iterable<Number> values) throws IOException {
-          consumer.addSortedNumericField(field, docToValueCount, values);
+        public void addSortedNumericField(FieldInfo field, DocValuesProducer values) throws IOException {
+          consumer.addSortedNumericField(field, values);
         }
 
         @Override
-        public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {
-          consumer.addSortedSetField(field, values, docToOrdCount, ords);
+        public void addSortedSetField(FieldInfo field, DocValuesProducer values) throws IOException {
+          consumer.addSortedSetField(field, values);
         }
 
         @Override
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser.java
index 2d8db0d..3ee9c6c 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser.java
@@ -27,7 +27,6 @@ import org.apache.lucene.search.BoostQuery;
 import org.apache.lucene.search.MultiPhraseQuery;
 import org.apache.lucene.search.PhraseQuery;
 import org.apache.lucene.search.Query;
-import org.apache.lucene.search.TermQuery;
 
 /**
  * A QueryParser which constructs queries to search multiple fields.
diff --git a/lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java b/lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java
index 86ef54b..ed76ff5 100644
--- a/lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java
+++ b/lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser.java
@@ -28,7 +28,6 @@ import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.queryparser.util.QueryParserTestBase;
 import org.apache.lucene.search.BooleanClause.Occur;
 import org.apache.lucene.search.BooleanClause;
 import org.apache.lucene.search.BooleanQuery;

