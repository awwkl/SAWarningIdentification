GitDiffStart: 8f88aa64978a61125adafff544c8e5084d497fb5 | Fri Aug 31 13:55:25 2012 +0000
diff --git a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java
index af434cc..9401427 100644
--- a/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java
+++ b/lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker.java
@@ -170,7 +170,7 @@ public class DocMaker implements Closeable {
           f = new DoubleField(name, 0.0, Field.Store.NO);
           break;
         default:
-          assert false;
+          throw new AssertionError("Cannot get here");
         }
         if (reuseFields) {
           numericFields.put(name, f);
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.java
index ed699cd..fa90993 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.java
@@ -186,7 +186,7 @@ public final class Lucene40StoredFieldsWriter extends StoredFieldsWriter {
       } else if (number instanceof Double) {
         fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));
       } else {
-        assert false;
+        throw new AssertionError("Cannot get here");
       }
     }
   }
diff --git a/lucene/core/src/java/org/apache/lucene/document/Field.java b/lucene/core/src/java/org/apache/lucene/document/Field.java
index 8328e07..2a2ec60 100644
--- a/lucene/core/src/java/org/apache/lucene/document/Field.java
+++ b/lucene/core/src/java/org/apache/lucene/document/Field.java
@@ -521,7 +521,7 @@ public class Field implements IndexableField {
         nts.setDoubleValue(val.doubleValue());
         break;
       default:
-        assert false : "Should never get here";
+        throw new AssertionError("Should never get here");
       }
       return internalTokenStream;
     }
diff --git a/lucene/core/src/java/org/apache/lucene/index/DocumentsWriter.java b/lucene/core/src/java/org/apache/lucene/index/DocumentsWriter.java
index 7527e8c..d913f77 100644
--- a/lucene/core/src/java/org/apache/lucene/index/DocumentsWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/index/DocumentsWriter.java
@@ -365,7 +365,7 @@ final class DocumentsWriter {
 
       if (!perThread.isActive()) {
         ensureOpen();
-        assert false: "perThread is not active but we are still open";
+        throw new IllegalStateException("perThread is not active but we are still open");
       }
        
       final DocumentsWriterPerThread dwpt = perThread.dwpt;
diff --git a/lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.java b/lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.java
index 7ca5923..6ae2ebd 100644
--- a/lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.java
+++ b/lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.java
@@ -324,7 +324,7 @@ final class DocumentsWriterDeleteQueue {
         .newUpdater(Node.class, Node.class, "next");
 
     void apply(BufferedDeletes bufferedDeletes, int docIDUpto) {
-      assert false : "sentinel item must never be applied";
+      throw new IllegalStateException("sentinel item must never be applied");
     }
 
     boolean casNext(Node<?> cmp, Node<?> val) {
diff --git a/lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum.java b/lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum.java
index 290d510..5e05cff 100644
--- a/lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum.java
+++ b/lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum.java
@@ -401,8 +401,8 @@ public final class MultiTermsEnum extends TermsEnum {
         subDocs[upto].slice = entry.subSlice;
         upto++;
       } else {
-        // One of our subs cannot provide a docsenum:
-        assert false;
+        // should this be an error?
+        assert false : "One of our subs cannot provide a docsenum";
       }
     }
 
diff --git a/lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput.java b/lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput.java
index 812def0..9626faf 100644
--- a/lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput.java
+++ b/lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput.java
@@ -362,8 +362,7 @@ public abstract class BufferedIndexInput extends IndexInput {
     case MERGE:
       return MERGE_BUFFER_SIZE;
     default:
-      assert false : "unknown IOContext " + context.context;
-      return BUFFER_SIZE;
+      throw new AssertionError("unknown IOContext " + context.context);
     }
   }
   
diff --git a/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser.java b/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser.java
index 082db96..e22c887 100644
--- a/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser.java
+++ b/lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser.java
@@ -223,7 +223,7 @@ public class TestNumericQueryParser extends LuceneTestCase {
         field = new DoubleField(type.name(), 0.0, ft);
         break;
       default:
-        assert false;
+        fail();
         field = null;
       }
       numericFieldMap.put(type.name(), field);

