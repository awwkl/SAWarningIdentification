GitDiffStart: 2e082f2f008073ab9daee0008f24653bf9771d71 | Thu Sep 11 12:15:30 2003 +0000
diff --git a/src/java/org/apache/lucene/search/IndexSearcher.java b/src/java/org/apache/lucene/search/IndexSearcher.java
index da2f1a3..d946950 100644
--- a/src/java/org/apache/lucene/search/IndexSearcher.java
+++ b/src/java/org/apache/lucene/search/IndexSearcher.java
@@ -133,18 +133,11 @@ public class IndexSearcher extends Searcher implements Searchable {
     final HitQueue hq = new HitQueue(nDocs);
     final int[] totalHits = new int[1];
     scorer.score(new HitCollector() {
-	private float minScore = 0.0f;
 	public final void collect(int doc, float score) {
 	  if (score > 0.0f &&			  // ignore zeroed buckets
 	      (bits==null || bits.get(doc))) {	  // skip docs not in bits
 	    totalHits[0]++;
-	    if (score >= minScore) {
-	      hq.put(new ScoreDoc(doc, score));	  // update hit queue
-	      if (hq.size() > nDocs) {		  // if hit queue overfull
-		hq.pop();			  // remove lowest in hit queue
-		minScore = ((ScoreDoc)hq.top()).score; // reset minScore
-	      }
-	    }
+            hq.insert(new ScoreDoc(doc, score));
 	  }
 	}
       }, reader.maxDoc());
diff --git a/src/java/org/apache/lucene/search/MultiSearcher.java b/src/java/org/apache/lucene/search/MultiSearcher.java
index 8b8f583..43423f4 100644
--- a/src/java/org/apache/lucene/search/MultiSearcher.java
+++ b/src/java/org/apache/lucene/search/MultiSearcher.java
@@ -144,7 +144,6 @@ public class MultiSearcher extends Searcher implements Searchable {
   public TopDocs search(Query query, Filter filter, int nDocs)
       throws IOException {
     HitQueue hq = new HitQueue(nDocs);
-    float minScore = 0.0f;
     int totalHits = 0;
 
     for (int i = 0; i < searchables.length; i++) { // search each searcher
@@ -153,15 +152,9 @@ public class MultiSearcher extends Searcher implements Searchable {
       ScoreDoc[] scoreDocs = docs.scoreDocs;
       for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq
 	ScoreDoc scoreDoc = scoreDocs[j];
-	if (scoreDoc.score >= minScore) {
-	  scoreDoc.doc += starts[i];		  // convert doc
-	  hq.put(scoreDoc);			  // update hit queue
-	  if (hq.size() > nDocs) {		  // if hit queue overfull
-	    hq.pop();				  // remove lowest in hit queue
-	    minScore = ((ScoreDoc)hq.top()).score; // reset minScore
-	  }
-	} else
-	  break;				  // no more scores > minScore
+        scoreDoc.doc += starts[i];                      // convert doc
+        if(!hq.insert(scoreDoc))
+            break;                                                // no more scores > minScore
       }
     }
 
diff --git a/src/java/org/apache/lucene/util/PriorityQueue.java b/src/java/org/apache/lucene/util/PriorityQueue.java
index db733e3..30d2184 100644
--- a/src/java/org/apache/lucene/util/PriorityQueue.java
+++ b/src/java/org/apache/lucene/util/PriorityQueue.java
@@ -60,6 +60,7 @@ package org.apache.lucene.util;
 public abstract class PriorityQueue {
   private Object[] heap;
   private int size;
+  private int maxSize;
 
   /** Determines the ordering of objects in this priority queue.  Subclasses
     must define this one method. */
@@ -68,16 +69,41 @@ public abstract class PriorityQueue {
   /** Subclass constructors must call this. */
   protected final void initialize(int maxSize) {
     size = 0;
-    int heapSize = (maxSize * 2) + 1;
+    int heapSize = maxSize + 1;
     heap = new Object[heapSize];
+    this.maxSize = maxSize;
   }
 
-  /** Adds an Object to a PriorityQueue in log(size) time. */
+  /**
+   * Adds an Object to a PriorityQueue in log(size) time.
+   * If one tries to add more objects than maxSize from initialize
+   * a RuntimeException (ArrayIndexOutOfBound) is thrown.
+   */
   public final void put(Object element) {
     size++;
     heap[size] = element;
     upHeap();
   }
+  
+  /**
+   * Adds element to the PriorityQueue in log(size) time if either
+   * the PriorityQueue is not full, or !lessThan(element, top()).
+   * @param element
+   * @return true if element is added, false otherwise.
+   */
+  public boolean insert(Object element){
+    if(size < maxSize){
+        put(element);
+        return true;
+    }
+    else if(size > 0 && !lessThan(element, top())){
+        heap[1] = element;
+        adjustTop();
+        return true;
+    }
+    else
+        return false;
+   }
 
   /** Returns the least element of the PriorityQueue in constant time. */
   public final Object top() {
diff --git a/src/test/org/apache/lucene/util/TestPriorityQueue.java b/src/test/org/apache/lucene/util/TestPriorityQueue.java
index 4083671..a06b820 100644
--- a/src/test/org/apache/lucene/util/TestPriorityQueue.java
+++ b/src/test/org/apache/lucene/util/TestPriorityQueue.java
@@ -135,4 +135,16 @@ public class TestPriorityQueue
 	pq.clear();
 	assertEquals(0, pq.size());
     }
+    
+    public void testFixedSize(){
+        PriorityQueue pq = new IntegerQueue(3);
+        pq.insert(new Integer(2));
+        pq.insert(new Integer(3));
+        pq.insert(new Integer(1));
+        pq.insert(new Integer(5));
+        pq.insert(new Integer(7));
+        pq.insert(new Integer(1));
+        assertEquals(3, pq.size());
+        assertEquals(3, ((Integer) pq.top()).intValue());
+    }
 }

