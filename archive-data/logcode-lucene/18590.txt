GitDiffStart: 1c2de4a0247f69bfd9fa6ee824e91e79dd48b294 | Thu Dec 24 09:43:15 2009 +0000
diff --git a/src/test/org/apache/solr/BaseDistributedSearchTestCase.java b/src/test/org/apache/solr/BaseDistributedSearchTestCase.java
index 21cdc91..d304282 100644
--- a/src/test/org/apache/solr/BaseDistributedSearchTestCase.java
+++ b/src/test/org/apache/solr/BaseDistributedSearchTestCase.java
@@ -26,6 +26,16 @@ import java.util.*;
 public abstract class BaseDistributedSearchTestCase extends AbstractSolrTestCase {
   public static Random r = new Random(0);
 
+  protected int shardCount = 4;
+  /**
+   * Sub classes can set this flag in their constructor to true if they
+   * want to fix the number of shards to 'shardCount'
+   *
+   * The default is false which means that test will be executed with
+   * 1, 2, 3, ....shardCount number of shards repeatedly
+   */
+  protected boolean fixShardCount = false;
+
   protected JettySolrRunner controlJetty;
   protected List<SolrServer> clients = new ArrayList<SolrServer>();
   protected List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();
@@ -492,11 +502,18 @@ public abstract class BaseDistributedSearchTestCase extends AbstractSolrTestCase
   }
 
   public void testDistribSearch() throws Exception {
-    for (int nServers = 1; nServers < 4; nServers++) {
-      createServers(nServers);
+    if (fixShardCount) {
+      createServers(shardCount);
       RandVal.uniqueValues = new HashSet(); //reset random values
       doTest();
       destroyServers();
+    } else {
+      for (int nServers = 1; nServers < shardCount; nServers++) {
+        createServers(nServers);
+        RandVal.uniqueValues = new HashSet(); //reset random values
+        doTest();
+        destroyServers();
+      }
     }
   }
 

