GitDiffStart: 63f87a7bdb98907add0d6fce86ee93ee7f32094c | Mon May 14 15:07:12 2012 +0000
diff --git a/solr/contrib/dataimporthandler/CHANGES.txt b/solr/contrib/dataimporthandler/CHANGES.txt
index a78ef9f..1fac866 100644
--- a/solr/contrib/dataimporthandler/CHANGES.txt
+++ b/solr/contrib/dataimporthandler/CHANGES.txt
@@ -21,6 +21,13 @@ Other Changes
 * SOLR-3422: Refactored internal data classes. 
              All entities in data-config.xml must have a name (James Dyer)
 
+==================  3.6.1 ==================
+
+Bug Fixes
+----------------------
+* SOLR-3336: SolrEntityProcessor substitutes most variables at query time
+             (Michael Kroh, Lance Norskog, via Martijn van Groningen)
+
 ==================  3.6.0 ==================
 
 New Features
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.java
index 6e5bf9a..26e6399 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.java
@@ -110,34 +110,6 @@ public class SolrEntityProcessor extends EntityProcessorBase {
     } catch (MalformedURLException e) {
       throw new DataImportHandlerException(DataImportHandlerException.SEVERE, e);
     }
-
-    this.queryString = context.getResolvedEntityAttribute(QUERY);
-    if (this.queryString == null) {
-      throw new DataImportHandlerException(
-          DataImportHandlerException.SEVERE,
-          "SolrEntityProcessor: parameter 'query' is required"
-      );
-    }
-    
-    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);
-    if (rowsP != null) {
-      rows = Integer.parseInt(rowsP);
-    }
-    
-    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);
-    if (fqAsString != null) {
-      this.filterQueries = fqAsString.split(",");
-    }
-    
-    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);
-    if (fieldsAsString != null) {
-      this.fields = fieldsAsString.split(",");
-    }
-    this.queryType = context.getResolvedEntityAttribute(CommonParams.QT);
-    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);
-    if (timeoutAsString != null) {
-      this.timeout = Integer.parseInt(timeoutAsString);
-    }
   }
   
   @Override
@@ -176,6 +148,34 @@ public class SolrEntityProcessor extends EntityProcessorBase {
   }
   
   protected SolrDocumentList doQuery(int start) {
+    this.queryString = context.getResolvedEntityAttribute(QUERY);
+    if (this.queryString == null) {
+      throw new DataImportHandlerException(
+          DataImportHandlerException.SEVERE,
+          "SolrEntityProcessor: parameter 'query' is required"
+      );
+    }
+
+    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);
+    if (rowsP != null) {
+      rows = Integer.parseInt(rowsP);
+    }
+
+    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);
+    if (fqAsString != null) {
+      this.filterQueries = fqAsString.split(",");
+    }
+
+    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);
+    if (fieldsAsString != null) {
+      this.fields = fieldsAsString.split(",");
+    }
+    this.queryType = context.getResolvedEntityAttribute(CommonParams.QT);
+    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);
+    if (timeoutAsString != null) {
+      this.timeout = Integer.parseInt(timeoutAsString);
+    }
+
     SolrQuery solrQuery = new SolrQuery(queryString);
     solrQuery.setRows(rows);
     solrQuery.setStart(start);

