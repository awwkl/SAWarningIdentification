GitDiffStart: c122d5bf3f575864e725dc455d1d05dac6b344f4 | Fri Aug 6 20:50:29 2004 +0000
diff --git a/src/java/org/apache/lucene/index/MultiReader.java b/src/java/org/apache/lucene/index/MultiReader.java
index 1398fc1..ffa4388 100644
--- a/src/java/org/apache/lucene/index/MultiReader.java
+++ b/src/java/org/apache/lucene/index/MultiReader.java
@@ -52,13 +52,12 @@ public class MultiReader extends IndexReader {
   }
 
   /** Construct reading the named set of readers. */
-  MultiReader(Directory directory, SegmentInfos sis, boolean closeDirectory, IndexReader[] subReaders)
-    throws IOException {
+  MultiReader(Directory directory, SegmentInfos sis, boolean closeDirectory, IndexReader[] subReaders) {
     super(directory, sis, closeDirectory);
     initialize(subReaders);
   }
 
-  private void initialize(IndexReader[] subReaders) throws IOException{
+  private void initialize(IndexReader[] subReaders) {
     this.subReaders = subReaders;
     starts = new int[subReaders.length + 1];    // build starts array
     for (int i = 0; i < subReaders.length; i++) {
diff --git a/src/java/org/apache/lucene/index/MultipleTermPositions.java b/src/java/org/apache/lucene/index/MultipleTermPositions.java
index e4c52d0..1cf29b2 100644
--- a/src/java/org/apache/lucene/index/MultipleTermPositions.java
+++ b/src/java/org/apache/lucene/index/MultipleTermPositions.java
@@ -178,11 +178,9 @@ public class MultipleTermPositions
      * Describe <code>nextPosition</code> method here.
      *
      * @return an <code>int</code> value
-     * @exception IOException if an error occurs
      * @see TermPositions#nextPosition()
      */
     public final int nextPosition()
-	throws IOException
     {
 	return _posList.next();
     }
diff --git a/src/java/org/apache/lucene/index/SegmentReader.java b/src/java/org/apache/lucene/index/SegmentReader.java
index 38bc92e..cae871c 100644
--- a/src/java/org/apache/lucene/index/SegmentReader.java
+++ b/src/java/org/apache/lucene/index/SegmentReader.java
@@ -188,7 +188,7 @@ final class SegmentReader extends IndexReader {
     return false;
   }
 
-  protected final void doDelete(int docNum) throws IOException {
+  protected final void doDelete(int docNum) {
     if (deletedDocs == null)
       deletedDocs = new BitVector(maxDoc());
     deletedDocsDirty = true;
@@ -196,7 +196,7 @@ final class SegmentReader extends IndexReader {
     deletedDocs.set(docNum);
   }
 
-  protected final void doUndeleteAll() throws IOException {
+  protected final void doUndeleteAll() {
       deletedDocs = null;
       deletedDocsDirty = false;
       undeleteAll = true;
@@ -222,7 +222,7 @@ final class SegmentReader extends IndexReader {
     return files;
   }
 
-  public final TermEnum terms() throws IOException {
+  public final TermEnum terms() {
     return tis.terms();
   }
 
@@ -271,7 +271,7 @@ final class SegmentReader extends IndexReader {
   /**
    * @see IndexReader#getFieldNames()
    */
-  public Collection getFieldNames() throws IOException {
+  public Collection getFieldNames() {
     // maintain a unique set of field names
     Set fieldSet = new HashSet();
     for (int i = 0; i < fieldInfos.size(); i++) {
@@ -284,7 +284,7 @@ final class SegmentReader extends IndexReader {
   /**
    * @see IndexReader#getFieldNames(boolean)
    */
-  public Collection getFieldNames(boolean indexed) throws IOException {
+  public Collection getFieldNames(boolean indexed) {
     // maintain a unique set of field names
     Set fieldSet = new HashSet();
     for (int i = 0; i < fieldInfos.size(); i++) {
@@ -386,8 +386,7 @@ final class SegmentReader extends IndexReader {
    *  the specified field of this document, if the field had storeTermVector
    *  flag set.  If the flag was not set, the method returns null.
    */
-  public TermFreqVector getTermFreqVector(int docNumber, String field)
-          throws IOException {
+  public TermFreqVector getTermFreqVector(int docNumber, String field) {
     // Check if this field is invalid or has no stored term vector
     FieldInfo fi = fieldInfos.fieldInfo(field);
     if (fi == null || !fi.storeTermVector) return null;
@@ -402,8 +401,7 @@ final class SegmentReader extends IndexReader {
    *  in a given vectorized field.
    *  If no such fields existed, the method returns null.
    */
-  public TermFreqVector[] getTermFreqVectors(int docNumber)
-          throws IOException {
+  public TermFreqVector[] getTermFreqVectors(int docNumber) {
     if (termVectorsReader == null)
       return null;
 
diff --git a/src/java/org/apache/lucene/index/SegmentTermDocs.java b/src/java/org/apache/lucene/index/SegmentTermDocs.java
index a66213c..6261b76 100644
--- a/src/java/org/apache/lucene/index/SegmentTermDocs.java
+++ b/src/java/org/apache/lucene/index/SegmentTermDocs.java
@@ -39,8 +39,7 @@ class SegmentTermDocs implements TermDocs {
   private long skipPointer;
   private boolean haveSkipped;
 
-  SegmentTermDocs(SegmentReader parent)
-          throws IOException {
+  SegmentTermDocs(SegmentReader parent) {
     this.parent = parent;
     this.freqStream = (InputStream) parent.freqStream.clone();
     this.deletedDocs = parent.deletedDocs;
diff --git a/src/java/org/apache/lucene/index/TermInfosReader.java b/src/java/org/apache/lucene/index/TermInfosReader.java
index 3f7fc2e..4ad12a8 100644
--- a/src/java/org/apache/lucene/index/TermInfosReader.java
+++ b/src/java/org/apache/lucene/index/TermInfosReader.java
@@ -94,7 +94,7 @@ final class TermInfosReader {
   }
 
   /** Returns the offset of the greatest index entry which is less than or equal to term.*/
-  private final int getIndexOffset(Term term) throws IOException {
+  private final int getIndexOffset(Term term) {
     int lo = 0;					  // binary search indexTerms[]
     int hi = indexTerms.length - 1;
 

