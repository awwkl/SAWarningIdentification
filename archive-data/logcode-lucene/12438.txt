GitDiffStart: 74d52d11107f38d9269e114dc63b1c6a8e9f66ae | Fri May 18 17:52:34 2012 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/index/FieldInfo.java b/lucene/core/src/java/org/apache/lucene/index/FieldInfo.java
index 4b63807..5c7e780 100644
--- a/lucene/core/src/java/org/apache/lucene/index/FieldInfo.java
+++ b/lucene/core/src/java/org/apache/lucene/index/FieldInfo.java
@@ -79,18 +79,33 @@ public final class FieldInfo {
     } else { // for non-indexed fields, leave defaults
       this.storeTermVector = false;
       this.storePayloads = false;
-      // nocommit these trip ... which is spooky... means
-      // the FI we are cloning was in a bad state...
-      //assert !storeTermVector;
-      //assert !storePayloads;
-      //assert !omitNorms;
-      //assert normsType == null;
       this.omitNorms = false;
       this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;
       this.normType = null;
     }
+    assert checkConsistency();
     assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;
   }
+
+  private boolean checkConsistency() {
+    // nocommit more checks here
+    if (!indexed) {
+      assert !storeTermVector;
+      assert !storePayloads;
+      assert !omitNorms;
+      assert normType == null;
+      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;
+    } else {
+      assert omitNorms || normsType != null;
+      assert indexOptions != null;
+    }
+
+    // Cannot store payloads unless positions are indexed:
+    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !this.storePayloads;
+
+    return true;
+  }
+
   
   @Override
   public FieldInfo clone() {
@@ -124,10 +139,12 @@ public final class FieldInfo {
       }
     }
     assert this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !this.storePayloads;
+    assert checkConsistency();
   }
 
   void setDocValuesType(DocValues.Type type) {
     docValueType = type;
+    assert checkConsistency();
   }
   
   /** @return IndexOptions for the field */
@@ -158,16 +175,19 @@ public final class FieldInfo {
 
   void setStoreTermVectors() {
     storeTermVector = true;
+    assert checkConsistency();
   }
   
   void setStorePayloads() {
     if (indexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {
       storePayloads = true;
     }
+    assert checkConsistency();
   }
 
   void setNormValueType(Type type) {
     normType = type;
+    assert checkConsistency();
   }
   
   /**
@@ -204,5 +224,4 @@ public final class FieldInfo {
   public boolean hasVectors() {
     return storeTermVector;
   }
-  
 }

