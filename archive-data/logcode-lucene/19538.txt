GitDiffStart: 533831e5845a6ade28689dba75bb8f197c6342ea | Wed Aug 26 16:39:32 2009 +0000
diff --git a/docs/demo2.html b/docs/demo2.html
index f5cb126..dbbef38 100644
--- a/docs/demo2.html
+++ b/docs/demo2.html
@@ -302,27 +302,27 @@ Bring it up in <span class="codefrag">vi</span> or your editor of choice and let
 <h2 class="boxed">IndexFiles</h2>
 <div class="section">
 <p>
-As we discussed in the previous walk-through, the <span class="codefrag">IndexFiles</span> class creates a Lucene
+As we discussed in the previous walk-through, the <a href="api/demo/org/apache/lucene/demo/IndexFiles.html">IndexFiles</a> class creates a Lucene
 Index. Let's take a look at how it does this.
 </p>
 <p>
-The first substantial thing the <span class="codefrag">main</span> function does is instantiate <span class="codefrag">IndexWriter</span>.  It passes the string
-"<span class="codefrag">index</span>" and a new instance of a class called <span class="codefrag">StandardAnalyzer</span>.
+The first substantial thing the <span class="codefrag">main</span> function does is instantiate <a href="api/core/org/apache/lucene/index/IndexWriter.html">IndexWriter</a>.  It passes the string
+"<span class="codefrag">index</span>" and a new instance of a class called <a href="api/core/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a>. 
 The "<span class="codefrag">index</span>" string is the name of the filesystem directory where all index information
 should be stored.  Because we're not passing a full path, this will be created as a subdirectory of
 the current working directory (if it does not already exist). On some platforms, it may be created
 in other directories (such as the user's home directory).
 </p>
 <p>
-The <span class="codefrag">IndexWriter</span> is the main
+The <a href="api/core/org/apache/lucene/index/IndexWriter.html">IndexWriter</a> is the main
 class responsible for creating indices.  To use it you must instantiate it with a path that it can
 write the index into.  If this path does not exist it will first create it.  Otherwise it will
-refresh the index at that path.  You can also create an index using one of the subclasses of <span class="codefrag">Directory</span>.  In any case, you must also pass an
-instance of <span class="codefrag">org.apache.lucene.analysis.Analyzer</span>.
+refresh the index at that path.  You can also create an index using one of the subclasses of <a href="api/core/org/apache/lucene/store/Directory.html">Directory</a>.  In any case, you must also pass an
+instance of <a href="api/core/org/apache/lucene/analysis/Analyzer.html">org.apache.lucene.analysis.Analyzer</a>.
 </p>
 <p>
-The particular <span class="codefrag">Analyzer</span> we
-are using, <span class="codefrag">StandardAnalyzer</span>, is
+The particular <a href="api/core/org/apache/lucene/analysis/Analyzer.html">Analyzer</a> we
+are using, <a href="api/core/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a>, is
 little more than a standard Java Tokenizer, converting all strings to lowercase and filtering out
 stop words and characters from the index.  By stop words and characters I mean common language
 words such as articles (a, an, the, etc.) and other strings that may have less value for searching
@@ -332,42 +332,42 @@ different languages (see the <span class="codefrag">*Analyzer.java</span> source
 </p>
 <p>
 Looking further down in the file, you should see the <span class="codefrag">indexDocs()</span> code.  This recursive
-function simply crawls the directories and uses <span class="codefrag">FileDocument</span> to create <span class="codefrag">Document</span> objects.  The <span class="codefrag">Document</span> is simply a data object to
+function simply crawls the directories and uses <a href="api/demo/org/apache/lucene/demo/FileDocument.html">FileDocument</a> to create <a href="api/core/org/apache/lucene/document/Document.html">Document</a> objects.  The <a href="api/core/org/apache/lucene/document/Document.html">Document</a> is simply a data object to
 represent the content in the file as well as its creation time and location.  These instances are
-added to the <span class="codefrag">indexWriter</span>.  Take a look inside <span class="codefrag">FileDocument</span>.  It's not particularly
-complicated.  It just adds fields to the <span class="codefrag">Document</span>.
+added to the <span class="codefrag">indexWriter</span>.  Take a look inside <a href="api/demo/org/apache/lucene/demo/FileDocument.html">FileDocument</a>.  It's not particularly
+complicated.  It just adds fields to the <a href="api/core/org/apache/lucene/document/Document.html">Document</a>.
 </p>
 <p>
 As you can see there isn't much to creating an index.  The devil is in the details.  You may also
-wish to examine the other samples in this directory, particularly the <span class="codefrag">IndexHTML</span> class.  It is a bit more
+wish to examine the other samples in this directory, particularly the <a href="api/demo/org/apache/lucene/demo/IndexHTML.html">IndexHTML</a> class.  It is a bit more
 complex but builds upon this example.
 </p>
 </div>
 
 
-<a name="N100AE"></a><a name="Searching Files"></a>
+<a name="N100A0"></a><a name="Searching Files"></a>
 <h2 class="boxed">Searching Files</h2>
 <div class="section">
 <p>
-The <span class="codefrag">SearchFiles</span> class is
-quite simple.  It primarily collaborates with an <span class="codefrag">IndexSearcher</span>, <span class="codefrag">StandardAnalyzer</span>
-(which is used in the <span class="codefrag">IndexFiles</span> class as well) and a
-<span class="codefrag">QueryParser</span>.  The
+The <a href="api/demo/org/apache/lucene/demo/SearchFiles.html">SearchFiles</a> class is
+quite simple.  It primarily collaborates with an <a href="api/core/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a>, <a href="api/core/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a>
+(which is used in the <a href="api/core/org/apache/lucene/demo/IndexFiles.html">IndexFiles</a> class as well) and a
+<a href="api/core/org/apache/lucene/queryParser/QueryParser.html">QueryParser</a>.  The
 query parser is constructed with an analyzer used to interpret your query text in the same way the
 documents are interpreted: finding the end of words and removing useless words like 'a', 'an' and
-'the'.  The <span class="codefrag">Query</span> object contains
-the results from the <span class="codefrag">QueryParser</span> which is passed to
-the searcher.  Note that it's also possible to programmatically construct a rich <span class="codefrag">Query</span> object without using the query
+'the'.  The <a href="api/core/org/apache/lucene/search/Query.html">Query</a> object contains
+the results from the <a href="api/core/org/apache/lucene/queryParser/QueryParser.html">QueryParser</a> which is passed to
+the searcher.  Note that it's also possible to programmatically construct a rich <a href="api/core/org/apache/lucene/search/Query.html">Query</a> object without using the query
 parser.  The query parser just enables decoding the <a href="queryparsersyntax.html">Lucene query
-syntax</a> into the corresponding <span class="codefrag">Query</span> object. Search can be executed in 
+syntax</a> into the corresponding <a href="api/core/org/apache/lucene/search/Query.html">Query</a> object. Search can be executed in 
 two different ways: 
 <ul>
 
-<li>Streaming: A <span class="codefrag">HitCollector</span> subclass
+<li>Streaming: A <a href="api/core/org/apache/lucene/search/Collector.html">Collector</a> subclass
 simply prints out the document ID and score for each matching document.</li>
 
-<li>Paging: Using a <span class="codefrag">TopDocCollector</span> 
-the search results are printed in pages, sorted by score (i. e. relevance).</li>
+<li>Paging: Using a <a href="api/core/org/apache/lucene/search/TopScoreDocCollector.html">TopScoreDocCollector</a>
+ the search results are printed in pages, sorted by score (i. e. relevance).</li>
 
 </ul>  
 
@@ -375,7 +375,7 @@ the search results are printed in pages, sorted by score (i. e. relevance).</li>
 </div>
 
 
-<a name="N100FB"></a><a name="The Web example..."></a>
+<a name="N100E2"></a><a name="The Web example..."></a>
 <h2 class="boxed">The Web example...</h2>
 <div class="section">
 <p>
diff --git a/docs/demo2.pdf b/docs/demo2.pdf
index 006a280..7fa39bf 100644
--- a/docs/demo2.pdf
+++ b/docs/demo2.pdf
@@ -32,15 +32,15 @@ Bring it up in vi or your editor of choice and let's take a look at it.
 
 3. IndexFiles
 
-As we discussed in the previous walk-through, the IndexFiles class creates a Lucene
-Index. Let's take a look at how it does this.
+As we discussed in the previous walk-through, the IndexFiles class creates a Lucene Index.
+Let's take a look at how it does this.
 
-The first substantial thing the main function does is instantiate IndexWriter. It passes
-the string "index" and a new instance of a class called StandardAnalyzer. The
-"index" string is the name of the filesystem directory where all index information should be
-stored. Because we're not passing a full path, this will be created as a subdirectory of the
-current working directory (if it does not already exist). On some platforms, it may be created
-in other directories (such as the user's home directory).
+The first substantial thing the main function does is instantiate IndexWriter. It passes the
+string "index" and a new instance of a class called StandardAnalyzer. The "index" string
+is the name of the filesystem directory where all index information should be stored. Because
+we're not passing a full path, this will be created as a subdirectory of the current working
+directory (if it does not already exist). On some platforms, it may be created in other
+directories (such as the user's home directory).
 
 The IndexWriter is the main class responsible for creating indices. To use it you must
 instantiate it with a path that it can write the index into. If this path does not exist it will first
@@ -48,12 +48,12 @@ create it. Otherwise it will refresh the index at that path. You can also create
 one of the subclasses of Directory. In any case, you must also pass an instance of
 org.apache.lucene.analysis.Analyzer.
 
-The particular Analyzer we are using, StandardAnalyzer, is little more than a
-standard Java Tokenizer, converting all strings to lowercase and filtering out stop words and
-characters from the index. By stop words and characters I mean common language words
-such as articles (a, an, the, etc.) and other strings that may have less value for searching (e.g.
-'s) . It should be noted that there are different rules for every language, and you should use
-the proper analyzer for each. Lucene currently provides Analyzers for a number of different
+The particular Analyzer we are using, StandardAnalyzer, is little more than a standard Java
+Tokenizer, converting all strings to lowercase and filtering out stop words and characters
+from the index. By stop words and characters I mean common language words such as
+articles (a, an, the, etc.) and other strings that may have less value for searching (e.g. 's) . It
+should be noted that there are different rules for every language, and you should use the
+proper analyzer for each. Lucene currently provides Analyzers for a number of different
 languages (see the *Analyzer.java sources under
 
                                                                        Page 2
@@ -64,31 +64,29 @@ Copyright © 2006 The Apache Software Foundation. All rights reserved.
 contrib/analyzers/src/java/org/apache/lucene/analysis).
 
 Looking further down in the file, you should see the indexDocs() code. This recursive
-function simply crawls the directories and uses FileDocument to create Document
-objects. The Document is simply a data object to represent the content in the file as well as
-its creation time and location. These instances are added to the indexWriter. Take a look
-inside FileDocument. It's not particularly complicated. It just adds fields to the
-Document.
+function simply crawls the directories and uses FileDocument to create Document objects.
+The Document is simply a data object to represent the content in the file as well as its
+creation time and location. These instances are added to the indexWriter. Take a look
+inside FileDocument. It's not particularly complicated. It just adds fields to the Document.
 
 As you can see there isn't much to creating an index. The devil is in the details. You may also
-wish to examine the other samples in this directory, particularly the IndexHTML class. It is
-a bit more complex but builds upon this example.
+wish to examine the other samples in this directory, particularly the IndexHTML class. It is a
+bit more complex but builds upon this example.
 
 4. Searching Files
 
-The SearchFiles class is quite simple. It primarily collaborates with an
-IndexSearcher, StandardAnalyzer (which is used in the IndexFiles class as
-well) and a QueryParser. The query parser is constructed with an analyzer used to
-interpret your query text in the same way the documents are interpreted: finding the end of
-words and removing useless words like 'a', 'an' and 'the'. The Query object contains the
-results from the QueryParser which is passed to the searcher. Note that it's also possible
-to programmatically construct a rich Query object without using the query parser. The query
-parser just enables decoding the Lucene query syntax into the corresponding Query object.
-Search can be executed in two different ways:
-?? Streaming: A HitCollector subclass simply prints out the document ID and score for
-
-    each matching document.
-?? Paging: Using a TopDocCollector the search results are printed in pages, sorted by
+The SearchFiles class is quite simple. It primarily collaborates with an IndexSearcher,
+StandardAnalyzer (which is used in the IndexFiles class as well) and a QueryParser. The
+query parser is constructed with an analyzer used to interpret your query text in the same way
+the documents are interpreted: finding the end of words and removing useless words like 'a',
+'an' and 'the'. The Query object contains the results from the QueryParser which is passed to
+the searcher. Note that it's also possible to programmatically construct a rich Query object
+without using the query parser. The query parser just enables decoding the Lucene query
+syntax into the corresponding Query object. Search can be executed in two different ways:
+?? Streaming: A Collector subclass simply prints out the document ID and score for each
+
+    matching document.
+?? Paging: Using a TopScoreDocCollector the search results are printed in pages, sorted by
 
     score (i. e. relevance).
 
diff --git a/docs/demo4.html b/docs/demo4.html
index 00cd264..b4239ba 100644
--- a/docs/demo4.html
+++ b/docs/demo4.html
@@ -345,7 +345,7 @@ the jars included in the <span class="codefrag">WEB-INF/lib</span> directory in
 </p>
 <p>
 You'll notice that this file includes the same header and footer as <span class="codefrag">index.jsp</span>.  From
-there it constructs an <span class="codefrag">IndexSearcher</span> with the
+there it constructs an <a href="api/core/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a> with the
 <span class="codefrag">indexLocation</span> that was specified in <span class="codefrag">configuration.jsp</span>.  If there is an
 error of any kind in opening the index, it is displayed to the user and the boolean flag
 <span class="codefrag">error</span> is set to tell the rest of the sections of the jsp not to continue.
@@ -358,42 +358,42 @@ default value.  If the criteria isn't provided then a servlet error is thrown (i
 this is the result of url tampering or some form of browser malfunction).
 </p>
 <p>
-The jsp moves on to construct a <span class="codefrag">StandardAnalyzer</span> to
-analyze the search text.  This matches the analyzer used during indexing (<span class="codefrag">IndexHTML</span>), which is generally
-recommended.  This is passed to the <span class="codefrag">QueryParser</span> along with the
-criteria to construct a <span class="codefrag">Query</span>
+The jsp moves on to construct a <a href="api/core/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a> to
+analyze the search text.  This matches the analyzer used during indexing (<a href="api/demo/org/apache/lucene/demo/IndexHTML.html">IndexHTML</a>), which is generally
+recommended.  This is passed to the <a href="api/core/org/apache/lucene/queryParser/QueryParser.html">QueryParser</a> along with the
+criteria to construct a <a href="api/core/org/apache/lucene/search/Query.html">Query</a>
 object.  You'll also notice the string literal <span class="codefrag">"contents"</span> included.  This specifies
 that the search should cover the <span class="codefrag">contents</span> field and not the <span class="codefrag">title</span>,
 <span class="codefrag">url</span> or some other field in the indexed documents.  If there is any error in
-constructing a <span class="codefrag">Query</span> object an
+constructing a <a href="api/org/apache/lucene/search/Query.html">Query</a> object an
 error is displayed to the user.
 </p>
 <p>
-In the next section of the jsp the <span class="codefrag">IndexSearcher</span> is asked to search
+In the next section of the jsp the <a href="api/core/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a> is asked to search
 given the query object.  The results are returned in a collection called <span class="codefrag">hits</span>.  If the
 length property of the <span class="codefrag">hits</span> collection is 0 (meaning there were no results) then an
 error is displayed to the user and the error flag is set.
 </p>
 <p>
 Finally the jsp iterates through the <span class="codefrag">hits</span> collection, taking the current page into
-account, and displays properties of the <span class="codefrag">Document</span> objects we talked about in
+account, and displays properties of the <a href="api/core/org/apache/lucene/document/Document.html">Document</a> objects we talked about in
 the first walkthrough.  These objects contain "known" fields specific to their indexer (in this case
-<span class="codefrag">IndexHTML</span> constructs a document
+<a href="api/demo/org/apache/lucene/demo/IndexHTML.html">IndexHTML</a> constructs a document
 with "url", "title" and "contents").
 </p>
 <p>
-Please note that in a real deployment of Lucene, it's best to instantiate <span class="codefrag">IndexSearcher</span> and <span class="codefrag">QueryParser</span> once, and then
+Please note that in a real deployment of Lucene, it's best to instantiate <a href="api/core/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a> and <a href="api/core/org/apache/lucene/queryParser/QueryParser.html">QueryParser</a> once, and then
 share them across search requests, instead of re-instantiating per search request.
 </p>
 </div>
 
 
-<a name="N100CE"></a><a name="More sources (developers)"></a>
+<a name="N100C3"></a><a name="More sources (developers)"></a>
 <h2 class="boxed">More sources (developers)</h2>
 <div class="section">
 <p>
 There are additional sources used by the web app that were not specifically covered by either
-walkthrough.  For example the HTML parser, the <span class="codefrag">IndexHTML</span> class and <span class="codefrag">HTMLDocument</span> class.  These are very
+walkthrough.  For example the HTML parser, the <a href="api/demo/org/apache/lucene/demo/IndexHTML.html">IndexHTML</a> class and <a href="api/demo/org/apache/lucene/demo/HTMLDocument.html">HTMLDocument</a> class.  These are very
 similar to the classes covered in the first example, with properties specific to parsing and
 indexing HTML.  This is beyond our scope; however, by now you should feel like you're "getting
 started" with Lucene.
@@ -401,7 +401,7 @@ started" with Lucene.
 </div>
 
 
-<a name="N100E1"></a><a name="Where to go from here? (everyone!)"></a>
+<a name="N100D4"></a><a name="Where to go from here? (everyone!)"></a>
 <h2 class="boxed">Where to go from here? (everyone!)</h2>
 <div class="section">
 <p>
@@ -423,7 +423,7 @@ Users' or Developers' <a href="http://lucene.apache.org/java/docs/mailinglists.h
 </div>
 
 
-<a name="N100F1"></a><a name="When to contact the Author"></a>
+<a name="N100E4"></a><a name="When to contact the Author"></a>
 <h2 class="boxed">When to contact the Author</h2>
 <div class="section">
 <p>
diff --git a/docs/demo4.pdf b/docs/demo4.pdf
index ec04441..29eb997 100644
--- a/docs/demo4.pdf
+++ b/docs/demo4.pdf
@@ -75,27 +75,26 @@ valid then it and the start index are set to default values. If only the start i
 set to a default value. If the criteria isn't provided then a servlet error is thrown (it is assumed
 that this is the result of url tampering or some form of browser malfunction).
 
-The jsp moves on to construct a StandardAnalyzer to analyze the search text. This
-matches the analyzer used during indexing (IndexHTML), which is generally recommended.
-This is passed to the QueryParser along with the criteria to construct a Query object.
-You'll also notice the string literal "contents" included. This specifies that the search
-should cover the contents field and not the title, url or some other field in the
-indexed documents. If there is any error in constructing a Query object an error is displayed
-to the user.
-
-In the next section of the jsp the IndexSearcher is asked to search given the query
-object. The results are returned in a collection called hits. If the length property of the
-hits collection is 0 (meaning there were no results) then an error is displayed to the user
-and the error flag is set.
+The jsp moves on to construct a StandardAnalyzer to analyze the search text. This matches
+the analyzer used during indexing (IndexHTML), which is generally recommended. This is
+passed to the QueryParser along with the criteria to construct a Query object. You'll also
+notice the string literal "contents" included. This specifies that the search should cover
+the contents field and not the title, url or some other field in the indexed documents.
+If there is any error in constructing a Query object an error is displayed to the user.
+
+In the next section of the jsp the IndexSearcher is asked to search given the query object. The
+results are returned in a collection called hits. If the length property of the hits collection
+is 0 (meaning there were no results) then an error is displayed to the user and the error flag is
+set.
 
 Finally the jsp iterates through the hits collection, taking the current page into account, and
 displays properties of the Document objects we talked about in the first walkthrough. These
-objects contain "known" fields specific to their indexer (in this case IndexHTML constructs
-a document with "url", "title" and "contents").
+objects contain "known" fields specific to their indexer (in this case IndexHTML constructs a
+document with "url", "title" and "contents").
 
-Please note that in a real deployment of Lucene, it's best to instantiate IndexSearcher
-and QueryParser once, and then share them across search requests, instead of
-re-instantiating per search request.
+Please note that in a real deployment of Lucene, it's best to instantiate IndexSearcher and
+QueryParser once, and then share them across search requests, instead of re-instantiating per
+search request.
 
 6. More sources (developers)
 
diff --git a/src/site/src/documentation/content/xdocs/demo2.xml b/src/site/src/documentation/content/xdocs/demo2.xml
index c4634ff..7f2e780 100644
--- a/src/site/src/documentation/content/xdocs/demo2.xml
+++ b/src/site/src/documentation/content/xdocs/demo2.xml
@@ -38,16 +38,16 @@ Bring it up in <code>vi</code> or your editor of choice and let's take a look at
 <section id="IndexFiles"><title>IndexFiles</title>
 
 <p>
-As we discussed in the previous walk-through, the <code><a
-href="api/core/org/apache/lucene/demo/IndexFiles.html">IndexFiles</a></code> class creates a Lucene
+As we discussed in the previous walk-through, the <a
+href="api/demo/org/apache/lucene/demo/IndexFiles.html">IndexFiles</a> class creates a Lucene
 Index. Let's take a look at how it does this.
 </p>
 
 <p>
-The first substantial thing the <code>main</code> function does is instantiate <code><a
-href="api/core/org/apache/lucene/index/IndexWriter.html">IndexWriter</a></code>.  It passes the string
-"<code>index</code>" and a new instance of a class called <code><a
-href="api/core/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a></code>.
+The first substantial thing the <code>main</code> function does is instantiate <a
+href="api/core/org/apache/lucene/index/IndexWriter.html">IndexWriter</a>.  It passes the string
+"<code>index</code>" and a new instance of a class called <a
+href="api/core/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a>. 
 The "<code>index</code>" string is the name of the filesystem directory where all index information
 should be stored.  Because we're not passing a full path, this will be created as a subdirectory of
 the current working directory (if it does not already exist). On some platforms, it may be created
@@ -55,19 +55,19 @@ in other directories (such as the user's home directory).
 </p>
 
 <p>
-The <code><a href="api/core/org/apache/lucene/index/IndexWriter.html">IndexWriter</a></code> is the main
+The <a href="api/core/org/apache/lucene/index/IndexWriter.html">IndexWriter</a> is the main
 class responsible for creating indices.  To use it you must instantiate it with a path that it can
 write the index into.  If this path does not exist it will first create it.  Otherwise it will
-refresh the index at that path.  You can also create an index using one of the subclasses of <code><a
-href="api/core/org/apache/lucene/store/Directory.html">Directory</a></code>.  In any case, you must also pass an
-instance of <code><a
-href="api/core/org/apache/lucene/analysis/Analyzer.html">org.apache.lucene.analysis.Analyzer</a></code>.
+refresh the index at that path.  You can also create an index using one of the subclasses of <a
+href="api/core/org/apache/lucene/store/Directory.html">Directory</a>.  In any case, you must also pass an
+instance of <a
+href="api/core/org/apache/lucene/analysis/Analyzer.html">org.apache.lucene.analysis.Analyzer</a>.
 </p>
 
 <p>
-The particular <code><a href="api/core/org/apache/lucene/analysis/Analyzer.html">Analyzer</a></code> we
-are using, <code><a
-href="api/core/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a></code>, is
+The particular <a href="api/core/org/apache/lucene/analysis/Analyzer.html">Analyzer</a> we
+are using, <a
+href="api/core/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a>, is
 little more than a standard Java Tokenizer, converting all strings to lowercase and filtering out
 stop words and characters from the index.  By stop words and characters I mean common language
 words such as articles (a, an, the, etc.) and other strings that may have less value for searching
@@ -79,21 +79,21 @@ href="http://svn.apache.org/repos/asf/lucene/java/trunk/contrib/analyzers/common
 
 <p>
 Looking further down in the file, you should see the <code>indexDocs()</code> code.  This recursive
-function simply crawls the directories and uses <code><a
-href="api/core/org/apache/lucene/demo/FileDocument.html">FileDocument</a></code> to create <code><a
-href="api/core/org/apache/lucene/document/Document.html">Document</a></code> objects.  The <code><a
-href="api/core/org/apache/lucene/document/Document.html">Document</a></code> is simply a data object to
+function simply crawls the directories and uses <a
+href="api/demo/org/apache/lucene/demo/FileDocument.html">FileDocument</a> to create <a
+href="api/core/org/apache/lucene/document/Document.html">Document</a> objects.  The <a
+href="api/core/org/apache/lucene/document/Document.html">Document</a> is simply a data object to
 represent the content in the file as well as its creation time and location.  These instances are
-added to the <code>indexWriter</code>.  Take a look inside <code><a
-href="api/core/org/apache/lucene/demo/FileDocument.html">FileDocument</a></code>.  It's not particularly
-complicated.  It just adds fields to the <code><a
-href="api/core/org/apache/lucene/document/Document.html">Document</a></code>.
+added to the <code>indexWriter</code>.  Take a look inside <a
+href="api/demo/org/apache/lucene/demo/FileDocument.html">FileDocument</a>.  It's not particularly
+complicated.  It just adds fields to the <a
+href="api/core/org/apache/lucene/document/Document.html">Document</a>.
 </p>
 
 <p>
 As you can see there isn't much to creating an index.  The devil is in the details.  You may also
-wish to examine the other samples in this directory, particularly the <code><a
-href="api/core/org/apache/lucene/demo/IndexHTML.html">IndexHTML</a></code> class.  It is a bit more
+wish to examine the other samples in this directory, particularly the <a
+href="api/demo/org/apache/lucene/demo/IndexHTML.html">IndexHTML</a> class.  It is a bit more
 complex but builds upon this example.
 </p>
 
@@ -102,29 +102,29 @@ complex but builds upon this example.
 <section id="Searching Files"><title>Searching Files</title>
 
 <p>
-The <code><a href="api/core/org/apache/lucene/demo/SearchFiles.html">SearchFiles</a></code> class is
-quite simple.  It primarily collaborates with an <code><a
-href="api/core/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a></code>, <code><a
-href="api/core/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a></code>
-(which is used in the <code><a
-href="api/core/org/apache/lucene/demo/IndexFiles.html">IndexFiles</a></code> class as well) and a
-<code><a href="api/core/org/apache/lucene/queryParser/QueryParser.html">QueryParser</a></code>.  The
+The <a href="api/demo/org/apache/lucene/demo/SearchFiles.html">SearchFiles</a> class is
+quite simple.  It primarily collaborates with an <a
+href="api/core/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a>, <a
+href="api/core/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a>
+(which is used in the <a
+href="api/core/org/apache/lucene/demo/IndexFiles.html">IndexFiles</a> class as well) and a
+<a href="api/core/org/apache/lucene/queryParser/QueryParser.html">QueryParser</a>.  The
 query parser is constructed with an analyzer used to interpret your query text in the same way the
 documents are interpreted: finding the end of words and removing useless words like 'a', 'an' and
-'the'.  The <code><a href="api/core/org/apache/lucene/search/Query.html">Query</a></code> object contains
-the results from the <code><a
-href="api/core/org/apache/lucene/queryParser/QueryParser.html">QueryParser</a></code> which is passed to
-the searcher.  Note that it's also possible to programmatically construct a rich <code><a
-href="api/core/org/apache/lucene/search/Query.html">Query</a></code> object without using the query
+'the'.  The <a href="api/core/org/apache/lucene/search/Query.html">Query</a> object contains
+the results from the <a
+href="api/core/org/apache/lucene/queryParser/QueryParser.html">QueryParser</a> which is passed to
+the searcher.  Note that it's also possible to programmatically construct a rich <a
+href="api/core/org/apache/lucene/search/Query.html">Query</a> object without using the query
 parser.  The query parser just enables decoding the <a href="queryparsersyntax.html">Lucene query
-syntax</a> into the corresponding <code><a
-href="api/core/org/apache/lucene/search/Query.html">Query</a></code> object. Search can be executed in 
+syntax</a> into the corresponding <a
+href="api/core/org/apache/lucene/search/Query.html">Query</a> object. Search can be executed in 
 two different ways: 
 <ul>
-<li>Streaming: A <code><a href="api/core/org/apache/lucene/search/HitCollector.html">HitCollector</a></code> subclass
+<li>Streaming: A <a href="api/core/org/apache/lucene/search/Collector.html">Collector</a> subclass
 simply prints out the document ID and score for each matching document.</li>
-<li>Paging: Using a <code><a href="api/core/org/apache/lucene/search/TopDocCollector.html">TopDocCollector</a></code> 
-the search results are printed in pages, sorted by score (i. e. relevance).</li>
+<li>Paging: Using a <a href="api/core/org/apache/lucene/search/TopScoreDocCollector.html">TopScoreDocCollector</a>
+ the search results are printed in pages, sorted by score (i. e. relevance).</li>
 </ul>  
 </p>
 
diff --git a/src/site/src/documentation/content/xdocs/demo4.xml b/src/site/src/documentation/content/xdocs/demo4.xml
index 5ed6389..edd84de 100644
--- a/src/site/src/documentation/content/xdocs/demo4.xml
+++ b/src/site/src/documentation/content/xdocs/demo4.xml
@@ -62,8 +62,8 @@ the jars included in the <code>WEB-INF/lib</code> directory in the <code>lucenew
 </p>
 <p>
 You'll notice that this file includes the same header and footer as <code>index.jsp</code>.  From
-there it constructs an <code><a
-href="api/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a></code> with the
+there it constructs an <a
+href="api/core/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a> with the
 <code>indexLocation</code> that was specified in <code>configuration.jsp</code>.  If there is an
 error of any kind in opening the index, it is displayed to the user and the boolean flag
 <code>error</code> is set to tell the rest of the sections of the jsp not to continue.
@@ -76,38 +76,38 @@ default value.  If the criteria isn't provided then a servlet error is thrown (i
 this is the result of url tampering or some form of browser malfunction).
 </p>
 <p>
-The jsp moves on to construct a <code><a
-href="api/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a></code> to
-analyze the search text.  This matches the analyzer used during indexing (<code><a
-href="api/org/apache/lucene/demo/IndexHTML.html">IndexHTML</a></code>), which is generally
-recommended.  This is passed to the <code><a
-href="api/org/apache/lucene/queryParser/QueryParser.html">QueryParser</a></code> along with the
-criteria to construct a <code><a href="api/org/apache/lucene/search/Query.html">Query</a></code>
+The jsp moves on to construct a <a
+href="api/core/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a> to
+analyze the search text.  This matches the analyzer used during indexing (<a
+href="api/demo/org/apache/lucene/demo/IndexHTML.html">IndexHTML</a>), which is generally
+recommended.  This is passed to the <a
+href="api/core/org/apache/lucene/queryParser/QueryParser.html">QueryParser</a> along with the
+criteria to construct a <a href="api/core/org/apache/lucene/search/Query.html">Query</a>
 object.  You'll also notice the string literal <code>"contents"</code> included.  This specifies
 that the search should cover the <code>contents</code> field and not the <code>title</code>,
 <code>url</code> or some other field in the indexed documents.  If there is any error in
-constructing a <code><a href="api/org/apache/lucene/search/Query.html">Query</a></code> object an
+constructing a <a href="api/org/apache/lucene/search/Query.html">Query</a> object an
 error is displayed to the user.
 </p>
 <p>
-In the next section of the jsp the <code><a
-href="api/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a></code> is asked to search
+In the next section of the jsp the <a
+href="api/core/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a> is asked to search
 given the query object.  The results are returned in a collection called <code>hits</code>.  If the
 length property of the <code>hits</code> collection is 0 (meaning there were no results) then an
 error is displayed to the user and the error flag is set.
 </p>
 <p>
 Finally the jsp iterates through the <code>hits</code> collection, taking the current page into
-account, and displays properties of the <code><a
-href="api/org/apache/lucene/document/Document.html">Document</a></code> objects we talked about in
+account, and displays properties of the <a
+href="api/core/org/apache/lucene/document/Document.html">Document</a> objects we talked about in
 the first walkthrough.  These objects contain "known" fields specific to their indexer (in this case
-<code><a href="api/org/apache/lucene/demo/IndexHTML.html">IndexHTML</a></code> constructs a document
+<a href="api/demo/org/apache/lucene/demo/IndexHTML.html">IndexHTML</a> constructs a document
 with "url", "title" and "contents").
 </p>
 <p>
-Please note that in a real deployment of Lucene, it's best to instantiate <code><a
-href="api/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a></code> and <code><a
-href="api/org/apache/lucene/queryParser/QueryParser.html">QueryParser</a></code> once, and then
+Please note that in a real deployment of Lucene, it's best to instantiate <a
+href="api/core/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a> and <a
+href="api/core/org/apache/lucene/queryParser/QueryParser.html">QueryParser</a> once, and then
 share them across search requests, instead of re-instantiating per search request.
 </p>
 </section>
@@ -115,9 +115,9 @@ share them across search requests, instead of re-instantiating per search reques
 <section id="More sources (developers)"><title>More sources (developers)</title>
 <p>
 There are additional sources used by the web app that were not specifically covered by either
-walkthrough.  For example the HTML parser, the <code><a
-href="api/org/apache/lucene/demo/IndexHTML.html">IndexHTML</a></code> class and <code><a
-href="api/org/apache/lucene/demo/HTMLDocument.html">HTMLDocument</a></code> class.  These are very
+walkthrough.  For example the HTML parser, the <a
+href="api/demo/org/apache/lucene/demo/IndexHTML.html">IndexHTML</a> class and <a
+href="api/demo/org/apache/lucene/demo/HTMLDocument.html">HTMLDocument</a> class.  These are very
 similar to the classes covered in the first example, with properties specific to parsing and
 indexing HTML.  This is beyond our scope; however, by now you should feel like you're "getting
 started" with Lucene.

