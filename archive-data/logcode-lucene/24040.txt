GitDiffStart: dea69e33609c3cee1bd0b191e3a184f948f297c9 | Mon Nov 21 21:41:43 2005 +0000
diff --git a/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java b/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
index a41a603..8252d1e 100644
--- a/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
+++ b/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
@@ -17,8 +17,8 @@ package org.apache.lucene.analysis;
  */
 
 /**
- * A filter that replaces accented characters in the ISO Latin 1 character set by
- * their unaccented equivalent. The case will not be altered.
+ * A filter that replaces accented characters in the ISO Latin 1 character set 
+ * (ISO-8859-1) by their unaccented equivalent. The case will not be altered.
  * <p>
  * For instance, '&agrave;' will be replaced by 'a'.
  * <p>
diff --git a/src/java/org/apache/lucene/analysis/KeywordTokenizer.java b/src/java/org/apache/lucene/analysis/KeywordTokenizer.java
index ea3d409..0dea937 100644
--- a/src/java/org/apache/lucene/analysis/KeywordTokenizer.java
+++ b/src/java/org/apache/lucene/analysis/KeywordTokenizer.java
@@ -23,7 +23,8 @@ import java.io.Reader;
  * Emits the entire input as a single token.
  */
 public class KeywordTokenizer extends Tokenizer {
-  private static final int DEFAULT_BUFFER_SIZE=256;
+  
+  private static final int DEFAULT_BUFFER_SIZE = 256;
 
   private boolean done;
   private final char[] buffer;
@@ -34,8 +35,8 @@ public class KeywordTokenizer extends Tokenizer {
 
   public KeywordTokenizer(Reader input, int bufferSize) {
     super(input);
-    this.buffer=new char[bufferSize];
-    this.done=false;
+    this.buffer = new char[bufferSize];
+    this.done = false;
   }
 
   public Token next() throws IOException {
diff --git a/src/java/org/apache/lucene/analysis/LengthFilter.java b/src/java/org/apache/lucene/analysis/LengthFilter.java
index ad88d1f..4298f1a 100644
--- a/src/java/org/apache/lucene/analysis/LengthFilter.java
+++ b/src/java/org/apache/lucene/analysis/LengthFilter.java
@@ -37,7 +37,7 @@ public final class LengthFilter extends TokenFilter {
   {
     super(in);
     this.min = min;
-    this.max =max;
+    this.max = max;
   }
 
   /**
@@ -49,7 +49,7 @@ public final class LengthFilter extends TokenFilter {
     for (Token token = input.next(); token != null; token = input.next())
     {
       int len = token.termText().length();
-      if ( len >= min && len <= max) {
+      if (len >= min && len <= max) {
           return token;
       }
       // note: else we ignore it but should we index each part of it?

