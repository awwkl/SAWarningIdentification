GitDiffStart: 35285cf29597d03b3c5bd692e5f8352f32c81d4d | Sat Aug 25 22:11:56 2012 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 59627be..7818dbc 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -883,7 +883,7 @@ API Changes
 
 * LUCENE-3866: IndexReaderContext.leaves() is now the preferred way to access
   atomic sub-readers of any kind of IndexReader (for AtomicReaders it returns
-  itsself as only leaf with docBase=0).  (Uwe Schindler)
+  itself as only leaf with docBase=0).  (Uwe Schindler)
 
 New features
 
@@ -2306,7 +2306,7 @@ Changes in backwards compatibility policy
   (Mike McCandless, Shai Erera)
 
 * LUCENE-3084: MergePolicy.OneMerge.segments was changed from
-  SegmentInfos to a List<SegmentInfo>. SegmentInfos itsself was changed
+  SegmentInfos to a List<SegmentInfo>. SegmentInfos itself was changed
   to no longer extend Vector<SegmentInfo> (to update code that is using
   Vector-API, use the new asList() and asSet() methods returning unmodifiable
   collections; modifying SegmentInfos is now only possible through
diff --git a/lucene/MIGRATE.txt b/lucene/MIGRATE.txt
index 352bb71..291d586 100644
--- a/lucene/MIGRATE.txt
+++ b/lucene/MIGRATE.txt
@@ -318,9 +318,9 @@ FieldCache, use them with care!
 
 The method IndexReader#getSequentialSubReaders() was moved to CompositeReader
 (see LUCENE-2858, LUCENE-3733) and made protected. It is solely used by
-CompositeReader itsself to build its reader tree. To get all atomic leaves
+CompositeReader itself to build its reader tree. To get all atomic leaves
 of a reader, use IndexReader#leaves(), which also provides the doc base
-of each leave. Readers that are already atomic return itsself as leaf with
+of each leave. Readers that are already atomic return itself as leaf with
 doc base 0. To emulate Lucene 3.x getSequentialSubReaders(),
 use getContext().children().
 
diff --git a/lucene/core/src/java/org/apache/lucene/search/DocIdSet.java b/lucene/core/src/java/org/apache/lucene/search/DocIdSet.java
index 6345e6a..cccd1f4 100644
--- a/lucene/core/src/java/org/apache/lucene/search/DocIdSet.java
+++ b/lucene/core/src/java/org/apache/lucene/search/DocIdSet.java
@@ -72,7 +72,7 @@ public abstract class DocIdSet {
    * external disk access (as {@link Bits} interface cannot throw
    * {@link IOException}). This is generally true for bit sets
    * like {@link org.apache.lucene.util.FixedBitSet}, which return
-   * itsself if they are used as {@code DocIdSet}.
+   * itself if they are used as {@code DocIdSet}.
    */
   public Bits bits() throws IOException {
     return null;
diff --git a/lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.java b/lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.java
index 8dbb146..5e35197 100644
--- a/lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.java
@@ -289,7 +289,7 @@ public final class NumericRangeQuery<T extends Number> extends MultiTermQuery {
 
   @Override @SuppressWarnings("unchecked")
   protected TermsEnum getTermsEnum(final Terms terms, AttributeSource atts) throws IOException {
-    // very strange: java.lang.Number itsself is not Comparable, but all subclasses used here are
+    // very strange: java.lang.Number itself is not Comparable, but all subclasses used here are
     if (min != null && max != null && ((Comparable<T>) min).compareTo(max) > 0) {
       return TermsEnum.EMPTY;
     }
diff --git a/lucene/core/src/test/org/apache/lucene/util/TestNumericUtils.java b/lucene/core/src/test/org/apache/lucene/util/TestNumericUtils.java
index eda91b0..9153a1b 100644
--- a/lucene/core/src/test/org/apache/lucene/util/TestNumericUtils.java
+++ b/lucene/core/src/test/org/apache/lucene/util/TestNumericUtils.java
@@ -449,7 +449,7 @@ public class TestNumericUtils extends LuceneTestCase {
     // a inverse range should produce no sub-ranges
     assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    
 
-    // a 0-length range should reproduce the range itsself
+    // a 0-length range should reproduce the range itself
     assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(
       0x800000000000251cL,0x800000000000251cL
     ), Arrays.asList(
@@ -557,7 +557,7 @@ public class TestNumericUtils extends LuceneTestCase {
     // a inverse range should produce no sub-ranges
     assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList(), Collections.<Integer>emptyList());    
 
-    // a 0-length range should reproduce the range itsself
+    // a 0-length range should reproduce the range itself
     assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(
       0x8000251c,0x8000251c
     ), Arrays.asList(
diff --git a/lucene/site/xsl/index.xsl b/lucene/site/xsl/index.xsl
index c4ac01d..f729eca 100644
--- a/lucene/site/xsl/index.xsl
+++ b/lucene/site/xsl/index.xsl
@@ -26,7 +26,7 @@
   <!--
     NOTE: This template matches the root element of any given input XML document!
     The XSL input file is ignored completely, but XSL expects one to be given,
-    so build.xml passes itsself here. The list of module build.xmls is given via
+    so build.xml passes itself here. The list of module build.xmls is given via
     string parameter, that must be splitted at '|'.
   --> 
   <xsl:template match="/">
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 69d7e81..88a7530 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -1690,7 +1690,7 @@ Bug Fixes
 * SOLR-2625: TermVectorComponent throws NPE if TF-IDF option is used without DF
   option. (Daniel Erenrich, Simon Willnauer)
 
-* SOLR-2631: PingRequestHandler should not allow to ping itsself using "qt"
+* SOLR-2631: PingRequestHandler should not allow to ping itself using "qt"
   param to prevent infinite loop. (Edoardo Tosca, Uwe Schindler)
 
 * SOLR-2636: Fix explain functionality for negative queries. (Tom Hill via yonik)

