GitDiffStart: 1ec855c560283c73cbade584a52a7a01c3a06985 | Fri Dec 21 15:05:53 2012 +0000
diff --git a/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java b/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java
index ec29b19..64a7781 100644
--- a/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java
@@ -209,13 +209,7 @@ public class SyncSliceTest extends AbstractFullDistribZkTestBase {
     waitForRecoveriesToFinish(false);
     
     // shard should be inconsistent
-    shardFailMessage = checkShardConsistency("shard1", true, false);
-    
-    if (shardFailMessage == null) {
-      // try again
-      Thread.sleep(3000);
-      shardFailMessage = checkShardConsistency("shard1", true, false);
-    }
+    shardFailMessage = waitTillInconsistent();
     
     assertNotNull(
         "shard1 should have just been set up to be inconsistent - but it's still consistent",
@@ -242,6 +236,26 @@ public class SyncSliceTest extends AbstractFullDistribZkTestBase {
     
   }
 
+  private String waitTillInconsistent() throws Exception, InterruptedException {
+    String shardFailMessage = null;
+    
+    shardFailMessage = pollConsistency(shardFailMessage, 0);
+    shardFailMessage = pollConsistency(shardFailMessage, 3000);
+    shardFailMessage = pollConsistency(shardFailMessage, 5000);
+    
+    return shardFailMessage;
+  }
+
+  private String pollConsistency(String shardFailMessage, int sleep)
+      throws InterruptedException, Exception {
+    if (shardFailMessage == null) {
+      // try again
+      Thread.sleep(sleep);
+      shardFailMessage = checkShardConsistency("shard1", true, false);
+    }
+    return shardFailMessage;
+  }
+
   private List<String> getRandomJetty() {
     return getRandomOtherJetty(null, null);
   }

