GitDiffStart: 348e1d07e3e01ca7789bbbf929b7d1b48e9e4c57 | Wed Feb 4 22:04:02 2015 +0000
diff --git a/solr/core/src/java/org/apache/solr/core/SolrCore.java b/solr/core/src/java/org/apache/solr/core/SolrCore.java
index 0779f5c..6619231 100644
--- a/solr/core/src/java/org/apache/solr/core/SolrCore.java
+++ b/solr/core/src/java/org/apache/solr/core/SolrCore.java
@@ -162,7 +162,8 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
   public static Map<SolrCore,Exception> openHandles = Collections.synchronizedMap(new IdentityHashMap<SolrCore, Exception>());
 
   
-  public static Logger log = LoggerFactory.getLogger(SolrCore.class);
+  public static final Logger log = LoggerFactory.getLogger(SolrCore.class);
+  public static final Logger requestLog = LoggerFactory.getLogger(SolrCore.class.getName() + ".Request");
 
   private String name;
   private String logid; // used to show what name is set
@@ -1998,9 +1999,9 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
 
     preDecorateResponse(req, rsp);
 
-    if (log.isDebugEnabled() && rsp.getToLog().size() > 0) {
+    if (requestLog.isDebugEnabled() && rsp.getToLog().size() > 0) {
       // log request at debug in case something goes wrong and we aren't able to log later
-      log.debug(rsp.getToLogAsString(logid));
+      requestLog.debug(rsp.getToLogAsString(logid));
     }
 
     // TODO: this doesn't seem to be working correctly and causes problems with the example server and distrib (for example /spell)
@@ -2012,8 +2013,8 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
     postDecorateResponse(handler, req, rsp);
 
     if (rsp.getToLog().size() > 0) {
-      if (log.isInfoEnabled()) {
-        log.info(rsp.getToLogAsString(logid));
+      if (requestLog.isInfoEnabled()) {
+        requestLog.info(rsp.getToLogAsString(logid));
       }
 
       if (log.isWarnEnabled()) {
diff --git a/solr/core/src/test/org/apache/solr/handler/RequestLoggingTest.java b/solr/core/src/test/org/apache/solr/handler/RequestLoggingTest.java
index 1abca50..2f5e0fe 100644
--- a/solr/core/src/test/org/apache/solr/handler/RequestLoggingTest.java
+++ b/solr/core/src/test/org/apache/solr/handler/RequestLoggingTest.java
@@ -28,53 +28,56 @@ import org.apache.log4j.SimpleLayout;
 import org.apache.log4j.WriterAppender;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.core.SolrCore;
-import org.junit.After;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
 public class RequestLoggingTest extends SolrTestCaseJ4 {
-  private static final Logger solrLogger = Logger.getLogger(SolrCore.class);
-  
-  private Level oldLevel;
-  
-  private Appender appender;
-  
   private StringWriter writer;
-  
+  private Appender appender;
+
   @BeforeClass
   public static void beforeClass() throws Exception {
     initCore("solrconfig.xml", "schema.xml");
   }
-  
+
   @Before
-  public void setupLogger() {
-    oldLevel = solrLogger.getLevel();
-    solrLogger.setLevel(Level.DEBUG);
-    
+  public void setupAppender() {
     writer = new StringWriter();
     appender = new WriterAppender(new SimpleLayout(), writer);
-    
-    solrLogger.addAppender(appender);
   }
-  
-  @After
-  public void resetLogger() {
-    solrLogger.setLevel(oldLevel);
-    solrLogger.removeAppender(appender);
+
+  @Test
+  public void testLogBeforeExecuteWithCoreLogger() {
+    Logger logger = Logger.getLogger(SolrCore.class);
+    testLogBeforeExecute(logger);
   }
-  
+
   @Test
-  public void testLogBeforeExecute() {
-    assertQ(req("q", "*:*"));
-    
-    String output = writer.toString();
-    Matcher matcher = Pattern.compile("DEBUG.*q=\\*:\\*.*").matcher(output);
-    assertTrue(matcher.find());
-    final String group = matcher.group();
-    final String msg = "Should not have post query information";
-    assertFalse(msg, group.contains("hits"));
-    assertFalse(msg, group.contains("status"));
-    assertFalse(msg, group.contains("QTime"));
+  public void testLogBeforeExecuteWithRequestLogger() {
+    Logger logger = Logger.getLogger("org.apache.solr.core.SolrCore.Request");
+    testLogBeforeExecute(logger);
+  }
+
+  public void testLogBeforeExecute(Logger logger) {
+    Level level = logger.getLevel();
+    logger.setLevel(Level.DEBUG);
+    logger.addAppender(appender);
+
+    try {
+      assertQ(req("q", "*:*"));
+
+      String output = writer.toString();
+      Matcher matcher = Pattern.compile("DEBUG.*q=\\*:\\*.*").matcher(output);
+      assertTrue(matcher.find());
+      final String group = matcher.group();
+      final String msg = "Should not have post query information";
+      assertFalse(msg, group.contains("hits"));
+      assertFalse(msg, group.contains("status"));
+      assertFalse(msg, group.contains("QTime"));
+    } finally {
+      logger.setLevel(level);
+      logger.removeAppender(appender);
+    }
   }
 }

