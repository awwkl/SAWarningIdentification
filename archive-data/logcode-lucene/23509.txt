GitDiffStart: 7456fdc365160c07587ad524535d22f253121332 | Thu Sep 21 04:07:41 2006 +0000
diff --git a/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java b/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
index c8427eb..0c99aa1 100644
--- a/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
+++ b/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java
@@ -25,9 +25,9 @@ import java.util.Collection;
 import java.util.Set;
 
 /**
- * A query that generates the union of the documents produced by its subqueries, and that scores each document as the maximum
- * score for that document produced by any subquery plus a tie breaking increment for any additional matching subqueries.
- * This is useful to search for a word in multiple fields with different boost factors (so that the fields cannot be
+ * A query that generates the union of documents produced by its subqueries, and that scores each document with the maximum
+ * score for that document as produced by any subquery, plus a tie breaking increment for any additional matching subqueries.
+ * This is useful when searching for a word in multiple fields with different boost factors (so that the fields cannot be
  * combined equivalently into a single search field).  We want the primary score to be the one associated with the highest boost,
  * not the sum of the field scores (as BooleanQuery would give).
  * If the query is "albino elephant" this ensures that "albino" matching one field and "elephant" matching

