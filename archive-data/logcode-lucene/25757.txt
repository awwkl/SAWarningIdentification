GitDiffStart: 9bd57fb82a74d5c63af4b061c83771cd9018b7fd | Thu Feb 14 00:58:46 2002 +0000
diff --git a/src/java/org/apache/lucene/analysis/standard/ParseException.java b/src/java/org/apache/lucene/analysis/standard/ParseException.java
index 856fe93..8fa1f39 100644
--- a/src/java/org/apache/lucene/analysis/standard/ParseException.java
+++ b/src/java/org/apache/lucene/analysis/standard/ParseException.java
@@ -22,7 +22,7 @@ public class ParseException extends java.io.IOException {
    * This constructor calls its super class with the empty string
    * to force the "toString" method of parent class "Throwable" to
    * print the error message in the form:
-   *     ParseException: <result of getMessage>
+   *     ParseException: &lt;result of getMessage&gt;
    */
   public ParseException(Token currentTokenVal,
                         int[][] expectedTokenSequencesVal,
diff --git a/src/java/org/apache/lucene/index/IndexReader.java b/src/java/org/apache/lucene/index/IndexReader.java
index 78d29aa..fdbd026 100644
--- a/src/java/org/apache/lucene/index/IndexReader.java
+++ b/src/java/org/apache/lucene/index/IndexReader.java
@@ -69,7 +69,7 @@ import org.apache.lucene.document.Document;
   the static method {@link #open}.
 
   <p> For efficiency, in this API documents are often referred to via
-  <it>document numbers</it>, non-negative integers which each name a unique
+  <i>document numbers</i>, non-negative integers which each name a unique
   document in the index.  These document numbers are ephemeral--they may change
   as documents are added to and deleted from an index.  Clients should thus not
   rely on a given document having the same number between sessions. */
diff --git a/src/java/org/apache/lucene/queryParser/QueryParser.jj b/src/java/org/apache/lucene/queryParser/QueryParser.jj
index 3523e19..c3ba709 100644
--- a/src/java/org/apache/lucene/queryParser/QueryParser.jj
+++ b/src/java/org/apache/lucene/queryParser/QueryParser.jj
@@ -94,7 +94,7 @@ import org.apache.lucene.search.*;
  * Thus, in BNF, the query grammar is:
  * <pre>
  *   Query  ::= ( Clause )*
- *   Clause ::= ["+", "-"] [<TERM> ":"] ( <TERM> | "(" Query ")" )
+ *   Clause ::= ["+", "-"] [&lt;TERM&gt; ":"] ( &lt;TERM&gt; | "(" Query ")" )
  * </pre>
  *
  * @author Brian Goetz
diff --git a/src/java/org/apache/lucene/search/BooleanClause.java b/src/java/org/apache/lucene/search/BooleanClause.java
index b562a5c..831314f 100644
--- a/src/java/org/apache/lucene/search/BooleanClause.java
+++ b/src/java/org/apache/lucene/search/BooleanClause.java
@@ -59,10 +59,10 @@ public final class BooleanClause {
   /** The query whose matching documents are combined by the boolean query. */
   public Query query;
   /** If true, documents documents which <i>do not</i>
-    match this sub-query will <it>not</it> match the boolean query. */
+    match this sub-query will <i>not</i> match the boolean query. */
   public boolean required = false;
   /** If true, documents documents which <i>do</i>
-    match this sub-query will <it>not</it> match the boolean query. */
+    match this sub-query will <i>not</i> match the boolean query. */
   public boolean prohibited = false;
   
   /** Constructs a BooleanClause with query <code>q</code>, required
diff --git a/src/java/org/apache/lucene/search/BooleanQuery.java b/src/java/org/apache/lucene/search/BooleanQuery.java
index 1a3d77a..084219e 100644
--- a/src/java/org/apache/lucene/search/BooleanQuery.java
+++ b/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -70,9 +70,9 @@ final public class BooleanQuery extends Query {
   /** Adds a clause to a boolean query.  Clauses may be:
     <ul>
     <li><code>required</code> which means that documents which <i>do not</i>
-    match this sub-query will <it>not</it> match the boolean query;
+    match this sub-query will <i>not</i> match the boolean query;
     <li><code>prohibited</code> which means that documents which <i>do</i>
-    match this sub-query will <it>not</it> match the boolean query; or
+    match this sub-query will <i>not</i> match the boolean query; or
     <li>neither, in which case matched documents are neither prohibited from
     nor required to match the sub-query.
     </ul>
diff --git a/src/java/org/apache/lucene/search/IndexSearcher.java b/src/java/org/apache/lucene/search/IndexSearcher.java
index 9744a70..f5a9988 100644
--- a/src/java/org/apache/lucene/search/IndexSearcher.java
+++ b/src/java/org/apache/lucene/search/IndexSearcher.java
@@ -138,7 +138,7 @@ public final class IndexSearcher extends Searcher {
    * <p>{@link HitCollector#collect(int,float)} is called for every non-zero
    * scoring document.
    *
-   * <p>Applications should only use this if they need <it>all</it> of the
+   * <p>Applications should only use this if they need <i>all</i> of the
    * matching documents.  The high-level search API ({@link
    * Searcher#search(Query)}) is usually more efficient, as it skips
    * non-high-scoring hits.
diff --git a/src/java/org/apache/lucene/search/MultiSearcher.java b/src/java/org/apache/lucene/search/MultiSearcher.java
index ec14aaa..da7fb1c 100644
--- a/src/java/org/apache/lucene/search/MultiSearcher.java
+++ b/src/java/org/apache/lucene/search/MultiSearcher.java
@@ -159,7 +159,7 @@ public final class MultiSearcher extends Searcher {
    * <p>{@link HitCollector#collect(int,float)} is called for every non-zero
    * scoring document.
    *
-   * <p>Applications should only use this if they need <it>all</it> of the
+   * <p>Applications should only use this if they need <i>all</i> of the
    * matching documents.  The high-level search API ({@link
    * Searcher#search(Query)}) is usually more efficient, as it skips
    * non-high-scoring hits.
diff --git a/src/java/org/apache/lucene/search/Searcher.java b/src/java/org/apache/lucene/search/Searcher.java
index 90d8bc7..d177d35 100644
--- a/src/java/org/apache/lucene/search/Searcher.java
+++ b/src/java/org/apache/lucene/search/Searcher.java
@@ -80,7 +80,7 @@ public abstract class Searcher {
    * <p>{@link HitCollector#collect(int,float)} is called for every non-zero
    * scoring document.
    *
-   * <p>Applications should only use this if they need <it>all</it> of the
+   * <p>Applications should only use this if they need <i>all</i> of the
    * matching documents.  The high-level search API ({@link
    * Searcher#search(Query)}) is usually more efficient, as it skips
    * non-high-scoring hits.  */
@@ -94,7 +94,7 @@ public abstract class Searcher {
    * <p>{@link HitCollector#collect(int,float)} is called for every non-zero
    * scoring document.
    *
-   * <p>Applications should only use this if they need <it>all</it> of the
+   * <p>Applications should only use this if they need <i>all</i> of the
    * matching documents.  The high-level search API ({@link
    * Searcher#search(Query)}) is usually more efficient, as it skips
    * non-high-scoring hits.
diff --git a/src/java/org/apache/lucene/store/Lock.java b/src/java/org/apache/lucene/store/Lock.java
index 46d8a03..8e14f79 100644
--- a/src/java/org/apache/lucene/store/Lock.java
+++ b/src/java/org/apache/lucene/store/Lock.java
@@ -60,7 +60,7 @@ import java.io.IOException;
  * <p>Typical use might look like:<pre>
  * new Lock.With(directory.makeLock("my.lock")) {
  *     public Object doBody() {
- *       <it>... code to execute while locked ...</it>
+ *       <i>... code to execute while locked ...</i>
  *     }
  *   }.run();
  * </pre>
@@ -93,7 +93,7 @@ public abstract class Lock {
     /** Code to execute with exclusive access. */
     protected abstract Object doBody() throws IOException;
 
-    /** Calls {@link #doBody} while <it>lock</it> is obtained.  Blocks if lock
+    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock
      * cannot be obtained immediately.  Retries to obtain lock once per second
      * until it is obtained, or until it has tried ten times. */
     public Object run() throws IOException {

