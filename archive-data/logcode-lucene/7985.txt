GitDiffStart: dab0325b9d61fbd5eba59279a78277f49590c8a8 | Fri Sep 13 10:45:37 2013 +0000
diff --git a/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java b/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java
index 7270b01..f8c636b 100644
--- a/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java
+++ b/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java
@@ -107,7 +107,6 @@ public class JavascriptCompiler {
   }
 
   static class Loader extends ClassLoader {
-
     Loader(ClassLoader parent) {
       super(parent);
     }
@@ -130,7 +129,7 @@ public class JavascriptCompiler {
   private static final String EVALUATE_METHOD_DESC = Type.getMethodDescriptor(Type.DOUBLE_TYPE, Type.INT_TYPE, FUNCTION_VALUES_ARRAY_TYPE);
   private static final String DOUBLE_VAL_METHOD_DESC = Type.getMethodDescriptor(Type.DOUBLE_TYPE, Type.INT_TYPE);
   
-  private final Loader loader;
+  private final Loader loader = new Loader(getClass().getClassLoader());
   
   private String className;
   private ClassWriter classWriter;
@@ -139,24 +138,6 @@ public class JavascriptCompiler {
   private List<String> externalsList;
   
   /**
-   * Constructs a compiler for expressions.
-   */
-  private JavascriptCompiler() {
-    loader = new Loader(getClass().getClassLoader());
-  }
-
-  /**
-   * Constructs a compiler for expressions that will be loaded using the given class loader as the parent.
-   * @param parent Class loader to load the dynamically compiled expression
-   */
-  private JavascriptCompiler(ClassLoader parent) {
-    if (parent == null) {
-      throw new NullPointerException();
-    }
-    loader = new Loader(parent);
-  }
-  
-  /**
    * Compiles the given expression.
    *
    * @param sourceText The expression to compile
@@ -168,17 +149,11 @@ public class JavascriptCompiler {
   }
   
   /**
-   * Compiles the given expression, specifying the parent classloader.
-   *
-   * @param sourceText The expression to compile
-   * @param parent Parent classloader
-   * @return A new compiled expression
-   * @throws ParseException on failure to compile
+   * Constructs a compiler for expressions.
    */
-  public static Expression compile(String sourceText, ClassLoader parent) throws ParseException {
-    return new JavascriptCompiler(parent).compileExpression(sourceText);
+  private JavascriptCompiler() {
   }
-
+  
   /**
    * Compiles the given expression.
    *

