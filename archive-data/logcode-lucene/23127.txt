GitDiffStart: b8ac9460263d27ecc89eb94cbf64129b75fe3483 | Tue Jan 16 22:02:13 2007 +0000
diff --git a/client/ruby/solrb/test/functional/server_test.rb b/client/ruby/solrb/test/functional/server_test.rb
index 1bfe4f2..99ec3d5 100644
--- a/client/ruby/solrb/test/functional/server_test.rb
+++ b/client/ruby/solrb/test/functional/server_test.rb
@@ -11,7 +11,6 @@
 # limitations under the License.
 
 require 'test/unit'
-require 'solr'
 
 class BadRequest < Solr::Request::Standard
   def response_format
@@ -23,9 +22,33 @@ class ServerTest < Test::Unit::TestCase
   include Solr
 
   def setup
-    @connection = Connection.new("http://localhost:8888/solr")
+    @connection = Connection.new("http://localhost:8888/solr", :autocommit => :on)
+    clean
   end
-  
+ 
+  def test_full_lifecycle
+    # make sure autocommit is on
+    assert @connection.autocommit
+
+    # make sure this doc isn't there to begin with
+    @connection.delete(123456)
+
+    # add it
+    @connection.add(:id => 123456, :text => 'Borges')
+
+    # look for it
+    response = @connection.query('Borges')
+    assert_equal 1, response.total_hits
+    assert_equal '123456', response.hits[0]['id']
+
+    # delete it
+    @connection.delete(123456)
+
+    # make sure it's gone
+    response = @connection.query('Borges')
+    assert_equal 0, response.total_hits
+  end 
+
   def test_bad_connection
     conn = Solr::Connection.new 'http://localhost:9999/invalid'
     assert_raise(Errno::ECONNREFUSED) do
@@ -46,13 +69,21 @@ class ServerTest < Test::Unit::TestCase
   end
   
   def test_ping
-    response = @connection.ping
-    assert_match /ping/, response.raw_response
+    assert_equal true, @connection.ping
+  end
+
+  def test_delete_with_query
+    assert_equal true, @connection.delete_by_query('[* TO *]')
+  end
+
+  def test_ping_with_bad_server
+    conn = Solr::Connection.new 'http://localhost:8888/invalid'
+    assert_equal false, conn.ping
   end
   
   def test_invalid_response_format
     request = BadRequest.new(:query => "solr")
-    assert_raise(RuntimeError) do
+    assert_raise(Solr::Exception) do
       @connection.send(request)
     end
   end
@@ -68,4 +99,28 @@ class ServerTest < Test::Unit::TestCase
     assert_match /puts/, result.raw_response
   end
 
+  def test_add_document
+    doc = {:id => 999, :text => 'hi there!'}
+    request = Solr::Request::AddDocument.new(doc)
+    response = @connection.send(request)
+    assert response.status_code == '0'
+  end
+
+  def test_update
+    @connection.update(:id => 999, :text => 'update test')
+  end
+
+  def test_no_such_field
+    doc = {:id => 999, :crap => 'foo'}
+    request = Solr::Request::AddDocument.new(doc)
+    response = @connection.send(request)
+    assert_equal false, response.ok? 
+    assert_equal "ERROR:unknown field 'crap'", response.status_message
+  end
+
+  # wipe the index clean
+  def clean
+    @connection.delete_by_query('[* TO *]')
+  end
+
 end
diff --git a/client/ruby/solrb/test/unit/add_document_test.rb b/client/ruby/solrb/test/unit/add_document_test.rb
new file mode 100644
index 0000000..85be08a
--- /dev/null
+++ b/client/ruby/solrb/test/unit/add_document_test.rb
@@ -0,0 +1,28 @@
+require 'solr_mock_base'
+
+class AddDocumentTest < SolrMockBaseTestCase
+
+  def test_add_document_response
+    conn = Solr::Connection.new('http://localhost:9999/solr')
+    set_post_return('<result status="0"></result>')
+    doc = {:id => '123', :text => 'Tlon, Uqbar, Orbis Tertius'}
+    response = conn.send(Solr::Request::AddDocument.new(doc))
+    assert_equal true, response.ok?
+  end
+
+  def test_bad_add_document_response
+    conn = Solr::Connection.new('http://localhost:9999/solr')
+    set_post_return('<result status="400"></result>')
+    doc = {:id => '123', :text => 'Tlon, Uqbar, Orbis Tertius'}
+    response = conn.send(Solr::Request::AddDocument.new(doc))
+    assert_equal false, response.ok?
+  end
+
+  def test_shorthand
+    conn = Solr::Connection.new('http://localhost:9999/solr')
+    set_post_return('<result status="0"></result>')
+    doc = {:id => '123', :text => 'Tlon, Uqbar, Orbis Tertius'}
+    assert_equal true, conn.add(:id => '123', :text => 'Tlon, Uqbar, Orbis Tetius')
+  end
+
+end
diff --git a/client/ruby/solrb/test/unit/commit_test.rb b/client/ruby/solrb/test/unit/commit_test.rb
new file mode 100644
index 0000000..bf0e715
--- /dev/null
+++ b/client/ruby/solrb/test/unit/commit_test.rb
@@ -0,0 +1,29 @@
+require 'solr_mock_base'
+
+class CommitTest < SolrMockBaseTestCase
+
+  def test_commit
+    xml = '<result status="0"></result>'
+    conn = Solr::Connection.new('http://localhost:9999/solr')
+    set_post_return(xml)
+    response = conn.send(Solr::Request::Commit.new)
+    assert_kind_of Solr::Response::Commit, response
+    assert true, response.ok?
+
+    # test shorthand
+    assert_equal true, conn.commit
+  end
+
+  def test_invalid_commit
+    xml = '<foo>bar</foo>'
+    conn = Solr::Connection.new('http://localhost:9999/solr')
+    set_post_return(xml)
+    response = conn.send(Solr::Request::Commit.new)
+    assert_kind_of Solr::Response::Commit, response
+    assert_equal false, response.ok?
+
+    # test shorthand
+    assert_equal false, conn.commit
+   end
+
+end
diff --git a/client/ruby/solrb/test/unit/connection_test.rb b/client/ruby/solrb/test/unit/connection_test.rb
index d69746a..cba4f16 100755
--- a/client/ruby/solrb/test/unit/connection_test.rb
+++ b/client/ruby/solrb/test/unit/connection_test.rb
@@ -18,7 +18,7 @@ class ConnectionTest < SolrMockBaseTestCase
   def test_mock
     connection = Connection.new("http://localhost:9999")
     set_post_return("foo")
-    assert_equal "foo", connection.post(Solr::Request::Update.new)
+    assert_equal "foo", connection.post(Solr::Request::AddDocument.new)
   end
   
   def test_bad_url
@@ -42,14 +42,14 @@ class ConnectionTest < SolrMockBaseTestCase
   def test_xml_response
     connection = Connection.new("http://localhost:9999")
     set_post_return "<bogus/>"
-    response = connection.send(Solr::Request::Update.new)
+    response = connection.send(Solr::Request::Ping.new)
     assert_equal "<bogus/>", response.raw_response
   end
-  
+
   def test_ruby_response
     connection = Connection.new("http://localhost:9999")
-    set_post_return "{}"
-    response = connection.send(Solr::Request::Select.new('foo'))
-    assert_equal "{}", response.raw_response
+    set_post_return "{'responseHeader' => {}, 'response' => {}}"
+    response = connection.send(Solr::Request::Standard.new(:query => 'foo'))
+    assert_equal({'responseHeader' => {}, 'response' => {}}, response.data)
   end
 end
diff --git a/client/ruby/solrb/test/unit/delete_test.rb b/client/ruby/solrb/test/unit/delete_test.rb
new file mode 100644
index 0000000..a716758
--- /dev/null
+++ b/client/ruby/solrb/test/unit/delete_test.rb
@@ -0,0 +1,29 @@
+require 'solr_mock_base'
+
+class DeleteTest <  SolrMockBaseTestCase
+
+  def test_delete_request
+    request = Solr::Request::Delete.new(:id => '123')
+    assert_equal "<delete><id>123</id></delete>", request.to_s
+  end
+
+  def test_delete_by_query_request
+    request = Solr::Request::Delete.new(:query => 'name:summers')
+    assert_equal "<delete><query>name:summers</query></delete>", request.to_s
+  end
+
+  def test_delete_response
+    conn = Solr::Connection.new 'http://localhost:9999/solr'
+    set_post_return('<result status="0"></result>')
+    response = conn.send(Solr::Request::Delete.new(:id => 123))
+    assert_equal true, response.ok? 
+  end
+
+  def test_bad_delete_response
+    conn = Solr::Connection.new 'http://localhost:9999/solr'
+    set_post_return('<result status="400">uhoh</result>')
+    response = conn.send(Solr::Request::Delete.new(:id => 123))
+    assert_equal false, response.ok? 
+  end
+
+end
diff --git a/client/ruby/solrb/test/unit/ping_test.rb b/client/ruby/solrb/test/unit/ping_test.rb
new file mode 100644
index 0000000..ba693b7
--- /dev/null
+++ b/client/ruby/solrb/test/unit/ping_test.rb
@@ -0,0 +1,39 @@
+require 'solr_mock_base'
+
+class PingTest < SolrMockBaseTestCase 
+
+  def test_ping_response
+    xml = 
+<<PING_RESPONSE
+
+<?xml-stylesheet type="text/xsl" href="ping.xsl"?>
+
+<solr>
+  <ping>
+
+  </ping>
+</solr>
+PING_RESPONSE
+    conn = Solr::Connection.new('http://localhost:9999')
+    set_post_return(xml)
+    response = conn.send(Solr::Request::Ping.new)
+    assert_kind_of Solr::Response::Ping, response
+    assert_equal true, response.ok? 
+
+    # test shorthand
+    assert true, conn.ping
+  end
+
+  def test_bad_ping_response
+    xml = "<foo>bar</foo>"
+    conn = Solr::Connection.new('http://localhost:9999')
+    set_post_return(xml)
+    response = conn.send(Solr::Request::Ping.new)
+    assert_kind_of Solr::Response::Ping, response
+    assert_equal false, response.ok?
+
+    # test shorthand
+    assert_equal false, conn.ping
+  end
+
+end
diff --git a/client/ruby/solrb/test/unit/response_test.rb b/client/ruby/solrb/test/unit/response_test.rb
index 87e53c7..9a4b9ac 100644
--- a/client/ruby/solrb/test/unit/response_test.rb
+++ b/client/ruby/solrb/test/unit/response_test.rb
@@ -12,19 +12,15 @@
 
 require 'test/unit'
 
-class ResponseTest < Test::Unit::TestCase
+class ResponseTest < SolrMockBaseTestCase
 
-  def test_response_error
-    assert_raise(Solr::RequestException) do
-      new Solr::Response.new("<result status=\"400\">ERROR:</result>")
-    end
-    
+  def test_response_xml_error
     begin
-      new Solr::Response.new("<result status=\"400\">ERROR:</result>")
-    rescue Solr::RequestException => exception
-      assert_equal "ERROR:", exception.message
-      assert_equal exception.message, exception.to_s
-      assert_equal "400", exception.code
+      Solr::Response::Xml.new("<broken>invalid xml&")
+      flunk("failed to get Solr::Exception as expected") 
+    rescue Exception => exception
+      assert_kind_of Solr::Exception, exception
+      assert_match 'invalid response xml', exception.to_s
     end
   end
 
diff --git a/client/ruby/solrb/test/unit/standard_request_test.rb b/client/ruby/solrb/test/unit/standard_request_test.rb
index 2ffc638..4161c5c 100755
--- a/client/ruby/solrb/test/unit/standard_request_test.rb
+++ b/client/ruby/solrb/test/unit/standard_request_test.rb
@@ -73,4 +73,5 @@ class StandardRequestTest < Test::Unit::TestCase
     request = Solr::Request::Standard.new(:query => 'query', :sort => [{:title => :descending}])
     assert_equal 'query;title desc', request.to_hash[:q]
   end
+
 end
diff --git a/client/ruby/solrb/test/unit/standard_response_test.rb b/client/ruby/solrb/test/unit/standard_response_test.rb
new file mode 100644
index 0000000..5fdd974
--- /dev/null
+++ b/client/ruby/solrb/test/unit/standard_response_test.rb
@@ -0,0 +1,116 @@
+require 'solr_mock_base'
+
+class StandardResponseTest <  SolrMockBaseTestCase
+
+  def test_basic
+    ruby_code = 
+<<RUBY_CODE
+{
+     'responseHeader'=>{
+      'status'=>0,
+      'QTime'=>1,
+      'params'=>{
+      'wt'=>'ruby',
+      'rows'=>'10',
+      'explainOther'=>'',
+      'start'=>'0',
+      'hl.fl'=>'',
+      'indent'=>'on',
+      'q'=>'guido',
+      'fl'=>'*,score',
+      'qt'=>'standard',
+      'version'=>'2.2'}},
+     'response'=>{'numFound'=>1,'start'=>0,'maxScore'=>0.67833745,'docs'=>[
+      {
+       'name'=>'guido von rossum',
+       'id'=>'123',
+       'timestamp'=>'2007-01-16T09:55:30.589Z',
+       'score'=>0.67833745}]
+     }}
+RUBY_CODE
+    conn = Solr::Connection.new 'http://localhost:9999'
+    set_post_return(ruby_code)
+    response = conn.send(Solr::Request::Standard.new(:query => 'foo'))
+    assert_equal true, response.ok?
+    assert response.query_time
+    assert_equal 1, response.total_hits
+    assert_equal 0, response.start
+    assert_equal 0.67833745, response.max_score
+    assert_equal 1, response.hits.length
+  end
+
+  def test_iteration
+    ruby_code = 
+<<RUBY_CODE
+{
+     'responseHeader'=>{
+      'status'=>0,
+      'QTime'=>0,
+      'params'=>{
+      'wt'=>'ruby',
+      'rows'=>'10',
+      'explainOther'=>'',
+      'start'=>'0',
+      'hl.fl'=>'',
+      'indent'=>'on',
+      'q'=>'guido',
+      'fl'=>'*,score',
+      'qt'=>'standard',
+      'version'=>'2.2'}},
+     'response'=>{'numFound'=>22,'start'=>0,'maxScore'=>0.53799295,'docs'=>[
+      {
+       'name'=>'guido von rossum the 0',
+       'id'=>'0',
+       'score'=>0.53799295},
+      {
+       'name'=>'guido von rossum the 1',
+       'id'=>'1',
+       'score'=>0.53799295},
+      {
+       'name'=>'guido von rossum the 2',
+       'id'=>'2',
+       'score'=>0.53799295},
+      {
+       'name'=>'guido von rossum the 3',
+       'id'=>'3',
+       'score'=>0.53799295},
+      {
+       'name'=>'guido von rossum the 4',
+       'id'=>'4',
+       'score'=>0.53799295},
+      {
+       'name'=>'guido von rossum the 5',
+       'id'=>'5',
+       'score'=>0.53799295},
+      {
+       'name'=>'guido von rossum the 6',
+       'id'=>'6',
+       'score'=>0.53799295},
+      {
+       'name'=>'guido von rossum the 7',
+       'id'=>'7',
+       'score'=>0.53799295},
+      {
+       'name'=>'guido von rossum the 8',
+       'id'=>'8',
+       'score'=>0.53799295},
+      {
+       'name'=>'guido von rossum the 9',
+       'id'=>'9',
+       'score'=>0.53799295}]
+     }}
+RUBY_CODE
+    conn = Solr::Connection.new 'http://localhost:9999'
+    set_post_return(ruby_code)
+
+    count = 0
+    conn.query('foo') do |hit|
+      assert_equal "guido von rossum the #{count}", hit['name']
+      count += 1
+    end
+
+    assert_equal 10, count
+  end
+
+end
+
diff --git a/client/ruby/solrb/test/unit/suite.rb b/client/ruby/solrb/test/unit/suite.rb
index 2e93c75..b65db85 100755
--- a/client/ruby/solrb/test/unit/suite.rb
+++ b/client/ruby/solrb/test/unit/suite.rb
@@ -1,8 +1,13 @@
 # TODO dynamically require all *_test files
 
+require 'add_document_test'
+require 'commit_test'
 require 'connection_test'
+require 'delete_test'
 require 'document_test'
 require 'field_test'
+require 'ping_test'
 require 'request_test'
 require 'response_test'
-require 'standard_request_test'
\ No newline at end of file
+require 'standard_request_test'
+require 'standard_response_test'
\ No newline at end of file

