GitDiffStart: 239279b7d8077ffad124cfc78d4ee90c35b226bb | Tue Jun 7 12:16:54 2011 +0000
diff --git a/lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper.java b/lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper.java
index f98619f..0f93567 100644
--- a/lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper.java
+++ b/lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper.java
@@ -110,7 +110,7 @@ public class MockIndexOutputWrapper extends IndexOutput {
       }
       throw new IOException(message);
     } else {
-      if (dir.randomState.nextBoolean()) {
+      if (dir.randomState.nextInt(200) == 0) {
         final int half = len/2;
         delegate.writeBytes(b, offset, half);
         Thread.yield();
diff --git a/lucene/src/test/org/apache/lucene/index/TestAddIndexes.java b/lucene/src/test/org/apache/lucene/index/TestAddIndexes.java
index b13b480..8653c9c 100755
--- a/lucene/src/test/org/apache/lucene/index/TestAddIndexes.java
+++ b/lucene/src/test/org/apache/lucene/index/TestAddIndexes.java
@@ -760,7 +760,7 @@ public class TestAddIndexes extends LuceneTestCase {
   // from multiple threads
   public void testAddIndexesWithThreads() throws Throwable {
 
-    final int NUM_ITER = 15;
+    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;
     final int NUM_COPY = 3;
     CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);
     c.writer2.setInfoStream(VERBOSE ? System.out : null);
@@ -778,8 +778,6 @@ public class TestAddIndexes extends LuceneTestCase {
 
     assertTrue("found unexpected failures: " + c.failures, c.failures.isEmpty());
 
-    _TestUtil.checkIndex(c.dir2);
-
     IndexReader reader = IndexReader.open(c.dir2, true);
     assertEquals(expectedNumDocs, reader.numDocs());
     reader.close();
@@ -914,11 +912,11 @@ public class TestAddIndexes extends LuceneTestCase {
   // LUCENE-1335: test simultaneous addIndexes & close
   public void testAddIndexesWithRollback() throws Throwable {
 
-    final int NUM_COPY = 50;
+    final int NUM_COPY = TEST_NIGHTLY ? 50 : 5;
     CommitAndAddIndexes3 c = new CommitAndAddIndexes3(NUM_COPY);
     c.launchThreads(-1);
 
-    Thread.sleep(_TestUtil.nextInt(random, 100, 500));
+    Thread.sleep(_TestUtil.nextInt(random, 10, 500));
 
     // Close w/o first stopping/joining the threads
     if (VERBOSE) {
diff --git a/lucene/src/test/org/apache/lucene/index/TestDocsAndPositions.java b/lucene/src/test/org/apache/lucene/index/TestDocsAndPositions.java
index 1a60f9a..28e0cd0 100644
--- a/lucene/src/test/org/apache/lucene/index/TestDocsAndPositions.java
+++ b/lucene/src/test/org/apache/lucene/index/TestDocsAndPositions.java
@@ -120,7 +120,7 @@ public class TestDocsAndPositions extends LuceneTestCase {
       Document doc = new Document();
       ArrayList<Integer> positions = new ArrayList<Integer>();
       StringBuilder builder = new StringBuilder();
-      int num = TEST_NIGHTLY ? 3049 : 499;
+      int num = TEST_NIGHTLY ? 3049 : 131;
       for (int j = 0; j < num; j++) {
         int nextInt = random.nextInt(max);
         builder.append(nextInt).append(" ");
@@ -193,7 +193,7 @@ public class TestDocsAndPositions extends LuceneTestCase {
     Directory dir = newDirectory();
     RandomIndexWriter writer = new RandomIndexWriter(random, dir,
         newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));
-    int numDocs = TEST_NIGHTLY ? 499 : 131;
+    int numDocs = TEST_NIGHTLY ? 499 : 49;
     int max = 15678;
     int term = random.nextInt(max);
     int[] freqInDoc = new int[numDocs];
@@ -202,7 +202,7 @@ public class TestDocsAndPositions extends LuceneTestCase {
       StringBuilder builder = new StringBuilder();
       for (int j = 0; j < 199; j++) {
         int nextInt = random.nextInt(max);
-        builder.append(nextInt).append(" ");
+        builder.append(nextInt).append(' ');
         if (nextInt == term) {
           freqInDoc[i]++;
         }
diff --git a/lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers.java b/lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers.java
index f277942..9278264 100644
--- a/lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers.java
+++ b/lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers.java
@@ -42,7 +42,7 @@ import org.apache.lucene.util._TestUtil;
 public class TestGlobalFieldNumbers extends LuceneTestCase {
 
   public void testGlobalFieldNumberFiles() throws IOException {
-    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 13); i++) {
+    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 3); i++) {
       Directory dir = newDirectory();
       {
         IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,
@@ -113,7 +113,7 @@ public class TestGlobalFieldNumbers extends LuceneTestCase {
   }
 
   public void testIndexReaderCommit() throws IOException {
-    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 13); i++) {
+    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 3); i++) {
       Directory dir = newDirectory();
       {
         IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,
@@ -156,7 +156,7 @@ public class TestGlobalFieldNumbers extends LuceneTestCase {
   }
 
   public void testGlobalFieldNumberFilesAcrossCommits() throws IOException {
-    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 13); i++) {
+    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 3); i++) {
       Directory dir = newDirectory();
       {
         IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(
@@ -207,7 +207,7 @@ public class TestGlobalFieldNumbers extends LuceneTestCase {
   }
 
   public void testGlobalFieldNumberOnOldCommit() throws IOException {
-    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 13); i++) {
+    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 3); i++) {
       Directory dir = newDirectory();
       IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(
           TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(
@@ -282,9 +282,9 @@ public class TestGlobalFieldNumbers extends LuceneTestCase {
   }
 
   public void testOptimize() throws IOException {
-    for (int i = 0; i < 2; i++) {
+    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {
       Set<String> fieldNames = new HashSet<String>();
-      final int numFields = 2 + random.nextInt(200);
+      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(200) : random.nextInt(20));
       for (int j = 0; j < numFields; j++) {
         fieldNames.add("field_" + j);
       }
@@ -306,9 +306,9 @@ public class TestGlobalFieldNumbers extends LuceneTestCase {
   }
 
   public void testAddIndexesStableFieldNumbers() throws IOException {
-    for (int i = 0; i < 2; i++) {
+    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {
       Set<String> fieldNames = new HashSet<String>();
-      final int numFields = 2 + random.nextInt(50);
+      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(50) : random.nextInt(10));
       for (int j = 0; j < numFields; j++) {
         fieldNames.add("field_" + j);
       }
diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexReaderOnDiskFull.java b/lucene/src/test/org/apache/lucene/index/TestIndexReaderOnDiskFull.java
index 845ffdd..d17457f 100644
--- a/lucene/src/test/org/apache/lucene/index/TestIndexReaderOnDiskFull.java
+++ b/lucene/src/test/org/apache/lucene/index/TestIndexReaderOnDiskFull.java
@@ -30,6 +30,7 @@ import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util._TestUtil;
 
 public class TestIndexReaderOnDiskFull extends LuceneTestCase {
   /**
@@ -74,7 +75,7 @@ public class TestIndexReaderOnDiskFull extends LuceneTestCase {
     }
 
     long diskUsage = startDir.getRecomputedActualSizeInBytes();
-    long diskFree = diskUsage+100;
+    long diskFree = diskUsage+_TestUtil.nextInt(random, 50, 200);
 
     IOException err = null;
 
@@ -219,8 +220,8 @@ public class TestIndexReaderOnDiskFull extends LuceneTestCase {
 
       dir.close();
 
-      // Try again with 10 more bytes of free space:
-      diskFree += 10;
+      // Try again with more bytes of free space:
+      diskFree += TEST_NIGHTLY ? _TestUtil.nextInt(random, 5, 20) : _TestUtil.nextInt(random, 50, 200);
     }
 
     startDir.close();
diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen.java b/lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen.java
index 3f35f99..96ba18d 100644
--- a/lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen.java
+++ b/lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen.java
@@ -50,8 +50,6 @@ import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util._TestUtil;
 
 public class TestIndexReaderReopen extends LuceneTestCase {
-    
-  private File indexDir;
   
   public void testReopen() throws Exception {
     final Directory dir1 = newDirectory();
@@ -151,22 +149,12 @@ public class TestIndexReaderReopen extends LuceneTestCase {
   // at the end of every iteration, commit the index and reopen/recreate the reader.
   // in each iteration verify the work of previous iteration. 
   // try this once with reopen once recreate, on both RAMDir and FSDir.
-  public void testCommitReopenFS () throws IOException {
-    Directory dir = newFSDirectory(indexDir);
-    doTestReopenWithCommit(random, dir, true);
-    dir.close();
-  }
-  public void testCommitRecreateFS () throws IOException {
-    Directory dir = newFSDirectory(indexDir);
-    doTestReopenWithCommit(random, dir, false);
-    dir.close();
-  }
-  public void testCommitReopenRAM () throws IOException {
+  public void testCommitReopen () throws IOException {
     Directory dir = newDirectory();
     doTestReopenWithCommit(random, dir, true);
     dir.close();
   }
-  public void testCommitRecreateRAM () throws IOException {
+  public void testCommitRecreate () throws IOException {
     Directory dir = newDirectory();
     doTestReopenWithCommit(random, dir, false);
     dir.close();
@@ -1086,13 +1074,6 @@ public class TestIndexReaderReopen extends LuceneTestCase {
     protected abstract IndexReader openReader() throws IOException;
     protected abstract void modifyIndex(int i) throws IOException;
   }
-
-
-  @Override
-  public void setUp() throws Exception {
-    super.setUp();
-    indexDir = _TestUtil.getTempDir("IndexReaderReopen");
-  }
   
   public void testCloseOrig() throws Throwable {
     Directory dir = newDirectory();
diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java b/lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
index e38f064..7bb9885 100644
--- a/lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
+++ b/lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
@@ -930,7 +930,8 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
       addDoc(w);
     w.close();
 
-    for(int i=0;i<200;i++) {
+    int iter = TEST_NIGHTLY ? 200 : 20;
+    for(int i=0;i<iter;i++) {
       if (VERBOSE) {
         System.out.println("TEST: iter " + i);
       }
diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize.java b/lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize.java
index 3dda09b..523e253 100644
--- a/lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize.java
+++ b/lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize.java
@@ -37,7 +37,7 @@ public class TestIndexWriterOptimize extends LuceneTestCase {
     MockDirectoryWrapper dir = newDirectory();
 
     final Document doc = new Document();
-    doc.add(newField("content", "aaa", Field.Store.YES, Field.Index.ANALYZED));
+    doc.add(newField("content", "aaa", Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));
     final int incrMin = TEST_NIGHTLY ? 15 : 40;
     for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {
       LogDocMergePolicy ldmp = new LogDocMergePolicy();
@@ -78,7 +78,7 @@ public class TestIndexWriterOptimize extends LuceneTestCase {
     MockDirectoryWrapper dir = newDirectory();
 
     final Document doc = new Document();
-    doc.add(newField("content", "aaa", Field.Store.YES, Field.Index.ANALYZED));
+    doc.add(newField("content", "aaa", Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));
 
     LogDocMergePolicy ldmp = new LogDocMergePolicy();
     ldmp.setMinMergeDocs(1);
@@ -183,7 +183,7 @@ public class TestIndexWriterOptimize extends LuceneTestCase {
               setMergePolicy(newLogMergePolicy(51))
       );
       Document doc = new Document();
-      doc.add(newField("field", "aaa", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));
+      doc.add(newField("field", "aaa", Store.NO, Index.NOT_ANALYZED));
       for(int i=0;i<100;i++)
         writer.addDocument(doc);
       writer.optimize(false);
diff --git a/lucene/src/test/org/apache/lucene/index/TestLazyBug.java b/lucene/src/test/org/apache/lucene/index/TestLazyBug.java
index c16d504..560c424 100755
--- a/lucene/src/test/org/apache/lucene/index/TestLazyBug.java
+++ b/lucene/src/test/org/apache/lucene/index/TestLazyBug.java
@@ -126,15 +126,15 @@ public class TestLazyBug extends LuceneTestCase {
   }
 
   public void testLazyWorks() throws Exception {
-    doTest(new int[] { TEST_NIGHTLY ? 499 : 49 });
+    doTest(new int[] { NUM_DOCS-1 });
   }
 
   public void testLazyAlsoWorks() throws Exception {
-    doTest(TEST_NIGHTLY ? new int[] { 499, 150 } : new int[] { 49, 15 });
+    doTest(new int[] { NUM_DOCS-1, NUM_DOCS/2 });
   }
 
   public void testLazyBroken() throws Exception {
-    doTest(TEST_NIGHTLY ? new int[] { 150, 499 } : new int[] { 15, 49 });
+    doTest(new int[] { NUM_DOCS/2, NUM_DOCS-1 });
   }
 
 }
diff --git a/lucene/src/test/org/apache/lucene/index/TestNorms.java b/lucene/src/test/org/apache/lucene/index/TestNorms.java
index 16c54fb..6107993 100755
--- a/lucene/src/test/org/apache/lucene/index/TestNorms.java
+++ b/lucene/src/test/org/apache/lucene/index/TestNorms.java
@@ -143,7 +143,8 @@ public class TestNorms extends LuceneTestCase {
   }
 
   private void doTestNorms(Random random, Directory dir) throws IOException {
-    for (int i=0; i<5; i++) {
+    int num = (TEST_NIGHTLY ? 5 : 1) * RANDOM_MULTIPLIER;
+    for (int i=0; i<num; i++) {
       addDocs(random, dir,12,true);
       verifyIndex(dir);
       modifyNormsForF1(dir);
diff --git a/lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport.java b/lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport.java
index 680bb87..7ff3ade 100644
--- a/lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport.java
+++ b/lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport.java
@@ -274,7 +274,8 @@ public class TestPerFieldCodecSupport extends LuceneTestCase {
     Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,
         Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };
     final int docsPerRound = 97;
-    for (int i = 0; i < 5; i++) {
+    int numRounds = (TEST_NIGHTLY ? 5 : 1 ) * RANDOM_MULTIPLIER;
+    for (int i = 0; i < numRounds; i++) {
       CodecProvider provider = new CodecProvider();
       Codec[] codecs = new Codec[] { new StandardCodec(),
           new SimpleTextCodec(), new MockSepCodec(),
@@ -308,7 +309,6 @@ public class TestPerFieldCodecSupport extends LuceneTestCase {
       writer.commit();
       assertEquals((i + 1) * docsPerRound, writer.maxDoc());
       writer.close();
-      _TestUtil.checkIndex(dir, provider);
     }
     dir.close();
   }
diff --git a/lucene/src/test/org/apache/lucene/index/TestThreadedOptimize.java b/lucene/src/test/org/apache/lucene/index/TestThreadedOptimize.java
index fb2e99a..2f11957 100644
--- a/lucene/src/test/org/apache/lucene/index/TestThreadedOptimize.java
+++ b/lucene/src/test/org/apache/lucene/index/TestThreadedOptimize.java
@@ -47,14 +47,13 @@ public class TestThreadedOptimize extends LuceneTestCase {
     failed = true;
   }
 
-  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {
+  public void runTest(Random random, Directory directory) throws Exception {
 
     IndexWriter writer = new IndexWriter(
         directory,
         newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).
             setOpenMode(OpenMode.CREATE).
             setMaxBufferedDocs(2).
-            setMergeScheduler(merger).
             setMergePolicy(newLogMergePolicy())
     );
 
@@ -65,8 +64,8 @@ public class TestThreadedOptimize extends LuceneTestCase {
 
       for(int i=0;i<200;i++) {
         Document d = new Document();
-        d.add(newField("id", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));
-        d.add(newField("contents", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));
+        d.add(newField("id", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));
+        d.add(newField("contents", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED_NO_NORMS));
         writer.addDocument(d);
       }
 
@@ -86,8 +85,8 @@ public class TestThreadedOptimize extends LuceneTestCase {
                 writerFinal.optimize(false);
                 for(int k=0;k<17*(1+iFinal);k++) {
                   Document d = new Document();
-                  d.add(newField("id", iterFinal + "_" + iFinal + "_" + j + "_" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));
-                  d.add(newField("contents", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));
+                  d.add(newField("id", iterFinal + "_" + iFinal + "_" + j + "_" + k, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));
+                  d.add(newField("contents", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED_NO_NORMS));
                   writerFinal.addDocument(d);
                 }
                 for(int k=0;k<9*(1+iFinal);k++)
@@ -135,8 +134,7 @@ public class TestThreadedOptimize extends LuceneTestCase {
   */
   public void testThreadedOptimize() throws Exception {
     Directory directory = newDirectory();
-    runTest(random, directory, new SerialMergeScheduler());
-    runTest(random, directory, new ConcurrentMergeScheduler());
+    runTest(random, directory);
     directory.close();
   }
 }
diff --git a/lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter.java b/lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter.java
index 172423d..9f6a9a5 100644
--- a/lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter.java
+++ b/lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter.java
@@ -67,7 +67,7 @@ public class BaseTestRangeFilter extends LuceneTestCase {
   static TestIndex unsignedIndexDir;
   
   static int minId = 0;
-  static int maxId = 10000;
+  static int maxId = TEST_NIGHTLY ? 10000 : 500;
   
   static final int intLength = Integer.toString(Integer.MAX_VALUE).length();
   
diff --git a/lucene/src/test/org/apache/lucene/search/TestRegexpRandom.java b/lucene/src/test/org/apache/lucene/search/TestRegexpRandom.java
index 826d884..d175a83 100644
--- a/lucene/src/test/org/apache/lucene/search/TestRegexpRandom.java
+++ b/lucene/src/test/org/apache/lucene/search/TestRegexpRandom.java
@@ -33,7 +33,7 @@ import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util._TestUtil;
 
 /**
- * Create an index with terms from 0000-9999.
+ * Create an index with terms from 000-999.
  * Generates random regexps according to simple patterns,
  * and validates the correct number of hits are returned.
  */
@@ -51,11 +51,11 @@ public class TestRegexpRandom extends LuceneTestCase {
         .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));
     
     Document doc = new Document();
-    Field field = newField("field", "", Field.Store.NO, Field.Index.ANALYZED);
+    Field field = newField("field", "", Field.Store.NO, Field.Index.ANALYZED_NO_NORMS);
     doc.add(field);
     
-    NumberFormat df = new DecimalFormat("0000", new DecimalFormatSymbols(Locale.ENGLISH));
-    for (int i = 0; i < 10000; i++) {
+    NumberFormat df = new DecimalFormat("000", new DecimalFormatSymbols(Locale.ENGLISH));
+    for (int i = 0; i < 1000; i++) {
       field.setValue(df.format(i));
       writer.addDocument(doc);
     }
@@ -98,56 +98,43 @@ public class TestRegexpRandom extends LuceneTestCase {
   }
   
   public void testRegexps() throws Exception {
-    int num = 100 * RANDOM_MULTIPLIER;
+    int num = (TEST_NIGHTLY ? 100 : 1) * RANDOM_MULTIPLIER;
     for (int i = 0; i < num; i++) {
-      assertPatternHits("NNNN", 1);
-      assertPatternHits(".NNN", 10);
-      assertPatternHits("N.NN", 10);
-      assertPatternHits("NN.N", 10);
-      assertPatternHits("NNN.", 10);
+      assertPatternHits("NNN", 1);
+      assertPatternHits(".NN", 10);
+      assertPatternHits("N.N", 10);
+      assertPatternHits("NN.", 10);
     }
     
-    num = 10 * RANDOM_MULTIPLIER;
+    num = (TEST_NIGHTLY ? 10 : 1) * RANDOM_MULTIPLIER;
     for (int i = 0; i < num; i++) {
-      assertPatternHits(".{1,2}NN", 100);
-      assertPatternHits("N.{1,2}N", 100);
-      assertPatternHits("NN.{1,2}", 100);
-      assertPatternHits(".{1,3}N", 1000);
-      assertPatternHits("N.{1,3}", 1000);
-      assertPatternHits(".{1,4}", 10000);
+      assertPatternHits(".{1,2}N", 100);
+      assertPatternHits("N.{1,2}", 100);
+      assertPatternHits(".{1,3}", 1000);
       
-      assertPatternHits("NNN[3-7]", 5);
-      assertPatternHits("NN[2-6][3-7]", 25);
-      assertPatternHits("N[1-5][2-6][3-7]", 125);
-      assertPatternHits("[0-4][3-7][4-8][5-9]", 625);
-      assertPatternHits("[3-7][2-6][0-4]N", 125);
-      assertPatternHits("[2-6][3-7]NN", 25);
-      assertPatternHits("[3-7]NNN", 5);
+      assertPatternHits("NN[3-7]", 5);
+      assertPatternHits("N[2-6][3-7]", 25);
+      assertPatternHits("[1-5][2-6][3-7]", 125);
+      assertPatternHits("[0-4][3-7][4-8]", 125);
+      assertPatternHits("[2-6][0-4]N", 25);
+      assertPatternHits("[2-6]NN", 5);
       
-      assertPatternHits("NNN.*", 10);
-      assertPatternHits("NN.*", 100);
-      assertPatternHits("N.*", 1000);
-      assertPatternHits(".*", 10000);
+      assertPatternHits("NN.*", 10);
+      assertPatternHits("N.*", 100);
+      assertPatternHits(".*", 1000);
       
-      assertPatternHits(".*NNN", 10);
-      assertPatternHits(".*NN", 100);
-      assertPatternHits(".*N", 1000);
+      assertPatternHits(".*NN", 10);
+      assertPatternHits(".*N", 100);
       
-      assertPatternHits("N.*NN", 10);
-      assertPatternHits("NN.*N", 10);
+      assertPatternHits("N.*N", 10);
       
       // combo of ? and * operators
-      assertPatternHits(".NN.*", 100);
-      assertPatternHits("N.N.*", 100);
-      assertPatternHits("NN..*", 100);
-      assertPatternHits(".N..*", 1000);
-      assertPatternHits("N...*", 1000);
+      assertPatternHits(".N.*", 100);
+      assertPatternHits("N..*", 100);
       
-      assertPatternHits(".*NN.", 100);
-      assertPatternHits(".*N..", 1000);
-      assertPatternHits(".*...", 10000);
-      assertPatternHits(".*.N.", 1000);
-      assertPatternHits(".*..N", 1000);
+      assertPatternHits(".*N.", 100);
+      assertPatternHits(".*..", 1000);
+      assertPatternHits(".*.N", 100);
     }
   }
 }
diff --git a/lucene/src/test/org/apache/lucene/search/TestWildcardRandom.java b/lucene/src/test/org/apache/lucene/search/TestWildcardRandom.java
index 9946076..108181f 100644
--- a/lucene/src/test/org/apache/lucene/search/TestWildcardRandom.java
+++ b/lucene/src/test/org/apache/lucene/search/TestWildcardRandom.java
@@ -33,7 +33,7 @@ import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util._TestUtil;
 
 /**
- * Create an index with terms from 0000-9999.
+ * Create an index with terms from 000-999.
  * Generates random wildcards according to patterns,
  * and validates the correct number of hits are returned.
  */
@@ -51,11 +51,11 @@ public class TestWildcardRandom extends LuceneTestCase {
         .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));
     
     Document doc = new Document();
-    Field field = newField("field", "", Field.Store.NO, Field.Index.ANALYZED);
+    Field field = newField("field", "", Field.Store.NO, Field.Index.ANALYZED_NO_NORMS);
     doc.add(field);
     
-    NumberFormat df = new DecimalFormat("0000", new DecimalFormatSymbols(Locale.ENGLISH));
-    for (int i = 0; i < 10000; i++) {
+    NumberFormat df = new DecimalFormat("000", new DecimalFormatSymbols(Locale.ENGLISH));
+    for (int i = 0; i < 1000; i++) {
       field.setValue(df.format(i));
       writer.addDocument(doc);
     }
@@ -99,48 +99,36 @@ public class TestWildcardRandom extends LuceneTestCase {
   }
   
   public void testWildcards() throws Exception {;
-    int num = 100 * RANDOM_MULTIPLIER;
+    int num = (TEST_NIGHTLY ? 100 : 1) * RANDOM_MULTIPLIER;
     for (int i = 0; i < num; i++) {
-      assertPatternHits("NNNN", 1);
-      assertPatternHits("?NNN", 10);
-      assertPatternHits("N?NN", 10);
-      assertPatternHits("NN?N", 10);
-      assertPatternHits("NNN?", 10);
+      assertPatternHits("NNN", 1);
+      assertPatternHits("?NN", 10);
+      assertPatternHits("N?N", 10);
+      assertPatternHits("NN?", 10);
     }
     
-    num = 10 * RANDOM_MULTIPLIER;
+    num = (TEST_NIGHTLY ? 10 : 1) * RANDOM_MULTIPLIER;
     for (int i = 0; i < num; i++) {
-      assertPatternHits("??NN", 100);
-      assertPatternHits("N??N", 100);
-      assertPatternHits("NN??", 100);
-      assertPatternHits("???N", 1000);
-      assertPatternHits("N???", 1000);
-      assertPatternHits("????", 10000);
+      assertPatternHits("??N", 100);
+      assertPatternHits("N??", 100);
+      assertPatternHits("???", 1000);
       
-      assertPatternHits("NNN*", 10);
-      assertPatternHits("NN*", 100);
-      assertPatternHits("N*", 1000);
-      assertPatternHits("*", 10000);
+      assertPatternHits("NN*", 10);
+      assertPatternHits("N*", 100);
+      assertPatternHits("*", 1000);
       
-      assertPatternHits("*NNN", 10);
-      assertPatternHits("*NN", 100);
-      assertPatternHits("*N", 1000);
+      assertPatternHits("*NN", 10);
+      assertPatternHits("*N", 100);
       
-      assertPatternHits("N*NN", 10);
-      assertPatternHits("NN*N", 10);
+      assertPatternHits("N*N", 10);
       
       // combo of ? and * operators
-      assertPatternHits("?NN*", 100);
-      assertPatternHits("N?N*", 100);
-      assertPatternHits("NN?*", 100);
-      assertPatternHits("?N?*", 1000);
-      assertPatternHits("N??*", 1000);
+      assertPatternHits("?N*", 100);
+      assertPatternHits("N?*", 100);
       
-      assertPatternHits("*NN?", 100);
-      assertPatternHits("*N??", 1000);
-      assertPatternHits("*???", 10000);
-      assertPatternHits("*?N?", 1000);
-      assertPatternHits("*??N", 1000);
+      assertPatternHits("*N?", 100);
+      assertPatternHits("*??", 1000);
+      assertPatternHits("*?N", 100);
     }
   }
 }
diff --git a/lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java b/lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
index f29d990..5c115d5 100644
--- a/lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
+++ b/lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
@@ -46,17 +46,19 @@ import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.English;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.search.Explanation.IDFExplanation;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
 
 
 public class TestPayloadNearQuery extends LuceneTestCase {
-  private IndexSearcher searcher;
-  private IndexReader reader;
-  private Directory directory;
-  private BoostingSimilarityProvider similarityProvider = new BoostingSimilarityProvider();
-  private byte[] payload2 = new byte[]{2};
-  private byte[] payload4 = new byte[]{4};
+  private static IndexSearcher searcher;
+  private static IndexReader reader;
+  private static Directory directory;
+  private static BoostingSimilarityProvider similarityProvider = new BoostingSimilarityProvider();
+  private static byte[] payload2 = new byte[]{2};
+  private static byte[] payload4 = new byte[]{4};
 
-  private class PayloadAnalyzer extends Analyzer {
+  private static class PayloadAnalyzer extends Analyzer {
     @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       TokenStream result = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);
@@ -65,7 +67,7 @@ public class TestPayloadNearQuery extends LuceneTestCase {
     }
   }
 
-  private class PayloadFilter extends TokenFilter {
+  private static class PayloadFilter extends TokenFilter {
     String fieldName;
     int numSeen = 0;
     protected PayloadAttribute payAtt;
@@ -101,9 +103,8 @@ public class TestPayloadNearQuery extends LuceneTestCase {
     return new PayloadNearQuery(clauses, 0, inOrder, function);
   }
 
-  @Override
-  public void setUp() throws Exception {
-    super.setUp();
+  @BeforeClass
+  public static void beforeClass() throws Exception {
     directory = newDirectory();
     RandomIndexWriter writer = new RandomIndexWriter(random, directory, 
         newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer())
@@ -123,12 +124,14 @@ public class TestPayloadNearQuery extends LuceneTestCase {
     searcher.setSimilarityProvider(similarityProvider);
   }
 
-  @Override
-  public void tearDown() throws Exception {
+  @AfterClass
+  public static void afterClass() throws Exception {
     searcher.close();
+    searcher = null;
     reader.close();
+    reader = null;
     directory.close();
-    super.tearDown();
+    directory = null;
   }
 
   public void test() throws IOException {

