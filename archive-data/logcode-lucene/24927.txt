GitDiffStart: ba6bb29e3b7bb6ab520c0d56ef8202fbbf6ae395 | Fri Sep 17 19:24:14 2004 +0000
diff --git a/src/java/org/apache/lucene/search/PhrasePrefixQuery.java b/src/java/org/apache/lucene/search/PhrasePrefixQuery.java
index c2d81e3..66c08c9 100644
--- a/src/java/org/apache/lucene/search/PhrasePrefixQuery.java
+++ b/src/java/org/apache/lucene/search/PhrasePrefixQuery.java
@@ -66,11 +66,11 @@ public class PhrasePrefixQuery extends Query {
    * @see PhraseQuery#add(Term)
    */
   public void add(Term[] terms) {
-      int position = 0;
-      if(positions.size() > 0)
-          position = ((Integer) positions.lastElement()).intValue() + 1;
-      
-      add(terms, position);
+    int position = 0;
+    if (positions.size() > 0)
+      position = ((Integer) positions.lastElement()).intValue() + 1;
+
+    add(terms, position);
   }
   
   /**
@@ -81,29 +81,29 @@ public class PhrasePrefixQuery extends Query {
    * @param position
    */
   public void add(Term[] terms, int position) {
-      if (termArrays.size() == 0)
-          field = terms[0].field();
-        
-        for (int i=0; i<terms.length; i++) {
-          if (terms[i].field() != field) {
-            throw new IllegalArgumentException
-              ("All phrase terms must be in the same field (" + field + "): "
-               + terms[i]);
-          }
-        }
-
-        termArrays.add(terms);
-        positions.addElement(new Integer(position));
+    if (termArrays.size() == 0)
+      field = terms[0].field();
+
+    for (int i = 0; i < terms.length; i++) {
+      if (terms[i].field() != field) {
+        throw new IllegalArgumentException(
+            "All phrase terms must be in the same field (" + field + "): "
+                + terms[i]);
+      }
+    }
+
+    termArrays.add(terms);
+    positions.addElement(new Integer(position));
   }
   
   /**
    * Returns the relative positions of terms in this phrase.
    */
   public int[] getPositions() {
-      int[] result = new int[positions.size()];
-      for(int i = 0; i < positions.size(); i++)
-          result[i] = ((Integer) positions.elementAt(i)).intValue();
-      return result;
+    int[] result = new int[positions.size()];
+    for (int i = 0; i < positions.size(); i++)
+      result[i] = ((Integer) positions.elementAt(i)).intValue();
+    return result;
   }
 
   private class PhrasePrefixWeight implements Weight {

