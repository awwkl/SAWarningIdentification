GitDiffStart: 62855478e84c0bc9efe77e1535c0239ea6ed2166 | Mon Mar 7 19:53:29 2005 +0000
diff --git a/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser.java b/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser.java
index a32d6bc..35d4b28 100644
--- a/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser.java
+++ b/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser.java
@@ -75,7 +75,7 @@ public class MultiFieldQueryParser extends QueryParser
       for (int i = 0; i < fields.length; i++)
         clauses.add(new BooleanClause(super.getFieldQuery(fields[i], queryText),
             BooleanClause.Occur.SHOULD));
-      return getBooleanQuery(clauses);
+      return getBooleanQuery(clauses, true);
     }
     return super.getFieldQuery(field, queryText);
   }
diff --git a/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser.jj b/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser.jj
index 076b917..7ec997a 100644
--- a/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser.jj
+++ b/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser.jj
@@ -451,11 +451,29 @@ public class PrecedenceQueryParser {
    * @exception ParseException throw in overridden method to disallow
    */
   protected Query getBooleanQuery(Vector clauses) throws ParseException
+    getBooleanQuery(clauses, false);
+  }
+  /**
+   * Factory method for generating query, given a set of clauses.
+   * By default creates a boolean query composed of clauses passed in.
+   *
+   * Can be overridden by extending classes, to modify query being
+   * returned.
+   *
+   * @param clauses Vector that contains {@link BooleanClause} instances
+   *    to join.
+   * @param disableCoord true if coord scoring should be disabled.
+   *
+   * @return Resulting {@link Query} object.
+   * @exception ParseException throw in overridden method to disallow
+   */
+  protected Query getBooleanQuery(Vector clauses, boolean disableCoord)
+    throws ParseException
   {
     if (clauses == null || clauses.size() == 0)
       return null;
 
-    BooleanQuery query = new BooleanQuery();
+    BooleanQuery query = new BooleanQuery(disableCoord);
     for (int i = 0; i < clauses.size(); i++) {
       query.add((BooleanClause)clauses.elementAt(i));
     }

