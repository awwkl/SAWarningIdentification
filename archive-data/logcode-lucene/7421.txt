GitDiffStart: bc38be3e0708f0d45a5d9cb37c7b96bc5d7ef727 | Tue Nov 26 02:42:18 2013 +0000
diff --git a/solr/core/src/java/org/apache/solr/analytics/expression/ExpressionFactory.java b/solr/core/src/java/org/apache/solr/analytics/expression/ExpressionFactory.java
index 9dc78d4..5da5fb0 100644
--- a/solr/core/src/java/org/apache/solr/analytics/expression/ExpressionFactory.java
+++ b/solr/core/src/java/org/apache/solr/analytics/expression/ExpressionFactory.java
@@ -160,21 +160,17 @@ public class ExpressionFactory {
     int start = 0;
     List<String> arguments = new ArrayList<String>();
     char[] chars = expression.toCharArray();
-    boolean escapedCharacter = false;
     for (int count = 0; count < expression.length(); count++) {
       char c = chars[count];
-      if (c==',' && stack == 0 && !escapedCharacter) {
+      if (c==',' && stack == 0) {
         arguments.add(expression.substring(start, count).replace("\\(","(").replace("\\)",")").replace("\\,",",").trim());
         start = count+1;
-      } else if (c == '(' && !escapedCharacter) {
+      } else if (c == '(') {
         stack ++;
-      } else if (c == ')' && !escapedCharacter) {
+      } else if (c == ')') {
         stack --;
       } else if (c == '\\') {
-        escapedCharacter=true;
-      }
-      if (escapedCharacter) {
-        escapedCharacter=false;
+        ; // Do nothing.
       }
     }
     if (stack==0) {
diff --git a/solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory.java b/solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory.java
index 20d92d4..c4dea1b 100644
--- a/solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory.java
+++ b/solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory.java
@@ -421,7 +421,7 @@ public class StatsCollectorSupplierFactory {
       return null;
     }
     Object defaultObject;
-    Class<? extends ValueSource> type = delegateSource.getClass();
+
     ValueSource src = delegateSource;
     if (delegateSource instanceof FilterFieldSource) {
       src = ((FilterFieldSource)delegateSource).getRootSource();
@@ -432,6 +432,12 @@ public class StatsCollectorSupplierFactory {
       } catch (NumberFormatException e) {
         throw new SolrException(ErrorCode.BAD_REQUEST,"The filter value "+arguments[1]+" cannot be converted into an integer.",e);
       }
+    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {
+      try {
+        defaultObject = TrieDateField.parseDate(arguments[1]);
+      } catch (ParseException e) {
+        throw new SolrException(ErrorCode.BAD_REQUEST,"The filter value "+arguments[1]+" cannot be converted into a date.",e);
+      }
     } else if ( src instanceof LongFieldSource ) {
       try {
         defaultObject = new Long(arguments[1]);
@@ -451,12 +457,6 @@ public class StatsCollectorSupplierFactory {
       } catch (NumberFormatException e) {
         throw new SolrException(ErrorCode.BAD_REQUEST,"The filter value "+arguments[1]+" cannot be converted into a double.",e);
       }
-    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {
-      try {
-        defaultObject = TrieDateField.parseDate(arguments[1]);
-      } catch (ParseException e) {
-        throw new SolrException(ErrorCode.BAD_REQUEST,"The filter value "+arguments[1]+" cannot be converted into a date.",e);
-      }
     } else {
       defaultObject = arguments[1];
     }
diff --git a/solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest.java b/solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest.java
index 0a18edc..895c43b 100644
--- a/solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest.java
+++ b/solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest.java
@@ -1186,11 +1186,12 @@ public class FieldFacetTest extends AbstractAnalyticsFacetTest{
   }
 
   private boolean checkStddevs(ArrayList<Double> list1, ArrayList<Double> list2) {
-    boolean b = true;
-    for (int i = 0; i<list1.size() && b; i++) {
-      b = b && (Math.abs(list1.get(i)-list2.get(i))<.00000000001);
+    for (int i = 0; i<list1.size(); i++) {
+      if ((Math.abs(list1.get(i)-list2.get(i))<.00000000001) == false) {
+        return false;
+      }
     }
-    return b;
+    return true;
   }
 
 }

