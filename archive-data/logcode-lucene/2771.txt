GitDiffStart: 51b3c33f82cb48b04065e5abde13857ff144e4ab | Fri Sep 4 14:05:25 2015 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index a52cfbb..be646f5 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -107,6 +107,8 @@ Bug Fixes
 * LUCENE-6774: Remove classloader hack in MorfologikFilter. (Robert Muir,
   Uwe Schindler)
 
+* LUCENE-6781: Fixed BoostingQuery to rewrite wrapped queries. (Adrien Grand)
+
 Other
 
 * LUCENE-6174: Improve "ant eclipse" to select right JRE for building.
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery.java b/lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery.java
index 9280dd9..43389d5 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery.java
@@ -21,10 +21,10 @@ import java.io.IOException;
 import java.util.Objects;
 import java.util.Set;
 
+import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.*;
-import org.apache.lucene.util.Bits;
 
 /**
  * The BoostingQuery class can be used to effectively demote results that match a given query. 
@@ -55,6 +55,18 @@ public class BoostingQuery extends Query {
     }
 
     @Override
+    public Query rewrite(IndexReader reader) throws IOException {
+      Query matchRewritten = match.rewrite(reader);
+      Query contextRewritten = context.rewrite(reader);
+      if (match != matchRewritten || context != contextRewritten) {
+        BoostingQuery rewritten = new BoostingQuery(matchRewritten, contextRewritten, boost);
+        rewritten.setBoost(getBoost());
+        return rewritten;
+      }
+      return super.rewrite(reader);
+    }
+
+    @Override
     public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
       if (needsScores == false) {
         return match.createWeight(searcher, needsScores);
diff --git a/lucene/queries/src/test/org/apache/lucene/queries/BoostingQueryTest.java b/lucene/queries/src/test/org/apache/lucene/queries/BoostingQueryTest.java
index f8faf12..df9d1b7 100644
--- a/lucene/queries/src/test/org/apache/lucene/queries/BoostingQueryTest.java
+++ b/lucene/queries/src/test/org/apache/lucene/queries/BoostingQueryTest.java
@@ -17,7 +17,15 @@ package org.apache.lucene.queries;
  * limitations under the License.
  */
 
+import java.io.IOException;
+
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.MultiReader;
 import org.apache.lucene.index.Term;
+import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.MatchAllDocsQuery;
+import org.apache.lucene.search.MatchNoDocsQuery;
+import org.apache.lucene.search.Query;
 import org.apache.lucene.search.QueryUtils;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.util.LuceneTestCase;
@@ -35,4 +43,13 @@ public class BoostingQueryTest extends LuceneTestCase {
     BoostingQuery bq2 = new BoostingQuery(q1, q2, 0.1f);
     assertEquals("BoostingQuery with same attributes is not equal", bq1, bq2);
   }
+
+  public void testRewrite() throws IOException {
+    IndexReader reader = new MultiReader();
+    BoostingQuery q = new BoostingQuery(new MatchNoDocsQuery(), new MatchAllDocsQuery(), 3);
+    Query rewritten = q.rewrite(reader);
+    Query expectedRewritten = new BoostingQuery(new BooleanQuery.Builder().build(), new MatchAllDocsQuery(), 3);
+    assertEquals(expectedRewritten, rewritten);
+    assertSame(rewritten, rewritten.rewrite(reader));
+  }
 }

