GitDiffStart: 59957144614d9b91b0aa5273d41631e509abf63a | Fri Feb 12 10:56:21 2010 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index ac0a521..b56f10d 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -107,6 +107,10 @@ Bug fixes
 * LUCENE-2249: ParallelMultiSearcher should shut down thread pool on
   close.  (Martin Traverso via Uwe Schindler)
   
+* LUCENE-2257: Increase max number of unique terms in one segment to
+  termIndexInterval (default 128) * ~2.1 billion = ~274 billion.
+  (Tom Burton-West via Mike McCandless)
+  
 New features
 
 * LUCENE-2128: Parallelized fetching document frequencies during weight
diff --git a/docs/fileformats.html b/docs/fileformats.html
index 8572104..d5ee15c 100644
--- a/docs/fileformats.html
+++ b/docs/fileformats.html
@@ -2548,11 +2548,12 @@ document.write("Last Published: " + document.lastModified);
 <div class="section">
 <p>
 	      When referring to term numbers, Lucene's current
-	      implementation uses a Java <span class="codefrag">int</span>, which means
-	      the maximum number of unique terms in any single index
-	      segment is 2,147,483,648.  This is technically not a
-	      limitation of the index file format, just of Lucene's
-	      current implementation.
+	      implementation uses a Java <span class="codefrag">int</span> to hold the
+	      term index, which means the maximum number of unique
+	      terms in any single index segment is ~2.1 billion times
+	      the term index interval (default 128) = ~274 billion.
+	      This is technically not a limitation of the index file
+	      format, just of Lucene's current implementation.
 	    </p>
 <p>
 	      Similarly, Lucene uses a Java <span class="codefrag">int</span> to refer
diff --git a/docs/fileformats.pdf b/docs/fileformats.pdf
index 46e087b..fec049c 100644
--- a/docs/fileformats.pdf
+++ b/docs/fileformats.pdf
@@ -945,10 +945,10 @@ For example, if there are 8000 bits and only bits 10,12,32 are set, DGaps would
 
 10. Limitations
 
-When referring to term numbers, Lucene's current implementation uses a Java int, which
-means the maximum number of unique terms in any single index segment is 2,147,483,648.
-This is technically not a limitation of the index file format, just of Lucene's current
-implementation.
+When referring to term numbers, Lucene's current implementation uses a Java int to hold
+the term index, which means the maximum number of unique terms in any single index
+segment is ~2.1 billion times the term index interval (default 128) = ~274 billion. This is
+technically not a limitation of the index file format, just of Lucene's current implementation.
 
 Similarly, Lucene uses a Java int to refer to document numbers, and the index file format
 uses an Int32 on-disk to store document numbers. This is a limitation of both the index file
diff --git a/src/java/org/apache/lucene/index/SegmentTermEnum.java b/src/java/org/apache/lucene/index/SegmentTermEnum.java
index 214d8de..b004c59 100644
--- a/src/java/org/apache/lucene/index/SegmentTermEnum.java
+++ b/src/java/org/apache/lucene/index/SegmentTermEnum.java
@@ -109,7 +109,7 @@ final class SegmentTermEnum extends TermEnum implements Cloneable {
     return clone;
   }
 
-  final void seek(long pointer, int p, Term t, TermInfo ti)
+  final void seek(long pointer, long p, Term t, TermInfo ti)
           throws IOException {
     input.seek(pointer);
     position = p;
diff --git a/src/java/org/apache/lucene/index/TermInfosReader.java b/src/java/org/apache/lucene/index/TermInfosReader.java
index 4013f51..35f0cd1 100644
--- a/src/java/org/apache/lucene/index/TermInfosReader.java
+++ b/src/java/org/apache/lucene/index/TermInfosReader.java
@@ -177,7 +177,7 @@ final class TermInfosReader {
 
   private final void seekEnum(SegmentTermEnum enumerator, int indexOffset) throws IOException {
     enumerator.seek(indexPointers[indexOffset],
-                   (indexOffset * totalIndexInterval) - 1,
+                   ((long) indexOffset * totalIndexInterval) - 1,
                    indexTerms[indexOffset], indexInfos[indexOffset]);
   }
 
@@ -280,28 +280,6 @@ final class TermInfosReader {
     return true;
   }
 
-  /** Returns the nth term in the set. */
-  final Term get(int position) throws IOException {
-    if (size == 0) return null;
-
-    SegmentTermEnum enumerator = getThreadResources().termEnum;
-    if (enumerator.term() != null &&
-        position >= enumerator.position &&
-	position < (enumerator.position + totalIndexInterval))
-      return scanEnum(enumerator, position);      // can avoid seek
-
-    seekEnum(enumerator, position/totalIndexInterval); // must seek
-    return scanEnum(enumerator, position);
-  }
-
-  private final Term scanEnum(SegmentTermEnum enumerator, int position) throws IOException {
-    while(enumerator.position < position)
-      if (!enumerator.next())
-	return null;
-
-    return enumerator.term();
-  }
-
   private void ensureIndexIsRead() {
     if (indexTerms == null) {
       throw new IllegalStateException("terms index was not loaded when this reader was created");
diff --git a/src/site/src/documentation/content/xdocs/fileformats.xml b/src/site/src/documentation/content/xdocs/fileformats.xml
index 0b36f5f..2310ce8 100644
--- a/src/site/src/documentation/content/xdocs/fileformats.xml
+++ b/src/site/src/documentation/content/xdocs/fileformats.xml
@@ -1846,11 +1846,12 @@
 
             <p>
 	      When referring to term numbers, Lucene's current
-	      implementation uses a Java <code>int</code>, which means
-	      the maximum number of unique terms in any single index
-	      segment is 2,147,483,648.  This is technically not a
-	      limitation of the index file format, just of Lucene's
-	      current implementation.
+	      implementation uses a Java <code>int</code> to hold the
+	      term index, which means the maximum number of unique
+	      terms in any single index segment is ~2.1 billion times
+	      the term index interval (default 128) = ~274 billion.
+	      This is technically not a limitation of the index file
+	      format, just of Lucene's current implementation.
 	    </p>
 	    <p>
 	      Similarly, Lucene uses a Java <code>int</code> to refer

