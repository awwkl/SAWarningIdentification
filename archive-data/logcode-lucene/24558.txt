GitDiffStart: c11fd1194f17118d0d0f9d4198e72ecbe80bcbf3 | Wed Jan 7 02:54:45 2004 +0000
diff --git a/sandbox/contributions/indyo/build-broken.xml b/sandbox/contributions/indyo/build-broken.xml
deleted file mode 100644
index 7cb4cc8..0000000
--- a/sandbox/contributions/indyo/build-broken.xml
+++ /dev/null
@@ -1,82 +0,0 @@
-<?xml version="1.0"?>
-
-<project name="Indyo" default="jar" basedir=".">
-
-    <!-- Give user a chance to override without editing this file
-        (and without typing -D each time it compiles it -->
-  <property file="${user.home}/build.properties" />
-  <property file="${basedir}/build.properties" />
-  <property file="${basedir}/default.properties" />
-  
-  <!-- Build classpath -->
-	<path id="classpath">
-		<pathelement location="${build.classes}"/>
-		<pathelement location="."/>
-		<fileset dir="lib">
-			<include name="*.jar" />
-		</fileset>
-  </path>
-  
-  <!-- ================================================================== -->
-  <!-- Prepares the build directory                                       -->
-  <!-- ================================================================== -->
-  <target name="init">
-    <mkdir dir="${build.dir}"/>
-    <mkdir dir="${build.classes}"/>
-    <mkdir dir="${build.src}"/>  
-  </target>
-  
-  <!-- ================================================================== -->
-  <!-- C O M P I L E                                                      -->
-  <!-- ================================================================== -->
-  <!--                                                                    -->
-  <!-- ================================================================== -->
-  <target name="compile" depends="init">
-
-    <javac
-      srcdir="${src.dir}:${build.src}"
-      destdir="${build.classes}"
-      debug="${debug}">
-      <classpath refid="classpath"/>
-    </javac>
-    
-  </target>  
-  
-  <!-- ================================================================== -->
-  <!-- J A R                                                              -->
-  <!-- ================================================================== -->
-  <!--                                                                    -->
-  <!-- ================================================================== -->
-  <target name="jar" depends="compile">
-    <jar
-      jarfile="${build.dir}/${final.name}.jar"
-      basedir="${build.classes}"
-      excludes="**/*.java"
-    />
-  </target>
-
-  <!-- ================================================================== -->
-  <!-- J A V A D O C                                                      -->
-  <!-- ================================================================== -->
-  <!--                                                                    -->
-  <!-- ================================================================== -->
-  <target name="javadocs" depends="compile">
-    <mkdir dir="${build.javadocs}"/>
-    <javadoc
-      sourcepath="${src.dir}:${build.src}"
-      overview="${src.dir}/overview.html"
-      packagenames="${packages}"
-      destdir="${build.javadocs}"
-      author="true"
-      version="true"
-      use="true"
-      link="${javadoc.link}"
-      windowtitle="${Name} ${version} API"
-      doctitle="${Name} ${version} API"
-      bottom="Copyright &amp;copy; ${year} Apache Software Foundation.  All Rights Reserved."
-      >
-      <classpath refid="classpath"/>
-    </javadoc>
-  </target>
-
-</project>  
\ No newline at end of file
diff --git a/sandbox/contributions/indyo/default.properties b/sandbox/contributions/indyo/default.properties
deleted file mode 100644
index a623f04..0000000
--- a/sandbox/contributions/indyo/default.properties
+++ /dev/null
@@ -1,43 +0,0 @@
-# -------------------------------------------------------------
-# D E F A U L T   I N D Y O   B U I L D   P R O P E R T I E S
-# -------------------------------------------------------------
-#
-# DO NOT EDIT THIS FILE IN ORDER TO CUSTOMIZE BUILD PROPERTIES.
-# CREATE AND EDIT build.properties FILE INSTEAD.
-#
-name=indyo
-Name=Indyo
-version=0.1-dev
-year=2000-2002
-final.name=${name}-${version}
-debug=off
-
-project.name = site
-docs.src =  ./xdocs
-docs.dest = ./docs
-
-src.dir = ./src/java
-demo.src = ./src/demo
-demo.jsp = ./src/jsp
-docs.dir = ./docs
-lib.dir = ./lib
-dist.dir=${final.name}
-dist-src.dir = ${final.name}-src
-
-# javadoc packages
-packages=com.relevanz.indyo.*
-
-# javadoc link
-javadoc.link=http://java.sun.com/j2se/1.3/docs/api/
-
-build.compiler.pedantic=false
-
-build.dir = ./bin
-build.classes = ${build.dir}/classes
-build.lib = ${build.dir}/lib
-build.javadocs = ${build.dir}/docs/api
-build.src = ${build.dir}/src
-build.encoding = ISO-8859-1
-
-# Home directory of jakarta-site2
-jakarta.site2.home = ../jakarta-site2
diff --git a/sandbox/contributions/indyo/docs/introduction.txt b/sandbox/contributions/indyo/docs/introduction.txt
deleted file mode 100644
index 9eaccfb..0000000
--- a/sandbox/contributions/indyo/docs/introduction.txt
+++ /dev/null
@@ -1,29 +0,0 @@
-Indyo is a datasource-independent Lucene indexing framework.
-
-What this means, is that Indyo allows a myriad of sources from which
-data is fed to the search engine to be indexed. Datasources can take
-the form of traditional storage mediums (filesystem, database, web
-site, etc), objects, complex datasources which consist of a mixture of
-objects and storage medium, and pretty much anything which implements
-com.relevanz.indyo.IndexDataSource. If it's a file that's being
-indexed (via com.relevanz.indyo.FSDataSource), the contents of the
-file can be indexed by a class which implements
-com.relevanz.indyo.contenthandler.FileContentHandler (e.g.
-TextHandler, ZIPHandler, etc). Via the datasource, applications can
-also associate a search result object with the object that was indexed
-(or optionally use Peter's SearchBean contribution), for display
-purposes.
-
-To summarize, if you:
-
-a) Want a way of indexing various sources of data, and even nested
-datasources (like indexing a HTML file, which spawns a custom
-datasource, say RemoteHTMLDataSource, for every link it encounters)
-
-b) Simply want a pluggable system of indexing different types of file
-content (currently plain text, Zip, Tar, GZip file formats are
-supported, but writing new file content handlers are easy)
-
-then Indyo may be worth checking out.
-
-
diff --git a/sandbox/contributions/indyo/xdocs/tutorial.xml b/sandbox/contributions/indyo/xdocs/tutorial.xml
deleted file mode 100644
index 2a4afa3..0000000
--- a/sandbox/contributions/indyo/xdocs/tutorial.xml
+++ /dev/null
@@ -1,221 +0,0 @@
-<?xml version="1.0"?>
-
-<document>
-
-  <properties>
-    <title>Indyo Tutorial</title>
-    <author email="kelvint@apache.org">Kelvin Tan</author>
-  </properties>
-
-  <body>
-
-<section name="About this Tutorial">
-
-<p>
-  This tutorial is intended to give first-time users an
-  introduction to using Indyo, a datasource-independent 
-  Lucene indexing framework.
-</p>
-
-<p>
-  This will include how to obtain Indyo, configuring Indyo
-  and indexing a directory on a filesystem.
-</p>
-
-</section>
-
-<section name="Step 1: Obtaining Indyo">
-
-<p>
-  First, you need to obtain Indyo.  As
-  of this writing, Indyo is only available via CVS, from the 
-  "jakarta-lucene-sandbox" repository. See 
-  <a href="http://jakarta.apache.org/site/cvsindex.html">Jakarta CVS</a> 
-  on accessing files via CVS.</p>
-
-
-</section>
-
-<section name="Step 2: Building Indyo">
-
-<p>
-  Get a copy of <a href="http://jakarta.apache.org/ant">Ant</a> if 
-  you don't already have it installed. Then simply type "ant" in the 
-  directory where the local copy of the Indyo sources reside.
-</p>
-
-<p>
-  Voila! You should now have a jar file "indyo-&lt;version number&gt;.jar".
-</p>
-
-</section>
-
-<section name="Step 3: Configuring Indyo">
-
-<p>
-  The "src/conf" folder contains a default configuration file which is 
-  sufficient for normal use. 
-</p>
-
-</section>
-
-<section name="Step 4: Using Indyo">
-
-<p>
-  Congratulations, you have finally reached the fun the
-  part of this tutorial.  This is where you'll discover
-  the power of Indyo.  
-</p>
-
-<p>
-  To index a datasource, first instantiate the respective 
-  datasource, then hand it to IndyoIndexer for indexing. 
-  For example:
-</p>
-
-<source><![CDATA[
-IndexDataSource ds = new FSDataSource("/usr/local/lucene/docs");
-IndyoIndexer indexer = new IndyoIndexer("/usr/local/index", 
-                    "/usr/local/indyo/default.config.xml");
-indexer.index(ds);                    
-]]></source>
-
-<p>
-  FSDataSource is a simple datasource which indexes both files 
-  and directories. The metadata FSDataSource adds to each document is: 
-  filePath, fileName, fileSize, fileFormat, fileContents, 
-  fileLastModifiedDate. Based on the file extension of the files indexed, 
-  Indyo will use file content-handlers according to the mappings found in the 
-  configuration file. If you're not happy with this list of file 
-  metadata, feel free to subclass FSDataSource, or, as we're about 
-  to cover next, write your own custom IndexDataSource.
-</p>
-
-<p>
-  Get familiar with FSDataSource. You'll find it very handy, both for indexing 
-  files directly, as well as nesting it within another datasource. For example, 
-  you might need to index a database table, in which one of the rows represent 
-  the location of a file, and you may want to use FSDataSource to index this 
-  file as well.
-</p>
-
-<subsection name="Writing your custom IndexDataSource">
-
-<p>
-  To write a custom IndexDataSource, you need to write a class 
-  which implements IndexDataSource, and provides an implementation 
-  for the getData() method which returns a Map[]. The javadoc of the 
-  getData() method reads:
-</p>
-
-<source><![CDATA[
-/**
- * Retrieve a array of Maps. Each map represents the
- * a document to be indexed. The key:value pair of the map
- * is the metadata of the document.
- */
-]]></source>
-
-<p>
-  So, the getData() method provides a way for Indyo to retrieve document 
-  metadata from each IndexDataSource. A simple example of a custom 
-  IndexDataSource, HashMapDataSource is provided below.
-</p>
-
-<source><![CDATA[
-public class HashMapDataSource implements IndexDataSource
-{
-    private Map data;
-
-    public HashMapDataSource(Map data)
-    {
-        this.data = data;
-    }
-
-    public Map[] getData() throws Exception
-    {
-        return new Map[1]{data};
-    }
-}
-]]></source>
-
-<p>
-  As you can see, HashMapDataSource doesn't do anything very useful. It 
-  always results in one Document being indexed, and the document's fields 
-  depend on the contents of the map that HashMapDataSource was initialized 
-  with.
-</p>
-
-<p>
-  A slightly more useful IndexDataSource, SingleDocumentFSDataSource 
-  provides an example of how to nest datasources. Given a directory, 
-  SingleDocumentFSDataSource recursively indexes all directories 
-  and files within that directory <i>as the same Document</i>. In other 
-  words, only one Document is created in the index. This is accomplished 
-  by the use of a nested datasource. The code for 
-  SingleDocumentFSDataSource is listed below:
-</p>
-
-<source><![CDATA[ 
-public class SingleDocumentFSDataSource
-        implements IndexDataSource
-{
-    private File file;
-
-    public SingleDocumentFSDataSource(File file)
-    {
-        this.file = file;
-    }
-
-    public Map[] getData() throws Exception
-    {
-        Map data = new HashMap(1);
-        data.put(NESTED_DATASOURCE, new FSDataSource(file));
-        return new Map[1]{data};
-    }
-}
-]]></source>
-
-<p>
-  Nested datasources don't result in a separate Document being created. 
-  Use them when working with complex datasources, i.e., datasources 
-  which are an aggregation of multiple datasources. The current way to 
-  add a nested datasource is using the key "NESTED_DATASOURCE". Indyo 
-  accepts an IndexDataSource object, a List of IndexDataSources, 
-  or an IndexDataSource[] for this key.
-</p>
-
-</subsection>
-
-</section>
-
-<section name="Where to Go From Here">
-
-<p>
-  Congratulations!  You have completed the Indyo
-  tutorial.  Although this has only been an introduction
-  to Indyo, it should be sufficient to get you started
-  with Indyo in your applications.  For those of you
-  seeking additional information, there are several other
-  documents on this site that can provide details on
-  various subjects.  Lastly, the source code is an
-  invaluable resource when all else fails to provide
-  answers!
-</p>
-
-</section>
-
-<section name="Acknowledgements">
-
-<p>
-  This document was shamelessly ripped from the extremely well-written 
-  and well-organized 
-  <a href="http://jakarta.apache.org/turbine/torque/tutorial.html">Torque
-  </a> tutorial. Thanks Pete!
-</p>
-
-</section>
-
-  </body>
-</document>
-

