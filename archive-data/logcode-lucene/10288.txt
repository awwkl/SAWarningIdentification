GitDiffStart: 6a11fd8db6fff2c4a91283b9408b90421bcbfb1b | Sat Dec 8 22:00:15 2012 +0000
diff --git a/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java b/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java
index 2e53895..bba3361 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java
@@ -38,6 +38,8 @@ import org.apache.solr.common.SolrDocumentList;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.common.cloud.ClusterState;
+import org.apache.solr.common.cloud.DocCollection;
+import org.apache.solr.common.cloud.Slice;
 import org.apache.solr.common.params.ModifiableSolrParams;
 import org.apache.solr.common.params.ShardParams;
 import org.apache.solr.common.params.SolrParams;
@@ -356,23 +358,23 @@ public class RealTimeGetComponent extends SearchComponent
       CloudDescriptor cloudDescriptor = rb.req.getCore().getCoreDescriptor().getCloudDescriptor();
 
       String collection = cloudDescriptor.getCollectionName();
-
       ClusterState clusterState = zkController.getClusterState();
-      
-      Map<String, List<String>> shardToId = new HashMap<String, List<String>>();
+      DocCollection coll = clusterState.getCollection(collection);
+
+
+      Map<String, List<String>> sliceToId = new HashMap<String, List<String>>();
       for (String id : allIds) {
-        int hash = Hash.murmurhash3_x86_32(id, 0, id.length(), 0);
-        String shard = clusterState.getShard(hash,  collection);
+        Slice slice = coll.getRouter().getTargetSlice(id, null, params, coll);
 
-        List<String> idsForShard = shardToId.get(shard);
+        List<String> idsForShard = sliceToId.get(slice.getName());
         if (idsForShard == null) {
           idsForShard = new ArrayList<String>(2);
-          shardToId.put(shard, idsForShard);
+          sliceToId.put(slice.getName(), idsForShard);
         }
         idsForShard.add(id);
       }
 
-      for (Map.Entry<String,List<String>> entry : shardToId.entrySet()) {
+      for (Map.Entry<String,List<String>> entry : sliceToId.entrySet()) {
         String shard = entry.getKey();
         String shardIdList = StrUtils.join(entry.getValue(), ',');
 
diff --git a/solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest.java b/solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest.java
index bb86552..3305536 100644
--- a/solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest.java
@@ -136,6 +136,14 @@ public class ShardRoutingTest extends AbstractFullDistribZkTestBase {
     doAddDoc("c!doc2");
     doAddDoc("d!doc3");
     doAddDoc("e!doc4");
+
+    doRTG("b!doc1");
+    doRTG("c!doc2");
+    doRTG("d!doc3");
+    doRTG("e!doc4");
+    doRTG("b!doc1,c!doc2");
+    doRTG("d!doc3,e!doc4");
+
     commit();
 
     doQuery("b!doc1,c!doc2,d!doc3,e!doc4", "q","*:*");
@@ -178,6 +186,20 @@ public class ShardRoutingTest extends AbstractFullDistribZkTestBase {
     assertEquals(expectedIds, obtainedIds);
   }
 
+  void doRTG(String ids) throws Exception {
+    cloudClient.query(params("qt","/get", "ids",ids));
+
+    Set<String> expectedIds = new HashSet<String>( StrUtils.splitSmart(ids, ",", true) );
+
+    QueryResponse rsp = cloudClient.query(params("qt","/get", "ids",ids));
+    Set<String> obtainedIds = new HashSet<String>();
+    for (SolrDocument doc : rsp.getResults()) {
+      obtainedIds.add((String) doc.get("id"));
+    }
+
+    assertEquals(expectedIds, obtainedIds);
+  }
+
   @Override
   public void tearDown() throws Exception {
     super.tearDown();
diff --git a/solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState.java b/solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState.java
index ae5a672..c7a9c59 100644
--- a/solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState.java
+++ b/solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState.java
@@ -212,23 +212,6 @@ public class ClusterState implements JSONWriter.Writable {
     return rangeInfo;
   }
 
-  /**
-   * Get shard id for hash. This is used when determining which Slice the
-   * document is to be submitted to.
-   */
-  public String getShard(int hash, String collection) {
-    RangeInfo rangInfo = getRanges(collection);
-    
-    int cnt = 0;
-    for (Range range : rangInfo.ranges) {
-      if (range.includes(hash)) {
-        return rangInfo.shardList.get(cnt);
-      }
-      cnt++;
-    }
-    
-    throw new IllegalStateException("The DocRouter failed");
-  }
 
   @Override
   public String toString() {

