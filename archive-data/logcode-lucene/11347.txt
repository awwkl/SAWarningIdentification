GitDiffStart: 2afa06672fe204f468a72d7c85b23158345d5597 | Mon Aug 27 22:30:09 2012 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java b/lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java
index 0ff186f..4b7fd2e 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/Analyzer.java
@@ -326,16 +326,12 @@ public abstract class Analyzer {
    */
   public final static class GlobalReuseStrategy extends ReuseStrategy {
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public TokenStreamComponents getReusableComponents(String fieldName) {
       return (TokenStreamComponents) getStoredValue();
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public void setReusableComponents(String fieldName, TokenStreamComponents components) {
       setStoredValue(components);
     }
@@ -347,19 +343,15 @@ public abstract class Analyzer {
    */
   public static class PerFieldReuseStrategy extends ReuseStrategy {
 
-    /**
-     * {@inheritDoc}
-     */
     @SuppressWarnings("unchecked")
+    @Override
     public TokenStreamComponents getReusableComponents(String fieldName) {
       Map<String, TokenStreamComponents> componentsPerField = (Map<String, TokenStreamComponents>) getStoredValue();
       return componentsPerField != null ? componentsPerField.get(fieldName) : null;
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @SuppressWarnings("unchecked")
+    @Override
     public void setReusableComponents(String fieldName, TokenStreamComponents components) {
       Map<String, TokenStreamComponents> componentsPerField = (Map<String, TokenStreamComponents>) getStoredValue();
       if (componentsPerField == null) {
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/AnalyzerWrapper.java b/lucene/core/src/java/org/apache/lucene/analysis/AnalyzerWrapper.java
index 261075c..0acac2c 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/AnalyzerWrapper.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/AnalyzerWrapper.java
@@ -61,25 +61,16 @@ public abstract class AnalyzerWrapper extends Analyzer {
    */
   protected abstract TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components);
 
-  /**
-   * {@inheritDoc}
-   */
   @Override
   protected final TokenStreamComponents createComponents(String fieldName, Reader aReader) {
     return wrapComponents(fieldName, getWrappedAnalyzer(fieldName).createComponents(fieldName, aReader));
   }
 
-  /**
-   * {@inheritDoc}
-   */
   @Override
   public final int getPositionIncrementGap(String fieldName) {
     return getWrappedAnalyzer(fieldName).getPositionIncrementGap(fieldName);
   }
 
-  /**
-   * {@inheritDoc}
-   */
   @Override
   public final int getOffsetGap(String fieldName) {
     return getWrappedAnalyzer(fieldName).getOffsetGap(fieldName);
diff --git a/lucene/core/src/java/org/apache/lucene/document/Field.java b/lucene/core/src/java/org/apache/lucene/document/Field.java
index 7ac7952..4248d16 100644
--- a/lucene/core/src/java/org/apache/lucene/document/Field.java
+++ b/lucene/core/src/java/org/apache/lucene/document/Field.java
@@ -213,7 +213,7 @@ public class Field implements IndexableField {
   }
   
   /**
-   * The TokesStream for this field to be used when indexing, or null. If null,
+   * The TokenStream for this field to be used when indexing, or null. If null,
    * the Reader value or String value is analyzed to produce the indexed tokens.
    */
   public TokenStream tokenStreamValue() {
@@ -405,9 +405,6 @@ public class Field implements IndexableField {
     return type;
   }
 
-  /**
-   * {@inheritDoc}
-   */
   public TokenStream tokenStream(Analyzer analyzer) throws IOException {
     if (!fieldType().indexed()) {
       return null;
diff --git a/lucene/core/src/java/org/apache/lucene/index/SegmentInfo.java b/lucene/core/src/java/org/apache/lucene/index/SegmentInfo.java
index 9ec55e2..6e7807a 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SegmentInfo.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SegmentInfo.java
@@ -165,7 +165,6 @@ public final class SegmentInfo {
     return Collections.unmodifiableSet(setFiles);
   }
 
-  /** {@inheritDoc} */
   @Override
   public String toString() {
     return toString(dir, 0);
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java b/lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java
index ec56389..821d0d5 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java
@@ -168,17 +168,11 @@ public class TestCrashCausesCorruptIndex extends LuceneTestCase  {
       this.crashAfterCreateOutput = name;
     }
         
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public void close() throws IOException {
       realDirectory.close();
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public IndexOutput createOutput(String name, IOContext cxt) throws IOException {
       IndexOutput indexOutput = realDirectory.createOutput(name, cxt);
@@ -194,49 +188,31 @@ public class TestCrashCausesCorruptIndex extends LuceneTestCase  {
       return indexOutput;
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public void deleteFile(String name) throws IOException {
       realDirectory.deleteFile(name);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public boolean fileExists(String name) throws IOException {
       return realDirectory.fileExists(name);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public long fileLength(String name) throws IOException {
       return realDirectory.fileLength(name);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public String[] listAll() throws IOException {
       return realDirectory.listAll();
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public IndexInput openInput(String name, IOContext cxt) throws IOException {
       return realDirectory.openInput(name, cxt);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public void sync(Collection<String> names) throws IOException {
       realDirectory.sync(names);
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.java
index 76c58ac..746c018 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.java
@@ -262,9 +262,7 @@ public abstract class DVGroupFacetCollector extends AbstractGroupFacetCollector
           }
         }
 
-        /**
-         * {@inheritDoc}
-         */
+        @Override
         protected void nextTerm() throws IOException {
           mergeTerm = facetFieldSource.getByOrd(mergePos, spare);
         }
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.java
index 2f5b542..614659e 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.java
@@ -70,9 +70,7 @@ public class FunctionAllGroupHeadsCollector extends AbstractAllGroupHeadsCollect
     }
   }
 
-  /**
-   * {@inheritDoc}
-   */
+  @Override
   protected void retrieveGroupHeadAndAddIfNotExist(int doc) throws IOException {
     filler.fillValue(doc);
     GroupHead groupHead = groups.get(mval);
@@ -87,13 +85,12 @@ public class FunctionAllGroupHeadsCollector extends AbstractAllGroupHeadsCollect
     this.temporalResult.groupHead = groupHead;
   }
 
-   /**
-   * {@inheritDoc}
-   */
+  @Override
   protected Collection<GroupHead> getCollectedGroupHeads() {
     return groups.values();
   }
 
+  @Override
   public void setScorer(Scorer scorer) throws IOException {
     this.scorer = scorer;
     for (GroupHead groupHead : groups.values()) {
@@ -103,6 +100,7 @@ public class FunctionAllGroupHeadsCollector extends AbstractAllGroupHeadsCollect
     }
   }
 
+  @Override
   public void setNextReader(AtomicReaderContext context) throws IOException {
     this.readerContext = context;
     FunctionValues values = groupBy.getValues(vsContext, context);
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector.java
index 12a8cc2..72b8246 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector.java
@@ -61,13 +61,12 @@ public class FunctionAllGroupsCollector extends AbstractAllGroupsCollector<Mutab
     this.groupBy = groupBy;
   }
 
-  /**
-   * {@inheritDoc}
-   */
+  @Override
   public Collection<MutableValue> getGroups() {
     return groups;
   }
 
+  @Override
   public void collect(int doc) throws IOException {
     filler.fillValue(doc);
     if (!groups.contains(mval)) {
@@ -75,9 +74,7 @@ public class FunctionAllGroupsCollector extends AbstractAllGroupsCollector<Mutab
     }
   }
 
-  /**
-   * {@inheritDoc}
-   */
+  @Override
   public void setNextReader(AtomicReaderContext context) throws IOException {
     FunctionValues values = groupBy.getValues(vsContext, context);
     filler = values.getValueFiller();
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector.java
index 430bc42..d2f1d59 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector.java
@@ -64,17 +64,13 @@ public class FunctionSecondPassGroupingCollector extends AbstractSecondPassGroup
     this.vsContext = vsContext;
   }
 
-  /**
-   * {@inheritDoc}
-   */
+  @Override
   protected SearchGroupDocs<MutableValue> retrieveGroup(int doc) throws IOException {
     filler.fillValue(doc);
     return groupMap.get(mval);
   }
 
-  /**
-   * {@inheritDoc}
-   */
+  @Override
   public void setNextReader(AtomicReaderContext readerContext) throws IOException {
     super.setNextReader(readerContext);
     FunctionValues values = groupByVS.getValues(vsContext, readerContext);
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupsCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupsCollector.java
index f2f003d..663c20e 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupsCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupsCollector.java
@@ -82,6 +82,7 @@ public class TermAllGroupsCollector extends AbstractAllGroupsCollector<BytesRef>
     this(groupField, DEFAULT_INITIAL_SIZE);
   }
 
+  @Override
   public void collect(int doc) throws IOException {
     int key = index.getOrd(doc);
     if (!ordSet.exists(key)) {
@@ -91,13 +92,12 @@ public class TermAllGroupsCollector extends AbstractAllGroupsCollector<BytesRef>
     }
   }
 
-  /**
-   * {@inheritDoc}
-   */
+  @Override
   public Collection<BytesRef> getGroups() {
     return groups;
   }
 
+  @Override
   public void setNextReader(AtomicReaderContext context) throws IOException {
     index = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);
 
diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup.java
index 862d9cb..d89d0ac 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup.java
@@ -138,9 +138,6 @@ public class FSTCompletionLookup extends Lookup {
         completion.getFST(), true, exactMatchFirst);
   }
 
-  /**
-   * {@inheritDoc}
-   */
   @Override
   public void build(TermFreqIterator tfit) throws IOException {
     File tempInput = File.createTempFile(

