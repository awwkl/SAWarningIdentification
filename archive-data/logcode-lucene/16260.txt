GitDiffStart: b03e13577ca620ef33cdb3cf3ff1658cfc107cf3 | Thu Mar 3 04:44:00 2011 +0000
diff --git a/solr/src/java/org/apache/solr/schema/SchemaField.java b/solr/src/java/org/apache/solr/schema/SchemaField.java
index 8934c68..9d625bd 100644
--- a/solr/src/java/org/apache/solr/schema/SchemaField.java
+++ b/solr/src/java/org/apache/solr/schema/SchemaField.java
@@ -150,7 +150,6 @@ public final class SchemaField extends FieldProperties {
                               "can not sort on multivalued field: " 
                               + getName());
     }
-    
   }
 
   /** 
diff --git a/solr/src/java/org/apache/solr/schema/TrieDateField.java b/solr/src/java/org/apache/solr/schema/TrieDateField.java
index 5030c85..604d510 100755
--- a/solr/src/java/org/apache/solr/schema/TrieDateField.java
+++ b/solr/src/java/org/apache/solr/schema/TrieDateField.java
@@ -79,7 +79,18 @@ public class TrieDateField extends DateField {
   @Override
   public SortField getSortField(SchemaField field, boolean top) {
     field.checkSortability();
-    return new SortField(new LongValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, CachedArrayCreator.CACHE_VALUES_AND_BITS ), top);
+
+    int flags = CachedArrayCreator.CACHE_VALUES_AND_BITS;
+    boolean sortMissingLast  = field.sortMissingLast();
+    boolean sortMissingFirst = field.sortMissingFirst();
+
+    Object missingValue = null;
+    if( sortMissingLast ) {
+      missingValue = top ? Long.MIN_VALUE : Long.MAX_VALUE;
+    } else if( sortMissingFirst ) {
+      missingValue = top ? Long.MAX_VALUE : Long.MIN_VALUE;
+    }
+    return new SortField(new LongValuesCreator(field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, flags), top).setMissingValue(missingValue);
   }
 
   @Override
diff --git a/solr/src/java/org/apache/solr/schema/TrieField.java b/solr/src/java/org/apache/solr/schema/TrieField.java
index 269aa96..8d3c5bd 100644
--- a/solr/src/java/org/apache/solr/schema/TrieField.java
+++ b/solr/src/java/org/apache/solr/schema/TrieField.java
@@ -127,8 +127,8 @@ public class TrieField extends FieldType {
 
     int flags = CachedArrayCreator.CACHE_VALUES_AND_BITS;
     Object missingValue = null;
-    boolean sortMissingLast  = on( SORT_MISSING_LAST,  properties );
-    boolean sortMissingFirst = on( SORT_MISSING_FIRST, properties );
+    boolean sortMissingLast  = field.sortMissingLast();
+    boolean sortMissingFirst = field.sortMissingFirst();
     
     switch (type) {
       case INTEGER:

