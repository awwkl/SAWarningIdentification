GitDiffStart: 55befa558eeffd55888a20ad1d51d5119f25e6e1 | Fri Oct 9 09:39:12 2015 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 66da8bb..7b166ba 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -177,6 +177,10 @@ Bug Fixes
   terms because they were filtered out by e.g. a FilterCodecReader
   (Trejkaz via Mike McCandless)
 
+* LUCENE-6823: LocalReplicator should use System.nanoTime as its clock
+  source for checking for expiration (Ishan Chattopadhyaya via Mike
+  McCandless)
+
 Other
 
 * LUCENE-6827: Use explicit capacity ArrayList instead of a LinkedList 
diff --git a/lucene/replicator/src/java/org/apache/lucene/replicator/LocalReplicator.java b/lucene/replicator/src/java/org/apache/lucene/replicator/LocalReplicator.java
index 8dd9087..632fd16 100644
--- a/lucene/replicator/src/java/org/apache/lucene/replicator/LocalReplicator.java
+++ b/lucene/replicator/src/java/org/apache/lucene/replicator/LocalReplicator.java
@@ -22,6 +22,7 @@ import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apache.lucene.store.AlreadyClosedException;
@@ -87,15 +88,16 @@ public class LocalReplicator implements Replicator {
     ReplicationSession(SessionToken session, RefCountedRevision revision) {
       this.session = session;
       this.revision = revision;
-      lastAccessTime = System.currentTimeMillis();
+      lastAccessTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);
     }
     
     boolean isExpired(long expirationThreshold) {
-      return lastAccessTime < (System.currentTimeMillis() - expirationThreshold);
+      return lastAccessTime < (TimeUnit.MILLISECONDS.convert(System.nanoTime(), 
+          TimeUnit.NANOSECONDS) - expirationThreshold);
     }
     
     void markAccessed() {
-      lastAccessTime = System.currentTimeMillis();
+      lastAccessTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);
     }
   }
   

