GitDiffStart: 992dab017ec1bf4f043d06887ce2856843a40f50 | Wed Apr 24 22:20:20 2013 +0000
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery.java b/lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery.java
index c046760..401c599 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery.java
@@ -131,8 +131,11 @@ class DrillSidewaysQuery extends Query {
           dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];
           for(int i=0;i<drillDownTerms[dim].length;i++) {
             if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {
-              dims[dim].maxFreq = Math.max(dims[dim].maxFreq, termsEnum.docFreq());
-              dims[dim].docsEnums[i] = termsEnum.docs(null, null);
+              DocsEnum docsEnum = termsEnum.docs(null, null);
+              if (docsEnum != null) {
+                dims[dim].docsEnums[i] = docsEnum;
+                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());
+              }
             }
           }
         }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysScorer.java b/lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysScorer.java
index 0f71275..bde0f9a 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysScorer.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysScorer.java
@@ -107,7 +107,7 @@ class DrillSidewaysScorer extends Scorer {
     /*
     System.out.println("\nbaseDocID=" + baseScorer.docID() + " est=" + estBaseHitCount);
     System.out.println("  maxDoc=" + context.reader().maxDoc());
-    System.out.println("  maxFreq=" + maxFreq);
+    System.out.println("  maxCost=" + maxCost);
     System.out.println("  dims[0].freq=" + dims[0].freq);
     if (numDims > 1) {
       System.out.println("  dims[1].freq=" + dims[1].freq);
@@ -119,7 +119,7 @@ class DrillSidewaysScorer extends Scorer {
       if (baseQueryCost < drillDownCost/10) {
         //System.out.println("baseAdvance");
         doBaseAdvanceScoring(collector, docsEnums, sidewaysCollectors);
-      } else if (numDims > 1 && (dims[1].maxFreq < baseQueryCost/10)) {
+      } else if (numDims > 1 && (dims[1].maxCost < baseQueryCost/10)) {
         //System.out.println("drillDownAdvance");
         doDrillDownAdvanceScoring(collector, docsEnums, sidewaysCollectors);
       } else {
@@ -640,14 +640,20 @@ class DrillSidewaysScorer extends Scorer {
 
   static class DocsEnumsAndFreq implements Comparable<DocsEnumsAndFreq> {
     DocsEnum[] docsEnums;
-    // Max docFreq for all docsEnums for this dim:
-    int maxFreq;
+    // Max cost for all docsEnums for this dim:
+    long maxCost;
     Collector sidewaysCollector;
     String dim;
 
     @Override
     public int compareTo(DocsEnumsAndFreq other) {
-      return maxFreq - other.maxFreq;
+      if (maxCost < other.maxCost) {
+        return -1;
+      } else if (maxCost > other.maxCost) {
+        return 1;
+      } else {
+        return 0;
+      }
     }
   }
 }

