GitDiffStart: 01a568abbb175813c6b245d010e767f8f6386925 | Sat Aug 15 17:35:03 2015 +0000
diff --git a/lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask.java b/lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask.java
index 7fb60b1..511ea8b 100644
--- a/lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask.java
+++ b/lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask.java
@@ -443,13 +443,13 @@ public class GetMavenDependenciesTask extends Task {
     } catch (IOException e) {
       throw new BuildException("Exception reading centralized versions file " + centralizedVersionsFile.getPath(), e);
     } 
-    SortedSet<Map.Entry> sortedEntries = new TreeSet<>(new Comparator<Map.Entry>() {
-      @Override public int compare(Map.Entry o1, Map.Entry o2) {
+    SortedSet<Map.Entry<?,?>> sortedEntries = new TreeSet<>(new Comparator<Map.Entry<?,?>>() {
+      @Override public int compare(Map.Entry<?,?> o1, Map.Entry<?,?> o2) {
         return ((String)o1.getKey()).compareTo((String)o2.getKey());
       }
     });
     sortedEntries.addAll(versions.entrySet());
-    for (Map.Entry entry : sortedEntries) {
+    for (Map.Entry<?,?> entry : sortedEntries) {
       String key = (String)entry.getKey();
       Matcher matcher = COORDINATE_KEY_PATTERN.matcher(key);
       if (matcher.lookingAt()) {
@@ -526,7 +526,7 @@ public class GetMavenDependenciesTask extends Task {
     }
     Map<String,SortedSet<String>> testScopeDependencies = new HashMap<>();
     Map<String, String> testScopePropertyKeys = new HashMap<>();
-    for (Map.Entry entry : moduleDependencies.entrySet()) {
+    for (Map.Entry<?,?> entry : moduleDependencies.entrySet()) {
       String newPropertyKey = (String)entry.getKey();
       StringBuilder newPropertyValue = new StringBuilder();
       String value = (String)entry.getValue();
diff --git a/lucene/tools/src/java/org/apache/lucene/dependencies/InterpolatedProperties.java b/lucene/tools/src/java/org/apache/lucene/dependencies/InterpolatedProperties.java
index c74dbc9..6b9400d 100644
--- a/lucene/tools/src/java/org/apache/lucene/dependencies/InterpolatedProperties.java
+++ b/lucene/tools/src/java/org/apache/lucene/dependencies/InterpolatedProperties.java
@@ -56,7 +56,7 @@ public class InterpolatedProperties extends Properties {
    */
   private void interpolate() {
     StringBuffer buffer = new StringBuffer();
-    for (Map.Entry entry : entrySet()) {
+    for (Map.Entry<?,?> entry : entrySet()) {
       buffer.setLength(0);
       Matcher matcher = PROPERTY_REFERENCE_PATTERN.matcher(entry.getValue().toString());
       while (matcher.find()) {
diff --git a/lucene/tools/src/java/org/apache/lucene/validation/ivyde/IvyNodeElement.java b/lucene/tools/src/java/org/apache/lucene/validation/ivyde/IvyNodeElement.java
index 8e517d0..63ddc20 100644
--- a/lucene/tools/src/java/org/apache/lucene/validation/ivyde/IvyNodeElement.java
+++ b/lucene/tools/src/java/org/apache/lucene/validation/ivyde/IvyNodeElement.java
@@ -86,8 +86,8 @@ public class IvyNodeElement {
    */
   public IvyNodeElement[] getDeepDependencies() {
     if (deepDependencyCache == null) {
-      Collection deepDependencies = getDeepDependencies(this);
-      deepDependencyCache = (IvyNodeElement[])deepDependencies.toArray(new IvyNodeElement[deepDependencies.size()]);
+      Collection<IvyNodeElement> deepDependencies = getDeepDependencies(this);
+      deepDependencyCache = deepDependencies.toArray(new IvyNodeElement[deepDependencies.size()]);
     }
     return deepDependencyCache;
   }
@@ -147,8 +147,8 @@ public class IvyNodeElement {
    */
   public void setDepth(int depth) {
     this.depth = depth;
-    for (Iterator iter = dependencies.iterator(); iter.hasNext();) {
-      IvyNodeElement dependency = (IvyNodeElement) iter.next();
+    for (Iterator<IvyNodeElement> iter = dependencies.iterator(); iter.hasNext();) {
+      IvyNodeElement dependency = iter.next();
       dependency.setDepth(depth + 1);
     }
   }
@@ -157,7 +157,7 @@ public class IvyNodeElement {
     return conflicts.toArray(new IvyNodeElement[conflicts.size()]);
   }
 
-  public void setConflicts(Collection conflicts) {
+  public void setConflicts(Collection<IvyNodeElement> conflicts) {
     this.conflicts = conflicts;
   }
 
diff --git a/lucene/tools/src/java/org/apache/lucene/validation/ivyde/IvyNodeElementAdapter.java b/lucene/tools/src/java/org/apache/lucene/validation/ivyde/IvyNodeElementAdapter.java
index d0d551d..f583d13 100644
--- a/lucene/tools/src/java/org/apache/lucene/validation/ivyde/IvyNodeElementAdapter.java
+++ b/lucene/tools/src/java/org/apache/lucene/validation/ivyde/IvyNodeElementAdapter.java
@@ -54,8 +54,8 @@ public class IvyNodeElementAdapter {
     @SuppressWarnings("unchecked") List<IvyNode> dependencies = report.getDependencies();
 
     // First pass - build the map of resolved nodes by revision id
-    for (Iterator iter = dependencies.iterator(); iter.hasNext();) {
-      IvyNode node = (IvyNode) iter.next();
+    for (Iterator<IvyNode> iter = dependencies.iterator(); iter.hasNext();) {
+      IvyNode node = iter.next();
       if (node.getAllEvictingNodes() != null) {
         // Nodes that are evicted as a result of conf inheritance still appear
         // as dependencies, but with eviction data. They also appear as evictions.
@@ -68,8 +68,8 @@ public class IvyNodeElementAdapter {
     }
 
     // Second pass - establish relationships between the resolved nodes
-    for (Iterator iter = dependencies.iterator(); iter.hasNext();) {
-      IvyNode node = (IvyNode) iter.next();
+    for (Iterator<IvyNode> iter = dependencies.iterator(); iter.hasNext();) {
+      IvyNode node = iter.next();
       if (node.getAllEvictingNodes() != null) {
         continue; // see note above
       }
@@ -124,8 +124,8 @@ public class IvyNodeElementAdapter {
       if (moduleRevisionMap.containsKey(moduleId)) {
         Collection<IvyNodeElement> conflicts = moduleRevisionMap.get(moduleId);
         conflicts.add(deepDependencies[i]);
-        for (Iterator iter = conflicts.iterator(); iter.hasNext();) {
-          IvyNodeElement conflict = (IvyNodeElement) iter.next();
+        for (Iterator<IvyNodeElement> iter = conflicts.iterator(); iter.hasNext();) {
+          IvyNodeElement conflict = iter.next();
           conflict.setConflicts(conflicts);
         }
       } else {

