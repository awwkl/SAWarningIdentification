GitDiffStart: 7405b9772b083c33d53af8dced1c41342cf885b9 | Thu Sep 20 15:37:42 2012 +0000
diff --git a/build.xml b/build.xml
index b69babc..ed44a6e 100644
--- a/build.xml
+++ b/build.xml
@@ -25,7 +25,7 @@
   </target>
 
   <target name="precommit" description="Run basic checks before committing"
-          depends="check-svn-working-copy,validate,javadocs-lint"/>
+          depends="check-svn-working-copy,validate,documentation-lint"/>
 
   <target name="test" description="Test both Lucene and Solr">
     <sequential>
@@ -47,16 +47,16 @@
 
   <target name="javadocs" description="Generate Lucene and Solr javadocs">
     <sequential>
-      <subant target="javadocs" inheritall="false" failonerror="true">
+      <subant target="documentation" inheritall="false" failonerror="true">
         <fileset dir="lucene" includes="build.xml" />
         <fileset dir="solr" includes="build.xml" />
       </subant>
     </sequential>
   </target>
 
-  <target name="javadocs-lint">
+  <target name="documentation-lint">
     <sequential>
-      <subant target="javadocs-lint" inheritall="false" failonerror="true">
+      <subant target="documentation-lint" inheritall="false" failonerror="true">
         <fileset dir="lucene" includes="build.xml" />
         <fileset dir="solr" includes="build.xml" />
       </subant>
@@ -305,7 +305,7 @@
   </target>
 
   <!-- Jenkins tasks -->
-  <target name="jenkins-hourly" depends="clean,test,validate,-jenkins-javadocs-lint,jar-checksums,check-svn-working-copy" description="Runs the Jenkins hourly test runs"/>
+  <target name="jenkins-hourly" depends="clean,test,validate,-jenkins-documentation-lint,jar-checksums,check-svn-working-copy" description="Runs the Jenkins hourly test runs"/>
   
   <target name="jenkins-clover" description="Runs nightly clover builds on Jenkins">
     <antcall target="-jenkins-clover">
@@ -325,11 +325,11 @@
     description="Runs the nightly Maven build on Jenkins, including artifact deployment"/>
   
   <!-- we need this extra condition, as we want to match only on "true", not solely if property is set: -->
-  <property name="disable.javadocs-lint" value="false" />
-  <condition property="-disable.javadocs-lint">
-    <istrue value="${disable.javadocs-lint}"/>
+  <property name="disable.documentation-lint" value="false" />
+  <condition property="-disable.documentation-lint">
+    <istrue value="${disable.documentation-lint}"/>
   </condition>
-  <target name="-jenkins-javadocs-lint" unless="-disable.javadocs-lint">
-    <antcall target="javadocs-lint"/> 
+  <target name="-jenkins-documentation-lint" unless="-disable.documentation-lint">
+    <antcall target="documentation-lint"/> 
   </target>
 </project>
diff --git a/lucene/build.xml b/lucene/build.xml
index 05b2848..3a45c75 100644
--- a/lucene/build.xml
+++ b/lucene/build.xml
@@ -225,7 +225,7 @@
   <target name="javadocs" description="Generate javadoc" depends="javadocs-lucene-core, javadocs-modules, javadocs-test-framework"/>
 
   <!-- we check for broken links across all documentation -->
-  <target name="javadocs-lint" depends="documentation">
+  <target name="documentation-lint" depends="documentation">
     <sequential>
       <check-broken-links dir="build/docs"/>
       <!-- TODO: change this level=class -->
diff --git a/solr/build.xml b/solr/build.xml
index 8d1c5e2..6002388 100644
--- a/solr/build.xml
+++ b/solr/build.xml
@@ -26,7 +26,7 @@
     <echo message="Use 'ant clean' to clean compiled files." />
     <echo message="Use 'ant compile' to compile the source code." />
     <echo message="Use 'ant dist' to build the project WAR and JAR files." />
-    <echo message="Use 'ant javadocs' to build javadocs under build/docs/api" />
+    <echo message="Use 'ant documentation' to build documentation." />
     <echo message="Use 'ant generate-maven-artifacts' to generate maven artifacts." />
     <echo message="Use 'ant package' to generate zip, tgz for distribution." />
     <!--<echo message="Use 'ant luke' to start luke.  see: http://luke.googlecode.com" />-->
@@ -138,15 +138,50 @@
   <target name="compile-test" description="Compile unit tests."
           depends="compile-solr-test-framework, compile-test-solr-core, compile-test-solrj, compile-test-contrib"/>
   <target name="javadocs" description="Calls javadocs-all, javadocs-solrj, and javadocs-test-framework"
-          depends="javadocs-all,javadocs-solrj,javadocs-test-framework"/>
+          depends="javadocs-solr-core,javadocs-solrj,javadocs-test-framework,javadocs-contrib"/>
+  <target name="documentation" description="Generate all documentation"
+    depends="javadocs,changes-to-html,process-webpages"/>
   <target name="compile-core" depends="compile-solr-core" unless="solr.core.compiled"/>
   
+  <target name="process-webpages" depends="resolve-pegdown">
+    <makeurl property="process-webpages.buildfiles" separator="|">
+      <fileset dir="." includes="core/build.xml,test-framework/build.xml,solrj/build.xml,contrib/**/build.xml"/>
+    </makeurl>
+    <!--
+      The XSL input file is ignored completely, but XSL expects one to be given,
+      so we pass ourself (${ant.file}) here. The list of module build.xmls is given
+      via string parameter, that must be splitted by the XSL at '|'.
+    --> 
+    <xslt in="${ant.file}" out="${javadoc.dir}/index.html" style="site/xsl/index.xsl" force="true">
+      <outputproperty name="method" value="html"/>
+      <outputproperty name="version" value="4.0"/>
+      <outputproperty name="encoding" value="UTF-8"/>
+      <outputproperty name="indent" value="yes"/>
+      <param name="buildfiles" expression="${process-webpages.buildfiles}"/>
+      <param name="version" expression="${version}"/>
+    </xslt>
+    
+    <pegdown todir="${javadoc.dir}">
+      <fileset dir="." includes="MIGRATE.txt,JRE_VERSION_MIGRATION.txt"/>
+      <globmapper from="*.txt" to="*.html"/>
+    </pegdown>
+
+    <copy todir="${javadoc.dir}">
+      <fileset dir="site/html" includes="**/*"/>
+    </copy>
+  </target>
+
   <!-- Solr core targets -->
   <target name="test-solr-core" description="Test solr core">
     <ant dir="core" target="test" inheritAll="false">
       <propertyset refid="uptodate.and.compiled.properties"/>
     </ant>
   </target>
+  <target name="javadocs-solr-core">
+    <ant dir="core" target="javadocs" inheritAll="false">
+      <propertyset refid="uptodate.and.compiled.properties"/>
+    </ant>
+  </target>
   
   <!-- Solrj targets -->
   <target name="test-solrj" description="Test java client">
@@ -430,7 +465,7 @@
                             dist/solrj-lib/*
                             dist/test-framework/**"
                   excludes="**/*.tgz **/*.zip **/*.md5 **/*src*.jar **/*docs*.jar **/*.sha1" />
-      <tarfileset dir="${dest}/docs"
+      <tarfileset dir="${javadoc.dir}"
                   prefix="${fullnamever}/docs" />
     </tar>
     <make-checksums file="${package.dir}/${fullnamever}.tgz"/>
@@ -496,66 +531,12 @@
     </sequential>
   </target>
 
-  <!-- since we build across all contribs, we must ensure all deps
-       are resolved -->
-  <target name="javadocs-all"
-          depends="resolve,prep-lucene-jars,javadocs-dep,lucene-javadocs,define-lucene-javadoc-url"
-          description="Generate javadoc for core, java client and contrib">
-    <sequential>
-      <mkdir dir="${dest}/docs/api"/>
- 
-      <!-- TODO: optimize this, thats stupid here: -->
-      <subant target="module-jars-to-solr">
-        <fileset dir="contrib/analysis-extras" includes="build.xml"/>
-      </subant>
-
-      <!-- TODO: optimize this, thats stupid here: -->
-      <subant target="module-jars-to-solr">
-        <fileset dir="contrib/uima" includes="build.xml"/>
-      </subant>
-
-      <path id="javadoc.classpath">
-        <path refid="test.classpath"/>
-        <fileset dir="${dest}/contrib">
-          <include name="**/lucene-libs/**/*.jar"/>
-        </fileset>
-        <fileset dir="contrib">
-          <include name="**/lib/**/*.jar"/>
-          <exclude name="**/analysis-extras/lib/**/*icu4j*.jar"/> <!-- extraction/lib/ has this one -->
-        </fileset>
-        <pathelement location="${dest}/solr-solrj/classes/java"/>
-      </path>
- 
-      <solr-invoke-javadoc destdir="${dest}/docs/api"
-                      overview="core/src/java/overview.html">
-        <solrsources>
-          <packageset dir="core/src/java" />
-          <packageset dir="solrj/src/java" />
-          <packageset dir="contrib/analysis-extras/src/java"/>
-          <packageset dir="contrib/clustering/src/java"/>
-          <packageset dir="contrib/dataimporthandler/src/java"/>
-          <packageset dir="contrib/dataimporthandler-extras/src/java"/>
-          <packageset dir="contrib/extraction/src/java"/>
-          <packageset dir="contrib/langid/src/java"/>
-          <packageset dir="contrib/uima/src/java"/>
-          <group title="Core" packages="org.apache.*" />
-          <group title="SolrJ" packages="org.apache.solr.common.*,org.apache.solr.client.solrj.*,org.apache.zookeeper.*" />
-          <group title="contrib: Clustering" packages="org.apache.solr.handler.clustering*" />
-          <group title="contrib: DataImportHandler" packages="org.apache.solr.handler.dataimport*" />
-          <group title="contrib: Solr Cell" packages="org.apache.solr.handler.extraction*" />
-          <group title="contrib: Solr LangId" packages="org.apache.solr.update.processor.LanguageIdentifier*,org.apache.solr.update.processor.LangIdParams*,org.apache.solr.update.processor.DetectedLanguage*" />
-          <group title="contrib: Solr UIMA" packages="org.apache.solr.uima*" />
-        </solrsources>
-      </solr-invoke-javadoc>
-    </sequential>
-  </target>
-
   <!-- TODO: does solr have any other docs we should check? -->
   <!-- TODO: also integrate checkJavaDocs.py, which does more checks -->
-  <target name="javadocs-lint" depends="javadocs">
-    <check-broken-links dir="build/docs"/>
+  <target name="documentation-lint" depends="documentation">
+    <check-broken-links dir="${javadoc.dir}"/>
     <!-- TODO: add missing package.htmls and bump this to level=package -->
-    <check-missing-javadocs dir="build/docs" level="none"/>
+    <check-missing-javadocs dir="${javadoc.dir}" level="none"/>
   </target>
  
   <!-- install-maven-tasks is *not* a useless dependency. do not remove -->
diff --git a/solr/common-build.xml b/solr/common-build.xml
index 25de573..8d1bae5 100644
--- a/solr/common-build.xml
+++ b/solr/common-build.xml
@@ -37,16 +37,16 @@
   <property name="javac.target" value="1.6"/>
   <property name="javac.args" value=""/>
   
-  <property name="dest" value="${common-solr.dir}/build" />
+  <property name="dest" location="${common-solr.dir}/build" />
   <property name="build.dir" location="${dest}/${ant.project.name}"/>
   <property name="dist" location="${common-solr.dir}/dist"/>
   <property name="package.dir" location="${common-solr.dir}/package"/>
   <property name="maven.dist.dir" location="${package.dir}/maven"/>
   <property name="lucene-libs" location="${dest}/lucene-libs" />
-  <property name="tests.userdir" value="src/test-files"/>
-  <property name="example" value="${common-solr.dir}/example" />
-  <property name="javadoc.dir" location="${build.dir}/docs/api"/>
-  <property name="tests.loggingfile" value="${common-solr.dir}/testlogging.properties"/>
+  <property name="tests.userdir" location="src/test-files"/>
+  <property name="example" location="${common-solr.dir}/example" />
+  <property name="javadoc.dir" location="${dest}/docs"/>
+  <property name="tests.loggingfile" location="${common-solr.dir}/testlogging.properties"/>
   <property name="tests.cleanthreads.sysprop" value="perClass"/>
 
   <property name="changes.target.dir" value="${dest}/docs/changes"/>
@@ -202,20 +202,20 @@
   <!-- create javadocs for the current module -->
   <target name="javadocs" depends="compile-core,define-lucene-javadoc-url,lucene-javadocs">
    	<sequential>
-      <mkdir dir="${javadoc.dir}"/>
+      <mkdir dir="${javadoc.dir}/${name}"/>
       <solr-invoke-javadoc>
         <solrsources>
           <packageset dir="${src.dir}"/>
         </solrsources>
       </solr-invoke-javadoc>
-      <solr-jarify basedir="${javadoc.dir}" destfile="${build.dir}/${final.name}-javadoc.jar"/>
+      <solr-jarify basedir="${javadoc.dir}/${name}" destfile="${build.dir}/${final.name}-javadoc.jar"/>
      </sequential>
   </target>
 
   <!-- macro to create solr javadocs with links to lucene. make sure calling task depends on lucene-javadocs -->
   <macrodef name="solr-invoke-javadoc">
       <element name="solrsources" optional="yes"/>
-      <attribute name="destdir" default="${javadoc.dir}"/>
+      <attribute name="destdir" default="${javadoc.dir}/${name}"/>
       <attribute name="title" default="${Name} ${version} ${name} API"/>
       <attribute name="overview" default="${src.dir}/overview.html"/>
     <sequential>
@@ -393,10 +393,15 @@
   <target name="compile-contrib" description="Compile contrib modules">
   	<contrib-crawl target="compile-core"/>
   </target>
+  
   <target name="compile-test-contrib" description="Compile contrib modules' tests">
   	<contrib-crawl target="compile-test"/>
   </target>
 
+  <target name="javadocs-contrib" description="Compile contrib modules">
+  	<contrib-crawl target="javadocs"/>
+  </target>
+
   <target name="contribs-add-to-war">
     <mkdir dir="${dest}/web"/>
     <delete dir="${dest}/web" includes="**/*" failonerror="false"/>
diff --git a/solr/core/src/java/doc-files/tutorial.html b/solr/core/src/java/doc-files/tutorial.html
deleted file mode 100755
index 988f9a1..0000000
--- a/solr/core/src/java/doc-files/tutorial.html
+++ /dev/null
@@ -1,688 +0,0 @@
-<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--
- Licensed to the Apache Software Foundation (ASF) under one or more
- contributor license agreements.  See the NOTICE file distributed with
- this work for additional information regarding copyright ownership.
- The ASF licenses this file to You under the Apache License, Version 2.0
- (the "License"); you may not use this file except in compliance with
- the License.  You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing, software
- distributed under the License is distributed on an "AS IS" BASIS,
- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- See the License for the specific language governing permissions and
- limitations under the License.
--->
-<html>
-<head>
-<META http-equiv="Content-Type" content="text/html; charset=UTF-8" />
-<title>Solr Tutorial</title>
-<style>
-pre.code {
-  background-color: #D3D3D3;
-  padding: 0.2em;
-}
-.codefrag {
-  font-family: monospace;
-  font-weight:bold;
-}
-</style>
-
-</head>
-<body>
-
-<div id="content">
-<h1>Solr Tutorial</h1>
-
-<a name="N1000E"></a><a name="Overview"></a>
-<h2 class="boxed">Overview</h2>
-<div class="section">
-<p>
-This document covers the basics of running Solr using an example
-schema, and some sample data.
-</p>
-</div>
-
-
-<a name="N10018"></a><a name="Requirements"></a>
-<h2 class="boxed">Requirements</h2>
-<div class="section">
-<p>
-To follow along with this tutorial, you will need...
-</p>
-<ol>
-  
-<li>Java 1.6 or greater.  Some places you can get it are from
-  <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle</a>,
-  <a href="http://openjdk.java.net/">Open JDK</a>, or
-  <a href="http://www.ibm.com/developerworks/java/jdk/">IBM</a>.
-  <ul>
-    <li>Running <span class="codefrag">java -version</span> at the command 
-      line should indicate a version number starting with 1.6.
-    </li>
-    <li>Gnu's GCJ is not supported and does not work with Solr.</li>
-  </ul>
-</li>
-  
-<li>A <a href="http://lucene.apache.org/solr/mirrors-solr-latest-redir.html">Solr release</a>.
-  </li>
-
-</ol>
-</div>
-
-
-<a name="N10040"></a><a name="Getting+Started"></a>
-<h2 class="boxed">Getting Started</h2>
-<div class="section">
-<p>
-<strong>
-Please run the browser showing this tutorial and the Solr server on the same machine so tutorial links will correctly point to your Solr server.
-</strong>
-</p>
-<p>
-Begin by unzipping the Solr release and changing your working directory
-to be the "<span class="codefrag">example</span>" directory.  (Note that the base directory name may vary with the version of Solr downloaded.)  For example, with a shell in UNIX, Cygwin, or MacOS:
-</p>
-<pre class="code">
-user:~solr$ <strong>ls</strong>
-solr-nightly.zip
-user:~solr$ <strong>unzip -q solr-nightly.zip</strong>
-user:~solr$ <strong>cd solr-nightly/example/</strong>
-</pre>
-<p>
-Solr can run in any Java Servlet Container of your choice, but to simplify
-this tutorial, the example index includes a small installation of Jetty.
-</p>
-<p>
-To launch Jetty with the Solr WAR, and the example configs, just run the <span class="codefrag">start.jar</span> ...
-</p>
-<pre class="code">
-user:~/solr/example$ <strong>java -jar start.jar</strong>
-2012-06-06 15:25:59.815:INFO:oejs.Server:jetty-8.1.2.v20120308
-2012-06-06 15:25:59.834:INFO:oejdp.ScanningAppProvider:Deployment monitor .../solr/example/webapps at interval 0
-2012-06-06 15:25:59.839:INFO:oejd.DeploymentManager:Deployable added: .../solr/example/webapps/solr.war
-...
-Jun 6, 2012 3:26:03 PM org.apache.solr.core.SolrCore registerSearcher
-INFO: [collection1] Registered new searcher Searcher@7527e2ee main{StandardDirectoryReader(segments_1:1)}
-</pre>
-<p>
-This will start up the Jetty application server on port 8983, and use your terminal to display the logging information from Solr.
-</p>
-<p>
-You can see that the Solr is running by loading <a href="http://localhost:8983/solr/">http://localhost:8983/solr/</a> in your web browser.  This is the main starting point for Administering Solr.
-</p>
-</div>
-
-
-
-
-<a name="N10078"></a><a name="Indexing+Data"></a>
-<h2 class="boxed">Indexing Data</h2>
-<div class="section">
-<p>
-Your Solr server is up and running, but it doesn't contain any data.  You can
-modify a Solr index by POSTing commands to Solr to add (or
-update) documents, delete documents, and commit pending adds and deletes.  
-These commands can be in a 
-<a href="http://wiki.apache.org/solr/UpdateRequestHandler">variety of formats</a>.
-</p>
-<p>
-The <span class="codefrag">exampledocs</span> directory contains sample files
-showing of the types of commands Solr accepts, as well as a java utility 
-for posting them from the command line (a <span class="codefrag">post.sh</span>
-shell script is also available, but for this tutorial we'll use the 
-cross-platform Java client. Run <span class="codefrag">java -jar post.jar -h</span> so see it's various options).  
-</p>
-<p> To try this, open a new terminal window, enter the exampledocs directory, 
-and run "<span class="codefrag">java -jar post.jar</span>" on some of the XML 
-files in that directory.
-</p>
-<pre class="code">
-user:~/solr/example/exampledocs$ <strong>java -jar post.jar solr.xml monitor.xml</strong>
-SimplePostTool: version 1.4
-SimplePostTool: POSTing files to http://localhost:8983/solr/update..
-SimplePostTool: POSTing file solr.xml
-SimplePostTool: POSTing file monitor.xml
-SimplePostTool: COMMITting Solr index changes..
-</pre>
-<p>
-You have now indexed two documents in Solr, and committed these changes.  
-You can now search for "solr" by loading the <a href="http://localhost:8983/solr/#/collection1/query">"Query" tab</a> in the Admin interface, and entering "solr" in the "q" text box.  Clicking the "Execute Query" button should display the following URL containing one result...
-</p>
-<p>
-<a href="http://localhost:8983/solr/collection1/select?q=solr&amp;wt=xml">http://localhost:8983/solr/collection1/select?q=solr&amp;wt=xml</a>
-
-</p>
-<p>
-You can index all of the sample data, using the following command 
-(assuming your command line shell supports the *.xml notation):
-</p>
-<pre class="code">
-user:~/solr/example/exampledocs$ <strong>java -jar post.jar *.xml</strong>
-SimplePostTool: version 1.4
-SimplePostTool: POSTing files to http://localhost:8983/solr/update..
-SimplePostTool: POSTing file gb18030-example.xml
-SimplePostTool: POSTing file hd.xml
-SimplePostTool: POSTing file ipod_other.xml
-SimplePostTool: POSTing file ipod_video.xml
-...
-SimplePostTool: POSTing file solr.xml
-SimplePostTool: POSTing file utf8-example.xml
-SimplePostTool: POSTing file vidcard.xml
-SimplePostTool: COMMITting Solr index changes..
-</pre>
-<p>
-  ...and now you can search for all sorts of things using the default <a href="http://wiki.apache.org/solr/SolrQuerySyntax">Solr Query Syntax</a> (a superset of the Lucene query syntax)...
-</p>
-<ul>
-  
-<li>
-<a href="http://localhost:8983/solr/#/collection1/query?q=video">video</a>
-</li>
-  
-<li>
-<a href="http://localhost:8983/solr/#/collection1/query?q=name:video">name:video</a>
-</li>
-  
-<li>
-<a href="http://localhost:8983/solr/#/collection1/query?q=%2Bvideo%20%2Bprice%3A[*%20TO%20400]">+video +price:[* TO 400]</a>
-</li>
-
-
-</ul>
-<p></p>
-<p>
-  There are many other different ways to import your data into Solr... one can
-</p>
-<ul>
-  
-<li>Import records from a database using the 
-    <a href="http://wiki.apache.org/solr/DataImportHandler">Data Import Handler (DIH)</a>.
-  </li>
-  
-<li>
-<a href="http://wiki.apache.org/solr/UpdateCSV">Load a CSV file</a> (comma separated values),
-   including those exported by Excel or MySQL.
-  </li> 
-  
-<li>
-<a href="http://wiki.apache.org/solr/UpdateJSON">POST JSON documents</a>
-  
-</li> 
-  
-<li>Index binary documents such as Word and PDF with 
-    <a href="http://wiki.apache.org/solr/ExtractingRequestHandler">Solr Cell</a> (ExtractingRequestHandler).
-  </li>
-  
-<li>
-    Use <a href="http://wiki.apache.org/solr/Solrj">SolrJ</a> for Java or other Solr clients to
-    programatically create documents to send to Solr.
-  </li>
-
-
-</ul>
-</div>
-
-
-
-
-<a name="N100EE"></a><a name="Updating+Data"></a>
-<h2 class="boxed">Updating Data</h2>
-<div class="section">
-<p>
-You may have noticed that even though the file <span class="codefrag">solr.xml</span> has now
-been POSTed to the server twice, you still only get 1 result when searching for
-"solr".  This is because the example <span class="codefrag">schema.xml</span> specifies a "<span class="codefrag">uniqueKey</span>" field
-called "<span class="codefrag">id</span>".  Whenever you POST commands to Solr to add a
-document with the same value for the <span class="codefrag">uniqueKey</span> as an existing document, it
-automatically replaces it for you.  You can see that that has happened by
-looking at the values for <span class="codefrag">numDocs</span> and <span class="codefrag">maxDoc</span> in the
-"CORE"/searcher section of the statistics page...  </p>
-<p>
-
-<a href="http://localhost:8983/solr/#/collection1/plugins/core?entry=searcher">http://localhost:8983/solr/#/collection1/plugins/core?entry=searcher</a>
-
-</p>
-<p>
-  
-<strong><span class="codefrag">numDocs</span></strong> represents the number of searchable documents in the
-  index (and will be larger than the number of XML files since some files
-  contained more than one <span class="codefrag">&lt;doc&gt;</span>). <strong><span class="codefrag">maxDoc</span></strong>
-  may be larger as the <span class="codefrag">maxDoc</span> count includes logically deleted documents that
-  have not yet been removed from the index. You can re-post the sample XML
-  files over and over again as much as you want and <span class="codefrag">numDocs</span> will never
-  increase, because the new documents will constantly be replacing the old.
-</p>
-<p>
-Go ahead and edit the existing XML files to change some of the data, and re-run
-the <span class="codefrag">java -jar post.jar</span> command, you'll see your changes reflected
-in subsequent searches.
-</p>
-<a name="N1012D"></a><a name="Deleting+Data"></a>
-<h3 class="boxed">Deleting Data</h3>
-
-<p>
-You can delete data by POSTing a delete command to the update URL and 
-specifying the value of the document's unique key field, or a query that 
-matches multiple documents (be careful with that one!).  Since these commands
-are smaller, we will specify them right on the command line rather than 
-reference an XML file.
-</p>
-
-<p>Execute the following command to delete a specific document</p>
-<pre class="code">java -Ddata=args -Dcommit=false -jar post.jar "&lt;delete&gt;&lt;id&gt;SP2514N&lt;/id&gt;&lt;/delete&gt;"</pre>
-
-<p>
-Because we have specified "commit=false", a search for <a href="http://localhost:8983/solr/#/collection1/query?q=id:SP2514N">id:SP2514N</a> we still find the document we have deleted.  Since the example configuration uses Solr's "autoCommit" feature Solr will still automatically persist this change to the index, but it will not affect search results until an "openSearcher" commit is explicitly executed.
-</p>
-
-<p>
-Using the <a href="http://localhost:8983/solr/#/collection1/plugins/updatehandler?entry=updateHandler">statistics page</a> 
-for the <span class="codefrag">updateHandler</span> you can observe this delete
-propogate to disk by watching the <span class="codefrag">deletesById</span> 
-value drop to 0 as the <span class="codefrag">cumulative_deletesById</span> 
-and <span class="codefrag">autocommit</span> values increase.
-</p>
-
-<p>
-Here is an example of using delete-by-query to delete anything with
-<a href="http://localhost:8983/solr/collection1/select?q=name:DDR&amp;fl=name">DDR</a> in the name:
-</p>
-<pre class="code">java -Dcommit=false -Ddata=args -jar post.jar "&lt;delete&gt;&lt;query&gt;name:DDR&lt;/query&gt;&lt;/delete&gt;"</pre>
-
-<p>
-You can force a new searcher to be opened to reflect these changes by sending an explicit commit command to Solr:
-</p>
-<pre class="code">java -jar post.jar -</pre>
-
-<p>
-Now re-execute <a href="http://localhost:8983/solr/#/collection1/query?q=id:SP2514N">the previous search</a> 
-and verify that no matching documents are found.  You can also revisit the
-statistics page and observe the changes to both the number of commits in the <a href="http://localhost:8983/solr/#/collection1/plugins/updatehandler?entry=updateHandler">updateHandler</a> and the numDocs in the <a href="http://localhost:8983/solr/#/collection1/plugins/core?entry=searcher">searcher</a>.
-</p>
-
-<p>
-Commits that open a new searcher can be expensive operations so it's best to 
-make many changes to an index in a batch and then send the 
-<span class="codefrag">commit</span> command at the end.  
-There is also an <span class="codefrag">optimize</span> command that does the 
-same things as <span class="codefrag">commit</span>, but also forces all index 
-segments to be merged into a single segment -- this can be very resource 
-intsenive, but may be worthwhile for improving search speed if your index 
-changes very infrequently.
-</p>
-<p>
-All of the update commands can be specified using either <a href="http://wiki.apache.org/solr/UpdateXmlMessages">XML</a> or <a href="http://wiki.apache.org/solr/UpdateJSON">JSON</a>.
-</p>
-
-<p>To continue with the tutorial, re-add any documents you may have deleted by going to the <span class="codefrag">exampledocs</span> directory and executing</p>
-<pre class="code">java -jar post.jar *.xml</pre>
-</div>
-
-
-<a name="N1017C"></a><a name="Querying+Data"></a>
-<h2 class="boxed">Querying Data</h2>
-<div class="section">
-<p>
-    Searches are done via HTTP GET on the <span class="codefrag">select</span> URL with the query string in the <span class="codefrag">q</span> parameter.
-    You can pass a number of optional <a href="http://wiki.apache.org/solr/SearchHandler">request parameters</a>
-    to the request handler to control what information is returned.  For example, you can use the "<span class="codefrag">fl</span>" parameter
-    to control what stored fields are returned, and if the relevancy score is returned:
-  </p>
-<ul>
-      
-<li>
-<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;fl=name,id">q=video&amp;fl=name,id</a>       (return only name and id fields)   </li>
-      
-<li>
-<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;fl=name,id,score">q=video&amp;fl=name,id,score</a>  (return relevancy score as well) </li>
-      
-<li>
-<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;fl=*,score">q=video&amp;fl=*,score</a>        (return all stored fields, as well as relevancy score)  </li>
-      
-<li>
-<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;sort=price desc&amp;fl=name,id,price">q=video&amp;sort=price desc&amp;fl=name,id,price</a>  (add sort specification: sort by price descending) </li>
-      
-<li>
-<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;wt=json">q=video&amp;wt=json</a> (return response in JSON format)  </li>
-    
-</ul>
-<p>
-The <a href="http://localhost:8983/solr/#/collection1/query">query form</a> 
-provided in the web admin interface allows setting various request parameters 
-and is useful when testing or debugging queries.
-</p>
-
-<a name="N101BA"></a><a name="Sorting"></a>
-<h3 class="boxed">Sorting</h3>
-<p>
-      Solr provides a simple method to sort on one or more indexed fields.
-      Use the "<span class="codefrag">sort</span>' parameter to specify "field direction" pairs, separated by commas if there's more than one sort field:
-    </p>
-<ul>
-      
-<li>
-<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;sort=price+desc">q=video&amp;sort=price desc</a>
-</li>
-      
-<li>
-<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;sort=price+asc">q=video&amp;sort=price asc</a>
-</li>
-      
-<li>
-<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;sort=inStock+asc,price+desc">q=video&amp;sort=inStock asc, price desc</a>
-</li>
-    
-</ul>
-<p>
-      "<span class="codefrag">score</span>" can also be used as a field name when specifying a sort:
-    </p>
-<ul>
-      
-<li>
-<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;sort=score+desc">q=video&amp;sort=score desc</a>
-</li>
-      
-<li>
-<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;sort=inStock+asc,score+desc">q=video&amp;sort=inStock asc, score desc</a>
-</li>
-    
-</ul>
-<p>
-      Complex functions may also be used to sort results:
-    </p>
-<ul>
-      
-<li>
-<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;sort=div(popularity,add(price,1))+desc">q=video&amp;sort=div(popularity,add(price,1)) desc</a>
-</li>
-    
-</ul>
-<p>
-      If no sort is specified, the default is <span class="codefrag">score desc</span> to return the matches having the highest relevancy.
-    </p>
-</div>
-
-
-
-<a name="N101FE"></a><a name="Highlighting"></a>
-<h2 class="boxed">Highlighting</h2>
-<div class="section">
-<p>
-    Hit highlighting returns relevent snippets of each returned document, and highlights
-    terms from the query within those context snippets.
-  </p>
-<p>
-    The following example searches for <span class="codefrag">video card</span> and requests
-    highlighting on the fields <span class="codefrag">name,features</span>.  This causes a
-    <span class="codefrag">highlighting</span> section to be added to the response with the
-    words to highlight surrounded with <span class="codefrag">&lt;em&gt;</span> (for emphasis)
-    tags.
-  </p>
-<p>
-    
-<a href="http://localhost:8983/solr/collection1/select/?wt=json&amp;indent=on&amp;q=video+card&amp;fl=name,id&amp;hl=true&amp;hl.fl=name,features">...&amp;q=video card&amp;fl=name,id&amp;hl=true&amp;hl.fl=name,features</a>
-  
-</p>
-<p>
-    More request parameters related to controlling highlighting may be found
-    <a href="http://wiki.apache.org/solr/HighlightingParameters">here</a>.
-  </p>
-</div> <!-- highlighting -->
-
-
-
-<a name="N10227"></a><a name="Faceted+Search"></a>
-<h2 class="boxed">Faceted Search</h2>
-<div class="section">
-<p>
-    Faceted search takes the documents matched by a query and generates counts for various
-    properties or categories.  Links are usually provided that allows users to "drill down" or
-    refine their search results based on the returned categories.
-  </p>
-<p>
-    The following example searches for all documents (<span class="codefrag">*:*</span>) and
-    requests counts by the category field <span class="codefrag">cat</span>.
-  </p>
-<p>
-    
-<a href="http://localhost:8983/solr/collection1/select/?wt=json&amp;indent=on&amp;q=*:*&amp;fl=name&amp;facet=true&amp;facet.field=cat">...&amp;q=*:*&amp;facet=true&amp;facet.field=cat</a>
-  
-</p>
-<p>
-    Notice that although only the first 10 documents are returned in the results list,
-    the facet counts generated are for the complete set of documents that match the query.
-  </p>
-<p>
-    We can facet multiple ways at the same time.  The following example adds a facet on the
-    boolean <span class="codefrag">inStock</span> field:
-  </p>
-<p>
-    
-<a href="http://localhost:8983/solr/collection1/select/?wt=json&amp;indent=on&amp;q=*:*&amp;fl=name&amp;facet=true&amp;facet.field=cat&amp;facet.field=inStock">...&amp;q=*:*&amp;facet=true&amp;facet.field=cat&amp;facet.field=inStock</a>
-  
-</p>
-<p>
-    Solr can also generate counts for arbitrary queries. The following example
-    queries for <span class="codefrag">ipod</span> and shows prices below and above 100 by using
-    range queries on the price field.
-  </p>
-<p>
-    
-<a href="http://localhost:8983/solr/collection1/select/?wt=json&amp;indent=on&amp;q=ipod&amp;fl=name&amp;facet=true&amp;facet.query=price:[0+TO+100]&amp;facet.query=price:[100+TO+*]">...&amp;q=ipod&amp;facet=true&amp;facet.query=price:[0 TO 100]&amp;facet.query=price:[100 TO *]</a>
-  
-</p>
-<p>
-    Solr can even facet by numeric ranges (including dates).  This example requests counts for the manufacture date (<span class="codefrag">manufacturedate_dt</span> field) for each year between 2004 and 2010.
-  </p>
-<p>
-    
-<a href="http://localhost:8983/solr/collection1/select/?wt=json&amp;indent=on&amp;q=*:*&amp;fl=name,manufacturedate_dt&amp;facet=true&amp;facet.range=manufacturedate_dt&amp;facet.range.start=2004-01-01T00:00:00Z&amp;facet.range.end=2010-01-01T00:00:00Z&amp;facet.range.gap=%2b1YEAR">...&amp;q=*:*&amp;facet=true&amp;facet.range=manufacturedate_dt&amp;facet.range.start=2004-01-01T00:00:00Z&amp;facet.range.end=2010-01-01T00:00:00Z&amp;facet.range.gap=+1YEAR</a>
-  
-</p>
-<p>
-    More information on faceted search may be found on the 
-    <a href="http://wiki.apache.org/solr/SolrFacetingOverview">faceting overview</a>
-    and
-    <a href="http://wiki.apache.org/solr/SimpleFacetParameters">faceting parameters</a>
-    pages.
-  </p>
-</div> <!-- faceted search -->
-
-
-
-<a name="N10278"></a><a name="Search+UI"></a>
-<h2 class="boxed">Search UI</h2>
-<div class="section">
-<p>
-Solr includes an example search interface built with <a href="https://wiki.apache.org/solr/VelocityResponseWriter">velocity templating</a>
-that demonstrates many features, including searching, faceting, highlighting,
-autocomplete, and geospatial searching. 
-</p>
-<p>
-Try it out at
-<a href="http://localhost:8983/solr/collection1/browse">http://localhost:8983/solr/collection1/browse</a>
-  
-</p>
-</div> <!-- Search UI -->
-
-
-
-
-<a name="N1028B"></a><a name="Text+Analysis"></a>
-<h2 class="boxed">Text Analysis</h2>
-<div class="section">
-<p>
-    Text fields are typically indexed by breaking the text into words and applying various transformations such as
-    lowercasing, removing plurals, or stemming to increase relevancy.  The same text transformations are normally
-    applied to any queries in order to match what is indexed.
-  </p>
-<p>
-    The <a href="http://wiki.apache.org/solr/SchemaXml">schema</a> defines
-    the fields in the index and what type of analysis is applied to them.  The current schema your collection is using
-    may be viewed directly via the <a href="http://localhost:8983/solr/#/collection1/schema">Schema tab</a> in the Admin UI, or explored dynamicly using the <a href="http://localhost:8983/solr/#/collection1/schema-browser">Schema Browser tab</a>.
-</p>
-<p>
-The best analysis components (tokenization and filtering) for your textual 
-content depends heavily on language.
-As you can see in the <a href="http://localhost:8983/solr/#/collection1/schema-browser?type=text_general">Schema Browser</a>, 
-many of the fields in the example schema are using a 
-<span class="codefrag">fieldType</span> named 
-<span class="codefrag">text_general</span>, which has defaults appropriate for 
-most languages.
-</p>
-
-<p>
-  If you know your textual content is English, as is the case for the example 
-  documents in this tutorial, and you'd like to apply English-specific stemming
-  and stop word removal, as well as split compound words, you can use the 
-  <a href="http://localhost:8983/solr/#/collection1/schema-browser?type=text_en_splitting"><span class="codefrag">text_en_splitting</span></a> fieldType instead.
-  Go ahead and edit the <span class="codefrag">schema.xml</span> in the 
-  <span class="codefrag">solr/example/solr/collection1/conf</span> directory,
-  to use the <span class="codefrag">text_en_splitting</span> fieldType for 
-  the <span class="codefrag">text</span> and 
-  <span class="codefrag">features</span> fields like so:
-</p>
-<pre class="code">
-   &lt;field name="features" <b>type="text_en_splitting"</b> indexed="true" stored="true" multiValued="true"/&gt;
-   ...
-   &lt;field name="text" <b>type="text_en_splitting"</b> indexed="true" stored="false" multiValued="true"/&gt;
-</pre>
-<p>
-  Stop and restart Solr after making these changes and then re-post all of 
-  the example documents using 
-  <span class="codefrag">java -jar post.jar *.xml</span>.  
-  Now queries like the ones listed below will demonstrate English-specific 
-  transformations:
-  </p>
-<ul>
-    
-<li>A search for
-  <a href="http://localhost:8983/solr/collection1/select?q=power-shot&amp;fl=name">power-shot</a>
-  can match <span class="codefrag">PowerShot</span>, and
-  <a href="http://localhost:8983/solr/collection1/select?q=adata&amp;fl=name">adata</a>
-  can match <span class="codefrag">A-DATA</span> by using the 
-  <span class="codefrag">WordDelimiterFilter</span> and <span class="codefrag">LowerCaseFilter</span>.
-</li>
-
-    
-<li>A search for
-  <a href="http://localhost:8983/solr/collection1/select?q=features:recharging&amp;fl=name,features">features:recharging</a>
-  can match <span class="codefrag">Rechargeable</span> using the stemming 
-  features of <span class="codefrag">PorterStemFilter</span>.
-</li>
-
-    
-<li>A search for
-  <a href="http://localhost:8983/solr/collection1/select?q=%221 gigabyte%22&amp;fl=name">"1 gigabyte"</a>
-  can match <span class="codefrag">1GB</span>, and the commonly misspelled
-  <a href="http://localhost:8983/solr/collection1/select?q=pixima&amp;fl=name">pixima</a> can matches <span class="codefrag">Pixma</span> using the 
-  <span class="codefrag">SynonymFilter</span>.
-</li>
-
-  
-</ul>
-<p>A full description of the analysis components, Analyzers, Tokenizers, and TokenFilters
-    available for use is <a href="http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters">here</a>.
-  </p>
-<a name="N1030B"></a><a name="Analysis+Debugging"></a>
-
-
-<h3 class="boxed">Analysis Debugging</h3>
-<p>
-There is a handy <a href="http://localhost:8983/solr/#/collection1/analysis">Analysis tab</a>
-where you can see how a text value is broken down into words by both Index time nad Query time analysis chains for a field or field type.  This page shows the resulting tokens after they pass through each filter in the chains.
-</p>
-<p>
-  <a href="http://localhost:8983/solr/#/collection1/analysis?analysis.fieldvalue=Canon+Power-Shot+SD500&amp;analysis.query=&amp;analysis.fieldtype=text_en_splitting&amp;verbose_output=0">This url</a>
-  shows the tokens created from 
-  "<span class="codefrag">Canon Power-Shot SD500</span>" 
-  using the 
-  <span class="codefrag">text_en_splitting</span> type.  Each section of
-  the table shows the resulting tokens after having passed through the next 
-  <span class="codefrag">TokenFilter</span> in the (Index) analyzer.
-  Notice how both <span class="codefrag">powershot</span> and 
-  <span class="codefrag">power</span>, <span class="codefrag">shot</span> 
-  are indexed, using tokens that have the same "position".
-  (Compare the previous output with
-  <a href="http://localhost:8983/solr/#/collection1/analysis?analysis.fieldvalue=Canon+Power-Shot+SD500&amp;analysis.query=&amp;analysis.fieldtype=text_general&amp;verbose_output=0">The tokens produced using the text_general field type</a>.)
-</p>
-
-<p>
-Mousing over the section label to the left of the section will display the full name of the analyzer component at that stage of the chain.  Toggling the "Verbose Output" checkbox will <a href="http://localhost:8983/solr/#/collection1/analysis?analysis.fieldvalue=Canon+Power-Shot+SD500&amp;analysis.query=&amp;analysis.fieldtype=text_en_splitting&amp;verbose_output=1">show/hide the detailed token attributes</a>.
-</p>
-<p>
-When both <a href="http://localhost:8983/solr/#/collection1/analysis?analysis.fieldvalue=Canon+Power-Shot+SD500&amp;analysis.query=power+shot+sd-500&amp;analysis.fieldtype=text_en_splitting&amp;verbose_output=0">Index and Query</a>
-values are provided, two tables will be displayed side by side showing the 
-results of each chain.  Terms in the Index chain results that are equivilent 
-to the final terms produced by the Query chain will be highlighted.
-</p>
-<p>
-  Other interesting examples:
-</p>
-<ul>
-  <li><a href="http://localhost:8983/solr/#/collection1/analysis?analysis.fieldvalue=A+new+nation%2C+conceived+in+liberty+and+dedicated+to+the+proposition+that+all+men+are+created+equal.%0A&amp;analysis.query=liberties+and+equality&amp;analysis.fieldtype=text_en&amp;verbose_output=0">English stemming and stop-words</a> 
-    using the <span class="codefrag">text_en</span> field type
-  </li>
-  <li><a href="http://localhost:8983/solr/#/collection1/analysis?analysis.fieldtype=text_cjk&amp;analysis.fieldvalue=%EF%BD%B6%EF%BE%80%EF%BD%B6%EF%BE%85&amp;analysis.query=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;verbose_output=1">Half-width katakana normalization with bi-graming</a> 
-    using the <span class="codefrag">text_cjk</span> field type
-  </li>
-  <li><a href="http://localhost:8983/solr/#/collection1/analysis?analysis.fieldtype=text_ja&amp;analysis.fieldvalue=%E7%A7%81%E3%81%AF%E5%88%B6%E9%99%90%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%82%92%E8%B6%85%E3%81%88%E3%82%8B%E3%80%82&amp;verbose_output=1">Japanese morphological decomposition with part-of-speech filtering</a>
-    using the <span class="codefrag">text_ja</span> field type 
-  </li>
-  <li><a href="http://localhost:8983/solr/#/collection1/analysis?analysis.fieldtype=text_ar&amp;analysis.fieldvalue=%D9%84%D8%A7+%D8%A3%D8%AA%D9%83%D9%84%D9%85+%D8%A7%D9%84%D8%B9%D8%B1%D8%A8%D9%8A%D8%A9&amp;verbose_output=1">Arabic stop-words, normalization, and stemming</a>
-    using the <span class="codefrag">text_ar</span> field type 
-  </li>
-</ul>
-
-</div>
-
-
-<a name="N1034D"></a><a name="Conclusion"></a>
-<h2 class="boxed">Conclusion</h2>
-<div class="section">
-<p>
-  Congratulations!  You successfully ran a small Solr instance, added some
-  documents, and made changes to the index and schema.  You learned about queries, text
-  analysis, and the Solr admin interface.  You're ready to start using Solr on
-  your own project!  Continue on with the following steps:
-</p>
-<ul>
-  
-<li>Subscribe to the Solr <a href="http://lucene.apache.org/solr/discussion.html">mailing lists</a>!</li>
-  
-<li>Make a copy of the Solr <span class="codefrag">example</span> directory as a template for your project.</li>
-  
-<li>Customize the schema and other config in <span class="codefrag">solr/collection1/conf/</span> to meet your needs.</li> 
-
-</ul>
-<p>
-  Solr has a ton of other features that we haven't touched on here, including
-  <a href="http://wiki.apache.org/solr/DistributedSearch">distributed search</a>
-  to handle huge document collections,
-  <a href="http://wiki.apache.org/solr/FunctionQuery">function queries</a>,
-  <a href="http://wiki.apache.org/solr/StatsComponent">numeric field statistics</a>,
-  and
-  <a href="http://wiki.apache.org/solr/ClusteringComponent">search results clustering</a>.
-  Explore the <a href="http://wiki.apache.org/solr/FrontPage">Solr Wiki</a> to find
-  more details about Solr's many <a href="http://lucene.apache.org/solr/features.html">features</a>.
-</p>
-<p>
-  Have Fun, and we'll see you on the Solr mailing lists!
-</p>
-</div>
-
-</div>
-
-<div class="clearboth">&nbsp;</div>
-
-<div id="footer">
-<div class="copyright">
-        Copyright &copy;
-         2012 <a href="http://www.apache.org/licenses/">The Apache Software Foundation.</a>
-</div>
-</div>
-</body>
-</html>
diff --git a/solr/core/src/java/overview.html b/solr/core/src/java/overview.html
index f73c36f..83f5070 100644
--- a/solr/core/src/java/overview.html
+++ b/solr/core/src/java/overview.html
@@ -16,6 +16,6 @@
 -->
 <html>
 <body>
-Apache Solr Search Server, new users should familiarize themselves with the <a href="doc-files/tutorial.html">Solr Tutorial</a>.
+Apache Solr Search Server (Core Javadocs).
 </body>
 </html>
diff --git a/solr/site/html/solr.png b/solr/site/html/solr.png
new file mode 100644
index 0000000..05f1abd
Binary files /dev/null and b/solr/site/html/solr.png differ
diff --git a/solr/site/html/tutorial.html b/solr/site/html/tutorial.html
new file mode 100755
index 0000000..988f9a1
--- /dev/null
+++ b/solr/site/html/tutorial.html
@@ -0,0 +1,688 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--
+ Licensed to the Apache Software Foundation (ASF) under one or more
+ contributor license agreements.  See the NOTICE file distributed with
+ this work for additional information regarding copyright ownership.
+ The ASF licenses this file to You under the Apache License, Version 2.0
+ (the "License"); you may not use this file except in compliance with
+ the License.  You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+<html>
+<head>
+<META http-equiv="Content-Type" content="text/html; charset=UTF-8" />
+<title>Solr Tutorial</title>
+<style>
+pre.code {
+  background-color: #D3D3D3;
+  padding: 0.2em;
+}
+.codefrag {
+  font-family: monospace;
+  font-weight:bold;
+}
+</style>
+
+</head>
+<body>
+
+<div id="content">
+<h1>Solr Tutorial</h1>
+
+<a name="N1000E"></a><a name="Overview"></a>
+<h2 class="boxed">Overview</h2>
+<div class="section">
+<p>
+This document covers the basics of running Solr using an example
+schema, and some sample data.
+</p>
+</div>
+
+
+<a name="N10018"></a><a name="Requirements"></a>
+<h2 class="boxed">Requirements</h2>
+<div class="section">
+<p>
+To follow along with this tutorial, you will need...
+</p>
+<ol>
+  
+<li>Java 1.6 or greater.  Some places you can get it are from
+  <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle</a>,
+  <a href="http://openjdk.java.net/">Open JDK</a>, or
+  <a href="http://www.ibm.com/developerworks/java/jdk/">IBM</a>.
+  <ul>
+    <li>Running <span class="codefrag">java -version</span> at the command 
+      line should indicate a version number starting with 1.6.
+    </li>
+    <li>Gnu's GCJ is not supported and does not work with Solr.</li>
+  </ul>
+</li>
+  
+<li>A <a href="http://lucene.apache.org/solr/mirrors-solr-latest-redir.html">Solr release</a>.
+  </li>
+
+</ol>
+</div>
+
+
+<a name="N10040"></a><a name="Getting+Started"></a>
+<h2 class="boxed">Getting Started</h2>
+<div class="section">
+<p>
+<strong>
+Please run the browser showing this tutorial and the Solr server on the same machine so tutorial links will correctly point to your Solr server.
+</strong>
+</p>
+<p>
+Begin by unzipping the Solr release and changing your working directory
+to be the "<span class="codefrag">example</span>" directory.  (Note that the base directory name may vary with the version of Solr downloaded.)  For example, with a shell in UNIX, Cygwin, or MacOS:
+</p>
+<pre class="code">
+user:~solr$ <strong>ls</strong>
+solr-nightly.zip
+user:~solr$ <strong>unzip -q solr-nightly.zip</strong>
+user:~solr$ <strong>cd solr-nightly/example/</strong>
+</pre>
+<p>
+Solr can run in any Java Servlet Container of your choice, but to simplify
+this tutorial, the example index includes a small installation of Jetty.
+</p>
+<p>
+To launch Jetty with the Solr WAR, and the example configs, just run the <span class="codefrag">start.jar</span> ...
+</p>
+<pre class="code">
+user:~/solr/example$ <strong>java -jar start.jar</strong>
+2012-06-06 15:25:59.815:INFO:oejs.Server:jetty-8.1.2.v20120308
+2012-06-06 15:25:59.834:INFO:oejdp.ScanningAppProvider:Deployment monitor .../solr/example/webapps at interval 0
+2012-06-06 15:25:59.839:INFO:oejd.DeploymentManager:Deployable added: .../solr/example/webapps/solr.war
+...
+Jun 6, 2012 3:26:03 PM org.apache.solr.core.SolrCore registerSearcher
+INFO: [collection1] Registered new searcher Searcher@7527e2ee main{StandardDirectoryReader(segments_1:1)}
+</pre>
+<p>
+This will start up the Jetty application server on port 8983, and use your terminal to display the logging information from Solr.
+</p>
+<p>
+You can see that the Solr is running by loading <a href="http://localhost:8983/solr/">http://localhost:8983/solr/</a> in your web browser.  This is the main starting point for Administering Solr.
+</p>
+</div>
+
+
+
+
+<a name="N10078"></a><a name="Indexing+Data"></a>
+<h2 class="boxed">Indexing Data</h2>
+<div class="section">
+<p>
+Your Solr server is up and running, but it doesn't contain any data.  You can
+modify a Solr index by POSTing commands to Solr to add (or
+update) documents, delete documents, and commit pending adds and deletes.  
+These commands can be in a 
+<a href="http://wiki.apache.org/solr/UpdateRequestHandler">variety of formats</a>.
+</p>
+<p>
+The <span class="codefrag">exampledocs</span> directory contains sample files
+showing of the types of commands Solr accepts, as well as a java utility 
+for posting them from the command line (a <span class="codefrag">post.sh</span>
+shell script is also available, but for this tutorial we'll use the 
+cross-platform Java client. Run <span class="codefrag">java -jar post.jar -h</span> so see it's various options).  
+</p>
+<p> To try this, open a new terminal window, enter the exampledocs directory, 
+and run "<span class="codefrag">java -jar post.jar</span>" on some of the XML 
+files in that directory.
+</p>
+<pre class="code">
+user:~/solr/example/exampledocs$ <strong>java -jar post.jar solr.xml monitor.xml</strong>
+SimplePostTool: version 1.4
+SimplePostTool: POSTing files to http://localhost:8983/solr/update..
+SimplePostTool: POSTing file solr.xml
+SimplePostTool: POSTing file monitor.xml
+SimplePostTool: COMMITting Solr index changes..
+</pre>
+<p>
+You have now indexed two documents in Solr, and committed these changes.  
+You can now search for "solr" by loading the <a href="http://localhost:8983/solr/#/collection1/query">"Query" tab</a> in the Admin interface, and entering "solr" in the "q" text box.  Clicking the "Execute Query" button should display the following URL containing one result...
+</p>
+<p>
+<a href="http://localhost:8983/solr/collection1/select?q=solr&amp;wt=xml">http://localhost:8983/solr/collection1/select?q=solr&amp;wt=xml</a>
+
+</p>
+<p>
+You can index all of the sample data, using the following command 
+(assuming your command line shell supports the *.xml notation):
+</p>
+<pre class="code">
+user:~/solr/example/exampledocs$ <strong>java -jar post.jar *.xml</strong>
+SimplePostTool: version 1.4
+SimplePostTool: POSTing files to http://localhost:8983/solr/update..
+SimplePostTool: POSTing file gb18030-example.xml
+SimplePostTool: POSTing file hd.xml
+SimplePostTool: POSTing file ipod_other.xml
+SimplePostTool: POSTing file ipod_video.xml
+...
+SimplePostTool: POSTing file solr.xml
+SimplePostTool: POSTing file utf8-example.xml
+SimplePostTool: POSTing file vidcard.xml
+SimplePostTool: COMMITting Solr index changes..
+</pre>
+<p>
+  ...and now you can search for all sorts of things using the default <a href="http://wiki.apache.org/solr/SolrQuerySyntax">Solr Query Syntax</a> (a superset of the Lucene query syntax)...
+</p>
+<ul>
+  
+<li>
+<a href="http://localhost:8983/solr/#/collection1/query?q=video">video</a>
+</li>
+  
+<li>
+<a href="http://localhost:8983/solr/#/collection1/query?q=name:video">name:video</a>
+</li>
+  
+<li>
+<a href="http://localhost:8983/solr/#/collection1/query?q=%2Bvideo%20%2Bprice%3A[*%20TO%20400]">+video +price:[* TO 400]</a>
+</li>
+
+
+</ul>
+<p></p>
+<p>
+  There are many other different ways to import your data into Solr... one can
+</p>
+<ul>
+  
+<li>Import records from a database using the 
+    <a href="http://wiki.apache.org/solr/DataImportHandler">Data Import Handler (DIH)</a>.
+  </li>
+  
+<li>
+<a href="http://wiki.apache.org/solr/UpdateCSV">Load a CSV file</a> (comma separated values),
+   including those exported by Excel or MySQL.
+  </li> 
+  
+<li>
+<a href="http://wiki.apache.org/solr/UpdateJSON">POST JSON documents</a>
+  
+</li> 
+  
+<li>Index binary documents such as Word and PDF with 
+    <a href="http://wiki.apache.org/solr/ExtractingRequestHandler">Solr Cell</a> (ExtractingRequestHandler).
+  </li>
+  
+<li>
+    Use <a href="http://wiki.apache.org/solr/Solrj">SolrJ</a> for Java or other Solr clients to
+    programatically create documents to send to Solr.
+  </li>
+
+
+</ul>
+</div>
+
+
+
+
+<a name="N100EE"></a><a name="Updating+Data"></a>
+<h2 class="boxed">Updating Data</h2>
+<div class="section">
+<p>
+You may have noticed that even though the file <span class="codefrag">solr.xml</span> has now
+been POSTed to the server twice, you still only get 1 result when searching for
+"solr".  This is because the example <span class="codefrag">schema.xml</span> specifies a "<span class="codefrag">uniqueKey</span>" field
+called "<span class="codefrag">id</span>".  Whenever you POST commands to Solr to add a
+document with the same value for the <span class="codefrag">uniqueKey</span> as an existing document, it
+automatically replaces it for you.  You can see that that has happened by
+looking at the values for <span class="codefrag">numDocs</span> and <span class="codefrag">maxDoc</span> in the
+"CORE"/searcher section of the statistics page...  </p>
+<p>
+
+<a href="http://localhost:8983/solr/#/collection1/plugins/core?entry=searcher">http://localhost:8983/solr/#/collection1/plugins/core?entry=searcher</a>
+
+</p>
+<p>
+  
+<strong><span class="codefrag">numDocs</span></strong> represents the number of searchable documents in the
+  index (and will be larger than the number of XML files since some files
+  contained more than one <span class="codefrag">&lt;doc&gt;</span>). <strong><span class="codefrag">maxDoc</span></strong>
+  may be larger as the <span class="codefrag">maxDoc</span> count includes logically deleted documents that
+  have not yet been removed from the index. You can re-post the sample XML
+  files over and over again as much as you want and <span class="codefrag">numDocs</span> will never
+  increase, because the new documents will constantly be replacing the old.
+</p>
+<p>
+Go ahead and edit the existing XML files to change some of the data, and re-run
+the <span class="codefrag">java -jar post.jar</span> command, you'll see your changes reflected
+in subsequent searches.
+</p>
+<a name="N1012D"></a><a name="Deleting+Data"></a>
+<h3 class="boxed">Deleting Data</h3>
+
+<p>
+You can delete data by POSTing a delete command to the update URL and 
+specifying the value of the document's unique key field, or a query that 
+matches multiple documents (be careful with that one!).  Since these commands
+are smaller, we will specify them right on the command line rather than 
+reference an XML file.
+</p>
+
+<p>Execute the following command to delete a specific document</p>
+<pre class="code">java -Ddata=args -Dcommit=false -jar post.jar "&lt;delete&gt;&lt;id&gt;SP2514N&lt;/id&gt;&lt;/delete&gt;"</pre>
+
+<p>
+Because we have specified "commit=false", a search for <a href="http://localhost:8983/solr/#/collection1/query?q=id:SP2514N">id:SP2514N</a> we still find the document we have deleted.  Since the example configuration uses Solr's "autoCommit" feature Solr will still automatically persist this change to the index, but it will not affect search results until an "openSearcher" commit is explicitly executed.
+</p>
+
+<p>
+Using the <a href="http://localhost:8983/solr/#/collection1/plugins/updatehandler?entry=updateHandler">statistics page</a> 
+for the <span class="codefrag">updateHandler</span> you can observe this delete
+propogate to disk by watching the <span class="codefrag">deletesById</span> 
+value drop to 0 as the <span class="codefrag">cumulative_deletesById</span> 
+and <span class="codefrag">autocommit</span> values increase.
+</p>
+
+<p>
+Here is an example of using delete-by-query to delete anything with
+<a href="http://localhost:8983/solr/collection1/select?q=name:DDR&amp;fl=name">DDR</a> in the name:
+</p>
+<pre class="code">java -Dcommit=false -Ddata=args -jar post.jar "&lt;delete&gt;&lt;query&gt;name:DDR&lt;/query&gt;&lt;/delete&gt;"</pre>
+
+<p>
+You can force a new searcher to be opened to reflect these changes by sending an explicit commit command to Solr:
+</p>
+<pre class="code">java -jar post.jar -</pre>
+
+<p>
+Now re-execute <a href="http://localhost:8983/solr/#/collection1/query?q=id:SP2514N">the previous search</a> 
+and verify that no matching documents are found.  You can also revisit the
+statistics page and observe the changes to both the number of commits in the <a href="http://localhost:8983/solr/#/collection1/plugins/updatehandler?entry=updateHandler">updateHandler</a> and the numDocs in the <a href="http://localhost:8983/solr/#/collection1/plugins/core?entry=searcher">searcher</a>.
+</p>
+
+<p>
+Commits that open a new searcher can be expensive operations so it's best to 
+make many changes to an index in a batch and then send the 
+<span class="codefrag">commit</span> command at the end.  
+There is also an <span class="codefrag">optimize</span> command that does the 
+same things as <span class="codefrag">commit</span>, but also forces all index 
+segments to be merged into a single segment -- this can be very resource 
+intsenive, but may be worthwhile for improving search speed if your index 
+changes very infrequently.
+</p>
+<p>
+All of the update commands can be specified using either <a href="http://wiki.apache.org/solr/UpdateXmlMessages">XML</a> or <a href="http://wiki.apache.org/solr/UpdateJSON">JSON</a>.
+</p>
+
+<p>To continue with the tutorial, re-add any documents you may have deleted by going to the <span class="codefrag">exampledocs</span> directory and executing</p>
+<pre class="code">java -jar post.jar *.xml</pre>
+</div>
+
+
+<a name="N1017C"></a><a name="Querying+Data"></a>
+<h2 class="boxed">Querying Data</h2>
+<div class="section">
+<p>
+    Searches are done via HTTP GET on the <span class="codefrag">select</span> URL with the query string in the <span class="codefrag">q</span> parameter.
+    You can pass a number of optional <a href="http://wiki.apache.org/solr/SearchHandler">request parameters</a>
+    to the request handler to control what information is returned.  For example, you can use the "<span class="codefrag">fl</span>" parameter
+    to control what stored fields are returned, and if the relevancy score is returned:
+  </p>
+<ul>
+      
+<li>
+<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;fl=name,id">q=video&amp;fl=name,id</a>       (return only name and id fields)   </li>
+      
+<li>
+<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;fl=name,id,score">q=video&amp;fl=name,id,score</a>  (return relevancy score as well) </li>
+      
+<li>
+<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;fl=*,score">q=video&amp;fl=*,score</a>        (return all stored fields, as well as relevancy score)  </li>
+      
+<li>
+<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;sort=price desc&amp;fl=name,id,price">q=video&amp;sort=price desc&amp;fl=name,id,price</a>  (add sort specification: sort by price descending) </li>
+      
+<li>
+<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;wt=json">q=video&amp;wt=json</a> (return response in JSON format)  </li>
+    
+</ul>
+<p>
+The <a href="http://localhost:8983/solr/#/collection1/query">query form</a> 
+provided in the web admin interface allows setting various request parameters 
+and is useful when testing or debugging queries.
+</p>
+
+<a name="N101BA"></a><a name="Sorting"></a>
+<h3 class="boxed">Sorting</h3>
+<p>
+      Solr provides a simple method to sort on one or more indexed fields.
+      Use the "<span class="codefrag">sort</span>' parameter to specify "field direction" pairs, separated by commas if there's more than one sort field:
+    </p>
+<ul>
+      
+<li>
+<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;sort=price+desc">q=video&amp;sort=price desc</a>
+</li>
+      
+<li>
+<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;sort=price+asc">q=video&amp;sort=price asc</a>
+</li>
+      
+<li>
+<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;sort=inStock+asc,price+desc">q=video&amp;sort=inStock asc, price desc</a>
+</li>
+    
+</ul>
+<p>
+      "<span class="codefrag">score</span>" can also be used as a field name when specifying a sort:
+    </p>
+<ul>
+      
+<li>
+<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;sort=score+desc">q=video&amp;sort=score desc</a>
+</li>
+      
+<li>
+<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;sort=inStock+asc,score+desc">q=video&amp;sort=inStock asc, score desc</a>
+</li>
+    
+</ul>
+<p>
+      Complex functions may also be used to sort results:
+    </p>
+<ul>
+      
+<li>
+<a href="http://localhost:8983/solr/collection1/select/?indent=on&amp;q=video&amp;sort=div(popularity,add(price,1))+desc">q=video&amp;sort=div(popularity,add(price,1)) desc</a>
+</li>
+    
+</ul>
+<p>
+      If no sort is specified, the default is <span class="codefrag">score desc</span> to return the matches having the highest relevancy.
+    </p>
+</div>
+
+
+
+<a name="N101FE"></a><a name="Highlighting"></a>
+<h2 class="boxed">Highlighting</h2>
+<div class="section">
+<p>
+    Hit highlighting returns relevent snippets of each returned document, and highlights
+    terms from the query within those context snippets.
+  </p>
+<p>
+    The following example searches for <span class="codefrag">video card</span> and requests
+    highlighting on the fields <span class="codefrag">name,features</span>.  This causes a
+    <span class="codefrag">highlighting</span> section to be added to the response with the
+    words to highlight surrounded with <span class="codefrag">&lt;em&gt;</span> (for emphasis)
+    tags.
+  </p>
+<p>
+    
+<a href="http://localhost:8983/solr/collection1/select/?wt=json&amp;indent=on&amp;q=video+card&amp;fl=name,id&amp;hl=true&amp;hl.fl=name,features">...&amp;q=video card&amp;fl=name,id&amp;hl=true&amp;hl.fl=name,features</a>
+  
+</p>
+<p>
+    More request parameters related to controlling highlighting may be found
+    <a href="http://wiki.apache.org/solr/HighlightingParameters">here</a>.
+  </p>
+</div> <!-- highlighting -->
+
+
+
+<a name="N10227"></a><a name="Faceted+Search"></a>
+<h2 class="boxed">Faceted Search</h2>
+<div class="section">
+<p>
+    Faceted search takes the documents matched by a query and generates counts for various
+    properties or categories.  Links are usually provided that allows users to "drill down" or
+    refine their search results based on the returned categories.
+  </p>
+<p>
+    The following example searches for all documents (<span class="codefrag">*:*</span>) and
+    requests counts by the category field <span class="codefrag">cat</span>.
+  </p>
+<p>
+    
+<a href="http://localhost:8983/solr/collection1/select/?wt=json&amp;indent=on&amp;q=*:*&amp;fl=name&amp;facet=true&amp;facet.field=cat">...&amp;q=*:*&amp;facet=true&amp;facet.field=cat</a>
+  
+</p>
+<p>
+    Notice that although only the first 10 documents are returned in the results list,
+    the facet counts generated are for the complete set of documents that match the query.
+  </p>
+<p>
+    We can facet multiple ways at the same time.  The following example adds a facet on the
+    boolean <span class="codefrag">inStock</span> field:
+  </p>
+<p>
+    
+<a href="http://localhost:8983/solr/collection1/select/?wt=json&amp;indent=on&amp;q=*:*&amp;fl=name&amp;facet=true&amp;facet.field=cat&amp;facet.field=inStock">...&amp;q=*:*&amp;facet=true&amp;facet.field=cat&amp;facet.field=inStock</a>
+  
+</p>
+<p>
+    Solr can also generate counts for arbitrary queries. The following example
+    queries for <span class="codefrag">ipod</span> and shows prices below and above 100 by using
+    range queries on the price field.
+  </p>
+<p>
+    
+<a href="http://localhost:8983/solr/collection1/select/?wt=json&amp;indent=on&amp;q=ipod&amp;fl=name&amp;facet=true&amp;facet.query=price:[0+TO+100]&amp;facet.query=price:[100+TO+*]">...&amp;q=ipod&amp;facet=true&amp;facet.query=price:[0 TO 100]&amp;facet.query=price:[100 TO *]</a>
+  
+</p>
+<p>
+    Solr can even facet by numeric ranges (including dates).  This example requests counts for the manufacture date (<span class="codefrag">manufacturedate_dt</span> field) for each year between 2004 and 2010.
+  </p>
+<p>
+    
+<a href="http://localhost:8983/solr/collection1/select/?wt=json&amp;indent=on&amp;q=*:*&amp;fl=name,manufacturedate_dt&amp;facet=true&amp;facet.range=manufacturedate_dt&amp;facet.range.start=2004-01-01T00:00:00Z&amp;facet.range.end=2010-01-01T00:00:00Z&amp;facet.range.gap=%2b1YEAR">...&amp;q=*:*&amp;facet=true&amp;facet.range=manufacturedate_dt&amp;facet.range.start=2004-01-01T00:00:00Z&amp;facet.range.end=2010-01-01T00:00:00Z&amp;facet.range.gap=+1YEAR</a>
+  
+</p>
+<p>
+    More information on faceted search may be found on the 
+    <a href="http://wiki.apache.org/solr/SolrFacetingOverview">faceting overview</a>
+    and
+    <a href="http://wiki.apache.org/solr/SimpleFacetParameters">faceting parameters</a>
+    pages.
+  </p>
+</div> <!-- faceted search -->
+
+
+
+<a name="N10278"></a><a name="Search+UI"></a>
+<h2 class="boxed">Search UI</h2>
+<div class="section">
+<p>
+Solr includes an example search interface built with <a href="https://wiki.apache.org/solr/VelocityResponseWriter">velocity templating</a>
+that demonstrates many features, including searching, faceting, highlighting,
+autocomplete, and geospatial searching. 
+</p>
+<p>
+Try it out at
+<a href="http://localhost:8983/solr/collection1/browse">http://localhost:8983/solr/collection1/browse</a>
+  
+</p>
+</div> <!-- Search UI -->
+
+
+
+
+<a name="N1028B"></a><a name="Text+Analysis"></a>
+<h2 class="boxed">Text Analysis</h2>
+<div class="section">
+<p>
+    Text fields are typically indexed by breaking the text into words and applying various transformations such as
+    lowercasing, removing plurals, or stemming to increase relevancy.  The same text transformations are normally
+    applied to any queries in order to match what is indexed.
+  </p>
+<p>
+    The <a href="http://wiki.apache.org/solr/SchemaXml">schema</a> defines
+    the fields in the index and what type of analysis is applied to them.  The current schema your collection is using
+    may be viewed directly via the <a href="http://localhost:8983/solr/#/collection1/schema">Schema tab</a> in the Admin UI, or explored dynamicly using the <a href="http://localhost:8983/solr/#/collection1/schema-browser">Schema Browser tab</a>.
+</p>
+<p>
+The best analysis components (tokenization and filtering) for your textual 
+content depends heavily on language.
+As you can see in the <a href="http://localhost:8983/solr/#/collection1/schema-browser?type=text_general">Schema Browser</a>, 
+many of the fields in the example schema are using a 
+<span class="codefrag">fieldType</span> named 
+<span class="codefrag">text_general</span>, which has defaults appropriate for 
+most languages.
+</p>
+
+<p>
+  If you know your textual content is English, as is the case for the example 
+  documents in this tutorial, and you'd like to apply English-specific stemming
+  and stop word removal, as well as split compound words, you can use the 
+  <a href="http://localhost:8983/solr/#/collection1/schema-browser?type=text_en_splitting"><span class="codefrag">text_en_splitting</span></a> fieldType instead.
+  Go ahead and edit the <span class="codefrag">schema.xml</span> in the 
+  <span class="codefrag">solr/example/solr/collection1/conf</span> directory,
+  to use the <span class="codefrag">text_en_splitting</span> fieldType for 
+  the <span class="codefrag">text</span> and 
+  <span class="codefrag">features</span> fields like so:
+</p>
+<pre class="code">
+   &lt;field name="features" <b>type="text_en_splitting"</b> indexed="true" stored="true" multiValued="true"/&gt;
+   ...
+   &lt;field name="text" <b>type="text_en_splitting"</b> indexed="true" stored="false" multiValued="true"/&gt;
+</pre>
+<p>
+  Stop and restart Solr after making these changes and then re-post all of 
+  the example documents using 
+  <span class="codefrag">java -jar post.jar *.xml</span>.  
+  Now queries like the ones listed below will demonstrate English-specific 
+  transformations:
+  </p>
+<ul>
+    
+<li>A search for
+  <a href="http://localhost:8983/solr/collection1/select?q=power-shot&amp;fl=name">power-shot</a>
+  can match <span class="codefrag">PowerShot</span>, and
+  <a href="http://localhost:8983/solr/collection1/select?q=adata&amp;fl=name">adata</a>
+  can match <span class="codefrag">A-DATA</span> by using the 
+  <span class="codefrag">WordDelimiterFilter</span> and <span class="codefrag">LowerCaseFilter</span>.
+</li>
+
+    
+<li>A search for
+  <a href="http://localhost:8983/solr/collection1/select?q=features:recharging&amp;fl=name,features">features:recharging</a>
+  can match <span class="codefrag">Rechargeable</span> using the stemming 
+  features of <span class="codefrag">PorterStemFilter</span>.
+</li>
+
+    
+<li>A search for
+  <a href="http://localhost:8983/solr/collection1/select?q=%221 gigabyte%22&amp;fl=name">"1 gigabyte"</a>
+  can match <span class="codefrag">1GB</span>, and the commonly misspelled
+  <a href="http://localhost:8983/solr/collection1/select?q=pixima&amp;fl=name">pixima</a> can matches <span class="codefrag">Pixma</span> using the 
+  <span class="codefrag">SynonymFilter</span>.
+</li>
+
+  
+</ul>
+<p>A full description of the analysis components, Analyzers, Tokenizers, and TokenFilters
+    available for use is <a href="http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters">here</a>.
+  </p>
+<a name="N1030B"></a><a name="Analysis+Debugging"></a>
+
+
+<h3 class="boxed">Analysis Debugging</h3>
+<p>
+There is a handy <a href="http://localhost:8983/solr/#/collection1/analysis">Analysis tab</a>
+where you can see how a text value is broken down into words by both Index time nad Query time analysis chains for a field or field type.  This page shows the resulting tokens after they pass through each filter in the chains.
+</p>
+<p>
+  <a href="http://localhost:8983/solr/#/collection1/analysis?analysis.fieldvalue=Canon+Power-Shot+SD500&amp;analysis.query=&amp;analysis.fieldtype=text_en_splitting&amp;verbose_output=0">This url</a>
+  shows the tokens created from 
+  "<span class="codefrag">Canon Power-Shot SD500</span>" 
+  using the 
+  <span class="codefrag">text_en_splitting</span> type.  Each section of
+  the table shows the resulting tokens after having passed through the next 
+  <span class="codefrag">TokenFilter</span> in the (Index) analyzer.
+  Notice how both <span class="codefrag">powershot</span> and 
+  <span class="codefrag">power</span>, <span class="codefrag">shot</span> 
+  are indexed, using tokens that have the same "position".
+  (Compare the previous output with
+  <a href="http://localhost:8983/solr/#/collection1/analysis?analysis.fieldvalue=Canon+Power-Shot+SD500&amp;analysis.query=&amp;analysis.fieldtype=text_general&amp;verbose_output=0">The tokens produced using the text_general field type</a>.)
+</p>
+
+<p>
+Mousing over the section label to the left of the section will display the full name of the analyzer component at that stage of the chain.  Toggling the "Verbose Output" checkbox will <a href="http://localhost:8983/solr/#/collection1/analysis?analysis.fieldvalue=Canon+Power-Shot+SD500&amp;analysis.query=&amp;analysis.fieldtype=text_en_splitting&amp;verbose_output=1">show/hide the detailed token attributes</a>.
+</p>
+<p>
+When both <a href="http://localhost:8983/solr/#/collection1/analysis?analysis.fieldvalue=Canon+Power-Shot+SD500&amp;analysis.query=power+shot+sd-500&amp;analysis.fieldtype=text_en_splitting&amp;verbose_output=0">Index and Query</a>
+values are provided, two tables will be displayed side by side showing the 
+results of each chain.  Terms in the Index chain results that are equivilent 
+to the final terms produced by the Query chain will be highlighted.
+</p>
+<p>
+  Other interesting examples:
+</p>
+<ul>
+  <li><a href="http://localhost:8983/solr/#/collection1/analysis?analysis.fieldvalue=A+new+nation%2C+conceived+in+liberty+and+dedicated+to+the+proposition+that+all+men+are+created+equal.%0A&amp;analysis.query=liberties+and+equality&amp;analysis.fieldtype=text_en&amp;verbose_output=0">English stemming and stop-words</a> 
+    using the <span class="codefrag">text_en</span> field type
+  </li>
+  <li><a href="http://localhost:8983/solr/#/collection1/analysis?analysis.fieldtype=text_cjk&amp;analysis.fieldvalue=%EF%BD%B6%EF%BE%80%EF%BD%B6%EF%BE%85&amp;analysis.query=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;verbose_output=1">Half-width katakana normalization with bi-graming</a> 
+    using the <span class="codefrag">text_cjk</span> field type
+  </li>
+  <li><a href="http://localhost:8983/solr/#/collection1/analysis?analysis.fieldtype=text_ja&amp;analysis.fieldvalue=%E7%A7%81%E3%81%AF%E5%88%B6%E9%99%90%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%82%92%E8%B6%85%E3%81%88%E3%82%8B%E3%80%82&amp;verbose_output=1">Japanese morphological decomposition with part-of-speech filtering</a>
+    using the <span class="codefrag">text_ja</span> field type 
+  </li>
+  <li><a href="http://localhost:8983/solr/#/collection1/analysis?analysis.fieldtype=text_ar&amp;analysis.fieldvalue=%D9%84%D8%A7+%D8%A3%D8%AA%D9%83%D9%84%D9%85+%D8%A7%D9%84%D8%B9%D8%B1%D8%A8%D9%8A%D8%A9&amp;verbose_output=1">Arabic stop-words, normalization, and stemming</a>
+    using the <span class="codefrag">text_ar</span> field type 
+  </li>
+</ul>
+
+</div>
+
+
+<a name="N1034D"></a><a name="Conclusion"></a>
+<h2 class="boxed">Conclusion</h2>
+<div class="section">
+<p>
+  Congratulations!  You successfully ran a small Solr instance, added some
+  documents, and made changes to the index and schema.  You learned about queries, text
+  analysis, and the Solr admin interface.  You're ready to start using Solr on
+  your own project!  Continue on with the following steps:
+</p>
+<ul>
+  
+<li>Subscribe to the Solr <a href="http://lucene.apache.org/solr/discussion.html">mailing lists</a>!</li>
+  
+<li>Make a copy of the Solr <span class="codefrag">example</span> directory as a template for your project.</li>
+  
+<li>Customize the schema and other config in <span class="codefrag">solr/collection1/conf/</span> to meet your needs.</li> 
+
+</ul>
+<p>
+  Solr has a ton of other features that we haven't touched on here, including
+  <a href="http://wiki.apache.org/solr/DistributedSearch">distributed search</a>
+  to handle huge document collections,
+  <a href="http://wiki.apache.org/solr/FunctionQuery">function queries</a>,
+  <a href="http://wiki.apache.org/solr/StatsComponent">numeric field statistics</a>,
+  and
+  <a href="http://wiki.apache.org/solr/ClusteringComponent">search results clustering</a>.
+  Explore the <a href="http://wiki.apache.org/solr/FrontPage">Solr Wiki</a> to find
+  more details about Solr's many <a href="http://lucene.apache.org/solr/features.html">features</a>.
+</p>
+<p>
+  Have Fun, and we'll see you on the Solr mailing lists!
+</p>
+</div>
+
+</div>
+
+<div class="clearboth">&nbsp;</div>
+
+<div id="footer">
+<div class="copyright">
+        Copyright &copy;
+         2012 <a href="http://www.apache.org/licenses/">The Apache Software Foundation.</a>
+</div>
+</div>
+</body>
+</html>
diff --git a/solr/site/xsl/index.xsl b/solr/site/xsl/index.xsl
new file mode 100644
index 0000000..829ae21
--- /dev/null
+++ b/solr/site/xsl/index.xsl
@@ -0,0 +1,91 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<xsl:stylesheet version="1.0" 
+  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+  xmlns:str="http://exslt.org/strings"
+  extension-element-prefixes="str"
+>
+  <xsl:param name="buildfiles"/>
+  <xsl:param name="version"/>
+  
+  <!--
+    NOTE: This template matches the root element of any given input XML document!
+    The XSL input file is ignored completely, but XSL expects one to be given,
+    so build.xml passes itself here. The list of module build.xmls is given via
+    string parameter, that must be splitted at '|'.
+  --> 
+  <xsl:template match="/">
+    <html>
+      <head>
+        <title><xsl:text>Apache Solr </xsl:text><xsl:value-of select="$version"/><xsl:text> Documentation</xsl:text></title>
+      </head>
+      <body>
+        <div><img src="solr.png"/></div>
+        <h1><xsl:text>Apache Solr </xsl:text><xsl:value-of select="$version"/><xsl:text> Documentation</xsl:text></h1>
+        <p>Solr is the popular, blazing fast open source enterprise search platform from the Apache Lucene project.
+        Its major features include powerful full-text search, hit highlighting, faceted search, dynamic clustering,
+        database integration, rich document (e.g., Word, PDF) handling, and geospatial search. Solr is highly scalable,
+        providing distributed search and index replication, and it powers the search and navigation features of many
+        of the world's largest internet sites.</p>
+        <p>Solr is written in Java and runs as a standalone full-text search server within a servlet container such as
+        Jetty. Solr uses the Lucene Java search library at its core for full-text indexing and search, and has REST-like
+        HTTP/XML and JSON APIs that make it easy to use from virtually any programming language. Solr's powerful external
+        configuration allows it to be tailored to almost any type of application without Java coding, and it has an extensive
+        plugin architecture when more advanced customization is required.</p>
+        <p>
+          This is the official documentation for <b><xsl:text>Apache Solr </xsl:text>
+          <xsl:value-of select="$version"/></b>. Additional documentation is available in the
+          <a href="http://wiki.apache.org/solr">Wiki</a>.
+        </p>
+        <h2>Reference Documents</h2>
+          <ul>
+            <li><a href="changes/Changes.html">Changes</a>: List of changes in this release.</li>
+            <li><a href="tutorial.html">Solr Tutorial</a>: This document covers the basics of running Solr using an example schema, and some sample data.</li>
+          </ul>
+        <h2>API Javadocs</h2>
+        <xsl:call-template name="modules"/>
+      </body>
+    </html>
+	</xsl:template>
+	
+  <xsl:template name="modules">
+    <ul>
+      <xsl:for-each select="str:split($buildfiles,'|')">
+        <!-- hack to list "core" and "solrj" first, contains() returns "true" which sorts before "false" if descending: -->
+        <xsl:sort select="string(contains(text(), '/core/'))" order="descending" lang="en"/>
+        <xsl:sort select="string(contains(text(), '/solrj/'))" order="descending" lang="en"/>
+        <!-- hack to list "test-framework" at the end, contains() returns "true" which sorts after "false" if ascending: -->
+        <xsl:sort select="string(contains(text(), '/test-framework/'))" order="ascending" lang="en"/>
+        <!-- sort the remaining build files by path name: -->
+        <xsl:sort select="text()" order="ascending" lang="en"/>
+        
+        <xsl:variable name="buildxml" select="document(.)"/>
+        <xsl:variable name="name" select="$buildxml/*/@name"/>
+        <li>
+          <xsl:if test="$name='solr-core'">
+            <xsl:attribute name="style">font-size:larger; margin-bottom:.5em;</xsl:attribute>
+          </xsl:if>
+          <b><a href="{$name}/index.html"><xsl:value-of select="$name"/>
+          </a><xsl:text>: </xsl:text></b>
+          <xsl:value-of select="normalize-space($buildxml/*/description)"/>
+        </li>
+      </xsl:for-each>
+    </ul>
+  </xsl:template>
+
+</xsl:stylesheet>
diff --git a/solr/solrj/build.xml b/solr/solrj/build.xml
index 96bca6d..9952c74 100644
--- a/solr/solrj/build.xml
+++ b/solr/solrj/build.xml
@@ -42,12 +42,5 @@
     </copy>
   </target>
 
-  <target name="javadocs" depends="common-solr.javadocs">
-    <mkdir dir="${dest}/docs/api/solrj"/>
-    <copy todir="${dest}/docs/api/solrj">
-      <fileset dir="${javadoc.dir}"/>
-    </copy>
-  </target>
-
   <target name="dist-maven" depends="dist-maven-src-java"/>
 </project>
diff --git a/solr/test-framework/build.xml b/solr/test-framework/build.xml
index ead5879..a5a25bf 100644
--- a/solr/test-framework/build.xml
+++ b/solr/test-framework/build.xml
@@ -48,7 +48,7 @@
   <target name="javadocs"
           depends="compile-core,jar-test-framework,lucene-javadocs,javadocs-test-framework,define-lucene-javadoc-url">
     <sequential>
-      <mkdir dir="${javadoc.dir}"/>
+      <mkdir dir="${javadoc.dir}/${name}"/>
       <!-- NOTE: explicitly not using solr-invoke-javadoc, or attempting to 
 	   link to lucene-test-framework because if we did javadoc would 
 	   attempt to link class refs in in org.apache.lucene, causing 
@@ -56,7 +56,7 @@
 	   lucene-test-framework was first, or broken links to things like 
 	   LuceneTestCase if lucene-core was first)
       -->
-      <invoke-javadoc destdir="${javadoc.dir}" 
+      <invoke-javadoc destdir="${javadoc.dir}/${name}" 
 		      title="${Name} ${version} Test Framework API">
 	<sources>
 	  <link offline="true" href="${javadoc.link.junit}"
@@ -64,11 +64,7 @@
 	  <packageset dir="${src.dir}"/>
 	</sources>
       </invoke-javadoc>
-      <solr-jarify basedir="${javadoc.dir}" destfile="${build.dir}/${final.name}-javadoc.jar"/>
-      <mkdir dir="${dest}/docs/api/test-framework"/>
-      <copy todir="${dest}/docs/api/test-framework">
-        <fileset dir="${javadoc.dir}"/>
-      </copy>
+      <solr-jarify basedir="${javadoc.dir}/${name}" destfile="${build.dir}/${final.name}-javadoc.jar"/>
     </sequential>
   </target>
 

