GitDiffStart: f6c12e189a8bcb0291b70d6272ec81acc3f0fcc6 | Fri Aug 27 21:50:17 2004 +0000
diff --git a/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser.java b/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser.java
index 5357fd1..fca5383 100644
--- a/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser.java
+++ b/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser.java
@@ -21,6 +21,7 @@ import org.apache.lucene.queryParser.CharStream;
 import org.apache.lucene.queryParser.ParseException;
 import org.apache.lucene.queryParser.QueryParser;
 import org.apache.lucene.queryParser.QueryParserTokenManager;
+import org.apache.lucene.search.BooleanClause;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.Query;
 
@@ -75,7 +76,7 @@ public class MultiFieldQueryParser extends QueryParser
         for (int i = 0; i < fields.length; i++)
         {
             Query q = parse(query, fields[i], analyzer);
-            bQuery.add(q, false, false);
+            bQuery.add(q, BooleanClause.Occur.SHOULD);
         }
         return bQuery;
     }
@@ -106,7 +107,7 @@ public class MultiFieldQueryParser extends QueryParser
         for (int i = 0; i < fields.length; i++)
         {
             Query q = parse(queries[i], fields[i], analyzer);
-            bQuery.add(q, false, false);
+            bQuery.add(q, BooleanClause.Occur.SHOULD);
         }
         return bQuery;
     }
@@ -153,13 +154,13 @@ public class MultiFieldQueryParser extends QueryParser
             switch (flag)
             {
                 case REQUIRED_FIELD:
-                    bQuery.add(q, true, false);
+                    bQuery.add(q, BooleanClause.Occur.MUST);
                     break;
                 case PROHIBITED_FIELD:
-                    bQuery.add(q, false, true);
+                    bQuery.add(q, BooleanClause.Occur.MUST_NOT);
                     break;
                 default:
-                    bQuery.add(q, false, false);
+                    bQuery.add(q, BooleanClause.Occur.SHOULD);
                     break;
             }
         }
@@ -210,13 +211,13 @@ public class MultiFieldQueryParser extends QueryParser
             switch (flag)
             {
                 case REQUIRED_FIELD:
-                    bQuery.add(q, true, false);
+                    bQuery.add(q, BooleanClause.Occur.MUST);
                     break;
                 case PROHIBITED_FIELD:
-                    bQuery.add(q, false, true);
+                    bQuery.add(q, BooleanClause.Occur.MUST_NOT);
                     break;
                 default:
-                    bQuery.add(q, false, false);
+                    bQuery.add(q, BooleanClause.Occur.SHOULD);
                     break;
             }
         }
diff --git a/src/java/org/apache/lucene/queryParser/QueryParser.java b/src/java/org/apache/lucene/queryParser/QueryParser.java
index e1eefff..121dc7d 100644
--- a/src/java/org/apache/lucene/queryParser/QueryParser.java
+++ b/src/java/org/apache/lucene/queryParser/QueryParser.java
@@ -179,8 +179,8 @@ public class QueryParser implements QueryParserConstants {
     // unless it's already prohibited
     if (conj == CONJ_AND) {
       BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);
-      if (!c.prohibited)
-        c.required = true;
+      if (!c.isProhibited())
+        c.setOccur(BooleanClause.Occur.MUST);
     }
 
     if (operator == DEFAULT_OPERATOR_AND && conj == CONJ_OR) {
@@ -189,8 +189,8 @@ public class QueryParser implements QueryParserConstants {
       // notice if the input is a OR b, first term is parsed as required; without
       // this modification a OR b would parsed as +a OR b
       BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);
-      if (!c.prohibited)
-        c.required = false;
+      if (!c.isProhibited())
+        c.setOccur(BooleanClause.Occur.SHOULD);
     }
 
     // We might have been passed a null query; the term might have been
@@ -212,7 +212,14 @@ public class QueryParser implements QueryParserConstants {
       prohibited = (mods == MOD_NOT);
       required   = (!prohibited && conj != CONJ_OR);
     }
-    clauses.addElement(new BooleanClause(q, required, prohibited));
+    if (required && !prohibited)
+      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST));
+    else if (!required && !prohibited)
+      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.SHOULD));
+    else if (!required && prohibited)
+      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST_NOT));
+    else
+      throw new RuntimeException("Clause cannot be both required and prohibited");
   }
 
   /**
diff --git a/src/java/org/apache/lucene/queryParser/QueryParser.jj b/src/java/org/apache/lucene/queryParser/QueryParser.jj
index 43fbf98..85ec551 100644
--- a/src/java/org/apache/lucene/queryParser/QueryParser.jj
+++ b/src/java/org/apache/lucene/queryParser/QueryParser.jj
@@ -202,8 +202,8 @@ public class QueryParser {
     // unless it's already prohibited
     if (conj == CONJ_AND) {
       BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);
-      if (!c.prohibited)
-        c.required = true;
+      if (!c.isProhibited())
+        c.setOccur(BooleanClause.Occur.MUST);
     }
 
     if (operator == DEFAULT_OPERATOR_AND && conj == CONJ_OR) {
@@ -212,8 +212,8 @@ public class QueryParser {
       // notice if the input is a OR b, first term is parsed as required; without
       // this modification a OR b would parsed as +a OR b
       BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);
-      if (!c.prohibited)
-        c.required = false;
+      if (!c.isProhibited())
+        c.setOccur(BooleanClause.Occur.SHOULD);
     }
 
     // We might have been passed a null query; the term might have been
@@ -235,7 +235,14 @@ public class QueryParser {
       prohibited = (mods == MOD_NOT);
       required   = (!prohibited && conj != CONJ_OR);
     }
-    clauses.addElement(new BooleanClause(q, required, prohibited));
+    if (required && !prohibited)
+      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST));
+    else if (!required && !prohibited)
+      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.SHOULD));
+    else if (!required && prohibited)
+      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST_NOT));
+    else
+      throw new RuntimeException("Clause cannot be both required and prohibited");
   }
 
   /**

