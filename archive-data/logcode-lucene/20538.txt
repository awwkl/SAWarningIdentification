GitDiffStart: 90f52a651ee0911231887e9e7b27f5f5c97e2082 | Wed Mar 4 01:50:27 2009 +0000
diff --git a/src/java/org/apache/lucene/search/FieldCacheTermsFilter.java b/src/java/org/apache/lucene/search/FieldCacheTermsFilter.java
index 402c78c..bdfe36b 100644
--- a/src/java/org/apache/lucene/search/FieldCacheTermsFilter.java
+++ b/src/java/org/apache/lucene/search/FieldCacheTermsFilter.java
@@ -22,7 +22,6 @@ import org.apache.lucene.index.TermDocs;          // for javadoc
 import org.apache.lucene.util.OpenBitSet;
 
 import java.io.IOException;
-import java.util.Iterator;
 
 /**
  * A {@link Filter} that only accepts documents whose single
@@ -96,9 +95,9 @@ import java.util.Iterator;
 
 public class FieldCacheTermsFilter extends Filter {
   private String field;
-  private Iterable terms;
+  private String[] terms;
 
-  public FieldCacheTermsFilter(String field, Iterable terms) {
+  public FieldCacheTermsFilter(String field, String[] terms) {
     this.field = field;
     this.terms = terms;
   }
@@ -119,9 +118,8 @@ public class FieldCacheTermsFilter extends Filter {
     public FieldCacheTermsFilterDocIdSet(FieldCache.StringIndex fcsi) {
       this.fcsi = fcsi;
       openBitSet = new OpenBitSet(this.fcsi.lookup.length);
-      for (Iterator it = terms.iterator(); it.hasNext();) {
-        Object term = it.next();
-        int termNumber = this.fcsi.binarySearchLookup((String) term);
+      for (int i=0;i<terms.length;i++) {
+        int termNumber = this.fcsi.binarySearchLookup(terms[i]);
         if (termNumber > 0) {
           openBitSet.fastSet(termNumber);
         }
diff --git a/src/test/org/apache/lucene/search/TestDocIdSet.java b/src/test/org/apache/lucene/search/TestDocIdSet.java
index 879fcaa..ef2348c 100644
--- a/src/test/org/apache/lucene/search/TestDocIdSet.java
+++ b/src/test/org/apache/lucene/search/TestDocIdSet.java
@@ -23,6 +23,7 @@ import java.util.Arrays;
 import java.util.Iterator;
 
 import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util._TestUtil;
 
 public class TestDocIdSet extends LuceneTestCase {
   public void testFilteredDocIdSet() throws Exception {
@@ -85,8 +86,8 @@ public class TestDocIdSet extends LuceneTestCase {
     int[] answer = new int[]{4,6,8};
     boolean same = Arrays.equals(answer, docs);
     if (!same) {
-      System.out.println("answer: "+Arrays.toString(answer));
-      System.out.println("gotten: "+Arrays.toString(docs));
+      System.out.println("answer: "+_TestUtil.arrayToString(answer));
+      System.out.println("gotten: "+_TestUtil.arrayToString(docs));
       fail();
     }
   }
diff --git a/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter.java b/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter.java
index 0a625c6..15f326e 100644
--- a/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter.java
+++ b/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter.java
@@ -55,18 +55,18 @@ public class TestFieldCacheTermsFilter extends TestCase {
 
     List terms = new ArrayList();
     terms.add("5");
-    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, terms), numDocs).scoreDocs;
+    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;
     assertEquals("Must match nothing", 0, results.length);
 
     terms = new ArrayList();
     terms.add("10");
-    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, terms), numDocs).scoreDocs;
+    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;
     assertEquals("Must match 1", 1, results.length);
 
     terms = new ArrayList();
     terms.add("10");
     terms.add("20");
-    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, terms), numDocs).scoreDocs;
+    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;
     assertEquals("Must match 2", 2, results.length);
 
     reader.close();
diff --git a/src/test/org/apache/lucene/search/TestSort.java b/src/test/org/apache/lucene/search/TestSort.java
index e6385fa..d3d0e90 100644
--- a/src/test/org/apache/lucene/search/TestSort.java
+++ b/src/test/org/apache/lucene/search/TestSort.java
@@ -181,7 +181,7 @@ implements Serializable {
   }
   
   public String getRandomNumberString(int num, int low, int high) {
-    StringBuilder sb = new StringBuilder();
+    StringBuffer sb = new StringBuffer();
     for (int i = 0; i < num; i++) {
       sb.append(getRandomNumber(low, high));
     }
@@ -193,7 +193,7 @@ implements Serializable {
   }
   
   public String getRandomCharString(int num, int start, int end) {
-    StringBuilder sb = new StringBuilder();
+    StringBuffer sb = new StringBuffer();
     for (int i = 0; i < num; i++) {
       sb.append(new Character((char) getRandomNumber(start, end)));
     }
diff --git a/src/test/org/apache/lucene/search/TestStressSort.java b/src/test/org/apache/lucene/search/TestStressSort.java
index 070425f..c57db6a 100644
--- a/src/test/org/apache/lucene/search/TestStressSort.java
+++ b/src/test/org/apache/lucene/search/TestStressSort.java
@@ -25,6 +25,7 @@ import org.apache.lucene.store.Directory;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
+import org.apache.lucene.util._TestUtil;
 
 import java.util.Random;
 import java.util.Arrays;
@@ -338,8 +339,9 @@ public class TestStressSort extends LuceneTestCase {
         assert newDocs[i] instanceof FieldDoc;
         FieldDoc oldHit = (FieldDoc) oldDocs[i];
         FieldDoc newHit = (FieldDoc) newDocs[i];
-        assertEquals("hit " + i + " of " + oldDocs.length + " differs: oldDoc=" + oldHit.doc + " vs newDoc=" + newHit.doc + " oldFields=" + Arrays.toString(oldHit.fields) + " newFields=" + Arrays.toString(newHit.fields),
+        assertEquals("hit " + i + " of " + oldDocs.length + " differs: oldDoc=" + oldHit.doc + " vs newDoc=" + newHit.doc + " oldFields=" + _TestUtil.arrayToString(oldHit.fields) + " newFields=" + _TestUtil.arrayToString(newHit.fields),
                      oldHit.doc, newHit.doc);
+
         assertEquals(oldHit.score, newHit.score, 0.00001);
         assertTrue(Arrays.equals(oldHit.fields, newHit.fields));
       } else {
diff --git a/src/test/org/apache/lucene/util/_TestUtil.java b/src/test/org/apache/lucene/util/_TestUtil.java
index d42de5e..617e8c8 100644
--- a/src/test/org/apache/lucene/util/_TestUtil.java
+++ b/src/test/org/apache/lucene/util/_TestUtil.java
@@ -71,4 +71,36 @@ public class _TestUtil {
       return true;
   }
 
+  /** Use only for testing.
+   *  @deprecated -- in 3.0 we can use Arrays.toString
+   *  instead */
+  public static String arrayToString(int[] array) {
+    StringBuffer buf = new StringBuffer();
+    buf.append("[");
+    for(int i=0;i<array.length;i++) {
+      if (i > 0) {
+        buf.append(" ");
+      }
+      buf.append(array[i]);
+    }
+    buf.append("]");
+    return buf.toString();
+  }
+
+  /** Use only for testing.
+   *  @deprecated -- in 3.0 we can use Arrays.toString
+   *  instead */
+  public static String arrayToString(Object[] array) {
+    StringBuffer buf = new StringBuffer();
+    buf.append("[");
+    for(int i=0;i<array.length;i++) {
+      if (i > 0) {
+        buf.append(" ");
+      }
+      buf.append(array[i]);
+    }
+    buf.append("]");
+    return buf.toString();
+  }
+
 }

