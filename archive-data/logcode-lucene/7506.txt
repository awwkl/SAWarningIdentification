GitDiffStart: c960539c4c3700d5a5ddb38d11cb9b15dcba56ca | Tue Nov 19 20:55:22 2013 +0000
diff --git a/TODO b/TODO
index 7077e41..fae69b2 100644
--- a/TODO
+++ b/TODO
@@ -1,11 +1,8 @@
 nocommit this!
 
 TODO
-  - associations
-    - can we do index time detection of invalid mixing?
-  - cutover taxo writer/reader to pathToString/stringToPath
-  - wrap an IW instead of extending one?  or, FacetDocument?
   - re-enable ALL_BUT_DIM somehow?
+    - this is broken for multi-valued non-hierarchical too
   - we could put more stuff into the "schema", e.g. this field is
     sorted-set-DV and that one is taxo?
   - standardize on facet or facets (e.g. FacetIndexWriter)
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder.java b/lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder.java
index 717d9c3..e1598d8 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder.java
@@ -338,6 +338,9 @@ public class DocumentBuilder {
   }
 
   public static String pathToString(String[] path, int length) {
+    if (length == 0) {
+      return "";
+    }
     StringBuilder sb = new StringBuilder();
     for(int i=0;i<length;i++) {
       String s = path[i];
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel.java b/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel.java
index a1947ee..0c350bd 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel.java
@@ -17,11 +17,13 @@ package org.apache.lucene.facet.taxonomy;
  * limitations under the License.
  */
 
-import static org.apache.lucene.util.ByteBlockPool.BYTE_BLOCK_SIZE;
-
 import java.util.Arrays;
 import java.util.regex.Pattern;
 
+import org.apache.lucene.facet.simple.DocumentBuilder;
+
+import static org.apache.lucene.util.ByteBlockPool.BYTE_BLOCK_SIZE;
+
 /**
  * Holds a sequence of string components, specifying the hierarchical name of a
  * category.
@@ -111,7 +113,13 @@ public class FacetLabel implements Comparable<FacetLabel> {
               + " path=" + pathString.substring(0, 30) + "...");
     }
 
-    String[] comps = pathString.split(Pattern.quote(Character.toString(delimiter)));
+    // nocommit
+    String[] comps;
+    if (delimiter == '\u001F') {
+      comps = DocumentBuilder.stringToPath(pathString);
+    } else {
+      comps = pathString.split(Pattern.quote(Character.toString(delimiter)));
+    }
     if (comps.length == 1 && comps[0].isEmpty()) {
       components = null;
       length = 0;
@@ -274,19 +282,22 @@ public class FacetLabel implements Comparable<FacetLabel> {
    * Returns a string representation of the path, separating components with the
    * given delimiter.
    */
-  // nocommit remove
+
   public String toString(char delimiter) {
-    if (length == 0) return "";
-    
-    StringBuilder sb = new StringBuilder();
-    for (int i = 0; i < length; i++) {
-      if (components[i].indexOf(delimiter) != -1) {
-        hasDelimiter(components[i], delimiter);
+    // nocommit
+    if (delimiter == '\u001F') {
+      return DocumentBuilder.pathToString(components, length);
+    } else {
+      if (length == 0) return "";
+      StringBuilder sb = new StringBuilder();
+      for (int i = 0; i < length; i++) {
+        if (components[i].indexOf(delimiter) != -1) {
+          hasDelimiter(components[i], delimiter);
+        }
+        sb.append(components[i]).append(delimiter);
       }
-      sb.append(components[i]).append(delimiter);
+      sb.setLength(sb.length() - 1); // remove last delimiter
+      return sb.toString();
     }
-    sb.setLength(sb.length() - 1); // remove last delimiter
-    return sb.toString();
   }
-
 }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java b/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java
index 6230116..2c6a0ef 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java
@@ -21,6 +21,7 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.StringField;
 import org.apache.lucene.document.TextField;
+import org.apache.lucene.facet.simple.DocumentBuilder;
 import org.apache.lucene.facet.taxonomy.FacetLabel;
 import org.apache.lucene.facet.taxonomy.TaxonomyReader;
 import org.apache.lucene.facet.taxonomy.TaxonomyWriter;
@@ -34,8 +35,8 @@ import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.DocsEnum;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
+import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.LogByteSizeMergePolicy;
 import org.apache.lucene.index.ReaderManager;
 import org.apache.lucene.index.SegmentInfos;
@@ -529,7 +530,7 @@ public class DirectoryTaxonomyWriter implements TaxonomyWriter {
     Document d = new Document();
     d.add(parentStreamField);
 
-    fullPathField.setStringValue(categoryPath.toString(delimiter));
+    fullPathField.setStringValue(DocumentBuilder.pathToString(categoryPath.components, categoryPath.length));
     d.add(fullPathField);
 
     // Note that we do no pass an Analyzer here because the fields that are
diff --git a/lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts.java b/lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts.java
index f37785e..b659b65 100644
--- a/lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts.java
+++ b/lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts.java
@@ -339,30 +339,42 @@ public class TestTaxonomyFacetCounts extends FacetTestCase {
     taxoDir.close();
   }
 
-  /*
   public void testLabelWithDelimiter() throws Exception {
     Directory dir = newDirectory();
     Directory taxoDir = newDirectory();
     RandomIndexWriter writer = new RandomIndexWriter(random(), dir);
     DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);
 
-    FacetFields facetFields = new FacetFields(taxoWriter);
+    FacetsConfig config = new FacetsConfig();
+    DocumentBuilder builder = new DocumentBuilder(taxoWriter, config);
 
     Document doc = new Document();
     doc.add(newTextField("field", "text", Field.Store.NO));
-    BytesRef br = new BytesRef(new byte[] {(byte) 0xee, (byte) 0x92, (byte) 0xaa, (byte) 0xef, (byte) 0x9d, (byte) 0x89});
-    facetFields.addFields(doc, Collections.singletonList(new CategoryPath("dim/" + br.utf8ToString(), '/')));
-    try {
-      writer.addDocument(doc);
-    } catch (IllegalArgumentException iae) {
-      // expected
-    }
+    doc.add(new FacetField("dim", "test\u001Fone"));
+    doc.add(new FacetField("dim", "test\u001Etwo"));
+    writer.addDocument(builder.build(doc));
+
+    // NRT open
+    IndexSearcher searcher = newSearcher(writer.getReader());
     writer.close();
+
+    // NRT open
+    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);
     taxoWriter.close();
-    dir.close();
-    taxoDir.close();
+
+    SimpleFacetsCollector c = new SimpleFacetsCollector();
+    searcher.search(new MatchAllDocsQuery(), c);
+    
+    Facets facets = getFacetCounts(taxoReader, config, c);
+    assertEquals(1, facets.getSpecificValue("dim", "test\u001Fone"));
+    assertEquals(1, facets.getSpecificValue("dim", "test\u001Etwo"));
+
+    SimpleFacetResult result = facets.getTopChildren(10, "dim");
+    assertEquals("dim (2)\n  test\u001Fone (1)\n  test\u001Etwo (1)\n", result.toString());
+    IOUtils.close(searcher.getIndexReader(), taxoReader, dir, taxoDir);
   }
-  
+
+  /*
   // LUCENE-4583: make sure if we require > 32 KB for one
   // document, we don't hit exc when using Facet42DocValuesFormat
   public void testManyFacetsInOneDocument() throws Exception {

