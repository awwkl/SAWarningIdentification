GitDiffStart: a6c6cf6f6ea9a181c4750a3234edf389c341bae2 | Fri Sep 21 02:39:46 2012 +0000
diff --git a/lucene/build.xml b/lucene/build.xml
index b2412ea..3236338 100644
--- a/lucene/build.xml
+++ b/lucene/build.xml
@@ -253,7 +253,7 @@
       <check-missing-javadocs dir="build/docs/join" level="method"/>
       <check-missing-javadocs dir="build/docs/memory" level="method"/>
       <check-missing-javadocs dir="build/docs/misc" level="class"/>
-      <!-- queries: problems -->
+      <check-missing-javadocs dir="build/docs/queries" level="class"/>
       <!-- queryparser: problems -->
       <check-missing-javadocs dir="build/docs/sandbox" level="class"/>
       <check-missing-javadocs dir="build/docs/spatial" level="class"/>
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java
index c1890f4..9b529fd 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java
@@ -87,7 +87,14 @@ public abstract class FunctionValues {
   public int numOrd() { throw new UnsupportedOperationException(); }
   public abstract String toString(int doc);
 
-  /** @lucene.experimental  */
+  /**
+   * Abstraction of the logic required to fill the value of a specified doc into
+   * a reusable {@link MutableValue}.  Implementations of {@link FunctionValues}
+   * are encouraged to define their own implementations of ValueFiller if their
+   * value is not a float.
+   *
+   * @lucene.experimental
+   */
   public static abstract class ValueFiller {
     /** MutableValue will be reused across calls */
     public abstract MutableValue getValue();
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java
index 677ecfb..6976a57 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java
@@ -24,6 +24,10 @@ import org.apache.lucene.util.Bits;
 
 import java.io.IOException;
 
+/**
+ * {@link Scorer} which returns the result of {@link FunctionValues#floatVal(int)} as
+ * the score for a document.
+ */
 public class ValueSourceScorer extends Scorer {
   protected final IndexReader reader;
   private int doc = -1;
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/BoolDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/BoolDocValues.java
index b942e8a..09e9e94 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/BoolDocValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/BoolDocValues.java
@@ -22,7 +22,10 @@ import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueBool;
 
-
+/**
+ * Abstract {@link FunctionValues} implementation which supports retrieving boolean values.
+ * Implementations can control how the boolean values are loaded through {@link #boolVal(int)}}
+ */
 public abstract class BoolDocValues extends FunctionValues {
   protected final ValueSource vs;
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.java
index 89ffd19..6c0da33 100755
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.java
@@ -155,6 +155,9 @@ public abstract class DocTermsIndexDocValues extends FunctionValues {
     };
   }
 
+  /**
+   * Custom Exception to be thrown when the DocTermsIndex for a field cannot be generated
+   */
   public static final class DocTermsIndexException extends RuntimeException {
 
     public DocTermsIndexException(final String fieldName, final RuntimeException cause) {
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues.java
index 44cc440..2aae6fe 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues.java
@@ -22,6 +22,10 @@ import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueDouble;
 
+/**
+ * Abstract {@link FunctionValues} implementation which supports retrieving double values.
+ * Implementations can control how the double values are loaded through {@link #doubleVal(int)}}
+ */
 public abstract class DoubleDocValues extends FunctionValues {
   protected final ValueSource vs;
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/FloatDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/FloatDocValues.java
index 231c264..5e975a7 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/FloatDocValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/FloatDocValues.java
@@ -22,6 +22,10 @@ import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueFloat;
 
+/**
+ * Abstract {@link FunctionValues} implementation which supports retrieving float values.
+ * Implementations can control how the float values are loaded through {@link #floatVal(int)}}
+ */
 public abstract class FloatDocValues extends FunctionValues {
   protected final ValueSource vs;
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/IntDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/IntDocValues.java
index 7276afc..6817923 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/IntDocValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/IntDocValues.java
@@ -22,7 +22,10 @@ import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueInt;
 
-
+/**
+ * Abstract {@link FunctionValues} implementation which supports retrieving int values.
+ * Implementations can control how the int values are loaded through {@link #intVal(int)}
+ */
 public abstract class IntDocValues extends FunctionValues {
   protected final ValueSource vs;
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues.java
index 26e4fde..885014a 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues.java
@@ -22,7 +22,10 @@ import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueLong;
 
-
+/**
+ * Abstract {@link FunctionValues} implementation which supports retrieving long values.
+ * Implementations can control how the long values are loaded through {@link #longVal(int)}}
+ */
 public abstract class LongDocValues extends FunctionValues {
   protected final ValueSource vs;
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/StrDocValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/StrDocValues.java
index 726c566..ad2e5bc 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/StrDocValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/StrDocValues.java
@@ -22,6 +22,10 @@ import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueStr;
 
+/**
+ * Abstract {@link FunctionValues} implementation which supports retrieving String values.
+ * Implementations can control how the String values are loaded through {@link #strVal(int)}}
+ */
 public abstract class StrDocValues extends FunctionValues {
   protected final ValueSource vs;
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/BoolFunction.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/BoolFunction.java
index 6430686..57c3a6c 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/BoolFunction.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/BoolFunction.java
@@ -19,7 +19,10 @@ package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.queries.function.ValueSource;
 
-
+/**
+ * Abstract parent class for those {@link ValueSource} implementations which
+ * apply boolean logic to their values
+ */
 public abstract class BoolFunction extends ValueSource {
   // TODO: placeholder to return type, among other common future functionality
 }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction.java
index b025891..c947824 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction.java
@@ -27,6 +27,12 @@ import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
 
+/**
+ * {@link ValueSource} implementation which only returns the values from the provided
+ * ValueSources which are available for a particular docId.  Consequently, when combined
+ * with a {@link ConstValueSource}, this function serves as a way to return a default
+ * value when the values for a field are unavailable.
+ */
 public class DefFunction extends MultiFunction {
   public DefFunction(List<ValueSource> sources) {
     super(sources);
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DualFloatFunction.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DualFloatFunction.java
index b384918..241dfa0 100755
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DualFloatFunction.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DualFloatFunction.java
@@ -26,6 +26,10 @@ import org.apache.lucene.search.IndexSearcher;
 import java.io.IOException;
 import java.util.Map;
 
+/**
+ * Abstract {@link ValueSource} implementation which wraps two ValueSources
+ * and applies an extendible float function to their values.
+ **/
 public abstract class DualFloatFunction extends ValueSource {
   protected final ValueSource a;
   protected final ValueSource b;
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiBoolFunction.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiBoolFunction.java
index 28b6cd2..0075aa4 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiBoolFunction.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiBoolFunction.java
@@ -27,7 +27,10 @@ import java.io.IOException;
 import java.util.List;
 import java.util.Map;
 
-
+/**
+ * Abstract {@link ValueSource} implementation which wraps multiple ValueSources
+ * and applies an extendible boolean function to their values.
+ **/
 public abstract class MultiBoolFunction extends BoolFunction {
   protected final List<ValueSource> sources;
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction.java
index 1131d21..d23c209 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction.java
@@ -28,9 +28,9 @@ import java.io.IOException;
 
 
 /**
- *
- *
- **/ // a simple function of multiple sources
+ * Abstract {@link ValueSource} implementation which wraps multiple ValueSources
+ * and applies an extendible float function to their values.
+ **/
 public abstract class MultiFloatFunction extends ValueSource {
   protected final ValueSource[] sources;
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java
index e6cdfae..d3272a7 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java
@@ -27,7 +27,10 @@ import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
 
-
+/**
+ * Abstract parent class for {@link ValueSource} implementations that wrap multiple
+ * ValueSources and apply their own logic.
+ */
 public abstract class MultiFunction extends ValueSource {
   protected final List<ValueSource> sources;
 
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.java
index fe4757a..d29aeff 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.java
@@ -26,7 +26,13 @@ import org.apache.lucene.search.IndexSearcher;
 import java.io.IOException;
 import java.util.Map;
 
-
+/**
+ * {@link BoolFunction} implementation which applies an extendible boolean
+ * function to the values of a single wrapped {@link ValueSource}.
+ *
+ * Functions this can be used for include whether a field has a value or not,
+ * or inverting the boolean value of the wrapped ValueSource.
+ */
 public abstract class SimpleBoolFunction extends BoolFunction {
   protected final ValueSource source;
 

