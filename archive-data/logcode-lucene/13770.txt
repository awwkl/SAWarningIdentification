GitDiffStart: 81d3ea17c773eb8f808db81a4dd1645a73766a46 | Thu Feb 2 08:09:55 2012 +0000
diff --git a/lucene/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java b/lucene/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java
index 1aa4331..11486cc 100644
--- a/lucene/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java
+++ b/lucene/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java
@@ -29,20 +29,13 @@ import org.apache.lucene.index.MultiReader; // javadoc
 
 /**
  * This class forces a composite reader (eg a {@link
- * MultiReader} or {@link DirectoryReader} or any other
- * IndexReader subclass that returns non-null from {@link
- * CompositeReader#getSequentialSubReaders}) to emulate an
+ * MultiReader} or {@link DirectoryReader}) to emulate an
  * atomic reader.  This requires implementing the postings
  * APIs on-the-fly, using the static methods in {@link
  * MultiFields}, {@link MultiDocValues}, 
  * by stepping through the sub-readers to merge fields/terms, 
  * appending docs, etc.
  *
- * <p>If you ever hit an UnsupportedOperationException saying
- * "please use MultiXXX.YYY instead", the simple
- * but non-performant workaround is to wrap your reader
- * using this class.</p>
- *
  * <p><b>NOTE</b>: this class almost always results in a
  * performance hit.  If this is important to your use case,
  * it's better to get the sequential sub readers (see {@link

