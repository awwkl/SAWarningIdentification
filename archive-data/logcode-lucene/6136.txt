GitDiffStart: 988df838852d09a1d5f9f1b4c9fda8d93a8c91b0 | Thu May 22 11:50:31 2014 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 5f3d5ce..3c9bd97 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -116,6 +116,8 @@ New Features
 * SOLR-5973: Pluggable Ranking Collectors and Merge Strategies
   (Joel Bernstein)
 
+* SOLR-6108: Add support for 'addreplica' Collection API in SolrJ. (shalin)
+
 Bug Fixes
 ----------------------
 
diff --git a/solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest.java b/solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest.java
index 24153bd..5568b9a 100644
--- a/solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest.java
@@ -1210,53 +1210,46 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
     }
 
   }
-  private void addReplicaTest()throws Exception{
+
+  private void addReplicaTest() throws Exception {
     String collectionName = "addReplicaColl";
     CloudSolrServer client = createCloudClient(null);
     try {
-      createCollection(collectionName, client,2,2);
-      String newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );
+      createCollection(collectionName, client, 2, 2);
+      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());
       ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());
       Collections.shuffle(nodeList);
-      Map m = makeMap(
-          "action", CollectionAction.ADDREPLICA.toString(),
-          ZkStateReader.COLLECTION_PROP, collectionName,
-          ZkStateReader.SHARD_ID_PROP, "shard1",
-          "node", nodeList.get(0));
-
-      SolrRequest request = new QueryRequest(new MapSolrParams(m));
-      request.setPath("/admin/collections");
-      client.request(request);
+      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();
+      addReplica.setCollectionName(collectionName);
+      addReplica.setShardName("shard1");
+      addReplica.setNode(nodeList.get(0));
+      client.request(addReplica);
 
       long timeout = System.currentTimeMillis() + 3000;
       Replica newReplica = null;
 
-      for(; System.currentTimeMillis()<timeout;){
+      for (; System.currentTimeMillis() < timeout; ) {
         Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, "shard1");
         newReplica = slice.getReplica(newReplicaName);
       }
 
       assertNotNull(newReplica);
 
-      log.info("newReplica {},\n{} ", newReplica,client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));
-//
+      log.info("newReplica {},\n{} ", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));
+
       assertEquals("Replica should be created on the right node",
           client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));
 
-      newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );
-      m = makeMap(
-          "action", CollectionAction.ADDREPLICA.toString(),
-          ZkStateReader.COLLECTION_PROP, collectionName,
-          ZkStateReader.SHARD_ID_PROP, "shard2");
-
-      request = new QueryRequest(new MapSolrParams(m));
-      request.setPath("/admin/collections");
-      client.request(request);
+      newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());
+      addReplica = new CollectionAdminRequest.AddReplica();
+      addReplica.setCollectionName(collectionName);
+      addReplica.setShardName("shard2");
+      client.request(addReplica);
 
       timeout = System.currentTimeMillis() + 3000;
       newReplica = null;
 
-      for(; System.currentTimeMillis()<timeout;){
+      for (; System.currentTimeMillis() < timeout; ) {
         Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, "shard2");
         newReplica = slice.getReplica(newReplicaName);
       }
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java b/solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java
index 6f123c5..c6405fb 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java
@@ -21,10 +21,12 @@ import org.apache.solr.client.solrj.SolrRequest;
 import org.apache.solr.client.solrj.SolrServer;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.response.CollectionAdminResponse;
+import org.apache.solr.common.SolrException;
 import org.apache.solr.common.cloud.ZkStateReader;
 import org.apache.solr.common.params.CollectionParams.CollectionAction;
 import org.apache.solr.common.params.CoreAdminParams;
 import org.apache.solr.common.params.ModifiableSolrParams;
+import org.apache.solr.common.params.ShardParams;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.ContentStream;
 
@@ -239,6 +241,71 @@ public class CollectionAdminRequest extends SolrRequest
     }
   }
 
+  public static class AddReplica extends CollectionShardAdminRequest {
+    private String node;
+    private String routeKey;
+    private String instanceDir;
+    private String dataDir;
+
+    public AddReplica() {
+      action = CollectionAction.ADDREPLICA;
+    }
+
+    public String getNode() {
+      return node;
+    }
+
+    public void setNode(String node) {
+      this.node = node;
+    }
+
+    public String getRouteKey() {
+      return routeKey;
+    }
+
+    public void setRouteKey(String routeKey) {
+      this.routeKey = routeKey;
+    }
+
+    public String getInstanceDir() {
+      return instanceDir;
+    }
+
+    public void setInstanceDir(String instanceDir) {
+      this.instanceDir = instanceDir;
+    }
+
+    public String getDataDir() {
+      return dataDir;
+    }
+
+    public void setDataDir(String dataDir) {
+      this.dataDir = dataDir;
+    }
+
+    @Override
+    public SolrParams getParams() {
+      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());
+      if (shardName == null || shardName.isEmpty()) {
+        params.remove("shard");
+        if (routeKey == null) {
+          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Either shard or routeKey must be provided");
+        }
+        params.add(ShardParams._ROUTE_, routeKey);
+      }
+      if (node != null) {
+        params.add("node", node);
+      }
+      if (instanceDir != null)  {
+        params.add("instanceDir", instanceDir);
+      }
+      if (dataDir != null)  {
+        params.add("dataDir", dataDir);
+      }
+      return params;
+    }
+  }
+
   public CollectionAdminRequest()
   {
     super( METHOD.GET, "/admin/collections" );

