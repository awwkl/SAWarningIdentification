GitDiffStart: c445d40b80b9d602b5b96dc21b0a374f1e039478 | Tue Oct 21 15:12:55 2014 +0000
diff --git a/solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.java b/solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.java
index 8425219..ca847bb 100644
--- a/solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.java
+++ b/solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.java
@@ -16,12 +16,9 @@ package org.apache.solr.handler.loader;
  * limitations under the License.
  */
 
-import java.io.FilterReader;
 import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
-import java.lang.reflect.Field;
-import java.nio.CharBuffer;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -31,19 +28,14 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.UUID;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicReference;
 
-import com.ctc.wstx.stax.FilteredStreamReader;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.io.input.TeeInputStream;
 import org.apache.solr.common.params.CommonParams;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.params.UpdateParams;
 import org.apache.solr.common.util.JsonRecordReader;
 import org.apache.solr.schema.SchemaField;
-import org.apache.solr.util.xslt.RecordingJSONParser;
-import org.noggit.CharArr;
+import org.apache.solr.util.RecordingJSONParser;
 import org.noggit.JSONParser;
 import org.noggit.ObjectBuilder;
 import org.apache.solr.common.SolrException;
diff --git a/solr/core/src/java/org/apache/solr/util/RecordingJSONParser.java b/solr/core/src/java/org/apache/solr/util/RecordingJSONParser.java
new file mode 100644
index 0000000..4e26446
--- /dev/null
+++ b/solr/core/src/java/org/apache/solr/util/RecordingJSONParser.java
@@ -0,0 +1,79 @@
+package org.apache.solr.util;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+import java.io.IOException;
+import java.io.Reader;
+
+import org.noggit.CharArr;
+import org.noggit.JSONParser;
+
+public class RecordingJSONParser extends JSONParser{
+  public RecordingJSONParser(Reader in) { super(in); }
+
+  private StringBuilder sb = new StringBuilder() ;
+  private long position;
+  private boolean objectStarted =false;
+
+
+
+  @Override
+  protected int getChar() throws IOException {
+    int aChar = super.getChar();
+    if(aChar == '{') objectStarted =true;
+    if(getPosition() >position) recordChar((char) aChar); // check before adding if a pushback happened ignore
+    position= getPosition();
+    return aChar;
+  }
+
+  private void recordChar(int aChar) {
+    if(objectStarted)
+      sb.append((char) aChar);
+  }
+  private void recordStr(String s) {
+    if(objectStarted) sb.append(s);
+  }
+
+  @Override
+  public CharArr getStringChars() throws IOException {
+    CharArr chars = super.getStringChars();
+    recordStr(chars.toString());
+    position = getPosition();
+    // if reading a String , the getStringChars do not return the closing single quote or double quote
+    //so, try to capture that
+    if(chars.getArray().length >=chars.getStart()+chars.size()) {
+      char next = chars.getArray()[chars.getStart() + chars.size()];
+      if(next =='"' || next == '\'') {
+        recordChar(next);
+      }
+    }
+    return chars;
+  }
+
+  public void resetBuf(){
+    sb = new StringBuilder();
+    objectStarted=false;
+  }
+
+
+  public String getBuf() {
+    if(sb != null) return sb.toString();
+    return null;
+  }
+}
diff --git a/solr/core/src/java/org/apache/solr/util/xslt/RecordingJSONParser.java b/solr/core/src/java/org/apache/solr/util/xslt/RecordingJSONParser.java
deleted file mode 100644
index 31fa558..0000000
--- a/solr/core/src/java/org/apache/solr/util/xslt/RecordingJSONParser.java
+++ /dev/null
@@ -1,79 +0,0 @@
-package org.apache.solr.util.xslt;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-
-import java.io.IOException;
-import java.io.Reader;
-
-import org.noggit.CharArr;
-import org.noggit.JSONParser;
-
-public class RecordingJSONParser extends JSONParser{
-  public RecordingJSONParser(Reader in) { super(in); }
-
-  private StringBuilder sb = new StringBuilder() ;
-  private long position;
-  private boolean objectStarted =false;
-
-
-
-  @Override
-  protected int getChar() throws IOException {
-    int aChar = super.getChar();
-    if(aChar == '{') objectStarted =true;
-    if(getPosition() >position) recordChar((char) aChar); // check before adding if a pushback happened ignore
-    position= getPosition();
-    return aChar;
-  }
-
-  private void recordChar(int aChar) {
-    if(objectStarted)
-      sb.append((char) aChar);
-  }
-  private void recordStr(String s) {
-    if(objectStarted) sb.append(s);
-  }
-
-  @Override
-  public CharArr getStringChars() throws IOException {
-    CharArr chars = super.getStringChars();
-    recordStr(chars.toString());
-    position = getPosition();
-    // if reading a String , the getStringChars do not return the closing single quote or double quote
-    //so, try to capture that
-    if(chars.getArray().length >=chars.getStart()+chars.size()) {
-      char next = chars.getArray()[chars.getStart() + chars.size()];
-      if(next =='"' || next == '\'') {
-        recordChar(next);
-      }
-    }
-    return chars;
-  }
-
-  public void resetBuf(){
-    sb = new StringBuilder();
-    objectStarted=false;
-  }
-
-
-  public String getBuf() {
-    if(sb != null) return sb.toString();
-    return null;
-  }
-}

