GitDiffStart: 0401cf63e42f98f4143d827bdba2df78f94fdfbe | Mon Nov 10 14:31:19 2003 +0000
diff --git a/src/java/org/apache/lucene/analysis/standard/StandardAnalyzer.java b/src/java/org/apache/lucene/analysis/standard/StandardAnalyzer.java
index 35b2f30..15f9b3a 100644
--- a/src/java/org/apache/lucene/analysis/standard/StandardAnalyzer.java
+++ b/src/java/org/apache/lucene/analysis/standard/StandardAnalyzer.java
@@ -58,32 +58,36 @@ import org.apache.lucene.analysis.*;
 import java.io.Reader;
 import java.util.Hashtable;
 
-/** Filters {@link StandardTokenizer} with {@link StandardFilter}, {@link
- * LowerCaseFilter} and {@link StopFilter}. */
+/**
+ * Filters {@link StandardTokenizer} with {@link StandardFilter}, {@link
+ * LowerCaseFilter} and {@link StopFilter}.
+ *
+ * @version $Id$
+ */
 public class StandardAnalyzer extends Analyzer {
-    private Hashtable stopTable;
+  private Hashtable stopTable;
 
-    /** An array containing some common English words that are usually not
-	useful for searching. */
-    public static final String[] STOP_WORDS = StopAnalyzer.ENGLISH_STOP_WORDS;
+  /** An array containing some common English words that are usually not
+  useful for searching. */
+  public static final String[] STOP_WORDS = StopAnalyzer.ENGLISH_STOP_WORDS;
 
-    /** Builds an analyzer. */
-    public StandardAnalyzer() {
-	this(STOP_WORDS);
-    }
+  /** Builds an analyzer. */
+  public StandardAnalyzer() {
+    this(STOP_WORDS);
+  }
 
-    /** Builds an analyzer with the given stop words. */
-    public StandardAnalyzer(String[] stopWords) {
-	stopTable = StopFilter.makeStopTable(stopWords);
-    }
+  /** Builds an analyzer with the given stop words. */
+  public StandardAnalyzer(String[] stopWords) {
+    stopTable = StopFilter.makeStopTable(stopWords);
+  }
 
-    /** Constructs a {@link StandardTokenizer} filtered by a {@link
-	StandardFilter}, a {@link LowerCaseFilter} and a {@link StopFilter}. */
-    public TokenStream tokenStream(String fieldName, Reader reader) {
-	TokenStream result = new StandardTokenizer(reader);
-	result = new StandardFilter(result);
-	result = new LowerCaseFilter(result);
-	result = new StopFilter(result, stopTable);
-	return result;
-    }
+  /** Constructs a {@link StandardTokenizer} filtered by a {@link
+  StandardFilter}, a {@link LowerCaseFilter} and a {@link StopFilter}. */
+  public TokenStream tokenStream(String fieldName, Reader reader) {
+    TokenStream result = new StandardTokenizer(reader);
+    result = new StandardFilter(result);
+    result = new LowerCaseFilter(result);
+    result = new StopFilter(result, stopTable);
+    return result;
+  }
 }

