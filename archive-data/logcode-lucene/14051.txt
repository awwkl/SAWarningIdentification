GitDiffStart: 4fdebf90e57e6f47a2049dbebe74fd93a6cf1ee5 | Thu Jan 19 21:38:40 2012 +0000
diff --git a/lucene/src/java/org/apache/lucene/util/SentinelIntSet.java b/lucene/src/java/org/apache/lucene/util/SentinelIntSet.java
index 6ca12bc..ff209c6 100644
--- a/lucene/src/java/org/apache/lucene/util/SentinelIntSet.java
+++ b/lucene/src/java/org/apache/lucene/util/SentinelIntSet.java
@@ -96,13 +96,13 @@ public class SentinelIntSet {
   public int put(int key) {
     int s = find(key);
     if (s < 0) {
+      count++;
       if (count >= rehashCount) {
         rehash();
         s = getSlot(key);
       } else {
         s = -s-1;
       }
-      count++;
       keys[s] = key;
     }
     return s;
diff --git a/lucene/src/test/org/apache/lucene/util/TestSentinelIntSet.java b/lucene/src/test/org/apache/lucene/util/TestSentinelIntSet.java
index d45ebfa..736596f 100644
--- a/lucene/src/test/org/apache/lucene/util/TestSentinelIntSet.java
+++ b/lucene/src/test/org/apache/lucene/util/TestSentinelIntSet.java
@@ -20,6 +20,8 @@ package org.apache.lucene.util;
 
 import org.junit.Test;
 
+import java.util.HashSet;
+
 /**
  *
  *
@@ -45,4 +47,44 @@ public class TestSentinelIntSet extends LuceneTestCase {
     assertEquals(20, set.size());
     assertEquals(24, set.rehashCount);
   }
+  
+  @Test
+  public void testRehash() throws Exception {
+    SentinelIntSet set = new SentinelIntSet(3, -1);
+    set.put(1);
+    set.find(99);
+    set.put(2);
+    set.find(99);
+    set.put(3);
+    set.find(99);
+    set.put(4);
+    set.find(99);
+  }
+
+  @Test
+  public void testRandom() throws Exception {
+    for (int i=0; i<10000; i++) {
+      int initSz = random.nextInt(20);
+      int num = random.nextInt(30);
+      int maxVal = (random.nextBoolean() ? random.nextInt(50) : random.nextInt(Integer.MAX_VALUE)) + 1;
+
+      HashSet<Integer> a = new HashSet<Integer>(initSz);
+      SentinelIntSet b = new SentinelIntSet(initSz, -1);
+      
+      for (int j=0; j<num; j++) {
+        int val = random.nextInt(maxVal);
+        boolean exists = !a.add(val);
+        boolean existsB = b.exists(val);
+        assertEquals(exists, existsB);
+        int slot = b.find(val);
+        assertEquals(exists, slot>=0);
+        b.put(val);
+        
+        assertEquals(a.size(), b.size());
+      }
+      
+    }
+
+  }
+  
 }

