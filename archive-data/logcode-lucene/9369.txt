GitDiffStart: 302c3ed37e80205cff89e50c06ba5e80bf033857 | Fri Feb 22 16:58:42 2013 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 34fc6e7..53fca9e 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -78,6 +78,9 @@ New Features
 * SOLR-4477: Add support for queries (match-only) against docvalues fields. 
   (Robert Muir)
 
+* SOLR-4488: Return slave replication details for a master if the master has
+  also acted like a slave. (Mark Miller)
+
 Bug Fixes
 ----------------------
 
@@ -143,6 +146,13 @@ Bug Fixes
   directory has changed and the previous SolrCore's state should not be 
   propagated. (Mark Miller, Gregg Donovan)
 
+* SOLR-4471: Replication occurs even when a slave is already up to date.
+  (Mark Miller, Andre Charton)
+  
+* SOLR-4484: ReplicationHandler#loadReplicationProperties still uses Files 
+  rather than the Directory to try and read the replication properties files.
+  (Mark Miller) 
+
 Optimizations
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java b/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java
index 085cb8e..b92f539 100644
--- a/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java
+++ b/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java
@@ -89,7 +89,7 @@ public class StandardDirectoryFactory extends CachingDirectoryFactory {
       throws IOException {
     
     Directory baseFromDir = getBaseDir(fromDir);
-    Directory baseToDir = getBaseDir(fromDir);
+    Directory baseToDir = getBaseDir(toDir);
     
     if (baseFromDir instanceof FSDirectory && baseToDir instanceof FSDirectory) {
       File dir1 = ((FSDirectory) baseFromDir).getDirectory();
diff --git a/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java b/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java
index 963bc62..f8b99ce 100644
--- a/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java
@@ -19,6 +19,7 @@ package org.apache.solr.handler;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.Writer;
 import java.nio.ByteBuffer;
@@ -69,6 +70,7 @@ import org.apache.solr.response.SolrQueryResponse;
 import org.apache.solr.search.SolrIndexSearcher;
 import org.apache.solr.update.SolrIndexWriter;
 import org.apache.solr.util.NumberUtils;
+import org.apache.solr.util.PropertiesInputStream;
 import org.apache.solr.util.RefCounted;
 import org.apache.solr.util.plugin.SolrCoreAware;
 import org.slf4j.Logger;
@@ -473,7 +475,7 @@ public class ReplicationHandler extends RequestHandlerBase implements SolrCoreAw
     Directory dir;
     long size = 0;
     try {
-      dir = core.getDirectoryFactory().get(core.getNewIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);
+      dir = core.getDirectoryFactory().get(core.getIndexDir(), DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);
       try {
         size = DirectoryFactory.sizeOfDirectory(dir);
       } finally {
@@ -593,14 +595,18 @@ public class ReplicationHandler extends RequestHandlerBase implements SolrCoreAw
     }
 
     SnapPuller snapPuller = tempSnapPuller;
-    if (showSlaveDetails && snapPuller != null) {
+    if (snapPuller != null) {
       Properties props = loadReplicationProperties();
-      try {
-        NamedList nl = snapPuller.getDetails();
-        slave.add("masterDetails", nl.get(CMD_DETAILS));
-      } catch (Exception e) {
-        LOG.warn("Exception while invoking 'details' method for replication on master ", e);
-        slave.add(ERR_STATUS, "invalid_master");
+      if (showSlaveDetails) {
+        try {
+          NamedList nl = snapPuller.getDetails();
+          slave.add("masterDetails", nl.get(CMD_DETAILS));
+        } catch (Exception e) {
+          LOG.warn(
+              "Exception while invoking 'details' method for replication on master ",
+              e);
+          slave.add(ERR_STATUS, "invalid_master");
+        }
       }
       slave.add(MASTER_URL, snapPuller.getMasterUrl());
       if (snapPuller.getPollInterval() != null) {
@@ -709,7 +715,7 @@ public class ReplicationHandler extends RequestHandlerBase implements SolrCoreAw
 
     if (isMaster)
       details.add("master", master);
-    if (isSlave && showSlaveDetails)
+    if (slave.size() > 0)
       details.add("slave", slave);
     
     NamedList snapshotStats = snapShootDetails;
@@ -759,20 +765,32 @@ public class ReplicationHandler extends RequestHandlerBase implements SolrCoreAw
   }
 
   Properties loadReplicationProperties() {
-    FileInputStream inFile = null;
-    Properties props = new Properties();
+    Directory dir = null;
     try {
-      File f = new File(core.getDataDir(), SnapPuller.REPLICATION_PROPERTIES);
-      if (f.exists()) {
-        inFile = new FileInputStream(f);
-        props.load(inFile);
+      try {
+        dir = core.getDirectoryFactory().get(core.getDataDir(),
+            DirContext.META_DATA, core.getSolrConfig().indexConfig.lockType);
+        if (!dir.fileExists(SnapPuller.REPLICATION_PROPERTIES)) {
+          return new Properties();
+        }
+        final IndexInput input = dir.openInput(
+            SnapPuller.REPLICATION_PROPERTIES, IOContext.DEFAULT);
+        try {
+          final InputStream is = new PropertiesInputStream(input);
+          Properties props = new Properties();
+          props.load(is);
+          return props;
+        } finally {
+          input.close();
+        }
+      } finally {
+        if (dir != null) {
+          core.getDirectoryFactory().release(dir);
+        }
       }
-    } catch (Exception e) {
-      LOG.warn("Exception while reading " + SnapPuller.REPLICATION_PROPERTIES);
-    } finally {
-      IOUtils.closeQuietly(inFile);
+    } catch (IOException e) {
+      throw new SolrException(ErrorCode.SERVER_ERROR, e);
     }
-    return props;
   }
 
 
diff --git a/solr/core/src/java/org/apache/solr/handler/SnapPuller.java b/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
index 195ffd2..e185b6c 100644
--- a/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
+++ b/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
@@ -646,26 +646,20 @@ public class SnapPuller {
     solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded, false);
     
     try {
-      // first try to open an NRT searcher so that the new 
+      // first try to open an NRT searcher so that the new
       // IndexWriter is registered with the reader
       Future[] waitSearcher = new Future[1];
       solrCore.getSearcher(true, false, waitSearcher, true);
       if (waitSearcher[0] != null) {
         try {
-         waitSearcher[0].get();
-       } catch (InterruptedException e) {
-         SolrException.log(LOG,e);
-       } catch (ExecutionException e) {
-         SolrException.log(LOG,e);
-       }
-     }
-
-      // update our commit point to the right dir
-      CommitUpdateCommand cuc = new CommitUpdateCommand(req, false);
-      cuc.waitSearcher = false;
-      cuc.openSearcher = false;
-      solrCore.getUpdateHandler().commit(cuc);
-
+          waitSearcher[0].get();
+        } catch (InterruptedException e) {
+          SolrException.log(LOG, e);
+        } catch (ExecutionException e) {
+          SolrException.log(LOG, e);
+        }
+      }
+      
     } finally {
       req.close();
     }
@@ -741,7 +735,7 @@ public class SnapPuller {
           dirFileFetcher.fetchFile();
           filesDownloaded.add(new HashMap<String,Object>(file));
         } else {
-          LOG.info("Skipping download for " + file.get(NAME));
+          LOG.info("Skipping download for " + file.get(NAME) + " because it already exists");
         }
       }
     } finally {
@@ -776,6 +770,7 @@ public class SnapPuller {
     boolean success = false;
     try {
       if (indexDir.fileExists(fname)) {
+        LOG.info("Skipping move file - it already exists:" + fname);
         return true;
       }
     } catch (IOException e) {
diff --git a/solr/core/src/java/org/apache/solr/update/CommitUpdateCommand.java b/solr/core/src/java/org/apache/solr/update/CommitUpdateCommand.java
index 2a7649b..ee5df59 100644
--- a/solr/core/src/java/org/apache/solr/update/CommitUpdateCommand.java
+++ b/solr/core/src/java/org/apache/solr/update/CommitUpdateCommand.java
@@ -54,6 +54,7 @@ public class CommitUpdateCommand extends UpdateCommand {
             +",waitSearcher="+waitSearcher
             +",expungeDeletes="+expungeDeletes
             +",softCommit="+softCommit
+            +",prepareCommit="+prepareCommit
             +'}';
   }
 }
diff --git a/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java b/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
index 6474ce8..5390469 100644
--- a/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
+++ b/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
@@ -26,7 +26,9 @@ import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStreamWriter;
 import java.io.Writer;
+import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.ArrayList;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -530,15 +532,17 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
       index(masterClient, "id", i, "name", "name = " + i);
 
     // make sure prepareCommit doesn't mess up commit  (SOLR-3938)
+    
     // todo: make SolrJ easier to pass arbitrary params to
+    // TODO: precommit WILL screw with the rest of this test
     String masterUrl = "http://127.0.0.1:" + masterJetty.getLocalPort() + "/solr/update?prepareCommit=true";
     URL url = new URL(masterUrl);
-    InputStream stream = url.openStream();
-    try {
-      stream.close();
-    } catch (IOException e) {
-      //e.printStackTrace();
-    }
+//    InputStream stream = url.openStream();
+//    try {
+//      stream.close();
+//    } catch (IOException e) {
+//      //e.printStackTrace();
+//    }
 
     masterClient.commit();
 
@@ -550,7 +554,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     masterUrl = "http://127.0.0.1:" + slaveJetty.getLocalPort() + "/solr/replication?command=fetchindex&masterUrl=";
     masterUrl += "http://127.0.0.1:" + masterJetty.getLocalPort() + "/solr/replication";
     url = new URL(masterUrl);
-    stream = url.openStream();
+    InputStream stream = url.openStream();
     try {
       stream.close();
     } catch (IOException e) {
@@ -565,7 +569,6 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);
     assertEquals(null, cmp);
 
-    System.out.println("replicate slave to master");
     // snappull from the slave to the master
     
     for (int i = 0; i < 3; i++)
@@ -573,21 +576,73 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
 
     slaveClient.commit();
     
-    masterUrl = "http://127.0.0.1:" + masterJetty.getLocalPort() + "/solr/replication?command=fetchindex&masterUrl=";
-    masterUrl += "http://127.0.0.1:" + slaveJetty.getLocalPort() + "/solr/replication";
-    url = new URL(masterUrl);
-    stream = url.openStream();
-    try {
-      stream.close();
-    } catch (IOException e) {
-      //e.printStackTrace();
-    }
+    pullFromSlaveToMaster();
+    
+    //get docs from slave and check if number is equal to master
+    slaveQueryRsp = rQuery(nDocs, "*:*", slaveClient);
+    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response");
+    assertEquals(nDocs, slaveQueryResult.getNumFound());
+    //compare results
+    masterQueryRsp = rQuery(nDocs, "*:*", masterClient);
+    masterQueryResult = (SolrDocumentList) masterQueryRsp.get("response");
+    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);
+    assertEquals(null, cmp);
 
     // get the details
     // just ensures we don't get an exception
-    NamedList<Object> details = getDetails(masterClient);
-    //System.out.println("details:" + details);
+    assertVersions();
+    
+    pullFromSlaveToMaster();
+    
+    //get docs from slave and check if number is equal to master
+    slaveQueryRsp = rQuery(nDocs, "*:*", slaveClient);
+    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response");
+    assertEquals(nDocs, slaveQueryResult.getNumFound());
+    //compare results
+    masterQueryRsp = rQuery(nDocs, "*:*", masterClient);
+    masterQueryResult = (SolrDocumentList) masterQueryRsp.get("response");
+    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);
+    assertEquals(null, cmp);
+    
+    assertVersions();
+    
+    // now force a new index directory
+    for (int i = 0; i < 3; i++)
+      index(masterClient, "id", i, "name", "name = " + i);
+    
+    masterClient.commit();
+    
+    pullFromSlaveToMaster();
+    
+    //get docs from slave and check if number is equal to master
+    slaveQueryRsp = rQuery(nDocs, "*:*", slaveClient);
+    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response");
+    assertEquals(nDocs, slaveQueryResult.getNumFound());
+    //compare results
+    masterQueryRsp = rQuery(nDocs, "*:*", masterClient);
+    masterQueryResult = (SolrDocumentList) masterQueryRsp.get("response");
+    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);
+    assertEquals(null, cmp);
+    
+    assertVersions();
+    pullFromSlaveToMaster();
     
+    //get docs from slave and check if number is equal to master
+    slaveQueryRsp = rQuery(nDocs, "*:*", slaveClient);
+    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response");
+    assertEquals(nDocs, slaveQueryResult.getNumFound());
+    //compare results
+    masterQueryRsp = rQuery(nDocs, "*:*", masterClient);
+    masterQueryResult = (SolrDocumentList) masterQueryRsp.get("response");
+    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);
+    assertEquals(null, cmp);
+    
+    assertVersions();
+    
+    NamedList<Object> details = getDetails(masterClient);
+   
+    details = getDetails(slaveClient);
+
     // NOTE: at this point, the slave is not polling any more
     // restore it.
     slave.copyConfigFile(CONF_DIR + "solrconfig-slave.xml", "solrconfig.xml");
@@ -596,6 +651,42 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     slaveClient = createNewSolrServer(slaveJetty.getLocalPort());
   }
 
+  private void assertVersions() throws Exception {
+    NamedList<Object> details = getDetails(masterClient);
+    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get("commits");
+    Long maxVersionMaster = 0L;
+    for(NamedList<Object> commit : commits) {
+      Long version = (Long) commit.get("indexVersion");
+      maxVersionMaster = Math.max(version, maxVersionMaster);
+    }
+    
+    details = getDetails(slaveClient);
+    commits = (ArrayList<NamedList<Object>>) details.get("commits");
+    Long maxVersionSlave= 0L;
+    for(NamedList<Object> commit : commits) {
+      Long version = (Long) commit.get("indexVersion");
+      maxVersionSlave = Math.max(version, maxVersionSlave);
+    }
+    
+    assertEquals(maxVersionMaster, maxVersionSlave);
+  }
+
+  private void pullFromSlaveToMaster() throws MalformedURLException,
+      IOException {
+    String masterUrl;
+    URL url;
+    InputStream stream;
+    masterUrl = "http://127.0.0.1:" + masterJetty.getLocalPort() + "/solr/replication?command=fetchindex&masterUrl=";
+    masterUrl += "http://127.0.0.1:" + slaveJetty.getLocalPort() + "/solr/replication";
+    url = new URL(masterUrl);
+    stream = url.openStream();
+    try {
+      stream.close();
+    } catch (IOException e) {
+      //e.printStackTrace();
+    }
+  }
+
 
   private void doTestReplicateAfterStartup() throws Exception {
     //stop slave
@@ -660,8 +751,6 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
   }
   
   private void doTestReplicateAfterStartupWithNoActivity() throws Exception {
-    String factory = System.getProperty("solr.directoryFactory");
-    System.out.println("factory:" + factory);
     useFactory(null);
     try {
     

