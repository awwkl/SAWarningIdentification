GitDiffStart: 11b4d43627d47d5c6e221659ede691f6912b6ab1 | Tue Sep 25 00:03:27 2012 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index d3a6620..cdf2f93 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -344,6 +344,8 @@ Bug Fixes
 * SOLR-3875: Fixed index boosts on multi-valued fields when docBoost is used 
   (hossman)
 
+* SOLR-3878: Exception when using open-ended range query with CurrencyField (janhoy)
+
 Other Changes
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/schema/CurrencyField.java b/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
index 9cfe5fd..1b037d4 100644
--- a/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
+++ b/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
@@ -227,7 +227,7 @@ public class CurrencyField extends FieldType implements SchemaAware, ResourceLoa
       final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);
       final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);
 
-      if (!p1.getCurrencyCode().equals(p2.getCurrencyCode())) {
+      if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {
           throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
                   "Cannot parse range query " + part1 + " to " + part2 +
                           ": range queries only supported when upper and lower bound have same currency.");
@@ -237,11 +237,12 @@ public class CurrencyField extends FieldType implements SchemaAware, ResourceLoa
   }
 
   public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {
-    String currencyCode = p1.getCurrencyCode();
+    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :
+                          (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;
     final CurrencyValueSource vs = new CurrencyValueSource(field, currencyCode, parser);
 
     return new SolrConstantScoreQuery(new ValueSourceRangeFilter(vs,
-            p1.getAmount() + "", p2.getAmount() + "", minInclusive, maxInclusive));
+            p1 == null ? null : p1.getAmount() + "" , p2 == null ? null : p2.getAmount() + "", minInclusive, maxInclusive));
   }
 
   @Override
@@ -659,6 +660,9 @@ class CurrencyValue {
    * @return The parsed CurrencyValue.
    */
   public static CurrencyValue parse(String externalVal, String defaultCurrency) {
+    if (externalVal == null) {
+      return null;
+    }
     String amount = externalVal;
     String code = defaultCurrency;
 
@@ -668,6 +672,10 @@ class CurrencyValue {
       code = amountAndCode[1];
     }
 
+    if (amount.equals("*")) {
+      return null;
+    }
+    
     Currency currency = java.util.Currency.getInstance(code);
 
     if (currency == null) {
diff --git a/solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest.java b/solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest.java
index 9c34edb..04f3637 100644
--- a/solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest.java
+++ b/solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest.java
@@ -16,7 +16,6 @@ package org.apache.solr.schema;
  * limitations under the License.
  */
 
-import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.index.StorableField;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.core.SolrCore;
@@ -141,7 +140,32 @@ public class CurrencyFieldTest extends SolrTestCaseJ4 {
     assertQ(req("fl", "*,score", "q",
             "amount:[24.99,EUR TO 25.01,EUR]"),
             "//*[@numFound='1']");
-  }
+    
+    // Open ended ranges without currency
+    assertQ(req("fl", "*,score", "q",
+            "amount:[* TO *]"),
+            "//*[@numFound='10']");
+    
+    // Open ended ranges with currency
+    assertQ(req("fl", "*,score", "q",
+            "amount:[*,EUR TO *,EUR]"),
+            "//*[@numFound='10']");
+
+    // Open ended start range without currency
+    assertQ(req("fl", "*,score", "q",
+            "amount:[* TO 5,USD]"),
+            "//*[@numFound='5']");
+
+    // Open ended start range with currency (currency for the * won't matter)
+    assertQ(req("fl", "*,score", "q",
+            "amount:[*,USD TO 5,USD]"),
+            "//*[@numFound='5']");
+
+    // Open ended end range
+    assertQ(req("fl", "*,score", "q",
+            "amount:[3 TO *]"),
+            "//*[@numFound='8']");
+}
 
   @Test
   public void testCurrencyPointQuery() throws Exception {

