GitDiffStart: 29560fcf50df04084840225e4a3faa89bd8f678b | Tue Mar 11 08:06:54 2008 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index a158044..05ce53c 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -67,6 +67,9 @@ Bug fixes
     scorer.next(). (Eks Dev, Michael Busch)
 
  3. LUCENE-1182: Added scorePayload to SimilarityDelegator (Andi Vajda via Grant Ingersoll)
+ 
+ 4. LUCENE-1213: MultiFieldQueryParser was ignoring slop in case
+    of a single field phrase. (Trejkaz via Doron Cohen)
 	
 New features
 
diff --git a/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser.java b/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser.java
index cb43091..022d4fa 100644
--- a/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser.java
+++ b/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser.java
@@ -99,7 +99,7 @@ public class MultiFieldQueryParser extends QueryParser
     if (field == null) {
       Vector clauses = new Vector();
       for (int i = 0; i < fields.length; i++) {
-        Query q = getFieldQuery(fields[i], queryText);
+        Query q = super.getFieldQuery(fields[i], queryText);
         if (q != null) {
           //If the user passes a map of boosts
           if (boosts != null) {
@@ -109,12 +109,7 @@ public class MultiFieldQueryParser extends QueryParser
               q.setBoost(boost.floatValue());
             }
           }
-          if (q instanceof PhraseQuery) {
-            ((PhraseQuery) q).setSlop(slop);
-          }
-          if (q instanceof MultiPhraseQuery) {
-            ((MultiPhraseQuery) q).setSlop(slop);
-          }
+          applySlop(q,slop);
           clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));
         }
       }
@@ -122,7 +117,17 @@ public class MultiFieldQueryParser extends QueryParser
         return null;
       return getBooleanQuery(clauses, true);
     }
-    return super.getFieldQuery(field, queryText);
+    Query q = super.getFieldQuery(field, queryText);
+    applySlop(q,slop);
+    return q;
+  }
+
+  private void applySlop(Query q, int slop) {
+    if (q instanceof PhraseQuery) {
+      ((PhraseQuery) q).setSlop(slop);
+    } else if (q instanceof MultiPhraseQuery) {
+      ((MultiPhraseQuery) q).setSlop(slop);
+    }
   }
   
 
diff --git a/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser.java b/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser.java
index da19b45..f887592 100644
--- a/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser.java
+++ b/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser.java
@@ -113,6 +113,10 @@ public class TestMultiFieldQueryParser extends LuceneTestCase {
     q = mfqp.parse("\"foo bar\"~4");
     assertEquals("b:\"foo bar\"~4 t:\"foo bar\"~4", q.toString());
 
+    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.
+    q = mfqp.parse("b:\"foo bar\"~4"); 
+    assertEquals("b:\"foo bar\"~4", q.toString());
+
     // make sure that terms which have a field are not touched:
     q = mfqp.parse("one f:two");
     assertEquals("(b:one t:one) f:two", q.toString());

