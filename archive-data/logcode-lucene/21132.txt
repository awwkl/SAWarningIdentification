GitDiffStart: 543387249958b054e1d7cf063aa27a0332ccdd72 | Fri Sep 19 14:51:04 2008 +0000
diff --git a/src/java/org/apache/lucene/analysis/package.html b/src/java/org/apache/lucene/analysis/package.html
index dc6efda..2b3837e 100644
--- a/src/java/org/apache/lucene/analysis/package.html
+++ b/src/java/org/apache/lucene/analysis/package.html
@@ -93,7 +93,7 @@ providing for several functions, including (but not limited to):
       {@link org.apache.lucene.document.Field}s.</li>
     <li>The contrib/analyzers library located at the root of the Lucene distribution has a number of different Analyzer implementations to solve a variety
     of different problems related to searching.  Many of the Analyzers are designed to analyze non-English languages.</li>
-    <li>The {@link org.apache.lucene.analysis.snowball contrib/snowball library} 
+    <li>The contrib/snowball library 
         located at the root of the Lucene distribution has Analyzer and TokenFilter 
         implementations for a variety of Snowball stemmers.  
         See <a href="http://snowball.tartarus.org">http://snowball.tartarus.org</a> 
diff --git a/src/java/org/apache/lucene/document/Document.java b/src/java/org/apache/lucene/document/Document.java
index d3b9fb8..620a0a3 100644
--- a/src/java/org/apache/lucene/document/Document.java
+++ b/src/java/org/apache/lucene/document/Document.java
@@ -188,8 +188,9 @@ public final class Document implements java.io.Serializable {
 
   /** Returns a List of all the fields in a document.
    * <p>Note that fields which are <i>not</i> {@link Fieldable#isStored() stored} are
-   * <i>not</i> available in documents retrieved from the index, e.g. with {@link
-   * Hits#doc(int)}, {@link Searcher#doc(int)} or {@link IndexReader#document(int)}.
+   * <i>not</i> available in documents retrieved from the
+   * index, e.g. {@link Searcher#doc(int)} or {@link
+   * IndexReader#document(int)}.
    */
   public final List getFields() {
     return fields;
diff --git a/src/java/org/apache/lucene/search/ConstantScoreQuery.java b/src/java/org/apache/lucene/search/ConstantScoreQuery.java
index 1a28180..f6a2320 100644
--- a/src/java/org/apache/lucene/search/ConstantScoreQuery.java
+++ b/src/java/org/apache/lucene/search/ConstantScoreQuery.java
@@ -20,7 +20,6 @@ package org.apache.lucene.search;
 import org.apache.lucene.index.IndexReader;
 
 import java.io.IOException;
-import java.util.BitSet;
 import java.util.Set;
 
 /**
diff --git a/src/java/org/apache/lucene/search/TopDocCollector.java b/src/java/org/apache/lucene/search/TopDocCollector.java
index 84a51b4..9ea2bdc 100644
--- a/src/java/org/apache/lucene/search/TopDocCollector.java
+++ b/src/java/org/apache/lucene/search/TopDocCollector.java
@@ -52,7 +52,7 @@ public class TopDocCollector extends HitCollector {
   }
 
   /** Constructor to collect the top-scoring documents by using the given PQ.
-   * @hq the PQ to use by this instance.
+   * @param hq the PQ to use by this instance.
    */
   protected TopDocCollector(PriorityQueue hq) {
     this.hq = hq;
diff --git a/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil.java b/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil.java
index add7e16..610ca67 100644
--- a/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil.java
+++ b/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil.java
@@ -66,7 +66,7 @@ public class PayloadSpanUtil {
    * Query should be rewritten for wild/fuzzy support.
    * 
    * @param query
-   * @return
+   * @return payloads Collection
    * @throws IOException
    */
   public Collection getPayloadsForQuery(Query query) throws IOException {
diff --git a/src/java/org/apache/lucene/util/OpenBitSet.java b/src/java/org/apache/lucene/util/OpenBitSet.java
index b3a3af4..02e1cb3 100644
--- a/src/java/org/apache/lucene/util/OpenBitSet.java
+++ b/src/java/org/apache/lucene/util/OpenBitSet.java
@@ -26,7 +26,7 @@ import org.apache.lucene.search.DocIdSetIterator;
 /** An "open" BitSet implementation that allows direct access to the array of words
  * storing the bits.
  * <p/>
- * Unlike java.util.bitet, the fact that bits are packed into an array of longs
+ * Unlike java.util.bitset, the fact that bits are packed into an array of longs
  * is part of the interface.  This allows efficient implementation of other algorithms
  * by someone other than the author.  It also allows one to efficiently implement
  * alternate serialization or interchange formats.

