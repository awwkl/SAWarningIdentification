GitDiffStart: 5aa974d3308faaacce5dccee632e0da0c7334f45 | Sun Apr 11 10:37:38 2010 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 1d44d66..b14b9f0 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -97,9 +97,13 @@ Changes in backwards compatibility policy
   TODO: Point to new attribute inspection API coming with LUCENE-2374.
   (Uwe Schindler, Robert Muir)
 
-* LUCENE-2372: StandardAnalyzer, KeywordAnalyzer, PerFieldAnalyzerWrapper
-  are now final.  Also removed the now obsolete and deprecated
-  Analyzer.setOverridesTokenStreamMethod().  (Uwe Schindler)
+* LUCENE-2372, LUCENE-2389: StandardAnalyzer, KeywordAnalyzer,
+  PerFieldAnalyzerWrapper, WhitespaceTokenizer are now final.  Also removed
+  the now obsolete and deprecated Analyzer.setOverridesTokenStreamMethod().
+  Analyzer and TokenStream base classes now have an assertion in their ctor,
+  that check subclasses to be final or at least have final implementations
+  of incrementToken(), tokenStream(), and reusableTokenStream().
+  (Uwe Schindler, Robert Muir)
 
 Changes in runtime behavior
 
diff --git a/lucene/backwards/src/test/org/apache/lucene/analysis/TestAnalyzers.java b/lucene/backwards/src/test/org/apache/lucene/analysis/TestAnalyzers.java
index 260df58..43ebad4 100644
--- a/lucene/backwards/src/test/org/apache/lucene/analysis/TestAnalyzers.java
+++ b/lucene/backwards/src/test/org/apache/lucene/analysis/TestAnalyzers.java
@@ -143,7 +143,7 @@ public class TestAnalyzers extends BaseTokenStreamTestCase {
   */
 }
 
-class PayloadSetter extends TokenFilter {
+final class PayloadSetter extends TokenFilter {
   PayloadAttribute payloadAtt;
   public  PayloadSetter(TokenStream input) {
     super(input);
diff --git a/lucene/backwards/src/test/org/apache/lucene/queryParser/TestQueryParser.java b/lucene/backwards/src/test/org/apache/lucene/queryParser/TestQueryParser.java
index 37986a3..024c9cd 100644
--- a/lucene/backwards/src/test/org/apache/lucene/queryParser/TestQueryParser.java
+++ b/lucene/backwards/src/test/org/apache/lucene/queryParser/TestQueryParser.java
@@ -81,7 +81,7 @@ public class TestQueryParser extends LocalizedTestCase {
   
   public static Analyzer qpAnalyzer = new QPTestAnalyzer();
 
-  public static class QPTestFilter extends TokenFilter {
+  public static final class QPTestFilter extends TokenFilter {
     TermAttribute termAtt;
     OffsetAttribute offsetAtt;
         
@@ -122,7 +122,7 @@ public class TestQueryParser extends LocalizedTestCase {
   }
 
   
-  public static class QPTestAnalyzer extends Analyzer {
+  public static final class QPTestAnalyzer extends Analyzer {
 
     /** Filters LowerCaseTokenizer with StopFilter. */
     @Override
diff --git a/lucene/backwards/src/test/org/apache/lucene/search/TestPositionIncrement.java b/lucene/backwards/src/test/org/apache/lucene/search/TestPositionIncrement.java
index 518bab1..d8e1fa7 100644
--- a/lucene/backwards/src/test/org/apache/lucene/search/TestPositionIncrement.java
+++ b/lucene/backwards/src/test/org/apache/lucene/search/TestPositionIncrement.java
@@ -317,7 +317,7 @@ public class TestPositionIncrement extends LuceneTestCase {
   }
 }
 
-class TestPayloadAnalyzer extends Analyzer {
+final class TestPayloadAnalyzer extends Analyzer {
 
   @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
@@ -326,7 +326,7 @@ class TestPayloadAnalyzer extends Analyzer {
   }
 }
 
-class PayloadFilter extends TokenFilter {
+final class PayloadFilter extends TokenFilter {
   String fieldName;
 
   int pos;
diff --git a/lucene/backwards/src/test/org/apache/lucene/search/payloads/PayloadHelper.java b/lucene/backwards/src/test/org/apache/lucene/search/payloads/PayloadHelper.java
index 1540657..5d96b9a 100644
--- a/lucene/backwards/src/test/org/apache/lucene/search/payloads/PayloadHelper.java
+++ b/lucene/backwards/src/test/org/apache/lucene/search/payloads/PayloadHelper.java
@@ -44,7 +44,7 @@ public class PayloadHelper {
   public static final String MULTI_FIELD = "multiField";
   public static final String FIELD = "field";
 
-  public class PayloadAnalyzer extends Analyzer {
+  public final class PayloadAnalyzer extends Analyzer {
 
 
 
@@ -56,7 +56,7 @@ public class PayloadHelper {
     }
   }
 
-  public class PayloadFilter extends TokenFilter {
+  public final class PayloadFilter extends TokenFilter {
     String fieldName;
     int numSeen = 0;
     PayloadAttribute payloadAtt;
diff --git a/lucene/backwards/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java b/lucene/backwards/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java
index 468f69b..f4df76d 100644
--- a/lucene/backwards/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java
+++ b/lucene/backwards/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java
@@ -471,7 +471,7 @@ public class TestPayloadSpans extends LuceneTestCase {
     assertEquals(numSpans, cnt);
   }
 
-  class PayloadAnalyzer extends Analyzer {
+  final class PayloadAnalyzer extends Analyzer {
 
     @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
@@ -481,7 +481,7 @@ public class TestPayloadSpans extends LuceneTestCase {
     }
   }
 
-  class PayloadFilter extends TokenFilter {
+  final class PayloadFilter extends TokenFilter {
     String fieldName;
     int numSeen = 0;
     Set entities = new HashSet();
@@ -523,7 +523,7 @@ public class TestPayloadSpans extends LuceneTestCase {
     }
   }
   
-  public class TestPayloadAnalyzer extends Analyzer {
+  public final class TestPayloadAnalyzer extends Analyzer {
 
     @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
diff --git a/lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.java b/lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.java
index 3a8aa3d..c715df0 100644
--- a/lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.java
+++ b/lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter.java
@@ -482,7 +482,7 @@ public class TestShingleMatrixFilter extends BaseTokenStreamTestCase {
   }
 
 
-  public static class TokenListStream extends TokenStream {
+  public final static class TokenListStream extends TokenStream {
 
     private Collection<Token> tokens;
     TermAttribute termAtt;
diff --git a/lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java b/lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java
index 31f9fa7..5129f23 100644
--- a/lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java
+++ b/lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java
@@ -148,7 +148,7 @@ public class TokenSources {
     }
 
     // an object used to iterate across an array of tokens
-    class StoredTokenStream extends TokenStream {
+    final class StoredTokenStream extends TokenStream {
       Token tokens[];
 
       int currentToken = 0;
diff --git a/lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector.java b/lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector.java
index 7822be6..8cb2f14 100644
--- a/lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector.java
+++ b/lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector.java
@@ -31,10 +31,7 @@ import org.apache.lucene.analysis.tokenattributes.TermAttribute;
 import org.apache.lucene.index.TermPositionVector;
 import org.apache.lucene.index.TermVectorOffsetInfo;
 
-/**
- * @author CMorris
- */
-public class TokenStreamFromTermPositionVector extends TokenStream {
+public final class TokenStreamFromTermPositionVector extends TokenStream {
 
   private final List<Token> positionedTokens = new ArrayList<Token>();
 
diff --git a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
index bc7fd90..2f0adc2 100644
--- a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
+++ b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
@@ -1783,7 +1783,7 @@ public class HighlighterTest extends BaseTokenStreamTestCase implements Formatte
 // behaviour to synonyms
 // ===================================================================
 
-class SynonymAnalyzer extends Analyzer {
+final class SynonymAnalyzer extends Analyzer {
   private Map<String,String> synonyms;
 
   public SynonymAnalyzer(Map<String,String> synonyms) {
@@ -1810,7 +1810,7 @@ class SynonymAnalyzer extends Analyzer {
  * Expands a token stream with synonyms (TODO - make the synonyms analyzed by choice of analyzer)
  *
  */
-class SynonymTokenizer extends TokenStream {
+final class SynonymTokenizer extends TokenStream {
   private TokenStream realStream;
   private Token currentRealToken = null;
   private Map<String,String> synonyms;
diff --git a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java
index 883b694..9c77dce 100644
--- a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java
+++ b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java
@@ -170,14 +170,14 @@ public abstract class AbstractTestCase extends LuceneTestCase {
     }
   }
 
-  static class BigramAnalyzer extends Analyzer {
+  static final class BigramAnalyzer extends Analyzer {
     @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
       return new BasicNGramTokenizer( reader );
     }
   }
   
-  static class BasicNGramTokenizer extends Tokenizer {
+  static final class BasicNGramTokenizer extends Tokenizer {
 
     public static final int DEFAULT_N_SIZE = 2;
     public static final String DEFAULT_DELIMITERS = " \t\n.,";
diff --git a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest.java b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest.java
index 1134d38..53a1602 100644
--- a/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest.java
+++ b/lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest.java
@@ -292,7 +292,7 @@ public class IndexTimeSynonymTest extends AbstractTestCase {
     return token;
   }
   
-  public static class TokenArrayAnalyzer extends Analyzer {
+  public static final class TokenArrayAnalyzer extends Analyzer {
     Token[] tokens;
     public TokenArrayAnalyzer( Token... tokens ){
       this.tokens = tokens;
diff --git a/lucene/contrib/icu/src/test/org/apache/lucene/collation/TestICUCollationKeyFilter.java b/lucene/contrib/icu/src/test/org/apache/lucene/collation/TestICUCollationKeyFilter.java
index e9bd0a4..b4536fc 100644
--- a/lucene/contrib/icu/src/test/org/apache/lucene/collation/TestICUCollationKeyFilter.java
+++ b/lucene/contrib/icu/src/test/org/apache/lucene/collation/TestICUCollationKeyFilter.java
@@ -42,7 +42,7 @@ public class TestICUCollationKeyFilter extends CollationTestBase {
     (collator.getCollationKey(secondRangeEndOriginal).toByteArray());
 
   
-  public class TestAnalyzer extends Analyzer {
+  public final class TestAnalyzer extends Analyzer {
     private Collator _collator;
 
     TestAnalyzer(Collator collator) {
diff --git a/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/analyzing/TestAnalyzingQueryParser.java b/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/analyzing/TestAnalyzingQueryParser.java
index 8973e15..14170a7 100644
--- a/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/analyzing/TestAnalyzingQueryParser.java
+++ b/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/analyzing/TestAnalyzingQueryParser.java
@@ -105,7 +105,7 @@ public class TestAnalyzingQueryParser extends LuceneTestCase {
 
 }
 
-class ASCIIAnalyzer extends org.apache.lucene.analysis.Analyzer {
+final class ASCIIAnalyzer extends org.apache.lucene.analysis.Analyzer {
   public ASCIIAnalyzer() {
   }
 
diff --git a/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.java b/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.java
index 961fe51..7495b0c 100644
--- a/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.java
+++ b/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.java
@@ -56,7 +56,7 @@ public class TestPrecedenceQueryParser extends LocalizedTestCase {
 
   public static Analyzer qpAnalyzer = new QPTestAnalyzer();
 
-  public static class QPTestFilter extends TokenFilter {
+  public static final class QPTestFilter extends TokenFilter {
     /**
      * Filter which discards the token 'stop' and which expands the
      * token 'phrase' into 'phrase1 phrase2'
@@ -94,7 +94,7 @@ public class TestPrecedenceQueryParser extends LocalizedTestCase {
     }
   }
 
-  public static class QPTestAnalyzer extends Analyzer {
+  public static final class QPTestAnalyzer extends Analyzer {
 
     /** Filters LowerCaseTokenizer with StopFilter. */
     @Override
diff --git a/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper.java b/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper.java
index 68e2e6a..82c9b5b 100644
--- a/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper.java
+++ b/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper.java
@@ -342,7 +342,7 @@ public class TestMultiFieldQPHelper extends LuceneTestCase {
   /**
    * Return empty tokens for field "f1".
    */
-  private static class AnalyzerReturningNull extends Analyzer {
+  private static final class AnalyzerReturningNull extends Analyzer {
     StandardAnalyzer stdAnalyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);
 
     public AnalyzerReturningNull() {
diff --git a/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.java b/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.java
index 9d7008f..ac86719 100644
--- a/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.java
+++ b/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.java
@@ -97,7 +97,7 @@ public class TestQPHelper extends LocalizedTestCase {
 
   public static Analyzer qpAnalyzer = new QPTestAnalyzer();
 
-  public static class QPTestFilter extends TokenFilter {
+  public static final class QPTestFilter extends TokenFilter {
     TermAttribute termAtt;
     OffsetAttribute offsetAtt;
 
@@ -138,7 +138,7 @@ public class TestQPHelper extends LocalizedTestCase {
     }
   }
 
-  public static class QPTestAnalyzer extends Analyzer {
+  public static final class QPTestAnalyzer extends Analyzer {
 
     /** Filters LowerCaseTokenizer with StopFilter. */
     @Override
diff --git a/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper.java b/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper.java
index 3efa83d..8595466 100644
--- a/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper.java
+++ b/lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper.java
@@ -94,7 +94,7 @@ public class TestQueryParserWrapper extends LocalizedTestCase {
   
   public static Analyzer qpAnalyzer = new QPTestAnalyzer();
 
-  public static class QPTestFilter extends TokenFilter {
+  public static final class QPTestFilter extends TokenFilter {
     TermAttribute termAtt;
     OffsetAttribute offsetAtt;
 
@@ -135,7 +135,7 @@ public class TestQueryParserWrapper extends LocalizedTestCase {
     }
   }
 
-  public static class QPTestAnalyzer extends Analyzer {
+  public static final class QPTestAnalyzer extends Analyzer {
 
     /** Filters LowerCaseTokenizer with StopFilter. */
     @Override
diff --git a/lucene/src/java/org/apache/lucene/analysis/Analyzer.java b/lucene/src/java/org/apache/lucene/analysis/Analyzer.java
index cae6b5c..d03814f 100644
--- a/lucene/src/java/org/apache/lucene/analysis/Analyzer.java
+++ b/lucene/src/java/org/apache/lucene/analysis/Analyzer.java
@@ -20,9 +20,9 @@ package org.apache.lucene.analysis;
 import java.io.Reader;
 import java.io.IOException;
 import java.io.Closeable;
+import java.lang.reflect.Modifier;
 
 import org.apache.lucene.util.CloseableThreadLocal;
-import org.apache.lucene.util.VirtualMethod;
 import org.apache.lucene.store.AlreadyClosedException;
 
 import org.apache.lucene.document.Fieldable;
@@ -33,8 +33,34 @@ import org.apache.lucene.document.Fieldable;
  *  Typical implementations first build a Tokenizer, which breaks the stream of
  *  characters from the Reader into raw Tokens.  One or more TokenFilters may
  *  then be applied to the output of the Tokenizer.
+ * <p>The {@code Analyzer}-API in Lucene is based on the decorator pattern.
+ * Therefore all non-abstract subclasses must be final or their {@link #tokenStream}
+ * and {@link #reusableTokenStream} implementations must be final! This is checked
+ * when Java assertions are enabled.
  */
 public abstract class Analyzer implements Closeable {
+
+  protected Analyzer() {
+    super();
+    assert assertFinal();
+  }
+  
+  private boolean assertFinal() {
+    try {
+      final Class<?> clazz = getClass();
+      assert clazz.isAnonymousClass() ||
+        (clazz.getModifiers() & (Modifier.FINAL | Modifier.PRIVATE)) != 0 ||
+        (
+          Modifier.isFinal(clazz.getMethod("tokenStream", String.class, Reader.class).getModifiers()) &&
+          Modifier.isFinal(clazz.getMethod("reusableTokenStream", String.class, Reader.class).getModifiers())
+        ) :
+        "Analyzer implementation classes or at least their tokenStream() and reusableTokenStream() implementations must be final";
+      return true;
+    } catch (NoSuchMethodException nsme) {
+      return false;
+    }
+  }
+
   /** Creates a TokenStream which tokenizes all the text in the provided
    * Reader.  Must be able to handle null field name for
    * backward compatibility.
diff --git a/lucene/src/java/org/apache/lucene/analysis/TokenStream.java b/lucene/src/java/org/apache/lucene/analysis/TokenStream.java
index c3b4e7c..e432132 100644
--- a/lucene/src/java/org/apache/lucene/analysis/TokenStream.java
+++ b/lucene/src/java/org/apache/lucene/analysis/TokenStream.java
@@ -19,6 +19,7 @@ package org.apache.lucene.analysis;
 
 import java.io.IOException;
 import java.io.Closeable;
+import java.lang.reflect.Modifier;
 
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -76,6 +77,10 @@ import org.apache.lucene.util.AttributeSource;
  * {@link TeeSinkTokenFilter}). For this usecase
  * {@link AttributeSource#captureState} and {@link AttributeSource#restoreState}
  * can be used.
+ * <p>The {@code TokenStream}-API in Lucene is based on the decorator pattern.
+ * Therefore all non-abstract subclasses must be final or have at least a final
+ * implementation of {@link #incrementToken}! This is checked when Java
+ * assertions are enabled.
  */
 public abstract class TokenStream extends AttributeSource implements Closeable {
 
@@ -84,6 +89,7 @@ public abstract class TokenStream extends AttributeSource implements Closeable {
    */
   protected TokenStream() {
     super();
+    assert assertFinal();
   }
   
   /**
@@ -91,6 +97,7 @@ public abstract class TokenStream extends AttributeSource implements Closeable {
    */
   protected TokenStream(AttributeSource input) {
     super(input);
+    assert assertFinal();
   }
   
   /**
@@ -98,6 +105,20 @@ public abstract class TokenStream extends AttributeSource implements Closeable {
    */
   protected TokenStream(AttributeFactory factory) {
     super(factory);
+    assert assertFinal();
+  }
+  
+  private boolean assertFinal() {
+    try {
+      final Class<?> clazz = getClass();
+      assert clazz.isAnonymousClass() ||
+        (clazz.getModifiers() & (Modifier.FINAL | Modifier.PRIVATE)) != 0 ||
+        Modifier.isFinal(clazz.getMethod("incrementToken").getModifiers()) :
+        "TokenStream implementation classes or at least their incrementToken() implementation must be final";
+      return true;
+    } catch (NoSuchMethodException nsme) {
+      return false;
+    }
   }
   
   /**
diff --git a/lucene/src/java/org/apache/lucene/analysis/WhitespaceTokenizer.java b/lucene/src/java/org/apache/lucene/analysis/WhitespaceTokenizer.java
index 505afaf..819a547 100644
--- a/lucene/src/java/org/apache/lucene/analysis/WhitespaceTokenizer.java
+++ b/lucene/src/java/org/apache/lucene/analysis/WhitespaceTokenizer.java
@@ -35,7 +35,7 @@ import org.apache.lucene.util.Version;
  * {@link CharTokenizer#normalize(int)} for details.</li>
  * </ul>
  */
-public class WhitespaceTokenizer extends CharTokenizer {
+public final class WhitespaceTokenizer extends CharTokenizer {
   
   /**
    * Construct a new WhitespaceTokenizer. * @param matchVersion Lucene version
diff --git a/lucene/src/java/org/apache/lucene/collation/CollationKeyAnalyzer.java b/lucene/src/java/org/apache/lucene/collation/CollationKeyAnalyzer.java
index 081624a..509b748 100644
--- a/lucene/src/java/org/apache/lucene/collation/CollationKeyAnalyzer.java
+++ b/lucene/src/java/org/apache/lucene/collation/CollationKeyAnalyzer.java
@@ -76,7 +76,7 @@ import java.io.IOException;
  *   ICUCollationKeyAnalyzer on the query side, or vice versa.
  * </p>
  */
-public class CollationKeyAnalyzer extends Analyzer {
+public final class CollationKeyAnalyzer extends Analyzer {
   private Collator collator;
 
   public CollationKeyAnalyzer(Collator collator) {
diff --git a/lucene/src/test/org/apache/lucene/TestAssertions.java b/lucene/src/test/org/apache/lucene/TestAssertions.java
index 94f07b9..373fd3d 100644
--- a/lucene/src/test/org/apache/lucene/TestAssertions.java
+++ b/lucene/src/test/org/apache/lucene/TestAssertions.java
@@ -17,11 +17,15 @@ package org.apache.lucene;
  * limitations under the License.
  */
 
+import java.io.Reader;
+
 import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.TokenStream;
 
 public class TestAssertions extends LuceneTestCase {
 
-  public void test() {
+  public void testBasics() {
     try {
       assert Boolean.FALSE.booleanValue();
       fail("assertions are not enabled!");
@@ -29,5 +33,65 @@ public class TestAssertions extends LuceneTestCase {
       assert Boolean.TRUE.booleanValue();
     }
   }
+  
+  static class TestAnalyzer1 extends Analyzer {
+    public final TokenStream tokenStream(String s, Reader r) { return null; }
+    public final TokenStream reusableTokenStream(String s, Reader r) { return null; }
+  }
+
+  static final class TestAnalyzer2 extends Analyzer {
+    public TokenStream tokenStream(String s, Reader r) { return null; }
+    public TokenStream reusableTokenStream(String s, Reader r) { return null; }
+  }
+
+  static class TestAnalyzer3 extends Analyzer {
+    public TokenStream tokenStream(String s, Reader r) { return null; }
+    public TokenStream reusableTokenStream(String s, Reader r) { return null; }
+  }
+
+  static class TestAnalyzer4 extends Analyzer {
+    public final TokenStream tokenStream(String s, Reader r) { return null; }
+    public TokenStream reusableTokenStream(String s, Reader r) { return null; }
+  }
+
+  static class TestTokenStream1 extends TokenStream {
+    public final boolean incrementToken() { return false; }
+  }
+
+  static final class TestTokenStream2 extends TokenStream {
+    public boolean incrementToken() { return false; }
+  }
+
+  static class TestTokenStream3 extends TokenStream {
+    public boolean incrementToken() { return false; }
+  }
+
+  public void testTokenStreams() {
+    new TestAnalyzer1();
+    
+    new TestAnalyzer2();
+    
+    try {
+      new TestAnalyzer3();
+      fail("TestAnalyzer3 should fail assertion");
+    } catch (AssertionError e) {
+    }
+    
+    try {
+      new TestAnalyzer4();
+      fail("TestAnalyzer4 should fail assertion");
+    } catch (AssertionError e) {
+    }
+    
+    new TestTokenStream1();
+    
+    new TestTokenStream2();
+    
+    try {
+      new TestTokenStream3();
+      fail("TestTokenStream3 should fail assertion");
+    } catch (AssertionError e) {
+    }
+  }
 
 }
diff --git a/lucene/src/test/org/apache/lucene/analysis/TestAnalyzers.java b/lucene/src/test/org/apache/lucene/analysis/TestAnalyzers.java
index ca8a88a..e78832c 100644
--- a/lucene/src/test/org/apache/lucene/analysis/TestAnalyzers.java
+++ b/lucene/src/test/org/apache/lucene/analysis/TestAnalyzers.java
@@ -216,7 +216,7 @@ public class TestAnalyzers extends BaseTokenStreamTestCase {
   
 }
 
-class PayloadSetter extends TokenFilter {
+final class PayloadSetter extends TokenFilter {
   PayloadAttribute payloadAtt;
   public  PayloadSetter(TokenStream input) {
     super(input);
diff --git a/lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers.java b/lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers.java
index acf562d..30c867b 100644
--- a/lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers.java
+++ b/lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers.java
@@ -162,7 +162,7 @@ public class TestCharTokenizers extends BaseTokenStreamTestCase {
     }
   }
 
-  static class TestingCharTokenizer extends CharTokenizer {
+  static final class TestingCharTokenizer extends CharTokenizer {
     public TestingCharTokenizer(Version matchVersion, Reader input) {
       super(matchVersion, input);
     }
@@ -178,7 +178,7 @@ public class TestCharTokenizers extends BaseTokenStreamTestCase {
     }
   }
 
-  static class TestingCharTokenizerNormalize extends CharTokenizer {
+  static final class TestingCharTokenizerNormalize extends CharTokenizer {
     public TestingCharTokenizerNormalize(Version matchVersion, Reader input) {
       super(matchVersion, input);
     }
@@ -194,7 +194,7 @@ public class TestCharTokenizers extends BaseTokenStreamTestCase {
     }
   }
 
-  static class TestingCharTokenizerNormalizeIsTokenChar extends CharTokenizer {
+  static final class TestingCharTokenizerNormalizeIsTokenChar extends CharTokenizer {
     public TestingCharTokenizerNormalizeIsTokenChar(Version matchVersion,
         Reader input) {
       super(matchVersion, input);
diff --git a/lucene/src/test/org/apache/lucene/analysis/TestKeywordMarkerFilter.java b/lucene/src/test/org/apache/lucene/analysis/TestKeywordMarkerFilter.java
index 77d471b..ddc0b6d 100644
--- a/lucene/src/test/org/apache/lucene/analysis/TestKeywordMarkerFilter.java
+++ b/lucene/src/test/org/apache/lucene/analysis/TestKeywordMarkerFilter.java
@@ -51,7 +51,7 @@ public class TestKeywordMarkerFilter extends BaseTokenStreamTestCase {
             "The quIck browN LuceneFox Jumps")), set2)), output);
   }
 
-  public static class LowerCaseFilterMock extends TokenFilter {
+  public static final class LowerCaseFilterMock extends TokenFilter {
 
     private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
     private final KeywordAttribute keywordAttr = addAttribute(KeywordAttribute.class);
diff --git a/lucene/src/test/org/apache/lucene/collation/TestCollationKeyFilter.java b/lucene/src/test/org/apache/lucene/collation/TestCollationKeyFilter.java
index f26ebe3..533242b 100644
--- a/lucene/src/test/org/apache/lucene/collation/TestCollationKeyFilter.java
+++ b/lucene/src/test/org/apache/lucene/collation/TestCollationKeyFilter.java
@@ -45,7 +45,7 @@ public class TestCollationKeyFilter extends CollationTestBase {
     (collator.getCollationKey(secondRangeEndOriginal).toByteArray());
 
   
-  public class TestAnalyzer extends Analyzer {
+  public final class TestAnalyzer extends Analyzer {
     private Collator _collator;
 
     TestAnalyzer(Collator collator) {
diff --git a/lucene/src/test/org/apache/lucene/queryParser/TestQueryParser.java b/lucene/src/test/org/apache/lucene/queryParser/TestQueryParser.java
index 4c8a4c7..72783b7 100644
--- a/lucene/src/test/org/apache/lucene/queryParser/TestQueryParser.java
+++ b/lucene/src/test/org/apache/lucene/queryParser/TestQueryParser.java
@@ -81,7 +81,7 @@ public class TestQueryParser extends LocalizedTestCase {
   
   public static Analyzer qpAnalyzer = new QPTestAnalyzer();
 
-  public static class QPTestFilter extends TokenFilter {
+  public static final class QPTestFilter extends TokenFilter {
     CharTermAttribute termAtt;
     OffsetAttribute offsetAtt;
         
@@ -123,7 +123,7 @@ public class TestQueryParser extends LocalizedTestCase {
   }
 
   
-  public static class QPTestAnalyzer extends Analyzer {
+  public static final class QPTestAnalyzer extends Analyzer {
 
     /** Filters LowerCaseTokenizer with StopFilter. */
     @Override
diff --git a/lucene/src/test/org/apache/lucene/search/TestPositionIncrement.java b/lucene/src/test/org/apache/lucene/search/TestPositionIncrement.java
index 8d94af4..838b665 100644
--- a/lucene/src/test/org/apache/lucene/search/TestPositionIncrement.java
+++ b/lucene/src/test/org/apache/lucene/search/TestPositionIncrement.java
@@ -329,7 +329,7 @@ public class TestPositionIncrement extends LuceneTestCase {
   }
 }
 
-class TestPayloadAnalyzer extends Analyzer {
+final class TestPayloadAnalyzer extends Analyzer {
 
   @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
@@ -338,7 +338,7 @@ class TestPayloadAnalyzer extends Analyzer {
   }
 }
 
-class PayloadFilter extends TokenFilter {
+final class PayloadFilter extends TokenFilter {
   String fieldName;
 
   int pos;
diff --git a/lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper.java b/lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper.java
index 99a9978..43483b7 100644
--- a/lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper.java
+++ b/lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper.java
@@ -46,7 +46,7 @@ public class PayloadHelper {
   public static final String MULTI_FIELD = "multiField";
   public static final String FIELD = "field";
 
-  public class PayloadAnalyzer extends Analyzer {
+  public final class PayloadAnalyzer extends Analyzer {
 
 
 
@@ -58,7 +58,7 @@ public class PayloadHelper {
     }
   }
 
-  public class PayloadFilter extends TokenFilter {
+  public final class PayloadFilter extends TokenFilter {
     String fieldName;
     int numSeen = 0;
     PayloadAttribute payloadAtt;
diff --git a/lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java b/lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java
index 44bf6e9..b4a0c77 100644
--- a/lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java
+++ b/lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java
@@ -462,7 +462,7 @@ public class TestPayloadSpans extends LuceneTestCase {
     assertEquals(numSpans, cnt);
   }
 
-  class PayloadAnalyzer extends Analyzer {
+  final class PayloadAnalyzer extends Analyzer {
 
     @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {
@@ -472,7 +472,7 @@ public class TestPayloadSpans extends LuceneTestCase {
     }
   }
 
-  class PayloadFilter extends TokenFilter {
+  final class PayloadFilter extends TokenFilter {
     String fieldName;
     int numSeen = 0;
     Set<String> entities = new HashSet<String>();
@@ -514,7 +514,7 @@ public class TestPayloadSpans extends LuceneTestCase {
     }
   }
   
-  public class TestPayloadAnalyzer extends Analyzer {
+  public final class TestPayloadAnalyzer extends Analyzer {
 
     @Override
     public TokenStream tokenStream(String fieldName, Reader reader) {

