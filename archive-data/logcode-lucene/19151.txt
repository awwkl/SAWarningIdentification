GitDiffStart: 325e33d3e98577f35f4c4c9b62bb50853f532136 | Fri Oct 9 18:07:50 2009 +0000
diff --git a/common-build.xml b/common-build.xml
index b30a532..b45ad93 100644
--- a/common-build.xml
+++ b/common-build.xml
@@ -92,7 +92,7 @@
   <property name="javadoc.link.junit"
             value="http://junit.sourceforge.net/javadoc/"/>
   <property name="javadoc.link.lucene"
-            value="http://lucene.apache.org/java/docs/api/"/>
+            value="http://lucene.apache.org/java/2_9_0/api/all/"/>
   <property name="javadoc.packages" value="org.apache.solr.*"/>
   <property name="build.docs" value="${dest}/docs"/>
   <property name="build.javadoc" value="${common.dir}/${build.docs}/api"/>
@@ -110,7 +110,10 @@
 
   <property name="maven.dist.prefix" value="${maven.dist.dir}/org/apache/solr"/>
 
-  <!-- The version suffix of the Lucene artifacts checked into "lib" -->
+  <!-- 
+       The version suffix of the Lucene artifacts checked into "lib" 
+       IF YOU CHANGE THIS, SANITY CHECK "javadoc.link.lucene"
+  -->
   <property name="lucene_version" value="2.9.0"/>
   <!-- The version number to assign to the Maven artifacts. -->
   <property name="maven_version" value="1.4-SNAPSHOT"/>
diff --git a/src/java/org/apache/solr/analysis/CommonGramsFilter.java b/src/java/org/apache/solr/analysis/CommonGramsFilter.java
index b31ebc2..f01f1cc 100644
--- a/src/java/org/apache/solr/analysis/CommonGramsFilter.java
+++ b/src/java/org/apache/solr/analysis/CommonGramsFilter.java
@@ -26,7 +26,7 @@ import org.apache.lucene.analysis.TokenStream;
 /**
  * Construct bigrams for frequently occurring terms while indexing. Single terms
  * are still indexed too, with bigrams overlaid. This is achieved through the
- * use of {@link Token#Set<String>PositionIncrement(int)}. Bigrams have a type
+ * use of {@link Token#setPositionIncrement(int)}. Bigrams have a type
  * of "gram" Example
  * <ul>
  * <li>input:"the quick brown fox"</li>
diff --git a/src/java/org/apache/solr/core/SolrConfig.java b/src/java/org/apache/solr/core/SolrConfig.java
index ae7dcd2..d05e20b 100644
--- a/src/java/org/apache/solr/core/SolrConfig.java
+++ b/src/java/org/apache/solr/core/SolrConfig.java
@@ -414,7 +414,6 @@ public class SolrConfig extends Config {
    * SolrRequestHandler,QParserPlugin, QueryResponseWriter,ValueSourceParser,
    * SearchComponent, QueryConverter, SolrEventListener, DirectoryFactory,
    * IndexDeletionPolicy, IndexReaderFactory
-   * @return
    */
   public List<PluginInfo> getPluginInfos(String  type){
     List<PluginInfo> result = pluginStore.get(type);
diff --git a/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java b/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
index edc9dd2..ed749b2 100644
--- a/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
+++ b/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
@@ -261,42 +261,47 @@ public abstract class AnalysisRequestHandlerBase extends RequestHandlerBase {
     private final Set<String> termsToMatch;
 
     /**
-     * Constructs a new AnalysisContext with a given field tpe, analyzer and termsToMatch. By default the field name in
-     * this context will be {@code null}. During the analysis processs, The produced tokens will be compaired to the
-     * termes in the {@code termsToMatch} set. When found, these tokens will be marked as a match.
+     * Constructs a new AnalysisContext with a given field tpe, analyzer and 
+     * termsToMatch. By default the field name in this context will be 
+     * {@code null}. During the analysis processs, The produced tokens will 
+     * be compaired to the terms in the {@code termsToMatch} set. When found, 
+     * these tokens will be marked as a match.
      *
      * @param fieldType    The type of the field the analysis is performed on.
      * @param analyzer     The analyzer to be used.
-     * @param termsToMatch Holds all the terms that should match during the analysis process.
+     * @param termsToMatch Holds all the terms that should match during the 
+     *                     analysis process.
      */
     public AnalysisContext(FieldType fieldType, Analyzer analyzer, Set<String> termsToMatch) {
       this(null, fieldType, analyzer, termsToMatch);
     }
 
     /**
-     * Constructs an AnalysisContext with a given field name, field type and analyzer. By default this context will hold
-     * no terms to match
+     * Constructs an AnalysisContext with a given field name, field type 
+     * and analyzer. By default this context will hold no terms to match
      *
-     * @param fieldName The name of the field the analysis is performed on (may be {@code nuill}).
+     * @param fieldName The name of the field the analysis is performed on 
+     *                  (may be {@code null}).
      * @param fieldType The type of the field the analysis is performed on.
      * @param analyzer  The analyzer to be used during the analysis process.
      *
-     * @see #AnalysisContext(String, org.apache.solr.schema.FieldType, org.apache.lucene.analysis.Analyzer,
-     *      java.util.Set)
      */
     public AnalysisContext(String fieldName, FieldType fieldType, Analyzer analyzer) {
       this(fieldName, fieldType, analyzer, Collections.EMPTY_SET);
     }
 
     /**
-     * Constructs a new AnalysisContext with a given field tpe, analyzer and termsToMatch. During the analysis processs,
-     * The produced tokens will be compaired to the termes in the {@codce termsToMatch} set. When found, these tokens
-     * will be marked as a match.
+     * Constructs a new AnalysisContext with a given field tpe, analyzer and
+     * termsToMatch. During the analysis processs, The produced tokens will be 
+     * compaired to the termes in the {@code termsToMatch} set. When found, 
+     * these tokens will be marked as a match.
      *
-     * @param fieldName    The name of the field the analysis is performed on (may be {@code null}).
+     * @param fieldName    The name of the field the analysis is performed on 
+     *                     (may be {@code null}).
      * @param fieldType    The type of the field the analysis is performed on.
      * @param analyzer     The analyzer to be used.
-     * @param termsToMatch Holds all the terms that should match during the analysis process.
+     * @param termsToMatch Holds all the terms that should match during the 
+     *                     analysis process.
      */
     public AnalysisContext(String fieldName, FieldType fieldType, Analyzer analyzer, Set<String> termsToMatch) {
       this.fieldName = fieldName;
diff --git a/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java b/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
index 018cae7..aab8529 100644
--- a/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
+++ b/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
@@ -217,7 +217,8 @@ public class CoreAdminHandler extends RequestHandlerBase {
    * @param req
    * @param rsp
    *
-   * @return persistence flag as necessary.
+   * @return true if a modification has resulted that requires persistance 
+   *         of the CoreContainer configuration.
    *
    * @throws SolrException in case of a configuration error.
    */
@@ -257,7 +258,8 @@ public class CoreAdminHandler extends RequestHandlerBase {
    * @param req
    * @param rsp
    *
-   * @return
+   * @return true if a modification has resulted that requires persistance 
+   *         of the CoreContainer configuration.
    *
    * @throws SolrException
    */
@@ -286,7 +288,8 @@ public class CoreAdminHandler extends RequestHandlerBase {
    * @param req
    * @param rsp
    *
-   * @return
+   * @return true if a modification has resulted that requires persistance 
+   *         of the CoreContainer configuration.
    */
   protected boolean handleAliasAction(SolrQueryRequest req, SolrQueryResponse rsp) {
     SolrParams params = req.getParams();
@@ -312,7 +315,8 @@ public class CoreAdminHandler extends RequestHandlerBase {
    * @param req
    * @param rsp
    *
-   * @return
+   * @return true if a modification has resulted that requires persistance 
+   *         of the CoreContainer configuration.
    */
   protected boolean handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {
     SolrParams params = req.getParams();
@@ -333,7 +337,8 @@ public class CoreAdminHandler extends RequestHandlerBase {
    * @param req
    * @param rsp
    *
-   * @return
+   * @return true if a modification has resulted that requires persistance 
+   *         of the CoreContainer configuration.
    */
   protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)
           throws SolrException {
@@ -365,7 +370,8 @@ public class CoreAdminHandler extends RequestHandlerBase {
    * @param req
    * @param rsp
    *
-   * @return
+   * @return true if a modification has resulted that requires persistance 
+   *         of the CoreContainer configuration.
    *
    * @throws SolrException
    */
@@ -393,7 +399,8 @@ public class CoreAdminHandler extends RequestHandlerBase {
    * @param req
    * @param rsp
    *
-   * @return
+   * @return true if a modification has resulted that requires persistance 
+   *         of the CoreContainer configuration.
    */
   protected boolean handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) {
     SolrParams params = req.getParams();
@@ -412,7 +419,8 @@ public class CoreAdminHandler extends RequestHandlerBase {
    * @param req
    * @param rsp
    *
-   * @return
+   * @return true if a modification has resulted that requires persistance 
+   *         of the CoreContainer configuration.
    */
   protected boolean handleSwapAction(SolrQueryRequest req, SolrQueryResponse rsp) {
     final SolrParams params = req.getParams();

