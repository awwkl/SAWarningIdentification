GitDiffStart: fab19135fd8223af78982ee6b17d342fb59a7f46 | Mon Sep 10 18:48:08 2012 +0000
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/Context.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/Context.java
index 83d2670..7604e65 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/Context.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/Context.java
@@ -136,7 +136,7 @@ public abstract class Context {
    * get a value by name in the given scope (entity, document,global)
    *
    * @param name  the key
-   * @param scope the scope from which the value is to be retreived
+   * @param scope the scope from which the value is to be retrieved
    * @return the object stored in the given scope with the given key
    */
   public abstract Object getSessionAttribute(String name, String scope);
@@ -151,7 +151,7 @@ public abstract class Context {
 
   /**
    * The request parameters passed over HTTP for this command the values in the
-   * map are either String(for single valued parameters) or List<String> (for
+   * map are either String(for single valued parameters) or List&lt;String&gt; (for
    * multi-valued parameters)
    *
    * @return the request parameters passed in the URL to initiate this process
@@ -208,7 +208,7 @@ public abstract class Context {
   public abstract void deleteDocByQuery(String query);
 
   /**Use this directly to  resolve variable
-   * @param var the variable neme 
+   * @param var the variable name 
    * @return the resolved value
    */
   public abstract Object resolve(String var);
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java
index 9b2aa97..62b3741 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java
@@ -105,7 +105,7 @@ public class XPathRecordReader {
    * @param name The name for this field in the emitted record
    * @param xpath The xpath expression for this field
    * @param multiValued If 'true' then the emitted record will have values in 
-   *                    a List<String>
+   *                    a List&lt;String&gt;
    */
   public synchronized XPathRecordReader addField(String name, String xpath, boolean multiValued) {
     addField0(xpath, name, multiValued, false, 0);
@@ -120,8 +120,8 @@ public class XPathRecordReader {
    * @param name The name for this field in the emitted record
    * @param xpath The xpath expression for this field
    * @param multiValued If 'true' then the emitted record will have values in 
-   *                    a List<String>
-   * @param flags FLATTEN: Recursivly combine text from all child XML elements
+   *                    a List&lt;String&gt;
+   * @param flags FLATTEN: Recursively combine text from all child XML elements
    */
   public synchronized XPathRecordReader addField(String name, String xpath, boolean multiValued, int flags) {
     addField0(xpath, name, multiValued, false, flags);
@@ -136,7 +136,7 @@ public class XPathRecordReader {
    * @param xpath The xpath expression for this field
    * @param name The name for this field in the emitted record
    * @param multiValued If 'true' then the emitted record will have values in 
-   *                    a List<String>
+   *                    a List&lt;String&gt;
    * @param isRecord Flags that this XPATH is from a forEach statement
    * @param flags The only supported flag is 'FLATTEN'
    */
diff --git a/solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java b/solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java
index 91e23f6..40f4f4e 100644
--- a/solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java
+++ b/solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java
@@ -72,9 +72,12 @@ public abstract class AbstractPluginLoader<T>
   
   /**
    * Create a plugin from an XML configuration.  Plugins are defined using:
-   *   <plugin name="name1" class="solr.ClassName">
+   * <pre class="prettyprint">
+   * {@code
+   * <plugin name="name1" class="solr.ClassName">
    *      ...
-   *   </plugin>
+   * </plugin>}
+   * </pre>
    * 
    * @param name - The registered name.  In the above example: "name1"
    * @param className - class name for requested plugin.  In the above example: "solr.ClassName"
@@ -101,16 +104,19 @@ public abstract class AbstractPluginLoader<T>
   abstract protected void init( T plugin, Node node ) throws Exception;
 
   /**
+   * Initializes and registers each plugin in the list.
    * Given a NodeList from XML in the form:
-   * 
-   *  <plugins>
+   * <pre class="prettyprint">
+   * {@code
+   * <plugins>
    *    <plugin name="name1" class="solr.ClassName" >
    *      ...
    *    </plugin>
    *    <plugin name="name2" class="solr.ClassName" >
    *      ...
    *    </plugin>
-   *  </plugins>
+   * </plugins>}
+   * </pre>
    * 
    * This will initialize and register each plugin from the list.  A class will 
    * be generated for each class name and registered to the given name.
@@ -120,7 +126,10 @@ public abstract class AbstractPluginLoader<T>
    * plugins at startup.
    * 
    * One (and only one) plugin may declare itself to be the 'default' plugin using:
-   *    <plugin name="name2" class="solr.ClassName" default="true">
+   * <pre class="prettyprint">
+   * {@code
+   *    <plugin name="name2" class="solr.ClassName" default="true">}
+   * </pre>
    * If a default element is defined, it will be returned from this function.
    * 
    */
@@ -190,9 +199,13 @@ public abstract class AbstractPluginLoader<T>
   }
   
   /**
-   * Given a NodeList from XML in the form:
+   * Initializes and registers a single plugin.
    * 
-   * <plugin name="name1" class="solr.ClassName" > ... </plugin>
+   * Given a NodeList from XML in the form:
+   * <pre class="prettyprint">
+   * {@code
+   * <plugin name="name1" class="solr.ClassName" > ... </plugin>}
+   * </pre>
    * 
    * This will initialize and register a single plugin. A class will be
    * generated for the plugin and registered to the given name.

