GitDiffStart: 2dc186201ca9afc8f5c229565999cb01770b86fe | Sat Jan 13 02:53:39 2007 +0000
diff --git a/client/ruby/solrb/Rakefile b/client/ruby/solrb/Rakefile
index 285b5c7..9084a74 100644
--- a/client/ruby/solrb/Rakefile
+++ b/client/ruby/solrb/Rakefile
@@ -96,10 +96,10 @@ namespace :test do
   task :coverage do
     rm_f "coverage"
     rm_f "coverage.data"
-    system("rcov --aggregate coverage.data --text-summary -Ilib:test/unit test/unit/*_test.rb")
     TestSolrServer.wrap do
       system("rcov --aggregate coverage.data --text-summary -Ilib:test/functional test/functional/*_test.rb")
     end
+    system("rcov --aggregate coverage.data --text-summary -Ilib:test/unit test/unit/*_test.rb")
     system("open coverage/index.html") if PLATFORM['darwin']
   end
 
diff --git a/client/ruby/solrb/lib/solr.rb b/client/ruby/solrb/lib/solr.rb
index f1b4fe4..84bb62b 100755
--- a/client/ruby/solrb/lib/solr.rb
+++ b/client/ruby/solrb/lib/solr.rb
@@ -13,4 +13,4 @@
 require 'solr/exception'
 require 'solr/request'
 require 'solr/connection'
-require 'solr/response'
\ No newline at end of file
+require 'solr/response'
diff --git a/client/ruby/solrb/lib/solr/connection.rb b/client/ruby/solrb/lib/solr/connection.rb
index a4b3c0c..9a271bf 100755
--- a/client/ruby/solrb/lib/solr/connection.rb
+++ b/client/ruby/solrb/lib/solr/connection.rb
@@ -18,16 +18,36 @@ module Solr
     
     def initialize(url)
       @url = URI.parse(url)
+      unless @url.kind_of? URI::HTTP
+        raise "invalid http url: #{url}"
+      end
+    end
+
+    # sends a commit message
+    def commit
+      self.send(Solr::Request::Commit.new)
+    end
+
+    # sends a ping message
+    def ping
+      response = send(Solr::Request::Ping.new)
     end
 
     def send(request)
       data = post(request)
-      return request.response_format == :ruby ? RubyResponse.new(data) : XmlResponse.new(data)
+      case request.response_format
+      when :ruby
+        return RubyResponse.new(data)
+      when :xml
+        return XmlResponse.new(data)
+      else
+        raise "Unknown response format: #{request.response_format}"
+      end
     end
     
     def post(request)
-      post = Net::HTTP::Post.new(request.url_path)
-      post.body = request.to_http_body
+      post = Net::HTTP::Post.new(@url.path + "/" + request.handler)
+      post.body = request.to_s
       post.content_type = 'application/x-www-form-urlencoded; charset=utf-8'
       response = Net::HTTP.start(@url.host, @url.port) do |http|
         http.request(post)
diff --git a/client/ruby/solrb/lib/solr/document.rb b/client/ruby/solrb/lib/solr/document.rb
new file mode 100644
index 0000000..4ffcd87
--- /dev/null
+++ b/client/ruby/solrb/lib/solr/document.rb
@@ -0,0 +1,55 @@
+require 'rexml/document'
+require 'solr/field'
+
+module Solr
+  class Document
+    include Enumerable
+
+    # Create a new Solr::Document, optionally passing in a hash of 
+    # key/value pairs for the fields
+    #
+    #   doc = Solr::Document.new(:creator => 'Jorge Luis Borges')
+    def initialize(hash={})
+      @fields = []
+      hash.each_pair {|k,v| @fields << Solr::Field.new(k => v)}
+    end
+
+    # Append a Solr::Field
+    #
+    #   doc << Solr::Field.new(:creator => 'Jorge Luis Borges')
+    #
+    # If you are truly lazy you can simply pass in a hash:
+    #
+    #   doc << {:creator => 'Jorge Luis Borges'}
+    def <<(field)
+      case field
+      when Hash
+        @fields << Solr::Field.new(field)
+      when Solr::Field
+        @fields << field
+      else
+        raise "must pass in Solr::Field or Hash"
+      end
+    end
+
+    # shorthand to allow hash lookups
+    #   doc['name']
+    def [](name)
+      field = @fields.find {|f| f.name == name.to_s}
+      return field.value if field
+      return nil
+    end
+
+    # shorthand to assign as a hash
+    def []=(name,value)
+      @fields << Solr::Field.new(name => value)
+    end
+
+    # convert the Document to a REXML::Element 
+    def to_xml
+      e = REXML::Element.new 'doc'
+      @fields.each {|f| e.add_element(f.to_xml)}
+      return e
+    end
+  end
+end
diff --git a/client/ruby/solrb/lib/solr/field.rb b/client/ruby/solrb/lib/solr/field.rb
new file mode 100644
index 0000000..3b8ceed
--- /dev/null
+++ b/client/ruby/solrb/lib/solr/field.rb
@@ -0,0 +1,22 @@
+require 'rexml/document'
+
+module Solr
+  class Field
+    attr_accessor :name
+    attr_accessor :value
+
+    def initialize(key_val, opts={})
+      raise "first argument must be a hash" unless key_val.kind_of? Hash
+      @name = key_val.keys[0].to_s
+      @value = key_val.values[0].to_s
+    end
+
+    def to_xml
+      e = REXML::Element.new 'field'
+      e.attributes['name'] = @name
+      e.text = @value
+      return e
+    end
+
+  end
+end
diff --git a/client/ruby/solrb/lib/solr/request.rb b/client/ruby/solrb/lib/solr/request.rb
index 6bdd742..457c675 100755
--- a/client/ruby/solrb/lib/solr/request.rb
+++ b/client/ruby/solrb/lib/solr/request.rb
@@ -10,124 +10,9 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-require "erb"
-require 'rexml/document'
-include ERB::Util
-
-module Solr
-  class Request
-    attr_reader :url_path
-    attr_reader :response_format
-    
-    def initialize
-      @url_path = "/solr/select"
-    end
-  end
-  
-  class UpdateRequest < Request
-    # sent to /solr/update with XML body
-    def initialize(body)
-      @body = body.to_s
-      @url_path = "/solr/update"
-      @response_format = :xml
-    end
-    
-    def to_http_body
-      @body
-    end
-  end
-  
-  class AddDocumentRequest < UpdateRequest
-    def initialize(doc_hash)
-      xml = REXML::Element.new('add')
-      
-      doc = REXML::Element.new('doc')
-      
-      doc_hash.each do |key,value|
-        #TODO: add handling of array values
-        doc.add_element field(key.to_s, value)
-      end
-      
-      xml.add_element doc
-      super(xml.to_s)
-    end
-
-    private
-    def field(name, value)
-      field = REXML::Element.new("field")
-      field.add_attribute("name", name.to_s)
-      field.add_text(value.to_s)
-    
-      field
-    end
-  end
-  
-  class SelectRequest < Request
-    # sent to /solr/select, with url query string parameters in the body
-    
-    def initialize
-      @response_format = :ruby
-      super
-    end
-    
-    def to_http_body
-      raw_params = self.to_hash
-      
-      http_params = []
-      raw_params.each do |key,value|
-        #TODO: Add array value handling
-        http_params << "#{key}=#{url_encode(value)}" if value
-      end
-      
-      http_params.join("&")
-    end
-    
-    def to_hash
-      {:wt => "ruby"}
-    end
-  end
-  
-  class CommonRequestBase < SelectRequest
-    # supported by both standard and dismax request handlers
-    # start
-    # rows
-    # filter query (multiple)
-    # field list
-    attr_accessor :start
-    attr_accessor :rows
-    attr_accessor :filter_queries
-    attr_accessor :field_list
-    
-    # debug
-    # explainOther
-    
-    def to_hash
-      {:start => @start,
-        :rows => @rows,
-          :fq => @filter_queries,
-          :fl => @field_list}.merge(super)
-    end
-  end
-
-  class StandardRequest < CommonRequestBase
-    # sort
-    # default field
-    # query
-    # query operator (AND/OR)
-    attr_accessor :sort
-    attr_accessor :default_field
-    attr_accessor :query
-    attr_accessor :operator
-    
-    def to_hash
-      {:df => @default_field,
-        :q => @sort ? "#{@query};#{@sort}" : @query,
-       :op => @operator}.merge(super)
-    end
-  end
-  
-end
-
-#s = Solr::Request.new("http://localhost:8983")
-#s.add({:title => "foo"})
-
+require 'solr/request/add_document'
+require 'solr/request/base'
+require 'solr/request/commit'
+require 'solr/request/ping'
+require 'solr/request/select'
+require 'solr/request/update'
diff --git a/client/ruby/solrb/lib/solr/request/add_document.rb b/client/ruby/solrb/lib/solr/request/add_document.rb
new file mode 100644
index 0000000..6608e45
--- /dev/null
+++ b/client/ruby/solrb/lib/solr/request/add_document.rb
@@ -0,0 +1,37 @@
+require 'solr/request/base'
+require 'solr/document'
+require 'rexml/document'
+
+module Solr
+  module Request
+    class AddDocument < Solr::Request::Base
+
+      # create the request, optionally passing in a Solr::Document
+      #
+      #   request = Solr::Request::AddDocument.new doc
+      #
+      # as a short cut you can pass in a Hash instead:
+      #
+      #   request = Solr::Request.new :creator => 'Jorge Luis Borges'
+        
+      def initialize(doc={})
+        case doc
+        when Hash
+          @doc = Solr::Document.new(doc)
+        when Solr::Document
+          @doc = doc
+        else
+          raise "must pass in Solr::Document or Hash"
+        end
+      end
+
+      # returns the request as a string suitable for posting
+      
+      def to_s
+        e = REXML::Element.new 'add'
+        e.add_element @doc.to_xml
+        return e.to_s
+      end
+    end
+  end
+end
diff --git a/client/ruby/solrb/lib/solr/request/base.rb b/client/ruby/solrb/lib/solr/request/base.rb
new file mode 100644
index 0000000..b2b3fcd
--- /dev/null
+++ b/client/ruby/solrb/lib/solr/request/base.rb
@@ -0,0 +1,59 @@
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+module Solr
+  module Request
+    class Base
+
+      # returns either :xml or :ruby depending on what the
+      # response type is for a given request
+      
+      def response_format
+        case self
+        when Solr::Request::Commit
+          return :xml
+        when Solr::Request::Update
+          return :xml
+        when Solr::Request::Select
+          return :ruby
+        when Solr::Request::AddDocument
+          return :xml
+        when Solr::Request::Ping
+          return :xml
+        else
+          raise "unkown request type: #{self.class}"
+        end
+      end
+
+      # returns the solr handler or url fragment that can 
+      # respond to this type of request
+      
+      def handler
+        case self
+        when Solr::Request::Commit
+          return 'update'
+        when Solr::Request::Update
+          return 'update'
+        when Solr::Request::Select
+          return 'select' 
+        when Solr::Request::AddDocument
+          return 'update'
+        when Solr::Request::Ping
+          return 'admin/ping'
+        else
+          raise "unkown request type: #{self.class}"
+        end
+      end
+
+    end
+  end
+end
diff --git a/client/ruby/solrb/lib/solr/request/commit.rb b/client/ruby/solrb/lib/solr/request/commit.rb
new file mode 100644
index 0000000..53e6664
--- /dev/null
+++ b/client/ruby/solrb/lib/solr/request/commit.rb
@@ -0,0 +1,13 @@
+require 'rexml/document'
+
+module Solr
+  module Request
+    class Commit < Solr::Request::Base
+
+      def to_s
+        return REXML::Element.new('commit').to_s
+      end
+
+    end
+  end
+end
diff --git a/client/ruby/solrb/lib/solr/request/ping.rb b/client/ruby/solrb/lib/solr/request/ping.rb
new file mode 100644
index 0000000..c7002ba
--- /dev/null
+++ b/client/ruby/solrb/lib/solr/request/ping.rb
@@ -0,0 +1,6 @@
+module Solr
+  module Request
+    class Ping < Solr::Request::Base
+    end
+  end
+end
diff --git a/client/ruby/solrb/lib/solr/request/select.rb b/client/ruby/solrb/lib/solr/request/select.rb
new file mode 100644
index 0000000..37b1066
--- /dev/null
+++ b/client/ruby/solrb/lib/solr/request/select.rb
@@ -0,0 +1,29 @@
+require 'erb'
+
+module Solr
+  module Request
+    class Select < Solr::Request::Base
+      attr_accessor :query
+
+      def initialize(query)
+        @query = query
+      end
+
+      def to_hash
+        return {:q => query, :wt => 'ruby', :fl => '*,score'}
+      end
+
+      def to_s
+        raw_params = self.to_hash
+
+        http_params = []
+        raw_params.each do |key,value|
+        http_params << "#{key}=#{ERB::Util::url_encode(value)}" if value
+        end
+
+        http_params.join("&")
+      end
+
+    end
+  end
+end
diff --git a/client/ruby/solrb/lib/solr/request/update.rb b/client/ruby/solrb/lib/solr/request/update.rb
new file mode 100644
index 0000000..f5622fa
--- /dev/null
+++ b/client/ruby/solrb/lib/solr/request/update.rb
@@ -0,0 +1,8 @@
+module Solr
+  module Request
+    class Update < Solr::Request::Base
+      def initialize
+      end
+    end
+  end
+end
diff --git a/client/ruby/solrb/test/functional/server_test.rb b/client/ruby/solrb/test/functional/server_test.rb
index ca60aa6..3adf1b5 100644
--- a/client/ruby/solrb/test/functional/server_test.rb
+++ b/client/ruby/solrb/test/functional/server_test.rb
@@ -13,46 +13,34 @@
 require 'test/unit'
 require 'solr'
 
-class TestServer < Test::Unit::TestCase
+class ServerTest < Test::Unit::TestCase
   include Solr
 
-  class BadRequest < Request
-    def initialize
-      @url_path = "/bogus"
-    end
-    
-    def to_http_body
-      "bogus"
-    end
-  end
-  
   def setup
-    @connection = Connection.new("http://localhost:8888")
+    @connection = Connection.new("http://localhost:8888/solr")
   end
   
   def test_error
-    assert_raise(Net::HTTPServerException) do
-      @connection.send(BadRequest.new)
+    conn = Solr::Connection.new 'http://localhost:9999/poopville'
+    assert_raise(Net::HTTPFatalError) do
+      @connection.send(Solr::Request::Ping.new)
     end
   end
   
   def test_commit
-    response = @connection.send(UpdateRequest.new("<commit/>"))
+    response = @connection.send(Solr::Request::Commit.new)
     assert_equal "<result status=\"0\"></result>", response.raw_response
   end
   
   def test_escaping
-    doc = {:id => 47, :ruby_t => 'puts "ouch!"'}
-    request = AddDocumentRequest.new(doc)
-    @connection.send(request)
-    
-    @connection.send(UpdateRequest.new("<commit/>"))
+    doc = Solr::Document.new :id => 47, :ruby_t => 'puts "ouch!"'
+    @connection.send(Solr::Request::AddDocument.new(doc))
+    @connection.commit
     
-    request = StandardRequest.new
-    request.query = "ruby_t:ouch"
-    request.field_list="*,score"
+    request = Solr::Request::Select.new 'ruby_t:ouch'
     result = @connection.send(request)
     
-    assert result.raw_response =~ /puts/
+    assert_match /puts/, result.raw_response
   end
+
 end
diff --git a/client/ruby/solrb/test/functional/test_solr_server.rb b/client/ruby/solrb/test/functional/test_solr_server.rb
index b5f4b80..78799ea 100644
--- a/client/ruby/solrb/test/functional/test_solr_server.rb
+++ b/client/ruby/solrb/test/functional/test_solr_server.rb
@@ -45,7 +45,7 @@ class TestSolrServer
     Process.kill('TERM', @pid)
     Process.wait
   end
-  
+
   def self.wrap(params = {})
     error = false
     solr_server = self.instance
diff --git a/client/ruby/solrb/test/unit/connection_test.rb b/client/ruby/solrb/test/unit/connection_test.rb
index 15752a2..6b6ce80 100755
--- a/client/ruby/solrb/test/unit/connection_test.rb
+++ b/client/ruby/solrb/test/unit/connection_test.rb
@@ -18,27 +18,32 @@ class ConnectionTest < SolrMockBaseTestCase
   def test_mock
     connection = Connection.new("http://localhost:9999")
     set_post_return("foo")
-    assert_equal "foo", connection.post(UpdateRequest.new("bogus"))
+    assert_equal "foo", connection.post(Solr::Request::Update.new)
   end
 
   def test_connection_initialize
-    request = Solr::UpdateRequest.new("<commit/>")
-    connection = Solr::Connection.new("http://localhost:8983")
-    assert_equal("localhost", connection.url.host)
-    assert_equal(8983, connection.url.port)
+    connection = Solr::Connection.new("http://localhost:8983/solr")
+    assert_equal 'localhost', connection.url.host
+    assert_equal 8983, connection.url.port
+    assert_equal '/solr', connection.url.path
   end
-  
+
+  def test_non_standard_context
+    connection = Solr::Connection.new("http://localhost:8983/index")
+    assert_equal '/index', connection.url.path
+  end
+
   def test_xml_response
     connection = Connection.new("http://localhost:9999")
     set_post_return "<bogus/>"
-    response = connection.send(UpdateRequest.new("bogus"))
+    response = connection.send(Solr::Request::Update.new)
     assert_equal "<bogus/>", response.raw_response
   end
   
   def test_ruby_response
     connection = Connection.new("http://localhost:9999")
     set_post_return "{}"
-    response = connection.send(StandardRequest.new)
+    response = connection.send(Solr::Request::Select.new('foo'))
     assert_equal "{}", response.raw_response
   end
 end
diff --git a/client/ruby/solrb/test/unit/document_test.rb b/client/ruby/solrb/test/unit/document_test.rb
new file mode 100644
index 0000000..1d3adf9
--- /dev/null
+++ b/client/ruby/solrb/test/unit/document_test.rb
@@ -0,0 +1,28 @@
+require 'solr/document'
+require 'solr/field'
+
+class DocumentTest < Test::Unit::TestCase
+
+  def test_xml
+    doc = Solr::Document.new
+    doc << Solr::Field.new(:creator => 'Erik Hatcher')
+    assert_kind_of REXML::Element, doc.to_xml
+    assert "<doc><field name='creator'>Erik Hatcher</field></doc>", 
+      doc.to_xml.to_s
+  end
+
+  def test_repeatable
+    doc = Solr::Document.new
+    doc << Solr::Field.new(:creator => 'Erik Hatcher')
+    doc << Solr::Field.new(:creator => 'Otis Gospodnetic')
+    assert "<doc><field name='creator'>Erik Hatcher</field><field name='creator'>Otis Gospodnetic</field></doc>", doc.to_xml.to_s
+  end
+
+  def test_hash_shorthand
+    doc = Solr::Document.new :creator => 'Erik Hatcher', :title => 'Lucene in Action'
+    assert_equal 'Erik Hatcher', doc[:creator]
+    assert_equal 'Lucene in Action', doc[:title]
+    assert_equal nil, doc[:foo]
+  end
+
+end
diff --git a/client/ruby/solrb/test/unit/field_test.rb b/client/ruby/solrb/test/unit/field_test.rb
new file mode 100644
index 0000000..4d77aab
--- /dev/null
+++ b/client/ruby/solrb/test/unit/field_test.rb
@@ -0,0 +1,11 @@
+require 'solr/field'
+
+class FieldTest < Test::Unit::TestCase
+  
+  def test_xml
+    field = Solr::Field.new :creator => 'Erik Hatcher'
+    assert_kind_of REXML::Element, field.to_xml
+    assert_equal "<field name='creator'>Erik Hatcher</field>", field.to_xml.to_s
+  end
+
+end
diff --git a/client/ruby/solrb/test/unit/request_test.rb b/client/ruby/solrb/test/unit/request_test.rb
index ec31e12..db63956 100755
--- a/client/ruby/solrb/test/unit/request_test.rb
+++ b/client/ruby/solrb/test/unit/request_test.rb
@@ -14,39 +14,27 @@ require 'test/unit'
 require 'solr'
 
 class RequestTest < Test::Unit::TestCase
-  def test_basic_params
-    request = Solr::StandardRequest.new
-    assert_equal("/solr/select", request.url_path)
 
-    request.query = "term"
-    assert_equal "term", request.to_hash[:q]
-    
-    body = request.to_http_body
-    assert body =~ /q=term/ 
-  end
-  
-  def test_update_request
-    request = Solr::UpdateRequest.new("<commit/>")
-    assert_equal("/solr/update", request.url_path)
+  def test_commit_request
+    request = Solr::Request::Commit.new
+    assert_equal :xml, request.response_format
+    assert_equal 'update', request.handler
+    assert_equal '<commit/>', request.to_s
   end
   
   def test_add_doc_request
-    request = Solr::AddDocumentRequest.new({:title => "title"})
-    assert_equal("<add><doc><field name='title'>title</field></doc></add>", request.to_http_body)
+    request = Solr::Request::AddDocument.new(:title => "title")
+    assert_equal "<add><doc><field name='title'>title</field></doc></add>", request.to_s
+    assert :xml, request.response_format
+    assert 'update', request.handler
   end
-  
-  def test_response_error
-    assert_raise(Solr::RequestException) do
-      new Solr::Response.new("<result status=\"400\">ERROR:</result>")
-    end
-    
-    begin
-      new Solr::Response.new("<result status=\"400\">ERROR:</result>")
-    rescue Solr::RequestException => exception
-      assert_equal "ERROR:", exception.message
-      assert_equal exception.message, exception.to_s
-      assert_equal "400", exception.code
-    end
+
+  def test_select_request
+    request = Solr::Request::Select.new('belkin')
+    assert_equal :ruby, request.response_format
+    assert 'select', request.handler
+    assert 'belkin', request.to_hash['q']
+    assert_match /q=belkin/, request.to_s
   end
-  
+
 end
diff --git a/client/ruby/solrb/test/unit/response_test.rb b/client/ruby/solrb/test/unit/response_test.rb
new file mode 100644
index 0000000..7377884
--- /dev/null
+++ b/client/ruby/solrb/test/unit/response_test.rb
@@ -0,0 +1,17 @@
+class ResponseTest < Test::Unit::TestCase
+
+  def test_response_error
+    assert_raise(Solr::RequestException) do
+      new Solr::Response.new("<result status=\"400\">ERROR:</result>")
+    end
+    
+    begin
+      new Solr::Response.new("<result status=\"400\">ERROR:</result>")
+    rescue Solr::RequestException => exception
+      assert_equal "ERROR:", exception.message
+      assert_equal exception.message, exception.to_s
+      assert_equal "400", exception.code
+    end
+  end
+
+end

