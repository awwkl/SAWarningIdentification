GitDiffStart: 7ece5859b3e1ee2819e5d4d7adf1592acdc7117a | Mon Jul 14 13:35:13 2014 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index b484091..f63c749 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -171,6 +171,8 @@ Bug Fixes
 * SOLR-6235: Leader initiated recovery should use coreNodeName instead of coreName to avoid marking
   all replicas having common core name as down. (shalin)
 
+* SOLR-6208: JettySolrRunner QueuedThreadPool's configuration code is never executed. (dweiss via shalin)
+
 Optimizations
 ---------------------
 
diff --git a/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java b/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
index b8f86b0..0003718 100644
--- a/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
+++ b/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
@@ -25,6 +25,7 @@ import java.util.LinkedList;
 import java.util.Random;
 import java.util.SortedMap;
 import java.util.TreeMap;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 
 import javax.servlet.DispatcherType;
@@ -228,7 +229,6 @@ public class JettySolrRunner {
       sslInit(useSsl, sslcontext);
 
       final Connector connector;
-      final QueuedThreadPool threadPool;
       if ("SelectChannel".equals(connectorName)) {
         final SelectChannelConnector c = useSsl
           ? new SslSelectChannelConnector(sslcontext)
@@ -237,7 +237,6 @@ public class JettySolrRunner {
         c.setLowResourcesMaxIdleTime(1500);
         c.setSoLingerTime(0);
         connector = c;
-        threadPool = (QueuedThreadPool) c.getThreadPool();
       } else if ("Socket".equals(connectorName)) {
         final SocketConnector c = useSsl
           ? new SslSocketConnector(sslcontext)
@@ -245,44 +244,31 @@ public class JettySolrRunner {
         c.setReuseAddress(true);
         c.setSoLingerTime(0);
         connector = c;
-        threadPool = (QueuedThreadPool) c.getThreadPool();
       } else {
         throw new IllegalArgumentException("Illegal value for system property 'tests.jettyConnector': " + connectorName);
       }
 
       connector.setPort(port);
       connector.setHost("127.0.0.1");
-      if (threadPool != null) {
-        threadPool.setMaxThreads(10000);
-        threadPool.setMaxIdleTimeMs(5000);
-        threadPool.setMaxStopTimeMs(30000);
-      }
-      
+
+      // Connectors by default inherit server's thread pool.
+      QueuedThreadPool qtp = new QueuedThreadPool();
+      qtp.setMaxThreads(10000);
+      qtp.setMaxIdleTimeMs((int) TimeUnit.SECONDS.toMillis(5));
+      qtp.setMaxStopTimeMs((int) TimeUnit.MINUTES.toMillis(1));
+      server.setThreadPool(qtp);
+
       server.setConnectors(new Connector[] {connector});
       server.setSessionIdManager(new HashSessionIdManager(new Random()));
     } else {
-      
-      for (Connector connector : server.getConnectors()) {
-        QueuedThreadPool threadPool = null;
-        if (connector instanceof SocketConnector) {
-          threadPool = (QueuedThreadPool) ((SocketConnector) connector)
-              .getThreadPool();
-        }
-        if (connector instanceof SelectChannelConnector) {
-          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)
-              .getThreadPool();
-        }
-        
-        if (threadPool != null) {
-          threadPool.setMaxThreads(10000);
-          threadPool.setMaxIdleTimeMs(5000);
-          if (!stopAtShutdown) {
-            threadPool.setMaxStopTimeMs(100);
-          }
-        }
-        
+      if (server.getThreadPool() == null) {
+        // Connectors by default inherit server's thread pool.
+        QueuedThreadPool qtp = new QueuedThreadPool();
+        qtp.setMaxThreads(10000);
+        qtp.setMaxIdleTimeMs((int) TimeUnit.SECONDS.toMillis(5));
+        qtp.setMaxStopTimeMs((int) TimeUnit.SECONDS.toMillis(1));
+        server.setThreadPool(qtp);
       }
-
     }
 
     // Initialize the servlets

