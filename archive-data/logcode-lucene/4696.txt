GitDiffStart: ddc5c0c6b206e985f78f4479663583d1b64e61ac | Mon Dec 22 10:10:10 2014 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java b/lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
index d567c0c..78633f5 100644
--- a/lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
+++ b/lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
@@ -445,10 +445,10 @@ public class ConcurrentMergeScheduler extends MergeScheduler {
       // updateMergeThreads).  We stall this producer
       // thread to prevent creation of new segments,
       // until merging has caught up:
-      startStallTime = System.currentTimeMillis();
-      if (verbose()) {
+      if (verbose() && startStallTime == 0) {
         message("    too many merges; stalling...");
       }
+      startStallTime = System.currentTimeMillis();
       try {
         // Only wait 0.25 seconds, so if all merges are aborted (by IW.rollback) we notice:
         wait(250);
diff --git a/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
index e06d0d5..57f7bad 100644
--- a/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
@@ -3931,6 +3931,11 @@ public class IndexWriter implements Closeable, TwoPhaseCommit, Accountable {
 
       merge.checkAborted(directory);
 
+      long mergeStartTime = 0;
+      if (infoStream.isEnabled("IW")) {
+        mergeStartTime = System.nanoTime();
+      }
+
       // This is where all the work happens:
       boolean success3 = false;
       try {
@@ -3953,12 +3958,20 @@ public class IndexWriter implements Closeable, TwoPhaseCommit, Accountable {
 
       if (infoStream.isEnabled("IW")) {
         if (merger.shouldMerge()) {
+          long t1 = System.nanoTime();
+          double sec = (t1-mergeStartTime)/1000000000.;
+          double segmentMB = (merge.info.sizeInBytes()/1024./1024.);
           infoStream.message("IW", "merge codec=" + codec + " docCount=" + merge.info.info.getDocCount() + "; merged segment has " +
-                           (mergeState.mergeFieldInfos.hasVectors() ? "vectors" : "no vectors") + "; " +
-                           (mergeState.mergeFieldInfos.hasNorms() ? "norms" : "no norms") + "; " + 
-                           (mergeState.mergeFieldInfos.hasDocValues() ? "docValues" : "no docValues") + "; " + 
-                           (mergeState.mergeFieldInfos.hasProx() ? "prox" : "no prox") + "; " + 
-                           (mergeState.mergeFieldInfos.hasProx() ? "freqs" : "no freqs"));
+                             (mergeState.mergeFieldInfos.hasVectors() ? "vectors" : "no vectors") + "; " +
+                             (mergeState.mergeFieldInfos.hasNorms() ? "norms" : "no norms") + "; " + 
+                             (mergeState.mergeFieldInfos.hasDocValues() ? "docValues" : "no docValues") + "; " + 
+                             (mergeState.mergeFieldInfos.hasProx() ? "prox" : "no prox") + "; " + 
+                             (mergeState.mergeFieldInfos.hasProx() ? "freqs" : "no freqs") + "; " +
+                             String.format(Locale.ROOT,
+                                           "%d msec to merge segment [%.2f MB, %.2f MB/sec]",
+                                           ((t1-mergeStartTime)/1000000),
+                                           segmentMB,
+                                           segmentMB / sec));
         } else {
           infoStream.message("IW", "skip merging fully deleted segments");
         }

