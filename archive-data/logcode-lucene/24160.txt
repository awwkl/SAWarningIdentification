GitDiffStart: e41ced8f49525cf9c0c9308aa81ca2905e553cb1 | Fri Jul 1 22:13:53 2005 +0000
diff --git a/src/test/org/apache/lucene/index/TestCompoundFile.java b/src/test/org/apache/lucene/index/TestCompoundFile.java
index a1cc458..17e6f3d 100644
--- a/src/test/org/apache/lucene/index/TestCompoundFile.java
+++ b/src/test/org/apache/lucene/index/TestCompoundFile.java
@@ -338,7 +338,9 @@ public class TestCompoundFile extends TestCase
             // OK: this call correctly fails. We are now past the 1024 internal
             // buffer, so an actual IO is attempted, which fails
             b = in.readByte();
+            fail("expected readByte() to throw exception");
         } catch (IOException e) {
+          // expected exception
         }
     }
 
diff --git a/src/test/org/apache/lucene/index/TestFieldsReader.java b/src/test/org/apache/lucene/index/TestFieldsReader.java
index e9d0415..75d3714 100644
--- a/src/test/org/apache/lucene/index/TestFieldsReader.java
+++ b/src/test/org/apache/lucene/index/TestFieldsReader.java
@@ -34,43 +34,28 @@ public class TestFieldsReader extends TestCase {
     super(s);
   }
 
-  protected void setUp() {
+  protected void setUp() throws IOException {
     fieldInfos = new FieldInfos();
     DocHelper.setupDoc(testDoc);
     fieldInfos.add(testDoc);
     DocumentWriter writer = new DocumentWriter(dir, new WhitespaceAnalyzer(),
             Similarity.getDefault(), 50);
     assertTrue(writer != null);
-    try {
-      writer.addDocument("test", testDoc);
-    }
-    catch (IOException e)
-    {
-      
-    }
+    writer.addDocument("test", testDoc);
   }
 
-  protected void tearDown() {
-
-  }
-
-  public void test() {
+  public void test() throws IOException {
     assertTrue(dir != null);
     assertTrue(fieldInfos != null);
-    try {
-      FieldsReader reader = new FieldsReader(dir, "test", fieldInfos);
-      assertTrue(reader != null);
-      assertTrue(reader.size() == 1);
-      Document doc = reader.doc(0);
-      assertTrue(doc != null);
-      assertTrue(doc.getField("textField1") != null);
-      Field field = doc.getField("textField2");
-      assertTrue(field != null);
-      assertTrue(field.isTermVectorStored() == true);
-      reader.close();
-    } catch (IOException e) {
-      e.printStackTrace();
-      assertTrue(false);
-    }
+    FieldsReader reader = new FieldsReader(dir, "test", fieldInfos);
+    assertTrue(reader != null);
+    assertTrue(reader.size() == 1);
+    Document doc = reader.doc(0);
+    assertTrue(doc != null);
+    assertTrue(doc.getField("textField1") != null);
+    Field field = doc.getField("textField2");
+    assertTrue(field != null);
+    assertTrue(field.isTermVectorStored() == true);
+    reader.close();
   }
 }
diff --git a/src/test/org/apache/lucene/index/TestIndexReader.java b/src/test/org/apache/lucene/index/TestIndexReader.java
index e4c6c44..417bf64 100644
--- a/src/test/org/apache/lucene/index/TestIndexReader.java
+++ b/src/test/org/apache/lucene/index/TestIndexReader.java
@@ -185,7 +185,7 @@ public class TestIndexReader extends TestCase
 
         } finally {
             if (tdocs != null)
-                try { tdocs.close(); } catch (Exception e) { }
+                tdocs.close();
         }
 
     }
@@ -498,18 +498,10 @@ public class TestIndexReader extends TestCase
         writer.addDocument(doc);
     }
     
-    private void addDoc(IndexWriter writer, String value)
+    private void addDoc(IndexWriter writer, String value) throws IOException
     {
         Document doc = new Document();
         doc.add(new Field("content", value, Field.Store.NO, Field.Index.TOKENIZED));
-
-        try
-        {
-            writer.addDocument(doc);
-        }
-        catch (IOException e)
-        {
-            e.printStackTrace();
-        }
+        writer.addDocument(doc);
     }
 }
diff --git a/src/test/org/apache/lucene/index/TestIndexWriter.java b/src/test/org/apache/lucene/index/TestIndexWriter.java
index dfb3b8d..d68d5f5 100644
--- a/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ b/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -19,7 +19,7 @@ import org.apache.lucene.store.RAMDirectory;
  */
 public class TestIndexWriter extends TestCase
 {
-    public void testDocCount()
+    public void testDocCount() throws IOException
     {
         Directory dir = new RAMDirectory();
 
@@ -27,60 +27,49 @@ public class TestIndexWriter extends TestCase
         IndexReader reader = null;
         int i;
 
-        try {
-            writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);
+        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);
 
-            // add 100 documents
-            for (i = 0; i < 100; i++) {
-                addDoc(writer);
-            }
-            assertEquals(100, writer.docCount());
-            writer.close();
+        // add 100 documents
+        for (i = 0; i < 100; i++) {
+            addDoc(writer);
+        }
+        assertEquals(100, writer.docCount());
+        writer.close();
 
-            // delete 40 documents
-            reader = IndexReader.open(dir);
-            for (i = 0; i < 40; i++) {
-                reader.delete(i);
-            }
-            reader.close();
+        // delete 40 documents
+        reader = IndexReader.open(dir);
+        for (i = 0; i < 40; i++) {
+            reader.delete(i);
+        }
+        reader.close();
 
-            // test doc count before segments are merged/index is optimized
-            writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);
-            assertEquals(100, writer.docCount());
-            writer.close();
+        // test doc count before segments are merged/index is optimized
+        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);
+        assertEquals(100, writer.docCount());
+        writer.close();
 
-            reader = IndexReader.open(dir);
-            assertEquals(100, reader.maxDoc());
-            assertEquals(60, reader.numDocs());
-            reader.close();
+        reader = IndexReader.open(dir);
+        assertEquals(100, reader.maxDoc());
+        assertEquals(60, reader.numDocs());
+        reader.close();
 
-            // optimize the index and check that the new doc count is correct
-            writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);
-            writer.optimize();
-            assertEquals(60, writer.docCount());
-            writer.close();
+        // optimize the index and check that the new doc count is correct
+        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);
+        writer.optimize();
+        assertEquals(60, writer.docCount());
+        writer.close();
 
-            // check that the index reader gives the same numbers.
-            reader = IndexReader.open(dir);
-            assertEquals(60, reader.maxDoc());
-            assertEquals(60, reader.numDocs());
-            reader.close();
-        }
-        catch (IOException e) {
-            e.printStackTrace();
-        }
+        // check that the index reader gives the same numbers.
+        reader = IndexReader.open(dir);
+        assertEquals(60, reader.maxDoc());
+        assertEquals(60, reader.numDocs());
+        reader.close();
     }
 
-    private void addDoc(IndexWriter writer)
+    private void addDoc(IndexWriter writer) throws IOException
     {
         Document doc = new Document();
         doc.add(new Field("content", "aaa", Field.Store.NO, Field.Index.TOKENIZED));
-
-        try {
-            writer.addDocument(doc);
-        }
-        catch (IOException e) {
-            e.printStackTrace();
-        }
+        writer.addDocument(doc);
     }
 }
diff --git a/src/test/org/apache/lucene/index/TestMultiReader.java b/src/test/org/apache/lucene/index/TestMultiReader.java
index 879e233..dfc345a 100644
--- a/src/test/org/apache/lucene/index/TestMultiReader.java
+++ b/src/test/org/apache/lucene/index/TestMultiReader.java
@@ -36,28 +36,16 @@ public class TestMultiReader extends TestCase {
     super(s);
   }
 
-  protected void setUp() {
+  protected void setUp() throws IOException {
     DocHelper.setupDoc(doc1);
     DocHelper.setupDoc(doc2);
     DocHelper.writeDoc(dir, "seg-1", doc1);
     DocHelper.writeDoc(dir, "seg-2", doc2);
-    
-    try {
-      sis.write(dir);
-      reader1 = SegmentReader.get(new SegmentInfo("seg-1", 1, dir));
-      reader2 = SegmentReader.get(new SegmentInfo("seg-2", 1, dir));
-      readers[0] = reader1;
-      readers[1] = reader2;      
-    } catch (IOException e) {
-      e.printStackTrace();
-    }
-  }
-/*IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);
-      writer.addDocument(doc1);
-      writer.addDocument(doc2);
-      writer.close();*/
-  protected void tearDown() {
-
+    sis.write(dir);
+    reader1 = SegmentReader.get(new SegmentInfo("seg-1", 1, dir));
+    reader2 = SegmentReader.get(new SegmentInfo("seg-2", 1, dir));
+    readers[0] = reader1;
+    readers[1] = reader2;
   }
   
   public void test() {
@@ -67,23 +55,18 @@ public class TestMultiReader extends TestCase {
     assertTrue(sis != null);
   }    
 
-  public void testDocument() {
-    try {    
-      sis.read(dir);
-      MultiReader reader = new MultiReader(dir, sis, false, readers);
-      assertTrue(reader != null);
-      Document newDoc1 = reader.document(0);
-      assertTrue(newDoc1 != null);
-      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);
-      Document newDoc2 = reader.document(1);
-      assertTrue(newDoc2 != null);
-      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);
-      TermFreqVector vector = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);
-      assertTrue(vector != null);
-    } catch (IOException e) {
-      e.printStackTrace();
-      assertTrue(false);
-    }
+  public void testDocument() throws IOException {
+    sis.read(dir);
+    MultiReader reader = new MultiReader(dir, sis, false, readers);
+    assertTrue(reader != null);
+    Document newDoc1 = reader.document(0);
+    assertTrue(newDoc1 != null);
+    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);
+    Document newDoc2 = reader.document(1);
+    assertTrue(newDoc2 != null);
+    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);
+    TermFreqVector vector = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);
+    assertTrue(vector != null);
   }
   
   public void testTermVectors() {
diff --git a/src/test/org/apache/lucene/index/TestSegmentMerger.java b/src/test/org/apache/lucene/index/TestSegmentMerger.java
index 8ead947..86841d5 100644
--- a/src/test/org/apache/lucene/index/TestSegmentMerger.java
+++ b/src/test/org/apache/lucene/index/TestSegmentMerger.java
@@ -44,22 +44,13 @@ public class TestSegmentMerger extends TestCase {
     super(s);
   }
 
-  protected void setUp() {
+  protected void setUp() throws IOException {
     DocHelper.setupDoc(doc1);
     DocHelper.writeDoc(merge1Dir, merge1Segment, doc1);
     DocHelper.setupDoc(doc2);
     DocHelper.writeDoc(merge2Dir, merge2Segment, doc2);
-    try {
-      reader1 = SegmentReader.get(new SegmentInfo(merge1Segment, 1, merge1Dir));
-      reader2 = SegmentReader.get(new SegmentInfo(merge2Segment, 1, merge2Dir));
-    } catch (IOException e) {
-      e.printStackTrace();                                                      
-    }
-
-  }
-
-  protected void tearDown() {
-
+    reader1 = SegmentReader.get(new SegmentInfo(merge1Segment, 1, merge1Dir));
+    reader2 = SegmentReader.get(new SegmentInfo(merge2Segment, 1, merge2Dir));
   }
 
   public void test() {
@@ -70,58 +61,51 @@ public class TestSegmentMerger extends TestCase {
     assertTrue(reader2 != null);
   }
   
-  public void testMerge() {                             
-    //System.out.println("----------------TestMerge------------------");
+  public void testMerge() throws IOException {                             
     SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);
     merger.add(reader1);
     merger.add(reader2);
-    try {
-      int docsMerged = merger.merge();
-      merger.closeReaders();
-      assertTrue(docsMerged == 2);
-      //Should be able to open a new SegmentReader against the new directory
-      SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir));
-      assertTrue(mergedReader != null);
-      assertTrue(mergedReader.numDocs() == 2);
-      Document newDoc1 = mergedReader.document(0);
-      assertTrue(newDoc1 != null);
-      //There are 2 unstored fields on the document
-      assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);
-      Document newDoc2 = mergedReader.document(1);
-      assertTrue(newDoc2 != null);
-      assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);
-      
-      TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, "field"));
-      assertTrue(termDocs != null);
-      assertTrue(termDocs.next() == true);
-      
-      Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);
-      assertTrue(stored != null);
-      //System.out.println("stored size: " + stored.size());
-      assertTrue(stored.size() == 2);
-      
-      TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);
-      assertTrue(vector != null);
-      String [] terms = vector.getTerms();
-      assertTrue(terms != null);
-      //System.out.println("Terms size: " + terms.length);
-      assertTrue(terms.length == 3);
-      int [] freqs = vector.getTermFrequencies();
-      assertTrue(freqs != null);
-      //System.out.println("Freqs size: " + freqs.length);
-      assertTrue(vector instanceof TermPositionVector == true);
-      
-      for (int i = 0; i < terms.length; i++) {
-        String term = terms[i];
-        int freq = freqs[i];
-        //System.out.println("Term: " + term + " Freq: " + freq);
-        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);
-        assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);
-      }                                                
-    } catch (IOException e) {
-      e.printStackTrace();
-      assertTrue(false);
-    }
-    //System.out.println("---------------------end TestMerge-------------------");
+    int docsMerged = merger.merge();
+    merger.closeReaders();
+    assertTrue(docsMerged == 2);
+    //Should be able to open a new SegmentReader against the new directory
+    SegmentReader mergedReader = SegmentReader.get(new SegmentInfo(mergedSegment, docsMerged, mergedDir));
+    assertTrue(mergedReader != null);
+    assertTrue(mergedReader.numDocs() == 2);
+    Document newDoc1 = mergedReader.document(0);
+    assertTrue(newDoc1 != null);
+    //There are 2 unstored fields on the document
+    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - 2);
+    Document newDoc2 = mergedReader.document(1);
+    assertTrue(newDoc2 != null);
+    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - 2);
+    
+    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, "field"));
+    assertTrue(termDocs != null);
+    assertTrue(termDocs.next() == true);
+    
+    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);
+    assertTrue(stored != null);
+    //System.out.println("stored size: " + stored.size());
+    assertTrue(stored.size() == 2);
+    
+    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);
+    assertTrue(vector != null);
+    String [] terms = vector.getTerms();
+    assertTrue(terms != null);
+    //System.out.println("Terms size: " + terms.length);
+    assertTrue(terms.length == 3);
+    int [] freqs = vector.getTermFrequencies();
+    assertTrue(freqs != null);
+    //System.out.println("Freqs size: " + freqs.length);
+    assertTrue(vector instanceof TermPositionVector == true);
+    
+    for (int i = 0; i < terms.length; i++) {
+      String term = terms[i];
+      int freq = freqs[i];
+      //System.out.println("Term: " + term + " Freq: " + freq);
+      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);
+      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);
+    }                                                
   }    
 }
diff --git a/src/test/org/apache/lucene/index/TestSegmentReader.java b/src/test/org/apache/lucene/index/TestSegmentReader.java
index e5b0d08..efe1984 100644
--- a/src/test/org/apache/lucene/index/TestSegmentReader.java
+++ b/src/test/org/apache/lucene/index/TestSegmentReader.java
@@ -36,15 +36,10 @@ public class TestSegmentReader extends TestCase {
   }
   
   //TODO: Setup the reader w/ multiple documents
-  protected void setUp() {
-
-    try {
-      DocHelper.setupDoc(testDoc);
-      DocHelper.writeDoc(dir, testDoc);
-      reader = SegmentReader.get(new SegmentInfo("test", 1, dir));
-    } catch (IOException e) {
-      
-    }
+  protected void setUp() throws IOException {
+    DocHelper.setupDoc(testDoc);
+    DocHelper.writeDoc(dir, testDoc);
+    reader = SegmentReader.get(new SegmentInfo("test", 1, dir));
   }
 
   protected void tearDown() {
@@ -58,48 +53,38 @@ public class TestSegmentReader extends TestCase {
     assertTrue(DocHelper.numFields(testDoc) == 6);
   }
   
-  public void testDocument() {
-    try {
-      assertTrue(reader.numDocs() == 1);
-      assertTrue(reader.maxDoc() >= 1);
-      Document result = reader.document(0);
-      assertTrue(result != null);
-      //There are 2 unstored fields on the document that are not preserved across writing
-      assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - 2);
-      
-      Enumeration fields = result.fields();
-      while (fields.hasMoreElements()) {
-        Field field = (Field) fields.nextElement();
-        assertTrue(field != null);
-        assertTrue(DocHelper.nameValues.containsKey(field.name()));
-      }
-    } catch (IOException e) {
-      e.printStackTrace();
-      assertTrue(false);
+  public void testDocument() throws IOException {
+    assertTrue(reader.numDocs() == 1);
+    assertTrue(reader.maxDoc() >= 1);
+    Document result = reader.document(0);
+    assertTrue(result != null);
+    //There are 2 unstored fields on the document that are not preserved across writing
+    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - 2);
+    
+    Enumeration fields = result.fields();
+    while (fields.hasMoreElements()) {
+      Field field = (Field) fields.nextElement();
+      assertTrue(field != null);
+      assertTrue(DocHelper.nameValues.containsKey(field.name()));
     }
   }
   
-  public void testDelete() {
+  public void testDelete() throws IOException {
     Document docToDelete = new Document();
     DocHelper.setupDoc(docToDelete);
     DocHelper.writeDoc(dir, "seg-to-delete", docToDelete);
+    SegmentReader deleteReader = SegmentReader.get(new SegmentInfo("seg-to-delete", 1, dir));
+    assertTrue(deleteReader != null);
+    assertTrue(deleteReader.numDocs() == 1);
+    deleteReader.delete(0);
+    assertTrue(deleteReader.isDeleted(0) == true);
+    assertTrue(deleteReader.hasDeletions() == true);
+    assertTrue(deleteReader.numDocs() == 0);
     try {
-      SegmentReader deleteReader = SegmentReader.get(new SegmentInfo("seg-to-delete", 1, dir));
-      assertTrue(deleteReader != null);
-      assertTrue(deleteReader.numDocs() == 1);
-      deleteReader.delete(0);
-      assertTrue(deleteReader.isDeleted(0) == true);
-      assertTrue(deleteReader.hasDeletions() == true);
-      assertTrue(deleteReader.numDocs() == 0);
-      try {
-        Document test = deleteReader.document(0);
-        assertTrue(false);
-      } catch (IllegalArgumentException e) {
-        assertTrue(true);
-      }
-    } catch (IOException e) {
-      e.printStackTrace();
-      assertTrue(false);
+      Document test = deleteReader.document(0);
+      fail();
+    } catch (IllegalArgumentException e) {
+      // expcected exception
     }
   }    
   
@@ -133,34 +118,28 @@ public class TestSegmentReader extends TestCase {
     assertTrue(result.size() == 3);
   } 
   
-  public void testTerms() {
-    try {
-      TermEnum terms = reader.terms();
-      assertTrue(terms != null);
-      while (terms.next() == true)
-      {
-        Term term = terms.term();
-        assertTrue(term != null);
-        //System.out.println("Term: " + term);
-        String fieldValue = (String)DocHelper.nameValues.get(term.field());
-        assertTrue(fieldValue.indexOf(term.text()) != -1);
-      }
-      
-      TermDocs termDocs = reader.termDocs();
-      assertTrue(termDocs != null);
-      termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, "field"));
-      assertTrue(termDocs.next() == true);
-      
-      TermPositions positions = reader.termPositions();
-      positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, "field"));
-      assertTrue(positions != null);
-      assertTrue(positions.doc() == 0);
-      assertTrue(positions.nextPosition() >= 0);
-      
-    } catch (IOException e) {
-      e.printStackTrace();
-      assertTrue(false);
+  public void testTerms() throws IOException {
+    TermEnum terms = reader.terms();
+    assertTrue(terms != null);
+    while (terms.next() == true)
+    {
+      Term term = terms.term();
+      assertTrue(term != null);
+      //System.out.println("Term: " + term);
+      String fieldValue = (String)DocHelper.nameValues.get(term.field());
+      assertTrue(fieldValue.indexOf(term.text()) != -1);
     }
+    
+    TermDocs termDocs = reader.termDocs();
+    assertTrue(termDocs != null);
+    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, "field"));
+    assertTrue(termDocs.next() == true);
+    
+    TermPositions positions = reader.termPositions();
+    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, "field"));
+    assertTrue(positions != null);
+    assertTrue(positions.doc() == 0);
+    assertTrue(positions.nextPosition() >= 0);
   }    
   
   public void testNorms() {
diff --git a/src/test/org/apache/lucene/index/TestSegmentTermDocs.java b/src/test/org/apache/lucene/index/TestSegmentTermDocs.java
index 59abb63..5472c99 100644
--- a/src/test/org/apache/lucene/index/TestSegmentTermDocs.java
+++ b/src/test/org/apache/lucene/index/TestSegmentTermDocs.java
@@ -47,29 +47,25 @@ public class TestSegmentTermDocs extends TestCase {
     assertTrue(dir != null);
   }
   
-  public void testTermDocs() {
-    try {
-      //After adding the document, we should be able to read it back in
-      SegmentReader reader = SegmentReader.get(new SegmentInfo("test", 1, dir));
-      assertTrue(reader != null);
-      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);
-      assertTrue(segTermDocs != null);
-      segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, "field"));
-      if (segTermDocs.next() == true)
-      {
-        int docId = segTermDocs.doc();
-        assertTrue(docId == 0);
-        int freq = segTermDocs.freq();
-        assertTrue(freq == 3);  
-      }
-      reader.close();
-    } catch (IOException e) {
-      assertTrue(false);
+  public void testTermDocs() throws IOException {
+    //After adding the document, we should be able to read it back in
+    SegmentReader reader = SegmentReader.get(new SegmentInfo("test", 1, dir));
+    assertTrue(reader != null);
+    SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);
+    assertTrue(segTermDocs != null);
+    segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, "field"));
+    if (segTermDocs.next() == true)
+    {
+      int docId = segTermDocs.doc();
+      assertTrue(docId == 0);
+      int freq = segTermDocs.freq();
+      assertTrue(freq == 3);  
     }
+    reader.close();
   }  
   
-  public void testBadSeek() {
-    try {
+  public void testBadSeek() throws IOException {
+    {
       //After adding the document, we should be able to read it back in
       SegmentReader reader = SegmentReader.get(new SegmentInfo("test", 3, dir));
       assertTrue(reader != null);
@@ -78,10 +74,8 @@ public class TestSegmentTermDocs extends TestCase {
       segTermDocs.seek(new Term("textField2", "bad"));
       assertTrue(segTermDocs.next() == false);
       reader.close();
-    } catch (IOException e) {
-      assertTrue(false);
     }
-    try {
+    {
       //After adding the document, we should be able to read it back in
       SegmentReader reader = SegmentReader.get(new SegmentInfo("test", 3, dir));
       assertTrue(reader != null);
@@ -90,137 +84,131 @@ public class TestSegmentTermDocs extends TestCase {
       segTermDocs.seek(new Term("junk", "bad"));
       assertTrue(segTermDocs.next() == false);
       reader.close();
-    } catch (IOException e) {
-      assertTrue(false);
     }
   }
   
-  public void testSkipTo() {
-    try {
-      Directory dir = new RAMDirectory();
-      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);
-      
-      Term ta = new Term("content","aaa");
-      for(int i = 0; i < 10; i++)
-        addDoc(writer, "aaa aaa aaa aaa");
-        
-      Term tb = new Term("content","bbb");
-      for(int i = 0; i < 16; i++)
-        addDoc(writer, "bbb bbb bbb bbb");
-        
-      Term tc = new Term("content","ccc");
-      for(int i = 0; i < 50; i++)
-        addDoc(writer, "ccc ccc ccc ccc");
-        
-      // assure that we deal with a single segment  
-      writer.optimize();
-      writer.close();
-      
-      IndexReader reader = IndexReader.open(dir);
-      TermDocs tdocs = reader.termDocs();
-      
-      // without optimization (assumption skipInterval == 16)
+  public void testSkipTo() throws IOException {
+    Directory dir = new RAMDirectory();
+    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);
+    
+    Term ta = new Term("content","aaa");
+    for(int i = 0; i < 10; i++)
+      addDoc(writer, "aaa aaa aaa aaa");
       
-      // with next
-      tdocs.seek(ta);
-      assertTrue(tdocs.next());
-      assertEquals(0, tdocs.doc());
-      assertEquals(4, tdocs.freq());
-      assertTrue(tdocs.next());
-      assertEquals(1, tdocs.doc());
-      assertEquals(4, tdocs.freq());
-      assertTrue(tdocs.skipTo(0));
-      assertEquals(2, tdocs.doc());
-      assertTrue(tdocs.skipTo(4));
-      assertEquals(4, tdocs.doc());
-      assertTrue(tdocs.skipTo(9));
-      assertEquals(9, tdocs.doc());
-      assertFalse(tdocs.skipTo(10));
+    Term tb = new Term("content","bbb");
+    for(int i = 0; i < 16; i++)
+      addDoc(writer, "bbb bbb bbb bbb");
       
-      // without next
-      tdocs.seek(ta);
-      assertTrue(tdocs.skipTo(0));
-      assertEquals(0, tdocs.doc());
-      assertTrue(tdocs.skipTo(4));
-      assertEquals(4, tdocs.doc());
-      assertTrue(tdocs.skipTo(9));
-      assertEquals(9, tdocs.doc());
-      assertFalse(tdocs.skipTo(10));
+    Term tc = new Term("content","ccc");
+    for(int i = 0; i < 50; i++)
+      addDoc(writer, "ccc ccc ccc ccc");
       
-      // exactly skipInterval documents and therefore with optimization
-      
-      // with next
-      tdocs.seek(tb);
-      assertTrue(tdocs.next());
-      assertEquals(10, tdocs.doc());
-      assertEquals(4, tdocs.freq());
-      assertTrue(tdocs.next());
-      assertEquals(11, tdocs.doc());
-      assertEquals(4, tdocs.freq());
-      assertTrue(tdocs.skipTo(5));
-      assertEquals(12, tdocs.doc());
-      assertTrue(tdocs.skipTo(15));
-      assertEquals(15, tdocs.doc());
-      assertTrue(tdocs.skipTo(24));
-      assertEquals(24, tdocs.doc());
-      assertTrue(tdocs.skipTo(25));
-      assertEquals(25, tdocs.doc());
-      assertFalse(tdocs.skipTo(26));
-      
-      // without next
-      tdocs.seek(tb);
-      assertTrue(tdocs.skipTo(5));
-      assertEquals(10, tdocs.doc());
-      assertTrue(tdocs.skipTo(15));
-      assertEquals(15, tdocs.doc());
-      assertTrue(tdocs.skipTo(24));
-      assertEquals(24, tdocs.doc());
-      assertTrue(tdocs.skipTo(25));
-      assertEquals(25, tdocs.doc());
-      assertFalse(tdocs.skipTo(26));
-      
-      // much more than skipInterval documents and therefore with optimization
-      
-      // with next
-      tdocs.seek(tc);
-      assertTrue(tdocs.next());
-      assertEquals(26, tdocs.doc());
-      assertEquals(4, tdocs.freq());
-      assertTrue(tdocs.next());
-      assertEquals(27, tdocs.doc());
-      assertEquals(4, tdocs.freq());
-      assertTrue(tdocs.skipTo(5));
-      assertEquals(28, tdocs.doc());
-      assertTrue(tdocs.skipTo(40));
-      assertEquals(40, tdocs.doc());
-      assertTrue(tdocs.skipTo(57));
-      assertEquals(57, tdocs.doc());
-      assertTrue(tdocs.skipTo(74));
-      assertEquals(74, tdocs.doc());
-      assertTrue(tdocs.skipTo(75));
-      assertEquals(75, tdocs.doc());
-      assertFalse(tdocs.skipTo(76));
-      
-      //without next
-      tdocs.seek(tc);
-      assertTrue(tdocs.skipTo(5));
-      assertEquals(26, tdocs.doc());
-      assertTrue(tdocs.skipTo(40));
-      assertEquals(40, tdocs.doc());
-      assertTrue(tdocs.skipTo(57));
-      assertEquals(57, tdocs.doc());
-      assertTrue(tdocs.skipTo(74));
-      assertEquals(74, tdocs.doc());
-      assertTrue(tdocs.skipTo(75));
-      assertEquals(75, tdocs.doc());
-      assertFalse(tdocs.skipTo(76));
-      
-      tdocs.close();
-      reader.close();
-      dir.close();
-    } catch (IOException e) {
-        assertTrue(false);
-    }
+    // assure that we deal with a single segment  
+    writer.optimize();
+    writer.close();
+    
+    IndexReader reader = IndexReader.open(dir);
+    TermDocs tdocs = reader.termDocs();
+    
+    // without optimization (assumption skipInterval == 16)
+    
+    // with next
+    tdocs.seek(ta);
+    assertTrue(tdocs.next());
+    assertEquals(0, tdocs.doc());
+    assertEquals(4, tdocs.freq());
+    assertTrue(tdocs.next());
+    assertEquals(1, tdocs.doc());
+    assertEquals(4, tdocs.freq());
+    assertTrue(tdocs.skipTo(0));
+    assertEquals(2, tdocs.doc());
+    assertTrue(tdocs.skipTo(4));
+    assertEquals(4, tdocs.doc());
+    assertTrue(tdocs.skipTo(9));
+    assertEquals(9, tdocs.doc());
+    assertFalse(tdocs.skipTo(10));
+    
+    // without next
+    tdocs.seek(ta);
+    assertTrue(tdocs.skipTo(0));
+    assertEquals(0, tdocs.doc());
+    assertTrue(tdocs.skipTo(4));
+    assertEquals(4, tdocs.doc());
+    assertTrue(tdocs.skipTo(9));
+    assertEquals(9, tdocs.doc());
+    assertFalse(tdocs.skipTo(10));
+    
+    // exactly skipInterval documents and therefore with optimization
+    
+    // with next
+    tdocs.seek(tb);
+    assertTrue(tdocs.next());
+    assertEquals(10, tdocs.doc());
+    assertEquals(4, tdocs.freq());
+    assertTrue(tdocs.next());
+    assertEquals(11, tdocs.doc());
+    assertEquals(4, tdocs.freq());
+    assertTrue(tdocs.skipTo(5));
+    assertEquals(12, tdocs.doc());
+    assertTrue(tdocs.skipTo(15));
+    assertEquals(15, tdocs.doc());
+    assertTrue(tdocs.skipTo(24));
+    assertEquals(24, tdocs.doc());
+    assertTrue(tdocs.skipTo(25));
+    assertEquals(25, tdocs.doc());
+    assertFalse(tdocs.skipTo(26));
+    
+    // without next
+    tdocs.seek(tb);
+    assertTrue(tdocs.skipTo(5));
+    assertEquals(10, tdocs.doc());
+    assertTrue(tdocs.skipTo(15));
+    assertEquals(15, tdocs.doc());
+    assertTrue(tdocs.skipTo(24));
+    assertEquals(24, tdocs.doc());
+    assertTrue(tdocs.skipTo(25));
+    assertEquals(25, tdocs.doc());
+    assertFalse(tdocs.skipTo(26));
+    
+    // much more than skipInterval documents and therefore with optimization
+    
+    // with next
+    tdocs.seek(tc);
+    assertTrue(tdocs.next());
+    assertEquals(26, tdocs.doc());
+    assertEquals(4, tdocs.freq());
+    assertTrue(tdocs.next());
+    assertEquals(27, tdocs.doc());
+    assertEquals(4, tdocs.freq());
+    assertTrue(tdocs.skipTo(5));
+    assertEquals(28, tdocs.doc());
+    assertTrue(tdocs.skipTo(40));
+    assertEquals(40, tdocs.doc());
+    assertTrue(tdocs.skipTo(57));
+    assertEquals(57, tdocs.doc());
+    assertTrue(tdocs.skipTo(74));
+    assertEquals(74, tdocs.doc());
+    assertTrue(tdocs.skipTo(75));
+    assertEquals(75, tdocs.doc());
+    assertFalse(tdocs.skipTo(76));
+    
+    //without next
+    tdocs.seek(tc);
+    assertTrue(tdocs.skipTo(5));
+    assertEquals(26, tdocs.doc());
+    assertTrue(tdocs.skipTo(40));
+    assertEquals(40, tdocs.doc());
+    assertTrue(tdocs.skipTo(57));
+    assertEquals(57, tdocs.doc());
+    assertTrue(tdocs.skipTo(74));
+    assertEquals(74, tdocs.doc());
+    assertTrue(tdocs.skipTo(75));
+    assertEquals(75, tdocs.doc());
+    assertFalse(tdocs.skipTo(76));
+    
+    tdocs.close();
+    reader.close();
+    dir.close();
   }
   
   private void addDoc(IndexWriter writer, String value) throws IOException
diff --git a/src/test/org/apache/lucene/index/TestSegmentTermEnum.java b/src/test/org/apache/lucene/index/TestSegmentTermEnum.java
index 9dea7fb..3eb23ff 100644
--- a/src/test/org/apache/lucene/index/TestSegmentTermEnum.java
+++ b/src/test/org/apache/lucene/index/TestSegmentTermEnum.java
@@ -21,42 +21,32 @@ public class TestSegmentTermEnum extends TestCase
 {
   Directory dir = new RAMDirectory();
 
-  public void testTermEnum()
+  public void testTermEnum() throws IOException
   {
     IndexWriter writer = null;
 
-    try {
-      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);
+    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);
 
-      // add 100 documents with term : aaa
-      // add 100 documents with terms: aaa bbb
-      // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100
-      for (int i = 0; i < 100; i++) {
-        addDoc(writer, "aaa");
-        addDoc(writer, "aaa bbb");
-      }
-
-      writer.close();
-    }
-    catch (IOException e) {
-      e.printStackTrace();
+    // add 100 documents with term : aaa
+    // add 100 documents with terms: aaa bbb
+    // Therefore, term 'aaa' has document frequency of 200 and term 'bbb' 100
+    for (int i = 0; i < 100; i++) {
+      addDoc(writer, "aaa");
+      addDoc(writer, "aaa bbb");
     }
 
-    try {
-      // verify document frequency of terms in an unoptimized index
-      verifyDocFreq();
+    writer.close();
 
-      // merge segments by optimizing the index
-      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);
-      writer.optimize();
-      writer.close();
+    // verify document frequency of terms in an unoptimized index
+    verifyDocFreq();
 
-      // verify document frequency of terms in an optimized index
-      verifyDocFreq();
-    }
-    catch (IOException e2) {
-      e2.printStackTrace();
-    }
+    // merge segments by optimizing the index
+    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);
+    writer.optimize();
+    writer.close();
+
+    // verify document frequency of terms in an optimized index
+    verifyDocFreq();
   }
 
   private void verifyDocFreq()
@@ -95,16 +85,10 @@ public class TestSegmentTermEnum extends TestCase
     termEnum.close();
   }
 
-  private void addDoc(IndexWriter writer, String value)
+  private void addDoc(IndexWriter writer, String value) throws IOException
   {
     Document doc = new Document();
     doc.add(new Field("content", value, Field.Store.NO, Field.Index.TOKENIZED));
-
-    try {
-      writer.addDocument(doc);
-    }
-    catch (IOException e) {
-      e.printStackTrace();
-    }
+    writer.addDocument(doc);
   }
 }
diff --git a/src/test/org/apache/lucene/index/TestTermVectorsReader.java b/src/test/org/apache/lucene/index/TestTermVectorsReader.java
index d63c63e..7b1e5c9 100644
--- a/src/test/org/apache/lucene/index/TestTermVectorsReader.java
+++ b/src/test/org/apache/lucene/index/TestTermVectorsReader.java
@@ -24,7 +24,7 @@ public class TestTermVectorsReader extends TestCase {
     super(s);
   }
 
-  protected void setUp() {
+  protected void setUp() throws IOException {
     for (int i = 0; i < testFields.length; i++) {
       fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);
     }
@@ -42,27 +42,21 @@ public class TestTermVectorsReader extends TestCase {
         offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());
       }        
     }
-    try {
-      Arrays.sort(testTerms);
-      for (int j = 0; j < 5; j++) {
-        writer = new TermVectorsWriter(dir, seg, fieldInfos);
-        writer.openDocument();
+    Arrays.sort(testTerms);
+    for (int j = 0; j < 5; j++) {
+      writer = new TermVectorsWriter(dir, seg, fieldInfos);
+      writer.openDocument();
 
-        for (int k = 0; k < testFields.length; k++) {
-          writer.openField(testFields[k]);
-          for (int i = 0; i < testTerms.length; i++) {
-            writer.addTerm(testTerms[i], 3, positions[i], offsets[i]);      
-          }
-          writer.closeField();
+      for (int k = 0; k < testFields.length; k++) {
+        writer.openField(testFields[k]);
+        for (int i = 0; i < testTerms.length; i++) {
+          writer.addTerm(testTerms[i], 3, positions[i], offsets[i]);      
         }
-        writer.closeDocument();
-        writer.close();
+        writer.closeField();
       }
-
-    } catch (IOException e) {
-      e.printStackTrace();
-      assertTrue(false);
-    }    
+      writer.closeDocument();
+      writer.close();
+    }
   }
 
   protected void tearDown() {
@@ -76,120 +70,90 @@ public class TestTermVectorsReader extends TestCase {
       assertTrue(dir.fileExists(seg + TermVectorsWriter.TVX_EXTENSION));
   }
   
-  public void testReader() {
-    try {
-      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);
-      assertTrue(reader != null);
-      TermFreqVector vector = reader.get(0, testFields[0]);
-      assertTrue(vector != null);
-      String [] terms = vector.getTerms();
-      assertTrue(terms != null);
-      assertTrue(terms.length == testTerms.length);
-      for (int i = 0; i < terms.length; i++) {
-        String term = terms[i];
-        //System.out.println("Term: " + term);
-        assertTrue(term.equals(testTerms[i]));
-      }
-      
-    } catch (IOException e) {
-      e.printStackTrace();
-      assertTrue(false);
+  public void testReader() throws IOException {
+    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);
+    assertTrue(reader != null);
+    TermFreqVector vector = reader.get(0, testFields[0]);
+    assertTrue(vector != null);
+    String [] terms = vector.getTerms();
+    assertTrue(terms != null);
+    assertTrue(terms.length == testTerms.length);
+    for (int i = 0; i < terms.length; i++) {
+      String term = terms[i];
+      //System.out.println("Term: " + term);
+      assertTrue(term.equals(testTerms[i]));
     }
   }  
   
-  public void testPositionReader() {
-    try {
-      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);
-      assertTrue(reader != null);
-      TermPositionVector vector;
-      String [] terms;
-      vector = (TermPositionVector)reader.get(0, testFields[0]);
-      assertTrue(vector != null);      
-      terms = vector.getTerms();
-      assertTrue(terms != null);
-      assertTrue(terms.length == testTerms.length);
-      for (int i = 0; i < terms.length; i++) {
-        String term = terms[i];
-        //System.out.println("Term: " + term);
-        assertTrue(term.equals(testTerms[i]));
-        int [] positions = vector.getTermPositions(i);
-        assertTrue(positions != null);
-        assertTrue(positions.length == this.positions[i].length);
-        for (int j = 0; j < positions.length; j++) {
-          int position = positions[j];
-          assertTrue(position == this.positions[i][j]);
-        }
-        TermVectorOffsetInfo [] offset = vector.getOffsets(i);
-        assertTrue(offset != null);
-        assertTrue(offset.length == this.offsets[i].length);
-        for (int j = 0; j < offset.length; j++) {
-          TermVectorOffsetInfo termVectorOffsetInfo = offset[j];
-          assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));
-        }
+  public void testPositionReader() throws IOException {
+    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);
+    assertTrue(reader != null);
+    TermPositionVector vector;
+    String [] terms;
+    vector = (TermPositionVector)reader.get(0, testFields[0]);
+    assertTrue(vector != null);      
+    terms = vector.getTerms();
+    assertTrue(terms != null);
+    assertTrue(terms.length == testTerms.length);
+    for (int i = 0; i < terms.length; i++) {
+      String term = terms[i];
+      //System.out.println("Term: " + term);
+      assertTrue(term.equals(testTerms[i]));
+      int [] positions = vector.getTermPositions(i);
+      assertTrue(positions != null);
+      assertTrue(positions.length == this.positions[i].length);
+      for (int j = 0; j < positions.length; j++) {
+        int position = positions[j];
+        assertTrue(position == this.positions[i][j]);
       }
-      
-      TermFreqVector freqVector = reader.get(0, testFields[1]); //no pos, no offset
-      assertTrue(freqVector != null);      
-      assertTrue(freqVector instanceof TermPositionVector == false);
-      terms = freqVector.getTerms();
-      assertTrue(terms != null);
-      assertTrue(terms.length == testTerms.length);
-      for (int i = 0; i < terms.length; i++) {
-        String term = terms[i];
-        //System.out.println("Term: " + term);
-        assertTrue(term.equals(testTerms[i]));        
+      TermVectorOffsetInfo [] offset = vector.getOffsets(i);
+      assertTrue(offset != null);
+      assertTrue(offset.length == this.offsets[i].length);
+      for (int j = 0; j < offset.length; j++) {
+        TermVectorOffsetInfo termVectorOffsetInfo = offset[j];
+        assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));
       }
-      
-      
-    } catch (IOException e) {
-      e.printStackTrace();
-      assertTrue(false);
     }
-    catch (ClassCastException cce)
-    {
-      cce.printStackTrace();
-      assertTrue(false);
+    
+    TermFreqVector freqVector = reader.get(0, testFields[1]); //no pos, no offset
+    assertTrue(freqVector != null);      
+    assertTrue(freqVector instanceof TermPositionVector == false);
+    terms = freqVector.getTerms();
+    assertTrue(terms != null);
+    assertTrue(terms.length == testTerms.length);
+    for (int i = 0; i < terms.length; i++) {
+      String term = terms[i];
+      //System.out.println("Term: " + term);
+      assertTrue(term.equals(testTerms[i]));        
     }
   }
   
-  public void testOffsetReader() {
-    try {
-      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);
-      assertTrue(reader != null);
-      TermPositionVector vector = (TermPositionVector)reader.get(0, testFields[0]);
-      assertTrue(vector != null);
-      String [] terms = vector.getTerms();
-      assertTrue(terms != null);
-      assertTrue(terms.length == testTerms.length);
-      for (int i = 0; i < terms.length; i++) {
-        String term = terms[i];
-        //System.out.println("Term: " + term);
-        assertTrue(term.equals(testTerms[i]));
-        int [] positions = vector.getTermPositions(i);
-        assertTrue(positions != null);
-        assertTrue(positions.length == this.positions[i].length);
-        for (int j = 0; j < positions.length; j++) {
-          int position = positions[j];
-          assertTrue(position == this.positions[i][j]);
-        }
-        TermVectorOffsetInfo [] offset = vector.getOffsets(i);
-        assertTrue(offset != null);
-        assertTrue(offset.length == this.offsets[i].length);
-        for (int j = 0; j < offset.length; j++) {
-          TermVectorOffsetInfo termVectorOffsetInfo = offset[j];
-          assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));
-        }
+  public void testOffsetReader() throws IOException {
+    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);
+    assertTrue(reader != null);
+    TermPositionVector vector = (TermPositionVector)reader.get(0, testFields[0]);
+    assertTrue(vector != null);
+    String [] terms = vector.getTerms();
+    assertTrue(terms != null);
+    assertTrue(terms.length == testTerms.length);
+    for (int i = 0; i < terms.length; i++) {
+      String term = terms[i];
+      //System.out.println("Term: " + term);
+      assertTrue(term.equals(testTerms[i]));
+      int [] positions = vector.getTermPositions(i);
+      assertTrue(positions != null);
+      assertTrue(positions.length == this.positions[i].length);
+      for (int j = 0; j < positions.length; j++) {
+        int position = positions[j];
+        assertTrue(position == this.positions[i][j]);
+      }
+      TermVectorOffsetInfo [] offset = vector.getOffsets(i);
+      assertTrue(offset != null);
+      assertTrue(offset.length == this.offsets[i].length);
+      for (int j = 0; j < offset.length; j++) {
+        TermVectorOffsetInfo termVectorOffsetInfo = offset[j];
+        assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));
       }
-      
-      
-    } catch (IOException e) {
-      e.printStackTrace();
-      assertTrue(false);
-    }
-    catch (ClassCastException cce)
-    {
-      cce.printStackTrace();
-      assertTrue(false);
     }
   }
   
@@ -203,18 +167,18 @@ public class TestTermVectorsReader extends TestCase {
       assertTrue(reader != null);
       //Bad document number, good field number
       reader.get(50, testFields[0]);
-      assertTrue(false);      
+      fail();      
     } catch (IOException e) {
-      assertTrue(true);
+      // expected exception
     }
     try {
       TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);
       assertTrue(reader != null);
       //Bad document number, no field
       reader.get(50);
-      assertTrue(false);      
+      fail();      
     } catch (IOException e) {
-      assertTrue(true);
+      // expected exception
     }
     try {
       TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);
@@ -223,7 +187,7 @@ public class TestTermVectorsReader extends TestCase {
       TermFreqVector vector = reader.get(0, "f50");
       assertTrue(vector == null);      
     } catch (IOException e) {
-      assertTrue(false);
+      fail();
     }
   }    
 }
diff --git a/src/test/org/apache/lucene/index/TestTermVectorsWriter.java b/src/test/org/apache/lucene/index/TestTermVectorsWriter.java
index 49cf7ff..ed9b8d7 100644
--- a/src/test/org/apache/lucene/index/TestTermVectorsWriter.java
+++ b/src/test/org/apache/lucene/index/TestTermVectorsWriter.java
@@ -89,26 +89,21 @@ public class TestTermVectorsWriter extends TestCase {
     }
   }  */  
 
-  public void testWriter() {
-    try {
-      TermVectorsWriter writer = new TermVectorsWriter(dir, seg, fieldInfos);
-      writer.openDocument();
-      assertTrue(writer.isDocumentOpen() == true);
-      writeField(writer, testFields[0]);
-      writer.closeDocument();
-      writer.close();
-      assertTrue(writer.isDocumentOpen() == false);
-      //Check to see the files were created
-      assertTrue(dir.fileExists(seg + TermVectorsWriter.TVD_EXTENSION));
-      assertTrue(dir.fileExists(seg + TermVectorsWriter.TVX_EXTENSION));
-      //Now read it back in
-      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);
-      assertTrue(reader != null);
-      checkTermVector(reader, 0, testFields[0]);
-    } catch (IOException e) {
-      e.printStackTrace();
-      assertTrue(false);
-    }
+  public void testWriter() throws IOException {
+    TermVectorsWriter writer = new TermVectorsWriter(dir, seg, fieldInfos);
+    writer.openDocument();
+    assertTrue(writer.isDocumentOpen() == true);
+    writeField(writer, testFields[0]);
+    writer.closeDocument();
+    writer.close();
+    assertTrue(writer.isDocumentOpen() == false);
+    //Check to see the files were created
+    assertTrue(dir.fileExists(seg + TermVectorsWriter.TVD_EXTENSION));
+    assertTrue(dir.fileExists(seg + TermVectorsWriter.TVX_EXTENSION));
+    //Now read it back in
+    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);
+    assertTrue(reader != null);
+    checkTermVector(reader, 0, testFields[0]);
   }
   
   private void checkTermVector(TermVectorsReader reader, int docNum, String field) throws IOException {
@@ -125,28 +120,24 @@ public class TestTermVectorsWriter extends TestCase {
 
   /**
    * Test one document, multiple fields
+   * @throws IOException
    */
-  public void testMultipleFields() {
-    try {
-      TermVectorsWriter writer = new TermVectorsWriter(dir, seg, fieldInfos);
-      writeDocument(writer, testFields.length);
+  public void testMultipleFields() throws IOException {
+    TermVectorsWriter writer = new TermVectorsWriter(dir, seg, fieldInfos);
+    writeDocument(writer, testFields.length);
 
-      writer.close();
+    writer.close();
 
-      assertTrue(writer.isDocumentOpen() == false);
-      //Check to see the files were created
-      assertTrue(dir.fileExists(seg + TermVectorsWriter.TVD_EXTENSION));
-      assertTrue(dir.fileExists(seg + TermVectorsWriter.TVX_EXTENSION));
-      //Now read it back in
-      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);
-      assertTrue(reader != null);
-
-      for (int j = 0; j < testFields.length; j++) {
-        checkTermVector(reader, 0, testFields[j]);
-      }
-    } catch (IOException e) {
-      e.printStackTrace();
-      assertTrue(false);
+    assertTrue(writer.isDocumentOpen() == false);
+    //Check to see the files were created
+    assertTrue(dir.fileExists(seg + TermVectorsWriter.TVD_EXTENSION));
+    assertTrue(dir.fileExists(seg + TermVectorsWriter.TVX_EXTENSION));
+    //Now read it back in
+    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);
+    assertTrue(reader != null);
+
+    for (int j = 0; j < testFields.length; j++) {
+      checkTermVector(reader, 0, testFields[j]);
     }
   }
 
@@ -177,30 +168,19 @@ public class TestTermVectorsWriter extends TestCase {
   }
 
 
-  public void testMultipleDocuments() {
-
-    try {
-      TermVectorsWriter writer = new TermVectorsWriter(dir, seg, fieldInfos);
-      assertTrue(writer != null);
-      for (int i = 0; i < 10; i++) {
-        writeDocument(writer, testFields.length);
-      }
-      writer.close();
-    } catch (IOException e) {
-      e.printStackTrace();
-      assertTrue(false);
-    }      
+  public void testMultipleDocuments() throws IOException {
+    TermVectorsWriter writer = new TermVectorsWriter(dir, seg, fieldInfos);
+    assertTrue(writer != null);
+    for (int i = 0; i < 10; i++) {
+      writeDocument(writer, testFields.length);
+    }
+    writer.close();
     //Do some arbitrary tests
-    try {
-      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);
-      for (int i = 0; i < 10; i++) {        
-        assertTrue(reader != null);
-        checkTermVector(reader, 5, testFields[0]);
-        checkTermVector(reader, 2, testFields[2]);
-      }
-    } catch (IOException e) {
-      e.printStackTrace();
-      assertTrue(false);
+    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);
+    for (int i = 0; i < 10; i++) {        
+      assertTrue(reader != null);
+      checkTermVector(reader, 5, testFields[0]);
+      checkTermVector(reader, 2, testFields[2]);
     }
   }
   
@@ -208,23 +188,19 @@ public class TestTermVectorsWriter extends TestCase {
    * Test that no NullPointerException will be raised,
    * when adding one document with a single, empty field
    * and term vectors enabled.
+   * @throws IOException
    *
    */
-  public void testBadSegment() {
-    try {
-      dir = new RAMDirectory();
-      IndexWriter ir = new IndexWriter(dir, new StandardAnalyzer(), true);
-      
-      Document document = new Document();
-      document.add(new Field("tvtest", "", Field.Store.NO, Field.Index.TOKENIZED,
-          Field.TermVector.YES));
-      ir.addDocument(document);
-      ir.close();
-      dir.close();
-    } catch (Exception e) {
-      e.printStackTrace();
-      assertTrue(false);
-    }
+  public void testBadSegment() throws IOException {
+    dir = new RAMDirectory();
+    IndexWriter ir = new IndexWriter(dir, new StandardAnalyzer(), true);
+    
+    Document document = new Document();
+    document.add(new Field("tvtest", "", Field.Store.NO, Field.Index.TOKENIZED,
+        Field.TermVector.YES));
+    ir.addDocument(document);
+    ir.close();
+    dir.close();
   }
 
 }

