GitDiffStart: fef8857bd79b4877153c673460ec7d4672fa7e7a | Mon Nov 19 14:16:44 2012 +0000
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.java b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.java
index 45b5fbb..a7a998a 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.java
@@ -65,6 +65,7 @@ public class SimpleTextSimpleDocValuesFormat extends SimpleDocValuesFormat {
   final static BytesRef FIELD   = new BytesRef("field ");
   // used for numerics
   final static BytesRef MINVALUE = new BytesRef("  minvalue ");
+  final static BytesRef MAXVALUE = new BytesRef("  maxvalue ");
   final static BytesRef PATTERN  = new BytesRef("  pattern ");
   // used for bytes
   final static BytesRef FIXEDLENGTH = new BytesRef("  fixedlength ");
@@ -89,6 +90,7 @@ public class SimpleTextSimpleDocValuesFormat extends SimpleDocValuesFormat {
    *  <pre>
    *  field myField
    *    minvalue 0
+   *    maxvalue 234
    *    pattern 000
    *  005
    *  234
@@ -165,6 +167,10 @@ public class SimpleTextSimpleDocValuesFormat extends SimpleDocValuesFormat {
       SimpleTextUtil.write(data, MINVALUE);
       SimpleTextUtil.write(data, Long.toString(minValue), scratch);
       SimpleTextUtil.writeNewline(data);
+      
+      SimpleTextUtil.write(data, MAXVALUE);
+      SimpleTextUtil.write(data, Long.toString(maxValue), scratch);
+      SimpleTextUtil.writeNewline(data);
 
       assert maxValue >= minValue;
 
@@ -386,6 +392,7 @@ public class SimpleTextSimpleDocValuesFormat extends SimpleDocValuesFormat {
       int maxLength;
       boolean fixedLength;
       long minValue;
+      long maxValue;
       int numValues;
     };
 
@@ -422,6 +429,9 @@ public class SimpleTextSimpleDocValuesFormat extends SimpleDocValuesFormat {
           assert startsWith(MINVALUE);
           field.minValue = Long.parseLong(stripPrefix(MINVALUE));
           readLine();
+          assert startsWith(MAXVALUE);
+          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));
+          readLine();
           assert startsWith(PATTERN);
           field.pattern = stripPrefix(PATTERN);
           field.dataStartFilePointer = data.getFilePointer();
@@ -500,6 +510,21 @@ public class SimpleTextSimpleDocValuesFormat extends SimpleDocValuesFormat {
             throw new RuntimeException(ioe);
           }
         }
+
+        @Override
+        public long minValue() {
+          return field.minValue;
+        }
+
+        @Override
+        public long maxValue() {
+          return field.maxValue;
+        }
+
+        @Override
+        public int size() {
+          return maxDoc;
+        }
       };
     }
 
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/NumericDocValuesConsumer.java b/lucene/core/src/java/org/apache/lucene/codecs/NumericDocValuesConsumer.java
index 4d7dca2..4bef7e1 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/NumericDocValuesConsumer.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/NumericDocValuesConsumer.java
@@ -38,7 +38,7 @@ public abstract class NumericDocValuesConsumer {
       final Bits liveDocs = reader.getLiveDocs();
       NumericDocValues source = reader.getNumericDocValues(mergeState.fieldInfo.name);
       if (source == null) {
-        source = NumericDocValues.DEFAULT;
+        source = new NumericDocValues.EMPTY(maxDoc);
       }
       for (int i = 0; i < maxDoc; i++) {
         if (liveDocs == null || liveDocs.get(i)) {
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer.java b/lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer.java
index 33c29b0..3bfb0d4 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer.java
@@ -85,7 +85,7 @@ public abstract class SimpleDVConsumer implements Closeable {
       //System.out.println("merge field=" + mergeState.fieldInfo.name);
       NumericDocValues docValues = reader.getNumericDocValues(mergeState.fieldInfo.name);
       if (docValues == null) {
-        docValues = NumericDocValues.DEFAULT;
+        docValues = new NumericDocValues.EMPTY(1);
       }
       for (int i = 0; i < maxDoc; i++) {
         if (liveDocs == null || liveDocs.get(i)) {
diff --git a/lucene/core/src/java/org/apache/lucene/index/NumericDocValues.java b/lucene/core/src/java/org/apache/lucene/index/NumericDocValues.java
index e4934da..87d65b6 100644
--- a/lucene/core/src/java/org/apache/lucene/index/NumericDocValues.java
+++ b/lucene/core/src/java/org/apache/lucene/index/NumericDocValues.java
@@ -21,11 +21,36 @@ package org.apache.lucene.index;
 public abstract class NumericDocValues {
   // nocommit throws IOE or not?
   public abstract long get(int docID);
+  
+  public abstract long minValue();
+  public abstract long maxValue();
+  public abstract int size();
 
-  public static final NumericDocValues DEFAULT = new NumericDocValues() {
-      @Override
-      public long get(int docID) {
-        return 0;
-      }
-    };
+  public static final class EMPTY extends NumericDocValues {
+    private final int size;
+    
+    public EMPTY(int size) {
+      this.size = size;
+    }
+
+    @Override
+    public long get(int docID) {
+      return 0;
+    }
+
+    @Override
+    public long minValue() {
+      return 0;
+    }
+
+    @Override
+    public long maxValue() {
+      return 0;
+    }
+
+    @Override
+    public int size() {
+      return size;
+    }
+  };
 }

