GitDiffStart: 9ada967125915f1e07be445e278787a10ded05a0 | Wed Mar 3 12:07:13 2004 +0000
diff --git a/src/java/org/apache/lucene/queryParser/QueryParser.java b/src/java/org/apache/lucene/queryParser/QueryParser.java
index 0a5a87b..c66d209 100644
--- a/src/java/org/apache/lucene/queryParser/QueryParser.java
+++ b/src/java/org/apache/lucene/queryParser/QueryParser.java
@@ -76,8 +76,8 @@ public class QueryParser implements QueryParserConstants {
   Locale locale = Locale.getDefault();
 
   /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.
-   *  @param query	the query string to be parsed.
-   *  @param field	the default field for query terms.
+   *  @param query  the query string to be parsed.
+   *  @param field  the default field for query terms.
    *  @param analyzer   used to find terms in the query text.
    *  @throws ParseException if the parsing fails
    */
@@ -88,7 +88,7 @@ public class QueryParser implements QueryParserConstants {
   }
 
   /** Constructs a query parser.
-   *  @param f	the default field for query terms.
+   *  @param f  the default field for query terms.
    *  @param a   used to find terms in the query text.
    */
   public QueryParser(String f, Analyzer a) {
@@ -99,7 +99,7 @@ public class QueryParser implements QueryParserConstants {
 
   /** Parses a query string, returning a
    * <a href="lucene.search.Query.html">Query</a>.
-   *  @param query	the query string to be parsed.
+   *  @param query  the query string to be parsed.
    *  @throws ParseException if the parsing fails
    */
   public Query parse(String query) throws ParseException {
@@ -302,7 +302,7 @@ public class QueryParser implements QueryParserConstants {
   {
     BooleanQuery query = new BooleanQuery();
     for (int i = 0; i < clauses.size(); i++) {
-        query.add((BooleanClause)clauses.elementAt(i));
+  query.add((BooleanClause)clauses.elementAt(i));
     }
     return query;
   }
@@ -331,7 +331,7 @@ public class QueryParser implements QueryParserConstants {
   protected Query getWildcardQuery(String field, String termStr) throws ParseException
   {
     if (lowercaseWildcardTerms) {
-        termStr = termStr.toLowerCase();
+  termStr = termStr.toLowerCase();
     }
     Term t = new Term(field, termStr);
     return new WildcardQuery(t);
@@ -363,7 +363,7 @@ public class QueryParser implements QueryParserConstants {
   protected Query getPrefixQuery(String field, String termStr) throws ParseException
   {
     if (lowercaseWildcardTerms) {
-        termStr = termStr.toLowerCase();
+  termStr = termStr.toLowerCase();
     }
     Term t = new Term(field, termStr);
     return new PrefixQuery(t);
@@ -511,7 +511,7 @@ public class QueryParser implements QueryParserConstants {
       if (clauses.size() == 1 && firstQuery != null)
         {if (true) return firstQuery;}
       else {
-        {if (true) return getBooleanQuery(clauses);}
+  {if (true) return getBooleanQuery(clauses);}
       }
     throw new Error("Missing return statement in function");
   }
@@ -522,7 +522,7 @@ public class QueryParser implements QueryParserConstants {
     if (jj_2_1(2)) {
       fieldToken = jj_consume_token(TERM);
       jj_consume_token(COLON);
-        field=discardEscapeChar(fieldToken.image);
+      field=discardEscapeChar(fieldToken.image);
     } else {
       ;
     }
@@ -557,10 +557,10 @@ public class QueryParser implements QueryParserConstants {
     }
       if (boost != null) {
         float f = (float)1.0;
-        try {
-          f = Float.valueOf(boost.image).floatValue();
+  try {
+    f = Float.valueOf(boost.image).floatValue();
           q.setBoost(f);
-        } catch (Exception ignored) { }
+  } catch (Exception ignored) { }
       }
       {if (true) return q;}
     throw new Error("Missing return statement in function");
@@ -627,11 +627,11 @@ public class QueryParser implements QueryParserConstants {
       }
        String termImage=discardEscapeChar(term.image);
        if (wildcard) {
-             q = getWildcardQuery(field, termImage);
+       q = getWildcardQuery(field, termImage);
        } else if (prefix) {
          q = getPrefixQuery(field,
-                discardEscapeChar(term.image.substring
-                            (0, term.image.length()-1)));
+           discardEscapeChar(term.image.substring
+          (0, term.image.length()-1)));
        } else if (fuzzy) {
          q = getFuzzyQuery(field, termImage);
        } else {
@@ -685,13 +685,13 @@ public class QueryParser implements QueryParserConstants {
           if (goop1.kind == RANGEIN_QUOTED) {
             goop1.image = goop1.image.substring(1, goop1.image.length()-1);
           } else {
-                goop1.image = discardEscapeChar(goop1.image);
+            goop1.image = discardEscapeChar(goop1.image);
           }
           if (goop2.kind == RANGEIN_QUOTED) {
             goop2.image = goop2.image.substring(1, goop2.image.length()-1);
-                  } else {
-                        goop2.image = discardEscapeChar(goop2.image);
-                  }
+      } else {
+        goop2.image = discardEscapeChar(goop2.image);
+      }
           q = getRangeQuery(field, analyzer, goop1.image, goop2.image, true);
       break;
     case RANGEEX_START:
@@ -745,9 +745,9 @@ public class QueryParser implements QueryParserConstants {
           }
           if (goop2.kind == RANGEEX_QUOTED) {
             goop2.image = goop2.image.substring(1, goop2.image.length()-1);
-                  } else {
-                        goop2.image = discardEscapeChar(goop2.image);
-                  }
+      } else {
+        goop2.image = discardEscapeChar(goop2.image);
+      }
 
           q = getRangeQuery(field, analyzer, goop1.image, goop2.image, false);
       break;
@@ -791,9 +791,9 @@ public class QueryParser implements QueryParserConstants {
         f = Float.valueOf(boost.image).floatValue();
       }
       catch (Exception ignored) {
-          /* Should this be handled somehow? (defaults to "no boost", if
-	   * boost number is invalid)
-	   */
+    /* Should this be handled somehow? (defaults to "no boost", if
+     * boost number is invalid)
+     */
       }
 
       // avoid boosting null queries, such as those caused by stop words
diff --git a/src/java/org/apache/lucene/queryParser/QueryParser.jj b/src/java/org/apache/lucene/queryParser/QueryParser.jj
index bd13bc9..773b870 100644
--- a/src/java/org/apache/lucene/queryParser/QueryParser.jj
+++ b/src/java/org/apache/lucene/queryParser/QueryParser.jj
@@ -443,11 +443,11 @@ PARSER_END(QueryParser)
   <#_NUM_CHAR:   ["0"-"9"] >
 | <#_ESCAPED_CHAR: "\\" [ "\\", "+", "-", "!", "(", ")", ":", "^",
                           "[", "]", "\"", "{", "}", "~", "*", "?" ] >
-| <#_TERM_START_CHAR: ( ~[ " ", "\t", "+", "-", "!", "(", ")", ":", "^",
+| <#_TERM_START_CHAR: ( ~[ " ", "\t", "\n", "\r", "+", "-", "!", "(", ")", ":", "^",
                            "[", "]", "\"", "{", "}", "~", "*", "?" ]
                        | <_ESCAPED_CHAR> ) >
 | <#_TERM_CHAR: ( <_TERM_START_CHAR> | <_ESCAPED_CHAR> ) >
-| <#_WHITESPACE: ( " " | "\t" ) >
+| <#_WHITESPACE: ( " " | "\t" | "\n" | "\r") >
 }
 
 <DEFAULT, RangeIn, RangeEx> SKIP : {
diff --git a/src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java b/src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java
index e020dab..028e1c8 100644
--- a/src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java
+++ b/src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java
@@ -121,13 +121,13 @@ private final int jjMoveNfa_3(int startState, int curPos)
             switch(jjstateSet[--i])
             {
                case 0:
-                  if ((0x7bffd0f8fffffdffL & l) != 0L)
+                  if ((0x7bffd0f8ffffd9ffL & l) != 0L)
                   {
                      if (kind > 17)
                         kind = 17;
                      jjCheckNAddStates(0, 6);
                   }
-                  else if ((0x100000200L & l) != 0L)
+                  else if ((0x100002600L & l) != 0L)
                   {
                      if (kind > 6)
                         kind = 6;
@@ -174,14 +174,14 @@ private final int jjMoveNfa_3(int startState, int curPos)
                   jjstateSet[jjnewStateCnt++] = 18;
                   break;
                case 19:
-                  if ((0x7bffd0f8fffffdffL & l) == 0L)
+                  if ((0x7bffd0f8ffffd9ffL & l) == 0L)
                      break;
                   if (kind > 17)
                      kind = 17;
                   jjCheckNAddStates(0, 6);
                   break;
                case 20:
-                  if ((0x7bffd0f8fffffdffL & l) == 0L)
+                  if ((0x7bffd0f8ffffd9ffL & l) == 0L)
                      break;
                   if (kind > 17)
                      kind = 17;
@@ -195,7 +195,7 @@ private final int jjMoveNfa_3(int startState, int curPos)
                   jjCheckNAddTwoStates(20, 21);
                   break;
                case 23:
-                  if ((0x7bffd0f8fffffdffL & l) != 0L)
+                  if ((0x7bffd0f8ffffd9ffL & l) != 0L)
                      jjCheckNAddStates(7, 9);
                   break;
                case 24:
@@ -207,7 +207,7 @@ private final int jjMoveNfa_3(int startState, int curPos)
                      jjCheckNAddStates(7, 9);
                   break;
                case 27:
-                  if ((0xfbffd4f8fffffdffL & l) == 0L)
+                  if ((0xfbffd4f8ffffd9ffL & l) == 0L)
                      break;
                   if (kind > 21)
                      kind = 21;
@@ -501,7 +501,7 @@ private final int jjMoveNfa_1(int startState, int curPos)
                         kind = 32;
                      jjCheckNAdd(4);
                   }
-                  if ((0x100000200L & l) != 0L)
+                  if ((0x100002600L & l) != 0L)
                   {
                      if (kind > 6)
                         kind = 6;
@@ -761,7 +761,7 @@ private final int jjMoveNfa_2(int startState, int curPos)
                         kind = 28;
                      jjCheckNAdd(4);
                   }
-                  if ((0x100000200L & l) != 0L)
+                  if ((0x100002600L & l) != 0L)
                   {
                      if (kind > 6)
                         kind = 6;
diff --git a/src/test/org/apache/lucene/queryParser/TestQueryParser.java b/src/test/org/apache/lucene/queryParser/TestQueryParser.java
index f50dc64..32d83d6 100644
--- a/src/test/org/apache/lucene/queryParser/TestQueryParser.java
+++ b/src/test/org/apache/lucene/queryParser/TestQueryParser.java
@@ -371,6 +371,42 @@ public class TestQueryParser extends TestCase {
 	assertQueryEquals("[ a\\\\ TO a\\* ]", null, "[a\\ TO a*]");
   }
 
+  public void testTabNewlineCarriageReturn()
+    throws Exception {
+    assertQueryEqualsDOA("+weltbank +worlbank", null,
+      "+weltbank +worlbank");
+
+    assertQueryEqualsDOA("+weltbank\n+worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \n+worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \n +worlbank", null,
+      "+weltbank +worlbank");
+
+    assertQueryEqualsDOA("+weltbank\r+worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \r+worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \r +worlbank", null,
+      "+weltbank +worlbank");
+
+    assertQueryEqualsDOA("+weltbank\r\n+worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \r\n+worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \r\n +worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \r \n +worlbank", null,
+      "+weltbank +worlbank");
+
+    assertQueryEqualsDOA("+weltbank\t+worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \t+worlbank", null,
+      "+weltbank +worlbank");
+    assertQueryEqualsDOA("weltbank \t +worlbank", null,
+      "+weltbank +worlbank");
+  }
+
   public void testSimpleDAO()
     throws Exception {
     assertQueryEqualsDOA("term term term", null, "+term +term +term");

