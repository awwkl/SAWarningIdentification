GitDiffStart: dc66518401e937538c4c545d1d4b608a87d3ee37 | Thu Oct 29 19:51:37 2015 +0000
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader.java b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader.java
index dab008a..e58b9ac 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader.java
@@ -173,4 +173,9 @@ class SimpleTextDimensionalReader extends DimensionalReader {
   public void close() throws IOException {
     dataIn.close();
   }
+
+  @Override
+  public String toString() {
+    return "SimpleTextDimensionalReader(segment=" + readState.segmentInfo.name + " maxDoc=" + readState.segmentInfo.maxDoc() + ")";
+  }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/index/MultiDimensionalValues.java b/lucene/core/src/java/org/apache/lucene/index/MultiDimensionalValues.java
index 875d67d..7467207 100644
--- a/lucene/core/src/java/org/apache/lucene/index/MultiDimensionalValues.java
+++ b/lucene/core/src/java/org/apache/lucene/index/MultiDimensionalValues.java
@@ -40,7 +40,6 @@ class MultiDimensionalValues extends DimensionalValues {
       return leaves.get(0).reader().getDimensionalValues();
     }
 
-    boolean anyReal = false;
     List<DimensionalValues> values = new ArrayList<>();
     List<Integer> docBases = new ArrayList<>();
     for (int i = 0; i < size; i++) {
@@ -76,4 +75,20 @@ class MultiDimensionalValues extends DimensionalValues {
                         });
     }
   }
+
+  @Override
+  public String toString() {
+    StringBuilder b = new StringBuilder();
+    b.append("MultiDimensionalValues(");
+    for(int i=0;i<subs.size();i++) {
+      if (i > 0) {
+        b.append(", ");
+      }
+      b.append("docBase=");
+      b.append(docBases.get(i));
+      b.append(" sub=" + subs.get(i));
+    }
+    b.append(')');
+    return b.toString();
+  }
 }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues.java b/lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues.java
index 95fb075..8cfe5f7 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues.java
@@ -929,7 +929,7 @@ public class TestDimensionalValues extends LuceneTestCase {
               }
               //System.out.println("visit check docID=" + docID);
               for(int dim=0;dim<numDims;dim++) {
-                //System.out.println("  dim=" + dim + " value=" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim));
+                //System.out.println("  dim=" + dim + " value=" + new BytesRef(packedValue, dim*numBytesPerDim, numBytesPerDim));
                 if (BKDUtil.compare(numBytesPerDim, packedValue, dim, queryMin[dim], 0) < 0 ||
                     BKDUtil.compare(numBytesPerDim, packedValue, dim, queryMax[dim], 0) > 0) {
                   //System.out.println("  no");
@@ -990,8 +990,23 @@ public class TestDimensionalValues extends LuceneTestCase {
         }
 
         int limit = Math.max(expected.length(), hits.length());
+        int failCount = 0;
+        int successCount = 0;
         for(int id=0;id<limit;id++) {
-          assertEquals("docID=" + id, expected.get(id), hits.get(id));
+          if (expected.get(id) != hits.get(id)) {
+            System.out.println("FAIL: id=" + id);
+            failCount++;
+          } else {
+            successCount++;
+          }
+        }
+
+        if (failCount != 0) {
+          for(int docID=0;docID<r.maxDoc();docID++) {
+            System.out.println("  docID=" + docID + " id=" + idValues.get(docID));
+          }
+
+          fail(failCount + " docs failed; " + successCount + " docs succeeded");
         }
       }
     } finally {
diff --git a/lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader.java b/lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader.java
index 2d20ec8..e577f2d 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader.java
@@ -67,7 +67,8 @@ public class MismatchedLeafReader extends FilterLeafReader {
                                         oldInfo.getDocValuesType(),  // docValuesType
                                         oldInfo.getDocValuesGen(),   // dvGen
                                         oldInfo.attributes(),        // attributes
-                                        0, 0);                       // dimensional count,numBytes
+                                        oldInfo.getDimensionCount(),
+                                        oldInfo.getDimensionNumBytes());
       shuffled.set(i, newInfo);
     }
     
diff --git a/lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy.java b/lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy.java
index efacf74..66c5d11 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy.java
@@ -25,6 +25,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Random;
 
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
 
 /**
@@ -156,12 +157,18 @@ public class MockRandomMergePolicy extends MergePolicy {
           int thingToDo = r.nextInt(7);
           if (thingToDo == 0) {
             // simple no-op FilterReader
+            if (LuceneTestCase.VERBOSE) {
+              System.out.println("NOTE: MockRandomMergePolicy now swaps in a SlowCodecReaderWrapper for merging reader=" + readers.get(i));
+            }
             readers.set(i, SlowCodecReaderWrapper.wrap(new FilterLeafReader(readers.get(i))));
           } else if (thingToDo == 1) {
             // renumber fields
             // NOTE: currently this only "blocks" bulk merges just by
             // being a FilterReader. But it might find bugs elsewhere, 
             // and maybe the situation can be improved in the future.
+            if (LuceneTestCase.VERBOSE) {
+              System.out.println("NOTE: MockRandomMergePolicy now swaps in a MismatchedLeafReader for merging reader=" + readers.get(i));
+            }
             readers.set(i, SlowCodecReaderWrapper.wrap(new MismatchedLeafReader(readers.get(i), r)));
           }
           // otherwise, reader is unchanged

