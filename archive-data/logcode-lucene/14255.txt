GitDiffStart: 701000cf27bb1cea6e023645be20b757f331712f | Mon Dec 12 20:33:26 2011 +0000
diff --git a/modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.java b/modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.java
index 6acc90c..cfe7d2a 100644
--- a/modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.java
+++ b/modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.java
@@ -18,7 +18,7 @@ package org.apache.lucene.search.grouping.function;
  */
 
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.search.FieldComparator;
 import org.apache.lucene.search.Scorer;
@@ -45,7 +45,7 @@ public class FunctionAllGroupHeadsCollector extends AbstractAllGroupHeadsCollect
   private final Map<MutableValue, GroupHead> groups;
   private final Sort sortWithinGroup;
 
-  private DocValues.ValueFiller filler;
+  private FunctionValues.ValueFiller filler;
   private MutableValue mval;
   private IndexReader.AtomicReaderContext readerContext;
   private Scorer scorer;
@@ -105,7 +105,7 @@ public class FunctionAllGroupHeadsCollector extends AbstractAllGroupHeadsCollect
 
   public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {
     this.readerContext = context;
-    DocValues docValues = groupBy.getValues(vsContext, context);
+    FunctionValues docValues = groupBy.getValues(vsContext, context);
     filler = docValues.getValueFiller();
     mval = filler.getValue();
 
diff --git a/modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector.java b/modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector.java
index f17aba3..e046ad0 100644
--- a/modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector.java
+++ b/modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector.java
@@ -18,7 +18,7 @@ package org.apache.lucene.search.grouping.function;
  */
 
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.search.grouping.AbstractAllGroupsCollector;
 import org.apache.lucene.util.mutable.MutableValue;
@@ -36,7 +36,7 @@ import java.util.TreeSet;
  * the most relevant document of a group.
  *
  * <p/>
- * Implementation detail: Uses {@link ValueSource} and {@link DocValues} to retrieve the
+ * Implementation detail: Uses {@link ValueSource} and {@link FunctionValues} to retrieve the
  * field values to group by.
  *
  * @lucene.experimental
@@ -47,7 +47,7 @@ public class FunctionAllGroupsCollector extends AbstractAllGroupsCollector<Mutab
   private final ValueSource groupBy;
   private final SortedSet<MutableValue> groups = new TreeSet<MutableValue>();
 
-  private DocValues.ValueFiller filler;
+  private FunctionValues.ValueFiller filler;
   private MutableValue mval;
 
   /**
@@ -79,7 +79,7 @@ public class FunctionAllGroupsCollector extends AbstractAllGroupsCollector<Mutab
    * {@inheritDoc}
    */
   public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {
-    DocValues docValues = groupBy.getValues(vsContext, context);
+    FunctionValues docValues = groupBy.getValues(vsContext, context);
     filler = docValues.getValueFiller();
     mval = filler.getValue();
   }
diff --git a/modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector.java b/modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector.java
index 4ece622..017d70e 100644
--- a/modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector.java
+++ b/modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector.java
@@ -18,7 +18,7 @@ package org.apache.lucene.search.grouping.function;
  */
 
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector;
@@ -38,8 +38,8 @@ public class FunctionFirstPassGroupingCollector extends AbstractFirstPassGroupin
   private final ValueSource groupByVS;
   private final Map vsContext;
 
-  private DocValues docValues;
-  private DocValues.ValueFiller filler;
+  private FunctionValues docValues;
+  private FunctionValues.ValueFiller filler;
   private MutableValue mval;
 
   /**
diff --git a/modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector.java b/modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector.java
index a546470..136e6e4 100644
--- a/modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector.java
+++ b/modules/grouping/src/java/org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector.java
@@ -18,7 +18,7 @@ package org.apache.lucene.search.grouping.function;
  */
 
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector;
@@ -41,7 +41,7 @@ public class FunctionSecondPassGroupingCollector extends AbstractSecondPassGroup
   private final ValueSource groupByVS;
   private final Map vsContext;
 
-  private DocValues.ValueFiller filler;
+  private FunctionValues.ValueFiller filler;
   private MutableValue mval;
 
   /**
@@ -77,7 +77,7 @@ public class FunctionSecondPassGroupingCollector extends AbstractSecondPassGroup
    */
   public void setNextReader(IndexReader.AtomicReaderContext readerContext) throws IOException {
     super.setNextReader(readerContext);
-    DocValues docValues = groupByVS.getValues(vsContext, readerContext);
+    FunctionValues docValues = groupByVS.getValues(vsContext, readerContext);
     filler = docValues.getValueFiller();
     mval = filler.getValue();
   }
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.java b/modules/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.java
index e43e35e..0c0427e 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.java
@@ -108,7 +108,7 @@ public class BoostedQuery extends Query {
       if (!subQueryExpl.isMatch()) {
         return subQueryExpl;
       }
-      DocValues vals = boostVal.getValues(fcontext, readerContext);
+      FunctionValues vals = boostVal.getValues(fcontext, readerContext);
       float sc = subQueryExpl.getValue() * vals.floatVal(doc);
       Explanation res = new ComplexExplanation(
         true, sc, BoostedQuery.this.toString() + ", product of:");
@@ -123,7 +123,7 @@ public class BoostedQuery extends Query {
     private final BoostedQuery.BoostedWeight weight;
     private final float qWeight;
     private final Scorer scorer;
-    private final DocValues vals;
+    private final FunctionValues vals;
     private final AtomicReaderContext readerContext;
 
     private CustomScorer(AtomicReaderContext readerContext, BoostedQuery.BoostedWeight w, float qWeight,
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/DocValues.java b/modules/queries/src/java/org/apache/lucene/queries/function/DocValues.java
deleted file mode 100644
index f9eedaa..0000000
--- a/modules/queries/src/java/org/apache/lucene/queries/function/DocValues.java
+++ /dev/null
@@ -1,198 +0,0 @@
-package org.apache.lucene.queries.function;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import org.apache.lucene.search.*;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.util.mutable.MutableValue;
-import org.apache.lucene.util.mutable.MutableValueFloat;
-
-/**
- * Represents field values as different types.
- * Normally created via a {@link ValueSource} for a particular field and reader.
- *
- *
- */
-
-// DocValues is distinct from ValueSource because
-// there needs to be an object created at query evaluation time that
-// is not referenced by the query itself because:
-// - Query objects should be MT safe
-// - For caching, Query objects are often used as keys... you don't
-//   want the Query carrying around big objects
-public abstract class DocValues {
-
-  public byte byteVal(int doc) { throw new UnsupportedOperationException(); }
-  public short shortVal(int doc) { throw new UnsupportedOperationException(); }
-
-  public float floatVal(int doc) { throw new UnsupportedOperationException(); }
-  public int intVal(int doc) { throw new UnsupportedOperationException(); }
-  public long longVal(int doc) { throw new UnsupportedOperationException(); }
-  public double doubleVal(int doc) { throw new UnsupportedOperationException(); }
-  // TODO: should we make a termVal, returns BytesRef?
-  public String strVal(int doc) { throw new UnsupportedOperationException(); }
-
-  public boolean boolVal(int doc) {
-    return intVal(doc) != 0;
-  }
-
-  /** returns the bytes representation of the string val - TODO: should this return the indexed raw bytes not? */
-  public boolean bytesVal(int doc, BytesRef target) {
-    String s = strVal(doc);
-    if (s==null) {
-      target.length = 0;
-      return false;
-    }
-    target.copyChars(s);
-    return true;
-  };
-
-  /** Native Java Object representation of the value */
-  public Object objectVal(int doc) {
-    // most DocValues are functions, so by default return a Float()
-    return floatVal(doc);
-  }
-
-  /** Returns true if there is a value for this document */
-  public boolean exists(int doc) {
-    return true;
-  }
-
-  /**
-   * @param doc The doc to retrieve to sort ordinal for
-   * @return the sort ordinal for the specified doc
-   * TODO: Maybe we can just use intVal for this...
-   */
-  public int ordVal(int doc) { throw new UnsupportedOperationException(); }
-
-  /**
-   * @return the number of unique sort ordinals this instance has
-   */
-  public int numOrd() { throw new UnsupportedOperationException(); }
-  public abstract String toString(int doc);
-
-  /** @lucene.experimental  */
-  public static abstract class ValueFiller {
-    /** MutableValue will be reused across calls */
-    public abstract MutableValue getValue();
-
-    /** MutableValue will be reused across calls.  Returns true if the value exists. */
-    public abstract void fillValue(int doc);
-  }
-
-  /** @lucene.experimental  */
-  public ValueFiller getValueFiller() {
-    return new ValueFiller() {
-      private final MutableValueFloat mval = new MutableValueFloat();
-
-      @Override
-      public MutableValue getValue() {
-        return mval;
-      }
-
-      @Override
-      public void fillValue(int doc) {
-        mval.value = floatVal(doc);
-      }
-    };
-  }
-
-  //For Functions that can work with multiple values from the same document.  This does not apply to all functions
-  public void byteVal(int doc, byte [] vals) { throw new UnsupportedOperationException(); }
-  public void shortVal(int doc, short [] vals) { throw new UnsupportedOperationException(); }
-
-  public void floatVal(int doc, float [] vals) { throw new UnsupportedOperationException(); }
-  public void intVal(int doc, int [] vals) { throw new UnsupportedOperationException(); }
-  public void longVal(int doc, long [] vals) { throw new UnsupportedOperationException(); }
-  public void doubleVal(int doc, double [] vals) { throw new UnsupportedOperationException(); }
-
-  // TODO: should we make a termVal, fills BytesRef[]?
-  public void strVal(int doc, String [] vals) { throw new UnsupportedOperationException(); }
-
-  public Explanation explain(int doc) {
-    return new Explanation(floatVal(doc), toString(doc));
-  }
-
-  public ValueSourceScorer getScorer(IndexReader reader) {
-    return new ValueSourceScorer(reader, this);
-  }
-
-  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource
-  // because it needs different behavior depending on the type of fields.  There is also
-  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.
-  // TODO: change "reader" to AtomicReaderContext
-  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {
-    float lower;
-    float upper;
-
-    if (lowerVal == null) {
-      lower = Float.NEGATIVE_INFINITY;
-    } else {
-      lower = Float.parseFloat(lowerVal);
-    }
-    if (upperVal == null) {
-      upper = Float.POSITIVE_INFINITY;
-    } else {
-      upper = Float.parseFloat(upperVal);
-    }
-
-    final float l = lower;
-    final float u = upper;
-
-    if (includeLower && includeUpper) {
-      return new ValueSourceScorer(reader, this) {
-        @Override
-        public boolean matchesValue(int doc) {
-          float docVal = floatVal(doc);
-          return docVal >= l && docVal <= u;
-        }
-      };
-    }
-    else if (includeLower && !includeUpper) {
-       return new ValueSourceScorer(reader, this) {
-        @Override
-        public boolean matchesValue(int doc) {
-          float docVal = floatVal(doc);
-          return docVal >= l && docVal < u;
-        }
-      };
-    }
-    else if (!includeLower && includeUpper) {
-       return new ValueSourceScorer(reader, this) {
-        @Override
-        public boolean matchesValue(int doc) {
-          float docVal = floatVal(doc);
-          return docVal > l && docVal <= u;
-        }
-      };
-    }
-    else {
-       return new ValueSourceScorer(reader, this) {
-        @Override
-        public boolean matchesValue(int doc) {
-          float docVal = floatVal(doc);
-          return docVal > l && docVal < u;
-        }
-      };
-    }
-  }
-}
-
-
-
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java b/modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java
index 8ab3a56..c1b01c0 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java
@@ -106,7 +106,7 @@ public class FunctionQuery extends Query {
     final int maxDoc;
     final float qWeight;
     int doc=-1;
-    final DocValues vals;
+    final FunctionValues vals;
     final Bits liveDocs;
 
     public AllScorer(AtomicReaderContext context, Bits acceptDocs, FunctionWeight w, float qWeight) throws IOException {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java b/modules/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java
new file mode 100644
index 0000000..d0866d5
--- /dev/null
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java
@@ -0,0 +1,198 @@
+package org.apache.lucene.queries.function;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.search.*;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.mutable.MutableValue;
+import org.apache.lucene.util.mutable.MutableValueFloat;
+
+/**
+ * Represents field values as different types.
+ * Normally created via a {@link ValueSource} for a particular field and reader.
+ *
+ *
+ */
+
+// FunctionValues is distinct from ValueSource because
+// there needs to be an object created at query evaluation time that
+// is not referenced by the query itself because:
+// - Query objects should be MT safe
+// - For caching, Query objects are often used as keys... you don't
+//   want the Query carrying around big objects
+public abstract class FunctionValues {
+
+  public byte byteVal(int doc) { throw new UnsupportedOperationException(); }
+  public short shortVal(int doc) { throw new UnsupportedOperationException(); }
+
+  public float floatVal(int doc) { throw new UnsupportedOperationException(); }
+  public int intVal(int doc) { throw new UnsupportedOperationException(); }
+  public long longVal(int doc) { throw new UnsupportedOperationException(); }
+  public double doubleVal(int doc) { throw new UnsupportedOperationException(); }
+  // TODO: should we make a termVal, returns BytesRef?
+  public String strVal(int doc) { throw new UnsupportedOperationException(); }
+
+  public boolean boolVal(int doc) {
+    return intVal(doc) != 0;
+  }
+
+  /** returns the bytes representation of the string val - TODO: should this return the indexed raw bytes not? */
+  public boolean bytesVal(int doc, BytesRef target) {
+    String s = strVal(doc);
+    if (s==null) {
+      target.length = 0;
+      return false;
+    }
+    target.copyChars(s);
+    return true;
+  };
+
+  /** Native Java Object representation of the value */
+  public Object objectVal(int doc) {
+    // most FunctionValues are functions, so by default return a Float()
+    return floatVal(doc);
+  }
+
+  /** Returns true if there is a value for this document */
+  public boolean exists(int doc) {
+    return true;
+  }
+
+  /**
+   * @param doc The doc to retrieve to sort ordinal for
+   * @return the sort ordinal for the specified doc
+   * TODO: Maybe we can just use intVal for this...
+   */
+  public int ordVal(int doc) { throw new UnsupportedOperationException(); }
+
+  /**
+   * @return the number of unique sort ordinals this instance has
+   */
+  public int numOrd() { throw new UnsupportedOperationException(); }
+  public abstract String toString(int doc);
+
+  /** @lucene.experimental  */
+  public static abstract class ValueFiller {
+    /** MutableValue will be reused across calls */
+    public abstract MutableValue getValue();
+
+    /** MutableValue will be reused across calls.  Returns true if the value exists. */
+    public abstract void fillValue(int doc);
+  }
+
+  /** @lucene.experimental  */
+  public ValueFiller getValueFiller() {
+    return new ValueFiller() {
+      private final MutableValueFloat mval = new MutableValueFloat();
+
+      @Override
+      public MutableValue getValue() {
+        return mval;
+      }
+
+      @Override
+      public void fillValue(int doc) {
+        mval.value = floatVal(doc);
+      }
+    };
+  }
+
+  //For Functions that can work with multiple values from the same document.  This does not apply to all functions
+  public void byteVal(int doc, byte [] vals) { throw new UnsupportedOperationException(); }
+  public void shortVal(int doc, short [] vals) { throw new UnsupportedOperationException(); }
+
+  public void floatVal(int doc, float [] vals) { throw new UnsupportedOperationException(); }
+  public void intVal(int doc, int [] vals) { throw new UnsupportedOperationException(); }
+  public void longVal(int doc, long [] vals) { throw new UnsupportedOperationException(); }
+  public void doubleVal(int doc, double [] vals) { throw new UnsupportedOperationException(); }
+
+  // TODO: should we make a termVal, fills BytesRef[]?
+  public void strVal(int doc, String [] vals) { throw new UnsupportedOperationException(); }
+
+  public Explanation explain(int doc) {
+    return new Explanation(floatVal(doc), toString(doc));
+  }
+
+  public ValueSourceScorer getScorer(IndexReader reader) {
+    return new ValueSourceScorer(reader, this);
+  }
+
+  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource
+  // because it needs different behavior depending on the type of fields.  There is also
+  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.
+  // TODO: change "reader" to AtomicReaderContext
+  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {
+    float lower;
+    float upper;
+
+    if (lowerVal == null) {
+      lower = Float.NEGATIVE_INFINITY;
+    } else {
+      lower = Float.parseFloat(lowerVal);
+    }
+    if (upperVal == null) {
+      upper = Float.POSITIVE_INFINITY;
+    } else {
+      upper = Float.parseFloat(upperVal);
+    }
+
+    final float l = lower;
+    final float u = upper;
+
+    if (includeLower && includeUpper) {
+      return new ValueSourceScorer(reader, this) {
+        @Override
+        public boolean matchesValue(int doc) {
+          float docVal = floatVal(doc);
+          return docVal >= l && docVal <= u;
+        }
+      };
+    }
+    else if (includeLower && !includeUpper) {
+       return new ValueSourceScorer(reader, this) {
+        @Override
+        public boolean matchesValue(int doc) {
+          float docVal = floatVal(doc);
+          return docVal >= l && docVal < u;
+        }
+      };
+    }
+    else if (!includeLower && includeUpper) {
+       return new ValueSourceScorer(reader, this) {
+        @Override
+        public boolean matchesValue(int doc) {
+          float docVal = floatVal(doc);
+          return docVal > l && docVal <= u;
+        }
+      };
+    }
+    else {
+       return new ValueSourceScorer(reader, this) {
+        @Override
+        public boolean matchesValue(int doc) {
+          float docVal = floatVal(doc);
+          return docVal > l && docVal < u;
+        }
+      };
+    }
+  }
+}
+
+
+
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/ValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/ValueSource.java
index ee108ad..42473bc 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/ValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/ValueSource.java
@@ -33,7 +33,7 @@ import java.util.IdentityHashMap;
 import java.util.Map;
 
 /**
- * Instantiates {@link DocValues} for a particular reader.
+ * Instantiates {@link FunctionValues} for a particular reader.
  * <br>
  * Often used when creating a {@link FunctionQuery}.
  *
@@ -45,7 +45,7 @@ public abstract class ValueSource implements Serializable {
    * Gets the values for this reader and the context that was previously
    * passed to createWeight()
    */
-  public abstract DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException;
+  public abstract FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException;
 
   @Override
   public abstract boolean equals(Object o);
@@ -129,12 +129,12 @@ public abstract class ValueSource implements Serializable {
 
   /**
    * Implement a {@link org.apache.lucene.search.FieldComparator} that works
-   * off of the {@link DocValues} for a ValueSource
+   * off of the {@link FunctionValues} for a ValueSource
    * instead of the normal Lucene FieldComparator that works off of a FieldCache.
    */
   class ValueSourceComparator extends FieldComparator<Double> {
     private final double[] values;
-    private DocValues docVals;
+    private FunctionValues docVals;
     private double bottom;
     private Map fcontext;
 
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java b/modules/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java
index a856d9f..975bd4b 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java
@@ -28,11 +28,11 @@ public class ValueSourceScorer extends Scorer {
   protected IndexReader reader;
   private int doc = -1;
   protected final int maxDoc;
-  protected final DocValues values;
+  protected final FunctionValues values;
   protected boolean checkDeletes;
   private final Bits liveDocs;
 
-  protected ValueSourceScorer(IndexReader reader, DocValues values) {
+  protected ValueSourceScorer(IndexReader reader, FunctionValues values) {
     super(null);
     this.reader = reader;
     this.maxDoc = reader.maxDoc();
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/BoolDocValues.java b/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/BoolDocValues.java
index 8244a8a..e290ddc 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/BoolDocValues.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/BoolDocValues.java
@@ -1,12 +1,12 @@
 package org.apache.lucene.queries.function.docvalues;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueBool;
 
 
-public abstract class BoolDocValues extends DocValues {
+public abstract class BoolDocValues extends FunctionValues {
   protected final ValueSource vs;
 
   public BoolDocValues(ValueSource vs) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues.java b/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues.java
index c09e022..069ba11 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues.java
@@ -1,11 +1,11 @@
 package org.apache.lucene.queries.function.docvalues;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueDouble;
 
-public abstract class DoubleDocValues extends DocValues {
+public abstract class DoubleDocValues extends FunctionValues {
   protected final ValueSource vs;
 
   public DoubleDocValues(ValueSource vs) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/FloatDocValues.java b/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/FloatDocValues.java
index 368a45a..eb4daeb 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/FloatDocValues.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/FloatDocValues.java
@@ -1,11 +1,11 @@
 package org.apache.lucene.queries.function.docvalues;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueFloat;
 
-public abstract class FloatDocValues extends DocValues {
+public abstract class FloatDocValues extends FunctionValues {
   protected final ValueSource vs;
 
   public FloatDocValues(ValueSource vs) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/IntDocValues.java b/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/IntDocValues.java
index fa6c455..9dd50f4 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/IntDocValues.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/IntDocValues.java
@@ -1,12 +1,12 @@
 package org.apache.lucene.queries.function.docvalues;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueInt;
 
 
-public abstract class IntDocValues extends DocValues {
+public abstract class IntDocValues extends FunctionValues {
   protected final ValueSource vs;
 
   public IntDocValues(ValueSource vs) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues.java b/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues.java
index da4934c..1767d4e 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/LongDocValues.java
@@ -1,12 +1,12 @@
 package org.apache.lucene.queries.function.docvalues;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueLong;
 
 
-public abstract class LongDocValues extends DocValues {
+public abstract class LongDocValues extends FunctionValues {
   protected final ValueSource vs;
 
   public LongDocValues(ValueSource vs) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/StrDocValues.java b/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/StrDocValues.java
index b3da187..305c651 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/StrDocValues.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/StrDocValues.java
@@ -1,11 +1,11 @@
 package org.apache.lucene.queries.function.docvalues;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.util.mutable.MutableValue;
 import org.apache.lucene.util.mutable.MutableValueStr;
 
-public abstract class StrDocValues extends DocValues {
+public abstract class StrDocValues extends FunctionValues {
   protected final ValueSource vs;
 
   public StrDocValues(ValueSource vs) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/StringIndexDocValues.java b/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/StringIndexDocValues.java
index 7e0bf92..58b049b 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/StringIndexDocValues.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/docvalues/StringIndexDocValues.java
@@ -17,7 +17,7 @@
 
 package org.apache.lucene.queries.function.docvalues;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.ValueSourceScorer;
 import org.apache.lucene.search.FieldCache;
@@ -32,9 +32,9 @@ import org.apache.lucene.util.mutable.MutableValueStr;
 import java.io.IOException;
 
 /** Internal class, subject to change.
- *  Serves as base class for DocValues based on StringIndex 
+ *  Serves as base class for FunctionValues based on StringIndex 
  **/
-public abstract class StringIndexDocValues extends DocValues {
+public abstract class StringIndexDocValues extends FunctionValues {
   protected final FieldCache.DocTermsIndex termsIndex;
   protected final ValueSource vs;
   protected final MutableValueStr val = new MutableValueStr();
@@ -158,7 +158,7 @@ public abstract class StringIndexDocValues extends DocValues {
     public StringIndexException(final String fieldName,
                                 final RuntimeException cause) {
       super("Can't initialize StringIndex to generate (function) " +
-              "DocValues for field: " + fieldName, cause);
+              "FunctionValues for field: " + fieldName, cause);
     }
   }
 
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ByteFieldSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ByteFieldSource.java
index 0e2e392..2a38693 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ByteFieldSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ByteFieldSource.java
@@ -20,7 +20,7 @@ import java.io.IOException;
 import java.util.Map;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.search.FieldCache;
 
 /**
@@ -50,10 +50,10 @@ public class ByteFieldSource extends FieldCacheSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final byte[] arr = cache.getBytes(readerContext.reader, field, parser, false);
     
-    return new DocValues() {
+    return new FunctionValues() {
       @Override
       public byte byteVal(int doc) {
         return arr[doc];
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.java
index 920ac1e..1e94b78 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.java
@@ -18,7 +18,7 @@ package org.apache.lucene.queries.function.valuesource;
  */
 
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.docvalues.StringIndexDocValues;
 import org.apache.lucene.queries.function.ValueSource; //javadoc
 
@@ -26,7 +26,7 @@ import java.io.IOException;
 import java.util.Map;
 
 /**
- * An implementation for retrieving {@link DocValues} instances for string based fields.
+ * An implementation for retrieving {@link FunctionValues} instances for string based fields.
  */
 public class BytesRefFieldSource extends FieldCacheSource {
 
@@ -35,7 +35,7 @@ public class BytesRefFieldSource extends FieldCacheSource {
   }
 
   @Override
-  public DocValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {
     return new StringIndexDocValues(this, readerContext, field) {
 
       @Override
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ConstValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ConstValueSource.java
index 8694695..4631a9a 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ConstValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ConstValueSource.java
@@ -18,7 +18,7 @@
 package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.docvalues.FloatDocValues;
 
 import java.io.IOException;
@@ -42,7 +42,7 @@ public class ConstValueSource extends ConstNumberSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     return new FloatDocValues(this) {
       @Override
       public float floatVal(int doc) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction.java
index 1b133a1..aa1cfe3 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DefFunction.java
@@ -17,7 +17,7 @@ package org.apache.lucene.queries.function.valuesource;
  */
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.util.BytesRef;
@@ -39,15 +39,15 @@ public class DefFunction extends MultiFunction {
 
 
   @Override
-  public DocValues getValues(Map fcontext, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map fcontext, AtomicReaderContext readerContext) throws IOException {
 
 
     return new Values(valsArr(sources, fcontext, readerContext)) {
       final int upto = valsArr.length - 1;
 
-      private DocValues get(int doc) {
+      private FunctionValues get(int doc) {
         for (int i=0; i<upto; i++) {
-          DocValues vals = valsArr[i];
+          FunctionValues vals = valsArr[i];
           if (vals.exists(doc)) {
             return vals;
           }
@@ -108,7 +108,7 @@ public class DefFunction extends MultiFunction {
       @Override
       public boolean exists(int doc) {
         // return true if any source is exists?
-        for (DocValues vals : valsArr) {
+        for (FunctionValues vals : valsArr) {
           if (vals.exists(doc)) {
             return true;
           }
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DivFloatFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DivFloatFunction.java
index 23e4fe9..6ef2d5f 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DivFloatFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DivFloatFunction.java
@@ -17,7 +17,7 @@
 
 package org.apache.lucene.queries.function.valuesource;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 
 /** Function to divide "a" by "b"
@@ -37,7 +37,7 @@ public class DivFloatFunction extends DualFloatFunction {
   }
 
   @Override
-  protected float func(int doc, DocValues aVals, DocValues bVals) {
+  protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {
     return aVals.floatVal(doc) / bVals.floatVal(doc);
   }
 }
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java
index f0c03e0..67d1ca3 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java
@@ -19,7 +19,7 @@ package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.DoubleDocValues;
 import org.apache.lucene.queries.function.docvalues.IntDocValues;
@@ -146,7 +146,7 @@ public class DocFreqValueSource extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     IndexSearcher searcher = (IndexSearcher)context.get("searcher");
     int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));
     return new ConstIntDocValues(docfreq, this);
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.java
index 35f3362..3bb3724 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.java
@@ -18,7 +18,7 @@
 package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.docvalues.DoubleDocValues;
 
 import java.io.IOException;
@@ -41,7 +41,7 @@ public class DoubleConstValueSource extends ConstNumberSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     return new DoubleDocValues(this) {
       @Override
       public float floatVal(int doc) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource.java
index fd8826e..dd95f6f 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DoubleFieldSource.java
@@ -22,7 +22,7 @@ import java.util.Map;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSourceScorer;
 import org.apache.lucene.queries.function.docvalues.DoubleDocValues;
 import org.apache.lucene.search.FieldCache;
@@ -56,7 +56,7 @@ public class DoubleFieldSource extends FieldCacheSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final double[] arr = cache.getDoubles(readerContext.reader, field, parser, true);
     final Bits valid = cache.getDocsWithField(readerContext.reader, field);
     return new DoubleDocValues(this) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DualFloatFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DualFloatFunction.java
index 3d2f12c..2b6a435 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DualFloatFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DualFloatFunction.java
@@ -18,7 +18,7 @@
 package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.FloatDocValues;
 import org.apache.lucene.search.IndexSearcher;
@@ -40,7 +40,7 @@ public abstract class DualFloatFunction extends ValueSource {
   }
 
   protected abstract String name();
-  protected abstract float func(int doc, DocValues aVals, DocValues bVals);
+  protected abstract float func(int doc, FunctionValues aVals, FunctionValues bVals);
 
   @Override
   public String description() {
@@ -48,9 +48,9 @@ public abstract class DualFloatFunction extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    final DocValues aVals =  a.getValues(context, readerContext);
-    final DocValues bVals =  b.getValues(context, readerContext);
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+    final FunctionValues aVals =  a.getValues(context, readerContext);
+    final FunctionValues bVals =  b.getValues(context, readerContext);
     return new FloatDocValues(this) {
       @Override
       public float floatVal(int doc) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource.java
index f43a7d2..c4cefe3 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource.java
@@ -21,7 +21,7 @@ import java.io.IOException;
 import java.util.Map;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.docvalues.FloatDocValues;
 import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.util.Bits;
@@ -54,7 +54,7 @@ public class FloatFieldSource extends FieldCacheSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final float[] arr = cache.getFloats(readerContext.reader, field, parser, true);
     final Bits valid = cache.getDocsWithField(readerContext.reader, field);
 
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java
index 850c844..c9ff4cd 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java
@@ -19,7 +19,7 @@ package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.*;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.search.similarities.TFIDFSimilarity;
@@ -40,7 +40,7 @@ public class IDFValueSource extends DocFreqValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     IndexSearcher searcher = (IndexSearcher)context.get("searcher");
     Similarity sim = searcher.getSimilarityProvider().get(field);
     if (!(sim instanceof TFIDFSimilarity)) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction.java
index ee47a69..5d60dd1 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction.java
@@ -19,7 +19,7 @@ package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.IndexSearcher;
@@ -43,12 +43,12 @@ public class IfFunction extends BoolFunction {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    final DocValues ifVals = ifSource.getValues(context, readerContext);
-    final DocValues trueVals = trueSource.getValues(context, readerContext);
-    final DocValues falseVals = falseSource.getValues(context, readerContext);
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+    final FunctionValues ifVals = ifSource.getValues(context, readerContext);
+    final FunctionValues trueVals = trueSource.getValues(context, readerContext);
+    final FunctionValues falseVals = falseSource.getValues(context, readerContext);
 
-    return new DocValues() {
+    return new FunctionValues() {
       @Override
       public byte byteVal(int doc) {
         return ifVals.boolVal(doc) ? trueVals.byteVal(doc) : falseVals.byteVal(doc);
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java
index ea54740..9ca9747 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource.java
@@ -22,7 +22,7 @@ import java.util.Map;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSourceScorer;
 import org.apache.lucene.queries.function.docvalues.IntDocValues;
 import org.apache.lucene.search.FieldCache;
@@ -56,7 +56,7 @@ public class IntFieldSource extends FieldCacheSource {
 
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final int[] arr = cache.getInts(readerContext.reader, field, parser, true);
     final Bits valid = cache.getDocsWithField(readerContext.reader, field);
     
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource.java
index 8cd7754..8d6ff34 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource.java
@@ -22,7 +22,7 @@ import java.util.Map;
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.docvalues.IntDocValues;
 import org.apache.lucene.search.FieldCache.DocTerms;
 import org.apache.lucene.util.BytesRef;
@@ -50,7 +50,7 @@ public class JoinDocFreqValueSource extends FieldCacheSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException
   {
     final DocTerms terms = cache.getTerms(readerContext.reader, field, true );
     final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/LinearFloatFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/LinearFloatFunction.java
index 01edb26..5826ea9 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/LinearFloatFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/LinearFloatFunction.java
@@ -18,7 +18,7 @@
 package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.FloatDocValues;
 import org.apache.lucene.search.IndexSearcher;
@@ -51,8 +51,8 @@ public class LinearFloatFunction extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    final DocValues vals =  source.getValues(context, readerContext);
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+    final FunctionValues vals =  source.getValues(context, readerContext);
     return new FloatDocValues(this) {
       @Override
       public float floatVal(int doc) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/LiteralValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/LiteralValueSource.java
index 78b0a92..529edf0 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/LiteralValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/LiteralValueSource.java
@@ -17,7 +17,7 @@ package org.apache.lucene.queries.function.valuesource;
  */
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.StrDocValues;
 import org.apache.lucene.util.BytesRef;
@@ -45,7 +45,7 @@ public class LiteralValueSource extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
 
     return new StrDocValues(this) {
       @Override
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/LongFieldSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/LongFieldSource.java
index a396896..97fa914 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/LongFieldSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/LongFieldSource.java
@@ -22,7 +22,7 @@ import java.util.Map;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSourceScorer;
 import org.apache.lucene.queries.function.docvalues.LongDocValues;
 import org.apache.lucene.search.FieldCache;
@@ -65,7 +65,7 @@ public class LongFieldSource extends FieldCacheSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final long[] arr = cache.getLongs(readerContext.reader, field, parser, true);
     final Bits valid = cache.getDocsWithField(readerContext.reader, field);
     
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java
index dd6eb92..f38b7eb 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java
@@ -17,7 +17,7 @@
 package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.search.IndexSearcher;
 
@@ -40,7 +40,7 @@ public class MaxDocValueSource extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     IndexSearcher searcher = (IndexSearcher)context.get("searcher");
     return new ConstIntDocValues(searcher.getIndexReader().maxDoc(), this);
   }
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxFloatFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxFloatFunction.java
index 3f43494..5734434 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxFloatFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxFloatFunction.java
@@ -17,7 +17,7 @@
 
 package org.apache.lucene.queries.function.valuesource;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 
 /**
@@ -34,10 +34,10 @@ public class MaxFloatFunction extends MultiFloatFunction {
   }
 
   @Override
-  protected float func(int doc, DocValues[] valsArr) {
+  protected float func(int doc, FunctionValues[] valsArr) {
     boolean first = true;
     float val = 0.0f;
-    for (DocValues vals : valsArr) {
+    for (FunctionValues vals : valsArr) {
       if (first) {
         first = false;
         val = vals.floatVal(doc);
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction.java
index 8453c38..67235a3 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction.java
@@ -17,7 +17,7 @@
 
 package org.apache.lucene.queries.function.valuesource;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 
 /**
@@ -34,10 +34,10 @@ public class MinFloatFunction extends MultiFloatFunction {
   }
 
   @Override
-  protected float func(int doc, DocValues[] valsArr) {
+  protected float func(int doc, FunctionValues[] valsArr) {
     boolean first = true;
     float val = 0.0f;
-    for (DocValues vals : valsArr) {
+    for (FunctionValues vals : valsArr) {
       if (first) {
         first = false;
         val = vals.floatVal(doc);
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiBoolFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiBoolFunction.java
index 9292a19..d80b740 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiBoolFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiBoolFunction.java
@@ -18,7 +18,7 @@
 package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.BoolDocValues;
 import org.apache.lucene.search.IndexSearcher;
@@ -37,11 +37,11 @@ public abstract class MultiBoolFunction extends BoolFunction {
 
   protected abstract String name();
 
-  protected abstract boolean func(int doc, DocValues[] vals);
+  protected abstract boolean func(int doc, FunctionValues[] vals);
 
   @Override
   public BoolDocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    final DocValues[] vals =  new DocValues[sources.size()];
+    final FunctionValues[] vals =  new FunctionValues[sources.size()];
     int i=0;
     for (ValueSource source : sources) {
       vals[i++] = source.getValues(context, readerContext);
@@ -58,7 +58,7 @@ public abstract class MultiBoolFunction extends BoolFunction {
         StringBuilder sb = new StringBuilder(name());
         sb.append('(');
         boolean first = true;
-        for (DocValues dv : vals) {
+        for (FunctionValues dv : vals) {
           if (first) {
             first = false;
           } else {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction.java
index 369ae1c..2372b55 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction.java
@@ -17,7 +17,7 @@ package org.apache.lucene.queries.function.valuesource;
  */
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.FloatDocValues;
 import org.apache.lucene.search.IndexSearcher;
@@ -39,7 +39,7 @@ public abstract class MultiFloatFunction extends ValueSource {
   }
 
   abstract protected String name();
-  abstract protected float func(int doc, DocValues[] valsArr);
+  abstract protected float func(int doc, FunctionValues[] valsArr);
 
   @Override
   public String description() {
@@ -59,8 +59,8 @@ public abstract class MultiFloatFunction extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    final DocValues[] valsArr = new DocValues[sources.length];
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+    final FunctionValues[] valsArr = new FunctionValues[sources.length];
     for (int i=0; i<sources.length; i++) {
       valsArr[i] = sources[i].getValues(context, readerContext);
     }
@@ -75,7 +75,7 @@ public abstract class MultiFloatFunction extends ValueSource {
         StringBuilder sb = new StringBuilder();
         sb.append(name()).append('(');
         boolean firstTime=true;
-        for (DocValues vals : valsArr) {
+        for (FunctionValues vals : valsArr) {
           if (firstTime) {
             firstTime=false;
           } else {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java
index 73ffd21..49f5fc4 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java
@@ -17,7 +17,7 @@ package org.apache.lucene.queries.function.valuesource;
  */
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.util.BytesRef;
@@ -58,8 +58,8 @@ public abstract class MultiFunction extends ValueSource {
     return sb.toString();
   }
 
-  public static DocValues[] valsArr(List<ValueSource> sources, Map fcontext, AtomicReaderContext readerContext) throws IOException {
-    final DocValues[] valsArr = new DocValues[sources.size()];
+  public static FunctionValues[] valsArr(List<ValueSource> sources, Map fcontext, AtomicReaderContext readerContext) throws IOException {
+    final FunctionValues[] valsArr = new FunctionValues[sources.size()];
     int i=0;
     for (ValueSource source : sources) {
       valsArr[i++] = source.getValues(fcontext, readerContext);
@@ -67,10 +67,10 @@ public abstract class MultiFunction extends ValueSource {
     return valsArr;
   }
 
-  public class Values extends DocValues {
-    final DocValues[] valsArr;
+  public class Values extends FunctionValues {
+    final FunctionValues[] valsArr;
 
-    public Values(DocValues[] valsArr) {
+    public Values(FunctionValues[] valsArr) {
       this.valsArr = valsArr;
     }
 
@@ -87,11 +87,11 @@ public abstract class MultiFunction extends ValueSource {
   }
 
 
-  public static String toString(String name, DocValues[] valsArr, int doc) {
+  public static String toString(String name, FunctionValues[] valsArr, int doc) {
     StringBuilder sb = new StringBuilder();
     sb.append(name).append('(');
     boolean firstTime=true;
-    for (DocValues vals : valsArr) {
+    for (FunctionValues vals : valsArr) {
       if (firstTime) {
         firstTime=false;
       } else {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java
index 81fa80e..755fbb4 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource.java
@@ -18,7 +18,7 @@
 package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.FloatDocValues;
 import org.apache.lucene.search.IndexSearcher;
@@ -49,7 +49,7 @@ public class NormValueSource extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     IndexSearcher searcher = (IndexSearcher)context.get("searcher");
     Similarity sim = searcher.getSimilarityProvider().get(field);
     if (!(sim instanceof TFIDFSimilarity)) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java
index 768ade0..eadf866 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java
@@ -17,7 +17,7 @@
 package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.util.ReaderUtil;
 
@@ -35,7 +35,7 @@ public class NumDocsValueSource extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     // Searcher has no numdocs so we must use the reader instead
     return new ConstIntDocValues(ReaderUtil.getTopLevelContext(readerContext).reader.numDocs(), this);
   }
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource.java
index 2c95813..38b01cc 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource.java
@@ -22,13 +22,13 @@ import java.util.Map;
 import org.apache.lucene.index.DocValues.Source;
 import org.apache.lucene.index.DocValues.Type;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 
 /**
- * Expert: obtains numeric field values from a {@link DocValues} field.
+ * Expert: obtains numeric field values from a {@link FunctionValues} field.
  * This {@link ValueSource} is compatible with all numerical
- * {@link DocValues}
+ * {@link FunctionValues}
  * 
  * @lucene.experimental
  * 
@@ -42,7 +42,7 @@ public class NumericIndexDocValueSource extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final Source source = readerContext.reader.docValues(field)
         .getSource();
     Type type = source.type();
@@ -50,7 +50,7 @@ public class NumericIndexDocValueSource extends ValueSource {
     case FLOAT_32:
     case FLOAT_64:
       // TODO (chrism) Change to use FloatDocValues and IntDocValues
-      return new DocValues() {
+      return new FunctionValues() {
 
         @Override
         public String toString(int doc) {
@@ -64,7 +64,7 @@ public class NumericIndexDocValueSource extends ValueSource {
       };
 
     case VAR_INTS:
-      return new DocValues() {
+      return new FunctionValues() {
         @Override
         public String toString(int doc) {
           return "float: [" + floatVal(doc) + "]";
@@ -113,6 +113,6 @@ public class NumericIndexDocValueSource extends ValueSource {
 
   @Override
   public String toString() {
-    return "DocValues float(" + field + ')';
+    return "FunctionValues float(" + field + ')';
   }
 }
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java
index f437957..0908300 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource.java
@@ -19,7 +19,7 @@ package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.IntDocValues;
 import org.apache.lucene.search.FieldCache;
@@ -62,7 +62,7 @@ public class OrdFieldSource extends ValueSource {
 
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final int off = readerContext.docBase;
     final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;
     final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(topReader, field);
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/PowFloatFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/PowFloatFunction.java
index ec2ae94..a65b4d2 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/PowFloatFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/PowFloatFunction.java
@@ -17,7 +17,7 @@
 
 package org.apache.lucene.queries.function.valuesource;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 
 /** Function to raise the base "a" to the power "b"
@@ -37,7 +37,7 @@ public class PowFloatFunction extends DualFloatFunction {
   }
 
   @Override
-  protected float func(int doc, DocValues aVals, DocValues bVals) {
+  protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {
     return (float)Math.pow(aVals.floatVal(doc), bVals.floatVal(doc));
   }
 }
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ProductFloatFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ProductFloatFunction.java
index 5aa0254..102fff9 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ProductFloatFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ProductFloatFunction.java
@@ -17,7 +17,7 @@
 
 package org.apache.lucene.queries.function.valuesource;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 
 /**
@@ -34,9 +34,9 @@ public class ProductFloatFunction extends MultiFloatFunction {
   }
 
   @Override
-  protected float func(int doc, DocValues[] valsArr) {
+  protected float func(int doc, FunctionValues[] valsArr) {
     float val = 1.0f;
-    for (DocValues vals : valsArr) {
+    for (FunctionValues vals : valsArr) {
       val *= vals.floatVal(doc);
     }
     return val;
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java
index fb6f2c7..92b8f70 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/QueryValueSource.java
@@ -18,7 +18,7 @@
 package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.FloatDocValues;
 import org.apache.lucene.search.*;
@@ -51,7 +51,7 @@ public class QueryValueSource extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map fcontext, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map fcontext, AtomicReaderContext readerContext) throws IOException {
     return new QueryDocValues(this, readerContext, fcontext);
   }
 
@@ -193,8 +193,8 @@ class QueryDocValues extends FloatDocValues {
   public ValueFiller getValueFiller() {
     //
     // TODO: if we want to support more than one value-filler or a value-filler in conjunction with
-    // the DocValues, then members like "scorer" should be per ValueFiller instance.
-    // Or we can say that the user should just instantiate multiple DocValues.
+    // the FunctionValues, then members like "scorer" should be per ValueFiller instance.
+    // Or we can say that the user should just instantiate multiple FunctionValues.
     //
     return new ValueFiller() {
       private final MutableValueFloat mval = new MutableValueFloat();
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction.java
index 95203a7..c5ad999 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction.java
@@ -18,7 +18,7 @@
 package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.FloatDocValues;
 import org.apache.lucene.search.IndexSearcher;
@@ -55,8 +55,8 @@ public class RangeMapFloatFunction extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    final DocValues vals =  source.getValues(context, readerContext);
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+    final FunctionValues vals =  source.getValues(context, readerContext);
     return new FloatDocValues(this) {
       @Override
       public float floatVal(int doc) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction.java
index 98596e6..246c5b6 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction.java
@@ -18,7 +18,7 @@
 package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.FloatDocValues;
 import org.apache.lucene.search.IndexSearcher;
@@ -61,8 +61,8 @@ public class ReciprocalFloatFunction extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    final DocValues vals = source.getValues(context, readerContext);
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+    final FunctionValues vals = source.getValues(context, readerContext);
     return new FloatDocValues(this) {
       @Override
       public float floatVal(int doc) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.java
index 56d876d..a54e155 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.java
@@ -19,7 +19,7 @@ package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.IntDocValues;
 import org.apache.lucene.search.FieldCache;
@@ -62,7 +62,7 @@ public class ReverseOrdFieldSource extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;
     final int off = readerContext.docBase;
 
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction.java
index 6e2330a..a26f88a 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction.java
@@ -18,7 +18,7 @@
 package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.FloatDocValues;
 import org.apache.lucene.search.IndexSearcher;
@@ -67,7 +67,7 @@ public class ScaleFloatFunction extends ValueSource {
 
     for (AtomicReaderContext leaf : leaves) {
       int maxDoc = leaf.reader.maxDoc();
-      DocValues vals =  source.getValues(context, leaf);
+      FunctionValues vals =  source.getValues(context, leaf);
       for (int i=0; i<maxDoc; i++) {
 
       float val = vals.floatVal(i);
@@ -98,7 +98,7 @@ public class ScaleFloatFunction extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
 
     ScaleInfo scaleInfo = (ScaleInfo)context.get(source);
     if (scaleInfo == null) {
@@ -109,7 +109,7 @@ public class ScaleFloatFunction extends ValueSource {
     final float minSource = scaleInfo.minVal;
     final float maxSource = scaleInfo.maxVal;
 
-    final DocValues vals =  source.getValues(context, readerContext);
+    final FunctionValues vals =  source.getValues(context, readerContext);
 
     return new FloatDocValues(this) {
       @Override
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource.java
index 46c99a9..e0e94c3 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource.java
@@ -20,7 +20,7 @@ import java.io.IOException;
 import java.util.Map;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.search.FieldCache;
 
 
@@ -47,10 +47,10 @@ public class ShortFieldSource extends FieldCacheSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final short[] arr = cache.getShorts(readerContext.reader, field, parser, false);
     
-    return new DocValues() {
+    return new FunctionValues() {
       @Override
       public byte byteVal(int doc) {
         return (byte) arr[doc];
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.java
index 10fb3bb..a53829a 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.java
@@ -18,7 +18,7 @@
 package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.BoolDocValues;
 import org.apache.lucene.search.IndexSearcher;
@@ -36,11 +36,11 @@ public abstract class SimpleBoolFunction extends BoolFunction {
 
   protected abstract String name();
 
-  protected abstract boolean func(int doc, DocValues vals);
+  protected abstract boolean func(int doc, FunctionValues vals);
 
   @Override
   public BoolDocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    final DocValues vals =  source.getValues(context, readerContext);
+    final FunctionValues vals =  source.getValues(context, readerContext);
     return new BoolDocValues(this) {
       @Override
       public boolean boolVal(int doc) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleFloatFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleFloatFunction.java
index 174f5d3..7f43b68 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleFloatFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleFloatFunction.java
@@ -18,7 +18,7 @@
 package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.FloatDocValues;
 
@@ -32,11 +32,11 @@ import java.util.Map;
     super(source);
   }
 
-  protected abstract float func(int doc, DocValues vals);
+  protected abstract float func(int doc, FunctionValues vals);
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    final DocValues vals =  source.getValues(context, readerContext);
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+    final FunctionValues vals =  source.getValues(context, readerContext);
     return new FloatDocValues(this) {
       @Override
       public float floatVal(int doc) {
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SumFloatFunction.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SumFloatFunction.java
index 19cf942..1bfa380 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SumFloatFunction.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SumFloatFunction.java
@@ -17,7 +17,7 @@
 
 package org.apache.lucene.queries.function.valuesource;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 
 /**
@@ -34,9 +34,9 @@ public class SumFloatFunction extends MultiFloatFunction {
   }
 
   @Override
-  protected float func(int doc, DocValues[] valsArr) {
+  protected float func(int doc, FunctionValues[] valsArr) {
     float val = 0.0f;
-    for (DocValues vals : valsArr) {
+    for (FunctionValues vals : valsArr) {
       val += vals.floatVal(doc);
     }
     return val;
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.java
index 8bc1ea5..45e34ba 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.java
@@ -20,7 +20,7 @@ package org.apache.lucene.queries.function.valuesource;
 import org.apache.lucene.index.Fields;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.Terms;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.LongDocValues;
 import org.apache.lucene.search.IndexSearcher;
@@ -50,8 +50,8 @@ public class SumTotalTermFreqValueSource extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {
-    return (DocValues)context.get(this);
+  public FunctionValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {
+    return (FunctionValues)context.get(this);
   }
 
   @Override
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource.java
index 7ab409e..e9910ed 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource.java
@@ -19,7 +19,7 @@ package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.*;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.docvalues.FloatDocValues;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.search.IndexSearcher;
@@ -41,7 +41,7 @@ public class TFValueSource extends TermFreqValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     Fields fields = readerContext.reader.fields();
     final Terms terms = fields.terms(field);
     final Similarity sim = ((IndexSearcher)context.get("searcher")).getSimilarityProvider().get(field);
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource.java
index a9dcf0d..d17c025 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource.java
@@ -19,7 +19,7 @@ package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.*;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.docvalues.IntDocValues;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.util.BytesRef;
@@ -38,7 +38,7 @@ public class TermFreqValueSource extends DocFreqValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     Fields fields = readerContext.reader.fields();
     final Terms terms = fields.terms(field);
 
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource.java
index 21a0b2e..3f9c5d3 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource.java
@@ -18,7 +18,7 @@
 package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.LongDocValues;
 import org.apache.lucene.search.IndexSearcher;
@@ -54,8 +54,8 @@ public class TotalTermFreqValueSource extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {
-    return (DocValues)context.get(this);
+  public FunctionValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {
+    return (FunctionValues)context.get(this);
   }
 
   @Override
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource.java
index d53c262..4562449 100644
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource.java
@@ -17,7 +17,7 @@ package org.apache.lucene.queries.function.valuesource;
  */
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.search.IndexSearcher;
 
@@ -27,8 +27,8 @@ import java.util.Map;
 
 
 /**
- * Converts individual ValueSource instances to leverage the DocValues *Val functions that work with multiple values,
- * i.e. {@link org.apache.lucene.queries.function.DocValues#doubleVal(int, double[])}
+ * Converts individual ValueSource instances to leverage the FunctionValues *Val functions that work with multiple values,
+ * i.e. {@link org.apache.lucene.queries.function.FunctionValues#doubleVal(int, double[])}
  */
 //Not crazy about the name, but...
 public class VectorValueSource extends MultiValueSource {
@@ -53,14 +53,14 @@ public class VectorValueSource extends MultiValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     int size = sources.size();
 
     // special-case x,y and lat,lon since it's so common
     if (size==2) {
-      final DocValues x = sources.get(0).getValues(context, readerContext);
-      final DocValues y = sources.get(1).getValues(context, readerContext);
-      return new DocValues() {
+      final FunctionValues x = sources.get(0).getValues(context, readerContext);
+      final FunctionValues y = sources.get(1).getValues(context, readerContext);
+      return new FunctionValues() {
         @Override
         public void byteVal(int doc, byte[] vals) {
           vals[0] = x.byteVal(doc);
@@ -105,12 +105,12 @@ public class VectorValueSource extends MultiValueSource {
     }
 
 
-    final DocValues[] valsArr = new DocValues[size];
+    final FunctionValues[] valsArr = new FunctionValues[size];
     for (int i = 0; i < size; i++) {
       valsArr[i] = sources.get(i).getValues(context, readerContext);
     }
 
-    return new DocValues() {
+    return new FunctionValues() {
       @Override
       public void byteVal(int doc, byte[] vals) {
         for (int i = 0; i < valsArr.length; i++) {
@@ -165,7 +165,7 @@ public class VectorValueSource extends MultiValueSource {
         StringBuilder sb = new StringBuilder();
         sb.append(name()).append('(');
         boolean firstTime = true;
-        for (DocValues vals : valsArr) {
+        for (FunctionValues vals : valsArr) {
           if (firstTime) {
             firstTime = false;
           } else {
diff --git a/solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter.java b/solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter.java
index e12a54a..f14e840 100644
--- a/solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter.java
+++ b/solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter.java
@@ -20,7 +20,7 @@ import java.io.IOException;
 import java.util.Map;
 
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.util.ReaderUtil;
 import org.apache.solr.common.SolrDocument;
@@ -63,7 +63,7 @@ public class ValueSourceAugmenter extends DocTransformer
     try {
       IndexReader reader = qparser.getReq().getSearcher().getIndexReader();
       readerContexts = reader.getTopReaderContext().leaves();
-      docValuesArr = new DocValues[readerContexts.length];
+      docValuesArr = new FunctionValues[readerContexts.length];
 
       searcher = qparser.getReq().getSearcher();
       fcontext = ValueSource.newContext(searcher);
@@ -77,7 +77,7 @@ public class ValueSourceAugmenter extends DocTransformer
   Map fcontext;
   SolrIndexSearcher searcher;
   IndexReader.AtomicReaderContext[] readerContexts;
-  DocValues docValuesArr[];
+  FunctionValues docValuesArr[];
 
 
   @Override
@@ -89,7 +89,7 @@ public class ValueSourceAugmenter extends DocTransformer
       // TODO: calculate this stuff just once across diff functions
       int idx = ReaderUtil.subIndex(docid, readerContexts);
       IndexReader.AtomicReaderContext rcontext = readerContexts[idx];
-      DocValues values = docValuesArr[idx];
+      FunctionValues values = docValuesArr[idx];
       if (values == null) {
         docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);
       }
diff --git a/solr/core/src/java/org/apache/solr/schema/BoolField.java b/solr/core/src/java/org/apache/solr/schema/BoolField.java
index 8a8ed8a..b36138e 100644
--- a/solr/core/src/java/org/apache/solr/schema/BoolField.java
+++ b/solr/core/src/java/org/apache/solr/schema/BoolField.java
@@ -22,7 +22,7 @@ import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.BoolDocValues;
 import org.apache.lucene.queries.function.valuesource.OrdFieldSource;
@@ -170,7 +170,7 @@ class BoolFieldSource extends ValueSource {
 
 
   @Override
-  public DocValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {
     final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader, field);
 
     // figure out what ord maps to true
diff --git a/solr/core/src/java/org/apache/solr/schema/DateField.java b/solr/core/src/java/org/apache/solr/schema/DateField.java
index 530169a..d53ac25 100644
--- a/solr/core/src/java/org/apache/solr/schema/DateField.java
+++ b/solr/core/src/java/org/apache/solr/schema/DateField.java
@@ -22,7 +22,7 @@ import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.search.TermRangeQuery;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.StringIndexDocValues;
 import org.apache.lucene.queries.function.valuesource.FieldCacheSource;
@@ -462,7 +462,7 @@ class DateFieldSource extends FieldCacheSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     return new StringIndexDocValues(this, readerContext, field) {
       @Override
       protected String toTerm(String readableValue) {
diff --git a/solr/core/src/java/org/apache/solr/schema/LatLonType.java b/solr/core/src/java/org/apache/solr/schema/LatLonType.java
index 5071ded..74a3d39 100644
--- a/solr/core/src/java/org/apache/solr/schema/LatLonType.java
+++ b/solr/core/src/java/org/apache/solr/schema/LatLonType.java
@@ -20,7 +20,7 @@ import org.apache.lucene.document.FieldType;
 import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.valuesource.VectorValueSource;
 import org.apache.lucene.search.*;
@@ -383,8 +383,8 @@ class SpatialDistanceQuery extends Query {
     final int maxDoc;
     final float qWeight;
     int doc=-1;
-    final DocValues latVals;
-    final DocValues lonVals;
+    final FunctionValues latVals;
+    final FunctionValues lonVals;
     final Bits liveDocs;
 
 
diff --git a/solr/core/src/java/org/apache/solr/schema/RandomSortField.java b/solr/core/src/java/org/apache/solr/schema/RandomSortField.java
index f9ca223..0dee691 100644
--- a/solr/core/src/java/org/apache/solr/schema/RandomSortField.java
+++ b/solr/core/src/java/org/apache/solr/schema/RandomSortField.java
@@ -23,7 +23,7 @@ import java.util.Map;
 import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.IntDocValues;
 import org.apache.lucene.search.*;
@@ -157,7 +157,7 @@ public class RandomSortField extends FieldType {
     }
 
     @Override
-    public DocValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {
+    public FunctionValues getValues(Map context, final AtomicReaderContext readerContext) throws IOException {
       return new IntDocValues(this) {
           private final int seed = getSeed(field, readerContext);
           @Override
diff --git a/solr/core/src/java/org/apache/solr/schema/SortableDoubleField.java b/solr/core/src/java/org/apache/solr/schema/SortableDoubleField.java
index a9facc5..b28ce47 100644
--- a/solr/core/src/java/org/apache/solr/schema/SortableDoubleField.java
+++ b/solr/core/src/java/org/apache/solr/schema/SortableDoubleField.java
@@ -17,7 +17,7 @@
 
 package org.apache.solr.schema;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.StringIndexDocValues;
 import org.apache.lucene.queries.function.valuesource.FieldCacheSource;
@@ -122,7 +122,7 @@ class SortableDoubleFieldSource extends FieldCacheSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final double def = defVal;
 
     return new StringIndexDocValues(this, readerContext, field) {
diff --git a/solr/core/src/java/org/apache/solr/schema/SortableFloatField.java b/solr/core/src/java/org/apache/solr/schema/SortableFloatField.java
index 11aeb4b..ed9d568 100644
--- a/solr/core/src/java/org/apache/solr/schema/SortableFloatField.java
+++ b/solr/core/src/java/org/apache/solr/schema/SortableFloatField.java
@@ -17,7 +17,7 @@
 
 package org.apache.solr.schema;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.StringIndexDocValues;
 import org.apache.lucene.queries.function.valuesource.FieldCacheSource;
@@ -125,7 +125,7 @@ class SortableFloatFieldSource extends FieldCacheSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final float def = defVal;
 
     return new StringIndexDocValues(this, readerContext, field) {
diff --git a/solr/core/src/java/org/apache/solr/schema/SortableIntField.java b/solr/core/src/java/org/apache/solr/schema/SortableIntField.java
index 810e139..1dffb6d 100644
--- a/solr/core/src/java/org/apache/solr/schema/SortableIntField.java
+++ b/solr/core/src/java/org/apache/solr/schema/SortableIntField.java
@@ -17,7 +17,7 @@
 
 package org.apache.solr.schema;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.StringIndexDocValues;
 import org.apache.lucene.queries.function.valuesource.FieldCacheSource;
@@ -127,7 +127,7 @@ class SortableIntFieldSource extends FieldCacheSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final int def = defVal;
 
     return new StringIndexDocValues(this, readerContext, field) {
diff --git a/solr/core/src/java/org/apache/solr/schema/SortableLongField.java b/solr/core/src/java/org/apache/solr/schema/SortableLongField.java
index ce5b2cc..b30a57d 100644
--- a/solr/core/src/java/org/apache/solr/schema/SortableLongField.java
+++ b/solr/core/src/java/org/apache/solr/schema/SortableLongField.java
@@ -17,7 +17,7 @@
 
 package org.apache.solr.schema;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.StringIndexDocValues;
 import org.apache.lucene.queries.function.valuesource.FieldCacheSource;
@@ -125,7 +125,7 @@ class SortableLongFieldSource extends FieldCacheSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final long def = defVal;
 
     return new StringIndexDocValues(this, readerContext, field) {
diff --git a/solr/core/src/java/org/apache/solr/schema/StrFieldSource.java b/solr/core/src/java/org/apache/solr/schema/StrFieldSource.java
index b02d078..32c01b3 100755
--- a/solr/core/src/java/org/apache/solr/schema/StrFieldSource.java
+++ b/solr/core/src/java/org/apache/solr/schema/StrFieldSource.java
@@ -18,7 +18,7 @@
 package org.apache.solr.schema;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.docvalues.StringIndexDocValues;
 import org.apache.lucene.queries.function.valuesource.FieldCacheSource;
 
@@ -37,7 +37,7 @@ public class StrFieldSource extends FieldCacheSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     return new StringIndexDocValues(this, readerContext, field) {
 
       @Override
diff --git a/solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin.java b/solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin.java
index 9abe44b..fcfd8d0 100755
--- a/solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin.java
+++ b/solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin.java
@@ -17,7 +17,7 @@
 package org.apache.solr.search;
 
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.FunctionQuery;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.ValueSourceScorer;
@@ -114,7 +114,7 @@ class FunctionRangeQuery extends SolrConstantScoreQuery implements PostFilter {
     @Override
     public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {
       maxdoc = context.reader.maxDoc();
-      DocValues dv = rangeFilt.getValueSource().getValues(fcontext, context);
+      FunctionValues dv = rangeFilt.getValueSource().getValues(fcontext, context);
       scorer = dv.getRangeScorer(context.reader, rangeFilt.getLowerVal(), rangeFilt.getUpperVal(), rangeFilt.isIncludeLower(), rangeFilt.isIncludeUpper());
       super.setNextReader(context);
     }
diff --git a/solr/core/src/java/org/apache/solr/search/ValueSourceParser.java b/solr/core/src/java/org/apache/solr/search/ValueSourceParser.java
index 8e62a2d..225dea2 100755
--- a/solr/core/src/java/org/apache/solr/search/ValueSourceParser.java
+++ b/solr/core/src/java/org/apache/solr/search/ValueSourceParser.java
@@ -19,7 +19,7 @@ package org.apache.solr.search;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.queries.function.BoostedQuery;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.BoolDocValues;
 import org.apache.lucene.queries.function.docvalues.DoubleDocValues;
@@ -173,7 +173,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
           }
 
           @Override
-          protected float func(int doc, DocValues vals) {
+          protected float func(int doc, FunctionValues vals) {
             return Math.abs(vals.floatVal(doc));
           }
         };
@@ -209,7 +209,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
           }
 
           @Override
-          protected float func(int doc, DocValues aVals, DocValues bVals) {
+          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {
             return aVals.floatVal(doc) - bVals.floatVal(doc);
           }
         };
@@ -353,133 +353,133 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
 
     addParser(new DoubleParser("rad") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;
       }
     });
     addParser(new DoubleParser("deg") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;
       }
     });
     addParser(new DoubleParser("sqrt") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.sqrt(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("cbrt") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.cbrt(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("log") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.log10(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("ln") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.log(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("exp") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.exp(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("sin") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.sin(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("cos") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.cos(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("tan") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.tan(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("asin") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.asin(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("acos") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.acos(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("atan") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.atan(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("sinh") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.sinh(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("cosh") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.cosh(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("tanh") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.tanh(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("ceil") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.ceil(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("floor") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.floor(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("rint") {
       @Override
-      public double func(int doc, DocValues vals) {
+      public double func(int doc, FunctionValues vals) {
         return Math.rint(vals.doubleVal(doc));
       }
     });
     addParser(new Double2Parser("pow") {
       @Override
-      public double func(int doc, DocValues a, DocValues b) {
+      public double func(int doc, FunctionValues a, FunctionValues b) {
         return Math.pow(a.doubleVal(doc), b.doubleVal(doc));
       }
     });
     addParser(new Double2Parser("hypot") {
       @Override
-      public double func(int doc, DocValues a, DocValues b) {
+      public double func(int doc, FunctionValues a, FunctionValues b) {
         return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));
       }
     });
     addParser(new Double2Parser("atan2") {
       @Override
-      public double func(int doc, DocValues a, DocValues b) {
+      public double func(int doc, FunctionValues a, FunctionValues b) {
         return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));
       }
     });
@@ -629,7 +629,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
             return "exists";
           }
           @Override
-          protected boolean func(int doc, DocValues vals) {
+          protected boolean func(int doc, FunctionValues vals) {
             return vals.exists(doc);
           }
         };
@@ -642,7 +642,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
         ValueSource vs = fp.parseValueSource();
         return new SimpleBoolFunction(vs) {
           @Override
-          protected boolean func(int doc, DocValues vals) {
+          protected boolean func(int doc, FunctionValues vals) {
             return !vals.boolVal(doc);
           }
           @Override
@@ -664,8 +664,8 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
             return "and";
           }
           @Override
-          protected boolean func(int doc, DocValues[] vals) {
-            for (DocValues dv : vals)
+          protected boolean func(int doc, FunctionValues[] vals) {
+            for (FunctionValues dv : vals)
               if (!dv.boolVal(doc)) return false;
             return true;
           }
@@ -683,8 +683,8 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
             return "or";
           }
           @Override
-          protected boolean func(int doc, DocValues[] vals) {
-            for (DocValues dv : vals)
+          protected boolean func(int doc, FunctionValues[] vals) {
+            for (FunctionValues dv : vals)
               if (dv.boolVal(doc)) return true;
             return false;
           }
@@ -702,9 +702,9 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
             return "xor";
           }
           @Override
-          protected boolean func(int doc, DocValues[] vals) {
+          protected boolean func(int doc, FunctionValues[] vals) {
             int nTrue=0, nFalse=0;
-            for (DocValues dv : vals) {
+            for (FunctionValues dv : vals) {
               if (dv.boolVal(doc)) nTrue++;
               else nFalse++;
             }
@@ -888,7 +888,7 @@ class DateValueSourceParser extends ValueSourceParser {
         }
 
         @Override
-        protected float func(int doc, DocValues aVals, DocValues bVals) {
+        protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {
           return ms1 - bVals.longVal(doc);
         }
       };
@@ -902,7 +902,7 @@ class DateValueSourceParser extends ValueSourceParser {
         }
 
         @Override
-        protected float func(int doc, DocValues aVals, DocValues bVals) {
+        protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {
           return aVals.longVal(doc) - ms2;
         }
       };
@@ -916,7 +916,7 @@ class DateValueSourceParser extends ValueSourceParser {
         }
 
         @Override
-        protected float func(int doc, DocValues aVals, DocValues bVals) {
+        protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {
           return aVals.longVal(doc) - bVals.longVal(doc);
         }
       };
@@ -945,7 +945,7 @@ class LongConstValueSource extends ConstNumberSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     return new LongDocValues(this) {
       @Override
       public float floatVal(int doc) {
@@ -1034,7 +1034,7 @@ abstract class DoubleParser extends NamedParser {
     super(name);
   }
 
-  public abstract double func(int doc, DocValues vals);
+  public abstract double func(int doc, FunctionValues vals);
 
   @Override
   public ValueSource parse(FunctionQParser fp) throws ParseException {
@@ -1052,8 +1052,8 @@ abstract class DoubleParser extends NamedParser {
     }
 
     @Override
-    public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-      final DocValues vals =  source.getValues(context, readerContext);
+    public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+      final FunctionValues vals =  source.getValues(context, readerContext);
       return new DoubleDocValues(this) {
         @Override
         public double doubleVal(int doc) {
@@ -1074,7 +1074,7 @@ abstract class Double2Parser extends NamedParser {
     super(name);
   }
 
-  public abstract double func(int doc, DocValues a, DocValues b);
+  public abstract double func(int doc, FunctionValues a, FunctionValues b);
 
   @Override
   public ValueSource parse(FunctionQParser fp) throws ParseException {
@@ -1100,9 +1100,9 @@ abstract class Double2Parser extends NamedParser {
     }
 
     @Override
-    public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-      final DocValues aVals =  a.getValues(context, readerContext);
-      final DocValues bVals =  b.getValues(context, readerContext);
+    public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+      final FunctionValues aVals =  a.getValues(context, readerContext);
+      final FunctionValues bVals =  b.getValues(context, readerContext);
       return new DoubleDocValues(this) {
          @Override
         public double doubleVal(int doc) {
@@ -1154,7 +1154,7 @@ class BoolConstValueSource extends ConstNumberSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     return new BoolDocValues(this) {
       @Override
       public boolean boolVal(int doc) {
diff --git a/solr/core/src/java/org/apache/solr/search/function/FileFloatSource.java b/solr/core/src/java/org/apache/solr/search/function/FileFloatSource.java
index e097467..1333254 100755
--- a/solr/core/src/java/org/apache/solr/search/function/FileFloatSource.java
+++ b/solr/core/src/java/org/apache/solr/search/function/FileFloatSource.java
@@ -33,7 +33,7 @@ import org.apache.lucene.index.MultiFields;
 import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.index.IndexReader.ReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.FloatDocValues;
 import org.apache.lucene.util.BytesRef;
@@ -76,7 +76,7 @@ public class FileFloatSource extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final int off = readerContext.docBase;
     ReaderContext topLevelContext = ReaderUtil.getTopLevelContext(readerContext);
 
diff --git a/solr/core/src/java/org/apache/solr/search/function/distance/GeohashFunction.java b/solr/core/src/java/org/apache/solr/search/function/distance/GeohashFunction.java
index 55d1aad..166a8b5 100644
--- a/solr/core/src/java/org/apache/solr/search/function/distance/GeohashFunction.java
+++ b/solr/core/src/java/org/apache/solr/search/function/distance/GeohashFunction.java
@@ -17,7 +17,7 @@ package org.apache.solr.search.function.distance;
  */
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.spatial.geohash.GeoHashUtils;
 
@@ -46,12 +46,12 @@ public class GeohashFunction extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    final DocValues latDV = lat.getValues(context, readerContext);
-    final DocValues lonDV = lon.getValues(context, readerContext);
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+    final FunctionValues latDV = lat.getValues(context, readerContext);
+    final FunctionValues lonDV = lon.getValues(context, readerContext);
 
 
-    return new DocValues() {
+    return new FunctionValues() {
 
       @Override
       public String strVal(int doc) {
diff --git a/solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction.java b/solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction.java
index ca80dbb..9647dae 100644
--- a/solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction.java
+++ b/solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction.java
@@ -17,7 +17,7 @@ package org.apache.solr.search.function.distance;
  */
 
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.DoubleDocValues;
 import org.apache.lucene.spatial.DistanceUtils;
@@ -55,9 +55,9 @@ public class GeohashHaversineFunction extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    final DocValues gh1DV = geoHash1.getValues(context, readerContext);
-    final DocValues gh2DV = geoHash2.getValues(context, readerContext);
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+    final FunctionValues gh1DV = geoHash1.getValues(context, readerContext);
+    final FunctionValues gh2DV = geoHash2.getValues(context, readerContext);
 
     return new DoubleDocValues(this) {
       @Override
@@ -75,7 +75,7 @@ public class GeohashHaversineFunction extends ValueSource {
     };
   }
 
-  protected double distance(int doc, DocValues gh1DV, DocValues gh2DV) {
+  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) {
     double result = 0;
     String h1 = gh1DV.strVal(doc);
     String h2 = gh2DV.strVal(doc);
diff --git a/solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction.java b/solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction.java
index b2aa275..b8b7069 100755
--- a/solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction.java
+++ b/solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction.java
@@ -17,7 +17,7 @@ package org.apache.solr.search.function.distance;
  */
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.DoubleDocValues;
 import org.apache.lucene.queries.function.valuesource.ConstNumberSource;
@@ -198,9 +198,9 @@ public class HaversineConstFunction extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    final DocValues latVals = latSource.getValues(context, readerContext);
-    final DocValues lonVals = lonSource.getValues(context, readerContext);
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+    final FunctionValues latVals = latSource.getValues(context, readerContext);
+    final FunctionValues lonVals = lonSource.getValues(context, readerContext);
     final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;
     final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;
     final double latCenterRad_cos = this.latCenterRad_cos;
diff --git a/solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java b/solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java
index fa00744..45aeb5e 100644
--- a/solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java
+++ b/solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java
@@ -17,7 +17,7 @@ package org.apache.solr.search.function.distance;
  */
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.DoubleDocValues;
 import org.apache.lucene.queries.function.valuesource.MultiValueSource;
@@ -70,7 +70,7 @@ public class HaversineFunction extends ValueSource {
    * @param p2DV
    * @return The haversine distance formula
    */
-  protected double distance(int doc, DocValues p1DV, DocValues p2DV) {
+  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {
 
     double[] p1D = new double[2];
     double[] p2D = new double[2];
@@ -96,10 +96,10 @@ public class HaversineFunction extends ValueSource {
 
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    final DocValues vals1 = p1.getValues(context, readerContext);
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+    final FunctionValues vals1 = p1.getValues(context, readerContext);
 
-    final DocValues vals2 = p2.getValues(context, readerContext);
+    final FunctionValues vals2 = p2.getValues(context, readerContext);
     return new DoubleDocValues(this) {
       @Override
       public double doubleVal(int doc) {
diff --git a/solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction.java b/solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction.java
index ad9cdb8..e114f11 100644
--- a/solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction.java
+++ b/solr/core/src/java/org/apache/solr/search/function/distance/SquaredEuclideanFunction.java
@@ -16,7 +16,7 @@ package org.apache.solr.search.function.distance;
  * limitations under the License.
  */
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.valuesource.MultiValueSource;
 import org.apache.lucene.spatial.DistanceUtils;
 
@@ -43,7 +43,7 @@ public class SquaredEuclideanFunction extends VectorDistanceFunction {
    * @param doc The doc to score
    */
   @Override
-  protected double distance(int doc, DocValues dv1, DocValues dv2) {
+  protected double distance(int doc, FunctionValues dv1, FunctionValues dv2) {
 
     double[] vals1 = new double[source1.dimension()];
     double[] vals2 = new double[source1.dimension()];
diff --git a/solr/core/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java b/solr/core/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java
index 33ce483..a83153f 100644
--- a/solr/core/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java
+++ b/solr/core/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java
@@ -18,7 +18,7 @@ package org.apache.solr.search.function.distance;
  */
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.FloatDocValues;
 import org.apache.lucene.search.spell.StringDistance;
@@ -49,9 +49,9 @@ public class StringDistanceFunction extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
-    final DocValues str1DV = str1.getValues(context, readerContext);
-    final DocValues str2DV = str2.getValues(context, readerContext);
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+    final FunctionValues str1DV = str1.getValues(context, readerContext);
+    final FunctionValues str2DV = str2.getValues(context, readerContext);
     return new FloatDocValues(this) {
 
       @Override
diff --git a/solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java b/solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java
index f550577..a71fa9a 100644
--- a/solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java
+++ b/solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java
@@ -17,7 +17,7 @@ package org.apache.solr.search.function.distance;
  */
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.docvalues.DoubleDocValues;
 import org.apache.lucene.queries.function.valuesource.MultiValueSource;
@@ -69,7 +69,7 @@ public class VectorDistanceFunction extends ValueSource {
    * @param dv2 The values from the second MultiValueSource
    * @return The distance
    */
-  protected double distance(int doc, DocValues dv1, DocValues dv2) {
+  protected double distance(int doc, FunctionValues dv1, FunctionValues dv2) {
     //Handle some special cases:
     double[] vals1 = new double[source1.dimension()];
     double[] vals2 = new double[source1.dimension()];
@@ -79,11 +79,11 @@ public class VectorDistanceFunction extends ValueSource {
   }
 
   @Override
-  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
+  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
 
-    final DocValues vals1 = source1.getValues(context, readerContext);
+    final FunctionValues vals1 = source1.getValues(context, readerContext);
 
-    final DocValues vals2 = source2.getValues(context, readerContext);
+    final FunctionValues vals2 = source2.getValues(context, readerContext);
 
 
     return new DoubleDocValues(this) {
diff --git a/solr/core/src/test/org/apache/solr/core/DummyValueSourceParser.java b/solr/core/src/test/org/apache/solr/core/DummyValueSourceParser.java
index 5939e47..113d0fb 100644
--- a/solr/core/src/test/org/apache/solr/core/DummyValueSourceParser.java
+++ b/solr/core/src/test/org/apache/solr/core/DummyValueSourceParser.java
@@ -16,7 +16,7 @@ package org.apache.solr.core;
  * limitations under the License.
  */
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.valuesource.SimpleFloatFunction;
 import org.apache.lucene.queryparser.classic.ParseException;
@@ -47,7 +47,7 @@ public class DummyValueSourceParser extends ValueSourceParser {
       }
 
       @Override
-      protected float func(int doc, DocValues vals) {
+      protected float func(int doc, FunctionValues vals) {
         float result = 0;
         return result;
       }
diff --git a/solr/core/src/test/org/apache/solr/search/TestIndexSearcher.java b/solr/core/src/test/org/apache/solr/search/TestIndexSearcher.java
index 5f65569..94ac178 100755
--- a/solr/core/src/test/org/apache/solr/search/TestIndexSearcher.java
+++ b/solr/core/src/test/org/apache/solr/search/TestIndexSearcher.java
@@ -18,7 +18,7 @@ package org.apache.solr.search;
 
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.index.IndexReader.ReaderContext;
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.util.ReaderUtil;
 import org.apache.solr.SolrTestCaseJ4;
@@ -53,7 +53,7 @@ public class TestIndexSearcher extends SolrTestCaseJ4 {
     AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);
     int idx = ReaderUtil.subIndex(doc, leaves);
     AtomicReaderContext leaf = leaves[idx];
-    DocValues vals = vs.getValues(context, leaf);
+    FunctionValues vals = vs.getValues(context, leaf);
     return vals.strVal(doc-leaf.docBase);
   }
 
diff --git a/solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java b/solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java
index d17d1b5..dbc8d90 100755
--- a/solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java
+++ b/solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java
@@ -17,7 +17,7 @@
 
 package org.apache.solr.search.function;
 
-import org.apache.lucene.queries.function.DocValues;
+import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
 import org.apache.lucene.queries.function.valuesource.SimpleFloatFunction;
 import org.apache.lucene.queryparser.classic.ParseException;
@@ -57,7 +57,7 @@ public class NvlValueSourceParser extends ValueSourceParser {
 	    }
 
 	    @Override
-      protected float func(int doc, DocValues vals) {
+      protected float func(int doc, FunctionValues vals) {
 		float v = vals.floatVal(doc);
 		if (v == nvlFloatValue) {
 		    return nvl;

