GitDiffStart: 996bf1412bd168dd3f0c98d4aa9add3f853c6405 | Fri Oct 24 12:59:58 2014 +0000
diff --git a/solr/solrj/src/java/org/apache/solr/common/util/NamedList.java b/solr/solrj/src/java/org/apache/solr/common/util/NamedList.java
index 489bda4..6376694 100644
--- a/solr/solrj/src/java/org/apache/solr/common/util/NamedList.java
+++ b/solr/solrj/src/java/org/apache/solr/common/util/NamedList.java
@@ -23,6 +23,7 @@ import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -390,6 +391,31 @@ public class NamedList<T> implements Cloneable, Serializable, Iterable<Map.Entry
     return new NamedList<>( Collections.unmodifiableList(copy.nvPairs));
   }
 
+  public Map asMap(int maxDepth) {
+    LinkedHashMap result = new LinkedHashMap();
+    for(int i=0;i<size();i++){
+      Object val = getVal(i);
+      if (val instanceof NamedList && maxDepth> 0) {
+        //the maxDepth check is to avoid stack overflow due to infinite recursion
+        val = ((NamedList) val).asMap(maxDepth-1);
+      }
+      Object old = result.put(getName(i), val);
+      if(old!=null){
+        if (old instanceof List) {
+          List list = (List) old;
+          list.add(val);
+          result.put(getName(i),old);
+        } else {
+          ArrayList l = new ArrayList();
+          l.add(old);
+          l.add(val);
+          result.put(getName(i), l);
+        }
+      }
+    }
+    return result;
+  }
+
   /**
    * 
    * Helper class implementing Map.Entry&lt;String, T&gt; to store the key-value

