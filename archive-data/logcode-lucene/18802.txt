GitDiffStart: ff1ceb4aa84a726b2351af964beae1146acd05cd | Sat Nov 21 07:38:51 2009 +0000
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java
index d2578e8..4e9ce03 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java
@@ -89,6 +89,7 @@ public class ContextImpl extends Context {
 
   public DataSource getDataSource() {
     if (ds != null) return ds;
+    if(entity == null) return  null;
     if (entity.dataSrc == null) {
       entity.dataSrc = dataImporter.getDataSourceInstance(entity, entity.dataSource, this);
     }
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer.java
index 937ccbf..3cba381 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer.java
@@ -16,6 +16,9 @@
  */
 package org.apache.solr.handler.dataimport;
 
+import static org.apache.solr.handler.dataimport.DataImportHandlerException.wrapAndThrow;
+import static org.apache.solr.handler.dataimport.DataImportHandlerException.SEVERE;
+
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.Map;
@@ -55,24 +58,27 @@ public class ScriptTransformer extends Transformer {
     } catch (DataImportHandlerException e) {
       throw e;
     } catch (InvocationTargetException e) {
-      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,
+      wrapAndThrow(SEVERE,e,
               "Could not invoke method :"
                       + functionName
                       + "\n <script>\n"
-                      + context.getVariableResolver().resolve(
-                      DataConfig.IMPORTER_NS + "." + DataConfig.SCRIPT)
-                      + "</script>", e);
+                      + context.getScript()
+                      + "</script>");
     } catch (Exception e) {
-      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,
-              "Error invoking script for entity "
-                      + context.getEntityAttribute("name"), e);
+      wrapAndThrow(SEVERE,e, "Error invoking script for entity " + context.getEntityAttribute("name"));
     }
+    //will not reach here
+    return null;
   }
 
   private void initEngine(Context context) {
     try {
       String scriptText = context.getScript();
       String scriptLang = context.getScriptLanguage();
+      if(scriptText == null ){
+        throw new DataImportHandlerException(SEVERE,
+              "<script> tag is not present under <dataConfig>");
+      }
       Object scriptEngineMgr = Class
               .forName("javax.script.ScriptEngineManager").newInstance();
       // create a Script engine
@@ -84,8 +90,7 @@ public class ScriptTransformer extends Transformer {
               String.class, Object[].class);
       evalMethod.invoke(engine, scriptText);
     } catch (Exception e) {
-      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,
-              "<script> can be used only in java 6 or above", e);
+      wrapAndThrow(SEVERE,e, "<script> can be used only in java 6 or above");
     }
   }
 

