GitDiffStart: 641294a967b0cc030f5fccdaf07514cf8a2e2ed0 | Mon Nov 28 09:20:02 2016 +0100
diff --git a/solr/contrib/uima/src/test/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest.java b/solr/contrib/uima/src/test/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest.java
index 3833696..9a89168 100644
--- a/solr/contrib/uima/src/test/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest.java
+++ b/solr/contrib/uima/src/test/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest.java
@@ -37,6 +37,11 @@ import org.junit.Test;
 @Slow
 public class UIMAUpdateRequestProcessorTest extends SolrTestCaseJ4 {
 
+  public static final String UIMA_CHAIN = "uima";
+  public static final String UIMA_MULTI_MAP_CHAIN = "uima-multi-map";
+  public static final String UIMA_IGNORE_ERRORS_CHAIN = "uima-ignoreErrors";
+  public static final String UIMA_NOT_IGNORE_ERRORS_CHAIN = "uima-not-ignoreErrors";
+
   @BeforeClass
   public static void beforeClass() throws Exception {
     initCore("solrconfig.xml", "schema.xml", getFile("uima/solr").getAbsolutePath());
@@ -53,7 +58,7 @@ public class UIMAUpdateRequestProcessorTest extends SolrTestCaseJ4 {
   @Test
   public void testProcessorConfiguration() {
     SolrCore core = h.getCore();
-    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain("uima");
+    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(UIMA_CHAIN);
     assertNotNull(chained);
     UIMAUpdateRequestProcessorFactory factory = (UIMAUpdateRequestProcessorFactory)chained.getProcessors().get(0);
     assertNotNull(factory);
@@ -64,7 +69,7 @@ public class UIMAUpdateRequestProcessorTest extends SolrTestCaseJ4 {
   @Test
   public void testMultiMap() {
     SolrCore core = h.getCore();
-    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain("uima-multi-map");
+    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain(UIMA_MULTI_MAP_CHAIN);
     assertNotNull(chained);
     UIMAUpdateRequestProcessorFactory factory = (UIMAUpdateRequestProcessorFactory)chained.getProcessors().get(0);
     assertNotNull(factory);
@@ -80,7 +85,7 @@ public class UIMAUpdateRequestProcessorTest extends SolrTestCaseJ4 {
 
   @Test
   public void testProcessing() throws Exception {
-    addDoc("uima", adoc(
+    addDoc(adoc(
             "id",
             "2312312321312",
             "text",
@@ -88,7 +93,7 @@ public class UIMAUpdateRequestProcessorTest extends SolrTestCaseJ4 {
                     + "Add support for specifying Spelling SuggestWord Comparator to Lucene spell "
                     + "checkers for SpellCheckComponent. Issue SOLR-2053 is already fixed, patch is"
                     + " attached if you need it, but it is also committed to trunk and 3_x branch."
-                    + " Last Lucene European Conference has been held in Prague."));
+                + " Last Lucene European Conference has been held in Prague."), UIMA_CHAIN);
     assertU(commit());
     assertQ(req("sentence:*"), "//*[@numFound='1']");
     assertQ(req("sentiment:*"), "//*[@numFound='0']");
@@ -98,16 +103,16 @@ public class UIMAUpdateRequestProcessorTest extends SolrTestCaseJ4 {
   @Test
   public void testTwoUpdates() throws Exception {
 
-    addDoc("uima", adoc("id", "1", "text", "The Apache Software Foundation is happy to announce "
+    addDoc(adoc("id", "1", "text", "The Apache Software Foundation is happy to announce "
             + "BarCampApache Sydney, Australia, the first ASF-backed event in the Southern "
-            + "Hemisphere!"));
+        + "Hemisphere!"), UIMA_CHAIN);
     assertU(commit());
     assertQ(req("sentence:*"), "//*[@numFound='1']");
 
-    addDoc("uima", adoc("id", "2", "text", "Taking place 11th December 2010 at the University "
+    addDoc(adoc("id", "2", "text", "Taking place 11th December 2010 at the University "
             + "of Sydney's Darlington Centre, the BarCampApache \"unconference\" will be"
             + " attendee-driven, facilitated by members of the Apache community and will "
-            + "focus on the Apache..."));
+        + "focus on the Apache..."), UIMA_CHAIN);
     assertU(commit());
     assertQ(req("sentence:*"), "//*[@numFound='2']");
 
@@ -119,7 +124,7 @@ public class UIMAUpdateRequestProcessorTest extends SolrTestCaseJ4 {
   public void testErrorHandling() throws Exception {
 
     try{
-      addDoc("uima-not-ignoreErrors", adoc(
+      addDoc(adoc(
             "id",
             "2312312321312",
             "text",
@@ -127,14 +132,14 @@ public class UIMAUpdateRequestProcessorTest extends SolrTestCaseJ4 {
                     + "Add support for specifying Spelling SuggestWord Comparator to Lucene spell "
                     + "checkers for SpellCheckComponent. Issue SOLR-2053 is already fixed, patch is"
                     + " attached if you need it, but it is also committed to trunk and 3_x branch."
-                    + " Last Lucene European Conference has been held in Prague."));
+                + " Last Lucene European Conference has been held in Prague."), UIMA_NOT_IGNORE_ERRORS_CHAIN);
       fail("exception shouldn't be ignored");
     }
     catch(RuntimeException expected){}
     assertU(commit());
     assertQ(req("*:*"), "//*[@numFound='0']");
 
-    addDoc("uima-ignoreErrors", adoc(
+    addDoc(adoc(
             "id",
             "2312312321312",
             "text",
@@ -142,16 +147,16 @@ public class UIMAUpdateRequestProcessorTest extends SolrTestCaseJ4 {
                     + "Add support for specifying Spelling SuggestWord Comparator to Lucene spell "
                     + "checkers for SpellCheckComponent. Issue SOLR-2053 is already fixed, patch is"
                     + " attached if you need it, but it is also committed to trunk and 3_x branch."
-                    + " Last Lucene European Conference has been held in Prague."));
+                + " Last Lucene European Conference has been held in Prague."), UIMA_IGNORE_ERRORS_CHAIN);
     assertU(commit());
     assertQ(req("*:*"), "//*[@numFound='1']");
 
     try{
-      addDoc("uima-not-ignoreErrors", adoc(
+      addDoc(adoc(
             "id",
             "2312312321312",
             "text",
-            "SpellCheckComponent got improvement related to recent Lucene changes."));
+          "SpellCheckComponent got improvement related to recent Lucene changes."), UIMA_NOT_IGNORE_ERRORS_CHAIN);
       fail("exception shouldn't be ignored");
     }
     catch(StringIndexOutOfBoundsException e){  // SOLR-2579
@@ -160,11 +165,11 @@ public class UIMAUpdateRequestProcessorTest extends SolrTestCaseJ4 {
     catch(SolrException expected){}
 
     try{
-      addDoc("uima-ignoreErrors", adoc(
+      addDoc(adoc(
             "id",
             "2312312321312",
             "text",
-            "SpellCheckComponent got improvement related to recent Lucene changes."));
+          "SpellCheckComponent got improvement related to recent Lucene changes."), UIMA_IGNORE_ERRORS_CHAIN);
     }
     catch(StringIndexOutOfBoundsException e){  // SOLR-2579
       fail("exception shouldn't be raised");

