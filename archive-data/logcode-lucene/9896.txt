GitDiffStart: 36076f67c631811f658d908a9e39fd6975e5b9c3 | Fri Jan 11 13:59:59 2013 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java b/lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java
index 10511db..f24778e 100644
--- a/lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java
+++ b/lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java
@@ -606,5 +606,43 @@ class MultiDocValues extends DocValues {
     return new MultiSource(slices, starts, true, type);
   }
   
+  public static NumericDocValues simpleNormValues(final IndexReader r, final String field) throws IOException {
+    FieldInfo fi = MultiFields.getMergedFieldInfos(r).fieldInfo(field);
+    if (fi == null || fi.hasNorms() == false) {
+      return null;
+    }
+    final List<AtomicReaderContext> leaves = r.leaves();
+    boolean anyReal = false;
+    for(AtomicReaderContext ctx : leaves) {
+      NumericDocValues norms = ctx.reader().simpleNormValues(field);
+
+      if (norms == null) {
+        norms = NumericDocValues.EMPTY;
+      } else {
+        anyReal = true;
+      }
+    }
+    
+    assert anyReal; // nocommit: is this assert safe?
+
+    return new NumericDocValues() {
+      @Override
+      public long get(int docID) {
+        int subIndex = ReaderUtil.subIndex(docID, leaves);
+        NumericDocValues norms;
+        try {
+          norms = leaves.get(subIndex).reader().simpleNormValues(field);
+        } catch (IOException ioe) {
+          throw new RuntimeException(ioe);
+        }
+        if (norms == null) { // WTF? should be EMPTY?
+          return 0;
+        } else {
+          return norms.get(docID - leaves.get(subIndex).docBase);
+        }
+      }
+    };
+  }
+  
   
 }
diff --git a/lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField.java b/lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField.java
index e098848..eaffef6 100644
--- a/lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField.java
+++ b/lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField.java
@@ -61,15 +61,7 @@ final class NormsConsumerPerField extends InvertedDocEndConsumerPerField impleme
       }
 
       long norm = similarity.computeSimpleNorm(fieldState);
-      if (norm != -1) {
-        // nocommit is -1 really a safe "not set" value!?
-        // nocommit shouldn't we require that it's either
-        // all -1's or none?  a sim can't not compute norms
-        // for only some docs?  hmm unless the field is
-        // missing for this doc... but then finish() isn't
-        // called?
-        simpleNormsWriter.addValue(docState.docID, norm);
-      }
+      simpleNormsWriter.addValue(docState.docID, norm);
     }
   }
   
diff --git a/lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders.java b/lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders.java
index dcd26d1..9412e4d 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders.java
@@ -281,7 +281,7 @@ final class SegmentCoreReaders {
       // Field does not exist
       return null;
     }
-    if (!fi.isIndexed() || fi.omitsNorms()) {
+    if (!fi.hasNorms()) {
       return null;
     }
     // nocommit change to assert != null!!
diff --git a/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java b/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java
index 01d25ba..6573bdc 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java
@@ -228,7 +228,7 @@ final class SegmentMerger {
       boolean success = false;
       try {
         for (FieldInfo field : mergeState.fieldInfos) {
-          if (field.isIndexed() && !field.omitsNorms() && field.getNormType() != null) {
+          if (field.hasNorms()) {
             List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();
             for (AtomicReader reader : mergeState.readers) {
               NumericDocValues norms = reader.simpleNormValues(field.name);
diff --git a/lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java b/lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java
index da52b65..b21cbfb 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java
@@ -91,19 +91,19 @@ public final class SlowCompositeReaderWrapper extends AtomicReader {
   @Override
   public NumericDocValues getNumericDocValues(String field) throws IOException {
     ensureOpen();
-    return null;
+    return null; // nocommit: UOE
   }
 
   @Override
   public BinaryDocValues getBinaryDocValues(String field) throws IOException {
     ensureOpen();
-    return null;
+    return null; // nocommit: UOE
   }
 
   @Override
   public SortedDocValues getSortedDocValues(String field) throws IOException {
     ensureOpen();
-    return null;
+    return null; // nocommit: UOE
   }
   
   @Override
@@ -121,7 +121,7 @@ public final class SlowCompositeReaderWrapper extends AtomicReader {
   public NumericDocValues simpleNormValues(String field) throws IOException {
     ensureOpen();
     // nocommit hmm
-    return null;
+    return MultiDocValues.simpleNormValues(in, field);
   }
   
   @Override
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java b/lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java
index 0ec2d35..e352457 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java
@@ -537,10 +537,8 @@ public class TestDuelingCodecs extends LuceneTestCase {
       if (leftNorms != null && rightNorms != null) {
         assertDocValues(leftReader.maxDoc(), leftNorms, rightNorms);
       } else {
-        // nocommit: figure out WTF is going on here, maybe a bug in MultiSimpleDocValues?
-        // ant test  -Dtestcase=TestDuelingCodecs -Dtests.method=testEquals -Dtests.seed=CCA808E6ADF64354 -Dtests.slow=true -Dtests.codec=Lucene41 -Dtests.locale=en_GB -Dtests.timezone=Asia/Pyongyang -Dtests.file.encoding=US-ASCII
-        assertNull(leftNorms);
-        assertNull(rightNorms);
+        assertNull(info, leftNorms);
+        assertNull(info, rightNorms);
       }
     }
   }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues.java b/lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues.java
index 72cfef9..12569c8 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues.java
@@ -23,41 +23,10 @@ import java.util.List;
 import org.apache.lucene.util.BytesRef;
 
 public class MultiSimpleDocValues {
-
+  
+  // moved to src/java so SlowWrapper can use it... uggggggh
   public static NumericDocValues simpleNormValues(final IndexReader r, final String field) throws IOException {
-    final List<AtomicReaderContext> leaves = r.leaves();
-    boolean anyReal = false;
-    for(AtomicReaderContext ctx : leaves) {
-      NumericDocValues norms = ctx.reader().simpleNormValues(field);
-
-      if (norms == null) {
-        norms = NumericDocValues.EMPTY;
-      } else {
-        anyReal = true;
-      }
-    }
-
-    if (!anyReal) {
-      return null;
-    } else {
-      return new NumericDocValues() {
-        @Override
-        public long get(int docID) {
-          int subIndex = ReaderUtil.subIndex(docID, leaves);
-          NumericDocValues norms;
-          try {
-            norms = leaves.get(subIndex).reader().simpleNormValues(field);
-          } catch (IOException ioe) {
-            throw new RuntimeException(ioe);
-          }
-          if (norms == null) {
-            return 0;
-          } else {
-            return norms.get(docID - leaves.get(subIndex).docBase);
-          }
-        }
-      };
-    }
+    return MultiDocValues.simpleNormValues(r, field);
   }
 
   public static NumericDocValues simpleNumericValues(final IndexReader r, final String field) throws IOException {

