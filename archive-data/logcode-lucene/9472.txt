GitDiffStart: 612a70c3ecd1125ab549bc15d6fb2fa8434b659d | Mon Feb 11 06:23:12 2013 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer.java b/lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer.java
index fa08a12..a124866 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer.java
@@ -34,9 +34,9 @@ import org.apache.lucene.index.SegmentWriteState;
 import org.apache.lucene.index.SortedDocValues;
 import org.apache.lucene.index.SortedDocValuesTermsEnum;
 import org.apache.lucene.index.SortedSetDocValues;
-import org.apache.lucene.index.SortedSetDocValues.OrdIterator;
 import org.apache.lucene.index.SortedSetDocValuesTermsEnum;
 import org.apache.lucene.index.TermsEnum;
+import org.apache.lucene.util.ArrayUtil;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.FixedBitSet;
@@ -408,12 +408,11 @@ public abstract class DocValuesConsumer implements Closeable {
           throw new UnsupportedOperationException();
         }
         FixedBitSet bitset = new FixedBitSet((int)dv.getValueCount());
-        OrdIterator iterator = null;
         for (int i = 0; i < reader.maxDoc(); i++) {
           if (liveDocs.get(i)) {
-            iterator = dv.getOrds(i, iterator);
+            dv.setDocument(i);
             long ord;
-            while ((ord = iterator.nextOrd()) != OrdIterator.NO_MORE_ORDS) {
+            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {
               bitset.set((int)ord); // nocommit
             }
           }
@@ -468,7 +467,6 @@ public abstract class DocValuesConsumer implements Closeable {
               int docIDUpto;
               int nextValue;
               AtomicReader currentReader;
-              OrdIterator iterator;
               Bits currentLiveDocs;
               boolean nextIsSet;
 
@@ -511,9 +509,10 @@ public abstract class DocValuesConsumer implements Closeable {
 
                   if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {
                     nextIsSet = true;
-                    iterator = dvs[readerUpto].getOrds(docIDUpto, iterator);
+                    SortedSetDocValues dv = dvs[readerUpto];
+                    dv.setDocument(docIDUpto);
                     nextValue = 0;
-                    while (iterator.nextOrd() != OrdIterator.NO_MORE_ORDS) {
+                    while (dv.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {
                       nextValue++;
                     }
                     docIDUpto++;
@@ -535,9 +534,11 @@ public abstract class DocValuesConsumer implements Closeable {
               int docIDUpto;
               long nextValue;
               AtomicReader currentReader;
-              OrdIterator iterator;
               Bits currentLiveDocs;
               boolean nextIsSet;
+              long ords[] = new long[8];
+              int ordUpto;
+              int ordLength;
 
               @Override
               public boolean hasNext() {
@@ -566,17 +567,11 @@ public abstract class DocValuesConsumer implements Closeable {
                     return false;
                   }
                   
-                  if (iterator != null) {
-                    final long segmentOrd = iterator.nextOrd();
-                    if (segmentOrd != OrdIterator.NO_MORE_ORDS) {
-                      nextValue = map.getGlobalOrd(readerUpto, segmentOrd);
-                      nextIsSet = true;
-                      return true;
-                    } else {
-                     // nocommit: nulling is a hack to prevent calling next() after NO_MORE was already returned...
-                      iterator = null;
-                      docIDUpto++;
-                    }
+                  if (ordUpto < ordLength) {
+                    nextValue = ords[ordUpto];
+                    ordUpto++;
+                    nextIsSet = true;
+                    return true;
                   }
 
                   if (currentReader == null || docIDUpto == currentReader.maxDoc()) {
@@ -586,13 +581,23 @@ public abstract class DocValuesConsumer implements Closeable {
                       currentLiveDocs = currentReader.getLiveDocs();
                     }
                     docIDUpto = 0;
-                    iterator = null;
                     continue;
                   }
                   
                   if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {
                     assert docIDUpto < currentReader.maxDoc();
-                    iterator = dvs[readerUpto].getOrds(docIDUpto, iterator);
+                    SortedSetDocValues dv = dvs[readerUpto];
+                    dv.setDocument(docIDUpto);
+                    ordUpto = ordLength = 0;
+                    long ord;
+                    while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {
+                      if (ordLength == ords.length) {
+                        ords = ArrayUtil.grow(ords, ordLength+1);
+                      }
+                      ords[ordLength] = map.getGlobalOrd(readerUpto, ord);
+                      ordLength++;
+                    }
+                    docIDUpto++;
                     continue;
                   }
 
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer.java
index a4e3c5b..10f596d 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer.java
@@ -32,7 +32,6 @@ import org.apache.lucene.index.NumericDocValues;
 import org.apache.lucene.index.SegmentReadState;
 import org.apache.lucene.index.SortedDocValues;
 import org.apache.lucene.index.SortedSetDocValues;
-import org.apache.lucene.index.SortedSetDocValues.OrdIterator;
 import org.apache.lucene.store.ByteArrayDataInput;
 import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.util.BytesRef;
@@ -310,18 +309,26 @@ class Lucene42DocValuesProducer extends DocValuesProducer {
     final Arc<Long> scratchArc = new Arc<Long>();
     final IntsRef scratchInts = new IntsRef();
     final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); 
+    final BytesRef ref = new BytesRef();
+    final ByteArrayDataInput input = new ByteArrayDataInput();
     return new SortedSetDocValues() {
+      long currentOrd;
 
       @Override
-      public OrdIterator getOrds(int docID, OrdIterator reuse) {
-        final Lucene42OrdsIterator iterator;
-        if (reuse instanceof Lucene42OrdsIterator) {
-          iterator = (Lucene42OrdsIterator) reuse;
+      public long nextOrd() {
+        if (input.eof()) {
+          return NO_MORE_ORDS;
         } else {
-          iterator = new Lucene42OrdsIterator(docToOrds);
+          currentOrd += input.readVLong();
+          return currentOrd;
         }
-        iterator.reset(docToOrds, docID);
-        return iterator;
+      }
+      
+      @Override
+      public void setDocument(int docID) {
+        docToOrds.get(docID, ref);
+        input.reset(ref.bytes, ref.offset, ref.length);
+        currentOrd = 0;
       }
 
       @Override
@@ -361,34 +368,6 @@ class Lucene42DocValuesProducer extends DocValuesProducer {
       }
     };
   }
-  
-  static class Lucene42OrdsIterator extends OrdIterator {
-    BinaryDocValues data;
-    final BytesRef ref = new BytesRef();
-    final ByteArrayDataInput input = new ByteArrayDataInput();
-    long currentOrd;
-    
-    Lucene42OrdsIterator(BinaryDocValues data) {
-      this.data = data;
-    }
-    
-    @Override
-    public long nextOrd() {
-      if (input.eof()) {
-        return NO_MORE_ORDS;
-      } else {
-        currentOrd += input.readVLong();
-        return currentOrd;
-      }
-    }
-    
-    void reset(BinaryDocValues data, int docid) {
-      this.data = data;
-      data.get(docid, ref);
-      input.reset(ref.bytes, ref.offset, ref.length);
-      currentOrd = 0;
-    }
-  }
 
   @Override
   public void close() throws IOException {
diff --git a/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java b/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
index c83c136..d5c00d9 100644
--- a/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
+++ b/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
@@ -33,7 +33,6 @@ import org.apache.lucene.codecs.Codec;
 import org.apache.lucene.codecs.PostingsFormat; // javadocs
 import org.apache.lucene.document.FieldType; // for javadocs
 import org.apache.lucene.index.FieldInfo.IndexOptions;
-import org.apache.lucene.index.SortedSetDocValues.OrdIterator;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.FSDirectory;
@@ -1339,12 +1338,11 @@ public class CheckIndex {
     // nocommit
     FixedBitSet seenOrds = new FixedBitSet((int)dv.getValueCount());
     long maxOrd2 = -1;
-    OrdIterator iterator = null;
     for (int i = 0; i < reader.maxDoc(); i++) {
-      iterator = dv.getOrds(i, iterator);
+      dv.setDocument(i);
       long lastOrd = -1;
       long ord;
-      while ((ord = iterator.nextOrd()) != OrdIterator.NO_MORE_ORDS) {
+      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {
         if (ord <= lastOrd) {
           throw new RuntimeException("ords out of order: " + ord + " <= " + lastOrd + " for doc: " + i);
         }
diff --git a/lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java b/lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java
index 2963d62..4295054 100644
--- a/lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java
+++ b/lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java
@@ -18,7 +18,6 @@ package org.apache.lucene.index;
  */
 
 import java.io.IOException;
-import java.util.Arrays;
 import java.util.List;
 
 import org.apache.lucene.index.MultiTermsEnum.TermsEnumIndex;
@@ -377,6 +376,7 @@ public class MultiDocValues {
     final int docStarts[];
     final SortedSetDocValues values[];
     final OrdinalMap mapping;
+    int currentSubIndex;
     
     MultiSortedSetDocValues(SortedSetDocValues values[], int docStarts[], OrdinalMap mapping) throws IOException {
       assert values.length == mapping.ordDeltas.length;
@@ -385,17 +385,21 @@ public class MultiDocValues {
       this.docStarts = docStarts;
       this.mapping = mapping;
     }
-       
+    
     @Override
-    public OrdIterator getOrds(int docID, OrdIterator reuse) {
-      MultiOrdIterator iterator;
-      if (reuse instanceof MultiOrdIterator) {
-        iterator = (MultiOrdIterator) reuse;
+    public long nextOrd() {
+      long segmentOrd = values[currentSubIndex].nextOrd();
+      if (segmentOrd == NO_MORE_ORDS) {
+        return segmentOrd;
       } else {
-        iterator = new MultiOrdIterator();
+        return mapping.getGlobalOrd(currentSubIndex, segmentOrd);
       }
-      iterator.reset(docID);
-      return iterator;
+    }
+
+    @Override
+    public void setDocument(int docID) {
+      currentSubIndex = ReaderUtil.subIndex(docID, docStarts);
+      values[currentSubIndex].setDocument(docID - docStarts[currentSubIndex]);
     }
  
     @Override
@@ -409,25 +413,5 @@ public class MultiDocValues {
     public long getValueCount() {
       return mapping.getValueCount();
     }
-    
-    class MultiOrdIterator extends OrdIterator {
-      private OrdIterator inner;
-      private int subIndex;
-
-      @Override
-      public long nextOrd() {
-        long segmentOrd = inner.nextOrd();
-        if (segmentOrd == NO_MORE_ORDS) {
-          return NO_MORE_ORDS;
-        } else {
-          return mapping.getGlobalOrd(subIndex, segmentOrd);
-        }
-      }
-      
-      void reset(int docID) {
-        subIndex = ReaderUtil.subIndex(docID, docStarts);
-        inner = values[subIndex].getOrds(docID - docStarts[subIndex], inner);
-      }
-    }
   }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/index/SortedSetDocValues.java b/lucene/core/src/java/org/apache/lucene/index/SortedSetDocValues.java
index a204c7c..cd6d5a7 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SortedSetDocValues.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SortedSetDocValues.java
@@ -33,19 +33,27 @@ public abstract class SortedSetDocValues {
    * constructors, typically implicit.) */
   protected SortedSetDocValues() {}
 
-  /**
-   * Returns an iterator over the ordinals for the specified docID.
-   * @param  docID document ID to lookup
-   * @return iterator over ordinals for the document: these are dense, 
-   *         start at 0, then increment by 1 for the next value in sorted order. 
+  public static final long NO_MORE_ORDS = Long.MAX_VALUE;
+
+  /** 
+   * Returns the next ordinal for the current document (previously
+   * set by {@link #setDocument(int)}.
+   * @return next ordinal for the document, or {@link #NO_MORE_ORDS}. 
+   *         ordinals are dense, start at 0, then increment by 1 for 
+   *         the next value in sorted order. 
    */
-  // nocommit: can we think of a better api? this asks for reuse bugs etc.
-  public abstract OrdIterator getOrds(int docID, OrdIterator reuse);
+  public abstract long nextOrd();
+  
+  /** 
+   * Sets iteration to the specified docID 
+   * @param docID document ID 
+   */
+  public abstract void setDocument(int docID);
 
   /** Retrieves the value for the specified ordinal.
    * @param ord ordinal to lookup
    * @param result will be populated with the ordinal's value
-   * @see #getOrds
+   * @see #nextOrd
    */
   public abstract void lookupOrd(long ord, BytesRef result);
 
@@ -57,14 +65,18 @@ public abstract class SortedSetDocValues {
   public abstract long getValueCount();
 
 
-  /** An empty SortedDocValues which returns {@link OrdIterator#EMPTY} for every document */
+  /** An empty SortedDocValues which returns {@link #NO_MORE_ORDS} for every document */
   public static final SortedSetDocValues EMPTY = new SortedSetDocValues() {
+
     @Override
-    public OrdIterator getOrds(int docID, OrdIterator reuse) {
-      return OrdIterator.EMPTY;
+    public long nextOrd() {
+      return NO_MORE_ORDS;
     }
 
     @Override
+    public void setDocument(int docID) {}
+
+    @Override
     public void lookupOrd(long ord, BytesRef result) {
       throw new IndexOutOfBoundsException();
     }
@@ -102,20 +114,4 @@ public abstract class SortedSetDocValues {
 
     return -(low + 1);  // key not found.
   }
-  
-  /** An iterator over the ordinals in a document (in increasing order) */
-  public static abstract class OrdIterator {
-    /** Indicates enumeration has ended: no more ordinals for this document */
-    public static final long NO_MORE_ORDS = Long.MAX_VALUE;
-    /** An iterator that always returns {@link #NO_MORE_ORDS} */
-    public static final OrdIterator EMPTY = new OrdIterator() {
-      @Override
-      public long nextOrd() {
-        return NO_MORE_ORDS;
-      }
-    };
-    
-    /** Returns next ordinal, or {@link #NO_MORE_ORDS} */
-    public abstract long nextOrd();
-  }
 }
diff --git a/lucene/core/src/test/org/apache/lucene/TestDemoDocValue.java b/lucene/core/src/test/org/apache/lucene/TestDemoDocValue.java
index cd071e8..09a5131 100644
--- a/lucene/core/src/test/org/apache/lucene/TestDemoDocValue.java
+++ b/lucene/core/src/test/org/apache/lucene/TestDemoDocValue.java
@@ -37,10 +37,8 @@ import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.RandomIndexWriter;
-import org.apache.lucene.index.SerialMergeScheduler;
 import org.apache.lucene.index.SortedSetDocValues;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.index.SortedSetDocValues.OrdIterator;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
@@ -85,9 +83,9 @@ public class TestDemoDocValue extends LuceneTestCase {
     // Now search the index:
     DirectoryReader ireader = DirectoryReader.open(directory); // read-only=true
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
-    OrdIterator oi = dv.getOrds(0, null);
-    assertEquals(0, oi.nextOrd());
-    assertEquals(OrdIterator.NO_MORE_ORDS, oi.nextOrd());
+    dv.setDocument(0);
+    assertEquals(0, dv.nextOrd());
+    assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());
     
     BytesRef bytes = new BytesRef();
     dv.lookupOrd(0, bytes);
@@ -120,17 +118,17 @@ public class TestDemoDocValue extends LuceneTestCase {
     // Now search the index:
     DirectoryReader ireader = DirectoryReader.open(directory); // read-only=true
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
-    OrdIterator oi = dv.getOrds(0, null);
-    assertEquals(0, oi.nextOrd());
-    assertEquals(OrdIterator.NO_MORE_ORDS, oi.nextOrd());
+    dv.setDocument(0);
+    assertEquals(0, dv.nextOrd());
+    assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());
     
     BytesRef bytes = new BytesRef();
     dv.lookupOrd(0, bytes);
     assertEquals(new BytesRef("hello"), bytes);
     
-    oi = dv.getOrds(1, oi);
-    assertEquals(1, oi.nextOrd());
-    assertEquals(OrdIterator.NO_MORE_ORDS, oi.nextOrd());
+    dv.setDocument(1);
+    assertEquals(1, dv.nextOrd());
+    assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());
     
     dv.lookupOrd(1, bytes);
     assertEquals(new BytesRef("world"), bytes);
@@ -158,10 +156,10 @@ public class TestDemoDocValue extends LuceneTestCase {
     // Now search the index:
     DirectoryReader ireader = DirectoryReader.open(directory); // read-only=true
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
-    OrdIterator oi = dv.getOrds(0, null);
-    assertEquals(0, oi.nextOrd());
-    assertEquals(1, oi.nextOrd());
-    assertEquals(OrdIterator.NO_MORE_ORDS, oi.nextOrd());
+    dv.setDocument(0);
+    assertEquals(0, dv.nextOrd());
+    assertEquals(1, dv.nextOrd());
+    assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());
     
     BytesRef bytes = new BytesRef();
     dv.lookupOrd(0, bytes);
@@ -191,10 +189,10 @@ public class TestDemoDocValue extends LuceneTestCase {
     // Now search the index:
     DirectoryReader ireader = DirectoryReader.open(directory); // read-only=true
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
-    OrdIterator oi = dv.getOrds(0, null);
-    assertEquals(0, oi.nextOrd());
-    assertEquals(1, oi.nextOrd());
-    assertEquals(OrdIterator.NO_MORE_ORDS, oi.nextOrd());
+    dv.setDocument(0);
+    assertEquals(0, dv.nextOrd());
+    assertEquals(1, dv.nextOrd());
+    assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());
     
     BytesRef bytes = new BytesRef();
     dv.lookupOrd(0, bytes);
@@ -234,15 +232,15 @@ public class TestDemoDocValue extends LuceneTestCase {
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
     assertEquals(3, dv.getValueCount());
     
-    OrdIterator oi = dv.getOrds(0, null);
-    assertEquals(1, oi.nextOrd());
-    assertEquals(2, oi.nextOrd());
-    assertEquals(OrdIterator.NO_MORE_ORDS, oi.nextOrd());
+    dv.setDocument(0);
+    assertEquals(1, dv.nextOrd());
+    assertEquals(2, dv.nextOrd());
+    assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());
     
-    oi = dv.getOrds(1, null);
-    assertEquals(0, oi.nextOrd());
-    assertEquals(1, oi.nextOrd());
-    assertEquals(OrdIterator.NO_MORE_ORDS, oi.nextOrd());
+    dv.setDocument(1);
+    assertEquals(0, dv.nextOrd());
+    assertEquals(1, dv.nextOrd());
+    assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());
     
     BytesRef bytes = new BytesRef();
     dv.lookupOrd(0, bytes);
@@ -279,9 +277,9 @@ public class TestDemoDocValue extends LuceneTestCase {
     // Now search the index:
     DirectoryReader ireader = DirectoryReader.open(directory); // read-only=true
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
-    OrdIterator oi = dv.getOrds(0, null);
-    assertEquals(0, oi.nextOrd());
-    assertEquals(OrdIterator.NO_MORE_ORDS, oi.nextOrd());
+    dv.setDocument(0);
+    assertEquals(0, dv.nextOrd());
+    assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());
     
     BytesRef bytes = new BytesRef();
     dv.lookupOrd(0, bytes);
@@ -315,9 +313,9 @@ public class TestDemoDocValue extends LuceneTestCase {
     // Now search the index:
     DirectoryReader ireader = DirectoryReader.open(directory); // read-only=true
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
-    OrdIterator oi = dv.getOrds(0, null);
-    assertEquals(0, oi.nextOrd());
-    assertEquals(OrdIterator.NO_MORE_ORDS, oi.nextOrd());
+    dv.setDocument(0);
+    assertEquals(0, dv.nextOrd());
+    assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());
     
     BytesRef bytes = new BytesRef();
     dv.lookupOrd(0, bytes);
@@ -350,9 +348,9 @@ public class TestDemoDocValue extends LuceneTestCase {
     // Now search the index:
     DirectoryReader ireader = DirectoryReader.open(directory); // read-only=true
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
-    OrdIterator oi = dv.getOrds(1, null);
-    assertEquals(0, oi.nextOrd());
-    assertEquals(OrdIterator.NO_MORE_ORDS, oi.nextOrd());
+    dv.setDocument(1);
+    assertEquals(0, dv.nextOrd());
+    assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());
     
     BytesRef bytes = new BytesRef();
     dv.lookupOrd(0, bytes);
@@ -386,9 +384,9 @@ public class TestDemoDocValue extends LuceneTestCase {
     // Now search the index:
     DirectoryReader ireader = DirectoryReader.open(directory); // read-only=true
     SortedSetDocValues dv = getOnlySegmentReader(ireader).getSortedSetDocValues("field");
-    OrdIterator oi = dv.getOrds(1, null);
-    assertEquals(0, oi.nextOrd());
-    assertEquals(OrdIterator.NO_MORE_ORDS, oi.nextOrd());
+    dv.setDocument(1);
+    assertEquals(0, dv.nextOrd());
+    assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());
     
     BytesRef bytes = new BytesRef();
     dv.lookupOrd(0, bytes);
@@ -456,18 +454,19 @@ public class TestDemoDocValue extends LuceneTestCase {
     for (AtomicReaderContext context : ir.leaves()) {
       AtomicReader r = context.reader();
       SortedSetDocValues docValues = r.getSortedSetDocValues("dv");
-      OrdIterator ords = null;
       BytesRef scratch = new BytesRef();
       for (int i = 0; i < r.maxDoc(); i++) {
         String stringValues[] = r.document(i).getValues("stored");
-        ords = docValues.getOrds(i, ords);
+        if (docValues != null) {
+          docValues.setDocument(i);
+        }
         for (int j = 0; j < stringValues.length; j++) {
-          long ord = ords.nextOrd();
-          assert ord != OrdIterator.NO_MORE_ORDS;
+          long ord = docValues.nextOrd();
+          assert ord != SortedSetDocValues.NO_MORE_ORDS;
           docValues.lookupOrd(ord, scratch);
           assertEquals(stringValues[j], scratch.utf8ToString());
         }
-        assert ords.nextOrd() == OrdIterator.NO_MORE_ORDS;
+        assert docValues == null || docValues.nextOrd() == SortedSetDocValues.NO_MORE_ORDS;
       }
     }
     ir.close();
diff --git a/lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.java b/lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.java
index ca98dd6..2734f40 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.java
@@ -3,7 +3,6 @@ package org.apache.lucene.index;
 import java.io.IOException;
 import java.util.Iterator;
 
-import org.apache.lucene.index.SortedSetDocValues.OrdIterator;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
@@ -460,6 +459,7 @@ public class AssertingAtomicReader extends FilterAtomicReader {
     private final SortedSetDocValues in;
     private final int maxDoc;
     private final long valueCount;
+    long lastOrd = NO_MORE_ORDS;
     
     public AssertingSortedSetDocValues(SortedSetDocValues in, int maxDoc) {
       this.in = in;
@@ -467,16 +467,22 @@ public class AssertingAtomicReader extends FilterAtomicReader {
       this.valueCount = in.getValueCount();
       assert valueCount >= 0;
     }
+    
+    @Override
+    public long nextOrd() {
+      assert lastOrd != NO_MORE_ORDS;
+      long ord = in.nextOrd();
+      assert ord == NO_MORE_ORDS || ord < valueCount;
+      assert ord > lastOrd;
+      lastOrd = ord;
+      return ord;
+    }
 
     @Override
-    public OrdIterator getOrds(int docID, OrdIterator reuse) {
+    public void setDocument(int docID) {
       assert docID >= 0 && docID < maxDoc : "docid=" + docID + ",maxDoc=" + maxDoc;
-      if (reuse instanceof AssertingOrdIterator) {
-        reuse = ((AssertingOrdIterator) reuse).in;
-      }
-      OrdIterator iterator = in.getOrds(docID, reuse);
-      assert iterator != null;
-      return new AssertingOrdIterator(iterator, valueCount);
+      in.setDocument(docID);
+      lastOrd = -1;
     }
 
     @Override
@@ -503,29 +509,6 @@ public class AssertingAtomicReader extends FilterAtomicReader {
       return result;
     }
   }
-  
-  /** Wraps a OrdIterator but with additional asserts */
-  public static class AssertingOrdIterator extends OrdIterator {
-    final OrdIterator in;
-    final long valueCount;
-    long lastOrd = Long.MIN_VALUE;
-    
-    AssertingOrdIterator(OrdIterator in, long valueCount) {
-      this.in = in;
-      this.valueCount = valueCount;
-      assert lastOrd != NO_MORE_ORDS;
-    }
-    
-    @Override
-    public long nextOrd() {
-      assert lastOrd != NO_MORE_ORDS;
-      long ord = in.nextOrd();
-      assert ord == NO_MORE_ORDS || ord < valueCount;
-      assert ord > lastOrd;
-      lastOrd = ord;
-      return ord;
-    }
-  }
 
   @Override
   public NumericDocValues getNumericDocValues(String field) throws IOException {

