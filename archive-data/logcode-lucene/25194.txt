GitDiffStart: 2e455a08a645ae2da36fc7486030f9b344b189cc | Thu Mar 25 13:49:49 2004 +0000
diff --git a/src/java/org/apache/lucene/index/TermInfosWriter.java b/src/java/org/apache/lucene/index/TermInfosWriter.java
index c170d9c..06320c5 100644
--- a/src/java/org/apache/lucene/index/TermInfosWriter.java
+++ b/src/java/org/apache/lucene/index/TermInfosWriter.java
@@ -1,59 +1,22 @@
 package org.apache.lucene.index;
 
-/* ====================================================================
- * The Apache Software License, Version 1.1
+/**
+ * Copyright 2004 The Apache Software Foundation
  *
- * Copyright (c) 2001 The Apache Software Foundation.  All rights
- * reserved.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
  *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation" and
- *    "Apache Lucene" must not be used to endorse or promote products
- *    derived from this software without prior written permission. For
- *    written permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache",
- *    "Apache Lucene", nor may "Apache" appear in their name, without
- *    prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
+
 import java.io.IOException;
 import org.apache.lucene.store.OutputStream;
 import org.apache.lucene.store.Directory;
@@ -106,12 +69,12 @@ final class TermInfosWriter {
   }
 
   private TermInfosWriter(Directory directory, String segment, FieldInfos fis,
-			  boolean isIndex) throws IOException {
+        boolean isIndex) throws IOException {
     initialize(directory, segment, fis, isIndex);
   }
 
   private void initialize(Directory directory, String segment, FieldInfos fis,
-		     boolean isi) throws IOException {
+         boolean isi) throws IOException {
     fieldInfos = fis;
     isIndex = isi;
     output = directory.createFile(segment + (isIndex ? ".tii" : ".tis"));
@@ -136,10 +99,10 @@ final class TermInfosWriter {
       throw new IOException("proxPointer out of order");
 
     if (!isIndex && size % indexInterval == 0)
-      other.add(lastTerm, lastTi);		  // add an index term
+      other.add(lastTerm, lastTi);                      // add an index term
 
-    writeTerm(term);				  // write term
-    output.writeVInt(ti.docFreq);		  // write doc freq
+    writeTerm(term);                                    // write term
+    output.writeVInt(ti.docFreq);                       // write doc freq
     output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers
     output.writeVLong(ti.proxPointer - lastTi.proxPointer);
 
@@ -157,14 +120,14 @@ final class TermInfosWriter {
     lastTi.set(ti);
     size++;
   }
-  
+
   private final void writeTerm(Term term)
        throws IOException {
     int start = StringHelper.stringDifference(lastTerm.text, term.text);
     int length = term.text.length() - start;
 
-    output.writeVInt(start);			  // write shared prefix length
-    output.writeVInt(length);			  // write delta length
+    output.writeVInt(start);                   // write shared prefix length
+    output.writeVInt(length);                  // write delta length
     output.writeChars(term.text, start, length);  // write delta chars
 
     output.writeVInt(fieldInfos.fieldNumber(term.field)); // write field num
@@ -172,11 +135,11 @@ final class TermInfosWriter {
     lastTerm = term;
   }
 
-  
+
 
   /** Called to complete TermInfos creation. */
   final void close() throws IOException {
-    output.seek(4);				  // write size after format
+    output.seek(4);          // write size after format
     output.writeLong(size);
     output.close();
 

