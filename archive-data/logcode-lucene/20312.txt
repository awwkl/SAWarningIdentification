GitDiffStart: 673b90e651561f74611475c396112e0a133824e7 | Fri May 1 09:55:01 2009 +0000
diff --git a/contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.java b/contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.java
index 2e55f61..5e63146 100644
--- a/contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.java
+++ b/contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.java
@@ -305,7 +305,7 @@ public final class TrieUtils {
    * {@link org.apache.lucene.search.BooleanQuery} for each call to its
    * {@link LongRangeBuilder#addRange(String,String)}
    * method.
-   * <p>This method is used by {@link LongTrieRangeFilter}.
+   * <p>This method is used by {@link LongTrieRangeQuery}.
    */
   public static void splitLongRange(final LongRangeBuilder builder,
     final int precisionStep,  final long minBound, final long maxBound
@@ -321,7 +321,7 @@ public final class TrieUtils {
    * {@link org.apache.lucene.search.BooleanQuery} for each call to its
    * {@link IntRangeBuilder#addRange(String,String)}
    * method.
-   * <p>This method is used by {@link IntTrieRangeFilter}.
+   * <p>This method is used by {@link IntTrieRangeQuery}.
    */
   public static void splitIntRange(final IntRangeBuilder builder,
     final int precisionStep,  final int minBound, final int maxBound
diff --git a/contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeQuery.java b/contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeQuery.java
index cc845dd..cd23a60 100644
--- a/contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeQuery.java
+++ b/contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeQuery.java
@@ -34,6 +34,7 @@ import org.apache.lucene.search.DocIdSet;
 import org.apache.lucene.search.RangeQuery;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.MatchAllDocsQuery;
+import org.apache.lucene.search.QueryUtils;
 import org.apache.lucene.util.LuceneTestCase;
 
 public class TestIntTrieRangeQuery extends LuceneTestCase {
@@ -368,4 +369,34 @@ public class TestIntTrieRangeQuery extends LuceneTestCase {
     testSorting(2);
   }
   
+  public void testEqualsAndHash() throws Exception {
+    QueryUtils.checkHashEquals(new IntTrieRangeQuery("test1", 4, new Integer(10), new Integer(20), true, true));
+    QueryUtils.checkHashEquals(new IntTrieRangeQuery("test2", 4, new Integer(10), new Integer(20), false, true));
+    QueryUtils.checkHashEquals(new IntTrieRangeQuery("test3", 4, new Integer(10), new Integer(20), true, false));
+    QueryUtils.checkHashEquals(new IntTrieRangeQuery("test4", 4, new Integer(10), new Integer(20), false, false));
+    QueryUtils.checkHashEquals(new IntTrieRangeQuery("test5", 4, new Integer(10), null, true, true));
+    QueryUtils.checkHashEquals(new IntTrieRangeQuery("test6", 4, null, new Integer(20), true, true));
+    QueryUtils.checkHashEquals(new IntTrieRangeQuery("test7", 4, null, null, true, true));
+    QueryUtils.checkEqual(
+      new IntTrieRangeQuery("test8", 4, new Integer(10), new Integer(20), true, true), 
+      new IntTrieRangeQuery("test8", 4, new Integer(10), new Integer(20), true, true)
+     );
+    QueryUtils.checkUnequal(
+      new IntTrieRangeQuery("test9", 4, new Integer(10), new Integer(20), true, true), 
+      new IntTrieRangeQuery("test9", 8, new Integer(10), new Integer(20), true, true)
+     );
+    QueryUtils.checkUnequal(
+      new IntTrieRangeQuery("test10a", 4, new Integer(10), new Integer(20), true, true), 
+      new IntTrieRangeQuery("test10b", 4, new Integer(10), new Integer(20), true, true)
+     );
+    QueryUtils.checkUnequal(
+      new IntTrieRangeQuery("test11", 4, new Integer(10), new Integer(20), true, true), 
+      new IntTrieRangeQuery("test11", 4, new Integer(20), new Integer(10), true, true)
+     );
+    QueryUtils.checkUnequal(
+      new IntTrieRangeQuery("test12", 4, new Integer(10), new Integer(20), true, true), 
+      new IntTrieRangeQuery("test12", 4, new Integer(10), new Integer(20), false, true)
+     );
+  }
+  
 }
diff --git a/contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeQuery.java b/contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeQuery.java
index 0d33cd2..3b1df89 100644
--- a/contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeQuery.java
+++ b/contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeQuery.java
@@ -34,6 +34,7 @@ import org.apache.lucene.search.DocIdSet;
 import org.apache.lucene.search.RangeQuery;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.MatchAllDocsQuery;
+import org.apache.lucene.search.QueryUtils;
 import org.apache.lucene.util.LuceneTestCase;
 
 public class TestLongTrieRangeQuery extends LuceneTestCase {
@@ -368,4 +369,34 @@ public class TestLongTrieRangeQuery extends LuceneTestCase {
     testSorting(2);
   }
   
+  public void testEqualsAndHash() throws Exception {
+    QueryUtils.checkHashEquals(new LongTrieRangeQuery("test1", 4, new Long(10L), new Long(20L), true, true));
+    QueryUtils.checkHashEquals(new LongTrieRangeQuery("test2", 4, new Long(10L), new Long(20L), false, true));
+    QueryUtils.checkHashEquals(new LongTrieRangeQuery("test3", 4, new Long(10L), new Long(20L), true, false));
+    QueryUtils.checkHashEquals(new LongTrieRangeQuery("test4", 4, new Long(10L), new Long(20L), false, false));
+    QueryUtils.checkHashEquals(new LongTrieRangeQuery("test5", 4, new Long(10L), null, true, true));
+    QueryUtils.checkHashEquals(new LongTrieRangeQuery("test6", 4, null, new Long(20L), true, true));
+    QueryUtils.checkHashEquals(new LongTrieRangeQuery("test7", 4, null, null, true, true));
+    QueryUtils.checkEqual(
+      new LongTrieRangeQuery("test8", 4, new Long(10L), new Long(20L), true, true), 
+      new LongTrieRangeQuery("test8", 4, new Long(10L), new Long(20L), true, true)
+     );
+    QueryUtils.checkUnequal(
+      new LongTrieRangeQuery("test9", 4, new Long(10L), new Long(20L), true, true), 
+      new LongTrieRangeQuery("test9", 8, new Long(10L), new Long(20L), true, true)
+     );
+    QueryUtils.checkUnequal(
+      new LongTrieRangeQuery("test10a", 4, new Long(10L), new Long(20L), true, true), 
+      new LongTrieRangeQuery("test10b", 4, new Long(10L), new Long(20L), true, true)
+     );
+    QueryUtils.checkUnequal(
+      new LongTrieRangeQuery("test11", 4, new Long(10L), new Long(20L), true, true), 
+      new LongTrieRangeQuery("test11", 4, new Long(20L), new Long(10L), true, true)
+     );
+    QueryUtils.checkUnequal(
+      new LongTrieRangeQuery("test12", 4, new Long(10L), new Long(20L), true, true), 
+      new LongTrieRangeQuery("test12", 4, new Long(10L), new Long(20L), false, true)
+     );
+  }
+  
 }

