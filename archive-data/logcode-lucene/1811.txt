GitDiffStart: 7ff31daeb05765e9d9ba6cf481f7d417dad8ae23 | Mon Feb 15 18:44:07 2016 -0500
diff --git a/lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase.java b/lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase.java
index d02ea0b1..6b371b3 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase.java
@@ -34,51 +34,51 @@ public abstract class BaseMergePolicyTestCase extends LuceneTestCase {
   protected abstract MergePolicy mergePolicy();
 
   public void testForceMergeNotNeeded() throws IOException {
-    Directory dir = newDirectory();
-    final AtomicBoolean mayMerge = new AtomicBoolean(true);
-    final MergeScheduler mergeScheduler = new SerialMergeScheduler() {
-      @Override
-      synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {
-        if (mayMerge.get() == false) {
-          MergePolicy.OneMerge merge = writer.getNextMerge();
-          if (merge != null) {
-            System.out.println("TEST: we should not need any merging, yet merge policy returned merge " + merge);
-            throw new AssertionError();
-          }
-        }
+    try (Directory dir = newDirectory()) {
+      final AtomicBoolean mayMerge = new AtomicBoolean(true);
+      final MergeScheduler mergeScheduler = new SerialMergeScheduler() {
+          @Override
+          synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {
+            if (mayMerge.get() == false) {
+              MergePolicy.OneMerge merge = writer.getNextMerge();
+              if (merge != null) {
+                System.out.println("TEST: we should not need any merging, yet merge policy returned merge " + merge);
+                throw new AssertionError();
+              }
+            }
 
-        super.merge(writer, trigger, newMergesFound);
-      }
-    };
+            super.merge(writer, trigger, newMergesFound);
+          }
+        };
 
-    MergePolicy mp = mergePolicy();
-    assumeFalse("this test cannot tolerate random forceMerges", mp.toString().contains("MockRandomMergePolicy"));
-    mp.setNoCFSRatio(random().nextBoolean() ? 0 : 1);
+      MergePolicy mp = mergePolicy();
+      assumeFalse("this test cannot tolerate random forceMerges", mp.toString().contains("MockRandomMergePolicy"));
+      mp.setNoCFSRatio(random().nextBoolean() ? 0 : 1);
 
-    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));
-    iwc.setMergeScheduler(mergeScheduler);
-    iwc.setMergePolicy(mp);
+      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));
+      iwc.setMergeScheduler(mergeScheduler);
+      iwc.setMergePolicy(mp);
 
-    IndexWriter writer = new IndexWriter(dir, iwc);
-    final int numSegments = TestUtil.nextInt(random(), 2, 20);
-    for (int i = 0; i < numSegments; ++i) {
-      final int numDocs = TestUtil.nextInt(random(), 1, 5);
-      for (int j = 0; j < numDocs; ++j) {
-        writer.addDocument(new Document());
+      IndexWriter writer = new IndexWriter(dir, iwc);
+      final int numSegments = TestUtil.nextInt(random(), 2, 20);
+      for (int i = 0; i < numSegments; ++i) {
+        final int numDocs = TestUtil.nextInt(random(), 1, 5);
+        for (int j = 0; j < numDocs; ++j) {
+          writer.addDocument(new Document());
+        }
+        writer.getReader().close();
       }
-      writer.getReader().close();
-    }
-    for (int i = 5; i >= 0; --i) {
-      final int segmentCount = writer.getSegmentCount();
-      final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);
-      mayMerge.set(segmentCount > maxNumSegments);
-      if (VERBOSE) {
-        System.out.println("TEST: now forceMerge(maxNumSegments=" + maxNumSegments + ") vs segmentCount=" + segmentCount);
+      for (int i = 5; i >= 0; --i) {
+        final int segmentCount = writer.getSegmentCount();
+        final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);
+        mayMerge.set(segmentCount > maxNumSegments);
+        if (VERBOSE) {
+          System.out.println("TEST: now forceMerge(maxNumSegments=" + maxNumSegments + ") vs segmentCount=" + segmentCount);
+        }
+        writer.forceMerge(maxNumSegments);
       }
-      writer.forceMerge(maxNumSegments);
+      writer.close();
     }
-    writer.close();
-    dir.close();
   }
   
 }

