GitDiffStart: 581effd152bb62fa1066aa4c8acab7a3e297c63d | Mon Sep 26 17:15:36 2016 +0530
diff --git a/solr/solrj/src/java/org/apache/solr/common/params/CommonParams.java b/solr/solrj/src/java/org/apache/solr/common/params/CommonParams.java
index b830b41..411d40d 100644
--- a/solr/solrj/src/java/org/apache/solr/common/params/CommonParams.java
+++ b/solr/solrj/src/java/org/apache/solr/common/params/CommonParams.java
@@ -33,155 +33,155 @@ public interface CommonParams {
    * distributed search to ensure consistent time values are used across 
    * multiple sub-requests.
    */
-  public static final String NOW = "NOW";
+  String NOW = "NOW";
 
   /** 
    * Specifies the TimeZone used by the client for the purposes of 
    * any DateMath rounding that may take place when executing the request
    */
-  public static final String TZ = "TZ";
+  String TZ = "TZ";
 
   /** the Request Handler (formerly known as the Query Type) - which Request Handler should handle the request */
-  public static final String QT ="qt";
+  String QT ="qt";
   
   /** the response writer type - the format of the response */
-  public static final String WT ="wt";
+  String WT ="wt";
   
   /** query string */
-  public static final String Q ="q";
+  String Q ="q";
 
   /** rank query */
-  public static final String RQ ="rq";
+  String RQ ="rq";
   
   /** distrib string */
-  public static final String DISTRIB = "distrib";
+  String DISTRIB = "distrib";
   
   /** sort order */
-  public static final String SORT ="sort";
+  String SORT ="sort";
   
   /** Lucene query string(s) for filtering the results without affecting scoring */
-  public static final String FQ ="fq";
+  String FQ ="fq";
   
   /** zero based offset of matching documents to retrieve */
-  public static final String START ="start";
-  public static final int START_DEFAULT = 0;
+  String START ="start";
+  int START_DEFAULT = 0;
   
   /** number of documents to return starting at "start" */
-  public static final String ROWS ="rows";
-  public static final int ROWS_DEFAULT = 10;
+  String ROWS ="rows";
+  int ROWS_DEFAULT = 10;
 
   // SOLR-4228 start
   /** handler value for SolrPing */
-  public static final String PING_HANDLER = "/admin/ping";
+  String PING_HANDLER = "/admin/ping";
   
   /** "action" parameter for SolrPing */
-  public static final String ACTION = "action";
+  String ACTION = "action";
   
   /** "disable" value for SolrPing action */
-  public static final String DISABLE = "disable";
+  String DISABLE = "disable";
   
   /** "enable" value for SolrPing action */
-  public static final String ENABLE = "enable";
+  String ENABLE = "enable";
   
   /** "ping" value for SolrPing action */
-  public static final String PING = "ping";
+  String PING = "ping";
   // SOLR-4228 end
 
   /** stylesheet to apply to XML results */
-  public static final String XSL ="xsl";
+  String XSL ="xsl";
   
   /** version parameter to check request-response compatibility */
-  public static final String VERSION ="version";
+  String VERSION ="version";
   
   /** query and init param for field list */
-  public static final String FL = "fl";
+  String FL = "fl";
   
   /** default query field */
-  public static final String DF = "df";
+  String DF = "df";
 
   /** Transformer param -- used with XSLT */
-  public static final String TR = "tr";
+  String TR = "tr";
   
   /** whether to include debug data for all components pieces, including doing explains*/
-  public static final String DEBUG_QUERY = "debugQuery";
+  String DEBUG_QUERY = "debugQuery";
 
   /**
    * Whether to provide debug info for specific items.
    *
    * @see #DEBUG_QUERY
    */
-  public static final String DEBUG = "debug";
+  String DEBUG = "debug";
 
   /**
    * {@link #DEBUG} value indicating an interest in debug output related to timing
    */
-  public static final String TIMING = "timing";
+  String TIMING = "timing";
   /**
    * {@link #DEBUG} value indicating an interest in debug output related to the results (explains)
    */
-  public static final String RESULTS = "results";
+  String RESULTS = "results";
   /**
    * {@link #DEBUG} value indicating an interest in debug output related to the Query (parsing, etc.)
    */
-  public static final String QUERY = "query";
+  String QUERY = "query";
   /**
    * {@link #DEBUG} value indicating an interest in debug output related to the distributed tracking
    */
-  public static final String TRACK = "track";
+  String TRACK = "track";
   /** 
    * boolean indicating whether score explanations should structured (true), 
    * or plain text (false)
    */
-  public static final String EXPLAIN_STRUCT = "debug.explain.structured";
+  String EXPLAIN_STRUCT = "debug.explain.structured";
   
   /** another query to explain against */
-  public static final String EXPLAIN_OTHER = "explainOther";
+  String EXPLAIN_OTHER = "explainOther";
   
 
   /** If the content stream should come from a URL (using URLConnection) */
-  public static final String STREAM_URL = "stream.url";
+  String STREAM_URL = "stream.url";
 
   /** If the content stream should come from a File (using FileReader) */
-  public static final String STREAM_FILE = "stream.file";
+  String STREAM_FILE = "stream.file";
   
   /** If the content stream should come directly from a field */
-  public static final String STREAM_BODY = "stream.body";
+  String STREAM_BODY = "stream.body";
   
   /** 
    * Explicitly set the content type for the input stream
    * If multiple streams are specified, the explicit contentType
    * will be used for all of them.  
    */
-  public static final String STREAM_CONTENTTYPE = "stream.contentType";
+  String STREAM_CONTENTTYPE = "stream.contentType";
   
   /**
    * Whether or not the search may be terminated early within a segment.
    */
-  public static final String SEGMENT_TERMINATE_EARLY = "segmentTerminateEarly";
-  public static final boolean SEGMENT_TERMINATE_EARLY_DEFAULT = false;
+  String SEGMENT_TERMINATE_EARLY = "segmentTerminateEarly";
+  boolean SEGMENT_TERMINATE_EARLY_DEFAULT = false;
 
   /**
    * Timeout value in milliseconds.  If not set, or the value is &gt;= 0, there is no timeout.
    */
-  public static final String TIME_ALLOWED = "timeAllowed";
+  String TIME_ALLOWED = "timeAllowed";
   
   /** 'true' if the header should include the handler name */
-  public static final String HEADER_ECHO_HANDLER = "echoHandler";
+  String HEADER_ECHO_HANDLER = "echoHandler";
   
   /** include the parameters in the header **/
-  public static final String HEADER_ECHO_PARAMS = "echoParams";
+  String HEADER_ECHO_PARAMS = "echoParams";
 
   /** include header in the response */
-  public static final String OMIT_HEADER = "omitHeader";
-  public static final String CORES_HANDLER_PATH = "/admin/cores";
-  public static final String COLLECTIONS_HANDLER_PATH = "/admin/collections";
-  public static final String INFO_HANDLER_PATH = "/admin/info";
-  public static final String CONFIGSETS_HANDLER_PATH = "/admin/configs";
-  public static final String AUTHZ_PATH = "/admin/authorization";
-  public static final String AUTHC_PATH = "/admin/authentication";
-  public static final String ZK_PATH = "/admin/zookeeper";
+  String OMIT_HEADER = "omitHeader";
+  String CORES_HANDLER_PATH = "/admin/cores";
+  String COLLECTIONS_HANDLER_PATH = "/admin/collections";
+  String INFO_HANDLER_PATH = "/admin/info";
+  String CONFIGSETS_HANDLER_PATH = "/admin/configs";
+  String AUTHZ_PATH = "/admin/authorization";
+  String AUTHC_PATH = "/admin/authentication";
+  String ZK_PATH = "/admin/zookeeper";
 
-  public static final Set<String> ADMIN_PATHS = new HashSet<>(Arrays.asList(
+  Set<String> ADMIN_PATHS = new HashSet<>(Arrays.asList(
       CORES_HANDLER_PATH,
       COLLECTIONS_HANDLER_PATH,
       CONFIGSETS_HANDLER_PATH,
@@ -189,7 +189,7 @@ public interface CommonParams {
       AUTHZ_PATH));
 
   /** valid values for: <code>echoParams</code> */
-  public enum EchoParamStyle {
+  enum EchoParamStyle {
     EXPLICIT,
     ALL,
     NONE;
@@ -212,50 +212,50 @@ public interface CommonParams {
   };
 
   /** which parameters to log (if not supplied all parameters will be logged) **/
-  public static final String LOG_PARAMS_LIST = "logParamsList";
+  String LOG_PARAMS_LIST = "logParamsList";
 
-  public static final String EXCLUDE = "ex";
-  public static final String TAG = "tag";
-  public static final String TERMS = "terms";
-  public static final String OUTPUT_KEY = "key";
-  public static final String FIELD = "f";
-  public static final String VALUE = "v";
-  public static final String THREADS = "threads";
-  public static final String TRUE = Boolean.TRUE.toString();
-  public static final String FALSE = Boolean.FALSE.toString();
+  String EXCLUDE = "ex";
+  String TAG = "tag";
+  String TERMS = "terms";
+  String OUTPUT_KEY = "key";
+  String FIELD = "f";
+  String VALUE = "v";
+  String THREADS = "threads";
+  String TRUE = Boolean.TRUE.toString();
+  String FALSE = Boolean.FALSE.toString();
 
   /** Used as a local parameter on queries.  cache=false means don't check any query or filter caches.
    * cache=true is the default.
    */
-  public static final String CACHE = "cache";
+  String CACHE = "cache";
 
   /** Used as a local param on filter queries in conjunction with cache=false.  Filters are checked in order, from
    * smallest cost to largest. If cost&gt;=100 and the query implements PostFilter, then that interface will be used to do post query filtering.
    */
-  public static final String COST = "cost";
+  String COST = "cost";
 
   /**
    * Request ID parameter added to the request when using debug=track
    */
-  public static final String REQUEST_ID = "rid";
+  String REQUEST_ID = "rid";
 
   /**
    * Request Purpose parameter added to each internal shard request when using debug=track
    */
-  public static final String REQUEST_PURPOSE = "requestPurpose";
+  String REQUEST_PURPOSE = "requestPurpose";
 
   /**
    * When querying a node, prefer local node's cores for distributed queries.
    */
-  public static final String PREFER_LOCAL_SHARDS = "preferLocalShards";
+  String PREFER_LOCAL_SHARDS = "preferLocalShards";
 
-  public static final String JAVABIN = "javabin";
+  String JAVABIN = "javabin";
 
-  public static final String JSON = "json";
+  String JSON = "json";
 
-  public static final String PATH = "path";
+  String PATH = "path";
 
-  public static final String NAME = "name";
-  public static final String VALUE_LONG = "val";
+  String NAME = "name";
+  String VALUE_LONG = "val";
 }
 

