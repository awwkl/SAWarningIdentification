GitDiffStart: e7329a7b8343f0317ff9a2d30b619cf2a203c4da | Wed Nov 11 16:02:50 2015 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index e0c2153..40ef7b6 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -354,10 +354,8 @@ Bug Fixes
   a race condition can cause that client to hang in blockUntilFinished.
   (Mark Miller, yonik)
 
-* SOLR-8215: Only active replicas should handle incoming requests against a collection (Varun Thacker)
 
-* SOLR-7989: After a new leader is elected it should change it's state to ACTIVE even
-  if the last published state is something else (Ishan Chattopadhyaya, Mark Miller via noble )
+* SOLR-8215: Only active replicas should handle incoming requests against a collection (Varun Thacker)
 
 * SOLR-8223: Avoid accidentally swallowing OutOfMemoryError (in LeaderInitiatedRecoveryThread.java
   or CoreContainer.java) (Mike Drob via Christine Poerschke)
diff --git a/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java b/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
index ee1da4d..70a29cc 100644
--- a/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
+++ b/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
@@ -11,7 +11,6 @@ import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.solr.cloud.overseer.OverseerAction;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.SolrException.ErrorCode;
-import org.apache.solr.common.cloud.ClusterState;
 import org.apache.solr.common.cloud.Replica;
 import org.apache.solr.common.cloud.Slice;
 import org.apache.solr.common.cloud.SolrZkClient;
@@ -108,7 +107,6 @@ class ShardLeaderElectionContextBase extends ElectionContext {
   private static Logger log = LoggerFactory
       .getLogger(ShardLeaderElectionContextBase.class);
   protected final SolrZkClient zkClient;
-  protected ZkStateReader zkStateReader;
   protected String shardId;
   protected String collection;
   protected LeaderElector leaderElector;
@@ -121,7 +119,6 @@ class ShardLeaderElectionContextBase extends ElectionContext {
         + "/leader_elect/" + shardId, ZkStateReader.getShardLeadersPath(
         collection, shardId), props, zkStateReader.getZkClient());
     this.leaderElector = leaderElector;
-    this.zkStateReader = zkStateReader;
     this.zkClient = zkStateReader.getZkClient();
     this.shardId = shardId;
     this.collection = collection;
@@ -216,28 +213,13 @@ class ShardLeaderElectionContextBase extends ElectionContext {
     } 
     
     assert shardId != null;
-    
-    ZkNodeProps m;
-    ClusterState clusterState = zkStateReader.getClusterState();
-    Replica rep = (clusterState == null) ? null : clusterState.getReplica(collection, 
-        leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));
-    if (rep != null && rep.getState() != Replica.State.ACTIVE) {
-      m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),
-          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString(),
-          ZkStateReader.SHARD_ID_PROP, shardId,
-          ZkStateReader.COLLECTION_PROP, collection,
-          ZkStateReader.BASE_URL_PROP, leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),
-          ZkStateReader.NODE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.NODE_NAME_PROP),
-          ZkStateReader.CORE_NODE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.CORE_NODE_NAME_PROP),
-          ZkStateReader.CORE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP));
-      Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));
-    }
-
-    m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),
-        ZkStateReader.SHARD_ID_PROP, shardId,
-        ZkStateReader.COLLECTION_PROP, collection,
-        ZkStateReader.BASE_URL_PROP, leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),
-        ZkStateReader.CORE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP));
+    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,
+        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,
+        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,
+        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),
+        ZkStateReader.CORE_NAME_PROP,
+        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),
+        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());
     Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));
   }
 

