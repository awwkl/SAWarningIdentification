GitDiffStart: dc0c24053e78aef2a584bd79f78fd787ee348436 | Mon Feb 27 18:45:39 2012 +0000
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.java b/lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.java
index 1b6d9ac..5e616b3 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/CheckHits.java
@@ -116,7 +116,6 @@ public class CheckHits {
       Assert.assertEquals("Wrap Reader " + i + ": " +
                           query.toString(defaultFieldName),
                           correct, actual);
-      QueryUtils.purgeFieldCache(s.getIndexReader()); // our wrapping can create insanity otherwise
     }
   }
 
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java b/lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
index dee66b2..aba98f8 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
@@ -114,13 +114,9 @@ public class QueryUtils {
         checkFirstSkipTo(q1,s);
         checkSkipTo(q1,s);
         if (wrap) {
-          IndexSearcher wrapped;
-          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);
-          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise
-          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);
-          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise
-          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);
-          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise
+          check(random, q1, wrapUnderlyingReader(random, s, -1), false);
+          check(random, q1, wrapUnderlyingReader(random, s,  0), false);
+          check(random, q1, wrapUnderlyingReader(random, s, +1), false);
         }
         checkExplanations(q1,s);
         
@@ -137,6 +133,27 @@ public class QueryUtils {
     // this is just a hack, to get an atomic reader that contains all subreaders for insanity checks
     FieldCache.DEFAULT.purge(SlowCompositeReaderWrapper.wrap(r));
   }
+  
+  /** This is a MultiReader that can be used for randomly wrapping other readers
+   * without creating FieldCache insanity.
+   * The trick is to use an opaque/fake cache key. */
+  public static class FCInvisibleMultiReader extends MultiReader {
+    private final Object cacheKey = new Object();
+  
+    public FCInvisibleMultiReader(IndexReader... readers) throws IOException {
+      super(readers);
+    }
+    
+    @Override
+    public Object getCoreCacheKey() {
+      return cacheKey;
+    }
+    
+    @Override
+    public Object getCombinedCoreAndDeletesKey() {
+      return cacheKey;
+    }
+  }
 
   /**
    * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader 
@@ -157,17 +174,17 @@ public class QueryUtils {
     IndexReader[] readers = new IndexReader[] {
       edge < 0 ? r : emptyReaders[0],
       emptyReaders[0],
-      new MultiReader(edge < 0 ? emptyReaders[4] : emptyReaders[0],
+      new FCInvisibleMultiReader(edge < 0 ? emptyReaders[4] : emptyReaders[0],
           emptyReaders[0],
           0 == edge ? r : emptyReaders[0]),
       0 < edge ? emptyReaders[0] : emptyReaders[7],
       emptyReaders[0],
-      new MultiReader(0 < edge ? emptyReaders[0] : emptyReaders[5],
+      new FCInvisibleMultiReader(0 < edge ? emptyReaders[0] : emptyReaders[5],
           emptyReaders[0],
           0 < edge ? r : emptyReaders[0])
     };
 
-    IndexSearcher out = LuceneTestCase.newSearcher(new MultiReader(readers));
+    IndexSearcher out = LuceneTestCase.newSearcher(new FCInvisibleMultiReader(readers));
     out.setSimilarity(s.getSimilarity());
     return out;
   }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java b/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
index b28d58d..690cd97 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
@@ -57,7 +57,6 @@ import org.apache.lucene.index.AtomicReader;
 import org.apache.lucene.index.CompositeReader;
 import org.apache.lucene.index.FieldFilterAtomicReader;
 import org.apache.lucene.index.FieldInfo;
-import org.apache.lucene.index.MultiReader;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.ReaderClosedListener;
@@ -83,6 +82,7 @@ import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.RandomSimilarityProvider;
 import org.apache.lucene.search.similarities.DefaultSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
+import org.apache.lucene.search.QueryUtils.FCInvisibleMultiReader;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.FSDirectory;
 import org.apache.lucene.store.FlushInfo;
@@ -1364,14 +1364,10 @@ public abstract class LuceneTestCase extends Assert {
               new ParallelCompositeReader((CompositeReader) r);
             break;
           case 2:
-            // Häckidy-Hick-Hack: this will create FC insanity, so we patch MultiReader to
-            // return a fake cache key, so insanity checker cannot walk along our reader:
-            r = new MultiReader(r) {
-              private final Object cacheKey = new Object();
-              @Override public Object getCoreCacheKey() { return cacheKey; }
-              @Override public Object getCombinedCoreAndDeletesKey() { return cacheKey; }
-              @Override public String toString() { return "MultiReader(" + subReaders[0] + ")"; }
-            };
+            // Häckidy-Hick-Hack: a standard MultiReader will cause FC insanity, so we use
+            // QueryUtils' reader with a fake cache key, so insanity checker cannot walk
+            // along our reader:
+            r = new FCInvisibleMultiReader(r);
             break;
           case 3:
             final AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);

