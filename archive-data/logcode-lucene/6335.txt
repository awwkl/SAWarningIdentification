GitDiffStart: 15fe8f9cba07a96d165993ad652ff4659fd7c4f1 | Thu May 1 13:40:45 2014 +0000
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2.java b/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2.java
index fed1489..be31fa3 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2.java
@@ -43,7 +43,6 @@ import org.apache.lucene.util.Rethrow;
  */
 // TODO: not sure which fails are test bugs or real bugs yet...
 // also sometimes when it fails, the exception-stream printing doesnt seem to be working yet
-// ant test  -Dtestcase=TestIndexWriterExceptions2 -Dtests.method=testSimple -Dtests.seed=A6FF4AD6F371A22E -Dtests.locale=tr_TR -Dtests.timezone=America/Cancun -Dtests.file.encoding=US-ASCII
 // 
 @AwaitsFix(bugUrl = "https://issues.apache.org/jira/browse/LUCENE-5635")
 public class TestIndexWriterExceptions2 extends LuceneTestCase {
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyDocValuesFormat.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyDocValuesFormat.java
index b7ed379..a05dd8e 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyDocValuesFormat.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyDocValuesFormat.java
@@ -42,7 +42,7 @@ class CrankyDocValuesFormat extends DocValuesFormat {
 
   @Override
   public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {
-    if (random.nextInt(1000) == 0) {
+    if (random.nextInt(100) == 0) {
       throw new IOException("Fake IOException from DocValuesFormat.fieldsConsumer()");
     }
     return new CrankyDocValuesConsumer(delegate.fieldsConsumer(state), random);
@@ -65,14 +65,14 @@ class CrankyDocValuesFormat extends DocValuesFormat {
     @Override
     public void close() throws IOException {
       delegate.close();
-      if (random.nextInt(1000) == 0) {
+      if (random.nextInt(100) == 0) {
         throw new IOException("Fake IOException from DocValuesConsumer.close()");
       }
     }
 
     @Override
     public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {
-      if (random.nextInt(1000) == 0) {
+      if (random.nextInt(100) == 0) {
         throw new IOException("Fake IOException from DocValuesConsumer.addNumericField()");
       }
       delegate.addNumericField(field, values);
@@ -80,7 +80,7 @@ class CrankyDocValuesFormat extends DocValuesFormat {
 
     @Override
     public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {
-      if (random.nextInt(1000) == 0) {
+      if (random.nextInt(100) == 0) {
         throw new IOException("Fake IOException from DocValuesConsumer.addBinaryField()");
       }
       delegate.addBinaryField(field, values);
@@ -88,7 +88,7 @@ class CrankyDocValuesFormat extends DocValuesFormat {
 
     @Override
     public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {
-      if (random.nextInt(1000) == 0) {
+      if (random.nextInt(100) == 0) {
         throw new IOException("Fake IOException from DocValuesConsumer.addSortedField()");
       }
       delegate.addSortedField(field, values, docToOrd);
@@ -96,7 +96,7 @@ class CrankyDocValuesFormat extends DocValuesFormat {
 
     @Override
     public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {
-      if (random.nextInt(1000) == 0) {
+      if (random.nextInt(100) == 0) {
         throw new IOException("Fake IOException from DocValuesConsumer.addSortedSetField()");
       }
       delegate.addSortedSetField(field, values, docToOrdCount, ords);
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyFieldInfosFormat.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyFieldInfosFormat.java
index 31c71b9..ace4bf2 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyFieldInfosFormat.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyFieldInfosFormat.java
@@ -43,7 +43,7 @@ class CrankyFieldInfosFormat extends FieldInfosFormat {
 
   @Override
   public FieldInfosWriter getFieldInfosWriter() throws IOException {
-    if (random.nextInt(1000) == 0) {
+    if (random.nextInt(100) == 0) {
       throw new IOException("Fake IOException from FieldInfosFormat.getFieldInfosWriter()");
     }
     return new CrankyFieldInfosWriter(delegate.getFieldInfosWriter(), random);
@@ -60,7 +60,7 @@ class CrankyFieldInfosFormat extends FieldInfosFormat {
 
     @Override
     public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {
-      if (random.nextInt(1000) == 0) {
+      if (random.nextInt(100) == 0) {
         throw new IOException("Fake IOException from FieldInfosWriter.write()");
       }
       delegate.write(directory, segmentName, segmentSuffix, infos, context);
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyLiveDocsFormat.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyLiveDocsFormat.java
index 9484cc1..2909d1e 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyLiveDocsFormat.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyLiveDocsFormat.java
@@ -54,7 +54,7 @@ class CrankyLiveDocsFormat extends LiveDocsFormat {
 
   @Override
   public void writeLiveDocs(MutableBits bits, Directory dir, SegmentCommitInfo info, int newDelCount, IOContext context) throws IOException {
-    if (random.nextInt(1000) == 0) {
+    if (random.nextInt(100) == 0) {
       throw new IOException("Fake IOException from LiveDocsFormat.writeLiveDocs()");
     }
     delegate.writeLiveDocs(bits, dir, info, newDelCount, context);
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyNormsFormat.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyNormsFormat.java
index 6c9f339..df7c395 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyNormsFormat.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyNormsFormat.java
@@ -37,7 +37,7 @@ class CrankyNormsFormat extends NormsFormat {
 
   @Override
   public DocValuesConsumer normsConsumer(SegmentWriteState state) throws IOException {
-    if (random.nextInt(1000) == 0) {
+    if (random.nextInt(100) == 0) {
       throw new IOException("Fake IOException from NormsFormat.fieldsConsumer()");
     }
     return new CrankyDocValuesFormat.CrankyDocValuesConsumer(delegate.normsConsumer(state), random);
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyPostingsFormat.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyPostingsFormat.java
index 6ca0c1f..c8b7a82 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyPostingsFormat.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyPostingsFormat.java
@@ -41,7 +41,7 @@ class CrankyPostingsFormat extends PostingsFormat {
   
   @Override
   public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {
-    if (random.nextInt(1000) == 0) {
+    if (random.nextInt(100) == 0) {
       throw new IOException("Fake IOException from PostingsFormat.fieldsConsumer()");
     }  
     return new CrankyFieldsConsumer(delegate.fieldsConsumer(state), random);
@@ -63,7 +63,7 @@ class CrankyPostingsFormat extends PostingsFormat {
     
     @Override
     public void write(Fields fields) throws IOException {
-      if (random.nextInt(1000) == 0) {
+      if (random.nextInt(100) == 0) {
         throw new IOException("Fake IOException from FieldsConsumer.write()");
       }  
       delegate.write(fields);
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankySegmentInfoFormat.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankySegmentInfoFormat.java
index 7980f1b..0ac60d6 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankySegmentInfoFormat.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankySegmentInfoFormat.java
@@ -58,7 +58,7 @@ class CrankySegmentInfoFormat extends SegmentInfoFormat {
     
     @Override
     public void write(Directory dir, SegmentInfo info, FieldInfos fis, IOContext ioContext) throws IOException {
-      if (random.nextInt(1000) == 0) {
+      if (random.nextInt(100) == 0) {
         throw new IOException("Fake IOException from SegmentInfoWriter.write()");
       }
       delegate.write(dir, info, fis, ioContext);
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyStoredFieldsFormat.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyStoredFieldsFormat.java
index 8e316fd..e330d30 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyStoredFieldsFormat.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyStoredFieldsFormat.java
@@ -47,7 +47,7 @@ class CrankyStoredFieldsFormat extends StoredFieldsFormat {
 
   @Override
   public StoredFieldsWriter fieldsWriter(Directory directory, SegmentInfo si, IOContext context) throws IOException {
-    if (random.nextInt(1000) == 0) {
+    if (random.nextInt(100) == 0) {
       throw new IOException("Fake IOException from StoredFieldsFormat.fieldsWriter()");
     }
     return new CrankyStoredFieldsWriter(delegate.fieldsWriter(directory, si, context), random);
@@ -70,7 +70,7 @@ class CrankyStoredFieldsFormat extends StoredFieldsFormat {
 
     @Override
     public void finish(FieldInfos fis, int numDocs) throws IOException {
-      if (random.nextInt(1000) == 0) {
+      if (random.nextInt(100) == 0) {
         throw new IOException("Fake IOException from StoredFieldsWriter.finish()");
       }
       delegate.finish(fis, numDocs);
@@ -78,7 +78,7 @@ class CrankyStoredFieldsFormat extends StoredFieldsFormat {
 
     @Override
     public int merge(MergeState mergeState) throws IOException {
-      if (random.nextInt(1000) == 0) {
+      if (random.nextInt(100) == 0) {
         throw new IOException("Fake IOException from StoredFieldsWriter.merge()");
       }
       return super.merge(mergeState);
@@ -96,7 +96,7 @@ class CrankyStoredFieldsFormat extends StoredFieldsFormat {
 
     @Override
     public void startDocument() throws IOException {
-      if (random.nextInt(1000000) == 0) {
+      if (random.nextInt(10000) == 0) {
         throw new IOException("Fake IOException from StoredFieldsWriter.startDocument()");
       }
       delegate.startDocument();
@@ -104,7 +104,7 @@ class CrankyStoredFieldsFormat extends StoredFieldsFormat {
     
     @Override
     public void finishDocument() throws IOException {
-      if (random.nextInt(1000000) == 0) {
+      if (random.nextInt(10000) == 0) {
         throw new IOException("Fake IOException from StoredFieldsWriter.finishDocument()");
       }
       delegate.finishDocument();
@@ -112,7 +112,7 @@ class CrankyStoredFieldsFormat extends StoredFieldsFormat {
 
     @Override
     public void writeField(FieldInfo info, StorableField field) throws IOException {
-      if (random.nextInt(1000000) == 0) {
+      if (random.nextInt(10000) == 0) {
         throw new IOException("Fake IOException from StoredFieldsWriter.writeField()");
       }
       delegate.writeField(info, field);
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyTermVectorsFormat.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyTermVectorsFormat.java
index 37c4290..e0a792d 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyTermVectorsFormat.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyTermVectorsFormat.java
@@ -48,7 +48,7 @@ class CrankyTermVectorsFormat extends TermVectorsFormat {
 
   @Override
   public TermVectorsWriter vectorsWriter(Directory directory, SegmentInfo segmentInfo, IOContext context) throws IOException {
-    if (random.nextInt(1000) == 0) {
+    if (random.nextInt(100) == 0) {
       throw new IOException("Fake IOException from TermVectorsFormat.vectorsWriter()");
     }
     return new CrankyTermVectorsWriter(delegate.vectorsWriter(directory, segmentInfo, context), random);
@@ -70,7 +70,7 @@ class CrankyTermVectorsFormat extends TermVectorsFormat {
     
     @Override
     public int merge(MergeState mergeState) throws IOException {
-      if (random.nextInt(1000) == 0) {
+      if (random.nextInt(100) == 0) {
         throw new IOException("Fake IOException from TermVectorsWriter.merge()");
       }
       return super.merge(mergeState);
@@ -78,7 +78,7 @@ class CrankyTermVectorsFormat extends TermVectorsFormat {
 
     @Override
     public void finish(FieldInfos fis, int numDocs) throws IOException {
-      if (random.nextInt(1000) == 0) {
+      if (random.nextInt(100) == 0) {
         throw new IOException("Fake IOException from TermVectorsWriter.finish()");
       }
       delegate.finish(fis, numDocs);
@@ -87,7 +87,7 @@ class CrankyTermVectorsFormat extends TermVectorsFormat {
     @Override
     public void close() throws IOException {
       delegate.close();
-      if (random.nextInt(1000) == 0) {
+      if (random.nextInt(100) == 0) {
         throw new IOException("Fake IOException from TermVectorsWriter.close()");
       }
     }
@@ -96,7 +96,7 @@ class CrankyTermVectorsFormat extends TermVectorsFormat {
 
     @Override
     public void startDocument(int numVectorFields) throws IOException {
-      if (random.nextInt(1000000) == 0) {
+      if (random.nextInt(10000) == 0) {
         throw new IOException("Fake IOException from TermVectorsWriter.startDocument()");
       }
       delegate.startDocument(numVectorFields);
@@ -104,7 +104,7 @@ class CrankyTermVectorsFormat extends TermVectorsFormat {
     
     @Override
     public void finishDocument() throws IOException {
-      if (random.nextInt(1000000) == 0) {
+      if (random.nextInt(10000) == 0) {
         throw new IOException("Fake IOException from TermVectorsWriter.finishDocument()");
       }
       delegate.finishDocument();
@@ -112,7 +112,7 @@ class CrankyTermVectorsFormat extends TermVectorsFormat {
     
     @Override
     public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {
-      if (random.nextInt(1000000) == 0) {
+      if (random.nextInt(10000) == 0) {
         throw new IOException("Fake IOException from TermVectorsWriter.startField()");
       }
       delegate.startField(info, numTerms, positions, offsets, payloads);
@@ -120,7 +120,7 @@ class CrankyTermVectorsFormat extends TermVectorsFormat {
 
     @Override
     public void finishField() throws IOException {
-      if (random.nextInt(1000000) == 0) {
+      if (random.nextInt(10000) == 0) {
         throw new IOException("Fake IOException from TermVectorsWriter.finishField()");
       }
       delegate.finishField();
@@ -128,7 +128,7 @@ class CrankyTermVectorsFormat extends TermVectorsFormat {
     
     @Override
     public void startTerm(BytesRef term, int freq) throws IOException {
-      if (random.nextInt(1000000) == 0) {
+      if (random.nextInt(10000) == 0) {
         throw new IOException("Fake IOException from TermVectorsWriter.startTerm()");
       }
       delegate.startTerm(term, freq);
@@ -136,7 +136,7 @@ class CrankyTermVectorsFormat extends TermVectorsFormat {
 
     @Override
     public void finishTerm() throws IOException {
-      if (random.nextInt(1000000) == 0) {
+      if (random.nextInt(10000) == 0) {
         throw new IOException("Fake IOException from TermVectorsWriter.finishTerm()");
       }
       delegate.finishTerm();
@@ -144,7 +144,7 @@ class CrankyTermVectorsFormat extends TermVectorsFormat {
     
     @Override
     public void addPosition(int position, int startOffset, int endOffset, BytesRef payload) throws IOException {
-      if (random.nextInt(1000000) == 0) {
+      if (random.nextInt(10000) == 0) {
         throw new IOException("Fake IOException from TermVectorsWriter.addPosition()");
       }
       delegate.addPosition(position, startOffset, endOffset, payload);
@@ -152,7 +152,7 @@ class CrankyTermVectorsFormat extends TermVectorsFormat {
 
     @Override
     public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {
-      if (random.nextInt(1000000) == 0) {
+      if (random.nextInt(10000) == 0) {
         throw new IOException("Fake IOException from TermVectorsWriter.addProx()");
       }
       super.addProx(numProx, positions, offsets);

