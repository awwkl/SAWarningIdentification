GitDiffStart: adc8db035311c045371ed4b6e8cc06d1b9d06465 | Fri Aug 31 03:44:05 2012 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index bc1f4a7..51b98ee 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -29,6 +29,9 @@ New Features
   as the default Codec on IndexWriter, because it cannot write new segments.
   (Mike McCandless, Robert Muir)
 
+* SOLR-3441: ElisionFilterFactory is now MultiTermAware
+  (Jack Krupansky via hossman)
+
 API Changes
 
 * LUCENE-4299: Added Terms.hasPositions() and Terms.hasOffsets().
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/ElisionFilterFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/ElisionFilterFactory.java
index aec6687..08d32e0 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/ElisionFilterFactory.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/ElisionFilterFactory.java
@@ -34,7 +34,7 @@ import org.apache.lucene.analysis.fr.FrenchAnalyzer;
  * &lt;/fieldType&gt;</pre>
  *
  */
-public class ElisionFilterFactory extends TokenFilterFactory implements ResourceLoaderAware {
+public class ElisionFilterFactory extends TokenFilterFactory implements ResourceLoaderAware, MultiTermAwareComponent {
 
   private CharArraySet articles;
 
@@ -53,5 +53,10 @@ public class ElisionFilterFactory extends TokenFilterFactory implements Resource
   public ElisionFilter create(TokenStream input) {
     return new ElisionFilter(input, articles);
   }
+
+  @Override
+  public AbstractAnalysisFactory getMultiTermComponent() {
+    return this;
+  }
 }
 
diff --git a/solr/core/src/test-files/solr/collection1/conf/schema-folding.xml b/solr/core/src/test-files/solr/collection1/conf/schema-folding.xml
index 95b37c3..88a6d66 100644
--- a/solr/core/src/test-files/solr/collection1/conf/schema-folding.xml
+++ b/solr/core/src/test-files/solr/collection1/conf/schema-folding.xml
@@ -206,6 +206,16 @@
       </analyzer>
     </fieldType>
 
+    <fieldType name="text_fr" class="solr.TextField" positionIncrementGap="100">
+      <analyzer> 
+        <tokenizer class="solr.StandardTokenizerFactory"/>
+        <!-- removes l', etc -->
+        <filter class="solr.ElisionFilterFactory" ignoreCase="true" />
+        <filter class="solr.LowerCaseFilterFactory"/>
+        <filter class="solr.FrenchLightStemFilterFactory"/>
+      </analyzer>
+    </fieldType>
+
 
     <fieldType name="int" class="solr.TrieIntField" precisionStep="4" omitNorms="true" positionIncrementGap="0"/>
     <fieldType name="float" class="solr.TrieFloatField" precisionStep="4" omitNorms="true" positionIncrementGap="0"/>
@@ -250,6 +260,7 @@
     <dynamicField name="*_folding" type="text_folding" indexed="true" stored="true"/>
     <dynamicField name="*_stemming" type="text_stemming" indexed="true" stored="true"/>
     <dynamicField name="*_keyword" type="text_keyword" indexed="true" stored="true"/>
+    <dynamicField name="*_fr" type="text_fr" indexed="true" stored="true"/>
 
   </fields>
 
diff --git a/solr/core/src/test/org/apache/solr/search/TestElisionMultitermQuery.java b/solr/core/src/test/org/apache/solr/search/TestElisionMultitermQuery.java
new file mode 100644
index 0000000..7f90b27
--- /dev/null
+++ b/solr/core/src/test/org/apache/solr/search/TestElisionMultitermQuery.java
@@ -0,0 +1,52 @@
+package org.apache.solr.search;
+
+import org.apache.solr.SolrTestCaseJ4;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+public class TestElisionMultitermQuery extends SolrTestCaseJ4 {
+
+  public String getCoreName() {
+    return "basic";
+  }
+
+  @BeforeClass
+  public static void beforeTests() throws Exception {
+    initCore("solrconfig-basic.xml", "schema-folding.xml");
+    
+    assertU(adoc("id", "1", "text_fr", "l'Auberge"));
+    assertU(adoc("id", "2", "text_fr", "Auberge"));
+    assertU(adoc("id", "3", "text_fr", "other"));
+    assertU(commit());
+  }
+  
+  @Test
+  public void testElisionMultitermQuery() {
+    assertQ(req("q", "text_fr:auberge"), "//result[@numFound='2']");
+    assertQ(req("q", "text_fr:Auberge"), "//result[@numFound='2']");
+    assertQ(req("q", "text_fr:l'auberge"), "//result[@numFound='2']");
+    assertQ(req("q", "text_fr:l'Auberge"), "//result[@numFound='2']");
+    assertQ(req("q", "text_fr:aub*"), "//result[@numFound='2']");
+    assertQ(req("q", "text_fr:Aub*"), "//result[@numFound='2']");
+    assertQ(req("q", "text_fr:l'aub*"), "//result[@numFound='2']");
+    assertQ(req("q", "text_fr:l'Aub*"), "//result[@numFound='2']");
+  }
+
+}

