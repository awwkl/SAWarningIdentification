GitDiffStart: 7653c36bfa0974d120cdc3443fccd73656b27fd5 | Fri Aug 28 21:16:38 2015 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 3dab675..0c057e6 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -105,6 +105,9 @@ Other
 * LUCENE-6571: fix some private access level javadoc errors and warnings
   (Cao Manh Dat, Christine Poerschke)
 
+* LUCENE-6768: AbstractFirstPassGroupingCollector.groupSort private member
+  is not needed. (Christine Poerschke)
+
 Build
 
 * LUCENE-6732: Improve checker for invalid source patterns to also
diff --git a/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector.java b/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector.java
index ad51942..6e5b2b5 100644
--- a/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector.java
+++ b/lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector.java
@@ -35,7 +35,6 @@ import java.util.*;
  */
 abstract public class AbstractFirstPassGroupingCollector<GROUP_VALUE_TYPE> extends SimpleCollector {
 
-  private final Sort groupSort;
   private final FieldComparator<?>[] comparators;
   private final LeafFieldComparator[] leafComparators;
   private final int[] reversed;
@@ -69,7 +68,6 @@ abstract public class AbstractFirstPassGroupingCollector<GROUP_VALUE_TYPE> exten
 
     // TODO: allow null groupSort to mean "by relevance",
     // and specialize it?
-    this.groupSort = groupSort;
 
     this.topNGroups = topNGroups;
 
@@ -117,7 +115,7 @@ abstract public class AbstractFirstPassGroupingCollector<GROUP_VALUE_TYPE> exten
 
     final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<>();
     int upto = 0;
-    final int sortFieldCount = groupSort.getSort().length;
+    final int sortFieldCount = comparators.length;
     for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {
       if (upto++ < groupOffset) {
         continue;

