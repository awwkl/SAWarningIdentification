GitDiffStart: 42e2191b930b7e084dc8889c6b4ecefc5fc20ac4 | Tue Nov 28 18:17:56 2006 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index d80573b..a8f30f7 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -275,6 +275,10 @@ Optimizations
      with calls to System.arraycopy instead, in DocumentWriter.java.
      (Nicolas Lalevee via Mike McCandless)
 
+ 13. LUCENE-729: Non-recursive skipTo and next implementation of
+     TermDocs for a MultiReader.  The old implementation could
+     recurse up to the number of segments in the index. (Yonik Seeley)
+
 Test Cases
   1. Added TestTermScorer.java (Grant Ingersoll)
 
diff --git a/src/java/org/apache/lucene/index/MultiReader.java b/src/java/org/apache/lucene/index/MultiReader.java
index 91c4c56..7c53cbe 100644
--- a/src/java/org/apache/lucene/index/MultiReader.java
+++ b/src/java/org/apache/lucene/index/MultiReader.java
@@ -352,14 +352,17 @@ class MultiTermDocs implements TermDocs {
   }
 
   public boolean next() throws IOException {
-    if (current != null && current.next()) {
-      return true;
-    } else if (pointer < readers.length) {
-      base = starts[pointer];
-      current = termDocs(pointer++);
-      return next();
-    } else
-      return false;
+    for(;;) {
+      if (current!=null && current.next()) {
+        return true;
+      }
+      else if (pointer < readers.length) {
+        base = starts[pointer];
+        current = termDocs(pointer++);
+      } else {
+        return false;
+      }
+    }
   }
 
   /** Optimized implementation. */
@@ -385,16 +388,17 @@ class MultiTermDocs implements TermDocs {
     }
   }
 
- /* A Possible future optimization could skip entire segments */
+ /* A Possible future optimization could skip entire segments */ 
   public boolean skipTo(int target) throws IOException {
-    if (current != null && current.skipTo(target-base)) {
-      return true;
-    } else if (pointer < readers.length) {
-      base = starts[pointer];
-      current = termDocs(pointer++);
-      return skipTo(target);
-    } else
-      return false;
+    for(;;) {
+      if (current != null && current.skipTo(target-base)) {
+        return true;
+      } else if (pointer < readers.length) {
+        base = starts[pointer];
+        current = termDocs(pointer++);
+      } else
+        return false;
+    }
   }
 
   private TermDocs termDocs(int i) throws IOException {

