GitDiffStart: 3dbcc8f1a5a6ed20d59bbe0fe470882eb761690a | Sun Aug 16 05:14:38 2009 +0000
diff --git a/src/java/org/apache/lucene/search/Weight.java b/src/java/org/apache/lucene/search/Weight.java
index 85d9aa6..d0cfab9 100644
--- a/src/java/org/apache/lucene/search/Weight.java
+++ b/src/java/org/apache/lucene/search/Weight.java
@@ -41,7 +41,7 @@ import org.apache.lucene.index.IndexReader;
  * query.
  * <li>The query normalization factor is passed to {@link #normalize(float)}. At
  * this point the weighting is complete.
- * <li>A <code>Scorer</code> is constructed by {@link #scorer(IndexReader)}.
+ * <li>A <code>Scorer</code> is constructed by {@link #scorer(IndexReader,boolean,boolean)}.
  * </ol>
  * 
  * @since 2.9
@@ -51,8 +51,8 @@ public abstract class Weight implements Serializable {
   /**
    * An explanation of the score computation for the named document.
    * 
-   * Until 3.0, null may be passed in situations where the {@Searcher} is not
-   * available, so impls must only use {@Searcher} to generate optional 
+   * Until 3.0, null may be passed in situations where the Searcher is not
+   * available, so impls must only use Searcher to generate optional 
    * explain info.
    * 
    * @param searcher over the index or null
diff --git a/src/java/org/apache/lucene/search/payloads/BoostingNearQuery.java b/src/java/org/apache/lucene/search/payloads/BoostingNearQuery.java
index 1abfdc3..53b3970 100644
--- a/src/java/org/apache/lucene/search/payloads/BoostingNearQuery.java
+++ b/src/java/org/apache/lucene/search/payloads/BoostingNearQuery.java
@@ -121,7 +121,7 @@ public class BoostingNearQuery extends SpanNearQuery implements PayloadQuery {
      * @param start The start position of the span being scored
      * @param end The end position of the span being scored
      *
-     * @see {@link org.apache.lucene.search.spans.Spans}
+     * @see Spans
      */
     protected void processPayloads(Collection payLoads, int start, int end) {
       for (Iterator iterator = payLoads.iterator(); iterator.hasNext();) {
diff --git a/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java b/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
index ec95b50..0f042f0 100644
--- a/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
+++ b/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
@@ -220,7 +220,7 @@ public class NearSpansUnordered extends Spans {
   // TODO: Remove warning after API has been finalized
   /**
    * WARNING: The List is not necessarily in order of the the positions
-   * @return
+   * @return Collection of <code>byte[]</code> payloads
    * @throws IOException
    */
   public Collection/*<byte[]>*/ getPayload() throws IOException {
diff --git a/src/java/org/apache/lucene/util/ReaderUtil.java b/src/java/org/apache/lucene/util/ReaderUtil.java
index a470f06..699e1d4 100644
--- a/src/java/org/apache/lucene/util/ReaderUtil.java
+++ b/src/java/org/apache/lucene/util/ReaderUtil.java
@@ -45,9 +45,9 @@ public class ReaderUtil {
   /**
    * Returns sub IndexReader that contains the given document id.
    *    
-   * @param doc
-   * @param reader
-   * @return
+   * @param doc id of document
+   * @param reader parent reader
+   * @return sub reader of parent which contains the specified doc id
    */
   public static IndexReader subReader(int doc, IndexReader reader) {
     List subReadersList = new ArrayList();
@@ -66,9 +66,9 @@ public class ReaderUtil {
   /**
    * Returns sub-reader subIndex from reader.
    * 
-   * @param reader
-   * @param subIndex
-   * @return
+   * @param reader parent reader
+   * @param subIndex index of desired sub reader
+   * @return the subreader at subINdex
    */
   public static IndexReader subReader(IndexReader reader, int subIndex) {
     List subReadersList = new ArrayList();

