GitDiffStart: 99da9e8fe3d22b687bf6d441e1bfe9f1b9f6e806 | Fri Jan 15 18:55:59 2016 +0000
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl.java b/solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl.java
index 9cf4b12..e0d00f0 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl.java
@@ -270,7 +270,7 @@ class ResultSetImpl implements ResultSet {
 
   @Override
   public ResultSetMetaData getMetaData() throws SQLException {
-    throw new UnsupportedOperationException();
+    return new ResultSetMetaDataImpl(this);
   }
 
   @Override
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetMetaDataImpl.java b/solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetMetaDataImpl.java
new file mode 100644
index 0000000..6d615d4
--- /dev/null
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetMetaDataImpl.java
@@ -0,0 +1,144 @@
+package org.apache.solr.client.solrj.io.sql;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.sql.ResultSetMetaData;
+import java.sql.SQLException;
+
+class ResultSetMetaDataImpl implements ResultSetMetaData {
+  private final ResultSetImpl resultSet;
+
+  ResultSetMetaDataImpl(ResultSetImpl resultSet) {
+    this.resultSet = resultSet;
+  }
+
+  @Override
+  public int getColumnCount() throws SQLException {
+    return 0;
+  }
+
+  @Override
+  public boolean isAutoIncrement(int column) throws SQLException {
+    return false;
+  }
+
+  @Override
+  public boolean isCaseSensitive(int column) throws SQLException {
+    return false;
+  }
+
+  @Override
+  public boolean isSearchable(int column) throws SQLException {
+    return false;
+  }
+
+  @Override
+  public boolean isCurrency(int column) throws SQLException {
+    return false;
+  }
+
+  @Override
+  public int isNullable(int column) throws SQLException {
+    return 0;
+  }
+
+  @Override
+  public boolean isSigned(int column) throws SQLException {
+    return false;
+  }
+
+  @Override
+  public int getColumnDisplaySize(int column) throws SQLException {
+    return 0;
+  }
+
+  @Override
+  public String getColumnLabel(int column) throws SQLException {
+    return null;
+  }
+
+  @Override
+  public String getColumnName(int column) throws SQLException {
+    return null;
+  }
+
+  @Override
+  public String getSchemaName(int column) throws SQLException {
+    return null;
+  }
+
+  @Override
+  public int getPrecision(int column) throws SQLException {
+    return 0;
+  }
+
+  @Override
+  public int getScale(int column) throws SQLException {
+    return 0;
+  }
+
+  @Override
+  public String getTableName(int column) throws SQLException {
+    return null;
+  }
+
+  @Override
+  public String getCatalogName(int column) throws SQLException {
+    return null;
+  }
+
+  @Override
+  public int getColumnType(int column) throws SQLException {
+    return 0;
+  }
+
+  @Override
+  public String getColumnTypeName(int column) throws SQLException {
+    return null;
+  }
+
+  @Override
+  public boolean isReadOnly(int column) throws SQLException {
+    return false;
+  }
+
+  @Override
+  public boolean isWritable(int column) throws SQLException {
+    return false;
+  }
+
+  @Override
+  public boolean isDefinitelyWritable(int column) throws SQLException {
+    return false;
+  }
+
+  @Override
+  public String getColumnClassName(int column) throws SQLException {
+    return null;
+  }
+
+  @Override
+  public <T> T unwrap(Class<T> iface) throws SQLException {
+    return null;
+  }
+
+  @Override
+  public boolean isWrapperFor(Class<?> iface) throws SQLException {
+    return false;
+  }
+}
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest.java b/solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest.java
index 47dbafe..5195dd7 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest.java
@@ -109,6 +109,7 @@ public class JdbcTest extends AbstractFullDistribZkTestBase {
     Connection con = DriverManager.getConnection("jdbc:solr://" + zkHost + "?collection=collection1", props);
     Statement stmt = con.createStatement();
     ResultSet rs = stmt.executeQuery("select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2");
+    assertTrue(rs.getMetaData() != null);
 
     assert(rs.next());
     assert(rs.getLong("a_i") == 14);

