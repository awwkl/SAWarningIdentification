GitDiffStart: 09de7f36dd691dc648fc27de2271ea65d22b9586 | Thu Jun 17 14:28:35 2010 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 1c96b48..24effd9 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -88,12 +88,6 @@ Changes in backwards compatibility policy
 * LUCENE-2484: Removed deprecated TermAttribute. Use CharTermAttribute
   and TermToBytesRefAttribute instead.  (Uwe Schindler)
 
-Changes in runtime behavior
-
-* LUCENE-2421: NativeFSLockFactory does not throw LockReleaseFailedException if 
-  it cannot delete the lock file, since obtaining the lock does not fail if the 
-  file is there. (Shai Erera)
-
 API Changes
 
 * LUCENE-1458, LUCENE-2111: The postings APIs (TermEnum, TermDocsEnum,
@@ -116,11 +110,6 @@ API Changes
   commit points when they are not needed anymore (instead of waiting for the 
   next commit). (Shai Erera)
 
-* LUCENE-2356: Add IndexWriterConfig.set/getReaderTermsIndexDivisor,
-  to set what IndexWriter passes for termsIndexDivisor to the readers
-  it opens internally when applying deletions or creating a
-  near-real-time reader.  (Earwin Burrfoot via Mike McCandless)
-
 New features
 
 * LUCENE-1606, LUCENE-2089: Adds AutomatonQuery, a MultiTermQuery that 
@@ -203,10 +192,6 @@ Changes in backwards compatibility policy
   class is no longer used by Lucene.  (Gunnar Wagenknecht via Mike
   McCandless)
 
-* LUCENE-2135: Added FieldCache.purge(IndexReader) method to the
-  interface.  Anyone implementing FieldCache externally will need to
-  fix their code to implement this, on upgrading.  (Mike McCandless)
-
 * LUCENE-1923: Renamed SegmentInfo & SegmentInfos segString method to
   toString.  These are advanced APIs and subject to change suddenly.
   (Tim Smith via Mike McCandless)
@@ -265,10 +250,6 @@ Changes in runtime behavior
 * LUCENE-2179: CharArraySet.clear() is now functional.
   (Robert Muir, Uwe Schindler)
 
-* LUCENE-2421: NativeFSLockFactory does not throw LockReleaseFailedException if 
-  it cannot delete the lock file, since obtaining the lock does not fail if the 
-  file is there. (Shai Erera)
-
 * LUCENE-2455: IndexWriter.addIndexes no longer optimizes the target index 
   before it adds the new ones. Also, the existing segments are not merged and so
   the index will not end up with a single segment (unless it was empty before).
@@ -313,10 +294,6 @@ API Changes
   files are no longer open by IndexReaders. (luocanrao via Mike
   McCandless)
 
-* LUCENE-2281: added doBeforeFlush to IndexWriter to allow extensions to perform
-  operations before flush starts. Also exposed doAfterFlush as protected instead
-  of package-private. (Shai Erera via Mike McCandless)
-
 * LUCENE-2282: IndexFileNames is exposed as a public class allowing for easier 
   use by external code. In addition it offers a matchExtension method which 
   callers can use to query whether a certain file matches a certain extension.
@@ -379,16 +356,6 @@ API Changes
   
 Bug fixes
 
-* LUCENE-2119: Don't throw NegativeArraySizeException if you pass
-  Integer.MAX_VALUE as nDocs to IndexSearcher search methods.  (Paul
-  Taylor via Mike McCandless)
-
-* LUCENE-2142: FieldCacheImpl.getStringIndex no longer throws an
-  exception when term count exceeds doc count.  (Mike McCandless)
-
-* LUCENE-2104: NativeFSLock.release() would silently fail if the lock is held by 
-  another thread/process.  (Shai Erera via Uwe Schindler)
-
 * LUCENE-2216: OpenBitSet.hashCode returned different hash codes for
   sets that only differed by trailing zeros. (Dawid Weiss, yonik)
 
@@ -402,17 +369,6 @@ Bug fixes
   incorrectly and lead to ConcurrentModificationException.
   (Uwe Schindler, Robert Muir)
 
-* LUCENE-2283: Use shared memory pool for term vector and stored
-  fields buffers. This memory will be reclaimed if needed according to
-  the configured RAM Buffer Size for the IndexWriter.  This also fixes
-  potentially excessive memory usage when many threads are indexing a
-  mix of small and large documents.  (Tim Smith via Mike McCandless)
-
-* LUCENE-2300: If IndexWriter is pooling reader (because NRT reader
-  has been obtained), and addIndexes* is run, do not pool the
-  readers from the external directory.  This is harmless (NRT reader is
-  correct), but a waste of resources.  (Mike McCandless)
-
 * LUCENE-2328: Index files fsync tracking moved from
   IndexWriter/IndexReader to Directory, and it no longer leaks memory.
   (Earwin Burrfoot via Mike McCandless)
@@ -424,63 +380,6 @@ Bug fixes
 * LUCENE-2074: Reduce buffer size of lexer back to default on reset.
   (Ruben Laguna, Shai Erera via Uwe Schindler)
   
-* LUCENE-2422: Don't reuse byte[] in IndexInput/Output -- it gains
-  little performance, and ties up possibly large amounts of memory for
-  apps that index large docs.  (Ross Woolf via Mike McCandless)
-
-* LUCENE-2387: Don't hang onto Fieldables from the last doc indexed,
-  in IndexWriter, nor the Reader in Tokenizer after close is
-  called.  (Ruben Laguna, Uwe Schindler, Mike McCandless)
-  
-* LUCENE-2417: IndexCommit did not implement hashCode() and equals() 
-  consistently. Now they both take Directory and version into consideration. In
-  addition, all of IndexComnmit methods which threw 
-  UnsupportedOperationException are now abstract. (Shai Erera)
-
-* LUCENE-2467: Fixed memory leaks in IndexWriter when large documents
-  are indexed.  (Mike McCandless)
-
-* LUCENE-2473: Clicking on the "More Results" link in the luceneweb.war
-  demo resulted in ArrayIndexOutOfBoundsException.  
-  (Sami Siren via Robert Muir)
-
-* LUCENE-2476: If any exception is hit init'ing IW, release the write
-  lock (previously we only released on IOException).  (Tamas Cservenak
-  via Mike McCandless)
-
-* LUCENE-2478: Fix CachingWrapperFilter to not throw NPE when
-  Filter.getDocIdSet() returns null.  (Uwe Schindler, Daniel Noll)
-
-* LUCENE-2468: Allow specifying how new deletions should be handled in
-  CachingWrapperFilter and CachingSpanFilter.  By default, new
-  deletions are ignored in CachingWrapperFilter, since typically this
-  filter is AND'd with a query that correctly takes new deletions into
-  account.  This should be a performance gain (higher cache hit rate)
-  in apps that reopen readers, or use near-real-time reader
-  (IndexWriter.getReader()), but may introduce invalid search results
-  (allowing deleted docs to be returned) for certain cases, so a new
-  expert ctor was added to CachingWrapperFilter to enforce deletions
-  at a performance cost.  CachingSpanFilter by default recaches if
-  there are new deletions (Shay Banon via Mike McCandless)
-
-* LUCENE-2299: If you open an NRT reader while addIndexes* is running,
-  it may miss some segments (Earwin Burrfoot via Mike McCandless)
-
-* LUCENE-2397: Don't throw NPE from SnapshotDeletionPolicy.snapshot if
-  there are no commits yet (Shai Erera)
-
-* LUCENE-2424: Fix FieldDoc.toString to actually return its fields
-  (Stephen Green via Mike McCandless)
-
-* LUCENE-2311: Always pass a "fully loaded" (terms index & doc stores)
-  SegmentsReader to IndexWriter's mergedSegmentWarmer (if set), so
-  that warming is free to do whatever it needs to.  (Earwin Burrfoot
-  via Mike McCandless)
-
-* LUCENE-2486: Fixed intermittent FileNotFoundException on doc store
-  files when a mergedSegmentWarmer is set on IndexWriter.  (Mike
-  McCandless)
-
 * LUCENE-2496: Don't throw NPE if IndexWriter is opened with CREATE on
   a prior (corrupt) index missing its segments_N file.  (Mike
   McCandless)
@@ -584,13 +483,6 @@ Optimizations
   BooleanQuery.maxClauseCount() as before. 
   (Uwe Schindler, Robert Muir, Mike McCandless)
 
-* LUCENE-2135: On IndexReader.close, forcefully evict any entries from
-  the FieldCache rather than waiting for the WeakHashMap to release
-  the reference (Mike McCandless)
-
-* LUCENE-2161: Improve concurrency of IndexReader, especially in the
-  context of near real-time readers.  (Mike McCandless)
-
 * LUCENE-2164: ConcurrentMergeScheduler has more control over merge
   threads.  First, it gives smaller merges higher thread priority than
   larges ones.  Second, a new set/getMaxMergeCount setting will pause
@@ -628,16 +520,10 @@ Optimizations
   because then it will make sense to make the RAM buffers as large as 
   possible. (Mike McCandless, Michael Busch)
 
-* LUCENE-2360: Small speedup to recycling of reused per-doc RAM in
-  IndexWriter (Robert Muir, Mike McCandless)
-
 * LUCENE-2380: The terms field cache methods (getTerms,
   getTermsIndex), which replace the older String equivalents
   (getStrings, getStringIndex), consume quite a bit less RAM in most
   cases.  (Mike McCandless)
-  
-* LUCENE-2494: Use CompletionService in ParallelMultiSearcher instead of
-  simple polling for resutls. (Edward Drapkin, Simon Willnauer) 
 
 Build
 
@@ -695,6 +581,144 @@ Test Cases
 * LUCENE-2398: Improve tests to work better from IDEs such as Eclipse.
   (Paolo Castagna via Robert Muir)
 
+================== Release 2.9.3 / 3.0.2 2010-06-18 ====================
+
+Changes in backwards compatibility policy
+
+* LUCENE-2135: Added FieldCache.purge(IndexReader) method to the
+  interface.  Anyone implementing FieldCache externally will need to
+  fix their code to implement this, on upgrading.  (Mike McCandless)
+
+Changes in runtime behavior
+
+* LUCENE-2421: NativeFSLockFactory does not throw LockReleaseFailedException if 
+  it cannot delete the lock file, since obtaining the lock does not fail if the 
+  file is there. (Shai Erera)
+
+* LUCENE-2060 (2.9.3 only): Changed ConcurrentMergeScheduler's default for
+  maxNumThreads from 3 to 1, because in practice we get the most gains
+  from running a single merge in the backround.  More than one
+  concurrent merge causes alot of thrashing (though it's possible on
+  SSD storage that there would be net gains).  (Jason Rutherglen, Mike
+  McCandless)
+
+Bug fixes
+
+* LUCENE-2046 (2.9.3 only): IndexReader should not see the index as changed, after
+  IndexWriter.prepareCommit has been called but before
+  IndexWriter.commit is called. (Peter Keegan via Mike McCandless)
+
+* LUCENE-2119: Don't throw NegativeArraySizeException if you pass
+  Integer.MAX_VALUE as nDocs to IndexSearcher search methods.  (Paul
+  Taylor via Mike McCandless)
+
+* LUCENE-2142: FieldCacheImpl.getStringIndex no longer throws an
+  exception when term count exceeds doc count.  (Mike McCandless)
+
+* LUCENE-2104: NativeFSLock.release() would silently fail if the lock is held by 
+  another thread/process.  (Shai Erera via Uwe Schindler)
+  
+* LUCENE-2283: Use shared memory pool for term vector and stored
+  fields buffers. This memory will be reclaimed if needed according to
+  the configured RAM Buffer Size for the IndexWriter.  This also fixes
+  potentially excessive memory usage when many threads are indexing a
+  mix of small and large documents.  (Tim Smith via Mike McCandless)
+
+* LUCENE-2300: If IndexWriter is pooling reader (because NRT reader
+  has been obtained), and addIndexes* is run, do not pool the
+  readers from the external directory.  This is harmless (NRT reader is
+  correct), but a waste of resources.  (Mike McCandless)
+
+* LUCENE-2422: Don't reuse byte[] in IndexInput/Output -- it gains
+  little performance, and ties up possibly large amounts of memory
+  for apps that index large docs.  (Ross Woolf via Mike McCandless)
+
+* LUCENE-2387: Don't hang onto Fieldables from the last doc indexed,
+  in IndexWriter, nor the Reader in Tokenizer after close is
+  called.  (Ruben Laguna, Uwe Schindler, Mike McCandless)
+
+* LUCENE-2417: IndexCommit did not implement hashCode() and equals() 
+  consistently. Now they both take Directory and version into consideration. In
+  addition, all of IndexComnmit methods which threw 
+  UnsupportedOperationException are now abstract. (Shai Erera)
+
+* LUCENE-2467: Fixed memory leaks in IndexWriter when large documents
+  are indexed.  (Mike McCandless)
+
+* LUCENE-2473: Clicking on the "More Results" link in the luceneweb.war
+  demo resulted in ArrayIndexOutOfBoundsException.
+  (Sami Siren via Robert Muir)
+
+* LUCENE-2476: If any exception is hit init'ing IW, release the write
+  lock (previously we only released on IOException).  (Tamas Cservenak
+  via Mike McCandless)
+
+* LUCENE-2478: Fix CachingWrapperFilter to not throw NPE when
+  Filter.getDocIdSet() returns null.  (Uwe Schindler, Daniel Noll)
+
+* LUCENE-2468: Allow specifying how new deletions should be handled in
+  CachingWrapperFilter and CachingSpanFilter.  By default, new
+  deletions are ignored in CachingWrapperFilter, since typically this
+  filter is AND'd with a query that correctly takes new deletions into
+  account.  This should be a performance gain (higher cache hit rate)
+  in apps that reopen readers, or use near-real-time reader
+  (IndexWriter.getReader()), but may introduce invalid search results
+  (allowing deleted docs to be returned) for certain cases, so a new
+  expert ctor was added to CachingWrapperFilter to enforce deletions
+  at a performance cost.  CachingSpanFilter by default recaches if
+  there are new deletions (Shay Banon via Mike McCandless)
+
+* LUCENE-2299: If you open an NRT reader while addIndexes* is running,
+  it may miss some segments (Earwin Burrfoot via Mike McCandless)
+
+* LUCENE-2397: Don't throw NPE from SnapshotDeletionPolicy.snapshot if
+  there are no commits yet (Shai Erera)
+
+* LUCENE-2424: Fix FieldDoc.toString to actually return its fields
+  (Stephen Green via Mike McCandless)
+
+* LUCENE-2311: Always pass a "fully loaded" (terms index & doc stores)
+  SegmentsReader to IndexWriter's mergedSegmentWarmer (if set), so
+  that warming is free to do whatever it needs to.  (Earwin Burrfoot
+  via Mike McCandless)
+
+* LUCENE-2486: Fixed intermittent FileNotFoundException on doc store
+  files when a mergedSegmentWarmer is set on IndexWriter.  (Mike
+  McCandless)
+
+API Changes
+
+* LUCENE-2281: added doBeforeFlush to IndexWriter to allow extensions to perform
+  operations before flush starts. Also exposed doAfterFlush as protected instead
+  of package-private. (Shai Erera via Mike McCandless)
+
+* LUCENE-2356: Add IndexWriter.set/getReaderTermsIndexDivisor, to set
+  what IndexWriter passes for termsIndexDivisor to the readers it
+  opens internally when applying deletions or creating a
+  near-real-time reader.  (Earwin Burrfoot via Mike McCandless)
+
+Optimizations
+
+* LUCENE-2494 (3.0.2 only): Use CompletionService in ParallelMultiSearcher
+  instead of simple polling for results. (Edward Drapkin, Simon Willnauer) 
+
+* LUCENE-2135: On IndexReader.close, forcefully evict any entries from
+  the FieldCache rather than waiting for the WeakHashMap to release
+  the reference (Mike McCandless)
+
+* LUCENE-2161: Improve concurrency of IndexReader, especially in the
+  context of near real-time readers.  (Mike McCandless)
+
+* LUCENE-2360: Small speedup to recycling of reused per-doc RAM in
+  IndexWriter (Robert Muir, Mike McCandless)
+
+Build
+
+* LUCENE-2488 (2.9.3 only): Support build with JDK 1.4 and exclude Java 1.5
+  contrib modules on request (pass '-Dforce.jdk14.build=true') when
+  compiling/testing/packaging. This marks the benchmark contrib also
+  as Java 1.5, as it depends on fast-vector-highlighter. (Uwe Schindler)
+
 ================== Release 2.9.2 / 3.0.1 2010-02-26 ====================
 
 Changes in backwards compatibility policy
@@ -861,13 +885,6 @@ Changes in runtime behavior
   fields when reading. You have to reindex to do that.
   (Michael Busch, Uwe Schindler)
 
-* LUCENE-2060: Changed ConcurrentMergeScheduler's default for
-  maxNumThreads from 3 to 1, because in practice we get the most
-  gains from running a single merge in the background.  More than one
-  concurrent merge causes a lot of thrashing (though it's possible on
-  SSD storage that there would be net gains).  (Jason Rutherglen,
-  Mike McCandless)
-
 API Changes
 
 * LUCENE-1257, LUCENE-1984, LUCENE-1985, LUCENE-2057, LUCENE-1833, LUCENE-2012,
diff --git a/lucene/contrib/CHANGES.txt b/lucene/contrib/CHANGES.txt
index 0d8cd00..3b2757d 100644
--- a/lucene/contrib/CHANGES.txt
+++ b/lucene/contrib/CHANGES.txt
@@ -218,6 +218,10 @@ Other
  * LUCENE-2415: Use reflection instead of a shim class to access Jakarta
    Regex prefix.  (Uwe Schindler)
 
+================== Release 2.9.3 / 3.0.2 2010-06-18 ====================
+
+No changes.
+
 ================== Release 2.9.2 / 3.0.1 2010-02-26 ====================
 
 New features

