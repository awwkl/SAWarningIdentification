GitDiffStart: c02eee38d43ce0e836eec7c3c37c33d60b57f7c6 | Wed Mar 11 19:17:50 2009 +0000
diff --git a/contrib/dataimporthandler/CHANGES.txt b/contrib/dataimporthandler/CHANGES.txt
index 5ab50df..60cf125 100644
--- a/contrib/dataimporthandler/CHANGES.txt
+++ b/contrib/dataimporthandler/CHANGES.txt
@@ -86,6 +86,10 @@ New Features
               of TemplateTransformer in other transformers, among other things.
               (Fergus McMenemie, Noble Paul via shalin)
 
+20.SOLR-1066: New methods in Context to expose Script details. ScriptTransformer changed to read scripts
+              through the new API methods.
+              (Noble Paul via shalin)
+
 Optimizations
 ----------------------
 1. SOLR-846:  Reduce memory consumption during delta import by removing keys when used
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTest.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTest.java
index a86d5f5..1525a40 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTest.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTest.java
@@ -77,7 +77,7 @@ public abstract class AbstractDataImportHandlerTest extends
    * Helper for creating a Context instance. Useful for testing Transformers
    */
   @SuppressWarnings("unchecked")
-  public static Context getContext(DataConfig.Entity parentEntity,
+  public static TestContext getContext(DataConfig.Entity parentEntity,
                                    VariableResolverImpl resolver, DataSource parentDataSource,
                                    int currProcess, final List<Map<String, String>> entityFields,
                                    final Map<String, String> entityAttrs) {
@@ -85,65 +85,7 @@ public abstract class AbstractDataImportHandlerTest extends
     final Context delegate = new ContextImpl(parentEntity, resolver,
             parentDataSource, currProcess,
             new HashMap<String, Object>(), null, null);
-    return new Context() {
-      public String getEntityAttribute(String name) {
-        return entityAttrs == null ? delegate.getEntityAttribute(name)
-                : entityAttrs.get(name);
-      }
-
-      public List<Map<String, String>> getAllEntityFields() {
-        return entityFields == null ? delegate.getAllEntityFields()
-                : entityFields;
-      }
-
-      public VariableResolver getVariableResolver() {
-        return delegate.getVariableResolver();
-      }
-
-      public DataSource getDataSource() {
-        return delegate.getDataSource();
-      }
-
-      public boolean isRootEntity() {
-        return false;
-      }
-
-      public int currentProcess() {
-        return delegate.currentProcess();
-      }
-
-      public Map<String, Object> getRequestParameters() {
-        return delegate.getRequestParameters();
-      }
-
-      public EntityProcessor getEntityProcessor() {
-        return null;
-      }
-
-      public void setSessionAttribute(String name, Object val, String scope) {
-        delegate.setSessionAttribute(name, val, scope);
-      }
-
-      public Object getSessionAttribute(String name, String scope) {
-        return delegate.getSessionAttribute(name, scope);
-      }
-
-      public Context getParentContext() {
-        return delegate.getParentContext();
-      }
-
-      public DataSource getDataSource(String name) {
-        return delegate.getDataSource(name);
-      }
-
-      public SolrCore getSolrCore() {
-        return delegate.getSolrCore();
-      }
-
-      public Map<String, Object> getStats() {
-        return delegate.getStats();
-      }
-    };
+    return new TestContext(entityAttrs, delegate, entityFields);
   }
 
   /**
@@ -162,4 +104,84 @@ public abstract class AbstractDataImportHandlerTest extends
 
     return result;
   }
+
+  static class TestContext extends Context {
+    private final Map<String, String> entityAttrs;
+    private final Context delegate;
+    private final List<Map<String, String>> entityFields;
+    String script,scriptlang;
+
+    public TestContext(Map<String, String> entityAttrs, Context delegate, List<Map<String, String>> entityFields) {
+      this.entityAttrs = entityAttrs;
+      this.delegate = delegate;
+      this.entityFields = entityFields;
+    }
+
+    public String getEntityAttribute(String name) {
+      return entityAttrs == null ? delegate.getEntityAttribute(name)
+              : entityAttrs.get(name);
+    }
+
+    public List<Map<String, String>> getAllEntityFields() {
+      return entityFields == null ? delegate.getAllEntityFields()
+              : entityFields;
+    }
+
+    public VariableResolver getVariableResolver() {
+      return delegate.getVariableResolver();
+    }
+
+    public DataSource getDataSource() {
+      return delegate.getDataSource();
+    }
+
+    public boolean isRootEntity() {
+      return false;
+    }
+
+    public int currentProcess() {
+      return delegate.currentProcess();
+    }
+
+    public Map<String, Object> getRequestParameters() {
+      return delegate.getRequestParameters();
+    }
+
+    public EntityProcessor getEntityProcessor() {
+      return null;
+    }
+
+    public void setSessionAttribute(String name, Object val, String scope) {
+      delegate.setSessionAttribute(name, val, scope);
+    }
+
+    public Object getSessionAttribute(String name, String scope) {
+      return delegate.getSessionAttribute(name, scope);
+    }
+
+    public Context getParentContext() {
+      return delegate.getParentContext();
+    }
+
+    public DataSource getDataSource(String name) {
+      return delegate.getDataSource(name);
+    }
+
+    public SolrCore getSolrCore() {
+      return delegate.getSolrCore();
+    }
+
+    public Map<String, Object> getStats() {
+      return delegate.getStats();
+    }
+
+
+    public String getScript() {
+      return script == null ? delegate.getScript() : script;
+    }
+
+    public String getScriptLanguage() {
+      return scriptlang == null ? delegate.getScriptLanguage() : scriptlang;
+    }
+  }
 }
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/Context.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/Context.java
index c0bc6b7..b048fb1 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/Context.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/Context.java
@@ -180,4 +180,14 @@ public abstract class Context {
    * @return a Map containing running statistics of the current import
    */
   public abstract Map<String, Object> getStats();
+
+  /**
+   * Returns the text specified in the script tag in the data-config.xml 
+   */
+  public abstract String getScript();
+
+  /**
+   * Returns the language of the script as specified in the script tag in data-config.xml
+   */
+  public abstract String getScriptLanguage();
 }
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java
index 1b07e58..ea77d97 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java
@@ -179,4 +179,20 @@ public class ContextImpl extends Context {
   public Map<String, Object> getStats() {
     return docBuilder != null ? docBuilder.importStatistics.getStatsSnapshot() : Collections.<String, Object>emptyMap();
   }
+
+  public String getScript() {
+    if(dataImporter != null) {
+      DataConfig.Script script = dataImporter.getConfig().script;
+      return script == null ? null : script.text;
+    }
+    return null;
+  }
+
+  public String getScriptLanguage() {
+    if (dataImporter != null) {
+      DataConfig.Script script = dataImporter.getConfig().script;
+      return script == null ? null : script.language;
+    }
+    return null;
+  }
 }
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.java
index 1727842..2a9da23 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.java
@@ -163,7 +163,7 @@ public class DataConfig {
   public static class Script {
     public String language;
 
-    public String script;
+    public String text;
 
     public Script() {
     }
@@ -173,7 +173,7 @@ public class DataConfig {
       StringBuilder buffer = new StringBuilder();
       String script = getTxt(e, buffer);
       if (script != null)
-        this.script = script.trim();
+        this.text = script.trim();
     }
   }
 
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java
index 7b2d99c..58724d8 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java
@@ -92,10 +92,6 @@ public class DocBuilder {
         indexerNamespace.put(key, lastIndex);
       }
     }
-    if (dataImporter.getConfig().script != null) {
-      indexerNamespace.put(DataConfig.SCRIPT, dataImporter.getConfig().script.script);
-      indexerNamespace.put(DataConfig.SCRIPT_LANG, dataImporter.getConfig().script.language);
-    }
     resolver.addNamespace(DataConfig.IMPORTER_NS, indexerNamespace);
     return resolver;
   }
@@ -290,7 +286,7 @@ public class DocBuilder {
                              Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,
                              ContextImpl parentCtx) {
 
-    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());
+    EntityProcessor entityProcessor = getEntityProcessor(entity);
 
     ContextImpl ctx = new ContextImpl(entity, vr, null,
             pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,
@@ -482,7 +478,7 @@ public class DocBuilder {
     }
   }
 
-  public static EntityProcessor getEntityProcessor(DataConfig.Entity entity, SolrCore core) {
+  private EntityProcessor getEntityProcessor(DataConfig.Entity entity) {
     if (entity.processor != null)
       return entity.processor;
     EntityProcessor entityProcessor;
@@ -490,7 +486,7 @@ public class DocBuilder {
       entityProcessor = new SqlEntityProcessor();
     } else {
       try {
-        entityProcessor = (EntityProcessor) loadClass(entity.proc, core)
+        entityProcessor = (EntityProcessor) loadClass(entity.proc, dataImporter.getCore())
                 .newInstance();
       } catch (Exception e) {
         throw new DataImportHandlerException(DataImportHandlerException.SEVERE,
@@ -511,7 +507,7 @@ public class DocBuilder {
   @SuppressWarnings("unchecked")
   public Set<Map<String, Object>> collectDelta(DataConfig.Entity entity,
                                                DataConfig.Entity parentEntity, VariableResolverImpl resolver,
-                                               DataImporter context, Set<Map<String, Object>> deletedRows) {
+                                               DataImporter dataImporter, Set<Map<String, Object>> deletedRows) {
     //someone called abort
     if (stop.get())
       return new HashSet();
@@ -522,7 +518,7 @@ public class DocBuilder {
 
       for (DataConfig.Entity entity1 : entity.entities) {
         //this ensures that we start from the leaf nodes
-        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, context,
+        myModifiedPks.addAll(collectDelta(entity1, entity, resolver, dataImporter,
                 deletedRows));
         //someone called abort
         if (stop.get())
@@ -534,7 +530,7 @@ public class DocBuilder {
 
     Set<Map<String, Object>> deltaSet = new HashSet<Map<String, Object>>();
     resolver.addNamespace(null, (Map) entity.allAttributes);
-    EntityProcessor entityProcessor = getEntityProcessor(entity, context.getCore());
+    EntityProcessor entityProcessor = getEntityProcessor(entity);
     ContextImpl context1 = new ContextImpl(entity, resolver, null, Context.FIND_DELTA, session, null, this);
     resolver.context = context1;
     entityProcessor.init(context1);
@@ -585,7 +581,7 @@ public class DocBuilder {
     //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these
     //so propogate up the changes in the chain
     if (parentEntity != null && parentEntity.isDocRoot) {
-      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity, context.getCore());
+      EntityProcessor parentEntityProcessor = getEntityProcessor(parentEntity);
       ContextImpl context2 = new ContextImpl(parentEntity, resolver, null, Context.FIND_DELTA, session, null, this);
       resolver.context = context2;
       parentEntityProcessor.init(context2);
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer.java
index caa2fa3..937ccbf 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer.java
@@ -71,10 +71,8 @@ public class ScriptTransformer extends Transformer {
 
   private void initEngine(Context context) {
     try {
-      String scriptText = (String) context.getVariableResolver().resolve(
-              DataConfig.IMPORTER_NS + "." + DataConfig.SCRIPT);
-      String scriptLang = (String) context.getVariableResolver().resolve(
-              DataConfig.IMPORTER_NS + "." + DataConfig.SCRIPT_LANG);
+      String scriptText = context.getScript();
+      String scriptLang = context.getScriptLanguage();
       Object scriptEngineMgr = Class
               .forName("javax.script.ScriptEngineManager").newInstance();
       // create a Script engine
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer.java
index 0ecf844..0fa6bf4 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestScriptTransformer.java
@@ -64,14 +64,11 @@ public class TestScriptTransformer {
     Map<String, String> entity = new HashMap<String, String>();
     entity.put("name", "hello");
     entity.put("transformer", "script:" + funcName);
-    Map<String, Object> dataImporterNs = new HashMap<String, Object>();
-    dataImporterNs.put(DataConfig.SCRIPT_LANG, "JavaScript");
-    dataImporterNs.put(DataConfig.SCRIPT, script);
-    VariableResolverImpl vr = new VariableResolverImpl();
-    vr.addNamespace(DataConfig.IMPORTER_NS, dataImporterNs);
 
-    Context context = AbstractDataImportHandlerTest.getContext(null, vr, null,
+    AbstractDataImportHandlerTest.TestContext context = AbstractDataImportHandlerTest.getContext(null, null, null,
             0, fields, entity);
+    context.script = script;
+    context.scriptlang = "JavaScript";
     return context;
   }
 
@@ -101,7 +98,7 @@ public class TestScriptTransformer {
     DataConfig config = new DataConfig();
     config.readFromXml((Element) document.getElementsByTagName("dataConfig")
             .item(0));
-    Assert.assertTrue(config.script.script.indexOf("checkNextToken") > -1);
+    Assert.assertTrue(config.script.text.indexOf("checkNextToken") > -1);
   }
 
   @Test
@@ -114,7 +111,7 @@ public class TestScriptTransformer {
     config.readFromXml((Element) document.getElementsByTagName("dataConfig")
             .item(0));
 
-    Context c = getContext("checkNextToken", config.script.script);
+    Context c = getContext("checkNextToken", config.script.text);
 
     Map map = new HashMap();
     map.put("nextToken", "hello");

