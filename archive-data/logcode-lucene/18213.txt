GitDiffStart: 55f589ae9e6d5aec6ccc21e55736bc12a9e21998 | Sat Mar 20 14:57:28 2010 +0000
diff --git a/solr/src/java/org/apache/solr/core/RAMDirectoryFactory.java b/solr/src/java/org/apache/solr/core/RAMDirectoryFactory.java
index ec6d73b..8ae4bb0 100644
--- a/solr/src/java/org/apache/solr/core/RAMDirectoryFactory.java
+++ b/solr/src/java/org/apache/solr/core/RAMDirectoryFactory.java
@@ -29,15 +29,17 @@ import java.util.HashMap;
  * Directory provider for using lucene RAMDirectory
  */
 public class RAMDirectoryFactory extends StandardDirectoryFactory {
-  private Map<String, Directory> directories = new HashMap<String, Directory>();
+  private Map<String, RefCntRamDirectory> directories = new HashMap<String, RefCntRamDirectory>();
 
   @Override
   public Directory open(String path) throws IOException {
     synchronized (this) {
-      Directory directory = directories.get(path);
-      if (directory == null) {
-        directory = openNew(path);
+      RefCntRamDirectory directory = directories.get(path);
+      if (directory == null || !directory.isOpen()) {
+        directory = (RefCntRamDirectory) openNew(path);
         directories.put(path, directory);
+      } else {
+        directory.incRef();
       }
 
       return directory;
@@ -53,9 +55,9 @@ public class RAMDirectoryFactory extends StandardDirectoryFactory {
     boolean indexExists = dirFile.canRead();
     if (indexExists) {
       Directory dir = super.open(path);
-      directory = new RAMDirectory(dir);
+      directory = new RefCntRamDirectory(dir);
     } else {
-      directory = new RAMDirectory();
+      directory = new RefCntRamDirectory();
     }
     return directory;
   }
diff --git a/solr/src/java/org/apache/solr/core/RefCntRamDirectory.java b/solr/src/java/org/apache/solr/core/RefCntRamDirectory.java
new file mode 100644
index 0000000..16332b1
--- /dev/null
+++ b/solr/src/java/org/apache/solr/core/RefCntRamDirectory.java
@@ -0,0 +1,46 @@
+package org.apache.solr.core;
+
+import java.io.IOException;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+
+public class RefCntRamDirectory extends RAMDirectory {
+  
+  private final AtomicInteger refCount = new AtomicInteger();
+  
+  public RefCntRamDirectory() {
+    super();
+    incRef();
+  }
+
+  public RefCntRamDirectory(Directory dir) throws IOException {
+    this();
+    Directory.copy(dir, this, false);
+  }
+  
+  public void incRef() {
+    ensureOpen();
+    refCount.incrementAndGet();
+  }
+  
+  public void decRef() {
+    ensureOpen();
+    if (refCount.getAndDecrement() == 1) {
+      close();
+    }
+  }
+  
+  public final synchronized void close() {
+    if (isOpen) {
+      decRef();
+      super.close();
+    }
+  }
+  
+  public boolean isOpen() {
+    return isOpen;
+  }
+
+}

