GitDiffStart: f7673b59f10ffd8a36f3eaf6e7ec7242e0d31c6c | Thu Jun 3 19:34:08 2010 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 4bcfdd2..e97c39e 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -410,6 +410,9 @@ Other Changes
   option.  It has never worked very well, and in recent versions of
   Solr hasn't worked at all.  (hossman)
 
+* SOLR-1938: ElisionFilterFactory will use a default set of French contractions
+  if you do not supply a custom articles file.  (rmuir)
+
 * SOLR-1889: The default logic for the 'mm' param of DismaxQParser and
   ExtendedDismaxQParser has been changed to be determined based on the
   effective value of the 'q.op' param (hossman)
diff --git a/solr/src/java/org/apache/solr/analysis/ElisionFilterFactory.java b/solr/src/java/org/apache/solr/analysis/ElisionFilterFactory.java
index 319c459..3ced224 100644
--- a/solr/src/java/org/apache/solr/analysis/ElisionFilterFactory.java
+++ b/solr/src/java/org/apache/solr/analysis/ElisionFilterFactory.java
@@ -41,14 +41,13 @@ public class ElisionFilterFactory extends BaseTokenFilterFactory implements Reso
       } catch (IOException e) {
         throw new RuntimeException(e);
       }
-    } else {
-      throw new RuntimeException("No articles specified for ElisionFilterFactory");
     }
   }
 
   public ElisionFilter create(TokenStream input) {
     assureMatchVersion();
-    return new ElisionFilter(luceneMatchVersion,input,articles);
+    return articles == null ? new ElisionFilter(luceneMatchVersion,input) : 
+        new ElisionFilter(luceneMatchVersion,input,articles);
   }
 }
 
diff --git a/solr/src/test/org/apache/solr/analysis/TestElisionFilterFactory.java b/solr/src/test/org/apache/solr/analysis/TestElisionFilterFactory.java
index 7399baf..41e0a0d 100644
--- a/solr/src/test/org/apache/solr/analysis/TestElisionFilterFactory.java
+++ b/solr/src/test/org/apache/solr/analysis/TestElisionFilterFactory.java
@@ -49,4 +49,19 @@ public class TestElisionFilterFactory extends BaseTokenTestCase {
     assertTokenStreamContents(stream, new String[] { "avion" });
   }
   
+  /**
+   * Test creating an elision filter without specifying any articles
+   */
+  public void testDefaultArticles() throws Exception {
+    Reader reader = new StringReader("l'avion");
+    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);
+    ElisionFilterFactory factory = new ElisionFilterFactory();
+    factory.init(DEFAULT_VERSION_PARAM);
+    ResourceLoader loader = new SolrResourceLoader(null, null);
+    factory.init(new HashMap<String,String>());
+    factory.inform(loader);
+    TokenStream stream = factory.create(tokenizer);
+    assertTokenStreamContents(stream, new String[] { "avion" });
+  }
+  
 }

