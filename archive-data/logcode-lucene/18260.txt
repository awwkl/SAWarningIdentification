GitDiffStart: 1902d9855e9f17e58f49c06cfcdbee890ebec6a1 | Tue Mar 16 10:36:22 2010 +0000
diff --git a/src/java/org/apache/solr/analysis/ArabicLetterTokenizerFactory.java b/src/java/org/apache/solr/analysis/ArabicLetterTokenizerFactory.java
index c8d869a..0ee3d5c 100644
--- a/src/java/org/apache/solr/analysis/ArabicLetterTokenizerFactory.java
+++ b/src/java/org/apache/solr/analysis/ArabicLetterTokenizerFactory.java
@@ -29,6 +29,7 @@ import java.io.Reader;
 public class ArabicLetterTokenizerFactory extends BaseTokenizerFactory{
 
   public ArabicLetterTokenizer create(Reader input) {
-    return new ArabicLetterTokenizer(input);
+    assureMatchVersion();
+    return new ArabicLetterTokenizer(luceneMatchVersion, input);
   }
 }
diff --git a/src/java/org/apache/solr/analysis/ElisionFilterFactory.java b/src/java/org/apache/solr/analysis/ElisionFilterFactory.java
index b7dc1b4..a3350f0 100644
--- a/src/java/org/apache/solr/analysis/ElisionFilterFactory.java
+++ b/src/java/org/apache/solr/analysis/ElisionFilterFactory.java
@@ -56,7 +56,8 @@ public class ElisionFilterFactory extends BaseTokenFilterFactory implements Reso
   }
 
   public ElisionFilter create(TokenStream input) {
-    return new ElisionFilter(input,articles);
+    assureMatchVersion();
+    return new ElisionFilter(luceneMatchVersion,input,articles);
   }
 }
 
diff --git a/src/java/org/apache/solr/analysis/LetterTokenizerFactory.java b/src/java/org/apache/solr/analysis/LetterTokenizerFactory.java
index 9b14fd9..84be9c3 100644
--- a/src/java/org/apache/solr/analysis/LetterTokenizerFactory.java
+++ b/src/java/org/apache/solr/analysis/LetterTokenizerFactory.java
@@ -27,6 +27,7 @@ import java.io.Reader;
  */
 public class LetterTokenizerFactory extends BaseTokenizerFactory {
   public LetterTokenizer create(Reader input) {
-    return new LetterTokenizer(input);
+    assureMatchVersion();
+    return new LetterTokenizer(luceneMatchVersion, input);
   }
 }
diff --git a/src/java/org/apache/solr/analysis/LowerCaseFilterFactory.java b/src/java/org/apache/solr/analysis/LowerCaseFilterFactory.java
index bc2ce5f..20a67cb 100644
--- a/src/java/org/apache/solr/analysis/LowerCaseFilterFactory.java
+++ b/src/java/org/apache/solr/analysis/LowerCaseFilterFactory.java
@@ -25,6 +25,7 @@ import org.apache.lucene.analysis.LowerCaseFilter;
  */
 public class LowerCaseFilterFactory extends BaseTokenFilterFactory {
   public LowerCaseFilter create(TokenStream input) {
-    return new LowerCaseFilter(input);
+    assureMatchVersion();
+    return new LowerCaseFilter(luceneMatchVersion,input);
   }
 }
diff --git a/src/java/org/apache/solr/analysis/LowerCaseTokenizerFactory.java b/src/java/org/apache/solr/analysis/LowerCaseTokenizerFactory.java
index 6246e24..b92441c 100644
--- a/src/java/org/apache/solr/analysis/LowerCaseTokenizerFactory.java
+++ b/src/java/org/apache/solr/analysis/LowerCaseTokenizerFactory.java
@@ -27,6 +27,7 @@ import java.io.Reader;
  */
 public class LowerCaseTokenizerFactory extends BaseTokenizerFactory {
   public LowerCaseTokenizer create(Reader input) {
-    return new LowerCaseTokenizer(input);
+    assureMatchVersion();
+    return new LowerCaseTokenizer(luceneMatchVersion,input);
   }
 }
diff --git a/src/java/org/apache/solr/analysis/ReverseStringFilterFactory.java b/src/java/org/apache/solr/analysis/ReverseStringFilterFactory.java
index b14d362..7ebba14 100644
--- a/src/java/org/apache/solr/analysis/ReverseStringFilterFactory.java
+++ b/src/java/org/apache/solr/analysis/ReverseStringFilterFactory.java
@@ -28,7 +28,8 @@ import org.apache.lucene.analysis.reverse.ReverseStringFilter;
  */
 public class ReverseStringFilterFactory extends BaseTokenFilterFactory {
   public ReverseStringFilter create(TokenStream in) {
-    return new ReverseStringFilter(in);
+    assureMatchVersion();
+    return new ReverseStringFilter(luceneMatchVersion,in);
   }
 }
 
diff --git a/src/java/org/apache/solr/analysis/RussianLetterTokenizerFactory.java b/src/java/org/apache/solr/analysis/RussianLetterTokenizerFactory.java
index 53c424d..cd4b670 100644
--- a/src/java/org/apache/solr/analysis/RussianLetterTokenizerFactory.java
+++ b/src/java/org/apache/solr/analysis/RussianLetterTokenizerFactory.java
@@ -36,7 +36,8 @@ public class RussianLetterTokenizerFactory extends BaseTokenizerFactory {
   }
 
   public RussianLetterTokenizer create(Reader in) {
-    return new RussianLetterTokenizer(in);
+    assureMatchVersion();
+    return new RussianLetterTokenizer(luceneMatchVersion,in);
   }
 }
 
diff --git a/src/java/org/apache/solr/analysis/StopFilterFactory.java b/src/java/org/apache/solr/analysis/StopFilterFactory.java
index 6ddff0f..335876f 100644
--- a/src/java/org/apache/solr/analysis/StopFilterFactory.java
+++ b/src/java/org/apache/solr/analysis/StopFilterFactory.java
@@ -78,7 +78,9 @@ public class StopFilterFactory extends BaseTokenFilterFactory implements Resourc
   }
 
   public StopFilter create(TokenStream input) {
-    StopFilter stopFilter = new StopFilter(enablePositionIncrements,input,stopWords,ignoreCase);
+    assureMatchVersion();
+    StopFilter stopFilter = new StopFilter(luceneMatchVersion,input,stopWords,ignoreCase);
+    stopFilter.setEnablePositionIncrements(enablePositionIncrements);
     return stopFilter;
   }
 }
diff --git a/src/java/org/apache/solr/analysis/WhitespaceTokenizerFactory.java b/src/java/org/apache/solr/analysis/WhitespaceTokenizerFactory.java
index ec8aca0..63bf3ed 100644
--- a/src/java/org/apache/solr/analysis/WhitespaceTokenizerFactory.java
+++ b/src/java/org/apache/solr/analysis/WhitespaceTokenizerFactory.java
@@ -27,6 +27,7 @@ import java.io.Reader;
  */
 public class WhitespaceTokenizerFactory extends BaseTokenizerFactory {
   public WhitespaceTokenizer create(Reader input) {
-    return new WhitespaceTokenizer(input);
+    assureMatchVersion();
+    return new WhitespaceTokenizer(luceneMatchVersion,input);
   }
 }
diff --git a/src/test/org/apache/solr/analysis/TestArabicFilters.java b/src/test/org/apache/solr/analysis/TestArabicFilters.java
index 8a6db89..aeecbbd 100644
--- a/src/test/org/apache/solr/analysis/TestArabicFilters.java
+++ b/src/test/org/apache/solr/analysis/TestArabicFilters.java
@@ -33,6 +33,7 @@ public class TestArabicFilters extends BaseTokenTestCase {
   public void testTokenizer() throws Exception {
     Reader reader = new StringReader("ا?ذ?? ????ت أ??ا???");
     ArabicLetterTokenizerFactory factory = new ArabicLetterTokenizerFactory();
+    factory.init(DEFAULT_VERSION_PARAM);
     Tokenizer stream = factory.create(reader);
     assertTokenStreamContents(stream, new String[] {"ا?ذ??", "????ت", "أ??ا???"});
   }
@@ -44,6 +45,8 @@ public class TestArabicFilters extends BaseTokenTestCase {
     Reader reader = new StringReader("ا?ذ?? ????ت أ??ا???");
     ArabicLetterTokenizerFactory factory = new ArabicLetterTokenizerFactory();
     ArabicNormalizationFilterFactory filterFactory = new ArabicNormalizationFilterFactory();
+    factory.init(DEFAULT_VERSION_PARAM);
+    filterFactory.init(DEFAULT_VERSION_PARAM);
     Tokenizer tokenizer = factory.create(reader);
     TokenStream stream = filterFactory.create(tokenizer);
     assertTokenStreamContents(stream, new String[] {"ا?ذ??", "???ت", "ا??ا???"});
@@ -57,6 +60,8 @@ public class TestArabicFilters extends BaseTokenTestCase {
     ArabicLetterTokenizerFactory factory = new ArabicLetterTokenizerFactory();
     ArabicNormalizationFilterFactory normFactory = new ArabicNormalizationFilterFactory();
     ArabicStemFilterFactory stemFactory = new ArabicStemFilterFactory();
+    factory.init(DEFAULT_VERSION_PARAM);
+    normFactory.init(DEFAULT_VERSION_PARAM);
     Tokenizer tokenizer = factory.create(reader);
     TokenStream stream = normFactory.create(tokenizer);
     stream = stemFactory.create(stream);
diff --git a/src/test/org/apache/solr/analysis/TestElisionFilterFactory.java b/src/test/org/apache/solr/analysis/TestElisionFilterFactory.java
index 7c76f98..f542a6c 100644
--- a/src/test/org/apache/solr/analysis/TestElisionFilterFactory.java
+++ b/src/test/org/apache/solr/analysis/TestElisionFilterFactory.java
@@ -39,6 +39,7 @@ public class TestElisionFilterFactory extends BaseTokenTestCase {
     Reader reader = new StringReader("l'avion");
     Tokenizer tokenizer = new WhitespaceTokenizer(reader);
     ElisionFilterFactory factory = new ElisionFilterFactory();
+    factory.init(DEFAULT_VERSION_PARAM);
     ResourceLoader loader = new SolrResourceLoader(null, null);
     Map<String,String> args = new HashMap<String,String>();
     args.put("articles", "frenchArticles.txt");
diff --git a/src/test/org/apache/solr/analysis/TestReverseStringFilterFactory.java b/src/test/org/apache/solr/analysis/TestReverseStringFilterFactory.java
index 107e9a0..2aff8a7 100644
--- a/src/test/org/apache/solr/analysis/TestReverseStringFilterFactory.java
+++ b/src/test/org/apache/solr/analysis/TestReverseStringFilterFactory.java
@@ -35,6 +35,7 @@ public class TestReverseStringFilterFactory extends BaseTokenTestCase {
     Reader reader = new StringReader("simple test");
     Tokenizer tokenizer = new WhitespaceTokenizer(reader);
     ReverseStringFilterFactory factory = new ReverseStringFilterFactory();
+    factory.init(DEFAULT_VERSION_PARAM);
     TokenStream stream = factory.create(tokenizer);
     assertTokenStreamContents(stream, new String[] { "elpmis", "tset" });
   }
diff --git a/src/test/org/apache/solr/analysis/TestRussianFilters.java b/src/test/org/apache/solr/analysis/TestRussianFilters.java
index 6afdbfb..6ad57ac 100644
--- a/src/test/org/apache/solr/analysis/TestRussianFilters.java
+++ b/src/test/org/apache/solr/analysis/TestRussianFilters.java
@@ -34,9 +34,8 @@ public class TestRussianFilters extends BaseTokenTestCase {
    */
   public void testTokenizer() throws Exception {
     Reader reader = new StringReader("?ме??е ? ?ем о ?иле ?лек??омагни?ной 100");
-    Map<String,String> args = new HashMap<String,String>();
     RussianLetterTokenizerFactory factory = new RussianLetterTokenizerFactory();
-    factory.init(args);
+    factory.init(DEFAULT_VERSION_PARAM);
     Tokenizer stream = factory.create(reader);
     assertTokenStreamContents(stream, new String[] {"?ме??е", "?", "?ем", "о",
         "?иле", "?лек??омагни?ной", "100"});
@@ -47,11 +46,10 @@ public class TestRussianFilters extends BaseTokenTestCase {
    */
   public void testLowerCase() throws Exception {
     Reader reader = new StringReader("?ме??е ? ?ем о ?иле ?лек??омагни?ной 100");
-    Map<String,String> args = new HashMap<String,String>();
     RussianLetterTokenizerFactory factory = new RussianLetterTokenizerFactory();
-    factory.init(args);
+    factory.init(DEFAULT_VERSION_PARAM);
     RussianLowerCaseFilterFactory filterFactory = new RussianLowerCaseFilterFactory();
-    filterFactory.init(args);
+    filterFactory.init(DEFAULT_VERSION_PARAM);
     Tokenizer tokenizer = factory.create(reader);
     TokenStream stream = filterFactory.create(tokenizer);
     assertTokenStreamContents(stream, new String[] {"вме??е", "?", "?ем", "о",
@@ -63,13 +61,12 @@ public class TestRussianFilters extends BaseTokenTestCase {
    */
   public void testStemmer() throws Exception {
     Reader reader = new StringReader("?ме??е ? ?ем о ?иле ?лек??омагни?ной 100");
-    Map<String,String> args = new HashMap<String,String>();
     RussianLetterTokenizerFactory factory = new RussianLetterTokenizerFactory();
-    factory.init(args);
+    factory.init(DEFAULT_VERSION_PARAM);
     RussianLowerCaseFilterFactory caseFactory = new RussianLowerCaseFilterFactory();
-    caseFactory.init(args);
+    caseFactory.init(DEFAULT_VERSION_PARAM);
     RussianStemFilterFactory stemFactory = new RussianStemFilterFactory();
-    stemFactory.init(args);
+    stemFactory.init(DEFAULT_VERSION_PARAM);
     Tokenizer tokenizer = factory.create(reader);
     TokenStream stream = caseFactory.create(tokenizer);
     stream = stemFactory.create(stream);

