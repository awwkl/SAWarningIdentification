GitDiffStart: 6c5621f16c61b8cc794b73fb8efecb3092f52d58 | Fri Jul 8 11:26:03 2011 +0000
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer.java
index 81f2e27..dc4ab1f 100644
--- a/modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer.java
+++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer.java
@@ -97,16 +97,15 @@ public class TestThaiAnalyzer extends BaseTokenStreamTestCase {
 	 */
 	public void testPositionIncrements() throws Exception {
 	  assumeTrue("JRE does not support Thai dictionary-based BreakIterator", ThaiWordFilter.DBBI_AVAILABLE);
-	  ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);
-
-    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), "à¸?¸²à¸£à?à¸µà?à¹??à¹??à¹?¸­à¸? the à¹?¸ªà¸??à¸§à?à¸²à?à¸²à?à¸?¸µ", 
+	  final ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);
+    assertAnalyzesTo(analyzer, "à¸?¸²à¸£à?à¸µà?à¹??à¹??à¹?¸­à¸? the à¹?¸ªà¸??à¸§à?à¸²à?à¸²à?à¸?¸µ", 
         new String[] { "à¸?¸²à¸?", "à¸?¸µà¹?", "à¹??à¹?", "à¸??à¸??", "à¹?¸ªà¸??", "à¸§à?à¸?", "à¸?¸²à¸?", "à¸?¸µ" },
         new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },
         new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },
         new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });
 	 
 	  // case that a stopword is adjacent to thai text, with no whitespace
-    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), "à¸?¸²à¸£à?à¸µà?à¹??à¹??à¹?¸­à¸?he à¹?¸ªà¸??à¸§à?à¸²à?à¸²à?à¸?¸µ", 
+    assertAnalyzesTo(analyzer, "à¸?¸²à¸£à?à¸µà?à¹??à¹??à¹?¸­à¸?he à¹?¸ªà¸??à¸§à?à¸²à?à¸²à?à¸?¸µ", 
         new String[] { "à¸?¸²à¸?", "à¸?¸µà¹?", "à¹??à¹?", "à¸??à¸??", "à¹?¸ªà¸??", "à¸§à?à¸?", "à¸?¸²à¸?", "à¸?¸µ" },
         new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },
         new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },

