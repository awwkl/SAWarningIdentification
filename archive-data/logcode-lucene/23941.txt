GitDiffStart: d978defacf12b45c80ef92b42bd968065ea01467 | Tue Feb 7 22:04:39 2006 +0000
diff --git a/build.xml b/build.xml
index ebca302..634fafc 100644
--- a/build.xml
+++ b/build.xml
@@ -70,6 +70,12 @@
   <!-- For now, it's the same as main classpath.  Later it will have JUnit, Clover, etc. -->
   <path id="test.compile.classpath">
     <path refid="compile.classpath" />
+    <pathelement location="${dest}"/>
+  </path>
+
+  <path id="test.run.classpath">
+    <path refid="test.compile.classpath" />
+    <pathelement location="${dest}/tests"/>
   </path>
 
   <!-- Compile unit tests. -->
@@ -77,10 +83,11 @@
           description="Compile unit tests."
           depends="compile">
     <mkdir dir="${dest}/tests" />
-    <javac destdir="${dest}/tests"
-           classpathref="test.compile.classpath">
-      <src dir="${src}/test" />
-      <src dir="${src}/apps/SolarTest/src" />
+    <javac 
+       destdir="${dest}/tests"
+       classpathref="test.compile.classpath">
+      <src path="${src}/test" />
+      <src path="${src}/apps/SolarTest/src" />
     </javac>
   </target>
 
@@ -89,6 +96,14 @@
           description="Runs the unit tests."
           depends="compileTests">
     <echo message="TO-DO later or after we convert tests to JUnit." />
+
+    <java classname="SolrTest" fork="true" dir="src/apps/SolarTest" failonerror="true">
+     <arg line="-test newtest.txt"/>
+     <classpath>
+       <path refid="test.run.classpath" />
+     </classpath>
+    </java>
+
   </target>
 
 
@@ -103,7 +118,7 @@
           description="Creates the Solr distribution files."
           depends="dist-src, dist-war, dist-bin" />
 
-  <!-- Creates the demo WAR file. -->
+  <!-- Creates the Solr WAR file. -->
   <target name="dist-war"
           description="Creates the demo WAR file."
           depends="compile">
diff --git a/src/apps/SolarTest/conf/protwords.txt b/src/apps/SolarTest/conf/protwords.txt
new file mode 100644
index 0000000..f668c1c
--- /dev/null
+++ b/src/apps/SolarTest/conf/protwords.txt
@@ -0,0 +1,5 @@
+#use a protected word file to avoid stemming two
+#unrelated words to the same base word.
+#to test, we will use words that would normally obviously be stemmed.
+cats
+ridding
\ No newline at end of file
diff --git a/src/apps/SolarTest/conf/schema.xml b/src/apps/SolarTest/conf/schema.xml
new file mode 100644
index 0000000..6fbab1c
--- /dev/null
+++ b/src/apps/SolarTest/conf/schema.xml
@@ -0,0 +1,346 @@
+<?xml version="1.0" ?>
+<!-- The Solar schema file. This file should be named "schema.xml" and
+     should be located where the classloader for the Solar webapp can find it.
+
+     $Id: schema.xml,v 1.1 2005/06/09 03:01:13 yonik Exp $
+     $Source: /cvs/main/searching/solar-configs/test/WEB-INF/classes/schema.xml,v $
+     $Name:  $
+  -->
+
+<schema name="test" version="1.0">
+  <types>
+
+    <!-- field type definitions... note that the "name" attribute is
+         just a label to be used by field definitions.  The "class"
+         attribute and any other attributes determine the real type and
+         behavior of the fieldtype.
+      -->
+
+    <!-- numeric field types that store and index the text
+         value verbatim (and hence don't sort correctly or support range queries.)
+         These are provided more for backward compatability, allowing one
+         to create a schema that matches an existing lucene index.
+    -->
+    <fieldtype name="integer" class="solar.IntField"/>
+    <fieldtype name="long" class="solar.LongField"/>
+    <fieldtype name="float" class="solar.FloatField"/>
+    <fieldtype name="double" class="solar.DoubleField"/>
+
+    <!-- numeric field types that manipulate the value into
+       a string value that isn't human readable in it's internal form,
+       but sorts correctly and supports range queries.
+
+         If sortMissingLast="true" then a sort on this field will cause documents
+       without the field to come after documents with the field,
+       regardless of the requested sort order.
+         If sortMissingFirst="true" then a sort on this field will cause documents
+       without the field to come before documents with the field,
+       regardless of the requested sort order.
+         If sortMissingLast="false" and sortMissingFirst="false" (the default),
+       then default lucene sorting will be used which places docs without the field
+       first in an ascending sort and last in a descending sort.
+    -->
+    <fieldtype name="sint" class="solar.SortableIntField" sortMissingLast="true"/>
+    <fieldtype name="slong" class="solar.SortableLongField" sortMissingLast="true"/>
+    <fieldtype name="sfloat" class="solar.SortableFloatField" sortMissingLast="true"/>
+    <fieldtype name="sdouble" class="solar.SortableDoubleField" sortMissingLast="true"/>
+
+    <!-- bcd versions of sortable numeric type may provide smaller
+         storage space and support very large numbers.
+    -->
+    <fieldtype name="bcdint" class="solar.BCDIntField" sortMissingLast="true"/>
+    <fieldtype name="bcdlong" class="solar.BCDLongField" sortMissingLast="true"/>
+    <fieldtype name="bcdstr" class="solar.BCDStrField" sortMissingLast="true"/>
+
+
+    <fieldtype name="boolean" class="solar.BoolField" sortMissingLast="true"/>
+    <fieldtype name="string" class="solar.StrField" sortMissingLast="true"/>
+
+    <!-- format for date is 1995-12-31T23:59:59.999Z and only the fractional
+         seconds part (.999) is optional.
+      -->
+    <fieldtype name="date" class="solar.DateField" sortMissingLast="true"/>
+
+    <!-- solar.TextField allows the specification of custom
+         text analyzers specified as a tokenizer and a list
+         of token filters.
+      -->
+    <fieldtype name="text" class="solar.TextField">
+      <analyzer>
+        <tokenizer class="solar.StandardTokenizerFactory"/>
+        <filter class="solar.StandardFilterFactory"/>
+        <filter class="solar.LowerCaseFilterFactory"/>
+        <filter class="solar.StopFilterFactory"/>
+        <!-- lucene PorterStemFilterFactory deprecated
+          <filter class="solar.PorterStemFilterFactory"/>
+        -->
+        <filter class="solar.EnglishPorterFilterFactory"/>
+      </analyzer>
+    </fieldtype>
+
+
+    <fieldtype name="nametext" class="solar.TextField">
+      <analyzer class="org.apache.lucene.analysis.WhitespaceAnalyzer"/>
+    </fieldtype>
+
+    <fieldtype name="teststop" class="solar.TextField">
+       <analyzer>
+        <tokenizer class="solar.LowerCaseTokenizerFactory"/>
+        <filter class="solar.StandardFilterFactory"/>
+        <filter class="solar.StopFilterFactory" words="stopwords.txt"/>
+      </analyzer>
+    </fieldtype>
+
+    <!-- fieldtypes in this section isolate tokenizers and tokenfilters for testing -->
+    <fieldtype name="lowertok" class="solar.TextField">
+      <analyzer><tokenizer class="solar.LowerCaseTokenizerFactory"/></analyzer>
+    </fieldtype>
+    <fieldtype name="standardtok" class="solar.TextField">
+      <analyzer><tokenizer class="solar.StandardTokenizerFactory"/></analyzer>
+    </fieldtype>
+    <fieldtype name="lettertok" class="solar.TextField">
+      <analyzer><tokenizer class="solar.LetterTokenizerFactory"/></analyzer>
+    </fieldtype>
+    <fieldtype name="whitetok" class="solar.TextField">
+      <analyzer><tokenizer class="solar.WhitespaceTokenizerFactory"/></analyzer>
+    </fieldtype>
+    <fieldtype name="HTMLstandardtok" class="solar.TextField">
+      <analyzer><tokenizer class="solar.HTMLStripStandardTokenizerFactory"/></analyzer>
+    </fieldtype>
+    <fieldtype name="HTMLwhitetok" class="solar.TextField">
+      <analyzer><tokenizer class="solar.HTMLStripWhitespaceTokenizerFactory"/></analyzer>
+    </fieldtype>
+    <fieldtype name="standardtokfilt" class="solar.TextField">
+      <analyzer>
+        <tokenizer class="solar.StandardTokenizerFactory"/>
+        <filter class="solar.StandardFilterFactory"/>
+      </analyzer>
+    </fieldtype>
+    <fieldtype name="standardfilt" class="solar.TextField">
+      <analyzer>
+        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+        <filter class="solar.StandardFilterFactory"/>
+      </analyzer>
+    </fieldtype>
+    <fieldtype name="lowerfilt" class="solar.TextField">
+      <analyzer>
+        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+        <filter class="solar.LowerCaseFilterFactory"/>
+      </analyzer>
+    </fieldtype>
+    <fieldtype name="porterfilt" class="solar.TextField">
+      <analyzer>
+        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+        <filter class="solar.PorterStemFilterFactory"/>
+      </analyzer>
+    </fieldtype>
+    <!-- fieldtype name="snowballfilt" class="solar.TextField">
+      <analyzer>
+        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+        <filter class="solar.SnowballPorterFilterFactory"/>
+      </analyzer>
+    </fieldtype -->
+    <fieldtype name="engporterfilt" class="solar.TextField">
+      <analyzer>
+        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+        <filter class="solar.EnglishPorterFilterFactory"/>
+      </analyzer>
+    </fieldtype>
+    <fieldtype name="custengporterfilt" class="solar.TextField">
+      <analyzer>
+        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+        <filter class="solar.EnglishPorterFilterFactory" protected="protwords.txt"/>
+      </analyzer>
+    </fieldtype>
+    <fieldtype name="stopfilt" class="solar.TextField">
+      <analyzer>
+        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+        <filter class="solar.StopFilterFactory" ignoreCase="true"/>
+      </analyzer>
+    </fieldtype>
+    <fieldtype name="custstopfilt" class="solar.TextField">
+      <analyzer>
+        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+        <filter class="solar.StopFilterFactory" words="stopwords.txt"/>
+      </analyzer>
+    </fieldtype>
+    <fieldtype name="lengthfilt" class="solar.TextField">
+      <analyzer>
+        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+        <filter class="solar.LengthFilterFactory" min="2" max="5"/>
+      </analyzer>
+    </fieldtype>
+
+    <fieldtype name="subword" class="solar.TextField">
+      <analyzer type="index">
+          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
+          <filter class="solar.LowerCaseFilterFactory"/>
+          <filter class="solar.StopFilterFactory"/>
+          <filter class="solar.EnglishPorterFilterFactory"/>
+      </analyzer>
+      <analyzer type="query">
+          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0"/>
+          <filter class="solar.LowerCaseFilterFactory"/>
+          <filter class="solar.StopFilterFactory"/>
+          <filter class="solar.EnglishPorterFilterFactory"/>
+      </analyzer>
+    </fieldtype>
+
+    <!-- more flexible in matching skus, but more chance of a false match -->
+    <fieldtype name="skutype1" class="solar.TextField">
+      <analyzer type="index">
+          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
+          <filter class="solar.LowerCaseFilterFactory"/>
+      </analyzer>
+      <analyzer type="query">
+          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
+          <filter class="solar.LowerCaseFilterFactory"/>
+      </analyzer>
+    </fieldtype>
+
+    <!-- less flexible in matching skus, but less chance of a false match -->
+    <fieldtype name="skutype2" class="solar.TextField">
+      <analyzer type="index">
+          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
+          <filter class="solar.LowerCaseFilterFactory"/>
+      </analyzer>
+      <analyzer type="query">
+          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
+          <filter class="solar.LowerCaseFilterFactory"/>
+      </analyzer>
+    </fieldtype>
+
+    <!-- less flexible in matching skus, but less chance of a false match -->
+    <fieldtype name="syn" class="solar.TextField">
+      <analyzer>
+          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+          <filter name="syn" class="solar.SynonymFilterFactory" synonyms="synonyms.txt"/>
+      </analyzer>
+    </fieldtype>
+
+    <fieldtype  name="unstored" class="solar.StrField" indexed="true" stored="false"/>
+
+
+  <fieldtype name="textgap" class="solar.TextField" multiValued="true" positionIncrementGap="100">
+      <analyzer>
+          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
+          <filter class="solar.LowerCaseFilterFactory"/>
+      </analyzer>
+  </fieldtype>
+
+ </types>
+
+
+ <fields>
+   <field name="id" type="integer" indexed="true" stored="true"/>
+   <field name="name" type="nametext" indexed="true" stored="true"/>
+   <field name="text" type="text" indexed="true" stored="false"/>
+   <field name="subject" type="text" indexed="true" stored="true"/>
+   <field name="title" type="nametext" indexed="true" stored="true"/>
+   <field name="weight" type="float" indexed="true" stored="true"/>
+   <field name="bday" type="date" indexed="true" stored="true"/>
+
+   <field name="title_stemmed" type="text" indexed="true" stored="false"/>
+   <field name="title_lettertok" type="lettertok" indexed="true" stored="false"/>
+
+   <field name="syn" type="syn" indexed="true" stored="true"/>
+
+   <!-- to test property inheritance and overriding -->
+   <field name="shouldbeunstored" type="unstored" />
+   <field name="shouldbestored" type="unstored" stored="true"/>
+   <field name="shouldbeunindexed" type="unstored" indexed="false" stored="true"/>
+
+
+   <!-- test different combinations of indexed and stored -->
+   <field name="bind" type="boolean" indexed="true" stored="false"/>
+   <field name="bsto" type="boolean" indexed="false" stored="true"/>
+   <field name="bindsto" type="boolean" indexed="true" stored="true"/>
+   <field name="isto" type="integer" indexed="false" stored="true"/>
+   <field name="iind" type="integer" indexed="true" stored="false"/>
+   <field name="ssto" type="string" indexed="false" stored="true"/>
+   <field name="sind" type="string" indexed="true" stored="false"/>
+   <field name="sindsto" type="string" indexed="true" stored="true"/>
+
+   <!-- fields to test individual tokenizers and tokenfilters -->
+   <field name="teststop" type="teststop" indexed="true" stored="true"/>
+   <field name="lowertok" type="lowertok" indexed="true" stored="true"/>
+   <field name="standardtok" type="standardtok" indexed="true" stored="true"/>
+   <field name="HTMLstandardtok" type="HTMLstandardtok" indexed="true" stored="true"/>
+   <field name="lettertok" type="lettertok" indexed="true" stored="true"/>
+   <field name="whitetok" type="whitetok" indexed="true" stored="true"/>
+   <field name="HTMLwhitetok" type="HTMLwhitetok" indexed="true" stored="true"/>
+   <field name="standardtokfilt" type="standardtokfilt" indexed="true" stored="true"/>
+   <field name="standardfilt" type="standardfilt" indexed="true" stored="true"/>
+   <field name="lowerfilt" type="lowerfilt" indexed="true" stored="true"/>
+   <field name="porterfilt" type="porterfilt" indexed="true" stored="true"/>
+   <field name="engporterfilt" type="engporterfilt" indexed="true" stored="true"/>
+   <field name="custengporterfilt" type="custengporterfilt" indexed="true" stored="true"/>
+   <field name="stopfilt" type="stopfilt" indexed="true" stored="true"/>
+   <field name="custstopfilt" type="custstopfilt" indexed="true" stored="true"/>
+   <field name="lengthfilt" type="lengthfilt" indexed="true" stored="true"/>
+
+
+   <field name="subword" type="subword" indexed="true" stored="true"/>
+   <field name="sku1" type="skutype1" indexed="true" stored="true"/>
+   <field name="sku2" type="skutype2" indexed="true" stored="true"/>
+
+   <field name="textgap" type="textgap" indexed="true" stored="true"/>
+
+   <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
+        will be used if the name matches any of the patterns.
+        RESTRICTION: the glob-like pattern in the name attribute must have
+        a "*" only at the start or the end.
+        EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
+        Longer patterns will be matched first.  if equal size patterns
+        both match, the first appearing in the schema will be used.
+   -->
+   <dynamicField name="*_i"  type="sint"    indexed="true"  stored="true"/>
+   <dynamicField name="*_s"  type="string"  indexed="true"  stored="true"/>
+   <dynamicField name="*_l"  type="slong"   indexed="true"  stored="true"/>
+   <dynamicField name="*_t"  type="text"    indexed="true"  stored="true"/>
+   <dynamicField name="*_b"  type="boolean" indexed="true"  stored="true"/>
+   <dynamicField name="*_f"  type="sfloat"  indexed="true"  stored="true"/>
+   <dynamicField name="*_d"  type="sdouble" indexed="true"  stored="true"/>
+   <dynamicField name="*_dt" type="date"    indexed="true"  stored="true"/>
+   <dynamicField name="*_bcd" type="bcdstr" indexed="true"  stored="true"/>
+
+   <dynamicField name="*_sI" type="string"  indexed="true"  stored="false"/>
+   <dynamicField name="*_sS" type="string"  indexed="false" stored="true"/>
+   <dynamicField name="t_*"  type="text"    indexed="true"  stored="true"/>
+   
+
+   <!-- for testing to ensure that longer patterns are matched first -->
+   <dynamicField name="*aa"  type="string"  indexed="true" stored="true"/>
+   <dynamicField name="*aaa" type="integer" indexed="false" stored="true"/>
+
+
+
+ </fields>
+
+ <defaultSearchField>text</defaultSearchField>
+ <uniqueKey>id</uniqueKey>
+
+  <!-- copyField commands copy one field to another at the time a document
+        is added to the index.  It's used either to index the same field different
+        ways, or to add multiple fields to the same field for easier/faster searching.
+   -->
+   <copyField source="title" dest="title_stemmed"/>
+   <copyField source="title" dest="title_lettertok"/>
+
+   <copyField source="title" dest="text"/>
+   <copyField source="subject" dest="text"/>
+ 
+
+ <!-- Similarity is the scoring routine for each document vs a query.
+      A custom similarity may be specified here, but the default is fine
+      for most applications.
+ -->
+ <!-- <similarity class="org.apache.lucene.search.DefaultSimilarity"/> -->
+
+</schema>
diff --git a/src/apps/SolarTest/conf/solrconfig.xml b/src/apps/SolarTest/conf/solrconfig.xml
new file mode 100644
index 0000000..f1d96f9
--- /dev/null
+++ b/src/apps/SolarTest/conf/solrconfig.xml
@@ -0,0 +1,191 @@
+<?xml version="1.0" ?>
+
+<!-- $Id$
+     $Source$
+     $Name$
+  -->
+
+<config>
+
+  <!-- Used to specify an alternate directory to hold all index data.
+       It defaults to "index" if not present, and should probably
+       not be changed if replication is in use. -->
+  <!--
+  <indexDir>index</indexDir>
+  -->
+
+  <indexDefaults>
+   <!-- Values here affect all index writers and act as a default
+   unless overridden. -->
+    <useCompoundFile>false</useCompoundFile>
+    <mergeFactor>10</mergeFactor>
+    <maxBufferedDocs>1000</maxBufferedDocs>
+    <maxMergeDocs>2147483647</maxMergeDocs>
+    <maxFieldLength>10000</maxFieldLength>
+
+    <!-- these are global... can't currently override per index -->
+    <writeLockTimeout>1000</writeLockTimeout>
+    <commitLockTimeout>10000</commitLockTimeout>
+
+  </indexDefaults>
+
+  <mainIndex>
+    <!-- lucene options specific to the main on-disk lucene index -->
+    <useCompoundFile>false</useCompoundFile>
+    <mergeFactor>10</mergeFactor>
+    <maxBufferedDocs>1000</maxBufferedDocs>
+    <maxMergeDocs>2147483647</maxMergeDocs>
+    <maxFieldLength>10000</maxFieldLength>
+
+    <unlockOnStartup>true</unlockOnStartup>
+  </mainIndex>
+
+  <updateHandler class="solar.DirectUpdateHandler2">
+
+    <!-- autocommit pending docs if certain criteria are met -->
+    <autocommit>  <!-- NOTE: autocommit not implemented yet -->
+      <maxDocs>10000</maxDocs>
+      <maxSec>3600</maxSec>
+    </autocommit>
+
+    <!-- represents a lower bound on the frequency that commits may
+    occur (in seconds). NOTE: not yet implemented
+    -->
+    <commitIntervalLowerBound>0</commitIntervalLowerBound>
+
+    <!-- The RunExecutableListener executes an external command.
+         exe - the name of the executable to run
+         dir - dir to use as the current working directory. default="."
+         wait - the calling thread waits until the executable returns. default="true"
+         args - the arguments to pass to the program.  default=nothing
+         env - environment variables to set.  default=nothing
+      -->
+    <!-- A postCommit event is fired after every commit
+    <listener event="postCommit" class="solar.RunExecutableListener">
+      <str name="exe">/var/opt/resin3/__PORT__/scripts/solar/snapshooter</str>
+      <str name="dir">/var/opt/resin3/__PORT__</str>
+      <bool name="wait">true</bool>
+      <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
+      <arr name="env"> <str>MYVAR=val1</str> </arr>
+    </listener>
+    -->
+
+
+  </updateHandler>
+
+
+  <query>
+    <!-- Maximum number of clauses in a boolean query... can affect
+        range or wildcard queries that expand to big boolean
+        queries.  An exception is thrown if exceeded.
+    -->
+    <maxBooleanClauses>1024</maxBooleanClauses>
+
+    
+    <!-- Cache specification for Filters or DocSets - unordered set of *all* documents
+         that match a particular query.
+      -->
+    <filterCache
+      class="solar.search.LRUCache"
+      size="512"
+      initialSize="512"
+      autowarmCount="256"/>
+
+    <queryResultCache
+      class="solar.search.LRUCache"
+      size="512"
+      initialSize="512"
+      autowarmCount="1024"/>
+
+    <documentCache
+      class="solar.search.LRUCache"
+      size="512"
+      initialSize="512"
+      autowarmCount="0"/>
+
+    <!--
+    <cache name="myUserCache"
+      class="solar.search.LRUCache"
+      size="4096"
+      initialSize="1024"
+      autowarmCount="1024"
+      regenerator="MyRegenerator"
+      />
+    -->
+
+
+    <useFilterForSortedQuery>true</useFilterForSortedQuery>
+
+    <queryResultWindowSize>10</queryResultWindowSize>
+
+    <HashDocSet maxSize="3000" loadFactor="0.75"/>
+
+
+    <!-- boolToFilterOptimizer converts boolean clauses with zero boost
+         into cached filters if the number of docs selected by the clause exceeds
+         the threshold (represented as a fraction of the total index)
+    -->
+    <boolTofilterOptimizer enabled="true" cacheSize="32" threshold=".05"/>
+
+
+    <!-- a newSearcher event is fired whenever a new searcher is being prepared
+         and there is a current searcher handling requests (aka registered). -->
+    <!-- QuerySenderListener takes an array of NamedList and executes a
+         local query request for each NamedList in sequence. -->
+    <!--
+    <listener event="newSearcher" class="solar.QuerySenderListener">
+      <arr name="queries">
+        <lst> <str name="q">solar</str> <str name="start">0</str> <str name="rows">10</str> </lst>
+        <lst> <str name="q">rocks</str> <str name="start">0</str> <str name="rows">10</str> </lst>
+      </arr>
+    </listener>
+    -->
+
+    <!-- a firstSearcher event is fired whenever a new searcher is being
+         prepared but there is no current registered searcher to handle
+         requests or to gain prewarming data from. -->
+    <!--
+    <listener event="firstSearcher" class="solar.QuerySenderListener">
+      <arr name="queries">
+        <lst> <str name="q">fast_warm</str> <str name="start">0</str> <str name="rows">10</str> </lst>
+      </arr>
+    </listener>
+    -->
+
+
+  </query>
+
+
+  <!-- An alternate set representation that uses an integer hash to store filters (sets of docids).
+       If the set cardinality <= maxSize elements, then HashDocSet will be used instead of the bitset
+       based HashBitset. -->
+
+  <!-- requestHandler plugins... incoming queries will be dispatched to the
+     correct handler based on the qt (query type) param matching the
+     name of registered handlers.
+      The "standard" request handler is the default and will be used if qt
+     is not specified in the request.
+  -->
+  <requestHandler name="standard" class="solar.StandardRequestHandler" />
+  <requestHandler name="old" class="solar.tst.OldRequestHandler" >
+    <int name="myparam">1000</int>
+    <float name="ratio">1.4142135</float>
+    <arr name="myarr"><int>1</int><int>2</int></arr>
+    <str>foo</str>
+  </requestHandler>
+  <requestHandler name="oldagain" class="solar.tst.OldRequestHandler" >
+    <lst name="lst1"> <str name="op">sqrt</str> <int name="val">2</int> </lst>
+    <lst name="lst2"> <str name="op">log</str> <float name="val">10</float> </lst>
+  </requestHandler>
+
+  <requestHandler name="test" class="solar.tst.TestRequestHandler" />
+
+
+  <admin>
+    <defaultQuery>solar</defaultQuery>
+    <gettableFiles>solarconfig.xml conf/solar/WEB-INF/web.external.xml conf/resin.conf </gettableFiles>
+  </admin>
+
+
+
+</config>
diff --git a/src/apps/SolarTest/conf/stopwords.txt b/src/apps/SolarTest/conf/stopwords.txt
new file mode 100644
index 0000000..5401d99
--- /dev/null
+++ b/src/apps/SolarTest/conf/stopwords.txt
@@ -0,0 +1,2 @@
+stopworda
+stopwordb
diff --git a/src/apps/SolarTest/conf/synonyms.txt b/src/apps/SolarTest/conf/synonyms.txt
new file mode 100644
index 0000000..d56bc23
--- /dev/null
+++ b/src/apps/SolarTest/conf/synonyms.txt
@@ -0,0 +1,6 @@
+a => aa
+b => b1 b2
+c => c1,c2
+a\=>a => b\=>b
+a\,a => b\,b
+foo,bar,baz
\ No newline at end of file
diff --git a/src/apps/SolarTest/protwords.txt b/src/apps/SolarTest/protwords.txt
deleted file mode 100644
index f668c1c..0000000
--- a/src/apps/SolarTest/protwords.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-#use a protected word file to avoid stemming two
-#unrelated words to the same base word.
-#to test, we will use words that would normally obviously be stemmed.
-cats
-ridding
\ No newline at end of file
diff --git a/src/apps/SolarTest/run b/src/apps/SolarTest/run
deleted file mode 100755
index 639600f..0000000
--- a/src/apps/SolarTest/run
+++ /dev/null
@@ -1 +0,0 @@
-java -cp "../solar/classes;classes;../../lucene/lucene-1.4.3.jar" SolarPerf -schema test_schema.xml -index F:/root/index -verbose -test newtest.txt
diff --git a/src/apps/SolarTest/schema.xml b/src/apps/SolarTest/schema.xml
deleted file mode 100644
index 6fbab1c..0000000
--- a/src/apps/SolarTest/schema.xml
+++ /dev/null
@@ -1,346 +0,0 @@
-<?xml version="1.0" ?>
-<!-- The Solar schema file. This file should be named "schema.xml" and
-     should be located where the classloader for the Solar webapp can find it.
-
-     $Id: schema.xml,v 1.1 2005/06/09 03:01:13 yonik Exp $
-     $Source: /cvs/main/searching/solar-configs/test/WEB-INF/classes/schema.xml,v $
-     $Name:  $
-  -->
-
-<schema name="test" version="1.0">
-  <types>
-
-    <!-- field type definitions... note that the "name" attribute is
-         just a label to be used by field definitions.  The "class"
-         attribute and any other attributes determine the real type and
-         behavior of the fieldtype.
-      -->
-
-    <!-- numeric field types that store and index the text
-         value verbatim (and hence don't sort correctly or support range queries.)
-         These are provided more for backward compatability, allowing one
-         to create a schema that matches an existing lucene index.
-    -->
-    <fieldtype name="integer" class="solar.IntField"/>
-    <fieldtype name="long" class="solar.LongField"/>
-    <fieldtype name="float" class="solar.FloatField"/>
-    <fieldtype name="double" class="solar.DoubleField"/>
-
-    <!-- numeric field types that manipulate the value into
-       a string value that isn't human readable in it's internal form,
-       but sorts correctly and supports range queries.
-
-         If sortMissingLast="true" then a sort on this field will cause documents
-       without the field to come after documents with the field,
-       regardless of the requested sort order.
-         If sortMissingFirst="true" then a sort on this field will cause documents
-       without the field to come before documents with the field,
-       regardless of the requested sort order.
-         If sortMissingLast="false" and sortMissingFirst="false" (the default),
-       then default lucene sorting will be used which places docs without the field
-       first in an ascending sort and last in a descending sort.
-    -->
-    <fieldtype name="sint" class="solar.SortableIntField" sortMissingLast="true"/>
-    <fieldtype name="slong" class="solar.SortableLongField" sortMissingLast="true"/>
-    <fieldtype name="sfloat" class="solar.SortableFloatField" sortMissingLast="true"/>
-    <fieldtype name="sdouble" class="solar.SortableDoubleField" sortMissingLast="true"/>
-
-    <!-- bcd versions of sortable numeric type may provide smaller
-         storage space and support very large numbers.
-    -->
-    <fieldtype name="bcdint" class="solar.BCDIntField" sortMissingLast="true"/>
-    <fieldtype name="bcdlong" class="solar.BCDLongField" sortMissingLast="true"/>
-    <fieldtype name="bcdstr" class="solar.BCDStrField" sortMissingLast="true"/>
-
-
-    <fieldtype name="boolean" class="solar.BoolField" sortMissingLast="true"/>
-    <fieldtype name="string" class="solar.StrField" sortMissingLast="true"/>
-
-    <!-- format for date is 1995-12-31T23:59:59.999Z and only the fractional
-         seconds part (.999) is optional.
-      -->
-    <fieldtype name="date" class="solar.DateField" sortMissingLast="true"/>
-
-    <!-- solar.TextField allows the specification of custom
-         text analyzers specified as a tokenizer and a list
-         of token filters.
-      -->
-    <fieldtype name="text" class="solar.TextField">
-      <analyzer>
-        <tokenizer class="solar.StandardTokenizerFactory"/>
-        <filter class="solar.StandardFilterFactory"/>
-        <filter class="solar.LowerCaseFilterFactory"/>
-        <filter class="solar.StopFilterFactory"/>
-        <!-- lucene PorterStemFilterFactory deprecated
-          <filter class="solar.PorterStemFilterFactory"/>
-        -->
-        <filter class="solar.EnglishPorterFilterFactory"/>
-      </analyzer>
-    </fieldtype>
-
-
-    <fieldtype name="nametext" class="solar.TextField">
-      <analyzer class="org.apache.lucene.analysis.WhitespaceAnalyzer"/>
-    </fieldtype>
-
-    <fieldtype name="teststop" class="solar.TextField">
-       <analyzer>
-        <tokenizer class="solar.LowerCaseTokenizerFactory"/>
-        <filter class="solar.StandardFilterFactory"/>
-        <filter class="solar.StopFilterFactory" words="stopwords.txt"/>
-      </analyzer>
-    </fieldtype>
-
-    <!-- fieldtypes in this section isolate tokenizers and tokenfilters for testing -->
-    <fieldtype name="lowertok" class="solar.TextField">
-      <analyzer><tokenizer class="solar.LowerCaseTokenizerFactory"/></analyzer>
-    </fieldtype>
-    <fieldtype name="standardtok" class="solar.TextField">
-      <analyzer><tokenizer class="solar.StandardTokenizerFactory"/></analyzer>
-    </fieldtype>
-    <fieldtype name="lettertok" class="solar.TextField">
-      <analyzer><tokenizer class="solar.LetterTokenizerFactory"/></analyzer>
-    </fieldtype>
-    <fieldtype name="whitetok" class="solar.TextField">
-      <analyzer><tokenizer class="solar.WhitespaceTokenizerFactory"/></analyzer>
-    </fieldtype>
-    <fieldtype name="HTMLstandardtok" class="solar.TextField">
-      <analyzer><tokenizer class="solar.HTMLStripStandardTokenizerFactory"/></analyzer>
-    </fieldtype>
-    <fieldtype name="HTMLwhitetok" class="solar.TextField">
-      <analyzer><tokenizer class="solar.HTMLStripWhitespaceTokenizerFactory"/></analyzer>
-    </fieldtype>
-    <fieldtype name="standardtokfilt" class="solar.TextField">
-      <analyzer>
-        <tokenizer class="solar.StandardTokenizerFactory"/>
-        <filter class="solar.StandardFilterFactory"/>
-      </analyzer>
-    </fieldtype>
-    <fieldtype name="standardfilt" class="solar.TextField">
-      <analyzer>
-        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-        <filter class="solar.StandardFilterFactory"/>
-      </analyzer>
-    </fieldtype>
-    <fieldtype name="lowerfilt" class="solar.TextField">
-      <analyzer>
-        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-        <filter class="solar.LowerCaseFilterFactory"/>
-      </analyzer>
-    </fieldtype>
-    <fieldtype name="porterfilt" class="solar.TextField">
-      <analyzer>
-        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-        <filter class="solar.PorterStemFilterFactory"/>
-      </analyzer>
-    </fieldtype>
-    <!-- fieldtype name="snowballfilt" class="solar.TextField">
-      <analyzer>
-        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-        <filter class="solar.SnowballPorterFilterFactory"/>
-      </analyzer>
-    </fieldtype -->
-    <fieldtype name="engporterfilt" class="solar.TextField">
-      <analyzer>
-        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-        <filter class="solar.EnglishPorterFilterFactory"/>
-      </analyzer>
-    </fieldtype>
-    <fieldtype name="custengporterfilt" class="solar.TextField">
-      <analyzer>
-        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-        <filter class="solar.EnglishPorterFilterFactory" protected="protwords.txt"/>
-      </analyzer>
-    </fieldtype>
-    <fieldtype name="stopfilt" class="solar.TextField">
-      <analyzer>
-        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-        <filter class="solar.StopFilterFactory" ignoreCase="true"/>
-      </analyzer>
-    </fieldtype>
-    <fieldtype name="custstopfilt" class="solar.TextField">
-      <analyzer>
-        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-        <filter class="solar.StopFilterFactory" words="stopwords.txt"/>
-      </analyzer>
-    </fieldtype>
-    <fieldtype name="lengthfilt" class="solar.TextField">
-      <analyzer>
-        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-        <filter class="solar.LengthFilterFactory" min="2" max="5"/>
-      </analyzer>
-    </fieldtype>
-
-    <fieldtype name="subword" class="solar.TextField">
-      <analyzer type="index">
-          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
-          <filter class="solar.LowerCaseFilterFactory"/>
-          <filter class="solar.StopFilterFactory"/>
-          <filter class="solar.EnglishPorterFilterFactory"/>
-      </analyzer>
-      <analyzer type="query">
-          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0"/>
-          <filter class="solar.LowerCaseFilterFactory"/>
-          <filter class="solar.StopFilterFactory"/>
-          <filter class="solar.EnglishPorterFilterFactory"/>
-      </analyzer>
-    </fieldtype>
-
-    <!-- more flexible in matching skus, but more chance of a false match -->
-    <fieldtype name="skutype1" class="solar.TextField">
-      <analyzer type="index">
-          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
-          <filter class="solar.LowerCaseFilterFactory"/>
-      </analyzer>
-      <analyzer type="query">
-          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
-          <filter class="solar.LowerCaseFilterFactory"/>
-      </analyzer>
-    </fieldtype>
-
-    <!-- less flexible in matching skus, but less chance of a false match -->
-    <fieldtype name="skutype2" class="solar.TextField">
-      <analyzer type="index">
-          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
-          <filter class="solar.LowerCaseFilterFactory"/>
-      </analyzer>
-      <analyzer type="query">
-          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
-          <filter class="solar.LowerCaseFilterFactory"/>
-      </analyzer>
-    </fieldtype>
-
-    <!-- less flexible in matching skus, but less chance of a false match -->
-    <fieldtype name="syn" class="solar.TextField">
-      <analyzer>
-          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-          <filter name="syn" class="solar.SynonymFilterFactory" synonyms="synonyms.txt"/>
-      </analyzer>
-    </fieldtype>
-
-    <fieldtype  name="unstored" class="solar.StrField" indexed="true" stored="false"/>
-
-
-  <fieldtype name="textgap" class="solar.TextField" multiValued="true" positionIncrementGap="100">
-      <analyzer>
-          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
-          <filter class="solar.LowerCaseFilterFactory"/>
-      </analyzer>
-  </fieldtype>
-
- </types>
-
-
- <fields>
-   <field name="id" type="integer" indexed="true" stored="true"/>
-   <field name="name" type="nametext" indexed="true" stored="true"/>
-   <field name="text" type="text" indexed="true" stored="false"/>
-   <field name="subject" type="text" indexed="true" stored="true"/>
-   <field name="title" type="nametext" indexed="true" stored="true"/>
-   <field name="weight" type="float" indexed="true" stored="true"/>
-   <field name="bday" type="date" indexed="true" stored="true"/>
-
-   <field name="title_stemmed" type="text" indexed="true" stored="false"/>
-   <field name="title_lettertok" type="lettertok" indexed="true" stored="false"/>
-
-   <field name="syn" type="syn" indexed="true" stored="true"/>
-
-   <!-- to test property inheritance and overriding -->
-   <field name="shouldbeunstored" type="unstored" />
-   <field name="shouldbestored" type="unstored" stored="true"/>
-   <field name="shouldbeunindexed" type="unstored" indexed="false" stored="true"/>
-
-
-   <!-- test different combinations of indexed and stored -->
-   <field name="bind" type="boolean" indexed="true" stored="false"/>
-   <field name="bsto" type="boolean" indexed="false" stored="true"/>
-   <field name="bindsto" type="boolean" indexed="true" stored="true"/>
-   <field name="isto" type="integer" indexed="false" stored="true"/>
-   <field name="iind" type="integer" indexed="true" stored="false"/>
-   <field name="ssto" type="string" indexed="false" stored="true"/>
-   <field name="sind" type="string" indexed="true" stored="false"/>
-   <field name="sindsto" type="string" indexed="true" stored="true"/>
-
-   <!-- fields to test individual tokenizers and tokenfilters -->
-   <field name="teststop" type="teststop" indexed="true" stored="true"/>
-   <field name="lowertok" type="lowertok" indexed="true" stored="true"/>
-   <field name="standardtok" type="standardtok" indexed="true" stored="true"/>
-   <field name="HTMLstandardtok" type="HTMLstandardtok" indexed="true" stored="true"/>
-   <field name="lettertok" type="lettertok" indexed="true" stored="true"/>
-   <field name="whitetok" type="whitetok" indexed="true" stored="true"/>
-   <field name="HTMLwhitetok" type="HTMLwhitetok" indexed="true" stored="true"/>
-   <field name="standardtokfilt" type="standardtokfilt" indexed="true" stored="true"/>
-   <field name="standardfilt" type="standardfilt" indexed="true" stored="true"/>
-   <field name="lowerfilt" type="lowerfilt" indexed="true" stored="true"/>
-   <field name="porterfilt" type="porterfilt" indexed="true" stored="true"/>
-   <field name="engporterfilt" type="engporterfilt" indexed="true" stored="true"/>
-   <field name="custengporterfilt" type="custengporterfilt" indexed="true" stored="true"/>
-   <field name="stopfilt" type="stopfilt" indexed="true" stored="true"/>
-   <field name="custstopfilt" type="custstopfilt" indexed="true" stored="true"/>
-   <field name="lengthfilt" type="lengthfilt" indexed="true" stored="true"/>
-
-
-   <field name="subword" type="subword" indexed="true" stored="true"/>
-   <field name="sku1" type="skutype1" indexed="true" stored="true"/>
-   <field name="sku2" type="skutype2" indexed="true" stored="true"/>
-
-   <field name="textgap" type="textgap" indexed="true" stored="true"/>
-
-   <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
-        will be used if the name matches any of the patterns.
-        RESTRICTION: the glob-like pattern in the name attribute must have
-        a "*" only at the start or the end.
-        EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
-        Longer patterns will be matched first.  if equal size patterns
-        both match, the first appearing in the schema will be used.
-   -->
-   <dynamicField name="*_i"  type="sint"    indexed="true"  stored="true"/>
-   <dynamicField name="*_s"  type="string"  indexed="true"  stored="true"/>
-   <dynamicField name="*_l"  type="slong"   indexed="true"  stored="true"/>
-   <dynamicField name="*_t"  type="text"    indexed="true"  stored="true"/>
-   <dynamicField name="*_b"  type="boolean" indexed="true"  stored="true"/>
-   <dynamicField name="*_f"  type="sfloat"  indexed="true"  stored="true"/>
-   <dynamicField name="*_d"  type="sdouble" indexed="true"  stored="true"/>
-   <dynamicField name="*_dt" type="date"    indexed="true"  stored="true"/>
-   <dynamicField name="*_bcd" type="bcdstr" indexed="true"  stored="true"/>
-
-   <dynamicField name="*_sI" type="string"  indexed="true"  stored="false"/>
-   <dynamicField name="*_sS" type="string"  indexed="false" stored="true"/>
-   <dynamicField name="t_*"  type="text"    indexed="true"  stored="true"/>
-   
-
-   <!-- for testing to ensure that longer patterns are matched first -->
-   <dynamicField name="*aa"  type="string"  indexed="true" stored="true"/>
-   <dynamicField name="*aaa" type="integer" indexed="false" stored="true"/>
-
-
-
- </fields>
-
- <defaultSearchField>text</defaultSearchField>
- <uniqueKey>id</uniqueKey>
-
-  <!-- copyField commands copy one field to another at the time a document
-        is added to the index.  It's used either to index the same field different
-        ways, or to add multiple fields to the same field for easier/faster searching.
-   -->
-   <copyField source="title" dest="title_stemmed"/>
-   <copyField source="title" dest="title_lettertok"/>
-
-   <copyField source="title" dest="text"/>
-   <copyField source="subject" dest="text"/>
- 
-
- <!-- Similarity is the scoring routine for each document vs a query.
-      A custom similarity may be specified here, but the default is fine
-      for most applications.
- -->
- <!-- <similarity class="org.apache.lucene.search.DefaultSimilarity"/> -->
-
-</schema>
diff --git a/src/apps/SolarTest/solrconfig.xml b/src/apps/SolarTest/solrconfig.xml
deleted file mode 100644
index f1d96f9..0000000
--- a/src/apps/SolarTest/solrconfig.xml
+++ /dev/null
@@ -1,191 +0,0 @@
-<?xml version="1.0" ?>
-
-<!-- $Id$
-     $Source$
-     $Name$
-  -->
-
-<config>
-
-  <!-- Used to specify an alternate directory to hold all index data.
-       It defaults to "index" if not present, and should probably
-       not be changed if replication is in use. -->
-  <!--
-  <indexDir>index</indexDir>
-  -->
-
-  <indexDefaults>
-   <!-- Values here affect all index writers and act as a default
-   unless overridden. -->
-    <useCompoundFile>false</useCompoundFile>
-    <mergeFactor>10</mergeFactor>
-    <maxBufferedDocs>1000</maxBufferedDocs>
-    <maxMergeDocs>2147483647</maxMergeDocs>
-    <maxFieldLength>10000</maxFieldLength>
-
-    <!-- these are global... can't currently override per index -->
-    <writeLockTimeout>1000</writeLockTimeout>
-    <commitLockTimeout>10000</commitLockTimeout>
-
-  </indexDefaults>
-
-  <mainIndex>
-    <!-- lucene options specific to the main on-disk lucene index -->
-    <useCompoundFile>false</useCompoundFile>
-    <mergeFactor>10</mergeFactor>
-    <maxBufferedDocs>1000</maxBufferedDocs>
-    <maxMergeDocs>2147483647</maxMergeDocs>
-    <maxFieldLength>10000</maxFieldLength>
-
-    <unlockOnStartup>true</unlockOnStartup>
-  </mainIndex>
-
-  <updateHandler class="solar.DirectUpdateHandler2">
-
-    <!-- autocommit pending docs if certain criteria are met -->
-    <autocommit>  <!-- NOTE: autocommit not implemented yet -->
-      <maxDocs>10000</maxDocs>
-      <maxSec>3600</maxSec>
-    </autocommit>
-
-    <!-- represents a lower bound on the frequency that commits may
-    occur (in seconds). NOTE: not yet implemented
-    -->
-    <commitIntervalLowerBound>0</commitIntervalLowerBound>
-
-    <!-- The RunExecutableListener executes an external command.
-         exe - the name of the executable to run
-         dir - dir to use as the current working directory. default="."
-         wait - the calling thread waits until the executable returns. default="true"
-         args - the arguments to pass to the program.  default=nothing
-         env - environment variables to set.  default=nothing
-      -->
-    <!-- A postCommit event is fired after every commit
-    <listener event="postCommit" class="solar.RunExecutableListener">
-      <str name="exe">/var/opt/resin3/__PORT__/scripts/solar/snapshooter</str>
-      <str name="dir">/var/opt/resin3/__PORT__</str>
-      <bool name="wait">true</bool>
-      <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
-      <arr name="env"> <str>MYVAR=val1</str> </arr>
-    </listener>
-    -->
-
-
-  </updateHandler>
-
-
-  <query>
-    <!-- Maximum number of clauses in a boolean query... can affect
-        range or wildcard queries that expand to big boolean
-        queries.  An exception is thrown if exceeded.
-    -->
-    <maxBooleanClauses>1024</maxBooleanClauses>
-
-    
-    <!-- Cache specification for Filters or DocSets - unordered set of *all* documents
-         that match a particular query.
-      -->
-    <filterCache
-      class="solar.search.LRUCache"
-      size="512"
-      initialSize="512"
-      autowarmCount="256"/>
-
-    <queryResultCache
-      class="solar.search.LRUCache"
-      size="512"
-      initialSize="512"
-      autowarmCount="1024"/>
-
-    <documentCache
-      class="solar.search.LRUCache"
-      size="512"
-      initialSize="512"
-      autowarmCount="0"/>
-
-    <!--
-    <cache name="myUserCache"
-      class="solar.search.LRUCache"
-      size="4096"
-      initialSize="1024"
-      autowarmCount="1024"
-      regenerator="MyRegenerator"
-      />
-    -->
-
-
-    <useFilterForSortedQuery>true</useFilterForSortedQuery>
-
-    <queryResultWindowSize>10</queryResultWindowSize>
-
-    <HashDocSet maxSize="3000" loadFactor="0.75"/>
-
-
-    <!-- boolToFilterOptimizer converts boolean clauses with zero boost
-         into cached filters if the number of docs selected by the clause exceeds
-         the threshold (represented as a fraction of the total index)
-    -->
-    <boolTofilterOptimizer enabled="true" cacheSize="32" threshold=".05"/>
-
-
-    <!-- a newSearcher event is fired whenever a new searcher is being prepared
-         and there is a current searcher handling requests (aka registered). -->
-    <!-- QuerySenderListener takes an array of NamedList and executes a
-         local query request for each NamedList in sequence. -->
-    <!--
-    <listener event="newSearcher" class="solar.QuerySenderListener">
-      <arr name="queries">
-        <lst> <str name="q">solar</str> <str name="start">0</str> <str name="rows">10</str> </lst>
-        <lst> <str name="q">rocks</str> <str name="start">0</str> <str name="rows">10</str> </lst>
-      </arr>
-    </listener>
-    -->
-
-    <!-- a firstSearcher event is fired whenever a new searcher is being
-         prepared but there is no current registered searcher to handle
-         requests or to gain prewarming data from. -->
-    <!--
-    <listener event="firstSearcher" class="solar.QuerySenderListener">
-      <arr name="queries">
-        <lst> <str name="q">fast_warm</str> <str name="start">0</str> <str name="rows">10</str> </lst>
-      </arr>
-    </listener>
-    -->
-
-
-  </query>
-
-
-  <!-- An alternate set representation that uses an integer hash to store filters (sets of docids).
-       If the set cardinality <= maxSize elements, then HashDocSet will be used instead of the bitset
-       based HashBitset. -->
-
-  <!-- requestHandler plugins... incoming queries will be dispatched to the
-     correct handler based on the qt (query type) param matching the
-     name of registered handlers.
-      The "standard" request handler is the default and will be used if qt
-     is not specified in the request.
-  -->
-  <requestHandler name="standard" class="solar.StandardRequestHandler" />
-  <requestHandler name="old" class="solar.tst.OldRequestHandler" >
-    <int name="myparam">1000</int>
-    <float name="ratio">1.4142135</float>
-    <arr name="myarr"><int>1</int><int>2</int></arr>
-    <str>foo</str>
-  </requestHandler>
-  <requestHandler name="oldagain" class="solar.tst.OldRequestHandler" >
-    <lst name="lst1"> <str name="op">sqrt</str> <int name="val">2</int> </lst>
-    <lst name="lst2"> <str name="op">log</str> <float name="val">10</float> </lst>
-  </requestHandler>
-
-  <requestHandler name="test" class="solar.tst.TestRequestHandler" />
-
-
-  <admin>
-    <defaultQuery>solar</defaultQuery>
-    <gettableFiles>solarconfig.xml conf/solar/WEB-INF/web.external.xml conf/resin.conf </gettableFiles>
-  </admin>
-
-
-
-</config>
diff --git a/src/apps/SolarTest/src/SolrTest.java b/src/apps/SolarTest/src/SolrTest.java
index 04894bf..24e601f 100644
--- a/src/apps/SolarTest/src/SolrTest.java
+++ b/src/apps/SolarTest/src/SolrTest.java
@@ -83,7 +83,9 @@ public class SolrTest extends Thread {
   boolean sequenceTest=false;
 
   public void run() {
+
     if (sequenceTest) {
+      try {
       for (int i=0; i<testDict.length; i++) {
         String s = testDict[i];
         int lineno = testDictLineno.get(i);
@@ -112,9 +114,9 @@ public class SolrTest extends Thread {
         if (startParams > 0) params = s.substring(startParams+2,endParams).trim();
         if (startTests > 0) test = s.substring(startTests+1,endTests).trim();
 
-        System.out.println("###req=" + req);
-        System.out.println("###params=" + params);
-        System.out.println("###tests=" + test);
+        // System.out.println("###req=" + req);
+        // System.out.println("###params=" + params);
+        // System.out.println("###tests=" + test);
 
         if (req.startsWith("<")) {
           resp = doUpdate(req);
@@ -127,6 +129,11 @@ public class SolrTest extends Thread {
           System.out.println("#### no validation performed");
         }
       }
+      } catch (RuntimeException e) {
+        numErr++;
+        throw(e);
+      }
+
       System.out.println(">>>>>>>>>>>>>>>>>>>>>>>> SUCCESS <<<<<<<<<<<<<<<<<<<<<<<<<<");
     }
 
@@ -322,47 +329,61 @@ public class SolrTest extends Thread {
 
     try {
 
-    IndexSchema schema = schemaFile==null ? null : new IndexSchema(schemaFile);
-    countdown = requests;
-    core=new SolrCore(dataDir,schema);
+      IndexSchema schema = schemaFile==null ? null : new IndexSchema(schemaFile);
+      countdown = requests;
+      core=new SolrCore(dataDir,schema);
 
-    try {
-      if (testFile != null) {
-        testDict = readDict(testFile);
-        testDictLineno = lineno;
-      }  else {
-        if (readers > 0) requestDict = readDict(filename);
-        if (writers > 0) updateDict = readDict(updateFilename);
+      try {
+        if (testFile != null) {
+          testDict = readDict(testFile);
+          testDictLineno = lineno;
+        }  else {
+          if (readers > 0) requestDict = readDict(filename);
+          if (writers > 0) updateDict = readDict(updateFilename);
+        }
+      } catch (IOException e) {
+        e.printStackTrace();
+        System.out.println("Can't read "+filename);
+        return;
       }
-    } catch (IOException e) {
-      e.printStackTrace();
-      System.out.println("Can't read "+filename);
-      return;
-    }
 
-    SolrTest[] clients = new SolrTest[readers+writers];
-    for (i=0; i<readers; i++) {
-      clients[i] = new SolrTest();
-      if (testFile != null) clients[i].sequenceTest=true;
-      clients[i].start();
-    }
-    for (i=readers; i<readers+writers; i++) {
-      clients[i] = new SolrTest();
-      clients[i].isWriter = true;
-      clients[i].start();
-    }
+      SolrTest[] clients = new SolrTest[readers+writers];
+      for (i=0; i<readers; i++) {
+        clients[i] = new SolrTest();
+        if (testFile != null) clients[i].sequenceTest=true;
+        clients[i].start();
+      }
+      for (i=readers; i<readers+writers; i++) {
+        clients[i] = new SolrTest();
+        clients[i].isWriter = true;
+        clients[i].start();
+      }
 
-    for (i=0; i<readers; i++) {
-      clients[i].join();
-    }
-    for (i=readers; i<readers+writers; i++) {
-      clients[i].join();
-    }
+      for (i=0; i<readers; i++) {
+        clients[i].join();
+      }
+      for (i=readers; i<readers+writers; i++) {
+        clients[i].join();
+      }
+
+      core.close();
+      core=null;
 
-    } finally {
-      if (core != null) core.close();
+      if (testFile!=null) {
+        if (clients[0].numErr == 0) {
+          System.out.println(">>>>>>>>>>>>>>>>>>>>>>>> SUCCESS <<<<<<<<<<<<<<<<<<<<<<<<<<");
+        } else {
+          System.exit(1);
+        }
+      }
+
+    } catch (Throwable e) {
+      if (core!=null) {try{core.close();} catch (Throwable th){}}
+      e.printStackTrace();
+      System.exit(1);
     }
 
+
   }
 
 }
diff --git a/src/apps/SolarTest/stopwords.txt b/src/apps/SolarTest/stopwords.txt
deleted file mode 100644
index 5401d99..0000000
--- a/src/apps/SolarTest/stopwords.txt
+++ /dev/null
@@ -1,2 +0,0 @@
-stopworda
-stopwordb
diff --git a/src/apps/SolarTest/synonyms.txt b/src/apps/SolarTest/synonyms.txt
deleted file mode 100644
index d56bc23..0000000
--- a/src/apps/SolarTest/synonyms.txt
+++ /dev/null
@@ -1,6 +0,0 @@
-a => aa
-b => b1 b2
-c => c1,c2
-a\=>a => b\=>b
-a\,a => b\,b
-foo,bar,baz
\ No newline at end of file

