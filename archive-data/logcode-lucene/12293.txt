GitDiffStart: 8d3f45da8a5688e9293725a3ce6f7fa2d7088f4e | Mon Jun 4 08:33:17 2012 +0000
diff --git a/solr/core/src/test/org/apache/solr/core/TestCoreContainer.java b/solr/core/src/test/org/apache/solr/core/TestCoreContainer.java
index 94bf50c..ac7d002 100644
--- a/solr/core/src/test/org/apache/solr/core/TestCoreContainer.java
+++ b/solr/core/src/test/org/apache/solr/core/TestCoreContainer.java
@@ -17,12 +17,16 @@
 
 package org.apache.solr.core;
 
+import java.io.BufferedWriter;
 import java.io.File;
+import java.io.FileWriter;
 import java.io.IOException;
 
+import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.xpath.XPathExpressionException;
 
 import org.apache.commons.io.FileUtils;
+import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.solr.SolrTestCaseJ4;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -158,4 +162,61 @@ public class TestCoreContainer extends SolrTestCaseJ4 {
     }
   }
   
+  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {
+    //create solrHome
+    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()
+        + "_noCores");
+    if (solrHomeDirectory.exists()) {
+      FileUtils.deleteDirectory(solrHomeDirectory);
+    }
+    assertTrue("Failed to mkdirs workDir", solrHomeDirectory.mkdirs());
+    try {
+      File solrXmlFile = new File(solrHomeDirectory, "solr.xml");
+      BufferedWriter out = new BufferedWriter(new FileWriter(solrXmlFile));
+      out.write(EMPTY_SOLR_XML);
+      out.close();
+    } catch (IOException e) {
+      FileUtils.deleteDirectory(solrHomeDirectory);
+      throw e;
+    }
+    
+    //init
+    System.setProperty("solr.solr.home", solrHomeDirectory.getAbsolutePath());
+    CoreContainer.Initializer init = new CoreContainer.Initializer();
+    CoreContainer cores = null;
+    try {
+      cores = init.initialize();
+    }
+    catch(Exception e) {
+      fail("CoreContainer not created" + e.getMessage());
+    }
+    try {
+      //assert cero cores
+      assertEquals("There should not be cores", 0, cores.getCores().size());
+      
+      //add a new core
+      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, "core1", SolrTestCaseJ4.TEST_HOME());
+      SolrCore newCore = cores.create(coreDescriptor);
+      cores.register(newCore, false);
+      
+      //assert one registered core
+      assertEquals("There core registered", 1, cores.getCores().size());
+      
+      newCore.close();
+      cores.remove("core1");
+      //assert cero cores
+      assertEquals("There should not be cores", 0, cores.getCores().size());
+    } finally {
+      cores.shutdown();
+      FileUtils.deleteDirectory(solrHomeDirectory);
+    }
+
+  }
+  
+  private static final String EMPTY_SOLR_XML ="<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n" +
+      "<solr persistent=\"false\">\n" +
+      "  <cores adminPath=\"/admin/cores\">\n" +
+      "  </cores>\n" +
+      "</solr>";
+  
 }

