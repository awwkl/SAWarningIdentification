GitDiffStart: b57234a7459821a7977fab4dfcc28b1b538c4d10 | Sun Sep 13 12:25:40 2015 +0000
diff --git a/solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest.java b/solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest.java
index 2089a79..0066e45 100644
--- a/solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest.java
+++ b/solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest.java
@@ -41,6 +41,8 @@ import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.analytics.util.MedianCalculator;
 import org.apache.solr.analytics.util.PercentileCalculator;
 import org.apache.solr.request.SolrQueryRequest;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
 import org.w3c.dom.Document;
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
@@ -73,16 +75,28 @@ public class AbstractAnalyticsStatsTest extends SolrTestCaseJ4 {
   }
 
   static private Document doc;
-  static private XPathFactory xPathFact =  XPathFactory.newInstance();
+  static private XPathFactory xPathFact;
 
   static private String rawResponse;
+  
+  @BeforeClass
+  public static void beforeClassAbstractAnalysis() {
+    xPathFact = XPathFactory.newInstance();
+  }
+  
+  @AfterClass
+  public static void afterClassAbstractAnalysis() {
+    xPathFact = null;
+    doc = null;
+    rawResponse = null;
+    defaults.clear();
+  }
 
   public static void setResponse(String response) throws ParserConfigurationException, IOException, SAXException {
     DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
     factory.setNamespaceAware(true); // never forget this!
     DocumentBuilder builder = factory.newDocumentBuilder();
     doc = builder.parse(new InputSource(new ByteArrayInputStream(response.getBytes(StandardCharsets.UTF_8))));
-    xPathFact = XPathFactory.newInstance();
     rawResponse = response;
   }
 
diff --git a/solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetTest.java b/solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetTest.java
index 3d3ca3f..0a7a5de 100644
--- a/solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetTest.java
+++ b/solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/AbstractAnalyticsFacetTest.java
@@ -35,6 +35,8 @@ import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.analytics.util.MedianCalculator;
 import org.apache.solr.analytics.util.PercentileCalculator;
 import org.apache.solr.request.SolrQueryRequest;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
 
 import com.google.common.collect.ObjectArrays;
 
@@ -57,15 +59,27 @@ public class AbstractAnalyticsFacetTest extends SolrTestCaseJ4 {
   protected String latestType = "";
 
   private static Document doc;
-  private static XPathFactory xPathFact =  XPathFactory.newInstance();
+  private static XPathFactory xPathFact;
   private static String rawResponse;
 
+  @BeforeClass
+  public static void beforeClassAbstractAnalysis() {
+    xPathFact = XPathFactory.newInstance();
+  }
+  
+  @AfterClass
+  public static void afterClassAbstractAnalysis() {
+    xPathFact = null;
+    doc = null;
+    rawResponse = null;
+    defaults.clear();
+  }
+
   protected static void setResponse(String response) throws ParserConfigurationException, IOException, SAXException {
     DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
     factory.setNamespaceAware(true); // never forget this!
     DocumentBuilder builder = factory.newDocumentBuilder();
     doc = builder.parse(new InputSource(new ByteArrayInputStream(response.getBytes(StandardCharsets.UTF_8))));
-    xPathFact = XPathFactory.newInstance();
     rawResponse = response;
   }
 
diff --git a/solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MRUnitBase.java b/solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MRUnitBase.java
index b663151..558d662 100644
--- a/solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MRUnitBase.java
+++ b/solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MRUnitBase.java
@@ -46,6 +46,7 @@ public abstract class MRUnitBase extends SolrTestCaseJ4 {
   @AfterClass
   public static void teardownClass() throws Exception {
     if (solrHomeZip != null) Files.delete(solrHomeZip.toPath());
+    solrHomeZip = null;
   }
   
   protected void setupHadoopConfig(Configuration config) throws IOException {
diff --git a/solr/contrib/morphlines-cell/src/test/org/apache/solr/morphlines/cell/SolrCellMorphlineTest.java b/solr/contrib/morphlines-cell/src/test/org/apache/solr/morphlines/cell/SolrCellMorphlineTest.java
index aead56c..e397b7f 100644
--- a/solr/contrib/morphlines-cell/src/test/org/apache/solr/morphlines/cell/SolrCellMorphlineTest.java
+++ b/solr/contrib/morphlines-cell/src/test/org/apache/solr/morphlines/cell/SolrCellMorphlineTest.java
@@ -39,6 +39,7 @@ public class SolrCellMorphlineTest extends AbstractSolrMorphlineTestBase {
 
   private Map<String,Integer> expectedRecords = new HashMap<>();
   private Map<String, Map<String, Object>> expectedRecordContents = new HashMap<>();
+  
   @BeforeClass
   public static void beforeClass2() {
     assumeFalse("FIXME: Morphlines currently has issues with Windows paths", Constants.WINDOWS);
diff --git a/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase.java b/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase.java
index 6c10597..78adb2f 100644
--- a/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase.java
+++ b/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase.java
@@ -100,6 +100,7 @@ public class AbstractSolrMorphlineTestBase extends SolrTestCaseJ4 {
     if (savedLocale != null) {
       Locale.setDefault(savedLocale);
     }
+    savedLocale = null;
   }
 
   protected static void myInitCore(String baseDirName) throws Exception {
diff --git a/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineZkTestBase.java b/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineZkTestBase.java
index d0326cc..533da4d 100644
--- a/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineZkTestBase.java
+++ b/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineZkTestBase.java
@@ -20,6 +20,7 @@ package org.apache.solr.morphlines.solr;
 import com.codahale.metrics.MetricRegistry;
 import com.google.common.collect.ListMultimap;
 import com.typesafe.config.Config;
+
 import org.apache.commons.io.FileUtils;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
@@ -27,6 +28,7 @@ import org.apache.solr.cloud.AbstractFullDistribZkTestBase;
 import org.apache.solr.cloud.AbstractZkTestCase;
 import org.apache.solr.common.SolrDocument;
 import org.apache.solr.common.cloud.SolrZkClient;
+import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.kitesdk.morphline.api.Collector;
 import org.kitesdk.morphline.api.Command;
@@ -72,6 +74,11 @@ public abstract class AbstractSolrMorphlineZkTestBase extends AbstractFullDistri
     FileUtils.copyDirectory(SOLR_INSTANCE_DIR, solrHomeDirectory);
   }
   
+  @AfterClass
+  public static void tearDownClass() throws Exception {
+    solrHomeDirectory = null;
+  }
+  
   @Override
   public void distribSetUp() throws Exception {
     super.distribSetUp();
diff --git a/solr/core/src/test/org/apache/solr/schema/DateFieldTest.java b/solr/core/src/test/org/apache/solr/schema/DateFieldTest.java
index 1739c71..725b638 100644
--- a/solr/core/src/test/org/apache/solr/schema/DateFieldTest.java
+++ b/solr/core/src/test/org/apache/solr/schema/DateFieldTest.java
@@ -17,28 +17,25 @@
 
 package org.apache.solr.schema;
 
+import java.io.File;
+import java.text.ParseException;
+import java.util.Collections;
+import java.util.Date;
+import java.util.Locale;
+
 import org.apache.lucene.index.StorableField;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.core.SolrConfig;
 import org.apache.solr.core.SolrResourceLoader;
-import org.apache.solr.util.DateMathParser;
 import org.apache.solr.util.DateFormatUtil;
-import org.junit.BeforeClass;
+import org.apache.solr.util.DateMathParser;
 import org.junit.Ignore;
 
-import java.io.File;
-import java.text.ParseException;
-import java.util.Collections;
-import java.util.Date;
-import java.util.TimeZone;
-import java.util.Locale;
-
 public class DateFieldTest extends SolrTestCaseJ4 {
-  public static TimeZone UTC = DateFormatUtil.UTC;
   private final String testInstanceDir = TEST_HOME() + File.separator + "collection1";
   private final String testConfHome = testInstanceDir + File.separator + "conf"+ File.separator;
   private TrieDateField f = null;
-  private DateMathParser p = new DateMathParser(UTC, Locale.ROOT);
+  private DateMathParser p = new DateMathParser(DateFormatUtil.UTC, Locale.ROOT);
 
   @Override
   public void setUp()  throws Exception {
diff --git a/solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest.java b/solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest.java
index 5510dd0..5cc6e32 100644
--- a/solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest.java
+++ b/solr/core/src/test/org/apache/solr/schema/PrimitiveFieldTypeTest.java
@@ -25,14 +25,12 @@ import org.junit.Test;
 import java.io.File;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.TimeZone;
 
 /**
  * Tests that defaults are set for Primitive (non-analyzed) fields
  */
 public class PrimitiveFieldTypeTest extends SolrTestCaseJ4 {
   private final String testConfHome = TEST_HOME() + File.separator + "collection1" + File.separator + "conf"+ File.separator; 
-  public static TimeZone UTC = TimeZone.getTimeZone("UTC");
   protected SolrConfig config;
   protected IndexSchema schema;
   protected HashMap<String,String> initMap;
diff --git a/solr/core/src/test/org/apache/solr/util/DateMathParserTest.java b/solr/core/src/test/org/apache/solr/util/DateMathParserTest.java
index a17ed66..b8cdc22 100644
--- a/solr/core/src/test/org/apache/solr/util/DateMathParserTest.java
+++ b/solr/core/src/test/org/apache/solr/util/DateMathParserTest.java
@@ -17,6 +17,8 @@
 
 package org.apache.solr.util;
 
+import static org.apache.solr.util.DateFormatUtil.UTC;
+
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.solr.util.DateMathParser;
 
@@ -26,10 +28,6 @@ import java.util.Calendar;
 import java.util.Date;
 import java.util.TimeZone;
 import java.util.Locale;
-import java.util.Arrays;
-import java.util.Set;
-import java.util.HashSet;
-
 import java.util.Map;
 import java.util.HashMap;
 import java.text.ParseException;
@@ -39,8 +37,6 @@ import java.text.ParseException;
  */
 public class DateMathParserTest extends LuceneTestCase {
 
-  public static TimeZone UTC = TimeZone.getTimeZone("UTC");
-  
   /**
    * A formatter for specifying every last nuance of a Date for easy
    * refernece in assertion statements
diff --git a/solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager.java b/solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager.java
index b39b2a7..d86df71 100644
--- a/solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager.java
+++ b/solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager.java
@@ -51,6 +51,7 @@ public class TestZkConfigManager extends SolrTestCaseJ4 {
   @AfterClass
   public static void shutdownZkServer() throws IOException, InterruptedException {
     zkServer.shutdown();
+    zkServer = null;
   }
 
   @Test
diff --git a/solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase.java b/solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase.java
index a7e7534..491a617 100644
--- a/solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase.java
+++ b/solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase.java
@@ -46,7 +46,14 @@ public abstract class AbstractZkTestCase extends SolrTestCaseJ4 {
 
   
   public static File SOLRHOME;
-  static {
+
+  protected static ZkTestServer zkServer;
+
+  protected static String zkDir;
+
+
+  @BeforeClass
+  public static void azt_beforeClass() throws Exception {
     try {
       SOLRHOME = new File(TEST_HOME());
     } catch (RuntimeException e) {
@@ -54,15 +61,7 @@ public abstract class AbstractZkTestCase extends SolrTestCaseJ4 {
       // solrj tests not working with TEST_HOME()
       // must override getSolrHome
     }
-  }
-  
-  protected static ZkTestServer zkServer;
-
-  protected static String zkDir;
-
 
-  @BeforeClass
-  public static void azt_beforeClass() throws Exception {
     zkDir = createTempDir("zkData").toFile().getAbsolutePath();
     zkServer = new ZkTestServer(zkDir);
     zkServer.run();
@@ -161,6 +160,7 @@ public abstract class AbstractZkTestCase extends SolrTestCaseJ4 {
       zkServer = null;
     }
     zkDir = null;
+    SOLRHOME = null;
   }
 
   protected void printLayout(String zkHost) throws Exception {

