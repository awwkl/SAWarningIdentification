GitDiffStart: 771fbd4b9d08877b3849057438de22abcb3c6811 | Wed Apr 21 16:35:46 2004 +0000
diff --git a/src/test/org/apache/lucene/index/TestSegmentTermDocs.java b/src/test/org/apache/lucene/index/TestSegmentTermDocs.java
index 151e2a7..db04da8 100644
--- a/src/test/org/apache/lucene/index/TestSegmentTermDocs.java
+++ b/src/test/org/apache/lucene/index/TestSegmentTermDocs.java
@@ -95,5 +95,140 @@ public class TestSegmentTermDocs extends TestCase {
     } catch (IOException e) {
       assertTrue(false);
     }
-  }    
+  }
+  
+  public void testSkipTo() {
+    try {
+      Directory dir = new RAMDirectory();
+      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);
+      
+      Term ta = new Term("content","aaa");
+      for(int i = 0; i < 10; i++)
+        addDoc(writer, "aaa aaa aaa aaa");
+        
+      Term tb = new Term("content","bbb");
+      for(int i = 0; i < 16; i++)
+        addDoc(writer, "bbb bbb bbb bbb");
+        
+      Term tc = new Term("content","ccc");
+      for(int i = 0; i < 50; i++)
+        addDoc(writer, "ccc ccc ccc ccc");
+        
+      // assure that we deal with a single segment  
+      writer.optimize();
+      writer.close();
+      
+      IndexReader reader = IndexReader.open(dir);
+      TermDocs tdocs = reader.termDocs();
+      
+      // without optimization (assumption skipInterval == 16)
+      
+      // with next
+      tdocs.seek(ta);
+      assertTrue(tdocs.next());
+      assertEquals(0, tdocs.doc());
+      assertEquals(4, tdocs.freq());
+      assertTrue(tdocs.next());
+      assertEquals(1, tdocs.doc());
+      assertEquals(4, tdocs.freq());
+      assertTrue(tdocs.skipTo(0));
+      assertEquals(2, tdocs.doc());
+      assertTrue(tdocs.skipTo(4));
+      assertEquals(4, tdocs.doc());
+      assertTrue(tdocs.skipTo(9));
+      assertEquals(9, tdocs.doc());
+      assertFalse(tdocs.skipTo(10));
+      
+      // without next
+      tdocs.seek(ta);
+      assertTrue(tdocs.skipTo(0));
+      assertEquals(0, tdocs.doc());
+      assertTrue(tdocs.skipTo(4));
+      assertEquals(4, tdocs.doc());
+      assertTrue(tdocs.skipTo(9));
+      assertEquals(9, tdocs.doc());
+      assertFalse(tdocs.skipTo(10));
+      
+      // exactly skipInterval documents and therefore with optimization
+      
+      // with next
+      tdocs.seek(tb);
+      assertTrue(tdocs.next());
+      assertEquals(10, tdocs.doc());
+      assertEquals(4, tdocs.freq());
+      assertTrue(tdocs.next());
+      assertEquals(11, tdocs.doc());
+      assertEquals(4, tdocs.freq());
+      assertTrue(tdocs.skipTo(5));
+      assertEquals(12, tdocs.doc());
+      assertTrue(tdocs.skipTo(15));
+      assertEquals(15, tdocs.doc());
+      assertTrue(tdocs.skipTo(24));
+      assertEquals(24, tdocs.doc());
+      assertTrue(tdocs.skipTo(25));
+      assertEquals(25, tdocs.doc());
+      assertFalse(tdocs.skipTo(26));
+      
+      // without next
+      tdocs.seek(tb);
+      assertTrue(tdocs.skipTo(5));
+      assertEquals(10, tdocs.doc());
+      assertTrue(tdocs.skipTo(15));
+      assertEquals(15, tdocs.doc());
+      assertTrue(tdocs.skipTo(24));
+      assertEquals(24, tdocs.doc());
+      assertTrue(tdocs.skipTo(25));
+      assertEquals(25, tdocs.doc());
+      assertFalse(tdocs.skipTo(26));
+      
+      // much more than skipInterval documents and therefore with optimization
+      
+      // with next
+      tdocs.seek(tc);
+      assertTrue(tdocs.next());
+      assertEquals(26, tdocs.doc());
+      assertEquals(4, tdocs.freq());
+      assertTrue(tdocs.next());
+      assertEquals(27, tdocs.doc());
+      assertEquals(4, tdocs.freq());
+      assertTrue(tdocs.skipTo(5));
+      assertEquals(28, tdocs.doc());
+      assertTrue(tdocs.skipTo(40));
+      assertEquals(40, tdocs.doc());
+      assertTrue(tdocs.skipTo(57));
+      assertEquals(57, tdocs.doc());
+      assertTrue(tdocs.skipTo(74));
+      assertEquals(74, tdocs.doc());
+      assertTrue(tdocs.skipTo(75));
+      assertEquals(75, tdocs.doc());
+      assertFalse(tdocs.skipTo(76));
+      
+      //without next
+      tdocs.seek(tc);
+      assertTrue(tdocs.skipTo(5));
+      assertEquals(26, tdocs.doc());
+      assertTrue(tdocs.skipTo(40));
+      assertEquals(40, tdocs.doc());
+      assertTrue(tdocs.skipTo(57));
+      assertEquals(57, tdocs.doc());
+      assertTrue(tdocs.skipTo(74));
+      assertEquals(74, tdocs.doc());
+      assertTrue(tdocs.skipTo(75));
+      assertEquals(75, tdocs.doc());
+      assertFalse(tdocs.skipTo(76));
+      
+      tdocs.close();
+      reader.close();
+      dir.close();
+    } catch (IOException e) {
+        assertTrue(false);
+    }
+  }
+  
+  private void addDoc(IndexWriter writer, String value) throws IOException
+  {
+      Document doc = new Document();
+      doc.add(Field.UnStored("content", value));
+      writer.addDocument(doc);
+  }
 }

