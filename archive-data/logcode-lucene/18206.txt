GitDiffStart: c3d33bc62e424eb88ae11937f317f5b231f426fc | Sat Mar 20 17:18:22 2010 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 9543e9d..c6665e7 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -219,6 +219,9 @@ Bug Fixes
 * SOLR-1798: Small memory leak (~100 bytes) in fastLRUCache for every
   commit. (yonik)
 
+* SOLR-1823: Fixed XMLResponseWriter (via XMLWriter) so it no longer throws
+  a ClassCastException when a Map containing a non-String key is used.
+  (Frank Wesemann, hossman)
 
 Other Changes
 ----------------------
diff --git a/solr/contrib/dataimporthandler/CHANGES.txt b/solr/contrib/dataimporthandler/CHANGES.txt
index 4ab3365..83b022e 100644
--- a/solr/contrib/dataimporthandler/CHANGES.txt
+++ b/solr/contrib/dataimporthandler/CHANGES.txt
@@ -61,7 +61,9 @@ Bug Fixes
 
 * SOLR-1766: DIH with threads enabled doesn't respond to the abort command (Michael Henson via noble)
 
-* SOLR-1767: dataimporter.functions.escapeSql() does not escape backslash character (Sean Timm via noble) 
+* SOLR-1767: dataimporter.functions.escapeSql() does not escape backslash character (Sean Timm via noble)
+
+* SOLR-1811: formatDate should use the current NOW value always (Sean Timm via noble)
 
 Other Changes
 ----------------------
diff --git a/solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag.java b/solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag.java
index 6e623f5..9c4321a 100644
--- a/solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag.java
+++ b/solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag.java
@@ -298,6 +298,11 @@ public class EvaluatorBag {
   static Pattern IN_SINGLE_QUOTES = Pattern.compile("^'(.*?)'$");
 
   static DateMathParser dateMathParser = new DateMathParser(TimeZone
-          .getDefault(), Locale.getDefault());
+          .getDefault(), Locale.getDefault()){
+    @Override
+    public Date getNow() {
+      return new Date();
+    }
+  };
 
 }
diff --git a/solr/src/java/org/apache/solr/response/XMLWriter.java b/solr/src/java/org/apache/solr/response/XMLWriter.java
index c28974a..5ce1f72 100644
--- a/solr/src/java/org/apache/solr/response/XMLWriter.java
+++ b/solr/src/java/org/apache/solr/response/XMLWriter.java
@@ -631,20 +631,25 @@ final public class XMLWriter {
     }
   }
 
-
-
-  //A map is currently represented as a named list
-  public void writeMap(String name, Map val) throws IOException {
-    Map map = val;
+  
+  /**
+   * writes a Map in the same format as a NamedList, using the
+   * stringification of the key Object when it's non-null.
+   *
+   * @param name
+   * @param map
+   * @throws IOException
+   * @see http://lucene.apache.org/solr/api/org/apache/solr/response/SolrQueryResponse.html#returnable_data
+   */
+  public void writeMap(String name, Map<Object,Object> map) throws IOException {
     int sz = map.size();
     startTag("lst", name, sz<=0);
     incLevel();
-    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {
-      // possible class-cast exception here...
-      String k = (String)entry.getKey();
+    for (Map.Entry<Object,Object> entry : map.entrySet()) {
+      Object k = entry.getKey();
       Object v = entry.getValue();
       // if (sz<indentThreshold) indent();
-      writeVal(k,v);
+      writeVal( null == k ? null : k.toString(), v);
     }
     decLevel();
     if (sz > 0) {

