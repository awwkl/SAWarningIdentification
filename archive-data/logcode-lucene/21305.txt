GitDiffStart: 9e11b2c21deeb43ecab8857667e1ad6ae0c08a83 | Thu Aug 14 18:44:56 2008 +0000
diff --git a/client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java b/client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java
index e62b629..1d33204 100644
--- a/client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java
+++ b/client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java
@@ -55,7 +55,7 @@ import org.apache.solr.servlet.SolrRequestParsers;
 public class EmbeddedSolrServer extends SolrServer
 {
   
-  protected final CoreContainer multicore; // either multicore
+  protected final CoreContainer multicore; // either cores
   protected final SolrCore core; // or single core
   protected final String coreName;  // use CoreContainer registry
 
@@ -97,7 +97,7 @@ public class EmbeddedSolrServer extends SolrServer
       path = "/select";
     }
 
-    // Check for multicore action
+    // Check for cores action
     SolrCore core = this.core;
     if( core == null )
       core = multicore.getCore( coreName );
diff --git a/client/java/solrj/src/org/apache/solr/client/solrj/request/CoreAdminRequest.java b/client/java/solrj/src/org/apache/solr/client/solrj/request/CoreAdminRequest.java
new file mode 100644
index 0000000..e2a92bc
--- /dev/null
+++ b/client/java/solrj/src/org/apache/solr/client/solrj/request/CoreAdminRequest.java
@@ -0,0 +1,167 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.client.solrj.request;
+
+import java.io.IOException;
+import java.util.Collection;
+
+import org.apache.solr.client.solrj.SolrRequest;
+import org.apache.solr.client.solrj.SolrServer;
+import org.apache.solr.client.solrj.SolrServerException;
+import org.apache.solr.client.solrj.response.CoreAdminResponse;
+import org.apache.solr.common.params.ModifiableSolrParams;
+import org.apache.solr.common.params.CoreAdminParams;
+import org.apache.solr.common.params.SolrParams;
+import org.apache.solr.common.params.CoreAdminParams.CoreAdminAction;
+import org.apache.solr.common.util.ContentStream;
+
+/**
+ * 
+ * @version $Id: CoreAdminRequest.java 606335 2007-12-21 22:23:39Z ryan $
+ * @since solr 1.3
+ */
+public class CoreAdminRequest extends SolrRequest
+{
+  protected String core = null;
+  protected CoreAdminParams.CoreAdminAction action = null;
+  
+  //a create core request
+  public static class Create extends CoreAdminRequest {
+    protected String instanceDir;
+    protected String configName = null;
+    protected String schemaName = null;
+    
+    public Create() {
+      action = CoreAdminAction.CREATE;
+    }
+    
+    public void setInstanceDir(String instanceDir) { this.instanceDir = instanceDir; }
+    public void setSchemaName(String schema) { this.schemaName = schema; }
+    public void setConfigName(String config) { this.configName = config; }
+    
+    public String getInstanceDir() { return instanceDir; }
+    public String getSchemaName()  { return schemaName; }
+    public String getConfigName()  { return configName; }
+    
+    @Override
+    public SolrParams getParams() {
+      if( action == null ) {
+        throw new RuntimeException( "no action specified!" );
+      }
+      ModifiableSolrParams params = new ModifiableSolrParams();
+      params.set( CoreAdminParams.ACTION, action.toString() );
+      params.set( CoreAdminParams.CORE, core );
+      params.set( CoreAdminParams.INSTANCE_DIR, instanceDir);
+      if (configName != null) {
+        params.set( CoreAdminParams.CONFIG, configName);
+      }
+      if (schemaName != null) {
+        params.set( CoreAdminParams.SCHEMA, schemaName);
+      }
+      return params;
+    }
+  }
+  
+  public CoreAdminRequest()
+  {
+    super( METHOD.GET, "/admin/cores" );
+  }
+
+  public CoreAdminRequest( String path )
+  {
+    super( METHOD.GET, path );
+  }
+
+  public final void setCoreParam( String v )
+  {
+    this.core = v;
+  }
+  
+  //---------------------------------------------------------------------------------------
+  //
+  //---------------------------------------------------------------------------------------
+
+  public void setAction( CoreAdminAction action )
+  {
+    this.action = action;
+  }
+
+  //---------------------------------------------------------------------------------------
+  //
+  //---------------------------------------------------------------------------------------
+
+  @Override
+  public SolrParams getParams() 
+  {
+    if( action == null ) {
+      throw new RuntimeException( "no action specified!" );
+    }
+    ModifiableSolrParams params = new ModifiableSolrParams();
+    params.set( CoreAdminParams.ACTION, action.toString() );
+    params.set( CoreAdminParams.CORE, core );
+    return params;
+  }
+
+  //---------------------------------------------------------------------------------------
+  //
+  //---------------------------------------------------------------------------------------
+
+  @Override
+  public Collection<ContentStream> getContentStreams() throws IOException {
+    return null;
+  }
+
+  @Override
+  public CoreAdminResponse process(SolrServer server) throws SolrServerException, IOException 
+  {
+    long startTime = System.currentTimeMillis();
+    CoreAdminResponse res = new CoreAdminResponse();
+    res.setResponse( server.request( this ) );
+    res.setElapsedTime( System.currentTimeMillis()-startTime );
+    return res;
+  }
+
+  //---------------------------------------------------------------------------------------
+  //
+  //---------------------------------------------------------------------------------------
+
+  public static CoreAdminResponse reloadCore( String name, SolrServer server ) throws SolrServerException, IOException
+  {
+    CoreAdminRequest req = new CoreAdminRequest();
+    req.setCoreParam( name );
+    req.setAction( CoreAdminAction.RELOAD );
+    return req.process( server );
+  }
+
+  public static CoreAdminResponse getStatus( String name, SolrServer server ) throws SolrServerException, IOException
+  {
+    CoreAdminRequest req = new CoreAdminRequest();
+    req.setCoreParam( name );
+    req.setAction( CoreAdminAction.STATUS );
+    return req.process( server );
+  }
+  
+  public static CoreAdminResponse createCore( String name, String instanceDir, SolrServer server ) throws SolrServerException, IOException 
+  {
+    CoreAdminRequest.Create req = new CoreAdminRequest.Create();
+    req.setCoreParam( name );
+    req.setInstanceDir(instanceDir);
+    return req.process( server );
+  }
+}
+
diff --git a/client/java/solrj/src/org/apache/solr/client/solrj/request/MultiCoreRequest.java b/client/java/solrj/src/org/apache/solr/client/solrj/request/MultiCoreRequest.java
deleted file mode 100644
index 5ad97aa..0000000
--- a/client/java/solrj/src/org/apache/solr/client/solrj/request/MultiCoreRequest.java
+++ /dev/null
@@ -1,167 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.client.solrj.request;
-
-import java.io.IOException;
-import java.util.Collection;
-
-import org.apache.solr.client.solrj.SolrRequest;
-import org.apache.solr.client.solrj.SolrServer;
-import org.apache.solr.client.solrj.SolrServerException;
-import org.apache.solr.client.solrj.response.MultiCoreResponse;
-import org.apache.solr.common.params.ModifiableSolrParams;
-import org.apache.solr.common.params.MultiCoreParams;
-import org.apache.solr.common.params.SolrParams;
-import org.apache.solr.common.params.MultiCoreParams.MultiCoreAction;
-import org.apache.solr.common.util.ContentStream;
-
-/**
- * 
- * @version $Id: MultiCoreRequest.java 606335 2007-12-21 22:23:39Z ryan $
- * @since solr 1.3
- */
-public class MultiCoreRequest extends SolrRequest
-{
-  protected String core = null;
-  protected MultiCoreParams.MultiCoreAction action = null;
-  
-  //a create core request
-  public static class Create extends MultiCoreRequest {
-    protected String instanceDir;
-    protected String configName = null;
-    protected String schemaName = null;
-    
-    public Create() {
-      action = MultiCoreAction.CREATE;
-    }
-    
-    public void setInstanceDir(String instanceDir) { this.instanceDir = instanceDir; }
-    public void setSchemaName(String schema) { this.schemaName = schema; }
-    public void setConfigName(String config) { this.configName = config; }
-    
-    public String getInstanceDir() { return instanceDir; }
-    public String getSchemaName()  { return schemaName; }
-    public String getConfigName()  { return configName; }
-    
-    @Override
-    public SolrParams getParams() {
-      if( action == null ) {
-        throw new RuntimeException( "no action specified!" );
-      }
-      ModifiableSolrParams params = new ModifiableSolrParams();
-      params.set( MultiCoreParams.ACTION, action.toString() );
-      params.set( MultiCoreParams.CORE, core );
-      params.set( MultiCoreParams.INSTANCE_DIR, instanceDir);
-      if (configName != null) {
-        params.set( MultiCoreParams.CONFIG, configName);
-      }
-      if (schemaName != null) {
-        params.set( MultiCoreParams.SCHEMA, schemaName);
-      }
-      return params;
-    }
-  }
-  
-  public MultiCoreRequest()
-  {
-    super( METHOD.GET, "/admin/multicore" );
-  }
-
-  public MultiCoreRequest( String path )
-  {
-    super( METHOD.GET, path );
-  }
-
-  public final void setCoreParam( String v )
-  {
-    this.core = v;
-  }
-  
-  //---------------------------------------------------------------------------------------
-  //
-  //---------------------------------------------------------------------------------------
-
-  public void setAction( MultiCoreAction action )
-  {
-    this.action = action;
-  }
-
-  //---------------------------------------------------------------------------------------
-  //
-  //---------------------------------------------------------------------------------------
-
-  @Override
-  public SolrParams getParams() 
-  {
-    if( action == null ) {
-      throw new RuntimeException( "no action specified!" );
-    }
-    ModifiableSolrParams params = new ModifiableSolrParams();
-    params.set( MultiCoreParams.ACTION, action.toString() );
-    params.set( MultiCoreParams.CORE, core );
-    return params;
-  }
-
-  //---------------------------------------------------------------------------------------
-  //
-  //---------------------------------------------------------------------------------------
-
-  @Override
-  public Collection<ContentStream> getContentStreams() throws IOException {
-    return null;
-  }
-
-  @Override
-  public MultiCoreResponse process(SolrServer server) throws SolrServerException, IOException 
-  {
-    long startTime = System.currentTimeMillis();
-    MultiCoreResponse res = new MultiCoreResponse();
-    res.setResponse( server.request( this ) );
-    res.setElapsedTime( System.currentTimeMillis()-startTime );
-    return res;
-  }
-
-  //---------------------------------------------------------------------------------------
-  //
-  //---------------------------------------------------------------------------------------
-
-  public static MultiCoreResponse reloadCore( String name, SolrServer server ) throws SolrServerException, IOException
-  {
-    MultiCoreRequest req = new MultiCoreRequest();
-    req.setCoreParam( name );
-    req.setAction( MultiCoreAction.RELOAD );
-    return req.process( server );
-  }
-
-  public static MultiCoreResponse getStatus( String name, SolrServer server ) throws SolrServerException, IOException
-  {
-    MultiCoreRequest req = new MultiCoreRequest();
-    req.setCoreParam( name );
-    req.setAction( MultiCoreAction.STATUS );
-    return req.process( server );
-  }
-  
-  public static MultiCoreResponse createCore( String name, String instanceDir, SolrServer server ) throws SolrServerException, IOException 
-  {
-    MultiCoreRequest.Create req = new MultiCoreRequest.Create();
-    req.setCoreParam( name );
-    req.setInstanceDir(instanceDir);
-    return req.process( server );
-  }
-}
-
diff --git a/client/java/solrj/src/org/apache/solr/client/solrj/response/CoreAdminResponse.java b/client/java/solrj/src/org/apache/solr/client/solrj/response/CoreAdminResponse.java
new file mode 100644
index 0000000..7034402
--- /dev/null
+++ b/client/java/solrj/src/org/apache/solr/client/solrj/response/CoreAdminResponse.java
@@ -0,0 +1,58 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.client.solrj.response;
+
+import java.util.Date;
+import org.apache.solr.common.util.NamedList;
+
+/**
+ * 
+ * @version $Id$
+ * @since solr 1.3
+ */
+public class CoreAdminResponse extends SolrResponseBase
+{ 
+  @SuppressWarnings("unchecked")
+  public NamedList<NamedList<Object>> getCoreStatus()
+  {
+    return (NamedList<NamedList<Object>>) getResponse().get( "status" );
+  }
+
+  public NamedList<Object> getCoreStatus( String core )
+  {
+    return getCoreStatus().get( core );
+  }
+  
+  public Date getStartTime( String core )
+  {
+    NamedList<Object> v = getCoreStatus( core );
+    if( v == null ) {
+      return null;
+    }
+    return (Date) v.get( "startTime" );
+  }
+  
+  public Long getUptime( String core )
+  {
+    NamedList<Object> v = getCoreStatus( core );
+    if( v == null ) {
+      return null;
+    }
+    return (Long) v.get( "uptime" );
+  }
+}
\ No newline at end of file
diff --git a/client/java/solrj/src/org/apache/solr/client/solrj/response/MultiCoreResponse.java b/client/java/solrj/src/org/apache/solr/client/solrj/response/MultiCoreResponse.java
deleted file mode 100644
index 87d811a..0000000
--- a/client/java/solrj/src/org/apache/solr/client/solrj/response/MultiCoreResponse.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.client.solrj.response;
-
-import java.util.Date;
-import org.apache.solr.common.util.NamedList;
-
-/**
- * 
- * @version $Id$
- * @since solr 1.3
- */
-public class MultiCoreResponse extends SolrResponseBase
-{ 
-  @SuppressWarnings("unchecked")
-  public NamedList<NamedList<Object>> getCoreStatus()
-  {
-    return (NamedList<NamedList<Object>>) getResponse().get( "status" );
-  }
-
-  public NamedList<Object> getCoreStatus( String core )
-  {
-    return getCoreStatus().get( core );
-  }
-  
-  public Date getStartTime( String core )
-  {
-    NamedList<Object> v = getCoreStatus( core );
-    if( v == null ) {
-      return null;
-    }
-    return (Date) v.get( "startTime" );
-  }
-  
-  public Long getUptime( String core )
-  {
-    NamedList<Object> v = getCoreStatus( core );
-    if( v == null ) {
-      return null;
-    }
-    return (Long) v.get( "uptime" );
-  }
-}
\ No newline at end of file
diff --git a/client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase.java b/client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase.java
index 85005ac..a852cfc 100644
--- a/client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase.java
+++ b/client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase.java
@@ -19,11 +19,11 @@ package org.apache.solr.client.solrj;
 
 import java.io.File;
 
-import org.apache.solr.client.solrj.request.MultiCoreRequest;
+import org.apache.solr.client.solrj.request.CoreAdminRequest;
 import org.apache.solr.client.solrj.request.QueryRequest;
 import org.apache.solr.client.solrj.request.UpdateRequest;
 import org.apache.solr.client.solrj.request.UpdateRequest.ACTION;
-import org.apache.solr.client.solrj.response.MultiCoreResponse;
+import org.apache.solr.client.solrj.response.CoreAdminResponse;
 import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.core.CoreContainer;
 
@@ -34,7 +34,7 @@ import org.apache.solr.core.CoreContainer;
  */
 public abstract class MultiCoreExampleTestBase extends SolrExampleTestBase 
 {
-  protected static final CoreContainer multicore = new CoreContainer();
+  protected static final CoreContainer cores = new CoreContainer();
   
   @Override public String getSolrHome() { return "../../../example/multicore/"; }
   
@@ -118,11 +118,11 @@ public abstract class MultiCoreExampleTestBase extends SolrExampleTestBase
     // Now test reloading it should have a newer open time
     String name = "core0";
     SolrServer coreadmin = getSolrAdmin();
-    MultiCoreResponse mcr = MultiCoreRequest.getStatus( name, coreadmin );
+    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );
     long before = mcr.getStartTime( name ).getTime();
-    MultiCoreRequest.reloadCore( name, coreadmin );
+    CoreAdminRequest.reloadCore( name, coreadmin );
     
-    mcr = MultiCoreRequest.getStatus( name, coreadmin );
+    mcr = CoreAdminRequest.getStatus( name, coreadmin );
     long after = mcr.getStartTime( name ).getTime();
     assertTrue( "should have more recent time: "+after+","+before, after > before );
   }
diff --git a/client/java/solrj/test/org/apache/solr/client/solrj/embedded/MultiCoreEmbeddedTest.java b/client/java/solrj/test/org/apache/solr/client/solrj/embedded/MultiCoreEmbeddedTest.java
index 57316bc..447a40d 100644
--- a/client/java/solrj/test/org/apache/solr/client/solrj/embedded/MultiCoreEmbeddedTest.java
+++ b/client/java/solrj/test/org/apache/solr/client/solrj/embedded/MultiCoreEmbeddedTest.java
@@ -36,24 +36,24 @@ public class MultiCoreEmbeddedTest extends MultiCoreExampleTestBase {
     
     File home = new File( getSolrHome() );
     File f = new File( home, "solr.xml" );
-    multicore.load( getSolrHome(), f );
+    cores.load( getSolrHome(), f );
   }
 
   @Override
   protected SolrServer getSolrCore0()
   {
-    return new EmbeddedSolrServer( multicore, "core0" );
+    return new EmbeddedSolrServer( cores, "core0" );
   }
 
   @Override
   protected SolrServer getSolrCore1()
   {
-    return new EmbeddedSolrServer( multicore, "core1" );
+    return new EmbeddedSolrServer( cores, "core1" );
   }
 
   @Override
   protected SolrServer getSolrAdmin()
   {
-    return new EmbeddedSolrServer( multicore, "core0" );
+    return new EmbeddedSolrServer( cores, "core0" );
   } 
 }
diff --git a/example/multicore/solr.xml b/example/multicore/solr.xml
index fed101e..921d929 100644
--- a/example/multicore/solr.xml
+++ b/example/multicore/solr.xml
@@ -25,10 +25,10 @@
 <solr persistent="true">
 
   <!--
-  adminPath: RequestHandler path to manage multicores.  
-    If 'null', cores will not be managable via REST
+  adminPath: RequestHandler path to manage cores.  
+    If 'null' (or absent), cores will not be manageable via REST
   -->
-  <cores adminPath="/admin/multicore">
+  <cores adminPath="/admin/cores">
     <core name="core0" instanceDir="core0" />
     <core name="core1" instanceDir="core1" />
   </cores>
diff --git a/src/java/org/apache/solr/common/params/CoreAdminParams.java b/src/java/org/apache/solr/common/params/CoreAdminParams.java
new file mode 100644
index 0000000..9ce3b27
--- /dev/null
+++ b/src/java/org/apache/solr/common/params/CoreAdminParams.java
@@ -0,0 +1,71 @@
+/**
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.common.params;
+
+/**
+ * @since solr 1.3
+ */
+public interface CoreAdminParams 
+{
+  /** What Core are we talking about **/
+  public final static String CORE = "core";
+
+  /** Persistent -- should it save the cores state? **/
+  public final static String PERSISTENT = "persistent";
+
+  /** The name of the the core to swap names with **/
+  public final static String WITH = "with";
+  
+  /** If you rename something, what is the new name **/
+  public final static String NAME = "name";
+  
+  /** What action **/
+  public final static String ACTION = "action";
+  
+  /** If you specify a schema, what is its name **/
+  public final static String SCHEMA = "schema";
+  
+  /** If you specify a config, what is its name **/
+  public final static String CONFIG = "config";
+  
+  /** Specifies a core instance dir. */
+  public final static String INSTANCE_DIR = "instanceDir";
+  
+  public enum CoreAdminAction {
+    STATUS,  
+    LOAD,
+    UNLOAD,
+    RELOAD,
+    CREATE,
+    DROP,
+    PERSIST,
+    SWAP;
+    
+    public static CoreAdminAction get( String p )
+    {
+      if( p != null ) {
+        try {
+          return CoreAdminAction.valueOf( p.toUpperCase() );
+        }
+        catch( Exception ex ) {}
+      }
+      return null; 
+    }
+  }
+}
\ No newline at end of file
diff --git a/src/java/org/apache/solr/common/params/MultiCoreParams.java b/src/java/org/apache/solr/common/params/MultiCoreParams.java
deleted file mode 100644
index 0909d87..0000000
--- a/src/java/org/apache/solr/common/params/MultiCoreParams.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/**
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.common.params;
-
-/**
- * @since solr 1.3
- */
-public interface MultiCoreParams 
-{
-  /** What Core are we talking about **/
-  public final static String CORE = "core";
-
-  /** Persistent -- should it save the multicore state? **/
-  public final static String PERSISTENT = "persistent";
-
-  /** The name of the the core to swap names with **/
-  public final static String WITH = "with";
-  
-  /** If you rename something, what is the new name **/
-  public final static String NAME = "name";
-  
-  /** What action **/
-  public final static String ACTION = "action";
-  
-  /** If you specify a schema, what is its name **/
-  public final static String SCHEMA = "schema";
-  
-  /** If you specify a config, what is its name **/
-  public final static String CONFIG = "config";
-  
-  /** Specifies a core instance dir. */
-  public final static String INSTANCE_DIR = "instanceDir";
-  
-  public enum MultiCoreAction {
-    STATUS,  
-    LOAD,
-    UNLOAD,
-    RELOAD,
-    CREATE,
-    DROP,
-    PERSIST,
-    SWAP;
-    
-    public static MultiCoreAction get( String p )
-    {
-      if( p != null ) {
-        try {
-          return MultiCoreAction.valueOf( p.toUpperCase() );
-        }
-        catch( Exception ex ) {}
-      }
-      return null; 
-    }
-  }
-}
\ No newline at end of file
diff --git a/src/java/org/apache/solr/core/CoreContainer.java b/src/java/org/apache/solr/core/CoreContainer.java
index 2eb334c..a27bd1a 100644
--- a/src/java/org/apache/solr/core/CoreContainer.java
+++ b/src/java/org/apache/solr/core/CoreContainer.java
@@ -290,7 +290,7 @@ public class CoreContainer
    * @throws org.xml.sax.SAXException
    */
   public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {
-    // Make the instanceDir relative to the multicore instanceDir if not absolute
+    // Make the instanceDir relative to the cores instanceDir if not absolute
     File idir = new File(dcore.getInstanceDir());
     if (!idir.isAbsolute()) {
       idir = new File(loader.getInstanceDir(), dcore.getInstanceDir());
@@ -522,12 +522,12 @@ public class CoreContainer
     return configFile;
   }
   
-/** Persists the multicore config file in multicore.xml. */
+/** Persists the cores config file in cores.xml. */
   public void persist() {
     persistFile(null);
   }
   
-  /** Persists the multicore config file in a user provided file. */
+  /** Persists the cores config file in a user provided file. */
   public void persistFile(File file) {
     File tmpFile = null;
     try {
@@ -565,7 +565,7 @@ public class CoreContainer
     }
   }
   
-  /** Write the multicore configuration through a writer.*/
+  /** Write the cores configuration through a writer.*/
   void persist(Writer writer) throws IOException {
     writer.write("<?xml version='1.0' encoding='UTF-8'?>");
     writer.write("<solr");
@@ -596,7 +596,7 @@ public class CoreContainer
     writer.write("</solr>\n");
   }
   
-  /** Writes the multicore configuration node for a given core. */
+  /** Writes the cores configuration node for a given core. */
   void persist(Writer writer, CoreDescriptor dcore) throws IOException {
     writer.write("  <core");
     writer.write (" name='");
diff --git a/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java b/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
index 86cd42c..f88c91d 100644
--- a/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
+++ b/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
@@ -21,9 +21,9 @@ import java.io.IOException;
 import java.util.Date;
 
 import org.apache.solr.common.SolrException;
-import org.apache.solr.common.params.MultiCoreParams;
+import org.apache.solr.common.params.CoreAdminParams;
 import org.apache.solr.common.params.SolrParams;
-import org.apache.solr.common.params.MultiCoreParams.MultiCoreAction;
+import org.apache.solr.common.params.CoreAdminParams.CoreAdminAction;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.common.util.SimpleOrderedMap;
 import org.apache.solr.core.CoreContainer;
@@ -77,29 +77,29 @@ public abstract class CoreAdminHandler extends RequestHandlerBase
     // Pick the action
     SolrParams params = req.getParams();
     SolrParams required = params.required();
-    MultiCoreAction action = MultiCoreAction.STATUS;
-    String a = params.get( MultiCoreParams.ACTION );
+    CoreAdminAction action = CoreAdminAction.STATUS;
+    String a = params.get( CoreAdminParams.ACTION );
     if( a != null ) {
-      action = MultiCoreAction.get( a );
+      action = CoreAdminAction.get( a );
       if( action == null ) {
         throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,
-          "Unknown 'action' value.  Use: "+MultiCoreAction.values() );
+          "Unknown 'action' value.  Use: "+CoreAdminAction.values() );
       }
     }
-    String cname = params.get( MultiCoreParams.CORE );
+    String cname = params.get( CoreAdminParams.CORE );
     
     switch(action) {
       case CREATE: {
         CoreDescriptor dcore = new CoreDescriptor(cores);
-        dcore.init(params.get(MultiCoreParams.NAME),
-                  params.get(MultiCoreParams.INSTANCE_DIR));
+        dcore.init(params.get(CoreAdminParams.NAME),
+                  params.get(CoreAdminParams.INSTANCE_DIR));
 
         // fillup optional parameters
-        String opts = params.get(MultiCoreParams.CONFIG);
+        String opts = params.get(CoreAdminParams.CONFIG);
         if (opts != null)
           dcore.setConfigName(opts);
 
-        opts = params.get(MultiCoreParams.SCHEMA);
+        opts = params.get(CoreAdminParams.SCHEMA);
         if (opts != null)
           dcore.setSchemaName(opts);
 
@@ -138,8 +138,8 @@ public abstract class CoreAdminHandler extends RequestHandlerBase
       }
 
       case SWAP: {
-        do_persist = params.getBool(MultiCoreParams.PERSISTENT, cores.isPersistent());
-        String with = required.get( MultiCoreParams.WITH );
+        do_persist = params.getBool(CoreAdminParams.PERSISTENT, cores.isPersistent());
+        String with = required.get( CoreAdminParams.WITH );
         cores.swap( cname, with );
         break;
       } 
diff --git a/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter.java b/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter.java
index 3f9d296..952a820 100644
--- a/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter.java
+++ b/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter.java
@@ -159,7 +159,7 @@ public class SolrDispatchFilter implements Filter
           // pick a core to use for output generation
           core = cores.getAdminCore();
           if( core == null ) {
-            throw new RuntimeException( "Can not find a valid core for the multicore admin handler" );
+            throw new RuntimeException( "Can not find a valid core for the cores admin handler" );
           }
         } 
         else {

