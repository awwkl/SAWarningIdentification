GitDiffStart: f9bdb3cfd17f97561be21397713ffadf70adbd74 | Fri Jan 11 16:17:19 2013 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java b/lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java
index 1a13522..0fb8e09 100644
--- a/lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java
+++ b/lucene/core/src/java/org/apache/lucene/index/MultiDocValues.java
@@ -604,46 +604,5 @@ class MultiDocValues extends DocValues {
   @Override
   protected Source loadDirectSource() throws IOException {
     return new MultiSource(slices, starts, true, type);
-  }
-  
-  public static NumericDocValues simpleNormValues(final IndexReader r, final String field) throws IOException {
-    final List<AtomicReaderContext> leaves = r.leaves();
-    if (leaves.size() == 1) {
-      return leaves.get(0).reader().simpleNormValues(field);
-    }
-    FieldInfo fi = MultiFields.getMergedFieldInfos(r).fieldInfo(field);
-    if (fi == null || fi.hasNorms() == false) {
-      return null;
-    }
-    boolean anyReal = false;
-    for(AtomicReaderContext ctx : leaves) {
-      NumericDocValues norms = ctx.reader().simpleNormValues(field);
-
-      if (norms != null) {
-        anyReal = true;
-      }
-    }
-    
-    // assert anyReal; // nocommit: unsafe until 4.0 is done
-
-    return new NumericDocValues() {
-      @Override
-      public long get(int docID) {
-        int subIndex = ReaderUtil.subIndex(docID, leaves);
-        NumericDocValues norms;
-        try {
-          norms = leaves.get(subIndex).reader().simpleNormValues(field);
-        } catch (IOException ioe) {
-          throw new RuntimeException(ioe);
-        }
-        if (norms == null) { // WTF? should be EMPTY?
-          return 0;
-        } else {
-          return norms.get(docID - leaves.get(subIndex).docBase);
-        }
-      }
-    };
-  }
-  
-  
+  }  
 }
diff --git a/lucene/core/src/java/org/apache/lucene/index/MultiSimpleDocValues.java b/lucene/core/src/java/org/apache/lucene/index/MultiSimpleDocValues.java
new file mode 100644
index 0000000..c3bed86
--- /dev/null
+++ b/lucene/core/src/java/org/apache/lucene/index/MultiSimpleDocValues.java
@@ -0,0 +1,198 @@
+package org.apache.lucene.index;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.lucene.codecs.Codec;
+import org.apache.lucene.index.IndexReader.ReaderClosedListener;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.util.Bits;
+import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.IOUtils;
+import org.apache.lucene.util.Version;
+
+public class MultiSimpleDocValues {
+  
+  // moved to src/java so SlowWrapper can use it... uggggggh
+  public static NumericDocValues simpleNormValues(final IndexReader r, final String field) throws IOException {
+    final List<AtomicReaderContext> leaves = r.leaves();
+    if (leaves.size() == 1) {
+      return leaves.get(0).reader().simpleNormValues(field);
+    }
+    FieldInfo fi = MultiFields.getMergedFieldInfos(r).fieldInfo(field);
+    if (fi == null || fi.hasNorms() == false) {
+      return null;
+    }
+    boolean anyReal = false;
+    for(AtomicReaderContext ctx : leaves) {
+      NumericDocValues norms = ctx.reader().simpleNormValues(field);
+
+      if (norms != null) {
+        anyReal = true;
+      }
+    }
+    
+    // assert anyReal; // nocommit: unsafe until 4.0 is done
+
+    return new NumericDocValues() {
+      @Override
+      public long get(int docID) {
+        int subIndex = ReaderUtil.subIndex(docID, leaves);
+        NumericDocValues norms;
+        try {
+          norms = leaves.get(subIndex).reader().simpleNormValues(field);
+        } catch (IOException ioe) {
+          throw new RuntimeException(ioe);
+        }
+        if (norms == null) { // WTF? should be EMPTY?
+          return 0;
+        } else {
+          return norms.get(docID - leaves.get(subIndex).docBase);
+        }
+      }
+    };
+  }
+
+  public static NumericDocValues simpleNumericValues(final IndexReader r, final String field) throws IOException {
+    final List<AtomicReaderContext> leaves = r.leaves();
+    if (leaves.size() == 1) {
+      return leaves.get(0).reader().getNumericDocValues(field);
+    }
+    boolean anyReal = false;
+    for(AtomicReaderContext ctx : leaves) {
+      NumericDocValues values = ctx.reader().getNumericDocValues(field);
+
+      if (values != null) {
+        anyReal = true;
+      }
+    }
+
+    if (!anyReal) {
+      return null;
+    } else {
+      return new NumericDocValues() {
+        @Override
+        public long get(int docID) {
+          int subIndex = ReaderUtil.subIndex(docID, leaves);
+          NumericDocValues values;
+          try {
+            values = leaves.get(subIndex).reader().getNumericDocValues(field);
+          } catch (IOException ioe) {
+            throw new RuntimeException(ioe);
+          }
+          if (values == null) {
+            return 0;
+          } else {
+            return values.get(docID - leaves.get(subIndex).docBase);
+          }
+        }
+      };
+    }
+  }
+
+  public static BinaryDocValues simpleBinaryValues(final IndexReader r, final String field) throws IOException {
+    final List<AtomicReaderContext> leaves = r.leaves();
+    if (leaves.size() == 1) {
+      return leaves.get(0).reader().getBinaryDocValues(field);
+    }
+    boolean anyReal = false;
+
+    for(AtomicReaderContext ctx : leaves) {
+      BinaryDocValues values = ctx.reader().getBinaryDocValues(field);
+
+      if (values != null) {
+        anyReal = true;
+      }
+    }
+
+    if (!anyReal) {
+      return null;
+    } else {
+
+      return new BinaryDocValues() {
+        @Override
+        public void get(int docID, BytesRef result) {
+          int subIndex = ReaderUtil.subIndex(docID, leaves);
+          BinaryDocValues values;
+          try {
+            values = leaves.get(subIndex).reader().getBinaryDocValues(field);
+          } catch (IOException ioe) {
+            throw new RuntimeException(ioe);
+          }
+          if (values != null) {
+            values.get(docID - leaves.get(subIndex).docBase, result);
+          } else {
+            result.length = 0;
+            result.bytes = BinaryDocValues.MISSING;
+          }
+        }
+      };
+    }
+  }
+  
+  public static SortedDocValues simpleSortedValues(final IndexReader r, final String field) throws IOException {
+    final List<AtomicReaderContext> leaves = r.leaves();
+    if (leaves.size() == 1) {
+      return leaves.get(0).reader().getSortedDocValues(field);
+    }
+    boolean anyReal = false;
+
+    for(AtomicReaderContext ctx : leaves) {
+      SortedDocValues values = ctx.reader().getSortedDocValues(field);
+
+      if (values != null) {
+        anyReal = true;
+      }
+    }
+
+    if (!anyReal) {
+      return null;
+    } else {
+      // its called slow-wrapper for a reason right?
+      final Directory scratch = new RAMDirectory();
+      IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_50, null);
+      config.setCodec(Codec.forName("SimpleText"));
+      IndexWriter writer = new IndexWriter(scratch, config);
+      List<AtomicReader> newLeaves = new ArrayList<AtomicReader>();
+      for (AtomicReaderContext ctx : leaves) {
+        final AtomicReader a = ctx.reader();
+        newLeaves.add(new FilterAtomicReader(a) {
+          @Override
+          public Bits getLiveDocs() {
+            return null; // lie
+          }
+        });
+      }
+      writer.addIndexes(newLeaves.toArray(new AtomicReader[0]));
+      writer.close();
+      final IndexReader newR = DirectoryReader.open(scratch);
+      assert newR.leaves().size() == 1;
+      r.addReaderClosedListener(new ReaderClosedListener() {
+        @Override
+        public void onClose(IndexReader reader) {
+          IOUtils.closeWhileHandlingException(newR, scratch);
+        }
+      });
+      return newR.leaves().get(0).reader().getSortedDocValues(field);
+    }
+  }
+}
diff --git a/lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java b/lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java
index b21cbfb..af80707 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper.java
@@ -91,19 +91,19 @@ public final class SlowCompositeReaderWrapper extends AtomicReader {
   @Override
   public NumericDocValues getNumericDocValues(String field) throws IOException {
     ensureOpen();
-    return null; // nocommit: UOE
+    return MultiSimpleDocValues.simpleNumericValues(in, field);
   }
 
   @Override
   public BinaryDocValues getBinaryDocValues(String field) throws IOException {
     ensureOpen();
-    return null; // nocommit: UOE
+    return MultiSimpleDocValues.simpleBinaryValues(in, field);
   }
 
   @Override
   public SortedDocValues getSortedDocValues(String field) throws IOException {
     ensureOpen();
-    return null; // nocommit: UOE
+    return MultiSimpleDocValues.simpleSortedValues(in, field);
   }
   
   @Override
@@ -121,7 +121,7 @@ public final class SlowCompositeReaderWrapper extends AtomicReader {
   public NumericDocValues simpleNormValues(String field) throws IOException {
     ensureOpen();
     // nocommit hmm
-    return MultiDocValues.simpleNormValues(in, field);
+    return MultiSimpleDocValues.simpleNormValues(in, field);
   }
   
   @Override
diff --git a/lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues.java b/lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues.java
deleted file mode 100644
index fc54743..0000000
--- a/lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues.java
+++ /dev/null
@@ -1,108 +0,0 @@
-package org.apache.lucene.index;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.List;
-
-import org.apache.lucene.util.BytesRef;
-
-public class MultiSimpleDocValues {
-  
-  // moved to src/java so SlowWrapper can use it... uggggggh
-  public static NumericDocValues simpleNormValues(final IndexReader r, final String field) throws IOException {
-    return MultiDocValues.simpleNormValues(r, field);
-  }
-
-  public static NumericDocValues simpleNumericValues(final IndexReader r, final String field) throws IOException {
-    final List<AtomicReaderContext> leaves = r.leaves();
-    if (leaves.size() == 1) {
-      return leaves.get(0).reader().getNumericDocValues(field);
-    }
-    boolean anyReal = false;
-    for(AtomicReaderContext ctx : leaves) {
-      NumericDocValues values = ctx.reader().getNumericDocValues(field);
-
-      if (values != null) {
-        anyReal = true;
-      }
-    }
-
-    if (!anyReal) {
-      return null;
-    } else {
-      return new NumericDocValues() {
-        @Override
-        public long get(int docID) {
-          int subIndex = ReaderUtil.subIndex(docID, leaves);
-          NumericDocValues values;
-          try {
-            values = leaves.get(subIndex).reader().getNumericDocValues(field);
-          } catch (IOException ioe) {
-            throw new RuntimeException(ioe);
-          }
-          if (values == null) {
-            return 0;
-          } else {
-            return values.get(docID - leaves.get(subIndex).docBase);
-          }
-        }
-      };
-    }
-  }
-
-  public static BinaryDocValues simpleBinaryValues(final IndexReader r, final String field) throws IOException {
-    final List<AtomicReaderContext> leaves = r.leaves();
-    if (leaves.size() == 1) {
-      return leaves.get(0).reader().getBinaryDocValues(field);
-    }
-    boolean anyReal = false;
-
-    for(AtomicReaderContext ctx : leaves) {
-      BinaryDocValues values = ctx.reader().getBinaryDocValues(field);
-
-      if (values != null) {
-        anyReal = true;
-      }
-    }
-
-    if (!anyReal) {
-      return null;
-    } else {
-
-      return new BinaryDocValues() {
-        @Override
-        public void get(int docID, BytesRef result) {
-          int subIndex = ReaderUtil.subIndex(docID, leaves);
-          BinaryDocValues values;
-          try {
-            values = leaves.get(subIndex).reader().getBinaryDocValues(field);
-          } catch (IOException ioe) {
-            throw new RuntimeException(ioe);
-          }
-          if (values != null) {
-            values.get(docID - leaves.get(subIndex).docBase, result);
-          } else {
-            result.length = 0;
-            result.bytes = BinaryDocValues.MISSING;
-          }
-        }
-      };
-    }
-  }
-}

