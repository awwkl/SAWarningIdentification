GitDiffStart: fb559461fac39913d382daf18560a54e5ef930af | Sat Jun 30 18:52:16 2007 +0000
diff --git a/example/solr/conf/solrconfig.xml b/example/solr/conf/solrconfig.xml
index 5742291..b6a8c8d 100755
--- a/example/solr/conf/solrconfig.xml
+++ b/example/solr/conf/solrconfig.xml
@@ -404,12 +404,13 @@
        "update.processor.class" is the class name for the UpdateRequestProcessor.  It is initalized
        only once.  This can not be changed for each request.
     -->
-  <requestHandler name="/update/stax" class="solr.StaxUpdateRequestHandler" >
+  <requestHandler name="/update" class="solr.XmlUpdateRequestHandler" >
     <!--
     <str name="update.processor.class">org.apache.solr.handler.UpdateRequestProcessor</str>
     -->
   </requestHandler>
-  <requestHandler name="/update" class="solr.XmlUpdateRequestHandler" />
+  <!-- this will be removed before solr 1.3 -->
+  <requestHandler name="/update/xpp" class="solr.XppUpdateRequestHandler" />
 
   <!-- CSV update handler, loaded on demand -->
   <requestHandler name="/update/csv" class="solr.CSVRequestHandler" startup="lazy" />
diff --git a/src/java/org/apache/solr/handler/StaxUpdateRequestHandler.java b/src/java/org/apache/solr/handler/StaxUpdateRequestHandler.java
deleted file mode 100644
index 2abd95e..0000000
--- a/src/java/org/apache/solr/handler/StaxUpdateRequestHandler.java
+++ /dev/null
@@ -1,435 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.handler;
-
-import java.io.IOException;
-import java.io.Reader;
-import java.io.Writer;
-import java.util.HashMap;
-import java.util.logging.Logger;
-
-import javanet.staxutils.BaseXMLInputFactory;
-
-import javax.xml.stream.FactoryConfigurationError;
-import javax.xml.stream.XMLInputFactory;
-import javax.xml.stream.XMLStreamConstants;
-import javax.xml.stream.XMLStreamException;
-import javax.xml.stream.XMLStreamReader;
-import javax.xml.transform.TransformerConfigurationException;
-
-import org.apache.commons.io.IOUtils;
-import org.apache.solr.common.SolrException;
-import org.apache.solr.common.SolrInputDocument;
-import org.apache.solr.common.params.MapSolrParams;
-import org.apache.solr.common.params.SolrParams;
-import org.apache.solr.common.util.ContentStream;
-import org.apache.solr.common.util.NamedList;
-import org.apache.solr.common.util.StrUtils;
-import org.apache.solr.common.util.XML;
-import org.apache.solr.core.Config;
-import org.apache.solr.core.SolrCore;
-import org.apache.solr.request.SolrQueryRequest;
-import org.apache.solr.request.SolrQueryRequestBase;
-import org.apache.solr.request.SolrQueryResponse;
-import org.apache.solr.update.AddUpdateCommand;
-import org.apache.solr.update.CommitUpdateCommand;
-import org.apache.solr.update.DeleteUpdateCommand;
-
-/**
- * Add documents to solr using the STAX XML parser.
- * 
- * To change the UpdateRequestProcessor implementation, add the configuration parameter:
- * 
- *  <requestHandler name="/update" class="solr.StaxUpdateRequestHandler" >
- *    <str name="update.processor.class">org.apache.solr.handler.UpdateRequestProcessor</str>
- *    <lst name="update.processor.args">
- *     ... (optionally pass in arguments to the factory init method) ...
- *    </lst> 
- *  </requestHandler>
- */
-public class StaxUpdateRequestHandler extends XmlUpdateRequestHandler
-{
-  public static Logger log = Logger.getLogger(StaxUpdateRequestHandler.class.getName());
-
-  public static final String UPDATE_PROCESSOR_FACTORY = "update.processor.factory";
-  public static final String UPDATE_PROCESSOR_ARGS    = "update.processor.args";
-  
-  // XML Constants
-  public static final String ADD = "add";
-  public static final String DELETE = "delete";
-  public static final String OPTIMIZE = "optimize";
-  public static final String COMMIT = "commit";
-  public static final String WAIT_SEARCHER = "waitSearcher";
-  public static final String WAIT_FLUSH = "waitFlush";
-  public static final String MODE = "mode";
-  
-  public static final String OVERWRITE = "overwrite";
-  public static final String OVERWRITE_COMMITTED = "overwriteCommitted"; // @Deprecated
-  public static final String OVERWRITE_PENDING = "overwritePending";  // @Deprecated
-  public static final String ALLOW_DUPS = "allowDups"; 
-  
-  private XMLInputFactory inputFactory;
-  private UpdateRequestProcessorFactory processorFactory;
-  
-  @SuppressWarnings("unchecked")
-  @Override
-  public void init(NamedList args)
-  {
-    super.init(args);
-    inputFactory = BaseXMLInputFactory.newInstance();
-  
-    // Initialize the UpdateRequestProcessorFactory
-    NamedList<Object> factoryargs = null;
-    if( args != null ) {
-      String className = (String)args.get( UPDATE_PROCESSOR_FACTORY );
-      factoryargs = (NamedList<Object>)args.get( UPDATE_PROCESSOR_ARGS );
-      if( className != null ) {
-        processorFactory = (UpdateRequestProcessorFactory)Config.newInstance( className, new String[]{} );
-      }
-    }
-    if( processorFactory == null ) {
-      processorFactory = new UpdateRequestProcessorFactory();
-    }
-    processorFactory.init( factoryargs );
-  }
-  
-  @Override
-  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception 
-  {
-    Iterable<ContentStream> streams = req.getContentStreams();
-    if( streams == null ) {
-      if( !RequestHandlerUtils.handleCommit(req, rsp, false) ) {
-        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, "missing content stream" );
-      }
-      return;
-    }
-    
-    RequestHandlerUtils.addExperimentalFormatWarning( rsp );
-    
-    // Cycle through each stream
-    for( ContentStream stream : req.getContentStreams() ) {
-      Reader reader = stream.getReader();
-      try {
-        NamedList out = this.update( req, req.getCore(), reader );
-        rsp.add( "update", out );
-      }
-      finally {
-        IOUtils.closeQuietly(reader);
-      }
-    }
-    
-    // perhaps commit when we are done
-    RequestHandlerUtils.handleCommit(req, rsp, false);
-  }
-    
-  /**
-   * @since solr 1.2
-   */
-  NamedList<Object> processUpdate( SolrQueryRequest req, SolrCore core, XMLStreamReader parser)
-    throws XMLStreamException, IOException, FactoryConfigurationError,
-          InstantiationException, IllegalAccessException,
-          TransformerConfigurationException 
-  {
-    UpdateRequestProcessor processor = processorFactory.getInstance( req );
-    
-    AddUpdateCommand addCmd = null;   
-    while (true) {
-      int event = parser.next();
-      switch (event) {
-        case XMLStreamConstants.END_DOCUMENT:
-          parser.close();
-          return processor.getResponse();
-
-        case XMLStreamConstants.START_ELEMENT:
-          String currTag = parser.getLocalName();
-          if (currTag.equals(ADD)) {
-            log.finest("SolrCore.update(add)");
-            
-            addCmd = new AddUpdateCommand();
-            boolean overwrite=true;  // the default
-
-            Boolean overwritePending = null;
-            Boolean overwriteCommitted = null;
-            for (int i=0; i<parser.getAttributeCount(); i++) {
-              String attrName = parser.getAttributeLocalName(i);
-              String attrVal = parser.getAttributeValue(i);
-              if (OVERWRITE.equals(attrName)) {
-                overwrite = StrUtils.parseBoolean(attrVal);
-//              } else if (MODE.equals(attrName)) {
-//                addCmd.mode = SolrPluginUtils.parseAndValidateFieldModes(attrVal,schema);
-              } else if (ALLOW_DUPS.equals(attrName)) {
-                overwrite = !StrUtils.parseBoolean(attrVal);
-              } else if ( OVERWRITE_PENDING.equals(attrName) ) {
-                overwritePending = StrUtils.parseBoolean(attrVal);
-              } else if ( OVERWRITE_COMMITTED.equals(attrName) ) {
-                overwriteCommitted = StrUtils.parseBoolean(attrVal);
-              } else {
-                log.warning("Unknown attribute id in add:" + attrName);
-              }
-            }
-            
-            // check if these flags are set
-            if( overwritePending != null && overwriteCommitted != null ) {
-              if( overwritePending != overwriteCommitted ) {
-                throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, 
-                    "can't have different values for 'overwritePending' and 'overwriteCommitted'" );
-              }
-              overwrite=overwritePending;
-            }
-            addCmd.overwriteCommitted =  overwrite;
-            addCmd.overwritePending   =  overwrite;
-            addCmd.allowDups          = !overwrite;
-          } 
-          else if ("doc".equals(currTag)) {
-            log.finest("adding doc...");
-            SolrInputDocument doc = readDoc( parser );
-            processor.processAdd( addCmd, doc );
-          } 
-          else if ( COMMIT.equals(currTag) || OPTIMIZE.equals(currTag)) {
-            log.finest("parsing " + currTag);
-
-            CommitUpdateCommand cmd = new CommitUpdateCommand(OPTIMIZE.equals(currTag));
-
-            boolean sawWaitSearcher = false, sawWaitFlush = false;
-            for (int i = 0; i < parser.getAttributeCount(); i++) {
-              String attrName = parser.getAttributeLocalName(i);
-              String attrVal = parser.getAttributeValue(i);
-              if (WAIT_FLUSH.equals(attrName)) {
-                cmd.waitFlush = StrUtils.parseBoolean(attrVal);
-                sawWaitFlush = true;
-              } else if (WAIT_SEARCHER.equals(attrName)) {
-                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);
-                sawWaitSearcher = true;
-              } else {
-                log.warning("unexpected attribute commit/@" + attrName);
-              }
-            }
-
-            // If waitFlush is specified and waitSearcher wasn't, then
-            // clear waitSearcher.
-            if (sawWaitFlush && !sawWaitSearcher) {
-              cmd.waitSearcher = false;
-            }
-            processor.processCommit( cmd );
-          } // end commit
-          else if (DELETE.equals(currTag)) {
-            log.finest("parsing delete");
-            processDelete( processor, parser);
-          } // end delete
-          break;
-       }
-    }
-  }
-
-  /**
-   * @since solr 1.3
-   */
-  void processDelete(UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException 
-  {
-    // Parse the command
-    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand();
-    deleteCmd.fromPending = true;
-    deleteCmd.fromCommitted = true;
-    for (int i = 0; i < parser.getAttributeCount(); i++) {
-      String attrName = parser.getAttributeLocalName(i);
-      String attrVal = parser.getAttributeValue(i);
-      if ("fromPending".equals(attrName)) {
-        deleteCmd.fromPending = StrUtils.parseBoolean(attrVal);
-      } else if ("fromCommitted".equals(attrName)) {
-        deleteCmd.fromCommitted = StrUtils.parseBoolean(attrVal);
-      } else {
-        log.warning("unexpected attribute delete/@" + attrName);
-      }
-    }
-    
-    String val = null;
-    String mode = null;
-    while (true) {
-      int event = parser.next();
-      switch (event) {
-      case XMLStreamConstants.START_ELEMENT:
-        mode = parser.getLocalName();
-        if (!("id".equals(mode) || "query".equals(mode))) {
-          log.warning("unexpected XML tag /delete/" + mode);
-          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, 
-              "unexpected XML tag /delete/" + mode);
-        }
-        break;
-        
-      case XMLStreamConstants.END_ELEMENT:
-        String currTag = parser.getLocalName();
-        if ("id".equals(currTag)) {
-          deleteCmd.id = val;
-        } else if ("query".equals(currTag)) {
-          deleteCmd.query = val;
-        } else {
-          log.warning("unexpected XML tag /delete/" + currTag);
-          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, 
-              "unexpected XML tag /delete/" + currTag);
-        }
-        processor.processDelete( deleteCmd );
-        return;
-        
-      case XMLStreamConstants.CHARACTERS:
-        val = parser.getText();
-        break;
-      }
-    }
-  }
-
-  /**
-   * Given the input stream, read a document
-   * 
-   * @since solr 1.3
-   */
-  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {
-    SolrInputDocument doc = new SolrInputDocument();
-    
-    String attrName = "";
-    for (int i = 0; i < parser.getAttributeCount(); i++) {
-      attrName = parser.getAttributeLocalName(i);
-      if ("boost".equals(attrName)) {
-        doc.setBoost( null, Float.parseFloat(parser.getAttributeValue(i)) );
-      } else {
-        log.warning("Unknown attribute doc/@" + attrName);
-      }
-    }
-    
-    StringBuilder text = new StringBuilder();
-    String name = null;
-    Float boost = null;
-    boolean isNull = false;
-    while (true) {
-      int event = parser.next();
-      switch (event) {
-      // Add everything to the text
-      case XMLStreamConstants.SPACE:
-      case XMLStreamConstants.CDATA:
-      case XMLStreamConstants.CHARACTERS:
-        text.append( parser.getText() );
-        break;
-        
-      case XMLStreamConstants.END_ELEMENT:
-        if ("doc".equals(parser.getLocalName())) {
-          return doc;
-        } 
-        else if ("field".equals(parser.getLocalName())) {
-          if (!isNull) {
-            if(boost != null) {
-              // The lucene API and solr XML field specification make it possible to set boosts
-              // on multi-value fields even though lucene indexing does not support this.
-              // To keep behavior consistent with what happens in the lucene index, we accumulate
-              // the product of all boosts specified for this field.
-              Float old = doc.getBoost( name );
-              if( old != null ) {
-                doc.setBoost( name, boost*old );
-              }
-              else {
-                doc.setBoost( name, boost );
-              }
-            }
-            doc.addField(name, text.toString() );
-          }
-        }
-        break;
-        
-      case XMLStreamConstants.START_ELEMENT:
-        text.setLength(0);
-        String localName = parser.getLocalName();
-        if (!"field".equals(localName)) {
-          log.warning("unexpected XML tag doc/" + localName);
-          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, 
-              "unexpected XML tag doc/" + localName);
-        }
-        boost = null;
-        String attrVal = "";
-        for (int i = 0; i < parser.getAttributeCount(); i++) {
-          attrName = parser.getAttributeLocalName(i);
-          attrVal = parser.getAttributeValue(i);
-          if ("name".equals(attrName)) {
-            name = attrVal;
-          } else if ("boost".equals(attrName)) {
-            boost = Float.parseFloat(attrVal);
-          } else if ("null".equals(attrName)) {
-            isNull = StrUtils.parseBoolean(attrVal);
-          } else {
-            log.warning("Unknown attribute doc/field/@" + attrName);
-          }
-        }
-        break;
-      }
-    }
-  }
-
-  /**
-   * @since solr 1.2
-   */
-  public NamedList<Object> update( SolrQueryRequest req, SolrCore core, Reader reader) throws Exception {
-    XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);
-    return processUpdate( req, core, parser);
-  }
-
-  /**
-   * A Convenience method for getting back a simple XML string indicating
-   * success or failure from an XML formated Update (from the Reader)
-   * 
-   * @since solr 1.2
-   */
-  @Deprecated
-  public void doLegacyUpdate(Reader input, Writer output) {
-    try {
-      SolrCore core = SolrCore.getSolrCore();
-      SolrParams params = new MapSolrParams( new HashMap<String, String>() );
-      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};
-      this.update( req, SolrCore.getSolrCore(), input);
-      output.write("<result status=\"0\"></result>");
-    } 
-    catch (Exception ex) {
-      try {
-        XML.writeXML(output, "result", SolrException.toStr(ex), "status", "1");
-      } catch (Exception ee) {
-        log.severe("Error writing to output stream: " + ee);
-      }
-    }
-  }
-  
-  //////////////////////// SolrInfoMBeans methods //////////////////////
-
-  @Override
-  public String getDescription() {
-    return "Add documents with XML";
-  }
-
-  @Override
-  public String getVersion() {
-    return "$Revision$";
-  }
-
-  @Override
-  public String getSourceId() {
-    return "$Id$";
-  }
-
-  @Override
-  public String getSource() {
-    return "$URL$";
-  }
-}
-
-
-
diff --git a/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java b/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java
new file mode 100644
index 0000000..d271973
--- /dev/null
+++ b/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java
@@ -0,0 +1,435 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.handler;
+
+import java.io.IOException;
+import java.io.Reader;
+import java.io.Writer;
+import java.util.HashMap;
+import java.util.logging.Logger;
+
+import javanet.staxutils.BaseXMLInputFactory;
+
+import javax.xml.stream.FactoryConfigurationError;
+import javax.xml.stream.XMLInputFactory;
+import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+import javax.xml.transform.TransformerConfigurationException;
+
+import org.apache.commons.io.IOUtils;
+import org.apache.solr.common.SolrException;
+import org.apache.solr.common.SolrInputDocument;
+import org.apache.solr.common.params.MapSolrParams;
+import org.apache.solr.common.params.SolrParams;
+import org.apache.solr.common.util.ContentStream;
+import org.apache.solr.common.util.NamedList;
+import org.apache.solr.common.util.StrUtils;
+import org.apache.solr.common.util.XML;
+import org.apache.solr.core.Config;
+import org.apache.solr.core.SolrCore;
+import org.apache.solr.request.SolrQueryRequest;
+import org.apache.solr.request.SolrQueryRequestBase;
+import org.apache.solr.request.SolrQueryResponse;
+import org.apache.solr.update.AddUpdateCommand;
+import org.apache.solr.update.CommitUpdateCommand;
+import org.apache.solr.update.DeleteUpdateCommand;
+
+/**
+ * Add documents to solr using the STAX XML parser.
+ * 
+ * To change the UpdateRequestProcessor implementation, add the configuration parameter:
+ * 
+ *  <requestHandler name="/update" class="solr.StaxUpdateRequestHandler" >
+ *    <str name="update.processor.class">org.apache.solr.handler.UpdateRequestProcessor</str>
+ *    <lst name="update.processor.args">
+ *     ... (optionally pass in arguments to the factory init method) ...
+ *    </lst> 
+ *  </requestHandler>
+ */
+public class XmlUpdateRequestHandler extends RequestHandlerBase
+{
+  public static Logger log = Logger.getLogger(XmlUpdateRequestHandler.class.getName());
+
+  public static final String UPDATE_PROCESSOR_FACTORY = "update.processor.factory";
+  public static final String UPDATE_PROCESSOR_ARGS    = "update.processor.args";
+  
+  // XML Constants
+  public static final String ADD = "add";
+  public static final String DELETE = "delete";
+  public static final String OPTIMIZE = "optimize";
+  public static final String COMMIT = "commit";
+  public static final String WAIT_SEARCHER = "waitSearcher";
+  public static final String WAIT_FLUSH = "waitFlush";
+  public static final String MODE = "mode";
+  
+  public static final String OVERWRITE = "overwrite";
+  public static final String OVERWRITE_COMMITTED = "overwriteCommitted"; // @Deprecated
+  public static final String OVERWRITE_PENDING = "overwritePending";  // @Deprecated
+  public static final String ALLOW_DUPS = "allowDups"; 
+  
+  private XMLInputFactory inputFactory;
+  private UpdateRequestProcessorFactory processorFactory;
+  
+  @SuppressWarnings("unchecked")
+  @Override
+  public void init(NamedList args)
+  {
+    super.init(args);
+    inputFactory = BaseXMLInputFactory.newInstance();
+  
+    // Initialize the UpdateRequestProcessorFactory
+    NamedList<Object> factoryargs = null;
+    if( args != null ) {
+      String className = (String)args.get( UPDATE_PROCESSOR_FACTORY );
+      factoryargs = (NamedList<Object>)args.get( UPDATE_PROCESSOR_ARGS );
+      if( className != null ) {
+        processorFactory = (UpdateRequestProcessorFactory)Config.newInstance( className, new String[]{} );
+      }
+    }
+    if( processorFactory == null ) {
+      processorFactory = new UpdateRequestProcessorFactory();
+    }
+    processorFactory.init( factoryargs );
+  }
+  
+  @Override
+  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception 
+  {
+    Iterable<ContentStream> streams = req.getContentStreams();
+    if( streams == null ) {
+      if( !RequestHandlerUtils.handleCommit(req, rsp, false) ) {
+        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, "missing content stream" );
+      }
+      return;
+    }
+    
+    RequestHandlerUtils.addExperimentalFormatWarning( rsp );
+    
+    // Cycle through each stream
+    for( ContentStream stream : req.getContentStreams() ) {
+      Reader reader = stream.getReader();
+      try {
+        NamedList out = this.update( req, req.getCore(), reader );
+        rsp.add( "update", out );
+      }
+      finally {
+        IOUtils.closeQuietly(reader);
+      }
+    }
+    
+    // perhaps commit when we are done
+    RequestHandlerUtils.handleCommit(req, rsp, false);
+  }
+    
+  /**
+   * @since solr 1.2
+   */
+  NamedList<Object> processUpdate( SolrQueryRequest req, SolrCore core, XMLStreamReader parser)
+    throws XMLStreamException, IOException, FactoryConfigurationError,
+          InstantiationException, IllegalAccessException,
+          TransformerConfigurationException 
+  {
+    UpdateRequestProcessor processor = processorFactory.getInstance( req );
+    
+    AddUpdateCommand addCmd = null;   
+    while (true) {
+      int event = parser.next();
+      switch (event) {
+        case XMLStreamConstants.END_DOCUMENT:
+          parser.close();
+          return processor.getResponse();
+
+        case XMLStreamConstants.START_ELEMENT:
+          String currTag = parser.getLocalName();
+          if (currTag.equals(ADD)) {
+            log.finest("SolrCore.update(add)");
+            
+            addCmd = new AddUpdateCommand();
+            boolean overwrite=true;  // the default
+
+            Boolean overwritePending = null;
+            Boolean overwriteCommitted = null;
+            for (int i=0; i<parser.getAttributeCount(); i++) {
+              String attrName = parser.getAttributeLocalName(i);
+              String attrVal = parser.getAttributeValue(i);
+              if (OVERWRITE.equals(attrName)) {
+                overwrite = StrUtils.parseBoolean(attrVal);
+//              } else if (MODE.equals(attrName)) {
+//                addCmd.mode = SolrPluginUtils.parseAndValidateFieldModes(attrVal,schema);
+              } else if (ALLOW_DUPS.equals(attrName)) {
+                overwrite = !StrUtils.parseBoolean(attrVal);
+              } else if ( OVERWRITE_PENDING.equals(attrName) ) {
+                overwritePending = StrUtils.parseBoolean(attrVal);
+              } else if ( OVERWRITE_COMMITTED.equals(attrName) ) {
+                overwriteCommitted = StrUtils.parseBoolean(attrVal);
+              } else {
+                log.warning("Unknown attribute id in add:" + attrName);
+              }
+            }
+            
+            // check if these flags are set
+            if( overwritePending != null && overwriteCommitted != null ) {
+              if( overwritePending != overwriteCommitted ) {
+                throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, 
+                    "can't have different values for 'overwritePending' and 'overwriteCommitted'" );
+              }
+              overwrite=overwritePending;
+            }
+            addCmd.overwriteCommitted =  overwrite;
+            addCmd.overwritePending   =  overwrite;
+            addCmd.allowDups          = !overwrite;
+          } 
+          else if ("doc".equals(currTag)) {
+            log.finest("adding doc...");
+            SolrInputDocument doc = readDoc( parser );
+            processor.processAdd( addCmd, doc );
+          } 
+          else if ( COMMIT.equals(currTag) || OPTIMIZE.equals(currTag)) {
+            log.finest("parsing " + currTag);
+
+            CommitUpdateCommand cmd = new CommitUpdateCommand(OPTIMIZE.equals(currTag));
+
+            boolean sawWaitSearcher = false, sawWaitFlush = false;
+            for (int i = 0; i < parser.getAttributeCount(); i++) {
+              String attrName = parser.getAttributeLocalName(i);
+              String attrVal = parser.getAttributeValue(i);
+              if (WAIT_FLUSH.equals(attrName)) {
+                cmd.waitFlush = StrUtils.parseBoolean(attrVal);
+                sawWaitFlush = true;
+              } else if (WAIT_SEARCHER.equals(attrName)) {
+                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);
+                sawWaitSearcher = true;
+              } else {
+                log.warning("unexpected attribute commit/@" + attrName);
+              }
+            }
+
+            // If waitFlush is specified and waitSearcher wasn't, then
+            // clear waitSearcher.
+            if (sawWaitFlush && !sawWaitSearcher) {
+              cmd.waitSearcher = false;
+            }
+            processor.processCommit( cmd );
+          } // end commit
+          else if (DELETE.equals(currTag)) {
+            log.finest("parsing delete");
+            processDelete( processor, parser);
+          } // end delete
+          break;
+       }
+    }
+  }
+
+  /**
+   * @since solr 1.3
+   */
+  void processDelete(UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException 
+  {
+    // Parse the command
+    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand();
+    deleteCmd.fromPending = true;
+    deleteCmd.fromCommitted = true;
+    for (int i = 0; i < parser.getAttributeCount(); i++) {
+      String attrName = parser.getAttributeLocalName(i);
+      String attrVal = parser.getAttributeValue(i);
+      if ("fromPending".equals(attrName)) {
+        deleteCmd.fromPending = StrUtils.parseBoolean(attrVal);
+      } else if ("fromCommitted".equals(attrName)) {
+        deleteCmd.fromCommitted = StrUtils.parseBoolean(attrVal);
+      } else {
+        log.warning("unexpected attribute delete/@" + attrName);
+      }
+    }
+    
+    String val = null;
+    String mode = null;
+    while (true) {
+      int event = parser.next();
+      switch (event) {
+      case XMLStreamConstants.START_ELEMENT:
+        mode = parser.getLocalName();
+        if (!("id".equals(mode) || "query".equals(mode))) {
+          log.warning("unexpected XML tag /delete/" + mode);
+          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, 
+              "unexpected XML tag /delete/" + mode);
+        }
+        break;
+        
+      case XMLStreamConstants.END_ELEMENT:
+        String currTag = parser.getLocalName();
+        if ("id".equals(currTag)) {
+          deleteCmd.id = val;
+        } else if ("query".equals(currTag)) {
+          deleteCmd.query = val;
+        } else {
+          log.warning("unexpected XML tag /delete/" + currTag);
+          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, 
+              "unexpected XML tag /delete/" + currTag);
+        }
+        processor.processDelete( deleteCmd );
+        return;
+        
+      case XMLStreamConstants.CHARACTERS:
+        val = parser.getText();
+        break;
+      }
+    }
+  }
+
+  /**
+   * Given the input stream, read a document
+   * 
+   * @since solr 1.3
+   */
+  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {
+    SolrInputDocument doc = new SolrInputDocument();
+    
+    String attrName = "";
+    for (int i = 0; i < parser.getAttributeCount(); i++) {
+      attrName = parser.getAttributeLocalName(i);
+      if ("boost".equals(attrName)) {
+        doc.setBoost( null, Float.parseFloat(parser.getAttributeValue(i)) );
+      } else {
+        log.warning("Unknown attribute doc/@" + attrName);
+      }
+    }
+    
+    StringBuilder text = new StringBuilder();
+    String name = null;
+    Float boost = null;
+    boolean isNull = false;
+    while (true) {
+      int event = parser.next();
+      switch (event) {
+      // Add everything to the text
+      case XMLStreamConstants.SPACE:
+      case XMLStreamConstants.CDATA:
+      case XMLStreamConstants.CHARACTERS:
+        text.append( parser.getText() );
+        break;
+        
+      case XMLStreamConstants.END_ELEMENT:
+        if ("doc".equals(parser.getLocalName())) {
+          return doc;
+        } 
+        else if ("field".equals(parser.getLocalName())) {
+          if (!isNull) {
+            if(boost != null) {
+              // The lucene API and solr XML field specification make it possible to set boosts
+              // on multi-value fields even though lucene indexing does not support this.
+              // To keep behavior consistent with what happens in the lucene index, we accumulate
+              // the product of all boosts specified for this field.
+              Float old = doc.getBoost( name );
+              if( old != null ) {
+                doc.setBoost( name, boost*old );
+              }
+              else {
+                doc.setBoost( name, boost );
+              }
+            }
+            doc.addField(name, text.toString() );
+          }
+        }
+        break;
+        
+      case XMLStreamConstants.START_ELEMENT:
+        text.setLength(0);
+        String localName = parser.getLocalName();
+        if (!"field".equals(localName)) {
+          log.warning("unexpected XML tag doc/" + localName);
+          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, 
+              "unexpected XML tag doc/" + localName);
+        }
+        boost = null;
+        String attrVal = "";
+        for (int i = 0; i < parser.getAttributeCount(); i++) {
+          attrName = parser.getAttributeLocalName(i);
+          attrVal = parser.getAttributeValue(i);
+          if ("name".equals(attrName)) {
+            name = attrVal;
+          } else if ("boost".equals(attrName)) {
+            boost = Float.parseFloat(attrVal);
+          } else if ("null".equals(attrName)) {
+            isNull = StrUtils.parseBoolean(attrVal);
+          } else {
+            log.warning("Unknown attribute doc/field/@" + attrName);
+          }
+        }
+        break;
+      }
+    }
+  }
+
+  /**
+   * @since solr 1.2
+   */
+  public NamedList<Object> update( SolrQueryRequest req, SolrCore core, Reader reader) throws Exception {
+    XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);
+    return processUpdate( req, core, parser);
+  }
+
+  /**
+   * A Convenience method for getting back a simple XML string indicating
+   * success or failure from an XML formated Update (from the Reader)
+   * 
+   * @since solr 1.2
+   */
+  @Deprecated
+  public void doLegacyUpdate(Reader input, Writer output) {
+    try {
+      SolrCore core = SolrCore.getSolrCore();
+      SolrParams params = new MapSolrParams( new HashMap<String, String>() );
+      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};
+      this.update( req, SolrCore.getSolrCore(), input);
+      output.write("<result status=\"0\"></result>");
+    } 
+    catch (Exception ex) {
+      try {
+        XML.writeXML(output, "result", SolrException.toStr(ex), "status", "1");
+      } catch (Exception ee) {
+        log.severe("Error writing to output stream: " + ee);
+      }
+    }
+  }
+  
+  //////////////////////// SolrInfoMBeans methods //////////////////////
+
+  @Override
+  public String getDescription() {
+    return "Add documents with XML";
+  }
+
+  @Override
+  public String getVersion() {
+    return "$Revision$";
+  }
+
+  @Override
+  public String getSourceId() {
+    return "$Id$";
+  }
+
+  @Override
+  public String getSource() {
+    return "$URL$";
+  }
+}
+
+
+
diff --git a/src/test/org/apache/solr/handler/TestStaxUpdateHandler1.java b/src/test/org/apache/solr/handler/TestStaxUpdateHandler1.java
deleted file mode 100644
index aba0109..0000000
--- a/src/test/org/apache/solr/handler/TestStaxUpdateHandler1.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package org.apache.solr.handler;
-
-import org.apache.solr.BasicFunctionalityTest;
-
-/**
- * Temporary test to duplicate behavior for the StaxUpdateRequestHandler
- * 
- * When the XmlUpdateRequestHandler is replaced, this should go away
- */
-public class TestStaxUpdateHandler1 extends BasicFunctionalityTest 
-{
-  @Override
-  public void setUp() throws Exception {
-    super.setUp();
-
-    h.updater = new StaxUpdateRequestHandler();
-    h.updater.init( null );
-  }
-}
diff --git a/src/test/org/apache/solr/handler/TestStaxUpdateHandler2.java b/src/test/org/apache/solr/handler/TestStaxUpdateHandler2.java
deleted file mode 100644
index 7a10c55..0000000
--- a/src/test/org/apache/solr/handler/TestStaxUpdateHandler2.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package org.apache.solr.handler;
-
-import org.apache.solr.ConvertedLegacyTest;
-
-/**
- * Temporary test to duplicate behavior for the StaxUpdateRequestHandler
- * 
- * When the XmlUpdateRequestHandler is replaced, this should go away
- */
-public class TestStaxUpdateHandler2 extends ConvertedLegacyTest 
-{
-  @Override
-  public void setUp() throws Exception {
-    super.setUp();
-
-    h.updater = new StaxUpdateRequestHandler();
-    h.updater.init( null );
-  }
-}
diff --git a/src/test/org/apache/solr/handler/TestStaxUpdateHandler3.java b/src/test/org/apache/solr/handler/TestStaxUpdateHandler3.java
deleted file mode 100644
index 1f50c16..0000000
--- a/src/test/org/apache/solr/handler/TestStaxUpdateHandler3.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package org.apache.solr.handler;
-
-import org.apache.solr.DisMaxRequestHandlerTest;
-
-/**
- * Temporary test to duplicate behavior for the StaxUpdateRequestHandler
- * 
- * When the XmlUpdateRequestHandler is replaced, this should go away
- */
-public class TestStaxUpdateHandler3 extends DisMaxRequestHandlerTest 
-{
-  @Override
-  public void setUp() throws Exception {
-    super.setUp();
-
-    h.updater = new StaxUpdateRequestHandler();
-    h.updater.init( null );
-  }
-}
diff --git a/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest.java b/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest.java
index c1bcfc2..e362b91 100644
--- a/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest.java
+++ b/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest.java
@@ -15,7 +15,7 @@ import org.apache.solr.common.SolrInputDocument;
 public class XmlUpdateRequestHandlerTest extends TestCase 
 {
   private XMLInputFactory inputFactory = BaseXMLInputFactory.newInstance();
-  protected StaxUpdateRequestHandler handler = new StaxUpdateRequestHandler();
+  protected XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();
 
   @Override 
   public void setUp() throws Exception {

