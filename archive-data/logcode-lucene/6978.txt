GitDiffStart: cae15ce7b600c5e4c793198d80a438684cb54d43 | Mon Feb 17 22:17:37 2014 +0000
diff --git a/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java b/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java
index 3f46dec..9104687 100644
--- a/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java
@@ -20,6 +20,8 @@ package org.apache.solr.cloud;
 import java.net.ConnectException;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Set;
+import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apache.http.client.HttpClient;
 import org.apache.lucene.util.LuceneTestCase.Slow;
@@ -140,7 +142,8 @@ public class ChaosMonkeyNothingIsSafeTest extends AbstractFullDistribZkTestBase
         searchThread.start();
       }
       
-      // TODO: only do this sometimes so that we can sometimes compare against control
+      // TODO: we only do this sometimes so that we can sometimes compare against control,
+      // it's currently hard to know what requests failed when using ConcurrentSolrUpdateServer
       boolean runFullThrottle = random().nextBoolean();
       if (runFullThrottle) {
         FullThrottleStopableIndexingThread ftIndexThread = new FullThrottleStopableIndexingThread(
@@ -204,7 +207,7 @@ public class ChaosMonkeyNothingIsSafeTest extends AbstractFullDistribZkTestBase
       // we expect full throttle fails, but cloud client should not easily fail
       for (StopableThread indexThread : threads) {
         if (indexThread instanceof StopableIndexingThread && !(indexThread instanceof FullThrottleStopableIndexingThread)) {
-          assertFalse("There were too many update fails - we expect it can happen, but shouldn't easily", ((StopableIndexingThread) indexThread).getFails() > 10);
+          assertFalse("There were too many update fails - we expect it can happen, but shouldn't easily", ((StopableIndexingThread) indexThread).getFailCount() > 10);
         }
       }
       
@@ -261,6 +264,7 @@ public class ChaosMonkeyNothingIsSafeTest extends AbstractFullDistribZkTestBase
     int clientIndex = 0;
     private ConcurrentUpdateSolrServer suss;
     private List<SolrServer> clients;  
+    private AtomicInteger fails = new AtomicInteger();
     
     public FullThrottleStopableIndexingThread(List<SolrServer> clients,
         String id, boolean doDeletes) {
@@ -358,10 +362,20 @@ public class ChaosMonkeyNothingIsSafeTest extends AbstractFullDistribZkTestBase
     }
 
     @Override
-    public int getFails() {
+    public int getFailCount() {
       return fails.get();
     }
     
+    @Override
+    public Set<String> getAddFails() {
+      throw new UnsupportedOperationException();
+    }
+    
+    @Override
+    public Set<String> getDeleteFails() {
+      throw new UnsupportedOperationException();
+    }
+    
   };
   
   
diff --git a/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest.java b/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest.java
index 5975dfa..0be642f 100644
--- a/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest.java
@@ -137,7 +137,7 @@ public class ChaosMonkeySafeLeaderTest extends AbstractFullDistribZkTestBase {
     }
     
     for (StopableIndexingThread indexThread : threads) {
-      assertEquals(0, indexThread.getFails());
+      assertEquals(0, indexThread.getFailCount());
     }
     
     // try and wait for any replications and what not to finish...
diff --git a/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java b/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
index 2dc7a31..e3f193b 100644
--- a/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
+++ b/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
@@ -1115,6 +1115,53 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
 
     return sb.toString();
   }
+  
+  boolean checkForLegalDiff(SolrDocumentList a, SolrDocumentList b, String aName, String bName, Set<String> addFails, Set<String> deleteFails) {
+    // System.err.println("######"+aName+ ": " + toStr(a,10));
+    //  System.err.println("######"+bName+ ": " + toStr(b,10));
+    //System.err.println("###### sizes=" + a.size() + "," + b.size());
+    boolean legal = true;
+    Set<SolrDocument> setA = new HashSet<SolrDocument>();
+    for (SolrDocument sdoc : a) {
+      setA.add(sdoc);
+    }
+
+    Set<SolrDocument> setB = new HashSet<SolrDocument>();
+    for (SolrDocument sdoc : b) {
+      setB.add(sdoc);
+    }
+
+    Set<SolrDocument> onlyInA = new HashSet<SolrDocument>(setA);
+    onlyInA.removeAll(setB);
+    Set<SolrDocument> onlyInB = new HashSet<SolrDocument>(setB);
+    onlyInB.removeAll(setA);
+
+    if (onlyInA.size() > 0) {
+      for (SolrDocument doc : onlyInA) {
+        if (!addFails.contains(doc.getFirstValue("id"))) {
+          legal = false;
+        } else {
+          System.err.println("###### Only in " + aName + ": " + onlyInA
+              + ", but this is expected because we found an add fail for "
+              + doc.getFirstValue("id"));
+        }
+      }
+      
+    }
+    if (onlyInB.size() > 0) {
+      for (SolrDocument doc : onlyInB) {
+        if (!deleteFails.contains(doc.getFirstValue("id"))) {
+          legal = false;
+        } else {
+          System.err.println("###### Only in " + bName + ": " + onlyInB
+              + ", but this is expected because we found a delete fail for "
+              + doc.getFirstValue("id"));
+        }
+      }
+    }
+    
+    return legal;
+  }
 
   Set<Map> showDiff(SolrDocumentList a, SolrDocumentList b, String aName, String bName) {
     System.err.println("######"+aName+ ": " + toStr(a,10));
@@ -1159,6 +1206,14 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
    */
   protected void checkShardConsistency(boolean checkVsControl, boolean verbose)
       throws Exception {
+    checkShardConsistency(checkVsControl, verbose, null, null);
+  }
+  
+  /* Checks shard consistency and optionally checks against the control shard.
+   * The test will be failed if differences are found.
+   */
+  protected void checkShardConsistency(boolean checkVsControl, boolean verbose, Set<String> addFails, Set<String> deleteFails)
+      throws Exception {
 
     updateMappingsFromZk(jettys, clients, true);
     
@@ -1185,9 +1240,7 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
     SolrDocumentList cloudDocList = cloudClient.query(q).getResults();
     long cloudClientDocs = cloudDocList.getNumFound();
 
-
-
-
+    
     // now check that the right # are on each shard
     theShards = shardToJetty.keySet();
     int cnt = 0;
@@ -1225,14 +1278,21 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
       String msg = "document count mismatch.  control=" + controlDocs + " sum(shards)="+ cnt + " cloudClient="+cloudClientDocs;
       log.error(msg);
 
-      compareResults(controlDocs, cloudClientDocs);
-
-      fail(msg);
+      boolean shouldFail = compareResults(controlDocs, cloudClientDocs, addFails, deleteFails);
+      if (shouldFail) {
+        fail(msg);
+      }
     }
   }
 
-  protected void compareResults(long controlDocs, long cloudClientDocs)
+  protected boolean compareResults(long controlDocs, long cloudClientDocs)
+      throws SolrServerException {
+    return compareResults(controlDocs, cloudClientDocs, null, null);
+  }
+  
+  protected boolean compareResults(long controlDocs, long cloudClientDocs, Set<String> addFails, Set<String> deleteFails)
       throws SolrServerException {
+    boolean shouldFail = false;
     SolrParams q;
     SolrDocumentList controlDocList;
     SolrDocumentList cloudDocList;
@@ -1248,7 +1308,16 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
       log.error("Something changed! cloudClient now " + cloudDocList.getNumFound());
     };
 
-    Set<Map> differences = showDiff(controlDocList, cloudDocList,"controlDocList","cloudDocList");
+    if (addFails != null || deleteFails != null) {
+      boolean legal = checkForLegalDiff(controlDocList, cloudDocList,
+          "controlDocList", "cloudDocList", addFails, deleteFails);
+      if (legal) {
+        return false;
+      }
+    }
+    
+    Set<Map> differences = showDiff(controlDocList, cloudDocList,
+        "controlDocList", "cloudDocList");
 
     // get versions for the mismatched ids
     boolean foundId = false;
@@ -1271,6 +1340,8 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
       
       log.error("controlClient :" + a + "\n\tcloudClient :" + b);
     }
+    
+    return shouldFail;
   }
   
   protected SolrServer getClient(String nodeName) {
@@ -1368,7 +1439,8 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
     private volatile boolean stop = false;
     protected final String id;
     protected final List<String> deletes = new ArrayList<String>();
-    protected final AtomicInteger fails = new AtomicInteger();
+    protected Set<String> addFails = new HashSet<String>();
+    protected Set<String> deleteFails = new HashSet<String>();
     protected boolean doDeletes;
     private int numCycles;
     
@@ -1419,7 +1491,7 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
               System.err.println("ROOT CAUSE:");
               ((SolrServerException) e).getRootCause().printStackTrace();
             }
-            fails.incrementAndGet();
+            deleteFails.add(id);
           }
         }
         
@@ -1435,7 +1507,7 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
             System.err.println("ROOT CAUSE:");
             ((SolrServerException) e).getRootCause().printStackTrace();
           }
-          fails.incrementAndGet();
+          addFails.add(id);
         }
         
         if (!addFailed && doDeletes && random().nextBoolean()) {
@@ -1449,25 +1521,32 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
         }
       }
       
-      System.err.println("added docs:" + numAdds + " with " + fails + " fails"
+      System.err.println("added docs:" + numAdds + " with " + (addFails.size() + deleteFails.size()) + " fails"
           + " deletes:" + numDeletes);
     }
     
     @Override
     public void safeStop() {
-      System.out.println("safe stop:");
       stop = true;
     }
     
-    public int getFails() {
-      return fails.get();
+    public Set<String> getAddFails() {
+      return addFails;
+    }
+    
+    public Set<String> getDeleteFails() {
+      return deleteFails;
+    }
+    
+    public int getFailCount() {
+      return addFails.size() + deleteFails.size();
     }
     
   };
   
   class StopableSearchThread extends StopableThread {
     private volatile boolean stop = false;
-    protected final AtomicInteger fails = new AtomicInteger();
+    protected final AtomicInteger queryFails = new AtomicInteger();
     private String[] QUERIES = new String[] {"to come","their country","aid","co*"};
     
     public StopableSearchThread() {
@@ -1492,7 +1571,7 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
             System.err.println("ROOT CAUSE:");
             ((SolrServerException) e).getRootCause().printStackTrace();
           }
-          fails.incrementAndGet();
+          queryFails.incrementAndGet();
         }
         try {
           Thread.sleep(random.nextInt(4000) + 300);
@@ -1501,7 +1580,7 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
         }
       }
       
-      System.err.println("num searches done:" + numSearches + " with " + fails + " fails");
+      System.err.println("num searches done:" + numSearches + " with " + queryFails + " fails");
     }
     
     @Override
@@ -1510,7 +1589,7 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
     }
     
     public int getFails() {
-      return fails.get();
+      return queryFails.get();
     }
     
   };

