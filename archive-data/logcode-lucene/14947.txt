GitDiffStart: ae22a35fa710d5fdf6f326edb2d5efedc7ea28d1 | Fri Aug 26 16:58:57 2011 +0000
diff --git a/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java b/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
index 3267da9..db9c6b0 100644
--- a/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
@@ -164,7 +164,7 @@ public abstract class LuceneTestCase extends Assert {
    */
   public static final int RANDOM_MULTIPLIER = Integer.parseInt(System.getProperty("tests.multiplier", "1"));
 
-  private int savedBoolMaxClauseCount;
+  private int savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();
 
   private volatile Thread.UncaughtExceptionHandler savedUncaughtExceptionHandler = null;
 
@@ -648,10 +648,7 @@ public abstract class LuceneTestCase extends Assert {
       if (problem == null) problem = t;
     }
 
-    // if you didn't call super.setUp, you can get a confusing IAE here.
-    if (problem != null) {
-      BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);
-    }
+    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);
 
     // this won't throw any exceptions or fail the test
     // if we change this, then change this logic
diff --git a/lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java b/lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java
index b5ff4f3..ee13089 100644
--- a/lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java
+++ b/lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites.java
@@ -200,7 +200,7 @@ public class TestMultiTermQueryRewrites extends LuceneTestCase {
   }
   
   private void checkMaxClauseLimitation(MultiTermQuery.RewriteMethod method) throws Exception {
-    // default gets restored automatically by LuceneTestCase:
+    int savedMaxClauseCount = BooleanQuery.getMaxClauseCount();
     BooleanQuery.setMaxClauseCount(3);
     
     final MultiTermQuery mtq = TermRangeQuery.newStringRange("data", "2", "7", true, true);
@@ -212,16 +212,22 @@ public class TestMultiTermQueryRewrites extends LuceneTestCase {
       //  Maybe remove this assert in later versions, when internal API changes:
       assertEquals("Should throw BooleanQuery.TooManyClauses with a stacktrace containing checkMaxClauseCount()",
         "checkMaxClauseCount", e.getStackTrace()[0].getMethodName());
+    } finally {
+      BooleanQuery.setMaxClauseCount(savedMaxClauseCount);
     }
   }
   
   private void checkNoMaxClauseLimitation(MultiTermQuery.RewriteMethod method) throws Exception {
-    // default gets restored automatically by LuceneTestCase:
+    int savedMaxClauseCount = BooleanQuery.getMaxClauseCount();
     BooleanQuery.setMaxClauseCount(3);
     
     final MultiTermQuery mtq = TermRangeQuery.newStringRange("data", "2", "7", true, true);
     mtq.setRewriteMethod(method);
-    multiSearcherDupls.rewrite(mtq);
+    try {
+      multiSearcherDupls.rewrite(mtq);
+    } finally {
+      BooleanQuery.setMaxClauseCount(savedMaxClauseCount);
+    }
   }
   
   public void testMaxClauseLimitations() throws Exception {

