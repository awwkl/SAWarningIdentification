GitDiffStart: e4b5a7d907d84150cb882726bc928d5753ad892d | Wed Oct 10 13:42:56 2012 +0000
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat.java b/lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat.java
index 28e4cad..bcd8480 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat.java
@@ -40,7 +40,7 @@ import org.apache.lucene.store.IOContext;
  */
 public class CompressingStoredFieldsFormat extends StoredFieldsFormat {
 
-  private final CompressingStoredFieldsIndex storedFieldsIndexFormat;
+  private final CompressingStoredFieldsIndex storedFieldsIndex;
   private final CompressionMode compressionMode;
   private final int chunkSize;
 
@@ -63,24 +63,24 @@ public class CompressingStoredFieldsFormat extends StoredFieldsFormat {
    * loading a little slower (depending on the size of your OS cache compared
    * to the size of your index).
    * <p>
-   * The <code>storedFieldsIndexFormat</code> parameter allows you to choose
-   * bettwen several fields index formats that offer various trade-offs between
+   * The <code>storedFieldsIndex</code> parameter allows you to choose between
+   * several fields index implementations that offer various trade-offs between
    * memory usage and speed.
    *
    * @param compressionMode the {@link CompressionMode} to use
    * @param chunkSize the minimum number of bytes of a single chunk of stored documents
-   * @param storedFieldsIndexFormat the format to use to load the fields index
+   * @param storedFieldsIndex the fields index impl to use
    * @see CompressionMode
    * @see CompressingStoredFieldsIndex
    */
   public CompressingStoredFieldsFormat(CompressionMode compressionMode, int chunkSize,
-      CompressingStoredFieldsIndex storedFieldsIndexFormat) {
+      CompressingStoredFieldsIndex storedFieldsIndex) {
     this.compressionMode = compressionMode;
     if (chunkSize < 1) {
       throw new IllegalArgumentException("chunkSize must be >= 1");
     }
     this.chunkSize = chunkSize;
-    this.storedFieldsIndexFormat = storedFieldsIndexFormat;
+    this.storedFieldsIndex = storedFieldsIndex;
   }
 
   /**
@@ -115,7 +115,13 @@ public class CompressingStoredFieldsFormat extends StoredFieldsFormat {
   public StoredFieldsWriter fieldsWriter(Directory directory, SegmentInfo si,
       IOContext context) throws IOException {
     return new CompressingStoredFieldsWriter(directory, si, context,
-        compressionMode, chunkSize, storedFieldsIndexFormat);
+        compressionMode, chunkSize, storedFieldsIndex);
+  }
+
+  @Override
+  public String toString() {
+    return getClass().getSimpleName() + "(compressionMode=" + compressionMode
+        + ", chunkSize=" + chunkSize + ", storedFieldsIndex=" + storedFieldsIndex + ")";
   }
 
 }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec.java
index 90638c0..91f6055 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec.java
@@ -61,4 +61,9 @@ public class CompressingCodec extends FilterCodec {
   public StoredFieldsFormat storedFieldsFormat() {
     return storedFieldsFormat;
   }
+
+  @Override
+  public String toString() {
+    return getName() + "(storedFieldsFormat=" + storedFieldsFormat + ")";
+  }
 }

