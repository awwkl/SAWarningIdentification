GitDiffStart: bfde3257dc3c29c43b68a2ca7672abc68ae46f8d | Mon Nov 21 21:35:24 2005 +0000
diff --git a/contrib/analyzers/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java b/contrib/analyzers/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
deleted file mode 100644
index a41a603..0000000
--- a/contrib/analyzers/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
+++ /dev/null
@@ -1,168 +0,0 @@
-package org.apache.lucene.analysis;
-
-/**
- * Copyright 2005 The Apache Software Foundation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * A filter that replaces accented characters in the ISO Latin 1 character set by
- * their unaccented equivalent. The case will not be altered.
- * <p>
- * For instance, '&agrave;' will be replaced by 'a'.
- * <p>
- */
-public class ISOLatin1AccentFilter extends TokenFilter {
-	public ISOLatin1AccentFilter(TokenStream input) {
-		super(input);
-	}
-
-	public final Token next() throws java.io.IOException {
-		final Token t = input.next();
-		if (t == null)
-			return null;
-		// Return a token with filtered characters.
-		return new Token(removeAccents(t.termText()), t.startOffset(), t.endOffset(), t.type());
-	}
-
-	/**
-	 * To replace accented characters in a String by unaccented equivalents.
-	 */
-	public final static String removeAccents(String input) {
-		final StringBuffer output = new StringBuffer();
-		for (int i = 0; i < input.length(); i++) {
-			switch (input.charAt(i)) {
-				case '\u00C0' : // ?
-				case '\u00C1' : // ?
-				case '\u00C2' : // ?
-				case '\u00C3' : // ?
-				case '\u00C4' : // ?
-				case '\u00C5' : // ?
-					output.append("A");
-					break;
-				case '\u00C6' : // ?
-					output.append("AE");
-					break;
-				case '\u00C7' : // ?
-					output.append("C");
-					break;
-				case '\u00C8' : // ?
-				case '\u00C9' : // ?
-				case '\u00CA' : // ?
-				case '\u00CB' : // ?
-					output.append("E");
-					break;
-				case '\u00CC' : // ?
-				case '\u00CD' : // ?
-				case '\u00CE' : // ?
-				case '\u00CF' : // ?
-					output.append("I");
-					break;
-				case '\u00D0' : // ?
-					output.append("D");
-					break;
-				case '\u00D1' : // ?
-					output.append("N");
-					break;
-				case '\u00D2' : // ?
-				case '\u00D3' : // ?
-				case '\u00D4' : // ?
-				case '\u00D5' : // ?
-				case '\u00D6' : // ?
-				case '\u00D8' : // ?
-					output.append("O");
-					break;
-				case '\u0152' : // ?
-					output.append("OE");
-					break;
-				case '\u00DE' : // ?
-					output.append("TH");
-					break;
-				case '\u00D9' : // ?
-				case '\u00DA' : // ?
-				case '\u00DB' : // ?
-				case '\u00DC' : // ?
-					output.append("U");
-					break;
-				case '\u00DD' : // ?
-				case '\u0178' : // Ÿ
-					output.append("Y");
-					break;
-				case '\u00E0' : // ?
-				case '\u00E1' : // á
-				case '\u00E2' : // â
-				case '\u00E3' : // ã
-				case '\u00E4' : // ä
-				case '\u00E5' : // å
-					output.append("a");
-					break;
-				case '\u00E6' : // æ
-					output.append("ae");
-					break;
-				case '\u00E7' : // ç
-					output.append("c");
-					break;
-				case '\u00E8' : // è
-				case '\u00E9' : // é
-				case '\u00EA' : // ê
-				case '\u00EB' : // ë
-					output.append("e");
-					break;
-				case '\u00EC' : // ì
-				case '\u00ED' : // í
-				case '\u00EE' : // î
-				case '\u00EF' : // ï
-					output.append("i");
-					break;
-				case '\u00F0' : // ð
-					output.append("d");
-					break;
-				case '\u00F1' : // ñ
-					output.append("n");
-					break;
-				case '\u00F2' : // ò
-				case '\u00F3' : // ó
-				case '\u00F4' : // ô
-				case '\u00F5' : // õ
-				case '\u00F6' : // ö
-				case '\u00F8' : // ø
-					output.append("o");
-					break;
-				case '\u0153' : // ?
-					output.append("oe");
-					break;
-				case '\u00DF' : // ?
-					output.append("ss");
-					break;
-				case '\u00FE' : // þ
-					output.append("th");
-					break;
-				case '\u00F9' : // ù
-				case '\u00FA' : // ú
-				case '\u00FB' : // û
-				case '\u00FC' : // ü
-					output.append("u");
-					break;
-				case '\u00FD' : // ý
-				case '\u00FF' : // ÿ
-					output.append("y");
-					break;
-				default :
-					output.append(input.charAt(i));
-					break;
-			}
-		}
-		return output.toString();
-	}
-}
\ No newline at end of file
diff --git a/contrib/analyzers/src/java/org/apache/lucene/analysis/KeywordAnalyzer.java b/contrib/analyzers/src/java/org/apache/lucene/analysis/KeywordAnalyzer.java
deleted file mode 100644
index add294c..0000000
--- a/contrib/analyzers/src/java/org/apache/lucene/analysis/KeywordAnalyzer.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package org.apache.lucene.analysis;
-
-/**
- * Copyright 2005 The Apache Software Foundation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.Reader;
-
-/**
- * "Tokenizes" the entire stream as a single token. This is useful
- * for data like zip codes, ids, and some product names.
- */
-public class KeywordAnalyzer extends Analyzer {
-  public TokenStream tokenStream(String fieldName,
-                                 final Reader reader) {
-    return new KeywordTokenizer(reader);
-  }
-}
\ No newline at end of file
diff --git a/contrib/analyzers/src/java/org/apache/lucene/analysis/KeywordTokenizer.java b/contrib/analyzers/src/java/org/apache/lucene/analysis/KeywordTokenizer.java
deleted file mode 100644
index ea3d409..0000000
--- a/contrib/analyzers/src/java/org/apache/lucene/analysis/KeywordTokenizer.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package org.apache.lucene.analysis;
-
-/**
- * Copyright 2004-2005 The Apache Software Foundation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-import java.io.Reader;
-
-/**
- * Emits the entire input as a single token.
- */
-public class KeywordTokenizer extends Tokenizer {
-  private static final int DEFAULT_BUFFER_SIZE=256;
-
-  private boolean done;
-  private final char[] buffer;
-
-  public KeywordTokenizer(Reader input) {
-    this(input, DEFAULT_BUFFER_SIZE);
-  }
-
-  public KeywordTokenizer(Reader input, int bufferSize) {
-    super(input);
-    this.buffer=new char[bufferSize];
-    this.done=false;
-  }
-
-  public Token next() throws IOException {
-    if (!done) {
-      done = true;
-      StringBuffer buffer = new StringBuffer();
-      int length;
-      while (true) {
-        length = input.read(this.buffer);
-        if (length == -1) break;
-
-        buffer.append(this.buffer, 0, length);
-      }
-      String text = buffer.toString();
-      return new Token(text, 0, text.length());
-    }
-    return null;
-  }
-}
diff --git a/contrib/analyzers/src/java/org/apache/lucene/analysis/LengthFilter.java b/contrib/analyzers/src/java/org/apache/lucene/analysis/LengthFilter.java
deleted file mode 100644
index ad88d1f..0000000
--- a/contrib/analyzers/src/java/org/apache/lucene/analysis/LengthFilter.java
+++ /dev/null
@@ -1,60 +0,0 @@
-package org.apache.lucene.analysis;
-
-/**
- * Copyright 2004 The Apache Software Foundation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-
-/**
- * Removes words that are too long and too short from the stream.
- *
- * @author David Spencer
- * @version $Id$
- */
-public final class LengthFilter extends TokenFilter {
-
-  final int min;
-  final int max;
-
-  /**
-   * Build a filter that removes words that are too long or too
-   * short from the text.
-   */
-  public LengthFilter(TokenStream in, int min, int max)
-  {
-    super(in);
-    this.min = min;
-    this.max =max;
-  }
-
-  /**
-   * Returns the next input Token whose termText() is the right len
-   */
-  public final Token next() throws IOException
-  {
-    // return the first non-stop word found
-    for (Token token = input.next(); token != null; token = input.next())
-    {
-      int len = token.termText().length();
-      if ( len >= min && len <= max) {
-          return token;
-      }
-      // note: else we ignore it but should we index each part of it?
-    }
-    // reached EOS -- return null
-    return null;
-  }
-}
diff --git a/contrib/analyzers/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter.java b/contrib/analyzers/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter.java
deleted file mode 100644
index c0bf422..0000000
--- a/contrib/analyzers/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter.java
+++ /dev/null
@@ -1,84 +0,0 @@
-package org.apache.lucene.analysis;
-
-import junit.framework.TestCase;
-
-import java.io.StringReader;
-
-public class TestISOLatin1AccentFilter extends TestCase {
-  public void testU() throws Exception {
-    TokenStream stream = new WhitespaceTokenizer(new StringReader("Des mot clés ? LA CHA?NE ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? Ÿ ? á â ã ä å æ ç è é ê ë ì í î ï ð ñ ò ó ô õ ö ø ? ? þ ù ú û ü ý ÿ"));
-    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);
-    assertEquals("Des", filter.next().termText());
-    assertEquals("mot", filter.next().termText());
-    assertEquals("cles", filter.next().termText());
-    assertEquals("A", filter.next().termText());
-    assertEquals("LA", filter.next().termText());
-    assertEquals("CHAINE", filter.next().termText());
-    assertEquals("A", filter.next().termText());
-    assertEquals("A", filter.next().termText());
-    assertEquals("A", filter.next().termText());
-    assertEquals("A", filter.next().termText());
-    assertEquals("A", filter.next().termText());
-    assertEquals("A", filter.next().termText());
-    assertEquals("AE", filter.next().termText());
-    assertEquals("C", filter.next().termText());
-    assertEquals("E", filter.next().termText());
-    assertEquals("E", filter.next().termText());
-    assertEquals("E", filter.next().termText());
-    assertEquals("E", filter.next().termText());
-    assertEquals("I", filter.next().termText());
-    assertEquals("I", filter.next().termText());
-    assertEquals("I", filter.next().termText());
-    assertEquals("I", filter.next().termText());
-    assertEquals("D", filter.next().termText());
-    assertEquals("N", filter.next().termText());
-    assertEquals("O", filter.next().termText());
-    assertEquals("O", filter.next().termText());
-    assertEquals("O", filter.next().termText());
-    assertEquals("O", filter.next().termText());
-    assertEquals("O", filter.next().termText());
-    assertEquals("O", filter.next().termText());
-    assertEquals("OE", filter.next().termText());
-    assertEquals("TH", filter.next().termText());
-    assertEquals("U", filter.next().termText());
-    assertEquals("U", filter.next().termText());
-    assertEquals("U", filter.next().termText());
-    assertEquals("U", filter.next().termText());
-    assertEquals("Y", filter.next().termText());
-    assertEquals("Y", filter.next().termText());
-    assertEquals("a", filter.next().termText());
-    assertEquals("a", filter.next().termText());
-    assertEquals("a", filter.next().termText());
-    assertEquals("a", filter.next().termText());
-    assertEquals("a", filter.next().termText());
-    assertEquals("a", filter.next().termText());
-    assertEquals("ae", filter.next().termText());
-    assertEquals("c", filter.next().termText());
-    assertEquals("e", filter.next().termText());
-    assertEquals("e", filter.next().termText());
-    assertEquals("e", filter.next().termText());
-    assertEquals("e", filter.next().termText());
-    assertEquals("i", filter.next().termText());
-    assertEquals("i", filter.next().termText());
-    assertEquals("i", filter.next().termText());
-    assertEquals("i", filter.next().termText());
-    assertEquals("d", filter.next().termText());
-    assertEquals("n", filter.next().termText());
-    assertEquals("o", filter.next().termText());
-    assertEquals("o", filter.next().termText());
-    assertEquals("o", filter.next().termText());
-    assertEquals("o", filter.next().termText());
-    assertEquals("o", filter.next().termText());
-    assertEquals("o", filter.next().termText());
-    assertEquals("oe", filter.next().termText());
-    assertEquals("ss", filter.next().termText());
-    assertEquals("th", filter.next().termText());
-    assertEquals("u", filter.next().termText());
-    assertEquals("u", filter.next().termText());
-    assertEquals("u", filter.next().termText());
-    assertEquals("u", filter.next().termText());
-    assertEquals("y", filter.next().termText());
-    assertEquals("y", filter.next().termText());
-    assertNull(filter.next());
-  }
-}
\ No newline at end of file
diff --git a/contrib/analyzers/src/test/org/apache/lucene/analysis/TestKeywordAnalyzer.java b/contrib/analyzers/src/test/org/apache/lucene/analysis/TestKeywordAnalyzer.java
deleted file mode 100644
index c981042..0000000
--- a/contrib/analyzers/src/test/org/apache/lucene/analysis/TestKeywordAnalyzer.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package org.apache.lucene.analysis;
-
-/**
- * Copyright 2005 The Apache Software Foundation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import junit.framework.TestCase;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.store.RAMDirectory;
-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.Hits;
-import org.apache.lucene.queryParser.QueryParser;
-
-public class TestKeywordAnalyzer extends TestCase {
-  RAMDirectory directory;
-  private IndexSearcher searcher;
-
-  public void setUp() throws Exception {
-    directory = new RAMDirectory();
-    IndexWriter writer = new IndexWriter(directory,
-                                         new SimpleAnalyzer(),
-                                         true);
-
-    Document doc = new Document();
-    doc.add(new Field("partnum", "Q36", Field.Store.YES, Field.Index.UN_TOKENIZED));
-    doc.add(new Field("description", "Illidium Space Modulator", Field.Store.YES, Field.Index.TOKENIZED));
-    writer.addDocument(doc);
-
-    writer.close();
-
-    searcher = new IndexSearcher(directory);
-  }
-
-  public void testPerFieldAnalyzer() throws Exception {
-    PerFieldAnalyzerWrapper analyzer = new PerFieldAnalyzerWrapper(
-                                              new SimpleAnalyzer());
-    analyzer.addAnalyzer("partnum", new KeywordAnalyzer());
-
-    Query query = QueryParser.parse("partnum:Q36 AND SPACE",
-                                    "description",
-                                    analyzer);
-
-    Hits hits = searcher.search(query);
-    assertEquals("Q36 kept as-is",
-              "+partnum:Q36 +space", query.toString("description"));
-    assertEquals("doc found!", 1, hits.length());
-  }
-}
diff --git a/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java b/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
new file mode 100644
index 0000000..a41a603
--- /dev/null
+++ b/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
@@ -0,0 +1,168 @@
+package org.apache.lucene.analysis;
+
+/**
+ * Copyright 2005 The Apache Software Foundation
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * A filter that replaces accented characters in the ISO Latin 1 character set by
+ * their unaccented equivalent. The case will not be altered.
+ * <p>
+ * For instance, '&agrave;' will be replaced by 'a'.
+ * <p>
+ */
+public class ISOLatin1AccentFilter extends TokenFilter {
+	public ISOLatin1AccentFilter(TokenStream input) {
+		super(input);
+	}
+
+	public final Token next() throws java.io.IOException {
+		final Token t = input.next();
+		if (t == null)
+			return null;
+		// Return a token with filtered characters.
+		return new Token(removeAccents(t.termText()), t.startOffset(), t.endOffset(), t.type());
+	}
+
+	/**
+	 * To replace accented characters in a String by unaccented equivalents.
+	 */
+	public final static String removeAccents(String input) {
+		final StringBuffer output = new StringBuffer();
+		for (int i = 0; i < input.length(); i++) {
+			switch (input.charAt(i)) {
+				case '\u00C0' : // ?
+				case '\u00C1' : // ?
+				case '\u00C2' : // ?
+				case '\u00C3' : // ?
+				case '\u00C4' : // ?
+				case '\u00C5' : // ?
+					output.append("A");
+					break;
+				case '\u00C6' : // ?
+					output.append("AE");
+					break;
+				case '\u00C7' : // ?
+					output.append("C");
+					break;
+				case '\u00C8' : // ?
+				case '\u00C9' : // ?
+				case '\u00CA' : // ?
+				case '\u00CB' : // ?
+					output.append("E");
+					break;
+				case '\u00CC' : // ?
+				case '\u00CD' : // ?
+				case '\u00CE' : // ?
+				case '\u00CF' : // ?
+					output.append("I");
+					break;
+				case '\u00D0' : // ?
+					output.append("D");
+					break;
+				case '\u00D1' : // ?
+					output.append("N");
+					break;
+				case '\u00D2' : // ?
+				case '\u00D3' : // ?
+				case '\u00D4' : // ?
+				case '\u00D5' : // ?
+				case '\u00D6' : // ?
+				case '\u00D8' : // ?
+					output.append("O");
+					break;
+				case '\u0152' : // ?
+					output.append("OE");
+					break;
+				case '\u00DE' : // ?
+					output.append("TH");
+					break;
+				case '\u00D9' : // ?
+				case '\u00DA' : // ?
+				case '\u00DB' : // ?
+				case '\u00DC' : // ?
+					output.append("U");
+					break;
+				case '\u00DD' : // ?
+				case '\u0178' : // Ÿ
+					output.append("Y");
+					break;
+				case '\u00E0' : // ?
+				case '\u00E1' : // á
+				case '\u00E2' : // â
+				case '\u00E3' : // ã
+				case '\u00E4' : // ä
+				case '\u00E5' : // å
+					output.append("a");
+					break;
+				case '\u00E6' : // æ
+					output.append("ae");
+					break;
+				case '\u00E7' : // ç
+					output.append("c");
+					break;
+				case '\u00E8' : // è
+				case '\u00E9' : // é
+				case '\u00EA' : // ê
+				case '\u00EB' : // ë
+					output.append("e");
+					break;
+				case '\u00EC' : // ì
+				case '\u00ED' : // í
+				case '\u00EE' : // î
+				case '\u00EF' : // ï
+					output.append("i");
+					break;
+				case '\u00F0' : // ð
+					output.append("d");
+					break;
+				case '\u00F1' : // ñ
+					output.append("n");
+					break;
+				case '\u00F2' : // ò
+				case '\u00F3' : // ó
+				case '\u00F4' : // ô
+				case '\u00F5' : // õ
+				case '\u00F6' : // ö
+				case '\u00F8' : // ø
+					output.append("o");
+					break;
+				case '\u0153' : // ?
+					output.append("oe");
+					break;
+				case '\u00DF' : // ?
+					output.append("ss");
+					break;
+				case '\u00FE' : // þ
+					output.append("th");
+					break;
+				case '\u00F9' : // ù
+				case '\u00FA' : // ú
+				case '\u00FB' : // û
+				case '\u00FC' : // ü
+					output.append("u");
+					break;
+				case '\u00FD' : // ý
+				case '\u00FF' : // ÿ
+					output.append("y");
+					break;
+				default :
+					output.append(input.charAt(i));
+					break;
+			}
+		}
+		return output.toString();
+	}
+}
\ No newline at end of file
diff --git a/src/java/org/apache/lucene/analysis/KeywordAnalyzer.java b/src/java/org/apache/lucene/analysis/KeywordAnalyzer.java
new file mode 100644
index 0000000..add294c
--- /dev/null
+++ b/src/java/org/apache/lucene/analysis/KeywordAnalyzer.java
@@ -0,0 +1,30 @@
+package org.apache.lucene.analysis;
+
+/**
+ * Copyright 2005 The Apache Software Foundation
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.Reader;
+
+/**
+ * "Tokenizes" the entire stream as a single token. This is useful
+ * for data like zip codes, ids, and some product names.
+ */
+public class KeywordAnalyzer extends Analyzer {
+  public TokenStream tokenStream(String fieldName,
+                                 final Reader reader) {
+    return new KeywordTokenizer(reader);
+  }
+}
\ No newline at end of file
diff --git a/src/java/org/apache/lucene/analysis/KeywordTokenizer.java b/src/java/org/apache/lucene/analysis/KeywordTokenizer.java
new file mode 100644
index 0000000..ea3d409
--- /dev/null
+++ b/src/java/org/apache/lucene/analysis/KeywordTokenizer.java
@@ -0,0 +1,57 @@
+package org.apache.lucene.analysis;
+
+/**
+ * Copyright 2004-2005 The Apache Software Foundation
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.io.Reader;
+
+/**
+ * Emits the entire input as a single token.
+ */
+public class KeywordTokenizer extends Tokenizer {
+  private static final int DEFAULT_BUFFER_SIZE=256;
+
+  private boolean done;
+  private final char[] buffer;
+
+  public KeywordTokenizer(Reader input) {
+    this(input, DEFAULT_BUFFER_SIZE);
+  }
+
+  public KeywordTokenizer(Reader input, int bufferSize) {
+    super(input);
+    this.buffer=new char[bufferSize];
+    this.done=false;
+  }
+
+  public Token next() throws IOException {
+    if (!done) {
+      done = true;
+      StringBuffer buffer = new StringBuffer();
+      int length;
+      while (true) {
+        length = input.read(this.buffer);
+        if (length == -1) break;
+
+        buffer.append(this.buffer, 0, length);
+      }
+      String text = buffer.toString();
+      return new Token(text, 0, text.length());
+    }
+    return null;
+  }
+}
diff --git a/src/java/org/apache/lucene/analysis/LengthFilter.java b/src/java/org/apache/lucene/analysis/LengthFilter.java
new file mode 100644
index 0000000..ad88d1f
--- /dev/null
+++ b/src/java/org/apache/lucene/analysis/LengthFilter.java
@@ -0,0 +1,60 @@
+package org.apache.lucene.analysis;
+
+/**
+ * Copyright 2004 The Apache Software Foundation
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+/**
+ * Removes words that are too long and too short from the stream.
+ *
+ * @author David Spencer
+ * @version $Id$
+ */
+public final class LengthFilter extends TokenFilter {
+
+  final int min;
+  final int max;
+
+  /**
+   * Build a filter that removes words that are too long or too
+   * short from the text.
+   */
+  public LengthFilter(TokenStream in, int min, int max)
+  {
+    super(in);
+    this.min = min;
+    this.max =max;
+  }
+
+  /**
+   * Returns the next input Token whose termText() is the right len
+   */
+  public final Token next() throws IOException
+  {
+    // return the first non-stop word found
+    for (Token token = input.next(); token != null; token = input.next())
+    {
+      int len = token.termText().length();
+      if ( len >= min && len <= max) {
+          return token;
+      }
+      // note: else we ignore it but should we index each part of it?
+    }
+    // reached EOS -- return null
+    return null;
+  }
+}
diff --git a/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter.java b/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter.java
new file mode 100644
index 0000000..c0bf422
--- /dev/null
+++ b/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter.java
@@ -0,0 +1,84 @@
+package org.apache.lucene.analysis;
+
+import junit.framework.TestCase;
+
+import java.io.StringReader;
+
+public class TestISOLatin1AccentFilter extends TestCase {
+  public void testU() throws Exception {
+    TokenStream stream = new WhitespaceTokenizer(new StringReader("Des mot clés ? LA CHA?NE ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? Ÿ ? á â ã ä å æ ç è é ê ë ì í î ï ð ñ ò ó ô õ ö ø ? ? þ ù ú û ü ý ÿ"));
+    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);
+    assertEquals("Des", filter.next().termText());
+    assertEquals("mot", filter.next().termText());
+    assertEquals("cles", filter.next().termText());
+    assertEquals("A", filter.next().termText());
+    assertEquals("LA", filter.next().termText());
+    assertEquals("CHAINE", filter.next().termText());
+    assertEquals("A", filter.next().termText());
+    assertEquals("A", filter.next().termText());
+    assertEquals("A", filter.next().termText());
+    assertEquals("A", filter.next().termText());
+    assertEquals("A", filter.next().termText());
+    assertEquals("A", filter.next().termText());
+    assertEquals("AE", filter.next().termText());
+    assertEquals("C", filter.next().termText());
+    assertEquals("E", filter.next().termText());
+    assertEquals("E", filter.next().termText());
+    assertEquals("E", filter.next().termText());
+    assertEquals("E", filter.next().termText());
+    assertEquals("I", filter.next().termText());
+    assertEquals("I", filter.next().termText());
+    assertEquals("I", filter.next().termText());
+    assertEquals("I", filter.next().termText());
+    assertEquals("D", filter.next().termText());
+    assertEquals("N", filter.next().termText());
+    assertEquals("O", filter.next().termText());
+    assertEquals("O", filter.next().termText());
+    assertEquals("O", filter.next().termText());
+    assertEquals("O", filter.next().termText());
+    assertEquals("O", filter.next().termText());
+    assertEquals("O", filter.next().termText());
+    assertEquals("OE", filter.next().termText());
+    assertEquals("TH", filter.next().termText());
+    assertEquals("U", filter.next().termText());
+    assertEquals("U", filter.next().termText());
+    assertEquals("U", filter.next().termText());
+    assertEquals("U", filter.next().termText());
+    assertEquals("Y", filter.next().termText());
+    assertEquals("Y", filter.next().termText());
+    assertEquals("a", filter.next().termText());
+    assertEquals("a", filter.next().termText());
+    assertEquals("a", filter.next().termText());
+    assertEquals("a", filter.next().termText());
+    assertEquals("a", filter.next().termText());
+    assertEquals("a", filter.next().termText());
+    assertEquals("ae", filter.next().termText());
+    assertEquals("c", filter.next().termText());
+    assertEquals("e", filter.next().termText());
+    assertEquals("e", filter.next().termText());
+    assertEquals("e", filter.next().termText());
+    assertEquals("e", filter.next().termText());
+    assertEquals("i", filter.next().termText());
+    assertEquals("i", filter.next().termText());
+    assertEquals("i", filter.next().termText());
+    assertEquals("i", filter.next().termText());
+    assertEquals("d", filter.next().termText());
+    assertEquals("n", filter.next().termText());
+    assertEquals("o", filter.next().termText());
+    assertEquals("o", filter.next().termText());
+    assertEquals("o", filter.next().termText());
+    assertEquals("o", filter.next().termText());
+    assertEquals("o", filter.next().termText());
+    assertEquals("o", filter.next().termText());
+    assertEquals("oe", filter.next().termText());
+    assertEquals("ss", filter.next().termText());
+    assertEquals("th", filter.next().termText());
+    assertEquals("u", filter.next().termText());
+    assertEquals("u", filter.next().termText());
+    assertEquals("u", filter.next().termText());
+    assertEquals("u", filter.next().termText());
+    assertEquals("y", filter.next().termText());
+    assertEquals("y", filter.next().termText());
+    assertNull(filter.next());
+  }
+}
\ No newline at end of file
diff --git a/src/test/org/apache/lucene/analysis/TestKeywordAnalyzer.java b/src/test/org/apache/lucene/analysis/TestKeywordAnalyzer.java
new file mode 100644
index 0000000..c981042
--- /dev/null
+++ b/src/test/org/apache/lucene/analysis/TestKeywordAnalyzer.java
@@ -0,0 +1,63 @@
+package org.apache.lucene.analysis;
+
+/**
+ * Copyright 2005 The Apache Software Foundation
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.Hits;
+import org.apache.lucene.queryParser.QueryParser;
+
+public class TestKeywordAnalyzer extends TestCase {
+  RAMDirectory directory;
+  private IndexSearcher searcher;
+
+  public void setUp() throws Exception {
+    directory = new RAMDirectory();
+    IndexWriter writer = new IndexWriter(directory,
+                                         new SimpleAnalyzer(),
+                                         true);
+
+    Document doc = new Document();
+    doc.add(new Field("partnum", "Q36", Field.Store.YES, Field.Index.UN_TOKENIZED));
+    doc.add(new Field("description", "Illidium Space Modulator", Field.Store.YES, Field.Index.TOKENIZED));
+    writer.addDocument(doc);
+
+    writer.close();
+
+    searcher = new IndexSearcher(directory);
+  }
+
+  public void testPerFieldAnalyzer() throws Exception {
+    PerFieldAnalyzerWrapper analyzer = new PerFieldAnalyzerWrapper(
+                                              new SimpleAnalyzer());
+    analyzer.addAnalyzer("partnum", new KeywordAnalyzer());
+
+    Query query = QueryParser.parse("partnum:Q36 AND SPACE",
+                                    "description",
+                                    analyzer);
+
+    Hits hits = searcher.search(query);
+    assertEquals("Q36 kept as-is",
+              "+partnum:Q36 +space", query.toString("description"));
+    assertEquals("doc found!", 1, hits.length());
+  }
+}

