GitDiffStart: 01a72b3b3facc3b4f1a1f1da6503a5014763ab93 | Mon Dec 21 07:11:14 2015 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index d3dabd0..f2f9fea 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -238,6 +238,8 @@ New Features
 * SOLR-8230: JSON Facet API: add "facet-info" into debug section of response when debugQuery=true
   (Michael Sun, yonik)
 
+* SOLR-8428: RuleBasedAuthorizationPlugin adds an 'all' permission (noble)
+
 
 Bug Fixes
 ----------------------
diff --git a/solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin.java b/solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin.java
index 9156bb5..a4ee535 100644
--- a/solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin.java
+++ b/solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin.java
@@ -90,7 +90,7 @@ public class RuleBasedAuthorizationPlugin implements AuthorizationPlugin, Config
   public AuthorizationResponse authorize(AuthorizationContext context) {
     List<AuthorizationContext.CollectionRequest> collectionRequests = context.getCollectionRequests();
     if (context.getRequestType() == AuthorizationContext.RequestType.ADMIN) {
-      MatchStatus flag = checkCollPerm(mapping.get(""), context);
+      MatchStatus flag = checkCollPerm(mapping.get(null), context);
       return flag.rsp;
     }
 
@@ -99,8 +99,8 @@ public class RuleBasedAuthorizationPlugin implements AuthorizationPlugin, Config
       MatchStatus flag = checkCollPerm(mapping.get(collreq.collectionName), context);
       if (flag != MatchStatus.NO_PERMISSIONS_FOUND) return flag.rsp;
     }
-    //check global permissions.
-    MatchStatus flag = checkCollPerm(mapping.get(null), context);
+    //check wildcard (all=*) permissions.
+    MatchStatus flag = checkCollPerm(mapping.get("*"), context);
     return flag.rsp;
   }
 
@@ -212,7 +212,7 @@ public class RuleBasedAuthorizationPlugin implements AuthorizationPlugin, Config
       if("collection".equals(key)){
         //for collection collection: null means a core admin/ collection admin request
         // otherwise it means a request where collection name is ignored
-        return m.containsKey(key) ?  singleton("") : singleton(null);
+        return m.containsKey(key) ? singleton(null) : singleton("*");
       }
       return null;
     }
@@ -469,7 +469,9 @@ public class RuleBasedAuthorizationPlugin implements AuthorizationPlugin, Config
           "      path:['/select', '/get','/browse','/tvrh','/terms','/clustering','/elevate', '/export','/spell','/clustering']}," +
           "    config-edit:{" +
           "      method:POST," +
-          "      path:'/config/*'}}");
+              "      path:'/config/*'}," +
+              "    all:{collection:['*', null]}" +
+              "}");
 
   static {
     ((Map) well_known_permissions.get("collection-admin-edit")).put(Predicate.class.getName(), getCollectionActionPredicate(true));
diff --git a/solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin.java b/solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin.java
index 6a51fb1..52fe742 100644
--- a/solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin.java
+++ b/solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin.java
@@ -24,6 +24,8 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import com.carrotsearch.ant.tasks.junit4.dependencies.com.google.common.collect.ImmutableMap;
+import jdk.nashorn.internal.ir.annotations.Immutable;
 import org.apache.http.auth.BasicUserPrincipal;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.common.params.MapSolrParams;
@@ -159,15 +161,40 @@ public class TestRuleBasedAuthorizationPlugin extends SolrTestCaseJ4 {
         "userPrincipal", "joe")
         , FORBIDDEN);
 
-  }
 
+    Map rules = (Map) Utils.fromJSONString(permissions);
+    ((Map)rules.get("user-role")).put("cio","su");
+    ((List)rules.get("permissions")).add( makeMap("name", "all", "role", "su"));
 
+    checkRules(makeMap("resource", "/replication",
+        "httpMethod", "POST",
+        "userPrincipal", "tim",
+        "collectionRequests", singletonList(new CollectionRequest("mycoll")) )
+        , FORBIDDEN, rules);
+
+    checkRules(makeMap("resource", "/replication",
+        "httpMethod", "POST",
+        "userPrincipal", "cio",
+        "collectionRequests", singletonList(new CollectionRequest("mycoll")) )
+        , STATUS_OK, rules);
+
+    checkRules(makeMap("resource", "/admin/collections",
+        "userPrincipal", "tim",
+        "requestType", AuthorizationContext.RequestType.ADMIN,
+        "collectionRequests", null,
+        "params", new MapSolrParams(singletonMap("action", "CREATE")))
+        , STATUS_OK, rules);
+
+  }
 
   private void checkRules(Map<String, Object> values, int expected) {
+    checkRules(values,expected,(Map) Utils.fromJSONString(permissions));
+  }
 
+  private void checkRules(Map<String, Object> values, int expected, Map<String ,Object> permissions) {
     AuthorizationContext context = new MockAuthorizationContext(values);
     RuleBasedAuthorizationPlugin plugin = new RuleBasedAuthorizationPlugin();
-    plugin.init((Map) Utils.fromJSONString(permissions));
+    plugin.init(permissions);
     AuthorizationResponse authResp = plugin.authorize(context);
     assertEquals(expected, authResp.statusCode);
   }

