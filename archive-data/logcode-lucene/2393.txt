GitDiffStart: 255ff56d4eb98aeddc541ba6e3c21922138d0fb3 | Tue Nov 24 01:25:00 2015 +0000
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java
index 0a5639e..2d7c961 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.java
@@ -17,7 +17,7 @@
 package org.apache.solr.handler.dataimport;
 
 import org.apache.solr.common.util.XMLErrorLogger;
-import org.apache.solr.util.EmptyEntityResolver;
+import org.apache.solr.common.EmptyEntityResolver;
 import javax.xml.stream.XMLInputFactory;
 import static javax.xml.stream.XMLStreamConstants.*;
 import javax.xml.stream.XMLStreamException;
diff --git a/solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler.java b/solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler.java
index bf9c27c..913fc00 100644
--- a/solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler.java
@@ -45,7 +45,7 @@ import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.schema.FieldType;
 import org.apache.solr.schema.IndexSchema;
 import org.apache.solr.schema.SchemaField;
-import org.apache.solr.util.EmptyEntityResolver;
+import org.apache.solr.common.EmptyEntityResolver;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
diff --git a/solr/core/src/java/org/apache/solr/handler/loader/XMLLoader.java b/solr/core/src/java/org/apache/solr/handler/loader/XMLLoader.java
index c4cacdf..f0f1d41 100644
--- a/solr/core/src/java/org/apache/solr/handler/loader/XMLLoader.java
+++ b/solr/core/src/java/org/apache/solr/handler/loader/XMLLoader.java
@@ -59,7 +59,7 @@ import org.apache.solr.update.CommitUpdateCommand;
 import org.apache.solr.update.DeleteUpdateCommand;
 import org.apache.solr.update.RollbackUpdateCommand;
 import org.apache.solr.update.processor.UpdateRequestProcessor;
-import org.apache.solr.util.EmptyEntityResolver;
+import org.apache.solr.common.EmptyEntityResolver;
 import org.apache.solr.util.xslt.TransformerProvider;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser.java b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser.java
index 45ce77e..d9d8b44 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser.java
@@ -25,7 +25,7 @@ import org.apache.solr.common.util.DateUtil;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.common.util.SimpleOrderedMap;
 import org.apache.solr.common.util.XMLErrorLogger;
-import org.apache.solr.util.EmptyEntityResolver;
+import org.apache.solr.common.EmptyEntityResolver;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
diff --git a/solr/solrj/src/java/org/apache/solr/common/EmptyEntityResolver.java b/solr/solrj/src/java/org/apache/solr/common/EmptyEntityResolver.java
new file mode 100644
index 0000000..61cac6f
--- /dev/null
+++ b/solr/solrj/src/java/org/apache/solr/common/EmptyEntityResolver.java
@@ -0,0 +1,97 @@
+package org.apache.solr.common;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.InputStream;
+import org.xml.sax.InputSource;
+import org.xml.sax.EntityResolver;
+import javax.xml.XMLConstants;
+import javax.xml.parsers.SAXParserFactory;
+import javax.xml.stream.XMLInputFactory;
+import javax.xml.stream.XMLResolver;
+
+import org.apache.commons.io.input.ClosedInputStream;
+
+/**
+ * This class provides several singletons of entity resolvers used by
+ * SAX and StAX in the Java API. This is needed to make secure
+ * XML parsers, that don't resolve external entities from untrusted sources.
+ * <p>This class also provides static methods to configure SAX and StAX
+ * parsers to be safe.
+ * <p>Parsers will get an empty, closed stream for every external
+ * entity, so they will not fail while parsing (unless the external entity
+ * is needed for processing!).
+ */
+public final class EmptyEntityResolver {
+
+  public static final EntityResolver SAX_INSTANCE = new EntityResolver() {
+    @Override
+    public InputSource resolveEntity(String publicId, String systemId) {
+      return new InputSource(ClosedInputStream.CLOSED_INPUT_STREAM);
+    }
+  };
+
+  public static final XMLResolver STAX_INSTANCE = new XMLResolver() {
+    @Override
+    public InputStream resolveEntity(String publicId, String systemId, String baseURI, String namespace) {
+      return ClosedInputStream.CLOSED_INPUT_STREAM;
+    }
+  };
+  
+  // no instance!
+  private EmptyEntityResolver() {}
+  
+  private static void trySetSAXFeature(SAXParserFactory saxFactory, String feature, boolean enabled) {
+    try {
+      saxFactory.setFeature(feature, enabled);
+    } catch (Exception ex) {
+      // ignore
+    }
+  }
+  
+  /** Configures the given {@link SAXParserFactory} to do secure XML processing of untrusted sources.
+   * It is required to also set {@link #SAX_INSTANCE} on the created {@link org.xml.sax.XMLReader}.
+   * @see #SAX_INSTANCE
+   */
+  public static void configureSAXParserFactory(SAXParserFactory saxFactory) {
+    // don't enable validation of DTDs:
+    saxFactory.setValidating(false);
+    // enable secure processing:
+    trySetSAXFeature(saxFactory, XMLConstants.FEATURE_SECURE_PROCESSING, true);
+  }
+  
+  private static void trySetStAXProperty(XMLInputFactory inputFactory, String key, Object value) {
+    try {
+      inputFactory.setProperty(key, value);
+    } catch (Exception ex) {
+      // ignore
+    }
+  }
+  
+  /** Configures the given {@link XMLInputFactory} to not parse external entities.
+   * No further configuration on is needed, all required entity resolvers are configured.
+   */
+  public static void configureXMLInputFactory(XMLInputFactory inputFactory) {
+    // don't enable validation of DTDs:
+    trySetStAXProperty(inputFactory, XMLInputFactory.IS_VALIDATING, Boolean.FALSE);
+    // enable this to *not* produce parsing failure on external entities:
+    trySetStAXProperty(inputFactory, XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.TRUE);
+    inputFactory.setXMLResolver(EmptyEntityResolver.STAX_INSTANCE);
+  }
+  
+}
diff --git a/solr/solrj/src/java/org/apache/solr/util/EmptyEntityResolver.java b/solr/solrj/src/java/org/apache/solr/util/EmptyEntityResolver.java
deleted file mode 100644
index 86e27a4..0000000
--- a/solr/solrj/src/java/org/apache/solr/util/EmptyEntityResolver.java
+++ /dev/null
@@ -1,99 +0,0 @@
-package org.apache.solr.util;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.InputStream;
-import org.xml.sax.InputSource;
-import org.xml.sax.EntityResolver;
-import javax.xml.XMLConstants;
-import javax.xml.parsers.SAXParserFactory;
-import javax.xml.stream.XMLInputFactory;
-import javax.xml.stream.XMLResolver;
-import javax.xml.transform.Source;
-import javax.xml.transform.stream.StreamSource;
-
-import org.apache.commons.io.input.ClosedInputStream;
-
-/**
- * This class provides several singletons of entity resolvers used by
- * SAX and StAX in the Java API. This is needed to make secure
- * XML parsers, that don't resolve external entities from untrusted sources.
- * <p>This class also provides static methods to configure SAX and StAX
- * parsers to be safe.
- * <p>Parsers will get an empty, closed stream for every external
- * entity, so they will not fail while parsing (unless the external entity
- * is needed for processing!).
- */
-public final class EmptyEntityResolver {
-
-  public static final EntityResolver SAX_INSTANCE = new EntityResolver() {
-    @Override
-    public InputSource resolveEntity(String publicId, String systemId) {
-      return new InputSource(ClosedInputStream.CLOSED_INPUT_STREAM);
-    }
-  };
-
-  public static final XMLResolver STAX_INSTANCE = new XMLResolver() {
-    @Override
-    public InputStream resolveEntity(String publicId, String systemId, String baseURI, String namespace) {
-      return ClosedInputStream.CLOSED_INPUT_STREAM;
-    }
-  };
-  
-  // no instance!
-  private EmptyEntityResolver() {}
-  
-  private static void trySetSAXFeature(SAXParserFactory saxFactory, String feature, boolean enabled) {
-    try {
-      saxFactory.setFeature(feature, enabled);
-    } catch (Exception ex) {
-      // ignore
-    }
-  }
-  
-  /** Configures the given {@link SAXParserFactory} to do secure XML processing of untrusted sources.
-   * It is required to also set {@link #SAX_INSTANCE} on the created {@link org.xml.sax.XMLReader}.
-   * @see #SAX_INSTANCE
-   */
-  public static void configureSAXParserFactory(SAXParserFactory saxFactory) {
-    // don't enable validation of DTDs:
-    saxFactory.setValidating(false);
-    // enable secure processing:
-    trySetSAXFeature(saxFactory, XMLConstants.FEATURE_SECURE_PROCESSING, true);
-  }
-  
-  private static void trySetStAXProperty(XMLInputFactory inputFactory, String key, Object value) {
-    try {
-      inputFactory.setProperty(key, value);
-    } catch (Exception ex) {
-      // ignore
-    }
-  }
-  
-  /** Configures the given {@link XMLInputFactory} to not parse external entities.
-   * No further configuration on is needed, all required entity resolvers are configured.
-   */
-  public static void configureXMLInputFactory(XMLInputFactory inputFactory) {
-    // don't enable validation of DTDs:
-    trySetStAXProperty(inputFactory, XMLInputFactory.IS_VALIDATING, Boolean.FALSE);
-    // enable this to *not* produce parsing failure on external entities:
-    trySetStAXProperty(inputFactory, XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.TRUE);
-    inputFactory.setXMLResolver(EmptyEntityResolver.STAX_INSTANCE);
-  }
-  
-}

