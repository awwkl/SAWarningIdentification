GitDiffStart: 92b00742ee091bc6e9080dc08bd6914f62cb37cb | Wed May 18 15:17:51 2011 +0000
diff --git a/lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory.java b/lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory.java
index d5889d8..7430076 100644
--- a/lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory.java
+++ b/lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory.java
@@ -28,6 +28,7 @@ import org.apache.lucene.index.IndexFileNames;
 import org.apache.lucene.index.IndexWriter;       // javadocs
 import org.apache.lucene.index.MergePolicy;
 import org.apache.lucene.index.MergeScheduler;
+import org.apache.lucene.store.RAMDirectory;      // javadocs
 import org.apache.lucene.util.IOUtils;
 
 // TODO
diff --git a/lucene/src/java/org/apache/lucene/search/CachingCollector.java b/lucene/src/java/org/apache/lucene/search/CachingCollector.java
index 4a5f59e..18ea7f9 100644
--- a/lucene/src/java/org/apache/lucene/search/CachingCollector.java
+++ b/lucene/src/java/org/apache/lucene/search/CachingCollector.java
@@ -42,7 +42,7 @@ import org.apache.lucene.util.RamUsageEstimator;
  * <p><b>NOTE</b>: this class caches at least 128 documents
  * before checking RAM limits.
  * 
- * <p>See {@link org.apache.lucene.search.grouping} for more
+ * <p>See the Lucene <tt>modules/grouping</tt> module for more
  * details including a full code example.</p>
  *
  * @lucene.experimental
diff --git a/modules/grouping/src/java/org/apache/lucene/search/grouping/AllGroupsCollector.java b/modules/grouping/src/java/org/apache/lucene/search/grouping/AllGroupsCollector.java
index 3392fac..2f2c64c 100644
--- a/modules/grouping/src/java/org/apache/lucene/search/grouping/AllGroupsCollector.java
+++ b/modules/grouping/src/java/org/apache/lucene/search/grouping/AllGroupsCollector.java
@@ -35,9 +35,9 @@ import java.util.List;
  * the most relevant document of a group.
  *
  * <p/>
- * Internally, {@link SentinelIntSet} is used to detect
- * if a group is already added to the total count.  For each
- * segment the {@link SentinelIntSet} is cleared and filled
+ * Implementation detail: an int hash set (SentinelIntSet)
+ * is used to detect if a group is already added to the
+ * total count.  For each segment the int set is cleared and filled
  * with previous counted groups that occur in the new
  * segment.
  *
@@ -58,9 +58,11 @@ public class AllGroupsCollector extends Collector {
    * Expert: Constructs a {@link AllGroupsCollector}
    *
    * @param groupField  The field to group by
-   * @param initialSize The initial size of the {@link SentinelIntSet} and groups list. The initial size should
-   *                    roughly match the total number of expected unique groups. Be aware that the heap usage
-   *                    is 4 bytes * initialSize.
+   * @param initialSize The initial allocation size of the
+   * internal int set and group list
+   * which should roughly match the total
+   * number of expected unique groups. Be aware that the
+   * heap usage is 4 bytes * initialSize.
    */
   public AllGroupsCollector(String groupField, int initialSize) {
     this.groupField = groupField;
@@ -69,8 +71,9 @@ public class AllGroupsCollector extends Collector {
   }
 
   /**
-   * Constructs a {@link AllGroupsCollector}. This sets the initialSize for the {@link SentinelIntSet} and group list
-   * to 128 in the {@link #AllGroupsCollector(String, int)} constructor.
+   * Constructs a {@link AllGroupsCollector}. This sets the
+   * initial allocation size for the internal int set and group
+   * list to 128.
    *
    * @param groupField The field to group by
    */

