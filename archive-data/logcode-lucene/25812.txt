GitDiffStart: 8b3d41f04f6ae1cee0584d45246c3fb8d36f4e98 | Sun Nov 4 17:23:04 2001 +0000
diff --git a/BUILD.txt b/BUILD.txt
new file mode 100644
index 0000000..d53a46a
--- /dev/null
+++ b/BUILD.txt
@@ -0,0 +1,80 @@
+Lucene Build Instructions
+
+$Id$
+
+Basic steps:
+  0) Install JDK 1.3, Ant 1.4, and the Ant 1.4 optional.jar.
+  1) Download Lucene from Apache and unpack it.
+  2) Connect to the top-level of your Lucene installation.
+  3) Run ant.
+
+Step 0) Set up your development environment (JDK 1.3, Ant 1.4)
+
+We'll assume that you know how to get and set up the JDK - if you
+don't, then we suggest starting at http://java.sun.com and learning
+more about Java, before returning to this README.
+
+Lucene runs with JDK 1.1 and later.  However, if you're going to work
+with the development version of Lucene, we recommend you stick with
+the most current version of Java (at the time of this writing, JDK
+1.3).  Also, note that if you're working with the Lucene source,
+you'll need to use Ant (see below) and Ant requires at least JDK 1.1
+(and in the future will likely move to requiring JDK 1.2, according to
+the Ant install docs).
+
+Like most of the Jakarta projects, Lucene uses Apache Ant for build
+control.  Specifically, you MUST use Ant version 1.4 or greater.
+
+Ant is "kind of like make without make's wrinkles".  Ant is
+implemented in java and uses XML-based configuration files.  You can
+get it at:
+
+  http://jakarta.apache.org/ant/index.html
+
+Specifically, you can get the binary distributions at:
+
+  http://jakarta.apache.org/builds/jakarta-ant/release/
+
+You'll need to download both the Ant binary distribution and the
+"optional" jar file.  Install these according to the instructions at:
+
+  http://jakarta.apache.org/ant/manual/index.html
+
+Step 1) Download lucene from Apache
+
+We'll assume you already did this, or you wouldn't be reading this
+file.  However, you might have received this file by some alternate
+route, or you might have an incomplete copy of the Lucene, so: Lucene
+releases are available for download at:
+
+  http://jakarta.apache.org/builds/jakarta-lucene/release/
+
+Download either a zip or a tarred/gzipped version of the archive, and
+uncompress it into a directory of your choice.
+
+Step 3) Connect to the top-level of your Lucene installation
+
+Lucene's top-level directory contains the build.properties and
+build.xml files.  You don't need to change any of the settings in
+these files, but you do need to run ant from this location so it knows
+where to find them.
+
+Step 4) Run ant.
+
+Assuming you have ant in your PATH and have set ANT_HOME to the
+location of your ant installation, typing "ant" at the shell prompt
+and command prompt should run ant.  Ant will by default look for the
+"build.xml" file in your current directory, and compile Lucene.
+
+For further information on Lucene, go to:
+  http://jakarta.apache.org/lucene
+
+Please join the Lucene-User mailing list by sending a message to:
+  lucene-user-subscribe@jakarta.apache.org
+
+Please post suggestions, questions, corrections or additions to this
+document to the lucene-user mailing list.
+
+This file was originally written by Steven J. Owens <puff@darksleep.com>.
+
+Copyright (c) 2001 The Apache Software Foundation.  All rights reserved.
diff --git a/CHANGES.txt b/CHANGES.txt
new file mode 100644
index 0000000..ef1d7db
--- /dev/null
+++ b/CHANGES.txt
@@ -0,0 +1,92 @@
+Lucene Change Log
+
+$Id$
+
+1.2 RC3
+
+ 1. IndexWriter: fixed a bug where adding an optimized index to an
+    empty index failed.  This was encountered using addIndexes to copy
+    a RAMDirectory index to an FSDirectory.
+
+ 2. RAMDirectory: fixed a bug where RAMInputStream could not read
+    across more than across a single buffer boundary.
+
+ 3. Fix query parser so it accepts queries with unicode characters.
+ 
+ 4. Fix query parser so that PrefixQuery is used in preference to
+    WildcardQuery when there's only an asterisk at the end of the
+    term.  Previously PrefixQuery would never be used.
+
+ 5. Fix tests so they compile; fix ant file so it compiles tests
+    properly.  Added test cases for Analyzers and PriorityQueue.
+
+
+1.2 RC2, 19 October 2001:
+ - added sources to distribution
+ - removed broken build scripts and libraries from distribution
+ - SegmentsReader: fixed potential race condition
+ - FSDirectory: fixed so that getDirectory(xxx,true) correctly
+   erases the directory contents, even when the directory
+   has already been accessed in this JVM.
+ - RangeQuery: Fix issue where an inclusive range query would
+   include the nearest term in the index above a non-existant
+   specified upper term.
+ - SegmentTermEnum: Fix NullPointerException in clone() method
+   when the Term is null.
+ - JDK 1.1 compatibility fix: disabled lock files for JDK 1.1,
+   since they rely on a feature added in JDK 1.2.
+
+1.2 RC1 (first Apache release), 2 October 2001:
+  - packages renamed from com.lucene to org.apache.lucene
+  - license switched from LGPL to Apache
+  - ant-only build -- no more makefiles
+  - addition of lock files--now fully thread & process safe
+  - addition of German stemmer
+  - MultiSearcher now supports low-level search API
+  - added RangeQuery, for term-range searching
+  - Analyzers can choose tokenizer based on field name
+  - misc bug fixes.
+
+1.01b (last Sourceforge release), 2 July 2001
+ . a few bug fixes
+ . new Query Parser
+ . new prefix query (search for "foo*" matches "food")
+
+1.0, 2000-10-04
+
+This release fixes a few serious bugs and also includes some
+performance optimizations, a stemmer, and a few other minor
+enhancements.
+
+0.04 2000-04-19
+
+Lucene now includes a grammar-based tokenizer, StandardTokenizer.
+
+The only tokenizer included in the previous release (LetterTokenizer)
+identified terms consisting entirely of alphabetic characters.  The
+new tokenizer uses a regular-expression grammar to identify more
+complex classes of terms, including numbers, acronyms, email
+addresses, etc.
+
+StandardTokenizer serves two purposes:
+
+ 1. It is a much better, general purpose tokenizer for use by
+    applications as is.
+
+    The easiest way for applications to start using
+    StandardTokenizer is to use StandardAnalyzer.
+
+ 2. It provides a good example of grammar-based tokenization.
+
+    If an application has special tokenization requirements, it can
+    implement a custom tokenizer by copying the directory containing
+    the new tokenizer into the application and modifying it
+    accordingly.
+
+0.01, 2000-03-30
+
+First open source release.
+
+The code has been re-organized into a new package and directory
+structure for this release.  It builds OK, but has not been tested
+beyond that since the re-organization.
diff --git a/README.txt b/README.txt
new file mode 100644
index 0000000..b1feca9
--- /dev/null
+++ b/README.txt
@@ -0,0 +1,32 @@
+Lucene README file
+
+$Id$
+
+INTRODUCTION
+
+Lucene is a Java full-text search engine.  Lucene is not a complete
+application, but rather a code library and API that can easily be used
+to add search capabilities to applications.
+
+The Lucene web site is at:
+  http://jakarta.apache.org/lucene
+
+Please join the Lucene-User mailing list by sending a message to:
+  lucene-user-subscribe@jakarta.apache.org
+
+FILES
+
+lucene-XX.jar
+  The compiled lucene library.
+
+docs/index.html
+  The contents of the Lucene website.
+
+docs/api/index.html
+  The Javadoc Lucene API documentation.
+
+src/java
+  The Lucene source code.
+
+src/demo
+  Some example code.
diff --git a/build.properties b/build.properties
index 26f4450..7e7bed0 100644
--- a/build.properties
+++ b/build.properties
@@ -3,7 +3,7 @@
 # ---------------------------------------------------------
 name=lucene
 Name=Lucene
-version=1.2-dev
+version=1.2-rc3-dev
 year=2000-2001
 final.name=${name}-${version}
 debug=off
diff --git a/build.xml b/build.xml
index 2050649..0116e00 100644
--- a/build.xml
+++ b/build.xml
@@ -320,7 +320,11 @@
     </copy>
     <copy todir="${dist.dir}/" file="build.xml"/>
     <copy todir="${dist.dir}/" file="build.properties"/>
-
+    <copy todir="${dist.dir}">
+      <fileset dir=".">
+        <include name="*.txt" />
+      </fileset>
+    </copy>
     <copy file="${build.dir}/${final.name}.jar" todir="${dist.dir}"/>
   </target>
 

