GitDiffStart: f40f9dd1818ee1e7f4ba2e2c912f1440131705fe | Fri Nov 23 09:56:00 2012 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 5503e0c..71797ae 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -84,6 +84,10 @@ New Features
 * SOLR-3970: SystemInfoHandler now exposes more details about the 
   JRE/VM/Java version in use.  (hossman)
 
+* SOLR-4101: Add support for storing term offsets in the index via a
+  'storeOffsetsWithPositions' flag on field definitions in the schema.
+  (Tom Winch, Alan Woodward)
+
 Optimizations
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/schema/FieldProperties.java b/solr/core/src/java/org/apache/solr/schema/FieldProperties.java
index 571afa5..137d86c 100644
--- a/solr/core/src/java/org/apache/solr/schema/FieldProperties.java
+++ b/solr/core/src/java/org/apache/solr/schema/FieldProperties.java
@@ -49,12 +49,15 @@ public abstract class FieldProperties {
   protected final static int REQUIRED            = 0x00001000;
   protected final static int OMIT_POSITIONS      = 0x00002000;
 
+  protected final static int STORE_OFFSETS       = 0x00004000;
+
   static final String[] propertyNames = {
           "indexed", "tokenized", "stored",
           "binary", "omitNorms", "omitTermFreqAndPositions",
           "termVectors", "termPositions", "termOffsets",
           "multiValued",
-          "sortMissingFirst","sortMissingLast","required", "omitPositions"
+          "sortMissingFirst","sortMissingLast","required", "omitPositions",
+          "storeOffsetsWithPositions"
   };
 
   static final Map<String,Integer> propertyMap = new HashMap<String,Integer>();
diff --git a/solr/core/src/java/org/apache/solr/schema/FieldType.java b/solr/core/src/java/org/apache/solr/schema/FieldType.java
index abe448a..0fb96a4 100644
--- a/solr/core/src/java/org/apache/solr/schema/FieldType.java
+++ b/solr/core/src/java/org/apache/solr/schema/FieldType.java
@@ -294,14 +294,18 @@ public abstract class FieldType extends FieldProperties {
     StorableField f = createField( field, value, boost);
     return f==null ? new StorableField[]{} : new StorableField[]{f};
   }
-  protected IndexOptions getIndexOptions(SchemaField field,
-                                         String internalVal) {
+
+  protected IndexOptions getIndexOptions(SchemaField field, String internalVal) {
+
     IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;
     if (field.omitTermFreqAndPositions()) {
       options = IndexOptions.DOCS_ONLY;
     } else if (field.omitPositions()) {
       options = IndexOptions.DOCS_AND_FREQS;
+    } else if (field.storeOffsetsWithPositions()) {
+      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;
     }
+
     return options;
   }
 
diff --git a/solr/core/src/java/org/apache/solr/schema/SchemaField.java b/solr/core/src/java/org/apache/solr/schema/SchemaField.java
index bb63659..54335b3 100644
--- a/solr/core/src/java/org/apache/solr/schema/SchemaField.java
+++ b/solr/core/src/java/org/apache/solr/schema/SchemaField.java
@@ -90,6 +90,7 @@ public final class SchemaField extends FieldProperties {
 
   public boolean omitTermFreqAndPositions() { return (properties & OMIT_TF_POSITIONS)!=0; }
   public boolean omitPositions() { return (properties & OMIT_POSITIONS)!=0; }
+  public boolean storeOffsetsWithPositions() { return (properties & STORE_OFFSETS)!=0; }
 
   public boolean multiValued() { return (properties & MULTIVALUED)!=0; }
   public boolean sortMissingFirst() { return (properties & SORT_MISSING_FIRST)!=0; }

