GitDiffStart: cdd85a75ea7977861319855b43dca91756236e53 | Tue Dec 14 23:02:53 2004 +0000
diff --git a/src/java/org/apache/lucene/queryParser/QueryParser.java b/src/java/org/apache/lucene/queryParser/QueryParser.java
index 29672a5..15c40a3 100644
--- a/src/java/org/apache/lucene/queryParser/QueryParser.java
+++ b/src/java/org/apache/lucene/queryParser/QueryParser.java
@@ -73,7 +73,7 @@ public class QueryParser implements QueryParserConstants {
   /** The actual operator that parser uses to combine query terms */
   private Operator operator = OR_OPERATOR;
 
-  boolean lowercaseWildcardTerms = true;
+  boolean lowercaseExpandedTerms = true;
 
   Analyzer analyzer;
   String field;
@@ -242,18 +242,34 @@ public class QueryParser implements QueryParserConstants {
   }
 
   /**
-   * Whether terms of wildcard and prefix queries are to be automatically
+   * Whether terms of wildcard, prefix, fuzzy and range queries are to be automatically
    * lower-cased or not.  Default is <code>true</code>.
+   * @deprecated use {@link #setLowercaseExpandedTerms(boolean)} instead
    */
-  public void setLowercaseWildcardTerms(boolean lowercaseWildcardTerms) {
-    this.lowercaseWildcardTerms = lowercaseWildcardTerms;
+  public void setLowercaseWildcardTerms(boolean lowercaseExpandedTerms) {
+    this.lowercaseExpandedTerms = lowercaseExpandedTerms;
   }
 
   /**
-   * @see #setLowercaseWildcardTerms(boolean)
+   * Whether terms of wildcard, prefix, fuzzy and range queries are to be automatically
+   * lower-cased or not.  Default is <code>true</code>.
+   */
+  public void setLowercaseExpandedTerms(boolean lowercaseExpandedTerms) {
+    this.lowercaseExpandedTerms = lowercaseExpandedTerms;
+  }
+
+  /**
+   * @deprecated use {@link #getLowercaseExpandedTerms()} instead
    */
   public boolean getLowercaseWildcardTerms() {
-    return lowercaseWildcardTerms;
+    return lowercaseExpandedTerms;
+  }
+
+  /**
+   * @see #setLowercaseExpandedTerms(boolean)
+   */
+  public boolean getLowercaseExpandedTerms() {
+    return lowercaseExpandedTerms;
   }
 
   /**
@@ -473,6 +489,10 @@ public class QueryParser implements QueryParserConstants {
                                 String part2,
                                 boolean inclusive) throws ParseException
   {
+    if (lowercaseExpandedTerms) {
+      part1 = part1.toLowerCase();
+      part2 = part2.toLowerCase();
+    }
     try {
       DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);
       df.setLenient(true);
@@ -533,8 +553,8 @@ public class QueryParser implements QueryParserConstants {
    */
   protected Query getWildcardQuery(String field, String termStr) throws ParseException
   {
-    if (lowercaseWildcardTerms) {
-  termStr = termStr.toLowerCase();
+    if (lowercaseExpandedTerms) {
+      termStr = termStr.toLowerCase();
     }
     Term t = new Term(field, termStr);
     return new WildcardQuery(t);
@@ -565,8 +585,8 @@ public class QueryParser implements QueryParserConstants {
    */
   protected Query getPrefixQuery(String field, String termStr) throws ParseException
   {
-    if (lowercaseWildcardTerms) {
-  termStr = termStr.toLowerCase();
+    if (lowercaseExpandedTerms) {
+      termStr = termStr.toLowerCase();
     }
     Term t = new Term(field, termStr);
     return new PrefixQuery(t);
@@ -592,6 +612,9 @@ public class QueryParser implements QueryParserConstants {
    */
   protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException
   {
+    if (lowercaseExpandedTerms) {
+      termStr = termStr.toLowerCase();
+    }
     Term t = new Term(field, termStr);
     return new FuzzyQuery(t, minSimilarity, fuzzyPrefixLength);
   }
diff --git a/src/java/org/apache/lucene/queryParser/QueryParser.jj b/src/java/org/apache/lucene/queryParser/QueryParser.jj
index 2adb739..da017fb 100644
--- a/src/java/org/apache/lucene/queryParser/QueryParser.jj
+++ b/src/java/org/apache/lucene/queryParser/QueryParser.jj
@@ -96,7 +96,7 @@ public class QueryParser {
   /** The actual operator that parser uses to combine query terms */
   private Operator operator = OR_OPERATOR;
 
-  boolean lowercaseWildcardTerms = true;
+  boolean lowercaseExpandedTerms = true;
 
   Analyzer analyzer;
   String field;
@@ -265,18 +265,34 @@ public class QueryParser {
   }
 
   /**
-   * Whether terms of wildcard and prefix queries are to be automatically
+   * Whether terms of wildcard, prefix, fuzzy and range queries are to be automatically
    * lower-cased or not.  Default is <code>true</code>.
+   * @deprecated use {@link #setLowercaseExpandedTerms(boolean)} instead
    */
-  public void setLowercaseWildcardTerms(boolean lowercaseWildcardTerms) {
-    this.lowercaseWildcardTerms = lowercaseWildcardTerms;
+  public void setLowercaseWildcardTerms(boolean lowercaseExpandedTerms) {
+    this.lowercaseExpandedTerms = lowercaseExpandedTerms;
   }
 
   /**
-   * @see #setLowercaseWildcardTerms(boolean)
+   * Whether terms of wildcard, prefix, fuzzy and range queries are to be automatically
+   * lower-cased or not.  Default is <code>true</code>.
+   */
+  public void setLowercaseExpandedTerms(boolean lowercaseExpandedTerms) {
+    this.lowercaseExpandedTerms = lowercaseExpandedTerms;
+  }
+
+  /**
+   * @deprecated use {@link #getLowercaseExpandedTerms()} instead
    */
   public boolean getLowercaseWildcardTerms() {
-    return lowercaseWildcardTerms;
+    return lowercaseExpandedTerms;
+  }
+
+  /**
+   * @see #setLowercaseExpandedTerms(boolean)
+   */
+  public boolean getLowercaseExpandedTerms() {
+    return lowercaseExpandedTerms;
   }
 
   /**
@@ -496,6 +512,10 @@ public class QueryParser {
                                 String part2,
                                 boolean inclusive) throws ParseException
   {
+    if (lowercaseExpandedTerms) {
+      part1 = part1.toLowerCase();
+      part2 = part2.toLowerCase();
+    }
     try {
       DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);
       df.setLenient(true);
@@ -556,8 +576,8 @@ public class QueryParser {
    */
   protected Query getWildcardQuery(String field, String termStr) throws ParseException
   {
-    if (lowercaseWildcardTerms) {
-  termStr = termStr.toLowerCase();
+    if (lowercaseExpandedTerms) {
+      termStr = termStr.toLowerCase();
     }
     Term t = new Term(field, termStr);
     return new WildcardQuery(t);
@@ -588,8 +608,8 @@ public class QueryParser {
    */
   protected Query getPrefixQuery(String field, String termStr) throws ParseException
   {
-    if (lowercaseWildcardTerms) {
-  termStr = termStr.toLowerCase();
+    if (lowercaseExpandedTerms) {
+      termStr = termStr.toLowerCase();
     }
     Term t = new Term(field, termStr);
     return new PrefixQuery(t);
@@ -615,6 +635,9 @@ public class QueryParser {
    */
   protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException
   {
+    if (lowercaseExpandedTerms) {
+      termStr = termStr.toLowerCase();
+    }
     Term t = new Term(field, termStr);
     return new FuzzyQuery(t, minSimilarity, fuzzyPrefixLength);
   }
diff --git a/src/test/org/apache/lucene/queryParser/TestQueryParser.java b/src/test/org/apache/lucene/queryParser/TestQueryParser.java
index 1341dba..0fcf7a6 100644
--- a/src/test/org/apache/lucene/queryParser/TestQueryParser.java
+++ b/src/test/org/apache/lucene/queryParser/TestQueryParser.java
@@ -129,7 +129,7 @@ public class TestQueryParser extends TestCase {
   public void assertWildcardQueryEquals(String query, boolean lowercase, String result)
     throws Exception {
     QueryParser qp = getParser(null);
-    qp.setLowercaseWildcardTerms(lowercase);
+    qp.setLowercaseExpandedTerms(lowercase);
     Query q = qp.parse(query);
     String s = q.toString("field");
     if (!s.equals(result)) {
@@ -138,6 +138,16 @@ public class TestQueryParser extends TestCase {
     }
   }
 
+  public void assertWildcardQueryEquals(String query, String result) throws Exception {
+    QueryParser qp = getParser(null);
+    Query q = qp.parse(query);
+    String s = q.toString("field");
+    if (!s.equals(result)) {
+      fail("WildcardQuery /" + query + "/ yielded /" + s + "/, expecting /"
+          + result + "/");
+    }
+  }
+
   public Query getQueryDOA(String query, Analyzer a)
     throws Exception {
     if (a == null)
@@ -272,21 +282,37 @@ public class TestQueryParser extends TestCase {
 	 * lower-cased with propery parser configuration
 	 */
 // First prefix queries:
+    // by default, convert to lowercase:
+    assertWildcardQueryEquals("Term*", true, "term*");
+    // explicitly set lowercase:
     assertWildcardQueryEquals("term*", true, "term*");
     assertWildcardQueryEquals("Term*", true, "term*");
     assertWildcardQueryEquals("TERM*", true, "term*");
+    // explicitly disable lowercase conversion:
     assertWildcardQueryEquals("term*", false, "term*");
     assertWildcardQueryEquals("Term*", false, "Term*");
     assertWildcardQueryEquals("TERM*", false, "TERM*");
 // Then 'full' wildcard queries:
+    // by default, convert to lowercase:
+    assertWildcardQueryEquals("Te?m", "te?m");
+    // explicitly set lowercase:
     assertWildcardQueryEquals("te?m", true, "te?m");
     assertWildcardQueryEquals("Te?m", true, "te?m");
     assertWildcardQueryEquals("TE?M", true, "te?m");
     assertWildcardQueryEquals("Te?m*gerM", true, "te?m*germ");
+    // explicitly disable lowercase conversion:
     assertWildcardQueryEquals("te?m", false, "te?m");
     assertWildcardQueryEquals("Te?m", false, "Te?m");
     assertWildcardQueryEquals("TE?M", false, "TE?M");
     assertWildcardQueryEquals("Te?m*gerM", false, "Te?m*gerM");
+//  Fuzzy queries:
+    assertWildcardQueryEquals("Term~", "term~0.5");
+    assertWildcardQueryEquals("Term~", true, "term~0.5");
+    assertWildcardQueryEquals("Term~", false, "Term~0.5");
+//  Range queries:
+    assertWildcardQueryEquals("[A TO C]", "[a TO c]");
+    assertWildcardQueryEquals("[A TO C]", true, "[a TO c]");
+    assertWildcardQueryEquals("[A TO C]", false, "[A TO C]");
   }
 
   public void testQPA() throws Exception {

