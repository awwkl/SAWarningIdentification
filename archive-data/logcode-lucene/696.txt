GitDiffStart: 3a71c7d8df59ae815be28495905f88b1c3207cb4 | Thu Jul 14 10:10:44 2016 +0200
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index ec8ecf0..9e19d35 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -109,6 +109,9 @@ Improvements
   chain that is about normalization for range/fuzzy/wildcard queries.
   (Adrien Grand)
 
+* LUCENE-7376: Add support for ToParentBlockJoinQuery to fast vector highlighter's
+  FieldQuery. (Martijn van Groningen)
+
 Optimizations
 
 * LUCENE-7330, LUCENE-7339: Speed up conjunction queries. (Adrien Grand)
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.java b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.java
index ac6cd94..8abeaff 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.java
@@ -37,6 +37,7 @@ import org.apache.lucene.search.MultiTermQuery;
 import org.apache.lucene.search.PhraseQuery;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.join.ToParentBlockJoinQuery;
 import org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo;
 
 /**
@@ -137,6 +138,11 @@ public class FieldQuery {
       if (q != null) {
         flatten( q, reader, flatQueries, boost);
       }
+    } else if (sourceQuery instanceof ToParentBlockJoinQuery) {
+      Query childQuery = ((ToParentBlockJoinQuery) sourceQuery).getChildQuery();
+      if (childQuery != null) {
+        flatten(childQuery, reader, flatQueries, boost);
+      }
     } else if (reader != null) {
       Query query = sourceQuery;
       Query rewritten;
diff --git a/lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest.java b/lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest.java
index ce82546..1976327 100644
--- a/lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest.java
+++ b/lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest.java
@@ -27,12 +27,16 @@ import org.apache.lucene.search.BooleanClause.Occur;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.BoostQuery;
 import org.apache.lucene.search.ConstantScoreQuery;
+import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.search.PrefixQuery;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.RegexpQuery;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.TermRangeQuery;
 import org.apache.lucene.search.WildcardQuery;
+import org.apache.lucene.search.join.QueryBitSetProducer;
+import org.apache.lucene.search.join.ScoreMode;
+import org.apache.lucene.search.join.ToParentBlockJoinQuery;
 import org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap;
 import org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo;
 import org.apache.lucene.util.BytesRef;
@@ -951,4 +955,15 @@ public class FieldQueryTest extends AbstractTestCase {
     assertCollectionQueries( flatQueries, tq( boost, "A" ) );
   }
 
+  public void testFlattenToParentBlockJoinQuery() throws Exception {
+    initBoost();
+    Query childQuery = tq(boost, "a");
+    Query query = new ToParentBlockJoinQuery(childQuery, new QueryBitSetProducer(new MatchAllDocsQuery()), ScoreMode.None);
+    query = new BoostQuery(query, boost );
+    FieldQuery fq = new FieldQuery(query, true, true );
+    Set<Query> flatQueries = new HashSet<>();
+    fq.flatten(query, reader, flatQueries, 1f );
+    assertCollectionQueries(flatQueries, tq(boost, "a"));
+  }
+
 }

