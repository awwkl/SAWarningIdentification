GitDiffStart: 6273450e4ea20d2c8874c48b3907e9434c16fe06 | Thu Aug 23 21:45:03 2012 +0000
diff --git a/lucene/build.xml b/lucene/build.xml
index 784faf7..8d9c298 100644
--- a/lucene/build.xml
+++ b/lucene/build.xml
@@ -238,7 +238,7 @@
       <check-missing-javadocs dir="build/docs/demo" level="class"/>
       <check-missing-javadocs dir="build/docs/facet" level="class"/>
       <check-missing-javadocs dir="build/docs/grouping" level="class"/>
-      <!-- highlighter: problems -->
+      <check-missing-javadocs dir="build/docs/highlighter" level="class"/>
       <check-missing-javadocs dir="build/docs/join" level="class"/>
       <check-missing-javadocs dir="build/docs/memory" level="class"/>
       <check-missing-javadocs dir="build/docs/misc" level="class"/>
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector.java b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector.java
index e5e9111..9982f72 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector.java
@@ -33,6 +33,9 @@ import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CollectionUtil;
 
+/**
+ * TokenStream created from a term vector field.
+ */
 public final class TokenStreamFromTermPositionVector extends TokenStream {
 
   private final List<Token> positionedTokens = new ArrayList<Token>();
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder.java b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder.java
index 0e45229..cb267d8 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder.java
@@ -38,6 +38,12 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
+/**
+ * Base FragmentsBuilder implementation that supports colored pre/post
+ * tags and multivalued fields.
+ * <p>
+ * Uses {@link BoundaryScanner} to determine fragments.
+ */
 public abstract class BaseFragmentsBuilder implements FragmentsBuilder {
 
   protected String[] preTags, postTags;
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BoundaryScanner.java b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BoundaryScanner.java
index 217db2c..4c53361 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BoundaryScanner.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BoundaryScanner.java
@@ -18,7 +18,7 @@ package org.apache.lucene.search.vectorhighlight;
  */
 
 /**
- *
+ * Finds fragment boundaries: pluggable into {@link BaseFragmentsBuilder}
  */
 public interface BoundaryScanner {
 
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java
index dfcb969..158cc87 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java
@@ -57,6 +57,9 @@ public abstract class FieldFragList {
     return fragInfos;
   }
 
+  /**
+   * List of term offsets + weight for a frag info
+   */
   public static class WeightedFragInfo {
 
     private List<SubInfo> subInfos;
@@ -97,6 +100,9 @@ public abstract class FieldFragList {
       return sb.toString();
     }
     
+    /**
+     * Represents the list of term offsets for some text
+     */
     public static class SubInfo {
       private final String text;  // unnecessary member, just exists for debugging purpose
       private final List<Toffs> termsOffsets;   // usually termsOffsets.size() == 1,
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java
index 60288a5..4b564d2 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java
@@ -118,6 +118,9 @@ public class FieldPhraseList {
     getPhraseList().add( wpi );
   }
   
+  /**
+   * Represents the list of term offsets and boost for some text
+   */
   public static class WeightedPhraseInfo {
 
     private String text;  // unnecessary member, just exists for debugging purpose
@@ -230,6 +233,9 @@ public class FieldPhraseList {
       return seqnum;
     }
 
+    /**
+     * Term offsets (start + end)
+     */
     public static class Toffs {
       private int startOffset;
       private int endOffset;
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.java b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.java
index d88d4f9..79f0a9e 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.java
@@ -321,6 +321,10 @@ public class FieldQuery {
     return termOrPhraseNumber++;
   }
   
+  /**
+   * Internal structure of a query for highlighting: represents
+   * a nested query structure
+   */
   public static class QueryPhraseMap {
 
     boolean terminal;
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java
index ac1e39c..6de182e 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack.java
@@ -159,6 +159,9 @@ public class FieldTermStack {
     return termList == null || termList.size() == 0;
   }
   
+  /**
+   * Single term with its position/offsets in the document and IDF weight
+   */
   public static class TermInfo implements Comparable<TermInfo>{
 
     private final String text;
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java
index 112fb9b..5013f2d 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.java
@@ -62,6 +62,10 @@ public class ScoreOrderFragmentsBuilder extends BaseFragmentsBuilder {
     return src;
   }
 
+  /**
+   * Comparator for {@link WeightedFragInfo} by boost, breaking ties
+   * by offset.
+   */
   public static class ScoreComparator implements Comparator<WeightedFragInfo> {
 
     public int compare( WeightedFragInfo o1, WeightedFragInfo o2 ) {
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.java b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.java
index ea048cb..a46df68 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.java
@@ -21,6 +21,10 @@ import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
 
+/**
+ * Simple boundary scanner implementation that divides fragments
+ * based on a set of separator characters.
+ */
 public class SimpleBoundaryScanner implements BoundaryScanner {
   
   public static final int DEFAULT_MAX_SCAN = 20;
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java
index 5c60b5e..3d874ee 100755
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumDocsValueSource.java
@@ -17,6 +17,7 @@
 package org.apache.lucene.queries.function.valuesource;
 
 import org.apache.lucene.index.AtomicReaderContext;
+import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.ReaderUtil;
 import org.apache.lucene.queries.function.FunctionValues;
 import org.apache.lucene.queries.function.ValueSource;
@@ -24,6 +25,11 @@ import org.apache.lucene.queries.function.ValueSource;
 import java.io.IOException;
 import java.util.Map;
 
+/**
+ * Returns the value of {@link IndexReader#numDocs()}
+ * for every document. This is the number of documents
+ * excluding deletions.
+ */
 public class NumDocsValueSource extends ValueSource {
   public String name() {
     return "numdocs";
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.java
index 3c6c9d7..8c43a20 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.java
@@ -36,6 +36,9 @@ import org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages;
  */
 public class ModifierQueryNode extends QueryNodeImpl {
 
+  /**
+   * Modifier type: such as required (REQ), prohibited (NOT)
+   */
   public enum Modifier {
     MOD_NONE, MOD_NOT, MOD_REQ;
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode.java
index 2bc7dd0..749c640 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode.java
@@ -41,6 +41,9 @@ import org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax.Type
  */
 public class PathQueryNode extends QueryNodeImpl {
 
+  /**
+   * Term text with a beginning and end position
+   */
   public static class QueryText implements Cloneable {
     CharSequence value = null;
     /**
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode.java
index 7272111..591f681 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode.java
@@ -17,11 +17,15 @@ package org.apache.lucene.queryparser.flexible.core.nodes;
  * limitations under the License.
  */
 
+import org.apache.lucene.search.PhraseQuery; // javadocs
 import org.apache.lucene.queryparser.flexible.messages.MessageImpl;
 import org.apache.lucene.queryparser.flexible.core.QueryNodeError;
 import org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages;
 import org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax;
 
+/**
+ * Query node for {@link PhraseQuery}'s slop factor.
+ */
 public class PhraseSlopQueryNode extends QueryNodeImpl implements FieldableNode {
 
   private int value = 0;
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode.java
index 43aefbb..1efb333 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode.java
@@ -33,6 +33,9 @@ import org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages;
  */
 public class ProximityQueryNode extends BooleanQueryNode {
 
+  /**
+   * Distance condition: PARAGRAPH, SENTENCE, or NUMBER
+   */
   public enum Type {
     PARAGRAPH {
       @Override
@@ -50,7 +53,7 @@ public class ProximityQueryNode extends BooleanQueryNode {
     abstract CharSequence toQueryString();
   }
 
-  // utility class
+  /** utility class containing the distance condition and number */
   static public class ProximityType {
     int pDistance = 0;
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.java
index 8476ae7..61878a7 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.java
@@ -18,7 +18,7 @@ package org.apache.lucene.queryparser.flexible.core.nodes;
  */
 
 /**
- * 
+ * Interface for a node that has text as a {@link CharSequence}
  */
 public interface TextableQueryNode {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.java
index 1bc1704..d677d14 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.java
@@ -24,6 +24,10 @@ import java.util.Locale;
  * to escape the queries, when the toQueryString method is called.
  */
 public interface EscapeQuerySyntax {
+  /**
+   * Type of escaping: String for escaping syntax,
+   * NORMAL for escaping reserved words (like AND) in terms
+   */
   public enum Type {
     STRING, NORMAL;
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/StringUtils.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/StringUtils.java
index 0ae3597..d7b46d5 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/StringUtils.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/StringUtils.java
@@ -17,6 +17,9 @@ package org.apache.lucene.queryparser.flexible.core.util;
  * limitations under the License.
  */
 
+/**
+ * String manipulation routines
+ */
 final public class StringUtils {
 
   public static String toString(Object obj) {
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.java
index 89a07c8..3f688e6 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.java
@@ -27,6 +27,9 @@ import org.apache.lucene.search.MultiTermQuery;
  * limitations under the License.
  */
 
+/**
+ * Configuration options common across queryparser implementations.
+ */
 public interface CommonQueryParserConfiguration {
   
   /**
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder.java
index 9e7c093d..4dbc27b 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder.java
@@ -30,6 +30,10 @@ import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.BooleanQuery.TooManyClauses;
 
+/**
+ * Builds a BooleanQuery of SHOULD clauses, possibly with
+ * some minimum number to match.
+ */
 public class AnyQueryNodeBuilder implements StandardQueryBuilder {
 
   public AnyQueryNodeBuilder() {
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.java
index 892f534..9eaa935 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.java
@@ -19,6 +19,9 @@ package org.apache.lucene.queryparser.flexible.standard.config;
 
 import org.apache.lucene.search.FuzzyQuery;
 
+/**
+ * Configuration parameters for {@link FuzzyQuery}s
+ */
 public class FuzzyConfig {
   
   private int prefixLength = FuzzyQuery.defaultPrefixLength;
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler.java
index fa9ff7e..b65e1a7 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler.java
@@ -44,6 +44,9 @@ import org.apache.lucene.search.MultiTermQuery.RewriteMethod;
  */
 public class StandardQueryConfigHandler extends QueryConfigHandler {
 
+  /**
+   * Class holding keys for StandardQueryNodeProcessorPipeline options.
+   */
   final public static class ConfigurationKeys  {
     
     /**
@@ -182,6 +185,9 @@ public class StandardQueryConfigHandler extends QueryConfigHandler {
     
   }
   
+  /**
+   * Boolean Operator: AND or OR
+   */
   public static enum Operator {
     AND, OR;
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl.java
index d3bb83f..231eb7b 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl.java
@@ -25,6 +25,8 @@ import org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax;
 import org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence;
 
 /**
+ * Implementation of {@link EscapeQuerySyntax} for the standard lucene
+ * syntax.
  */
 public class EscapeQuerySyntaxImpl implements EscapeQuerySyntax {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java
index bb7aa01..21023e5 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java
@@ -40,6 +40,9 @@ import org.apache.lucene.queryparser.flexible.core.nodes.QuotedFieldQueryNode;
 import org.apache.lucene.queryparser.flexible.core.parser.SyntaxParser;
 import org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode;
 
+/**
+ * Parser for the standard Lucene syntax
+ */
 public class StandardSyntaxParser implements SyntaxParser, StandardSyntaxParserConstants {
 
         private static final int CONJ_NONE =0;
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.jj b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.jj
index c9c3d9a..bdd5d21 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.jj
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.jj
@@ -52,6 +52,9 @@ import org.apache.lucene.queryparser.flexible.core.nodes.QuotedFieldQueryNode;
 import org.apache.lucene.queryparser.flexible.core.parser.SyntaxParser;
 import org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode;
 
+/**
+ * Parser for the standard Lucene syntax
+ */
 public class StandardSyntaxParser implements SyntaxParser {
 
 	private static final int CONJ_NONE =0;
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor.java
index ab2c349..483abef 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor.java
@@ -19,6 +19,7 @@ package org.apache.lucene.queryparser.flexible.standard.processors;
 
 import java.util.List;
 
+import org.apache.lucene.search.TermRangeQuery; // javadocs
 import org.apache.lucene.queryparser.flexible.core.QueryNodeException;
 import org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode;
 import org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;
@@ -26,6 +27,9 @@ import org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor
 import org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence;
 import org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode;
 
+/**
+ * Processes {@link TermRangeQuery}s with open ranges.
+ */
 public class OpenRangeQueryNodeProcessor extends QueryNodeProcessorImpl {
   
   final public static String OPEN_RANGE_TOKEN = "*";
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/AndQuery.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/AndQuery.java
index e6b24b4..9e080e6 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/AndQuery.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/AndQuery.java
@@ -21,6 +21,9 @@ import java.util.List;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.BooleanClause;
 
+/**
+ * Factory for conjunctions
+ */
 public class AndQuery extends ComposedQuery { 
   public AndQuery(List<SrndQuery> queries, boolean inf, String opName) { 
     super(queries, inf, opName);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/OrQuery.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/OrQuery.java
index 808cfb9..36d008d 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/OrQuery.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/OrQuery.java
@@ -23,6 +23,9 @@ import org.apache.lucene.search.BooleanClause;
 
 import java.io.IOException;
 
+/**
+ * Factory for disjunctions
+ */
 public class OrQuery extends ComposedQuery implements DistanceSubQuery { 
   public OrQuery(List<SrndQuery> queries, boolean infix, String opName) {
     super(queries, infix, opName);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.java
index f11c800..ddbb61a 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.java
@@ -64,6 +64,9 @@ import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.search.spans.SpanTermQuery;
 
 
+/**
+ * Factory for {@link SpanOrQuery}
+ */
 public class SpanNearClauseFactory { // FIXME: rename to SpanClauseFactory
   public SpanNearClauseFactory(IndexReader reader, String fieldName, BasicQueryFactory qf) {
     this.reader = reader;
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/TooManyBasicQueries.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/TooManyBasicQueries.java
index d39b34a..7e5a39d 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/TooManyBasicQueries.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/TooManyBasicQueries.java
@@ -18,6 +18,10 @@ package org.apache.lucene.queryparser.surround.query;
 
 import java.io.IOException; /* subclass to be usable from within Query.rewrite() */
 
+/**
+ * Exception thrown when {@link BasicQueryFactory} would exceed the limit
+ * of query clauses.
+ */
 public class TooManyBasicQueries extends IOException {
   public TooManyBasicQueries(int maxBasicQueries) {
     super("Exceeded maximum of " + maxBasicQueries + " basic queries.");
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/FilterBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/FilterBuilder.java
index 11538b4..af54944 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/FilterBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/FilterBuilder.java
@@ -23,7 +23,7 @@ import org.w3c.dom.Element;
  */
 
 /**
- * 
+ * Interface for building {@link Filter}s
  */
 public interface FilterBuilder {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/FilterBuilderFactory.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/FilterBuilderFactory.java
index 694dea1..5bf7c34 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/FilterBuilderFactory.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/FilterBuilderFactory.java
@@ -25,7 +25,7 @@ import java.util.HashMap;
  */
 
 /**
- *
+ * Factory for {@link FilterBuilder}
  */
 public class FilterBuilderFactory implements FilterBuilder {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/QueryBuilderFactory.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/QueryBuilderFactory.java
index 3590415..35ee0e9 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/QueryBuilderFactory.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/QueryBuilderFactory.java
@@ -25,7 +25,7 @@ import java.util.HashMap;
  */
 
 /**
- *
+ * Factory for {@link QueryBuilder}
  */
 public class QueryBuilderFactory implements QueryBuilder {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanFilterBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanFilterBuilder.java
index 98f13b2..0c8262d 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanFilterBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanFilterBuilder.java
@@ -32,7 +32,7 @@ import org.w3c.dom.NodeList;
  */
 
 /**
- *
+ * Builder for {@link BooleanFilter}
  */
 public class BooleanFilterBuilder implements FilterBuilder {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder.java
index 59f1d7d..d390cbf 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder.java
@@ -30,7 +30,7 @@ import org.w3c.dom.NodeList;
  */
 
 /**
- *
+ * Builder for {@link BooleanQuery}
  */
 public class BooleanQueryBuilder implements QueryBuilder {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingQueryBuilder.java
index 92596d6..6c75f95 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingQueryBuilder.java
@@ -24,7 +24,7 @@ import org.w3c.dom.Element;
  */
 
 /**
- *
+ * Builder for {@link BoostingQuery}
  */
 public class BoostingQueryBuilder implements QueryBuilder {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.java
index 49b9dfd..ca4a2c1 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.java
@@ -26,7 +26,7 @@ import org.w3c.dom.Element;
  */
 
 /**
- *
+ * Builder for {@link PayloadTermQuery}
  */
 public class BoostingTermBuilder extends SpanBuilderBase {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder.java
index 2ca21ef..3d71d9c 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder.java
@@ -25,7 +25,7 @@ import org.w3c.dom.Element;
  */
 
 /**
- *
+ * Builder for {@link ConstantScoreQuery}
  */
 public class ConstantScoreQueryBuilder implements QueryBuilder {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder.java
index e69916d..ab7527e 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder.java
@@ -26,7 +26,7 @@ import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
 
 /**
- * Build a DisjunctionMaxQuery.
+ * Builder for {@link DisjunctionMaxQuery}
  */
 public class DisjunctionMaxQueryBuilder implements QueryBuilder {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DuplicateFilterBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DuplicateFilterBuilder.java
index 69cd6d2..c044690 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DuplicateFilterBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DuplicateFilterBuilder.java
@@ -28,7 +28,7 @@ import org.w3c.dom.Element;
  */
 
 /**
- *
+ * Builder for {@link DuplicateFilter}
  */
 public class DuplicateFilterBuilder implements FilterBuilder {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/FilteredQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/FilteredQueryBuilder.java
index 16c8e32..4fa30c9 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/FilteredQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/FilteredQueryBuilder.java
@@ -30,7 +30,7 @@ import org.w3c.dom.Element;
  */
 
 /**
- *
+ * Builder for {@link FilteredQuery}
  */
 public class FilteredQueryBuilder implements QueryBuilder {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder.java
index fa4976e..18bd567 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder.java
@@ -28,7 +28,7 @@ import org.w3c.dom.NodeList;
  */
 
 /**
- *
+ * Builder for {@link FuzzyLikeThisQuery}
  */
 public class FuzzyLikeThisQueryBuilder implements QueryBuilder {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder.java
index 7fd8058..124afd7 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder.java
@@ -35,7 +35,7 @@ import org.w3c.dom.Element;
  */
 
 /**
- *
+ * Builder for {@link MoreLikeThisQuery}
  */
 public class LikeThisQueryBuilder implements QueryBuilder {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder.java
index 2f25b95..4f7dd16 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder.java
@@ -23,7 +23,7 @@ import org.w3c.dom.Element;
  */
 
 /**
- *
+ * Builder for {@link MatchAllDocsQuery}
  */
 public class MatchAllDocsQueryBuilder implements QueryBuilder {
   
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/RangeFilterBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/RangeFilterBuilder.java
index ac5a767..1b53172 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/RangeFilterBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/RangeFilterBuilder.java
@@ -28,7 +28,7 @@ import org.w3c.dom.Element;
 
 
 /**
- *
+ * Builder for {@link TermRangeFilter}
  */
 public class RangeFilterBuilder implements FilterBuilder {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanBuilderBase.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanBuilderBase.java
index 86eaaad..8cf4a43 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanBuilderBase.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanBuilderBase.java
@@ -1,6 +1,7 @@
 package org.apache.lucene.queryparser.xml.builders;
 
 import org.apache.lucene.search.Query;
+import org.apache.lucene.search.spans.SpanQuery; // javadocs
 import org.apache.lucene.queryparser.xml.ParserException;
 import org.w3c.dom.Element;
 /*
@@ -21,7 +22,7 @@ import org.w3c.dom.Element;
  */
 
 /**
- *
+ * Base class for building {@link SpanQuery}s
  */
 public abstract class SpanBuilderBase implements SpanQueryBuilder {
   
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder.java
index 96beed9..650ea20 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder.java
@@ -23,7 +23,7 @@ import org.w3c.dom.Element;
  */
 
 /**
- *
+ * Builder for {@link SpanFirstQuery}
  */
 public class SpanFirstBuilder extends SpanBuilderBase {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNearBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNearBuilder.java
index a7a20da..6140b8a 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNearBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNearBuilder.java
@@ -27,7 +27,7 @@ import java.util.List;
  */
 
 /**
- *
+ * Builder for {@link SpanNearQuery}
  */
 public class SpanNearBuilder extends SpanBuilderBase {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.java
index 1746036..e9df3f3 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.java
@@ -23,7 +23,7 @@ import org.w3c.dom.Element;
  */
 
 /**
- *
+ * Builder for {@link SpanNotQuery}
  */
 public class SpanNotBuilder extends SpanBuilderBase {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrBuilder.java
index e70e093..aee26f2 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrBuilder.java
@@ -27,7 +27,7 @@ import java.util.List;
  */
 
 /**
- *
+ * Builder for {@link SpanOrQuery}
  */
 public class SpanOrBuilder extends SpanBuilderBase {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.java
index 0c5cdca..80fa3e7 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.java
@@ -34,7 +34,7 @@ import java.util.List;
  */
 
 /**
- *
+ * Builder that analyzes the text into a {@link SpanOrQuery}
  */
 public class SpanOrTermsBuilder extends SpanBuilderBase {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.java
index 3ba23fd..3ca6c64 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.java
@@ -20,6 +20,9 @@ import org.apache.lucene.queryparser.xml.ParserException;
 import org.apache.lucene.queryparser.xml.QueryBuilder;
 import org.w3c.dom.Element;
 
+/**
+ * Interface for retrieving a {@link SpanQuery}.
+ */
 public interface SpanQueryBuilder extends QueryBuilder {
 	
 	public SpanQuery getSpanQuery(Element e) throws ParserException;
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory.java
index 1f2b2cc..02cc059 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory.java
@@ -25,7 +25,7 @@ import java.util.Map;
  */
 
 /**
- *
+ * Factory for {@link SpanQueryBuilder}s
  */
 public class SpanQueryBuilderFactory implements SpanQueryBuilder {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanTermBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanTermBuilder.java
index 2ae6916..45f06cf 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanTermBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanTermBuilder.java
@@ -24,7 +24,7 @@ import org.w3c.dom.Element;
  */
 
 /**
- *
+ * Builder for {@link SpanTermQuery}
  */
 public class SpanTermBuilder extends SpanBuilderBase {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermQueryBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermQueryBuilder.java
index bf0c110..31eb744 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermQueryBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermQueryBuilder.java
@@ -25,7 +25,7 @@ import org.w3c.dom.Element;
  */
 
 /**
- *
+ * Builder for {@link TermQuery}
  */
 public class TermQueryBuilder implements QueryBuilder {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder.java
index 919c990..3e1574a 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder.java
@@ -33,7 +33,7 @@ import java.io.StringReader;
  */
 
 /**
- *
+ * Builder for {@link TermsFilter}
  */
 public class TermsFilterBuilder implements FilterBuilder {
 
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/query/UnsupportedSpatialOperation.java b/lucene/spatial/src/java/org/apache/lucene/spatial/query/UnsupportedSpatialOperation.java
index 531d59f..5299724 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/query/UnsupportedSpatialOperation.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/query/UnsupportedSpatialOperation.java
@@ -18,6 +18,7 @@ package org.apache.lucene.spatial.query;
  */
 
 /**
+ * Exception thrown when the strategy cannot implement the requested operation.
  * @lucene.experimental
  */
 public class UnsupportedSpatialOperation extends UnsupportedOperationException {

