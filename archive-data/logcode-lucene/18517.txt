GitDiffStart: 260d294111b26f2d53828f35d4f533ebe22b5654 | Tue Jan 12 13:53:32 2010 +0000
diff --git a/contrib/CHANGES.txt b/contrib/CHANGES.txt
index 399470f..df6be7e 100644
--- a/contrib/CHANGES.txt
+++ b/contrib/CHANGES.txt
@@ -45,6 +45,9 @@ API Changes
    
  * LUCENE-2165: Add a constructor to SnowballAnalyzer that takes a Set of 
    stopwords, and deprecate the String[] one.  (Nick Burch via Robert Muir)
+
+ * LUCENE-2204: Change some package private classes/members to publicly accessible to implement
+   custom FragmentsBuilders. (Koji Sekiguchi)
    
 New features
 
diff --git a/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java b/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java
index 5c5ac96..e67e74f 100644
--- a/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java
+++ b/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldFragList.java
@@ -70,6 +70,22 @@ public class FieldFragList {
       }
     }
     
+    public List<SubInfo> getSubInfos(){
+      return subInfos;
+    }
+    
+    public float getTotalBoost(){
+      return totalBoost;
+    }
+    
+    public int getStartOffset(){
+      return startOffset;
+    }
+    
+    public int getEndOffset(){
+      return endOffset;
+    }
+    
     @Override
     public String toString(){
       StringBuilder sb = new StringBuilder();
@@ -80,17 +96,26 @@ public class FieldFragList {
       return sb.toString();
     }
     
-    static class SubInfo {
+    public static class SubInfo {
       final String text;  // unnecessary member, just exists for debugging purpose
       final List<Toffs> termsOffsets;   // usually termsOffsets.size() == 1,
                               // but if position-gap > 1 and slop > 0 then size() could be greater than 1
       int seqnum;
+
       SubInfo( String text, List<Toffs> termsOffsets, int seqnum ){
         this.text = text;
         this.termsOffsets = termsOffsets;
         this.seqnum = seqnum;
       }
       
+      public List<Toffs> getTermsOffsets(){
+        return termsOffsets;
+      }
+      
+      public int getSeqnum(){
+        return seqnum;
+      }
+      
       @Override
       public String toString(){
         StringBuilder sb = new StringBuilder();
diff --git a/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java b/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java
index 4adbdbb..15ae634 100644
--- a/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java
+++ b/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList.java
@@ -171,9 +171,15 @@ public class FieldPhraseList {
         this.startOffset = startOffset;
         this.endOffset = endOffset;
       }
-      void setEndOffset( int endOffset ){
+      public void setEndOffset( int endOffset ){
         this.endOffset = endOffset;
       }
+      public int getStartOffset(){
+        return startOffset;
+      }
+      public int getEndOffset(){
+        return endOffset;
+      }
       @Override
       public String toString(){
         StringBuilder sb = new StringBuilder();
diff --git a/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java b/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java
index ea6d1bf..7d65e64 100644
--- a/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java
+++ b/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase.java
@@ -268,6 +268,21 @@ public abstract class AbstractTestCase extends TestCase {
     protected boolean isDelimiter( int c ){
       return delimiters.indexOf( c ) >= 0;
     }
+    
+    public void reset( Reader input ) throws IOException {
+      super.reset( input );
+      reset();
+    }
+    
+    public void reset() throws IOException {
+      startTerm = 0;
+      nextStartOffset = 0;
+      snippet = null;
+      snippetBuffer.setLength( 0 );
+      charBufferIndex = BUFFER_SIZE;
+      charBufferLen = 0;
+      ch = 0;
+    }
   }
 
   protected void make1d1fIndex( String value ) throws Exception {

