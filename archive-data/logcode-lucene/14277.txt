GitDiffStart: 124728c97487911ab225397878e15c5469ba0360 | Sat Dec 10 18:17:34 2011 +0000
diff --git a/lucene/contrib/misc/src/java/org/apache/lucene/document/LazyDocument.java b/lucene/contrib/misc/src/java/org/apache/lucene/document/LazyDocument.java
index edaf7f5..b721708 100644
--- a/lucene/contrib/misc/src/java/org/apache/lucene/document/LazyDocument.java
+++ b/lucene/contrib/misc/src/java/org/apache/lucene/document/LazyDocument.java
@@ -28,7 +28,7 @@ import org.apache.lucene.index.FieldInfo;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.index.IndexableFieldType;
-import org.apache.lucene.index.PerDocFieldValues;
+import org.apache.lucene.index.DocValue;
 import org.apache.lucene.index.DocValues;
 import org.apache.lucene.util.BytesRef;
 
@@ -157,20 +157,20 @@ public class LazyDocument {
     }
 
     @Override
-    public PerDocFieldValues docValues() {
+    public DocValue docValue() {
       if (num == 0) {
-        return getDocument().getField(name).docValues();
+        return getDocument().getField(name).docValue();
       } else {
-        return getDocument().getFields(name)[num].docValues();
+        return getDocument().getFields(name)[num].docValue();
       }
     }
 
     @Override
-    public DocValues.Type docValuesType() {
+    public DocValues.Type docValueType() {
       if (num == 0) {
-        return getDocument().getField(name).docValuesType();
+        return getDocument().getField(name).docValueType();
       } else {
-        return getDocument().getFields(name)[num].docValuesType();
+        return getDocument().getFields(name)[num].docValueType();
       }
     }
 
diff --git a/lucene/src/java/org/apache/lucene/document/DocValuesField.java b/lucene/src/java/org/apache/lucene/document/DocValuesField.java
index 097a881..2cb494c 100644
--- a/lucene/src/java/org/apache/lucene/document/DocValuesField.java
+++ b/lucene/src/java/org/apache/lucene/document/DocValuesField.java
@@ -20,7 +20,7 @@ import java.io.Reader;
 import java.util.Comparator;
 
 import org.apache.lucene.index.IndexableFieldType;
-import org.apache.lucene.index.PerDocFieldValues;
+import org.apache.lucene.index.DocValue;
 import org.apache.lucene.index.DocValues;
 import org.apache.lucene.index.DocValues.Type; // javadocs
 import org.apache.lucene.util.BytesRef;
@@ -69,7 +69,7 @@ import org.apache.lucene.util.BytesRef;
  * </pre>
  * 
  * */
-public class DocValuesField extends Field implements PerDocFieldValues {
+public class DocValuesField extends Field implements DocValue {
 
   protected BytesRef bytes;
   protected double doubleValue;
@@ -94,7 +94,7 @@ public class DocValuesField extends Field implements PerDocFieldValues {
   }
 
   @Override
-  public PerDocFieldValues docValues() {
+  public DocValue docValue() {
     return this;
   }
 
@@ -307,7 +307,7 @@ public class DocValuesField extends Field implements PerDocFieldValues {
   }
 
   @Override
-  public DocValues.Type docValuesType() {
+  public DocValues.Type docValueType() {
     return type;
   }
 
diff --git a/lucene/src/java/org/apache/lucene/document/Field.java b/lucene/src/java/org/apache/lucene/document/Field.java
index 45b9a5a..26b26be 100644
--- a/lucene/src/java/org/apache/lucene/document/Field.java
+++ b/lucene/src/java/org/apache/lucene/document/Field.java
@@ -28,7 +28,7 @@ import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
 import org.apache.lucene.index.DocValues;
 import org.apache.lucene.index.IndexableFieldType;
 import org.apache.lucene.index.IndexableField;
-import org.apache.lucene.index.PerDocFieldValues;
+import org.apache.lucene.index.DocValue;
 import org.apache.lucene.util.BytesRef;
 
 /**
@@ -51,7 +51,7 @@ public class Field implements IndexableField {
   // pre-analyzed tokenStream for indexed fields
   protected TokenStream tokenStream;
   // length/offset for all primitive types
-  protected PerDocFieldValues docValues;
+  protected DocValue docValue;
   
   protected float boost = 1.0f;
 
@@ -292,17 +292,17 @@ public class Field implements IndexableField {
     return result.toString();
   }
   
-  public void setDocValues(PerDocFieldValues docValues) {
-    this.docValues = docValues;
+  public void setDocValue(DocValue docValue) {
+    this.docValue = docValue;
   }
 
   @Override
-  public PerDocFieldValues docValues() {
+  public DocValue docValue() {
     return null;
   }
   
   @Override
-  public DocValues.Type docValuesType() {
+  public DocValues.Type docValueType() {
     return null;
   }
 
diff --git a/lucene/src/java/org/apache/lucene/index/DocFieldProcessor.java b/lucene/src/java/org/apache/lucene/index/DocFieldProcessor.java
index df3f420..8610887 100644
--- a/lucene/src/java/org/apache/lucene/index/DocFieldProcessor.java
+++ b/lucene/src/java/org/apache/lucene/index/DocFieldProcessor.java
@@ -259,9 +259,9 @@ final class DocFieldProcessor extends DocConsumer {
       if (field.fieldType().stored()) {
         fieldsWriter.addField(field, fp.fieldInfo);
       }
-      final PerDocFieldValues docValues = field.docValues();
-      if (docValues != null) {
-        docValuesConsumer(field.docValuesType(), docState, fp.fieldInfo).add(docState.docID, docValues);
+      final DocValue docValue = field.docValue();
+      if (docValue != null) {
+        docValuesConsumer(field.docValueType(), docState, fp.fieldInfo).add(docState.docID, docValue);
       }
     }
 
diff --git a/lucene/src/java/org/apache/lucene/index/DocValue.java b/lucene/src/java/org/apache/lucene/index/DocValue.java
new file mode 100644
index 0000000..dacb7f6
--- /dev/null
+++ b/lucene/src/java/org/apache/lucene/index/DocValue.java
@@ -0,0 +1,100 @@
+package org.apache.lucene.index;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+import java.util.Comparator;
+
+import org.apache.lucene.document.DocValuesField;
+import org.apache.lucene.index.DocValues;
+import org.apache.lucene.index.DocValues.Type; // javadocs
+import org.apache.lucene.index.codecs.DocValuesConsumer; // javadocs
+import org.apache.lucene.util.BytesRef;
+
+/**
+ * Per document and field values consumed by {@link DocValuesConsumer}. 
+ * @see DocValuesField
+ * 
+ * @lucene.experimental
+ */
+public interface DocValue {
+
+  /**
+   * Sets the given <code>long</code> value.
+   */
+  public void setInt(long value);
+
+  /**
+   * Sets the given <code>float</code> value.
+   */
+  public void setFloat(float value);
+
+  /**
+   * Sets the given <code>double</code> value.
+   */
+  public void setFloat(double value);
+
+  /**
+   * Sets the given {@link BytesRef} value and the field's {@link Type}. The
+   * comparator for this field is set to <code>null</code>. If a
+   * <code>null</code> comparator is set the default comparator for the given
+   * {@link Type} is used.
+   */
+  public void setBytes(BytesRef value, DocValues.Type type);
+
+  /**
+   * Sets the given {@link BytesRef} value, the field's {@link Type} and the
+   * field's comparator. If the {@link Comparator} is set to <code>null</code>
+   * the default for the given {@link Type} is used instead.
+   */
+  public void setBytes(BytesRef value, DocValues.Type type, Comparator<BytesRef> comp);
+
+  /**
+   * Returns the set {@link BytesRef} or <code>null</code> if not set.
+   */
+  public BytesRef getBytes();
+
+  /**
+   * Returns the set {@link BytesRef} comparator or <code>null</code> if not set
+   */
+  public Comparator<BytesRef> bytesComparator();
+
+  /**
+   * Returns the set floating point value or <code>0.0d</code> if not set.
+   */
+  public double getFloat();
+
+  /**
+   * Returns the set <code>long</code> value of <code>0</code> if not set.
+   */
+  public long getInt();
+
+  /**
+   * Sets the {@link BytesRef} comparator for this field. If the field has a
+   * numeric {@link Type} the comparator will be ignored.
+   */
+  public void setBytesComparator(Comparator<BytesRef> comp);
+
+  /**
+   * Sets the {@link Type}
+   */
+  public void setDocValuesType(DocValues.Type type);
+
+  /**
+  * Returns the {@link Type}
+  */
+  public DocValues.Type docValueType();
+}
diff --git a/lucene/src/java/org/apache/lucene/index/IndexableField.java b/lucene/src/java/org/apache/lucene/index/IndexableField.java
index 4a2c8a9..54ffca4 100644
--- a/lucene/src/java/org/apache/lucene/index/IndexableField.java
+++ b/lucene/src/java/org/apache/lucene/index/IndexableField.java
@@ -76,10 +76,10 @@ public interface IndexableField {
   public IndexableFieldType fieldType();
   
   /** Non-null if doc values should be indexed */
-  public PerDocFieldValues docValues();
+  public DocValue docValue();
 
-  /** DocValues type; only used if docValues is non-null */
-  public DocValues.Type docValuesType();
+  /** DocValues type; only used if docValue is non-null */
+  public DocValues.Type docValueType();
 
   /**
    * Creates the TokenStream used for indexing this field.  If appropriate,
diff --git a/lucene/src/java/org/apache/lucene/index/PerDocFieldValues.java b/lucene/src/java/org/apache/lucene/index/PerDocFieldValues.java
deleted file mode 100644
index c82545e..0000000
--- a/lucene/src/java/org/apache/lucene/index/PerDocFieldValues.java
+++ /dev/null
@@ -1,100 +0,0 @@
-package org.apache.lucene.index;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import java.util.Comparator;
-
-import org.apache.lucene.document.DocValuesField;
-import org.apache.lucene.index.DocValues;
-import org.apache.lucene.index.DocValues.Type; // javadocs
-import org.apache.lucene.index.codecs.DocValuesConsumer; // javadocs
-import org.apache.lucene.util.BytesRef;
-
-/**
- * Per document and field values consumed by {@link DocValuesConsumer}. 
- * @see DocValuesField
- * 
- * @lucene.experimental
- */
-public interface PerDocFieldValues {
-
-  /**
-   * Sets the given <code>long</code> value.
-   */
-  public void setInt(long value);
-
-  /**
-   * Sets the given <code>float</code> value.
-   */
-  public void setFloat(float value);
-
-  /**
-   * Sets the given <code>double</code> value.
-   */
-  public void setFloat(double value);
-
-  /**
-   * Sets the given {@link BytesRef} value and the field's {@link Type}. The
-   * comparator for this field is set to <code>null</code>. If a
-   * <code>null</code> comparator is set the default comparator for the given
-   * {@link Type} is used.
-   */
-  public void setBytes(BytesRef value, DocValues.Type type);
-
-  /**
-   * Sets the given {@link BytesRef} value, the field's {@link Type} and the
-   * field's comparator. If the {@link Comparator} is set to <code>null</code>
-   * the default for the given {@link Type} is used instead.
-   */
-  public void setBytes(BytesRef value, DocValues.Type type, Comparator<BytesRef> comp);
-
-  /**
-   * Returns the set {@link BytesRef} or <code>null</code> if not set.
-   */
-  public BytesRef getBytes();
-
-  /**
-   * Returns the set {@link BytesRef} comparator or <code>null</code> if not set
-   */
-  public Comparator<BytesRef> bytesComparator();
-
-  /**
-   * Returns the set floating point value or <code>0.0d</code> if not set.
-   */
-  public double getFloat();
-
-  /**
-   * Returns the set <code>long</code> value of <code>0</code> if not set.
-   */
-  public long getInt();
-
-  /**
-   * Sets the {@link BytesRef} comparator for this field. If the field has a
-   * numeric {@link Type} the comparator will be ignored.
-   */
-  public void setBytesComparator(Comparator<BytesRef> comp);
-
-  /**
-   * Sets the {@link Type}
-   */
-  public void setDocValuesType(DocValues.Type type);
-
-  /**
-  * Returns the {@link Type}
-  */
-  public DocValues.Type docValuesType();
-}
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer.java b/lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer.java
index e8ddee5..f189bad 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer.java
@@ -21,14 +21,14 @@ import java.io.IOException;
 import org.apache.lucene.index.DocValues;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.MergeState;
-import org.apache.lucene.index.PerDocFieldValues;
+import org.apache.lucene.index.DocValue;
 import org.apache.lucene.util.Bits;
 
 /**
- * Abstract API that consumes {@link PerDocFieldValues}.
+ * Abstract API that consumes {@link DocValue}s.
  * {@link DocValuesConsumer} are always associated with a specific field and
  * segments. Concrete implementations of this API write the given
- * {@link PerDocFieldValues} into a implementation specific format depending on
+ * {@link DocValue} into a implementation specific format depending on
  * the fields meta-data.
  * 
  * @lucene.experimental
@@ -36,28 +36,28 @@ import org.apache.lucene.util.Bits;
 public abstract class DocValuesConsumer {
 
   /**
-   * Adds the given {@link PerDocFieldValues} instance to this
+   * Adds the given {@link DocValue} instance to this
    * {@link DocValuesConsumer}
    * 
    * @param docID
    *          the document ID to add the value for. The docID must always
    *          increase or be <tt>0</tt> if it is the first call to this method.
-   * @param docValues
-   *          the values to add
+   * @param docValue
+   *          the value to add
    * @throws IOException
    *           if an {@link IOException} occurs
    */
-  public abstract void add(int docID, PerDocFieldValues docValues)
+  public abstract void add(int docID, DocValue docValue)
       throws IOException;
 
   /**
    * Called when the consumer of this API is doc with adding
-   * {@link PerDocFieldValues} to this {@link DocValuesConsumer}
+   * {@link DocValue} to this {@link DocValuesConsumer}
    * 
    * @param docCount
    *          the total number of documents in this {@link DocValuesConsumer}.
    *          Must be greater than or equal the last given docID to
-   *          {@link #add(int, PerDocFieldValues)}.
+   *          {@link #add(int, DocValue)}.
    * @throws IOException
    */
   public abstract void finish(int docCount) throws IOException;
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.java b/lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.java
index 2b227e3..789d3aa 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.java
@@ -24,7 +24,7 @@ import java.util.concurrent.atomic.AtomicLong;
 
 import org.apache.lucene.index.DocValues;
 import org.apache.lucene.index.IndexFileNames;
-import org.apache.lucene.index.PerDocFieldValues;
+import org.apache.lucene.index.DocValue;
 import org.apache.lucene.index.DocValues.SortedSource;
 import org.apache.lucene.index.DocValues.Source;
 import org.apache.lucene.index.DocValues.Type;
@@ -302,9 +302,9 @@ public final class Bytes {
     }
 
     @Override
-    public void add(int docID, PerDocFieldValues docValues) throws IOException {
+    public void add(int docID, DocValue docValue) throws IOException {
       final BytesRef ref;
-      if ((ref = docValues.getBytes()) != null) {
+      if ((ref = docValue.getBytes()) != null) {
         add(docID, ref);
       }
     }
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Floats.java b/lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Floats.java
index b2ed4ea..0a55227 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Floats.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Floats.java
@@ -19,7 +19,7 @@ package org.apache.lucene.index.codecs.lucene40.values;
 import java.io.IOException;
 
 import org.apache.lucene.index.DocValues;
-import org.apache.lucene.index.PerDocFieldValues;
+import org.apache.lucene.index.DocValue;
 import org.apache.lucene.index.DocValues.Source;
 import org.apache.lucene.index.DocValues.Type;
 import org.apache.lucene.store.Directory;
@@ -85,8 +85,8 @@ public class Floats {
     }
     
     @Override
-    public void add(int docID, PerDocFieldValues docValues) throws IOException {
-      add(docID, docValues.getFloat());
+    public void add(int docID, DocValue docValue) throws IOException {
+      add(docID, docValue.getFloat());
     }
     
     @Override
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Ints.java b/lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Ints.java
index 5da35ab..bc5de34 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Ints.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Ints.java
@@ -21,7 +21,7 @@ import java.io.IOException;
 
 import org.apache.lucene.index.DocValues;
 import org.apache.lucene.index.DocValues.Type;
-import org.apache.lucene.index.PerDocFieldValues;
+import org.apache.lucene.index.DocValue;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.IOContext;
 import org.apache.lucene.store.IndexInput;
@@ -109,8 +109,8 @@ public final class Ints {
     }
 
     @Override
-    public void add(int docID, PerDocFieldValues docValues) throws IOException {
-      add(docID, docValues.getInt());
+    public void add(int docID, DocValue docValue) throws IOException {
+      add(docID, docValue.getInt());
     }
     
     @Override
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/PackedIntValues.java b/lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/PackedIntValues.java
index 10983e4..2670510 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/PackedIntValues.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/PackedIntValues.java
@@ -20,7 +20,7 @@ import java.io.IOException;
 
 import org.apache.lucene.index.DocValues;
 import org.apache.lucene.index.IndexFileNames;
-import org.apache.lucene.index.PerDocFieldValues;
+import org.apache.lucene.index.DocValue;
 import org.apache.lucene.index.DocValues.Source;
 import org.apache.lucene.index.DocValues.Type;
 import org.apache.lucene.index.codecs.lucene40.values.FixedStraightBytesImpl.FixedBytesWriterBase;
@@ -151,8 +151,8 @@ class PackedIntValues {
     }
 
     @Override
-    public void add(int docID, PerDocFieldValues docValues) throws IOException {
-      add(docID, docValues.getInt());
+    public void add(int docID, DocValue docValue) throws IOException {
+      add(docID, docValue.getInt());
     }
   }
 
diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexableField.java b/lucene/src/test/org/apache/lucene/index/TestIndexableField.java
index 1e170f3..0310f8d 100644
--- a/lucene/src/test/org/apache/lucene/index/TestIndexableField.java
+++ b/lucene/src/test/org/apache/lucene/index/TestIndexableField.java
@@ -156,12 +156,12 @@ public class TestIndexableField extends LuceneTestCase {
 
     // TODO: randomly enable doc values
     @Override
-    public PerDocFieldValues docValues() {
+    public DocValue docValue() {
       return null;
     }
 
     @Override
-    public DocValues.Type docValuesType() {
+    public DocValues.Type docValueType() {
       return null;
     }
 

