GitDiffStart: 54b8e81b1fd9520cbd7eb5895582b6c9cabbbbbc | Thu Nov 15 23:56:02 2012 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index cc14044..a7814c4 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -199,6 +199,11 @@ Bug Fixes
   foobar~2 is equivalent to FooBar~2 on a field that includes lowercasing.
   (yonik)
 
+* SOLR-4081: QueryParsing.toString, used during debugQuery=true, did not
+  correctly handle ExtendedQueries such as WrappedQuery
+  (used when cache=false), spatial queries, and frange queires.
+  (Eirik Lygre, yonik)
+
 
 Other Changes
 ----------------------
diff --git a/solr/core/src/java/org/apache/solr/schema/LatLonType.java b/solr/core/src/java/org/apache/solr/schema/LatLonType.java
index 1643b94..bf29758 100644
--- a/solr/core/src/java/org/apache/solr/schema/LatLonType.java
+++ b/solr/core/src/java/org/apache/solr/schema/LatLonType.java
@@ -553,7 +553,7 @@ class SpatialDistanceQuery extends ExtendedQueryBase implements PostFilter {
   public String toString(String field)
   {
     float boost = getBoost();
-    return (boost!=1.0?"(":"") +
+    return super.getOptions() + (boost!=1.0?"(":"") +
             (calcDist ? "geofilt" : "bbox") + "(latlonSource="+origField +"(" + latSource + "," + lonSource + ")"
             +",latCenter="+latCenter+",lonCenter="+lonCenter
             +",dist=" + dist
diff --git a/solr/core/src/java/org/apache/solr/search/ExtendedQueryBase.java b/solr/core/src/java/org/apache/solr/search/ExtendedQueryBase.java
index 08b81c8..1ad16b4 100644
--- a/solr/core/src/java/org/apache/solr/search/ExtendedQueryBase.java
+++ b/solr/core/src/java/org/apache/solr/search/ExtendedQueryBase.java
@@ -54,13 +54,20 @@ public class ExtendedQueryBase extends Query implements ExtendedQuery {
   }
 
   public String getOptions() {
+    return getOptionsString(this);
+  }
+
+  public static String getOptionsString(ExtendedQuery q) {
     StringBuilder sb = new StringBuilder();
-    if (!cache) {
+    if (!q.getCache()) {
       sb.append("{!cache=false");
-      sb.append(" cost=");
-      sb.append(cost);
+      int cost = q.getCost();
+      if (cost != 0) {
+        sb.append(" cost=");
+        sb.append(q.getCost());
+      }
       sb.append("}");
-    } else if (cacheSep) {
+    } else if (q.getCacheSep()) {
       sb.append("{!cache=sep");
       sb.append("}");
     }
diff --git a/solr/core/src/java/org/apache/solr/search/QueryParsing.java b/solr/core/src/java/org/apache/solr/search/QueryParsing.java
index 4809825..a465b3a 100644
--- a/solr/core/src/java/org/apache/solr/search/QueryParsing.java
+++ b/solr/core/src/java/org/apache/solr/search/QueryParsing.java
@@ -536,6 +536,11 @@ public class QueryParsing {
     } else if (query instanceof ConstantScoreQuery) {
       out.append(query.toString());
       writeBoost = false;
+    } else if (query instanceof WrappedQuery) {
+      WrappedQuery q = (WrappedQuery)query;
+      out.append(q.getOptions());
+      toString(q.getWrappedQuery(), schema, out, flags);
+      writeBoost = false; // we don't use the boost on wrapped queries
     } else {
       out.append(query.getClass().getSimpleName()
               + '(' + query.toString() + ')');
diff --git a/solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery.java b/solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery.java
index 622de01..c081574 100755
--- a/solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery.java
+++ b/solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery.java
@@ -211,7 +211,7 @@ public class SolrConstantScoreQuery extends ConstantScoreQuery implements Extend
   /** Prints a user-readable version of this query. */
   @Override
   public String toString(String field) {
-    return "ConstantScore(" + filter.toString()
+    return ExtendedQueryBase.getOptionsString(this) + "ConstantScore(" + filter.toString()
       + (getBoost()==1.0 ? ")" : "^" + getBoost());
   }
 

