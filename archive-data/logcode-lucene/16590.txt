GitDiffStart: 604730465d57ea6be8063509e75e2f837e3a980a | Sun Jan 16 01:46:00 2011 +0000
diff --git a/lucene/src/java/org/apache/lucene/index/DocumentsWriter.java b/lucene/src/java/org/apache/lucene/index/DocumentsWriter.java
index ba44b4a..91d0d2e 100644
--- a/lucene/src/java/org/apache/lucene/index/DocumentsWriter.java
+++ b/lucene/src/java/org/apache/lucene/index/DocumentsWriter.java
@@ -370,13 +370,11 @@ final class DocumentsWriter {
       long perThreadRAMUsedBeforeAdd = dwpt.bytesUsed();
       dwpt.addDocument(doc, analyzer);
 
-      synchronized(DocumentsWriter.this) {
-        if (delTerm != null) {
-          deleteTerm(delTerm);
-        }
-        dwpt.commitDocument();
-        numDocsInRAM.incrementAndGet();
+      if (delTerm != null) {
+        deleteTerm(delTerm);
       }
+      dwpt.commitDocument();
+      numDocsInRAM.incrementAndGet();
 
       newSegment = finishAddDocument(dwpt, perThreadRAMUsedBeforeAdd);
       if (newSegment != null) {
@@ -502,19 +500,11 @@ final class DocumentsWriter {
                 "reating compound file for newly flushed segment " + newSegment.name);
           }
 
-          indexWriter.deleter.deleteFile(IndexFileNames.segmentFileName(newSegment.name, "",
-              IndexFileNames.COMPOUND_FILE_EXTENSION));
-          for (String file : newSegment.files()) {
-            indexWriter.deleter.deleteFile(file);
-          }
-
+          indexWriter.deleter.refresh(newSegment.name);
         }
       }
 
-      for (String file : newSegment.files()) {
-        indexWriter.deleter.deleteFile(file);
-      }
-
+      indexWriter.deleter.deleteNewFiles(newSegment.files());
       newSegment.setUseCompoundFile(true);
 
     }
diff --git a/lucene/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/src/java/org/apache/lucene/index/IndexWriter.java
index 72533a8..b4b5fc8 100644
--- a/lucene/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/src/java/org/apache/lucene/index/IndexWriter.java
@@ -1396,9 +1396,9 @@ public class IndexWriter implements Closeable {
   public void updateDocument(Term term, Document doc, Analyzer analyzer)
       throws CorruptIndexException, IOException {
     ensureOpen();
-    boolean maybeMerge = false;
     try {
       boolean success = false;
+      boolean maybeMerge = false;
       try {
         maybeMerge = docWriter.updateDocument(doc, analyzer, term);
         success = true;
@@ -1406,13 +1406,13 @@ public class IndexWriter implements Closeable {
         if (!success && infoStream != null)
           message("hit exception updating document");
       }
+
+      if (maybeMerge) {
+        maybeMerge();
+      }
     } catch (OutOfMemoryError oom) {
       handleOOM(oom, "updateDocument");
     }
-
-    if (maybeMerge) {
-      maybeMerge();
-    }
   }
 
   // for test purpose
@@ -2186,6 +2186,9 @@ public class IndexWriter implements Closeable {
           }
 
           // Update SI appropriately
+          // if this call is removed in the future we need to make
+          // sure that info.clearFiles() is called here
+          info.setDocStore(info.getDocStoreOffset(), newDsName, info.getDocStoreIsCompoundFile());
           info.dir = directory;
           info.name = newSegName;
 
@@ -2501,7 +2504,6 @@ public class IndexWriter implements Closeable {
       boolean maybeMerge = docWriter.flushAllThreads(applyAllDeletes);
 
       synchronized(this) {
-
         if (!applyAllDeletes) {
           // If deletes alone are consuming > 1/2 our RAM
           // buffer, force them all to apply now. This is to
@@ -2536,8 +2538,8 @@ public class IndexWriter implements Closeable {
         success = true;
 
         return maybeMerge;
-      }
 
+      }
     } catch (OutOfMemoryError oom) {
       handleOOM(oom, "doFlush");
       // never hit
@@ -2697,6 +2699,12 @@ public class IndexWriter implements Closeable {
 
     commitMergedDeletes(merge, mergedReader);
 
+    // If the doc store we are using has been closed and
+    // is in now compound format (but wasn't when we
+    // started), then we will switch to the compound
+    // format as well:
+    setMergeDocStoreIsCompoundFile(merge);
+
     segmentInfos.subList(start, start + merge.segments.size()).clear();
     assert !segmentInfos.contains(merge.info);
     segmentInfos.add(start, merge.info);
@@ -2972,6 +2980,23 @@ public class IndexWriter implements Closeable {
     runningMerges.remove(merge);
   }
 
+  private synchronized void setMergeDocStoreIsCompoundFile(MergePolicy.OneMerge merge) {
+    final String mergeDocStoreSegment = merge.info.getDocStoreSegment();
+    if (mergeDocStoreSegment != null && !merge.info.getDocStoreIsCompoundFile()) {
+      final int size = segmentInfos.size();
+      for(int i=0;i<size;i++) {
+        final SegmentInfo info = segmentInfos.info(i);
+        final String docStoreSegment = info.getDocStoreSegment();
+        if (docStoreSegment != null &&
+            docStoreSegment.equals(mergeDocStoreSegment) &&
+            info.getDocStoreIsCompoundFile()) {
+          merge.info.setDocStoreIsCompoundFile(true);
+          break;
+        }
+      }
+    }
+  }
+
   private synchronized void closeMergeReaders(MergePolicy.OneMerge merge, boolean suppressExceptions) throws IOException {
     final int numSegments = merge.segments.size();
     if (suppressExceptions) {
diff --git a/lucene/src/java/org/apache/lucene/index/SegmentInfo.java b/lucene/src/java/org/apache/lucene/index/SegmentInfo.java
index 52a01bb..0076386 100644
--- a/lucene/src/java/org/apache/lucene/index/SegmentInfo.java
+++ b/lucene/src/java/org/apache/lucene/index/SegmentInfo.java
@@ -409,6 +409,20 @@ public final class SegmentInfo {
   }
 
   @Deprecated
+  public void setDocStoreIsCompoundFile(boolean docStoreIsCompoundFile) {
+    this.docStoreIsCompoundFile = docStoreIsCompoundFile;
+    clearFiles();
+  }
+
+  @Deprecated
+  void setDocStore(int offset, String segment, boolean isCompoundFile) {
+    docStoreOffset = offset;
+    docStoreSegment = segment;
+    docStoreIsCompoundFile = isCompoundFile;
+    clearFiles();
+  }
+
+  @Deprecated
   public String getDocStoreSegment() {
     return docStoreSegment;
   }
diff --git a/lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter.java b/lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter.java
index 2d71a31..7cdcc0a 100644
--- a/lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter.java
+++ b/lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter.java
@@ -112,6 +112,10 @@ final class TermVectorsTermsWriter extends TermsHashConsumer {
 
     assert docWriter.writer.testPoint("TermVectorsTermsWriter.finishDocument start");
 
+    if (numVectorFields == 0) {
+      return;
+    }
+
     initTermVectorsWriter();
 
     fill(docState.docID);
diff --git a/lucene/src/java/org/apache/lucene/index/TermVectorsWriter.java b/lucene/src/java/org/apache/lucene/index/TermVectorsWriter.java
index 5789f00..b00a528 100644
--- a/lucene/src/java/org/apache/lucene/index/TermVectorsWriter.java
+++ b/lucene/src/java/org/apache/lucene/index/TermVectorsWriter.java
@@ -20,12 +20,13 @@ package org.apache.lucene.index;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.IndexOutput;
 import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.StringHelper;
 
 import java.io.IOException;
 
 final class TermVectorsWriter {
-  
+
   private IndexOutput tvx = null, tvd = null, tvf = null;
   private FieldInfos fieldInfos;
 
@@ -46,7 +47,7 @@ final class TermVectorsWriter {
   /**
    * Add a complete document specified by all its term vectors. If document has no
    * term vectors, add value for tvx.
-   * 
+   *
    * @param vectors
    * @throws IOException
    */
@@ -99,7 +100,7 @@ final class TermVectorsWriter {
         final int[] freqs = vectors[i].getTermFrequencies();
 
         for (int j=0; j<numTerms; j++) {
-          
+
           int start = j == 0 ? 0 : StringHelper.bytesDifference(terms[j-1].bytes,
                                                    terms[j-1].length,
                                                    terms[j].bytes,
@@ -181,30 +182,11 @@ final class TermVectorsWriter {
     assert tvd.getFilePointer() == tvdPosition;
     assert tvf.getFilePointer() == tvfPosition;
   }
-  
+
   /** Close all streams. */
   final void close() throws IOException {
     // make an effort to close all streams we can but remember and re-throw
     // the first exception encountered in this process
-    IOException keep = null;
-    if (tvx != null)
-      try {
-        tvx.close();
-      } catch (IOException e) {
-        keep = e;
-      }
-    if (tvd != null)
-      try {
-        tvd.close();
-      } catch (IOException e) {
-        if (keep == null) keep = e;
-      }
-    if (tvf != null)
-      try {
-        tvf.close();
-      } catch (IOException e) {
-        if (keep == null) keep = e;
-      }
-    if (keep != null) throw (IOException) keep.fillInStackTrace();
+    IOUtils.closeSafely(tvx, tvd, tvf);
   }
 }

