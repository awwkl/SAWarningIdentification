GitDiffStart: de9099fb7222b7b86067737b334d2334fdb8bff2 | Wed Feb 25 22:29:18 2004 +0000
diff --git a/src/java/org/apache/lucene/search/PrefixQuery.java b/src/java/org/apache/lucene/search/PrefixQuery.java
index 96df060..c0aaffb 100644
--- a/src/java/org/apache/lucene/search/PrefixQuery.java
+++ b/src/java/org/apache/lucene/search/PrefixQuery.java
@@ -69,6 +69,9 @@ public class PrefixQuery extends Query {
     this.prefix = prefix;
   }
 
+  /** Returns the prefix of this query. */
+  public Term getPrefix() { return prefix; }
+
   public Query rewrite(IndexReader reader) throws IOException {
     BooleanQuery query = new BooleanQuery();
     TermEnum enumerator = reader.terms(prefix);
@@ -113,4 +116,5 @@ public class PrefixQuery extends Query {
     }
     return buffer.toString();
   }
+
 }
diff --git a/src/java/org/apache/lucene/search/RangeQuery.java b/src/java/org/apache/lucene/search/RangeQuery.java
index bd86179..8e67b72 100644
--- a/src/java/org/apache/lucene/search/RangeQuery.java
+++ b/src/java/org/apache/lucene/search/RangeQuery.java
@@ -153,11 +153,21 @@ public class RangeQuery extends Query
       return Query.mergeBooleanQueries(queries);
     }
 
-    private String getField()
-    {
-        return (lowerTerm != null ? lowerTerm.field() : upperTerm.field());
+    /** Returns the field name for this query */
+    public String getField() {
+      return (lowerTerm != null ? lowerTerm.field() : upperTerm.field());
     }
 
+    /** Returns the lower term of this range query */
+    public Term getLowerTerm() { return lowerTerm; }
+
+    /** Returns the upper term of this range query */
+    public Term getUpperTerm() { return upperTerm; }
+
+    /** Returns <code>true</code> if the range query is inclusive */
+    public boolean isInclusive() { return inclusive; }
+
+
     /** Prints a user-readable version of this query. */
     public String toString(String field)
     {

