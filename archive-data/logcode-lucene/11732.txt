GitDiffStart: f7b94431d59a376cfc94f8286c76f76ffafc1827 | Wed Jul 25 14:35:02 2012 +0000
diff --git a/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java b/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
index 7fae246..affce37 100644
--- a/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
+++ b/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
@@ -374,7 +374,7 @@ public class SolrResourceLoader implements ResourceLoader
   private static final Map<String, String> classNameCache = new ConcurrentHashMap<String, String>();
 
   // A static map of AnalysisSPILoaders, keyed by ClassLoader used (because it can change during Solr lifetime) and expected base class:
-  private static final WeakIdentityMap<ClassLoader, Map<Class<?>,AnalysisSPILoader<?>>> expectedTypesSPILoaders = WeakIdentityMap.newConcurrentHashMap();
+  private static final WeakIdentityMap<ClassLoader, Map<Class,AnalysisSPILoader>> expectedTypesSPILoaders = WeakIdentityMap.newConcurrentHashMap();
 
   // Using this pattern, legacy analysis components from previous Solr versions are identified and delegated to SPI loader:
   private static final Pattern legacyAnalysisPattern = 
@@ -412,16 +412,15 @@ public class SolrResourceLoader implements ResourceLoader
     if (m.matches()) {
       log.trace("Trying to load class from analysis SPI");
       // retrieve the map of classLoader -> expectedType -> SPI from cache / regenerate cache
-      Map<Class<?>,AnalysisSPILoader<?>> spiLoaders = expectedTypesSPILoaders.get(classLoader);
+      Map<Class,AnalysisSPILoader> spiLoaders = expectedTypesSPILoaders.get(classLoader);
       if (spiLoaders == null) {
-        spiLoaders = new IdentityHashMap<Class<?>,AnalysisSPILoader<?>>(3);
+        spiLoaders = new IdentityHashMap<Class,AnalysisSPILoader>(3);
         spiLoaders.put(CharFilterFactory.class, CharFilterFactory.getSPILoader(classLoader));
         spiLoaders.put(TokenizerFactory.class, TokenizerFactory.getSPILoader(classLoader));
         spiLoaders.put(TokenFilterFactory.class, TokenFilterFactory.getSPILoader(classLoader));
         expectedTypesSPILoaders.put(classLoader, spiLoaders);
       }
-      @SuppressWarnings("unchecked") final AnalysisSPILoader<? extends T> loader =
-        (AnalysisSPILoader<? extends T>) spiLoaders.get(expectedType);
+      final AnalysisSPILoader loader = spiLoaders.get(expectedType);
       if (loader != null) {
         // it's a correct expected type for analysis! Let's go on!
         try {

