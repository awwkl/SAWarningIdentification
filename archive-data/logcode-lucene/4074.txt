GitDiffStart: 5d180157b9880c74c2d374a6004e7d24a55891a6 | Fri Mar 6 17:46:43 2015 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/util/Version.java b/lucene/core/src/java/org/apache/lucene/util/Version.java
index ef2d331..d57c284 100644
--- a/lucene/core/src/java/org/apache/lucene/util/Version.java
+++ b/lucene/core/src/java/org/apache/lucene/util/Version.java
@@ -102,7 +102,9 @@ public final class Version {
     try {
       major = Integer.parseInt(token);
     } catch (NumberFormatException nfe) {
-      throw new ParseException("Failed to parse major version from \"" + token + "\" (got: " + version + ")", 0);
+      ParseException p = new ParseException("Failed to parse major version from \"" + token + "\" (got: " + version + ")", 0);
+      p.initCause(nfe);
+      throw p;
     }
 
     if (tokens.hasMoreTokens() == false) {
@@ -114,7 +116,9 @@ public final class Version {
     try {
       minor = Integer.parseInt(token);
     } catch (NumberFormatException nfe) {
-      throw new ParseException("Failed to parse minor version from \"" + token + "\" (got: " + version + ")", 0);
+      ParseException p = new ParseException("Failed to parse minor version from \"" + token + "\" (got: " + version + ")", 0);
+      p.initCause(nfe);
+      throw p;
     }
 
     int bugfix = 0;
@@ -125,7 +129,9 @@ public final class Version {
       try {
         bugfix = Integer.parseInt(token);
       } catch (NumberFormatException nfe) {
-        throw new ParseException("Failed to parse bugfix version from \"" + token + "\" (got: " + version + ")", 0);
+        ParseException p = new ParseException("Failed to parse bugfix version from \"" + token + "\" (got: " + version + ")", 0);
+        p.initCause(nfe);
+        throw p;
       }
 
       if (tokens.hasMoreTokens()) {
@@ -133,7 +139,9 @@ public final class Version {
         try {
           prerelease = Integer.parseInt(token);
         } catch (NumberFormatException nfe) {
-          throw new ParseException("Failed to parse prerelease version from \"" + token + "\" (got: " + version + ")", 0);
+          ParseException p = new ParseException("Failed to parse prerelease version from \"" + token + "\" (got: " + version + ")", 0);
+          p.initCause(nfe);
+          throw p;
         }
         if (prerelease == 0) {
           throw new ParseException("Invalid value " + prerelease + " for prerelease; should be 1 or 2 (got: " + version + ")", 0);

