GitDiffStart: 4401ef4dae285889ad56fa3baae824e345c3d9cc | Wed Jun 29 19:46:14 2011 +0000
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.java b/lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.java
index bf9e160..344810f 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.java
@@ -471,7 +471,7 @@ public class MemoryCodec extends Codec {
 
     @Override
     public int nextPosition() {
-      if (VERBOSE) System.out.println("    nextPos storePayloads=" + storePayloads);
+      if (VERBOSE) System.out.println("    nextPos storePayloads=" + storePayloads + " this=" + this);
       assert posPending > 0;
       posPending--;
       if (!storePayloads) {
@@ -488,6 +488,9 @@ public class MemoryCodec extends Codec {
         payload.offset = in.getPosition();
         in.skipBytes(payloadLength);
         payload.length = payloadLength;
+        // Necessary, in case caller changed the
+        // payload.bytes from prior call:
+        payload.bytes = buffer;
         payloadRetrieved = false;
       }
 
diff --git a/lucene/src/java/org/apache/lucene/store/ByteArrayDataInput.java b/lucene/src/java/org/apache/lucene/store/ByteArrayDataInput.java
index 9caed4a..2ebdf89 100644
--- a/lucene/src/java/org/apache/lucene/store/ByteArrayDataInput.java
+++ b/lucene/src/java/org/apache/lucene/store/ByteArrayDataInput.java
@@ -59,6 +59,7 @@ public final class ByteArrayDataInput extends DataInput {
 
   public void skipBytes(int count) {
     pos += count;
+    assert pos <= limit;
   }
 
   @Override
diff --git a/lucene/src/java/org/apache/lucene/util/BytesRef.java b/lucene/src/java/org/apache/lucene/util/BytesRef.java
index 22d6545..de40c3c 100644
--- a/lucene/src/java/org/apache/lucene/util/BytesRef.java
+++ b/lucene/src/java/org/apache/lucene/util/BytesRef.java
@@ -20,7 +20,8 @@ package org.apache.lucene.util;
 import java.util.Comparator;
 
 /** Represents byte[], as a slice (offset + length) into an
- *  existing byte[].
+ *  existing byte[].  The {@link #bytes} member should never be null;
+ *  use {@link #EMPTY_BYTES} if necessary.
  *
  *  @lucene.experimental */
 public final class BytesRef implements Comparable<BytesRef> {
diff --git a/lucene/src/java/org/apache/lucene/util/CharsRef.java b/lucene/src/java/org/apache/lucene/util/CharsRef.java
index e779efa..2d87a0d 100644
--- a/lucene/src/java/org/apache/lucene/util/CharsRef.java
+++ b/lucene/src/java/org/apache/lucene/util/CharsRef.java
@@ -19,7 +19,8 @@ package org.apache.lucene.util;
 
 /**
  * Represents char[], as a slice (offset + length) into an existing char[].
- * 
+ * The {@link #chars} member should never be null; use
+ * {@link #EMPTY_ARRAY} if necessary.
  * @lucene.internal
  */
 public final class CharsRef implements Comparable<CharsRef>, CharSequence {
diff --git a/lucene/src/java/org/apache/lucene/util/IntsRef.java b/lucene/src/java/org/apache/lucene/util/IntsRef.java
index ee1bd2e..363e1b7 100644
--- a/lucene/src/java/org/apache/lucene/util/IntsRef.java
+++ b/lucene/src/java/org/apache/lucene/util/IntsRef.java
@@ -18,11 +18,14 @@ package org.apache.lucene.util;
  */
 
 /** Represents int[], as a slice (offset + length) into an
- *  existing int[].
+ *  existing int[].  The {@link #ints} member should never be null; use
+ *  {@link #EMPTY_INTS} if necessary.
  *
  *  @lucene.internal */
 public final class IntsRef implements Comparable<IntsRef> {
 
+  public static final int[] EMPTY_INTS = new int[0];
+
   public int[] ints;
   public int offset;
   public int length;
diff --git a/lucene/src/test/org/apache/lucene/index/TestPayloads.java b/lucene/src/test/org/apache/lucene/index/TestPayloads.java
index b7e63f6..2eca15a 100644
--- a/lucene/src/test/org/apache/lucene/index/TestPayloads.java
+++ b/lucene/src/test/org/apache/lucene/index/TestPayloads.java
@@ -241,6 +241,14 @@ public class TestPayloads extends LuceneTestCase {
                       BytesRef br = tps[j].getPayload();
                       System.arraycopy(br.bytes, br.offset, verifyPayloadData, offset, br.length);
                       offset += br.length;
+                      // Just to ensure all codecs can
+                      // handle a caller that mucks with the
+                      // returned payload:
+                      if (rarely()) {
+                        br.bytes = new byte[random.nextInt(5)];
+                      }
+                      br.length = 0;
+                      br.offset = 0;
                     }
                 }
             }

