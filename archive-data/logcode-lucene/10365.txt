GitDiffStart: 0c24fa2204ef4a2856d54d5e4d41fe2fb17aaff7 | Mon Dec 3 13:40:13 2012 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 73e8cba..21839ac 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -195,6 +195,9 @@ Bug Fixes
   actually compute allMatchingGroups (dizh@neusoft.com via Mike
   McCandless)
 
+* LUCENE-4009: Improve TermsFilter.toString (Tim Costermans via Chris
+  Male, Mike McCandless)
+
 Optimizations
 
 * LUCENE-2221: oal.util.BitUtil was modified to use Long.bitCount and
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/TermsFilter.java b/lucene/queries/src/java/org/apache/lucene/queries/TermsFilter.java
index 1210860..be93ec9 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/TermsFilter.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/TermsFilter.java
@@ -253,17 +253,21 @@ public final class TermsFilter extends Filter {
   public String toString() {
     StringBuilder builder = new StringBuilder();
     BytesRef spare = new BytesRef(termsBytes);
+    boolean first = true;
     for (int i = 0; i < termsAndFields.length; i++) {
       TermsAndField current = termsAndFields[i];
       for (int j = current.start; j < current.end; j++) {
         spare.offset = offsets[j];
         spare.length = offsets[j+1] - offsets[j];
+        if (!first) {
+          builder.append(' ');
+        }
+        first = false;
         builder.append(current.field).append(':');
         builder.append(spare.utf8ToString());
-        builder.append(' ');
       }
-
     }
+
     return builder.toString();
   }
   
diff --git a/lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java b/lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java
index caf8245..58baf54 100644
--- a/lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java
+++ b/lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest.java
@@ -332,4 +332,34 @@ public class BooleanFilterTest extends LuceneTestCase {
     booleanFilter.add(getTermsFilter("accessRights", "admin"), Occur.MUST);
     tstFilterCard(">0 shoulds with no matches should return no docs", 0, booleanFilter);
   }
+
+  public void testToStringOfBooleanFilterContainingTermsFilter() {
+    BooleanFilter booleanFilter = new BooleanFilter();
+    booleanFilter.add(getTermsFilter("inStock", "N"), Occur.MUST);
+    booleanFilter.add(getTermsFilter("isFragile", "Y"), Occur.MUST);
+
+    assertEquals("BooleanFilter(+inStock:N +isFragile:Y)", booleanFilter.toString());
+  }
+
+  public void testToStringOfWrappedBooleanFilters() {
+    BooleanFilter orFilter = new BooleanFilter();
+
+    BooleanFilter stockFilter = new BooleanFilter();
+    stockFilter.add(new FilterClause(getTermsFilter("inStock", "Y"), Occur.MUST));
+    stockFilter.add(new FilterClause(getTermsFilter("barCode", "12345678"), Occur.MUST));
+
+    orFilter.add(new FilterClause(stockFilter,Occur.SHOULD));
+
+    BooleanFilter productPropertyFilter = new BooleanFilter();
+    productPropertyFilter.add(new FilterClause(getTermsFilter("isHeavy", "N"), Occur.MUST));
+    productPropertyFilter.add(new FilterClause(getTermsFilter("isDamaged", "Y"), Occur.MUST));
+
+    orFilter.add(new FilterClause(productPropertyFilter,Occur.SHOULD));
+
+    BooleanFilter composedFilter = new BooleanFilter();
+    composedFilter.add(new FilterClause(orFilter,Occur.MUST));
+
+    assertEquals("BooleanFilter(+BooleanFilter(BooleanFilter(+inStock:Y +barCode:12345678) BooleanFilter(+isHeavy:N +isDamaged:Y)))",
+        composedFilter.toString());
+  }
 }
diff --git a/lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest.java b/lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest.java
index 3a4aa50..0ad9e70 100644
--- a/lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest.java
+++ b/lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest.java
@@ -320,4 +320,11 @@ public class TermsFilterTest extends LuceneTestCase {
       fail("must fail - no terms!");
     } catch (IllegalArgumentException e) {}
   }
+
+  public void testToString() {
+    TermsFilter termsFilter = new TermsFilter(new Term("field1", "a"),
+                                              new Term("field1", "b"),
+                                              new Term("field1", "c"));
+    assertEquals("field1:a field1:b field1:c", termsFilter.toString());
+  }
 }

