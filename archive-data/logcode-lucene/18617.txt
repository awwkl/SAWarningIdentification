GitDiffStart: 13d3259092a7f4f581d9a143159391cafb76385d | Thu Dec 17 20:47:56 2009 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index 3190879..af8d808 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -169,6 +169,9 @@ Other Changes
 
 * SOLR-1637: Remove ALIAS command
 
+* SOLR-1662: Added Javadocs in BufferedTokenStream and fixed incorrect cloning
+  in TestBufferedTokenStream (Robert Muir, Uwe Schindler via shalin)
+
 Build
 ----------------------
 
diff --git a/src/java/org/apache/solr/analysis/BufferedTokenStream.java b/src/java/org/apache/solr/analysis/BufferedTokenStream.java
index 1ac06c8..985eda3 100644
--- a/src/java/org/apache/solr/analysis/BufferedTokenStream.java
+++ b/src/java/org/apache/solr/analysis/BufferedTokenStream.java
@@ -46,13 +46,16 @@ import java.util.LinkedList;
  *   public MyTokenStream(TokenStream input) {super(input);}
  *   protected Token process(Token t) throws IOException {
  *     if ("A".equals(t.termText()) && "B".equals(peek(1).termText()))
- *       write(t);
+ *       write((Token)t.clone());
  *     return t;
  *   }
  * }
  * </pre>
  *
- *
+ * NOTE: BufferedTokenStream does not clone() any Tokens. This is instead the 
+ * responsibility of the implementing subclass. In the "A" "B" => "A" "A" "B"
+ * example above, the subclass must clone the additional "A" it creates.
+ * 
  * @version $Id$
  */
 public abstract class BufferedTokenStream extends TokenFilter {
diff --git a/src/test/org/apache/solr/analysis/TestBufferedTokenStream.java b/src/test/org/apache/solr/analysis/TestBufferedTokenStream.java
index 0c44a70..5d88ba9 100644
--- a/src/test/org/apache/solr/analysis/TestBufferedTokenStream.java
+++ b/src/test/org/apache/solr/analysis/TestBufferedTokenStream.java
@@ -50,7 +50,7 @@ public class TestBufferedTokenStream extends BaseTokenTestCase {
     protected Token process(Token t) throws IOException {
       if ("A".equals(new String(t.termBuffer(), 0, t.termLength())) && 
           "B".equals(new String(peek(1).termBuffer(), 0, peek(1).termLength())))
-        write(t);
+        write((Token)t.clone());
       return t;
     }
   }

