GitDiffStart: ce5a9a107f6e09ebb1ff7d2d01532357c01311bc | Sat Aug 27 15:15:01 2011 +0000
diff --git a/lucene/src/java/org/apache/lucene/index/DocFieldProcessor.java b/lucene/src/java/org/apache/lucene/index/DocFieldProcessor.java
index 90e2802..e014ba0 100644
--- a/lucene/src/java/org/apache/lucene/index/DocFieldProcessor.java
+++ b/lucene/src/java/org/apache/lucene/index/DocFieldProcessor.java
@@ -87,7 +87,7 @@ final class DocFieldProcessor extends DocConsumer {
       consumers.finish(state.numDocs);
     };
     // close perDocConsumer during flush to ensure all files are flushed due to PerCodec CFS
-    IOUtils.closeSafely(true, perDocConsumers.values());
+    IOUtils.closeSafely(false, perDocConsumers.values());
   }
 
   @Override
diff --git a/lucene/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/src/java/org/apache/lucene/index/IndexWriter.java
index 77e3449..38658c8 100644
--- a/lucene/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/src/java/org/apache/lucene/index/IndexWriter.java
@@ -2606,7 +2606,7 @@ public class IndexWriter implements Closeable, TwoPhaseCommit {
         }
       }
     } finally {
-      IOUtils.closeSafely(true, cfsdir);
+      IOUtils.closeSafely(false, cfsdir);
     }
     
     info.dir = directory;
diff --git a/lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.java b/lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.java
index 1e93d77..494bea3 100644
--- a/lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.java
+++ b/lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.java
@@ -104,41 +104,39 @@ class FixedStraightBytesImpl {
       datOut = getDataOut();
       boolean success = false;
       try {
-      if (state.liveDocs == null && state.reader instanceof Reader) {
-        Reader reader = (Reader) state.reader;
-        final int maxDocs = reader.maxDoc;
-        if (maxDocs == 0) {
-          return;
-        }
-        if (size == -1) {
-          size = reader.size;
-          datOut.writeInt(size);
-        }
-        if (lastDocID+1 < state.docBase) {
-          fill(datOut, state.docBase);
-          lastDocID = state.docBase-1;
-        }
-        // TODO should we add a transfer to API to each reader?
-        final IndexInput cloneData = reader.cloneData();
-        try {
-          datOut.copyBytes(cloneData, size * maxDocs);
-        } finally {
-          IOUtils.closeSafely(true, cloneData);  
-        }
+        if (state.liveDocs == null && state.reader instanceof Reader) {
+          Reader reader = (Reader) state.reader;
+          final int maxDocs = reader.maxDoc;
+          if (maxDocs == 0) {
+            return;
+          }
+          if (size == -1) {
+            size = reader.size;
+            datOut.writeInt(size);
+          }
+          if (lastDocID+1 < state.docBase) {
+            fill(datOut, state.docBase);
+            lastDocID = state.docBase-1;
+          }
+          // TODO should we add a transfer to API to each reader?
+          final IndexInput cloneData = reader.cloneData();
+          try {
+            datOut.copyBytes(cloneData, size * maxDocs);
+          } finally {
+            IOUtils.closeSafely(false, cloneData);  
+          }
         
-        lastDocID += maxDocs;
-      } else {
-        super.merge(state);
-      }
-      success = true;
+          lastDocID += maxDocs;
+        } else {
+          super.merge(state);
+        }
+        success = true;
       } finally {
         if (!success) {
           IOUtils.closeSafely(!success, datOut);
         }
       }
     }
-    
-    
 
     @Override
     protected void mergeDoc(int docID) throws IOException {
diff --git a/lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.java b/lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.java
index 5cb90ff..61125aa 100644
--- a/lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.java
+++ b/lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.java
@@ -128,13 +128,13 @@ class VarStraightBytesImpl {
             address += numDataBytes; // this is the address after all addr pointers are updated
             iter.close();
           } finally {
-            IOUtils.closeSafely(true, cloneIdx);
+            IOUtils.closeSafely(false, cloneIdx);
           }
           final IndexInput cloneData = reader.cloneData();
           try {
             datOut.copyBytes(cloneData, numDataBytes);
           } finally {
-            IOUtils.closeSafely(true, cloneData);  
+            IOUtils.closeSafely(false, cloneData);  
           }
         } else {
           super.merge(state);
diff --git a/lucene/src/java/org/apache/lucene/store/CompoundFileDirectory.java b/lucene/src/java/org/apache/lucene/store/CompoundFileDirectory.java
index d209523..f9a477c 100644
--- a/lucene/src/java/org/apache/lucene/store/CompoundFileDirectory.java
+++ b/lucene/src/java/org/apache/lucene/store/CompoundFileDirectory.java
@@ -95,10 +95,10 @@ public final class CompoundFileDirectory extends Directory {
       if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {
         IndexInput input = null;
         try {
-          input = dir.openInput(IndexFileNames.segmentFileName(
-              IndexFileNames.stripExtension(name), "",
-              IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION),
-              IOContext.READONCE);
+          final String entriesFileName = IndexFileNames.segmentFileName(
+                                                IndexFileNames.stripExtension(name), "",
+                                                IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION);
+          input = dir.openInput(entriesFileName, IOContext.READONCE);
           final int readInt = input.readInt(); // unused right now
           assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;
           final int numEntries = input.readVInt();
@@ -112,7 +112,7 @@ public final class CompoundFileDirectory extends Directory {
           }
           return mapping;
         } finally {
-          IOUtils.closeSafely(true, input);
+          IOUtils.closeSafely(false, input);
         }
       } else {
         // TODO remove once 3.x is not supported anymore
diff --git a/lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper.java b/lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper.java
index 3310d8f..d02f0f9 100644
--- a/lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper.java
+++ b/lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper.java
@@ -153,7 +153,10 @@ public class MockDirectoryWrapper extends Directory {
   
   @Override
   public String toString() {
-    maybeYield();
+    // NOTE: do not maybeYield here, since it consumes
+    // randomness and can thus (unexpectedly during
+    // debugging) change the behavior of a seed
+    // maybeYield();
     return "MockDirWrapper(" + delegate + ")";
   }
 
diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.java b/lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.java
index 4334197..357a48b5 100644
--- a/lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.java
+++ b/lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.java
@@ -132,7 +132,13 @@ public class TestIndexWriterOnDiskFull extends LuceneTestCase {
       }
     }
   }
-  
+
+  // TODO: make @Nightly variant that provokes more disk
+  // fulls
+
+  // TODO: have test fail if on any given top
+  // iter there was not a single IOE hit
+
   /*
   Test: make sure when we run out of disk space or hit
   random IOExceptions in any of the addIndexes(*) calls

