GitDiffStart: 4381018b77f019ce2c579240538177b546ff3d86 | Sun Mar 6 04:12:11 2016 +0530
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 60d3f4d..813a0b7 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -267,6 +267,9 @@ Bug Fixes
 
 * SOLR-8779: Fix missing InterruptedException handling in ZkStateReader.java (Varun Thacker)
 
+* SOLR-8449: Fix the core restore functionality to allow restoring multiple times on the same core
+  (Johannes Brucher, Varun Thacker)
+
 Optimizations
 ----------------------
 * SOLR-7876: Speed up queries and operations that use many terms when timeAllowed has not been
diff --git a/solr/core/src/java/org/apache/solr/handler/RestoreCore.java b/solr/core/src/java/org/apache/solr/handler/RestoreCore.java
index a6c1da9..9949d3f 100644
--- a/solr/core/src/java/org/apache/solr/handler/RestoreCore.java
+++ b/solr/core/src/java/org/apache/solr/handler/RestoreCore.java
@@ -19,6 +19,9 @@ package org.apache.solr.handler;
 import java.lang.invoke.MethodHandles;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Future;
 
@@ -55,7 +58,8 @@ public class RestoreCore implements Callable<Boolean> {
   private boolean doRestore() throws Exception {
 
     Path backupPath = Paths.get(backupLocation).resolve(backupName);
-    String restoreIndexName = "restore." + backupName;
+    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);
+    String restoreIndexName = "restore." + dateFormat.format(new Date());
     String restoreIndexPath = core.getDataDir() + restoreIndexName;
 
     Directory restoreIndexDir = null;
diff --git a/solr/core/src/test/org/apache/solr/handler/TestRestoreCore.java b/solr/core/src/test/org/apache/solr/handler/TestRestoreCore.java
index b219a8d..1218783 100644
--- a/solr/core/src/test/org/apache/solr/handler/TestRestoreCore.java
+++ b/solr/core/src/test/org/apache/solr/handler/TestRestoreCore.java
@@ -138,36 +138,43 @@ public class TestRestoreCore extends SolrJettyTestBase {
       Thread.sleep(1000);
     }
 
-    //Modify existing index before we call restore.
 
-    //Delete a few docs
-    int numDeletes = TestUtil.nextInt(random(), 1, nDocs);
-    for(int i=0; i<numDeletes; i++) {
-      masterClient.deleteByQuery("id:" + i);
-    }
-    masterClient.commit();
-
-    //Add a few more
-    int moreAdds = TestUtil.nextInt(random(), 1, 100);
-    for (int i=0; i<moreAdds; i++) {
-      SolrInputDocument doc = new SolrInputDocument();
-      doc.addField("id", i + nDocs);
-      doc.addField("name", "name = " + (i + nDocs));
-      masterClient.add(doc);
-    }
-    //Purposely not calling commit once in a while. There can be some docs which are not committed
-    if (usually()) {
+
+    int numRestoreTests = TestUtil.nextInt(random(), 1, 5);
+
+    for (int attempts=0; attempts<numRestoreTests; attempts++) {
+      //Modify existing index before we call restore.
+
+      //Delete a few docs
+      int numDeletes = TestUtil.nextInt(random(), 1, nDocs);
+      for(int i=0; i<numDeletes; i++) {
+        masterClient.deleteByQuery("id:" + i);
+      }
       masterClient.commit();
-    }
 
-    TestReplicationHandlerBackup.runBackupCommand(masterJetty, ReplicationHandler.CMD_RESTORE, params);
+      //Add a few more
+      int moreAdds = TestUtil.nextInt(random(), 1, 100);
+      for (int i=0; i<moreAdds; i++) {
+        SolrInputDocument doc = new SolrInputDocument();
+        doc.addField("id", i + nDocs);
+        doc.addField("name", "name = " + (i + nDocs));
+        masterClient.add(doc);
+      }
+      //Purposely not calling commit once in a while. There can be some docs which are not committed
+      if (usually()) {
+        masterClient.commit();
+      }
 
-    while (!fetchRestoreStatus()) {
-      Thread.sleep(1000);
+      TestReplicationHandlerBackup.runBackupCommand(masterJetty, ReplicationHandler.CMD_RESTORE, params);
+
+      while (!fetchRestoreStatus()) {
+        Thread.sleep(1000);
+      }
+
+      //See if restore was successful by checking if all the docs are present again
+      verifyDocs(nDocs);
     }
 
-    //See if restore was successful by checking if all the docs are present again
-    verifyDocs(nDocs);
   }
 
   @Test

