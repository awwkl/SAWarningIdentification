GitDiffStart: c61a8c0b7192a285330d5db82b0e032a8386f7c5 | Mon Aug 27 17:31:23 2012 +0000
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource.java
index f3fbe0b..2fe2639 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource.java
@@ -25,8 +25,9 @@ import org.apache.lucene.search.FieldCache;
 
 
 /**
- *
- *
+ * Obtains short field values from the {@link org.apache.lucene.search.FieldCache}
+ * using <code>getShorts()</code>
+ * and makes those values available as other numeric types, casting as needed.
  **/
 public class ShortFieldSource extends FieldCacheSource {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/DistanceSubQuery.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/DistanceSubQuery.java
index 9b37934..ad793c8 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/DistanceSubQuery.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/DistanceSubQuery.java
@@ -18,6 +18,10 @@ package org.apache.lucene.queryparser.surround.query;
 
 import java.io.IOException;
 
+/**
+ * Interface for queries that can be nested as subqueries
+ * into a span near.
+ */
 public interface DistanceSubQuery {
   /** When distanceSubQueryNotAllowed() returns non null, the reason why the subquery
    * is not allowed as a distance subquery is returned.
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery.java
index 4544325..7582711 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery.java
@@ -22,6 +22,9 @@ import java.util.Iterator;
 
 import org.apache.lucene.search.Query;
 
+/**
+ * Forms an OR query of the provided query across multiple fields.
+ */
 public class FieldsQuery extends SrndQuery { /* mostly untested */
   private SrndQuery q;
   private List<String> fieldNames;
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/NotQuery.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/NotQuery.java
index 3256295..a507087 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/NotQuery.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/NotQuery.java
@@ -21,6 +21,9 @@ import org.apache.lucene.search.Query;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.BooleanClause;
 
+/**
+ * Factory for prohibited clauses
+ */
 public class NotQuery extends ComposedQuery { 
   public NotQuery(List<SrndQuery> queries, String opName) { super(queries, true /* infix */, opName); }
   
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTerm.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTerm.java
index 1c2e904..6ad433b 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTerm.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTerm.java
@@ -22,6 +22,9 @@ import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.Query;
 
+/**
+ * Base class for queries that expand to sets of simple terms.
+ */
 public abstract class SimpleTerm
   extends SrndQuery
   implements DistanceSubQuery, Comparable<SimpleTerm>
@@ -67,6 +70,10 @@ public abstract class SimpleTerm
                             String fieldName,
                             MatchingTermVisitor mtv) throws IOException;
   
+  /**
+   * Callback to visit each matching term during "rewrite"
+   * in {@link #visitMatchingTerm(Term)}
+   */
   public interface MatchingTermVisitor {
     void visitMatchingTerm(Term t)throws IOException;
   }
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndPrefixQuery.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndPrefixQuery.java
index 31e8f3a..cc816fe 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndPrefixQuery.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndPrefixQuery.java
@@ -27,6 +27,9 @@ import org.apache.lucene.index.MultiFields;
 import java.io.IOException;
 
 
+/**
+ * Query that matches String prefixes
+ */
 public class SrndPrefixQuery extends SimpleTerm {
   private final BytesRef prefixRef;
   public SrndPrefixQuery(String prefix, boolean quoted, char truncator) {
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTermQuery.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTermQuery.java
index fbaddda..ca83a0d 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTermQuery.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTermQuery.java
@@ -26,6 +26,9 @@ import org.apache.lucene.index.MultiFields;
 import org.apache.lucene.util.BytesRef;
 
  
+/**
+ * Simple single-term clause
+ */
 public class SrndTermQuery extends SimpleTerm {
   public SrndTermQuery(String termText, boolean quoted) {
     super(quoted);
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.java
index 2cf7306..e7f844c 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.java
@@ -22,7 +22,9 @@ import org.apache.lucene.queryparser.xml.builders.*;
  */
 
 /**
- *
+ * Assembles a QueryBuilder which uses Query objects from
+ * Lucene's <code>sandbox</code> and <code>queries</code>
+ * modules in addition to core queries.
  */
 public class CorePlusExtensionsParser extends CoreParser {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/DOMUtils.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/DOMUtils.java
index b3f5caa..4493892 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/DOMUtils.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/DOMUtils.java
@@ -26,7 +26,7 @@ import java.io.Reader;
  */
 
 /**
- *
+ * Helper methods for parsing XML
  */
 public class DOMUtils {
 
diff --git a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/ParserException.java b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/ParserException.java
index 63f2af9..3974d36 100644
--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/ParserException.java
+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/ParserException.java
@@ -20,7 +20,8 @@ package org.apache.lucene.queryparser.xml;
  */
 
 /**
- * 
+ * Thrown when the xml queryparser encounters 
+ * invalid syntax/configuration.
  */
 public class ParserException extends Exception {
 
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/util/CachingDoubleValueSource.java b/lucene/spatial/src/java/org/apache/lucene/spatial/util/CachingDoubleValueSource.java
index 678e2a5..fa9fb85 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/util/CachingDoubleValueSource.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/util/CachingDoubleValueSource.java
@@ -26,6 +26,8 @@ import java.util.HashMap;
 import java.util.Map;
 
 /**
+ * Caches the doubleVal of another value source in a HashMap
+ * so that it is computed only once.
  * @lucene.internal
  */
 public class CachingDoubleValueSource extends ValueSource {
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/util/ValueSourceFilter.java b/lucene/spatial/src/java/org/apache/lucene/spatial/util/ValueSourceFilter.java
index 1a430b7..2f603b6 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/util/ValueSourceFilter.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/util/ValueSourceFilter.java
@@ -28,6 +28,8 @@ import org.apache.lucene.util.Bits;
 import java.io.IOException;
 
 /**
+ * Filter that matches all documents where a valuesource is
+ * in between a range of <code>min</code> and <code>max</code>
  * @lucene.internal
  */
 public class ValueSourceFilter extends Filter {

