GitDiffStart: 46f8ca79133c389278115805e5b55f0b3a24567c | Tue Dec 8 06:05:23 2009 +0000
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/BinFileDataSource.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/BinFileDataSource.java
new file mode 100644
index 0000000..769ab63
--- /dev/null
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/BinFileDataSource.java
@@ -0,0 +1,63 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.solr.handler.dataimport;
+
+import static org.apache.solr.handler.dataimport.DataImportHandlerException.wrapAndThrow;
+import static org.apache.solr.handler.dataimport.DataImportHandlerException.SEVERE;
+
+import java.io.InputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.util.Properties;
+/**
+ * <p>
+ * A DataSource which reads from local files
+ * </p>
+ * <p/>
+ * <p>
+ * Refer to <a
+ * href="http://wiki.apache.org/solr/DataImportHandler">http://wiki.apache.org/solr/DataImportHandler</a>
+ * for more details.
+ * </p>
+ * <p/>
+ * <b>This API is experimental and may change in the future.</b>
+ *
+ * @version $Id$
+ * @since solr 1.5
+ */
+
+public class BinFileDataSource extends DataSource<InputStream>{
+   protected String basePath;
+  public void init(Context context, Properties initProps) {
+     basePath = initProps.getProperty(FileDataSource.BASE_PATH);
+  }
+
+  public InputStream getData(String query) {
+    File f = FileDataSource.getFile(basePath,query);
+    try {
+      return new FileInputStream(f);
+    } catch (FileNotFoundException e) {
+      wrapAndThrow(SEVERE,e,"Unable to open file "+f.getAbsolutePath());
+      return null;
+    }
+  }
+
+  public void close() {
+
+  }
+}
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileDataSource.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileDataSource.java
index fa8f980..daacdae 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileDataSource.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileDataSource.java
@@ -18,8 +18,11 @@ package org.apache.solr.handler.dataimport;
 
 import java.io.*;
 import java.util.Properties;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import static org.apache.solr.handler.dataimport.DataImportHandlerException.wrapAndThrow;
+import static org.apache.solr.handler.dataimport.DataImportHandlerException.SEVERE;
 
 /**
  * <p>
@@ -77,6 +80,16 @@ public class FileDataSource extends DataSource<Reader> {
    * </p>
    */
   public Reader getData(String query) {
+    File f = getFile(basePath,query);
+    try {
+      return openStream(f);
+    } catch (Exception e) {
+      wrapAndThrow(SEVERE,e,"Unable to open File : "+f.getAbsolutePath());
+      return null;
+    }
+  }
+
+  static File getFile(String basePath, String query) {
     try {
       File file0 = new File(query);
       File file = file0;
@@ -86,16 +99,14 @@ public class FileDataSource extends DataSource<Reader> {
 
       if (file.isFile() && file.canRead()) {
         LOG.debug("Accessing File: " + file.toString());
-        return openStream(file);
+        return file;
       } else if (file != file0)
         if (file0.isFile() && file0.canRead()) {
           LOG.debug("Accessing File0: " + file0.toString());
-          return openStream(file0);
+          return  file0;
         }
 
       throw new FileNotFoundException("Could not find file: " + query);
-    } catch (UnsupportedEncodingException e) {
-      throw new RuntimeException(e);
     } catch (FileNotFoundException e) {
       throw new RuntimeException(e);
     }

