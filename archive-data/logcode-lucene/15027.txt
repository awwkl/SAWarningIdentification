GitDiffStart: 6dcc59e10c20081b60bda20ad0123046c978faab | Wed Aug 10 18:34:45 2011 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index f190a81..fae406c 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -223,6 +223,9 @@ Bug Fixes
   
 * SOLR-2193, SOLR-2565, SOLR-2651: SolrCores now properly share IndexWriters across SolrCore reloads.
   (Mark Miller, Robert Muir)
+  Additional Work:
+  SOLR-2705: On reload, IndexWriterProvider holds onto the initial SolrCore it was created with.
+  (Yury Kats, Mark Miller)
 
 * SOLR-2682: Remove addException() in SimpleFacet. FacetComponent no longer catches and embeds
   exceptions occurred during facet processing, it throws HTTP 400 or 500 exceptions instead. (koji)
diff --git a/solr/core/src/java/org/apache/solr/update/DefaultIndexWriterProvider.java b/solr/core/src/java/org/apache/solr/update/DefaultIndexWriterProvider.java
index 2b64df2..2fd00c7 100644
--- a/solr/core/src/java/org/apache/solr/update/DefaultIndexWriterProvider.java
+++ b/solr/core/src/java/org/apache/solr/update/DefaultIndexWriterProvider.java
@@ -76,5 +76,10 @@ public final class DefaultIndexWriterProvider implements IndexWriterProvider {
         core.getDirectoryFactory(), removeAllExisting, core.getSchema(),
         core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy(), core.getCodecProvider());
   }
+
+  @Override
+  public synchronized void updateCore(SolrCore core) {
+    this.core = core;
+  }
   
 }
diff --git a/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java b/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
index a5cade6..dd953c4 100644
--- a/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
+++ b/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
@@ -96,6 +96,7 @@ public class DirectUpdateHandler2 extends UpdateHandler {
     super(core);
     if (updateHandler instanceof DirectUpdateHandler2) {
       this.indexWriterProvider = ((DirectUpdateHandler2)updateHandler).indexWriterProvider;
+      this.indexWriterProvider.updateCore(core);
     } else {
       // the impl has changed, so we cannot use the old state - decref it
       updateHandler.decref();
diff --git a/solr/core/src/java/org/apache/solr/update/IndexWriterProvider.java b/solr/core/src/java/org/apache/solr/update/IndexWriterProvider.java
index bebbeb1..0092985 100644
--- a/solr/core/src/java/org/apache/solr/update/IndexWriterProvider.java
+++ b/solr/core/src/java/org/apache/solr/update/IndexWriterProvider.java
@@ -20,6 +20,7 @@ package org.apache.solr.update;
 import java.io.IOException;
 
 import org.apache.lucene.index.IndexWriter;
+import org.apache.solr.core.SolrCore;
 
 public interface IndexWriterProvider {
   
@@ -33,4 +34,6 @@ public interface IndexWriterProvider {
 
   public void rollbackIndexWriter() throws IOException;
   
+  public void updateCore(SolrCore core);
+  
 }
diff --git a/solr/core/src/test-files/solr/conf/solrconfig-master3.xml b/solr/core/src/test-files/solr/conf/solrconfig-master3.xml
new file mode 100644
index 0000000..4137ac4
--- /dev/null
+++ b/solr/core/src/test-files/solr/conf/solrconfig-master3.xml
@@ -0,0 +1,98 @@
+<?xml version="1.0" ?>
+
+<!--
+ Licensed to the Apache Software Foundation (ASF) under one or more
+ contributor license agreements.  See the NOTICE file distributed with
+ this work for additional information regarding copyright ownership.
+ The ASF licenses this file to You under the Apache License, Version 2.0
+ (the "License"); you may not use this file except in compliance with
+ the License.  You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+
+<!-- $Id: solrconfig-master2.xml 1144761 2011-07-09 23:01:53Z sarowe $
+     $Source$
+     $Name$
+  -->
+
+<config>
+  <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
+  <dataDir>${solr.data.dir:}</dataDir>
+
+  <indexDefaults>
+    <useCompoundFile>false</useCompoundFile>
+    <mergeFactor>10</mergeFactor>
+    <ramBufferSizeMB>32</ramBufferSizeMB>
+    <maxMergeDocs>2147483647</maxMergeDocs>
+    <maxFieldLength>10000</maxFieldLength>
+    <writeLockTimeout>1000</writeLockTimeout>
+    <commitLockTimeout>10000</commitLockTimeout>
+
+    <mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler"/>
+    <writeLockTimeout>1000</writeLockTimeout>
+    <commitLockTimeout>10000</commitLockTimeout>
+
+    <lockType>single</lockType>
+  </indexDefaults>
+
+  <mainIndex>
+    <useCompoundFile>false</useCompoundFile>
+    <mergeFactor>10</mergeFactor>
+    <ramBufferSizeMB>32</ramBufferSizeMB>
+    <maxMergeDocs>2147483647</maxMergeDocs>
+    <maxFieldLength>10000</maxFieldLength>
+
+    <unlockOnStartup>true</unlockOnStartup>
+  </mainIndex>
+
+  <updateHandler class="solr.DirectUpdateHandler2">
+  </updateHandler>
+
+  <requestHandler name="standard" class="solr.StandardRequestHandler">
+    <bool name="httpCaching">true</bool>
+  </requestHandler>
+
+  <requestHandler name="/replication" class="solr.ReplicationHandler">
+    <lst name="master">
+      <str name="replicateAfter">commit</str>
+      <str name="replicateAfter">startup</str>
+      <str name="confFiles">schema.xml</str>
+    </lst>
+  </requestHandler>
+
+  <!-- test query parameter defaults -->
+  <requestHandler name="defaults" class="solr.StandardRequestHandler">
+    <lst name="defaults">
+      <int name="rows">4</int>
+      <bool name="hl">true</bool>
+      <str name="hl.fl">text,name,subject,title,whitetok</str>
+    </lst>
+  </requestHandler>
+
+  <!-- test query parameter defaults -->
+  <requestHandler name="lazy" class="solr.StandardRequestHandler" startup="lazy">
+    <lst name="defaults">
+      <int name="rows">4</int>
+      <bool name="hl">true</bool>
+      <str name="hl.fl">text,name,subject,title,whitetok</str>
+    </lst>
+  </requestHandler>
+
+  <requestHandler name="/update" class="solr.XmlUpdateRequestHandler"/>
+
+  <!-- enable streaming for testing... -->
+  <requestDispatcher handleSelect="true">
+    <requestParsers enableRemoteStreaming="true" multipartUploadLimitInKB="2048"/>
+    <httpCaching lastModifiedFrom="openTime" etagSeed="Solr" never304="false">
+      <cacheControl>max-age=30, public</cacheControl>
+    </httpCaching>
+  </requestDispatcher>
+
+</config>
diff --git a/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java b/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
index 8d63ca3..926729d 100644
--- a/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
+++ b/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
@@ -16,6 +16,16 @@
  */
 package org.apache.solr.handler;
 
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.FilenameFilter;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.Writer;
+import java.net.URL;
+
 import org.apache.commons.io.IOUtils;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.MatchAllDocsQuery;
@@ -25,7 +35,6 @@ import org.apache.lucene.store.SimpleFSDirectory;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.TestDistributedSearch;
 import org.apache.solr.client.solrj.SolrServer;
-import org.apache.solr.client.solrj.SolrRequest;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
 import org.apache.solr.client.solrj.impl.CommonsHttpSolrServer;
@@ -40,12 +49,6 @@ import org.apache.solr.common.util.SimpleOrderedMap;
 import org.apache.solr.util.AbstractSolrTestCase;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
-import org.junit.Test;
-
-import java.io.*;
-import java.net.URL;
-import java.util.Map;
-import java.util.HashMap;
 
 /**
  * Test for ReplicationHandler
@@ -179,8 +182,55 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
 
     return details;
   }
+  
+  private NamedList<Object> getCommits(SolrServer s) throws Exception {
+    
+
+    ModifiableSolrParams params = new ModifiableSolrParams();
+    params.set("command","commits");
+    params.set("qt","/replication");
+    QueryRequest req = new QueryRequest(params);
+
+    NamedList<Object> res = s.request(req);
+
+    assertNotNull("null response from server", res);
+
+
+    return res;
+  }
+  
+  private NamedList<Object> getIndexVersion(SolrServer s) throws Exception {
+    
+    ModifiableSolrParams params = new ModifiableSolrParams();
+    params.set("command","indexversion");
+    params.set("qt","/replication");
+    QueryRequest req = new QueryRequest(params);
+
+    NamedList<Object> res = s.request(req);
+
+    assertNotNull("null response from server", res);
+
+
+    return res;
+  }
+  
+  private NamedList<Object> reloadCore(SolrServer s, String core) throws Exception {
+    
+    ModifiableSolrParams params = new ModifiableSolrParams();
+    params.set("action","reload");
+    params.set("core", core);
+    params.set("qt","/admin/cores");
+    QueryRequest req = new QueryRequest(params);
+
+    NamedList<Object> res = s.request(req);
+
+    assertNotNull("null response from server", res);
+
+    return res;
+  }
 
   public void test() throws Exception {
+    doTestReplicateAfterCoreReload();
     doTestDetails();
     doTestReplicateAfterWrite2Slave();
     doTestIndexAndConfigReplication();
@@ -533,6 +583,75 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     slaveClient = createNewSolrServer(slaveJetty.getLocalPort());
   }
 
+  private void doTestReplicateAfterCoreReload() throws Exception {
+    //stop slave
+    slaveJetty.stop();
+
+    masterClient.deleteByQuery("*:*");
+    for (int i = 0; i < 10; i++)
+      index(masterClient, "id", i, "name", "name = " + i);
+
+    masterClient.commit();
+
+    NamedList masterQueryRsp = rQuery(10, "*:*", masterClient);
+    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get("response");
+    assertEquals(10, masterQueryResult.getNumFound());
+
+    //change solrconfig having 'replicateAfter startup' option on master
+    master.copyConfigFile(CONF_DIR + "solrconfig-master3.xml",
+                          "solrconfig.xml");
+
+    masterJetty.stop();
+
+    masterJetty = createJetty(master);
+    masterClient = createNewSolrServer(masterJetty.getLocalPort());
+
+    slave.setTestPort(masterJetty.getLocalPort());
+    slave.copyConfigFile(slave.getSolrConfigFile(), "solrconfig.xml");
+
+    //start slave
+    slaveJetty = createJetty(slave);
+    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());
+    
+    //get docs from slave and check if number is equal to master
+    NamedList slaveQueryRsp = rQuery(10, "*:*", slaveClient);
+    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response");
+    assertEquals(10, slaveQueryResult.getNumFound());
+    
+    //compare results
+    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);
+    assertEquals(null, cmp);
+    
+    reloadCore(masterClient, "collection1");
+    
+    index(masterClient, "id", 110, "name", "name = 1");
+    index(masterClient, "id", 120, "name", "name = 2");
+
+    masterClient.commit();
+    
+    NamedList resp =  rQuery(12, "*:*", masterClient);
+    masterQueryResult = (SolrDocumentList) resp.get("response");
+    assertEquals(12, masterQueryResult.getNumFound());
+    
+    //get docs from slave and check if number is equal to master
+    slaveQueryRsp = rQuery(12, "*:*", slaveClient);
+    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response");
+    assertEquals(12, slaveQueryResult.getNumFound());
+    
+    // NOTE: revert config on master.
+    master.copyConfigFile(CONF_DIR + "solrconfig-master.xml", "solrconfig.xml");
+    masterJetty.stop();
+    masterJetty = createJetty(master);
+    masterClient = createNewSolrServer(masterJetty.getLocalPort());
+
+    slave.setTestPort(masterJetty.getLocalPort());
+    slave.copyConfigFile(slave.getSolrConfigFile(), "solrconfig.xml");
+
+    //start slave
+    slaveJetty.stop();
+    slaveJetty = createJetty(slave);
+    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());
+  }
 
   private void doTestIndexAndConfigAliasReplication() throws Exception {
     clearIndexWithReplication();

