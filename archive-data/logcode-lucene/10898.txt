GitDiffStart: c65bdde36facf1bd8049fb5221d872e8765dc8cf | Fri Sep 28 06:14:35 2012 +0000
diff --git a/solr/contrib/uima/src/java/org/apache/solr/uima/processor/FieldMappingException.java b/solr/contrib/uima/src/java/org/apache/solr/uima/processor/FieldMappingException.java
new file mode 100644
index 0000000..d9b566a
--- /dev/null
+++ b/solr/contrib/uima/src/java/org/apache/solr/uima/processor/FieldMappingException.java
@@ -0,0 +1,26 @@
+package org.apache.solr.uima.processor;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Exception thrown when an error happening while mapping UIMA CAS model to Solt fields
+ */
+public class FieldMappingException extends Exception {
+  public FieldMappingException(Exception e) {
+  }
+}
diff --git a/solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper.java b/solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper.java
index 8c7d454..242e1b8 100644
--- a/solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper.java
+++ b/solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAToSolrMapper.java
@@ -21,7 +21,6 @@ import java.util.Map;
 
 import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.uima.processor.SolrUIMAConfiguration.MapField;
-import org.apache.solr.uima.processor.exception.FieldMappingException;
 import org.apache.uima.cas.FSIterator;
 import org.apache.uima.cas.FeatureStructure;
 import org.apache.uima.cas.Type;
diff --git a/solr/contrib/uima/src/java/org/apache/solr/uima/processor/exception/FieldMappingException.java b/solr/contrib/uima/src/java/org/apache/solr/uima/processor/exception/FieldMappingException.java
deleted file mode 100644
index 12eaf74..0000000
--- a/solr/contrib/uima/src/java/org/apache/solr/uima/processor/exception/FieldMappingException.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package org.apache.solr.uima.processor.exception;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Exception thrown when an error happening while mapping UIMA CAS model to Solt fields
- */
-public class FieldMappingException extends Exception {
-  public FieldMappingException(Exception e) {
-  }
-}
diff --git a/solr/contrib/uima/src/test-files/uima/DummySentimentAnalysisAEDescriptor.xml b/solr/contrib/uima/src/test-files/uima/DummySentimentAnalysisAEDescriptor.xml
index 315266d..0835304 100644
--- a/solr/contrib/uima/src/test-files/uima/DummySentimentAnalysisAEDescriptor.xml
+++ b/solr/contrib/uima/src/test-files/uima/DummySentimentAnalysisAEDescriptor.xml
@@ -29,7 +29,7 @@
     <typeSystemDescription>
       <types>
         <typeDescription>
-          <name>org.apache.solr.uima.ts.SentimentAnnotation</name>
+          <name>org.apache.solr.uima.ts.DummySentimentAnnotation</name>
           <description/>
           <supertypeName>uima.tcas.Annotation</supertypeName>
           <features>
diff --git a/solr/contrib/uima/src/test-files/uima/solr/collection1/conf/solrconfig.xml b/solr/contrib/uima/src/test-files/uima/solr/collection1/conf/solrconfig.xml
index 0444bf8..1a7109d 100644
--- a/solr/contrib/uima/src/test-files/uima/solr/collection1/conf/solrconfig.xml
+++ b/solr/contrib/uima/src/test-files/uima/solr/collection1/conf/solrconfig.xml
@@ -827,7 +827,7 @@
             </lst>
           </lst>
           <lst name="type">
-            <str name="name">org.apache.solr.uima.ts.SentimentAnnotation</str>
+            <str name="name">org.apache.solr.uima.ts.DummySentimentAnnotation</str>
             <lst name="mapping">
               <str name="feature">mood</str>
               <str name="field">sentiment</str>
diff --git a/solr/contrib/uima/src/test/org/apache/solr/uima/processor/an/DummySentimentAnnotator.java b/solr/contrib/uima/src/test/org/apache/solr/uima/processor/an/DummySentimentAnnotator.java
index 04f1e59..5e0bb5d 100644
--- a/solr/contrib/uima/src/test/org/apache/solr/uima/processor/an/DummySentimentAnnotator.java
+++ b/solr/contrib/uima/src/test/org/apache/solr/uima/processor/an/DummySentimentAnnotator.java
@@ -2,7 +2,7 @@ package org.apache.solr.uima.processor.an;
 
 import java.util.Arrays;
 
-import org.apache.solr.uima.ts.SentimentAnnotation;
+import org.apache.solr.uima.ts.DummySentimentAnnotation;
 import org.apache.uima.TokenAnnotation;
 import org.apache.uima.analysis_component.JCasAnnotator_ImplBase;
 import org.apache.uima.analysis_engine.AnalysisEngineProcessException;
@@ -38,24 +38,24 @@ public class DummySentimentAnnotator extends JCasAnnotator_ImplBase{
       String tokenPOS = ((TokenAnnotation) annotation).getPosTag();
       if ("jj".equals(tokenPOS)) {
         if (Arrays.asList(positiveAdj).contains(annotation.getCoveredText())) {
-          SentimentAnnotation sentimentAnnotation = createSentimentAnnotation(jcas, annotation);
-          sentimentAnnotation.setMood("positive");
-          sentimentAnnotation.addToIndexes();
+          DummySentimentAnnotation dummySentimentAnnotation = createSentimentAnnotation(jcas, annotation);
+          dummySentimentAnnotation.setMood("positive");
+          dummySentimentAnnotation.addToIndexes();
         }
         else if (Arrays.asList(negativeAdj).contains(annotation.getCoveredText())) {
-          SentimentAnnotation sentimentAnnotation = createSentimentAnnotation(jcas, annotation);
-          sentimentAnnotation.setMood("negative");
-          sentimentAnnotation.addToIndexes();
+          DummySentimentAnnotation dummySentimentAnnotation = createSentimentAnnotation(jcas, annotation);
+          dummySentimentAnnotation.setMood("negative");
+          dummySentimentAnnotation.addToIndexes();
         }
       }
     }
   }
 
-  private SentimentAnnotation createSentimentAnnotation(JCas jcas, Annotation annotation) {
-    SentimentAnnotation sentimentAnnotation = new SentimentAnnotation(jcas);
-    sentimentAnnotation.setBegin(annotation.getBegin());
-    sentimentAnnotation.setEnd(annotation.getEnd());
-    return sentimentAnnotation;
+  private DummySentimentAnnotation createSentimentAnnotation(JCas jcas, Annotation annotation) {
+    DummySentimentAnnotation dummySentimentAnnotation = new DummySentimentAnnotation(jcas);
+    dummySentimentAnnotation.setBegin(annotation.getBegin());
+    dummySentimentAnnotation.setEnd(annotation.getEnd());
+    return dummySentimentAnnotation;
   }
 
 }
diff --git a/solr/contrib/uima/src/test/org/apache/solr/uima/ts/DummySentimentAnnotation.java b/solr/contrib/uima/src/test/org/apache/solr/uima/ts/DummySentimentAnnotation.java
new file mode 100644
index 0000000..836fb81
--- /dev/null
+++ b/solr/contrib/uima/src/test/org/apache/solr/uima/ts/DummySentimentAnnotation.java
@@ -0,0 +1,80 @@
+
+
+/* First created by JCasGen Fri Mar 04 13:08:40 CET 2011 */
+package org.apache.solr.uima.ts;
+
+import org.apache.uima.jcas.JCas; 
+import org.apache.uima.jcas.JCasRegistry;
+import org.apache.uima.jcas.cas.TOP_Type;
+
+import org.apache.uima.jcas.tcas.Annotation;
+
+
+/** 
+ * Updated by JCasGen Fri Mar 04 13:08:40 CET 2011
+ * XML source: /Users/tommasoteofili/Documents/workspaces/lucene_workspace/lucene_dev/solr/contrib/uima/src/test/resources/DummySentimentAnalysisAEDescriptor.xml
+ * @generated */
+public class DummySentimentAnnotation extends Annotation {
+  /** @generated
+   * @ordered 
+   */
+  public final static int typeIndexID = JCasRegistry.register(DummySentimentAnnotation.class);
+  /** @generated
+   * @ordered 
+   */
+  public final static int type = typeIndexID;
+  /** @generated  */
+  public              int getTypeIndexID() {return typeIndexID;}
+ 
+  /** Never called.  Disable default constructor
+   * @generated */
+  protected DummySentimentAnnotation() {}
+    
+  /** Internal - constructor used by generator 
+   * @generated */
+  public DummySentimentAnnotation(int addr, TOP_Type type) {
+    super(addr, type);
+    readObject();
+  }
+  
+  /** @generated */
+  public DummySentimentAnnotation(JCas jcas) {
+    super(jcas);
+    readObject();   
+  } 
+
+  /** @generated */  
+  public DummySentimentAnnotation(JCas jcas, int begin, int end) {
+    super(jcas);
+    setBegin(begin);
+    setEnd(end);
+    readObject();
+  }   
+
+  /** <!-- begin-user-doc -->
+    * Write your own initialization here
+    * <!-- end-user-doc -->
+  @generated modifiable */
+  private void readObject() {}
+     
+ 
+    
+  //*--------------*
+  //* Feature: mood
+
+  /** getter for mood - gets 
+   * @generated */
+  public String getMood() {
+    if (DummySentimentAnnotation_Type.featOkTst && ((DummySentimentAnnotation_Type)jcasType).casFeat_mood == null)
+      jcasType.jcas.throwFeatMissing("mood", "org.apache.solr.uima.ts.SentimentAnnotation");
+    return jcasType.ll_cas.ll_getStringValue(addr, ((DummySentimentAnnotation_Type)jcasType).casFeatCode_mood);}
+    
+  /** setter for mood - sets  
+   * @generated */
+  public void setMood(String v) {
+    if (DummySentimentAnnotation_Type.featOkTst && ((DummySentimentAnnotation_Type)jcasType).casFeat_mood == null)
+      jcasType.jcas.throwFeatMissing("mood", "org.apache.solr.uima.ts.SentimentAnnotation");
+    jcasType.ll_cas.ll_setStringValue(addr, ((DummySentimentAnnotation_Type)jcasType).casFeatCode_mood, v);}
+  }
+
+    
\ No newline at end of file
diff --git a/solr/contrib/uima/src/test/org/apache/solr/uima/ts/DummySentimentAnnotation_Type.java b/solr/contrib/uima/src/test/org/apache/solr/uima/ts/DummySentimentAnnotation_Type.java
new file mode 100644
index 0000000..9b75982
--- /dev/null
+++ b/solr/contrib/uima/src/test/org/apache/solr/uima/ts/DummySentimentAnnotation_Type.java
@@ -0,0 +1,78 @@
+/* First created by JCasGen Fri Mar 04 13:08:40 CET 2011 */
+package org.apache.solr.uima.ts;
+
+import org.apache.uima.jcas.JCas;
+import org.apache.uima.jcas.JCasRegistry;
+import org.apache.uima.cas.impl.CASImpl;
+import org.apache.uima.cas.impl.FSGenerator;
+import org.apache.uima.cas.FeatureStructure;
+import org.apache.uima.cas.impl.TypeImpl;
+import org.apache.uima.cas.Type;
+import org.apache.uima.cas.impl.FeatureImpl;
+import org.apache.uima.cas.Feature;
+import org.apache.uima.jcas.tcas.Annotation_Type;
+
+/** 
+ * Updated by JCasGen Fri Mar 04 13:08:40 CET 2011
+ * @generated */
+public class DummySentimentAnnotation_Type extends Annotation_Type {
+  /** @generated */
+  protected FSGenerator getFSGenerator() {return fsGenerator;}
+  /** @generated */
+  private final FSGenerator fsGenerator = 
+    new FSGenerator() {
+      public FeatureStructure createFS(int addr, CASImpl cas) {
+        if (DummySentimentAnnotation_Type.this.useExistingInstance) {
+          // Return eq fs instance if already created
+          FeatureStructure fs = DummySentimentAnnotation_Type.this.jcas.getJfsFromCaddr(addr);
+          if (null == fs) {
+            fs = new DummySentimentAnnotation(addr, DummySentimentAnnotation_Type.this);
+            DummySentimentAnnotation_Type.this.jcas.putJfsFromCaddr(addr, fs);
+            return fs;
+          }
+          return fs;
+        } else return new DummySentimentAnnotation(addr, DummySentimentAnnotation_Type.this);
+      }
+    };
+  /** @generated */
+  public final static int typeIndexID = DummySentimentAnnotation.typeIndexID;
+  /** @generated 
+     @modifiable */
+  public final static boolean featOkTst = JCasRegistry.getFeatOkTst("org.apache.solr.uima.ts.SentimentAnnotation");
+ 
+  /** @generated */
+  final Feature casFeat_mood;
+  /** @generated */
+  final int     casFeatCode_mood;
+  /** @generated */ 
+  public String getMood(int addr) {
+        if (featOkTst && casFeat_mood == null)
+      jcas.throwFeatMissing("mood", "org.apache.solr.uima.ts.SentimentAnnotation");
+    return ll_cas.ll_getStringValue(addr, casFeatCode_mood);
+  }
+  /** @generated */    
+  public void setMood(int addr, String v) {
+        if (featOkTst && casFeat_mood == null)
+      jcas.throwFeatMissing("mood", "org.apache.solr.uima.ts.SentimentAnnotation");
+    ll_cas.ll_setStringValue(addr, casFeatCode_mood, v);}
+    
+  
+
+
+
+  /** initialize variables to correspond with Cas Type and Features
+  * @generated */
+  public DummySentimentAnnotation_Type(JCas jcas, Type casType) {
+    super(jcas, casType);
+    casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType, getFSGenerator());
+
+ 
+    casFeat_mood = jcas.getRequiredFeatureDE(casType, "mood", "uima.cas.String", featOkTst);
+    casFeatCode_mood  = (null == casFeat_mood) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_mood).getCode();
+
+  }
+}
+
+
+
+    
diff --git a/solr/contrib/uima/src/test/org/apache/solr/uima/ts/SentimentAnnotation.java b/solr/contrib/uima/src/test/org/apache/solr/uima/ts/SentimentAnnotation.java
deleted file mode 100644
index f3a5ad9..0000000
--- a/solr/contrib/uima/src/test/org/apache/solr/uima/ts/SentimentAnnotation.java
+++ /dev/null
@@ -1,80 +0,0 @@
-
-
-/* First created by JCasGen Fri Mar 04 13:08:40 CET 2011 */
-package org.apache.solr.uima.ts;
-
-import org.apache.uima.jcas.JCas; 
-import org.apache.uima.jcas.JCasRegistry;
-import org.apache.uima.jcas.cas.TOP_Type;
-
-import org.apache.uima.jcas.tcas.Annotation;
-
-
-/** 
- * Updated by JCasGen Fri Mar 04 13:08:40 CET 2011
- * XML source: /Users/tommasoteofili/Documents/workspaces/lucene_workspace/lucene_dev/solr/contrib/uima/src/test/resources/DummySentimentAnalysisAEDescriptor.xml
- * @generated */
-public class SentimentAnnotation extends Annotation {
-  /** @generated
-   * @ordered 
-   */
-  public final static int typeIndexID = JCasRegistry.register(SentimentAnnotation.class);
-  /** @generated
-   * @ordered 
-   */
-  public final static int type = typeIndexID;
-  /** @generated  */
-  public              int getTypeIndexID() {return typeIndexID;}
- 
-  /** Never called.  Disable default constructor
-   * @generated */
-  protected SentimentAnnotation() {}
-    
-  /** Internal - constructor used by generator 
-   * @generated */
-  public SentimentAnnotation(int addr, TOP_Type type) {
-    super(addr, type);
-    readObject();
-  }
-  
-  /** @generated */
-  public SentimentAnnotation(JCas jcas) {
-    super(jcas);
-    readObject();   
-  } 
-
-  /** @generated */  
-  public SentimentAnnotation(JCas jcas, int begin, int end) {
-    super(jcas);
-    setBegin(begin);
-    setEnd(end);
-    readObject();
-  }   
-
-  /** <!-- begin-user-doc -->
-    * Write your own initialization here
-    * <!-- end-user-doc -->
-  @generated modifiable */
-  private void readObject() {}
-     
- 
-    
-  //*--------------*
-  //* Feature: mood
-
-  /** getter for mood - gets 
-   * @generated */
-  public String getMood() {
-    if (SentimentAnnotation_Type.featOkTst && ((SentimentAnnotation_Type)jcasType).casFeat_mood == null)
-      jcasType.jcas.throwFeatMissing("mood", "org.apache.solr.uima.ts.SentimentAnnotation");
-    return jcasType.ll_cas.ll_getStringValue(addr, ((SentimentAnnotation_Type)jcasType).casFeatCode_mood);}
-    
-  /** setter for mood - sets  
-   * @generated */
-  public void setMood(String v) {
-    if (SentimentAnnotation_Type.featOkTst && ((SentimentAnnotation_Type)jcasType).casFeat_mood == null)
-      jcasType.jcas.throwFeatMissing("mood", "org.apache.solr.uima.ts.SentimentAnnotation");
-    jcasType.ll_cas.ll_setStringValue(addr, ((SentimentAnnotation_Type)jcasType).casFeatCode_mood, v);}    
-  }
-
-    
\ No newline at end of file
diff --git a/solr/contrib/uima/src/test/org/apache/solr/uima/ts/SentimentAnnotation_Type.java b/solr/contrib/uima/src/test/org/apache/solr/uima/ts/SentimentAnnotation_Type.java
deleted file mode 100644
index 1ecc508..0000000
--- a/solr/contrib/uima/src/test/org/apache/solr/uima/ts/SentimentAnnotation_Type.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/* First created by JCasGen Fri Mar 04 13:08:40 CET 2011 */
-package org.apache.solr.uima.ts;
-
-import org.apache.uima.jcas.JCas;
-import org.apache.uima.jcas.JCasRegistry;
-import org.apache.uima.cas.impl.CASImpl;
-import org.apache.uima.cas.impl.FSGenerator;
-import org.apache.uima.cas.FeatureStructure;
-import org.apache.uima.cas.impl.TypeImpl;
-import org.apache.uima.cas.Type;
-import org.apache.uima.cas.impl.FeatureImpl;
-import org.apache.uima.cas.Feature;
-import org.apache.uima.jcas.tcas.Annotation_Type;
-
-/** 
- * Updated by JCasGen Fri Mar 04 13:08:40 CET 2011
- * @generated */
-public class SentimentAnnotation_Type extends Annotation_Type {
-  /** @generated */
-  protected FSGenerator getFSGenerator() {return fsGenerator;}
-  /** @generated */
-  private final FSGenerator fsGenerator = 
-    new FSGenerator() {
-      public FeatureStructure createFS(int addr, CASImpl cas) {
-        if (SentimentAnnotation_Type.this.useExistingInstance) {
-          // Return eq fs instance if already created
-          FeatureStructure fs = SentimentAnnotation_Type.this.jcas.getJfsFromCaddr(addr);
-          if (null == fs) {
-            fs = new SentimentAnnotation(addr, SentimentAnnotation_Type.this);
-            SentimentAnnotation_Type.this.jcas.putJfsFromCaddr(addr, fs);
-            return fs;
-          }
-          return fs;
-        } else return new SentimentAnnotation(addr, SentimentAnnotation_Type.this);
-      }
-    };
-  /** @generated */
-  public final static int typeIndexID = SentimentAnnotation.typeIndexID;
-  /** @generated 
-     @modifiable */
-  public final static boolean featOkTst = JCasRegistry.getFeatOkTst("org.apache.solr.uima.ts.SentimentAnnotation");
- 
-  /** @generated */
-  final Feature casFeat_mood;
-  /** @generated */
-  final int     casFeatCode_mood;
-  /** @generated */ 
-  public String getMood(int addr) {
-        if (featOkTst && casFeat_mood == null)
-      jcas.throwFeatMissing("mood", "org.apache.solr.uima.ts.SentimentAnnotation");
-    return ll_cas.ll_getStringValue(addr, casFeatCode_mood);
-  }
-  /** @generated */    
-  public void setMood(int addr, String v) {
-        if (featOkTst && casFeat_mood == null)
-      jcas.throwFeatMissing("mood", "org.apache.solr.uima.ts.SentimentAnnotation");
-    ll_cas.ll_setStringValue(addr, casFeatCode_mood, v);}
-    
-  
-
-
-
-  /** initialize variables to correspond with Cas Type and Features
-  * @generated */
-  public SentimentAnnotation_Type(JCas jcas, Type casType) {
-    super(jcas, casType);
-    casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType, getFSGenerator());
-
- 
-    casFeat_mood = jcas.getRequiredFeatureDE(casType, "mood", "uima.cas.String", featOkTst);
-    casFeatCode_mood  = (null == casFeat_mood) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_mood).getCode();
-
-  }
-}
-
-
-
-    

