GitDiffStart: e1193311491af26c026f0c4dbe9d4d84143f2dbf | Fri Mar 22 02:04:39 2013 +0000
diff --git a/lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/WholeBreakIterator.java b/lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/WholeBreakIterator.java
index d88205a..30555f3 100644
--- a/lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/WholeBreakIterator.java
+++ b/lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/WholeBreakIterator.java
@@ -112,6 +112,6 @@ final class WholeBreakIterator extends BreakIterator {
     start = newText.getBeginIndex();
     end = newText.getEndIndex();
     text = newText;
-    current = newText.getIndex();
+    current = start;
   }
 }
diff --git a/lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestWholeBreakIterator.java b/lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestWholeBreakIterator.java
index e93c759..d113509 100644
--- a/lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestWholeBreakIterator.java
+++ b/lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestWholeBreakIterator.java
@@ -62,6 +62,13 @@ public class TestWholeBreakIterator extends LuceneTestCase {
     assertSameBreaks("000abc000", 3, 3, expected, actual);
     assertSameBreaks("000000", 3, 0, expected, actual);
   }
+  
+  /** the current position must be ignored, initial position is always first() */
+  public void testFirstPosition() throws Exception {
+    BreakIterator expected = BreakIterator.getSentenceInstance(Locale.ROOT);
+    BreakIterator actual = new WholeBreakIterator();
+    assertSameBreaks("000ab000", 3, 2, 4, expected, actual);
+  }
 
   public void assertSameBreaks(String text, BreakIterator expected, BreakIterator actual) {
     assertSameBreaks(new StringCharacterIterator(text), 
@@ -71,8 +78,12 @@ public class TestWholeBreakIterator extends LuceneTestCase {
   }
   
   public void assertSameBreaks(String text, int offset, int length, BreakIterator expected, BreakIterator actual) {
-    assertSameBreaks(new StringCharacterIterator(text, offset, offset+length, offset), 
-                     new StringCharacterIterator(text, offset, offset+length, offset), 
+    assertSameBreaks(text, offset, length, offset, expected, actual);
+  }
+  
+  public void assertSameBreaks(String text, int offset, int length, int current, BreakIterator expected, BreakIterator actual) {
+    assertSameBreaks(new StringCharacterIterator(text, offset, offset+length, current), 
+                     new StringCharacterIterator(text, offset, offset+length, current), 
                      expected, 
                      actual);
   }

