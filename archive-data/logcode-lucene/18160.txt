GitDiffStart: ba6bfab9b8f6a8d1dd4f24cd5650512db52bf4a9 | Wed Mar 24 06:27:11 2010 +0000
diff --git a/lucene/src/java/org/apache/lucene/index/IndexWriterConfig.java b/lucene/src/java/org/apache/lucene/index/IndexWriterConfig.java
index e4b7626..4e5e19a 100644
--- a/lucene/src/java/org/apache/lucene/index/IndexWriterConfig.java
+++ b/lucene/src/java/org/apache/lucene/index/IndexWriterConfig.java
@@ -84,7 +84,7 @@ public final class IndexWriterConfig implements Cloneable {
    *  others to finish. */
   public final static int DEFAULT_MAX_THREAD_STATES = 8;
 
-  /** Default setting for {@link #setIndexWriterPooling}. */
+  /** Default setting for {@link #setReaderPooling}. */
   public final static boolean DEFAULT_READER_POOLING = false;
 
   /**
diff --git a/lucene/src/java/org/apache/lucene/store/MMapDirectory.java b/lucene/src/java/org/apache/lucene/store/MMapDirectory.java
index f0a1e32..dc7a785 100644
--- a/lucene/src/java/org/apache/lucene/store/MMapDirectory.java
+++ b/lucene/src/java/org/apache/lucene/store/MMapDirectory.java
@@ -34,7 +34,7 @@ import org.apache.lucene.util.Constants;
 
 /** File-based {@link Directory} implementation that uses
  *  mmap for reading, and {@link
- *  SimpleFSDirectory.SimpleFSIndexOutput} for writing.
+ *  FSDirectory.FSIndexOutput} for writing.
  *
  * <p><b>NOTE</b>: memory mapping uses up a portion of the
  * virtual memory address space in your process equal to the
diff --git a/lucene/src/java/org/apache/lucene/store/NIOFSDirectory.java b/lucene/src/java/org/apache/lucene/store/NIOFSDirectory.java
index f38be2c..69d1fbe 100644
--- a/lucene/src/java/org/apache/lucene/store/NIOFSDirectory.java
+++ b/lucene/src/java/org/apache/lucene/store/NIOFSDirectory.java
@@ -29,7 +29,7 @@ import java.nio.channels.FileChannel;
  * synchronizing.
  *
  * <p>This class only uses FileChannel when reading; writing
- * is achieved with {@link SimpleFSDirectory.SimpleFSIndexOutput}.
+ * is achieved with {@link FSDirectory.FSIndexOutput}.
  * 
  * <p><b>NOTE</b>: NIOFSDirectory is not recommended on Windows because of a bug
  * in how FileChannel.read is implemented in Sun's JRE.

