GitDiffStart: 898ae3f93b44d378b20543893c0f6c1d8ea6ba86 | Mon Nov 19 14:29:53 2012 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer.java b/lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer.java
index 3bfb0d4..cb6372a 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer.java
@@ -85,7 +85,7 @@ public abstract class SimpleDVConsumer implements Closeable {
       //System.out.println("merge field=" + mergeState.fieldInfo.name);
       NumericDocValues docValues = reader.getNumericDocValues(mergeState.fieldInfo.name);
       if (docValues == null) {
-        docValues = new NumericDocValues.EMPTY(1);
+        docValues = new NumericDocValues.EMPTY(maxDoc);
       }
       for (int i = 0; i < maxDoc; i++) {
         if (liveDocs == null || liveDocs.get(i)) {
diff --git a/lucene/core/src/java/org/apache/lucene/index/NumericDocValues.java b/lucene/core/src/java/org/apache/lucene/index/NumericDocValues.java
index 87d65b6..9fefa72 100644
--- a/lucene/core/src/java/org/apache/lucene/index/NumericDocValues.java
+++ b/lucene/core/src/java/org/apache/lucene/index/NumericDocValues.java
@@ -25,6 +25,48 @@ public abstract class NumericDocValues {
   public abstract long minValue();
   public abstract long maxValue();
   public abstract int size();
+  
+  public NumericDocValues newRAMInstance() {
+    // TODO: optimize this default impl with e.g. isFixedLength/maxLength and so on
+    // nocommit used packed ints/pagedbytes and so on
+    final int maxDoc = size();
+    final long minValue = minValue();
+    final long maxValue = maxValue();
+
+    final long[] values = new long[maxDoc];
+    for(int docID=0;docID<maxDoc;docID++) {
+      values[docID] = get(docID);
+    }
+    
+    return new NumericDocValues() {
+
+      @Override
+      public long get(int docID) {
+        return values[docID];
+      }
+
+      @Override
+      public int size() {
+        return maxDoc;
+      }
+
+      @Override
+      public long minValue() {
+        return minValue;
+      }
+
+      @Override
+      public long maxValue() {
+        return maxValue;
+      }
+
+      @Override
+      public NumericDocValues newRAMInstance() {
+        // nocommit: ugly, maybe throw exception instead?
+        return this; 
+      }
+    };
+  }
 
   public static final class EMPTY extends NumericDocValues {
     private final int size;

