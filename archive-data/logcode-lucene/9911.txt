GitDiffStart: a1ff333b26d6610832171586c611b79f9a2777c3 | Wed Jan 9 13:48:41 2013 +0000
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesFormat.java b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesFormat.java
index 6443d6f..c334838 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesFormat.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesFormat.java
@@ -54,6 +54,7 @@ public class MemoryDocValuesFormat extends SimpleDocValuesFormat {
   
   @Override
   public SimpleDVProducer fieldsProducer(SegmentReadState state) throws IOException {
+    final int maxDoc = state.segmentInfo.getDocCount();
     final SimpleDVProducer producer = new SimpleTextDocValuesReader(state, "dat");
 
     return new SimpleDVProducer() {
@@ -62,7 +63,6 @@ public class MemoryDocValuesFormat extends SimpleDocValuesFormat {
       public NumericDocValues getNumeric(FieldInfo field) throws IOException {
         NumericDocValues valuesIn = producer.getNumeric(field);
 
-        final int maxDoc = valuesIn.size();
         long minValue = Long.MAX_VALUE;
         long maxValue = Long.MIN_VALUE;
         for(int docID=0;docID<maxDoc;docID++) {
@@ -86,18 +86,12 @@ public class MemoryDocValuesFormat extends SimpleDocValuesFormat {
           public long get(int docID) {
             return finalMinValue + values.get(docID);
           }
-
-          @Override
-          public int size() {
-            return maxDoc;
-          }
         };
       }
       
       @Override
       public BinaryDocValues getBinary(FieldInfo field) throws IOException {
         BinaryDocValues valuesIn = producer.getBinary(field);
-        final int maxDoc = valuesIn.size();
         // nocommit more ram efficient
         final byte[][] values = new byte[maxDoc][];
         BytesRef scratch = new BytesRef();
@@ -115,18 +109,12 @@ public class MemoryDocValuesFormat extends SimpleDocValuesFormat {
             result.offset = 0;
             result.length = result.bytes.length;
           }
-
-          @Override
-          public int size() {
-            return maxDoc;
-          }
         };
       }
 
       @Override
       public SortedDocValues getSorted(FieldInfo field) throws IOException {
         SortedDocValues valuesIn = producer.getSorted(field);
-        final int maxDoc = valuesIn.size();
         final int valueCount = valuesIn.getValueCount();
 
         // nocommit used packed ints and so on
@@ -160,11 +148,6 @@ public class MemoryDocValuesFormat extends SimpleDocValuesFormat {
           public int getValueCount() {
             return valueCount;
           }
-
-          @Override
-          public int size() {
-            return maxDoc;
-          }
         };
       }
 
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.java b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.java
index 5f0bc3d..d5aa553 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.java
@@ -505,11 +505,6 @@ public class SimpleTextSimpleDocValuesFormat extends SimpleDocValuesFormat {
             throw new RuntimeException(ioe);
           }
         }
-
-        @Override
-        public int size() {
-          return maxDoc;
-        }
       };
     }
 
@@ -551,11 +546,6 @@ public class SimpleTextSimpleDocValuesFormat extends SimpleDocValuesFormat {
             throw new RuntimeException(ioe);
           }
         }
-
-        @Override
-        public int size() {
-          return maxDoc;
-        }
       };
     }
 
@@ -623,11 +613,6 @@ public class SimpleTextSimpleDocValuesFormat extends SimpleDocValuesFormat {
         public int getValueCount() {
           return field.numValues;
         }
-
-        @Override
-        public int size() {
-          return maxDoc;
-        }
       };
     }
 
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer.java
index 2a0e08c..5d66c68 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer.java
@@ -133,11 +133,6 @@ class Lucene41SimpleDocValuesProducer extends SimpleDVProducer {
       public long get(int docID) {
         return entry.minValue + reader.get(docID);
       }
-
-      @Override
-      public int size() {
-        return entry.header.getValueCount();
-      }
     };
   }
 
@@ -169,11 +164,6 @@ class Lucene41SimpleDocValuesProducer extends SimpleDVProducer {
           throw new RuntimeException(e);
         }
       }
-
-      @Override
-      public int size() {
-        return bytes.count;
-      }
     };
   }
   
@@ -198,16 +188,13 @@ class Lucene41SimpleDocValuesProducer extends SimpleDVProducer {
           throw new RuntimeException(e);
         }
       }
-
-      @Override
-      public int size() {
-        return bytes.count;
-      }
     };
   }
 
   @Override
   public SortedDocValues getSorted(FieldInfo field) throws IOException {
+    // nocommit: ugly hack to nuke size()
+    final BinaryEntry binaryEntry = binaries.get(field.number);
     final BinaryDocValues binary = getBinary(field);
     final NumericDocValues ordinals = getNumeric(field, ords.get(field.number));
     return new SortedDocValues() {
@@ -224,12 +211,7 @@ class Lucene41SimpleDocValuesProducer extends SimpleDVProducer {
 
       @Override
       public int getValueCount() {
-        return binary.size();
-      }
-
-      @Override
-      public int size() {
-        return ordinals.size();
+        return binaryEntry.count;
       }
     };
   }
diff --git a/lucene/core/src/java/org/apache/lucene/index/BinaryDocValues.java b/lucene/core/src/java/org/apache/lucene/index/BinaryDocValues.java
index c8edf0c..8ac91e9 100644
--- a/lucene/core/src/java/org/apache/lucene/index/BinaryDocValues.java
+++ b/lucene/core/src/java/org/apache/lucene/index/BinaryDocValues.java
@@ -25,23 +25,10 @@ public abstract class BinaryDocValues {
 
   public static final byte[] MISSING = new byte[0];
   
-  public abstract int size();
-  
-  public static class EMPTY extends BinaryDocValues {
-    private final int size;
-    
-    public EMPTY(int size) {
-      this.size = size;
-    }
-    
+  public static final BinaryDocValues EMPTY = new BinaryDocValues() {
     @Override
     public void get(int docID, BytesRef result) {
       result.length = 0;
     }
-
-    @Override
-    public int size() {
-      return size;
-    }
   };
 }
diff --git a/lucene/core/src/java/org/apache/lucene/index/NumericDocValues.java b/lucene/core/src/java/org/apache/lucene/index/NumericDocValues.java
index 4afd240..6480510 100644
--- a/lucene/core/src/java/org/apache/lucene/index/NumericDocValues.java
+++ b/lucene/core/src/java/org/apache/lucene/index/NumericDocValues.java
@@ -19,24 +19,11 @@ package org.apache.lucene.index;
 
 public abstract class NumericDocValues {
   public abstract long get(int docID);
-  
-  public abstract int size();
-  
-  public static final class EMPTY extends NumericDocValues {
-    private final int size;
-    
-    public EMPTY(int size) {
-      this.size = size;
-    }
 
+  public static final NumericDocValues EMPTY = new NumericDocValues() {
     @Override
     public long get(int docID) {
       return 0;
     }
-
-    @Override
-    public int size() {
-      return size;
-    }
   };
 }
diff --git a/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java b/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java
index 2d64ce9..01d25ba 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SegmentMerger.java
@@ -181,7 +181,7 @@ final class SegmentMerger {
               for (AtomicReader reader : mergeState.readers) {
                 NumericDocValues values = reader.getNumericDocValues(field.name);
                 if (values == null) {
-                  values = new NumericDocValues.EMPTY(reader.maxDoc());
+                  values = NumericDocValues.EMPTY;
                 }
                 toMerge.add(values);
               }
@@ -191,7 +191,7 @@ final class SegmentMerger {
               for (AtomicReader reader : mergeState.readers) {
                 BinaryDocValues values = reader.getBinaryDocValues(field.name);
                 if (values == null) {
-                  values = new BinaryDocValues.EMPTY(reader.maxDoc());
+                  values = BinaryDocValues.EMPTY;
                 }
                 toMerge.add(values);
               }
@@ -201,7 +201,7 @@ final class SegmentMerger {
               for (AtomicReader reader : mergeState.readers) {
                 SortedDocValues values = reader.getSortedDocValues(field.name);
                 if (values == null) {
-                  values = new SortedDocValues.EMPTY(reader.maxDoc());
+                  values = SortedDocValues.EMPTY;
                 }
                 toMerge.add(values);
               }
@@ -233,7 +233,7 @@ final class SegmentMerger {
             for (AtomicReader reader : mergeState.readers) {
               NumericDocValues norms = reader.simpleNormValues(field.name);
               if (norms == null) {
-                norms = new NumericDocValues.EMPTY(reader.maxDoc());
+                norms = NumericDocValues.EMPTY;
               }
               toMerge.add(norms);
             }
diff --git a/lucene/core/src/java/org/apache/lucene/index/SortedDocValues.java b/lucene/core/src/java/org/apache/lucene/index/SortedDocValues.java
index 9be87ed..2b7ec2d 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SortedDocValues.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SortedDocValues.java
@@ -144,13 +144,7 @@ public abstract class SortedDocValues extends BinaryDocValues {
     };
   }
 
-  public static class EMPTY extends SortedDocValues {
-    private final int size;
-    
-    public EMPTY(int size) {
-      this.size = size;
-    }
-
+  public static final SortedDocValues EMPTY = new SortedDocValues() {
     @Override
     public int getOrd(int docID) {
       return 0;
@@ -165,12 +159,7 @@ public abstract class SortedDocValues extends BinaryDocValues {
     public int getValueCount() {
       return 1;
     }
-
-    @Override
-    public int size() {
-      return size;
-    }
-  }
+  };
 
   /** If {@code key} exists, returns its ordinal, else
    *  returns {@code -insertionPoint-1}, like {@code
diff --git a/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java b/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java
index 867bb23..76fb49c 100644
--- a/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java
+++ b/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java
@@ -959,11 +959,6 @@ class FieldCacheImpl implements FieldCache {
     }
 
     @Override
-    public int size() {
-      return docToTermOrd.size();
-    }
-
-    @Override
     public void lookupOrd(int ord, BytesRef ret) {
       if (ord < 0) {
         throw new IllegalArgumentException("ord must be >=0 (got ord=" + ord + ")");
@@ -1248,11 +1243,6 @@ class FieldCacheImpl implements FieldCache {
     }
 
     @Override
-    public int size() {
-      return docToOffset.size();
-    }
-
-    @Override
     public void get(int docID, BytesRef ret) {
       final int pointer = (int) docToOffset.get(docID);
       if (pointer == 0) {
diff --git a/lucene/core/src/test/org/apache/lucene/TestDemoDocValue.java b/lucene/core/src/test/org/apache/lucene/TestDemoDocValue.java
index 57700f0..c6783b5 100644
--- a/lucene/core/src/test/org/apache/lucene/TestDemoDocValue.java
+++ b/lucene/core/src/test/org/apache/lucene/TestDemoDocValue.java
@@ -586,7 +586,6 @@ public class TestDemoDocValue extends LuceneTestCase {
     IndexReader ireader = DirectoryReader.open(directory); // read-only=true
     assert ireader.leaves().size() == 1;
     SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues("dv");
-    assertEquals(3, dv.size());
     assertEquals(2, dv.getValueCount());
     BytesRef scratch = new BytesRef();
     assertEquals(0, dv.getOrd(0));
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java b/lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java
index 17c247c..3ee434a 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader.java
@@ -570,8 +570,7 @@ public void testFilesOpenClose() throws IOException {
       NumericDocValues norms2 = MultiSimpleDocValues.simpleNormValues(index2, curField);
       if (norms1 != null && norms2 != null) {
         // todo: generalize this (like TestDuelingCodecs assert)
-        assertEquals(norms1.size(), norms2.size());
-        for (int i = 0; i < norms1.size(); i++) {
+        for (int i = 0; i < index1.maxDoc(); i++) {
           assertEquals("Norm different for doc " + i + " and field '" + curField + "'.", norms1.get(i), norms2.get(i));
         }
       } else {
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java b/lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java
index 9e9cdf2..c41a307 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs.java
@@ -535,7 +535,7 @@ public class TestDuelingCodecs extends LuceneTestCase {
       NumericDocValues leftNorms = MultiSimpleDocValues.simpleNormValues(leftReader, field);
       NumericDocValues rightNorms = MultiSimpleDocValues.simpleNormValues(rightReader, field);
       if (leftNorms != null && rightNorms != null) {
-        assertDocValues(leftNorms, rightNorms);
+        assertDocValues(leftReader.maxDoc(), leftNorms, rightNorms);
       } else {
         assertNull(leftNorms);
         assertNull(rightNorms);
@@ -624,7 +624,7 @@ public class TestDuelingCodecs extends LuceneTestCase {
         NumericDocValues leftValues = MultiSimpleDocValues.simpleNumericValues(leftReader, field);
         NumericDocValues rightValues = MultiSimpleDocValues.simpleNumericValues(rightReader, field);
         if (leftValues != null && rightValues != null) {
-          assertDocValues(leftValues, rightValues);
+          assertDocValues(leftReader.maxDoc(), leftValues, rightValues);
         } else {
           assertNull(leftValues);
           assertNull(rightValues);
@@ -635,10 +635,9 @@ public class TestDuelingCodecs extends LuceneTestCase {
         BinaryDocValues leftValues = MultiSimpleDocValues.simpleBinaryValues(leftReader, field);
         BinaryDocValues rightValues = MultiSimpleDocValues.simpleBinaryValues(rightReader, field);
         if (leftValues != null && rightValues != null) {
-          assertEquals(leftValues.size(), rightValues.size());
           BytesRef scratchLeft = new BytesRef();
           BytesRef scratchRight = new BytesRef();
-          for(int docID=0;docID<leftValues.size();docID++) {
+          for(int docID=0;docID<leftReader.maxDoc();docID++) {
             leftValues.get(docID, scratchLeft);
             rightValues.get(docID, scratchRight);
             assertEquals(scratchLeft, scratchRight);
@@ -651,11 +650,10 @@ public class TestDuelingCodecs extends LuceneTestCase {
     }
   }
   
-  public void assertDocValues(NumericDocValues leftDocValues, NumericDocValues rightDocValues) throws Exception {
+  public void assertDocValues(int num, NumericDocValues leftDocValues, NumericDocValues rightDocValues) throws Exception {
     assertNotNull(info, leftDocValues);
     assertNotNull(info, rightDocValues);
-    assertEquals(info, leftDocValues.size(), rightDocValues.size());
-    for(int docID=0;docID<leftDocValues.size();docID++) {
+    for(int docID=0;docID<num;docID++) {
       assertEquals(leftDocValues.get(docID),
                    rightDocValues.get(docID));
     }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java b/lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
index 53f35f4..4bf27a4 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -1688,7 +1688,6 @@ public class TestIndexWriter extends LuceneTestCase {
 
     SortedDocValues dti = FieldCache.DEFAULT.getTermsIndex(SlowCompositeReaderWrapper.wrap(reader), "content", random().nextFloat() * PackedInts.FAST);
     assertEquals(4, dti.getValueCount());
-    assertEquals(4, dti.size());
     BytesRef br = new BytesRef();
     dti.lookupOrd(2, br);
     assertEquals(bigTermBytesRef, br);
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestOmitNorms.java b/lucene/core/src/test/org/apache/lucene/index/TestOmitNorms.java
index 029b841..1e7a7d7 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestOmitNorms.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestOmitNorms.java
@@ -303,8 +303,7 @@ public class TestOmitNorms extends LuceneTestCase {
     if (norms1 == null) {
       assertNull(norms2);
     } else {
-      assertEquals(norms1.size(), norms2.size());
-      for(int docID=0;docID<norms1.size();docID++) {
+      for(int docID=0;docID<ir1.maxDoc();docID++) {
         assertEquals(norms1.get(docID), norms2.get(docID));
       }
     }
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestFieldCache.java b/lucene/core/src/test/org/apache/lucene/search/TestFieldCache.java
index 3e81fc2..bd11620 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestFieldCache.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestFieldCache.java
@@ -191,7 +191,6 @@ public class TestFieldCache extends LuceneTestCase {
     // getTermsIndex
     SortedDocValues termsIndex = cache.getTermsIndex(reader, "theRandomUnicodeString");
     assertSame("Second request to cache return same array", termsIndex, cache.getTermsIndex(reader, "theRandomUnicodeString"));
-    assertTrue("doubles Size: " + termsIndex.size() + " is not: " + NUM_DOCS, termsIndex.size() == NUM_DOCS);
     final BytesRef br = new BytesRef();
     for (int i = 0; i < NUM_DOCS; i++) {
       final BytesRef term;
@@ -233,7 +232,6 @@ public class TestFieldCache extends LuceneTestCase {
     // getTerms
     BinaryDocValues terms = cache.getTerms(reader, "theRandomUnicodeString");
     assertSame("Second request to cache return same array", terms, cache.getTerms(reader, "theRandomUnicodeString"));
-    assertTrue("doubles Size: " + terms.size() + " is not: " + NUM_DOCS, terms.size() == NUM_DOCS);
     for (int i = 0; i < NUM_DOCS; i++) {
       terms.get(i, br);
       final BytesRef term;
diff --git a/lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues.java b/lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues.java
index b057fd8..72cfef9 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues.java
@@ -31,7 +31,7 @@ public class MultiSimpleDocValues {
       NumericDocValues norms = ctx.reader().simpleNormValues(field);
 
       if (norms == null) {
-        norms = new NumericDocValues.EMPTY(ctx.reader().maxDoc());
+        norms = NumericDocValues.EMPTY;
       } else {
         anyReal = true;
       }
@@ -56,11 +56,6 @@ public class MultiSimpleDocValues {
             return norms.get(docID - leaves.get(subIndex).docBase);
           }
         }
-
-        @Override
-        public int size() {
-          return r.maxDoc();
-        }
       };
     }
   }
@@ -72,7 +67,7 @@ public class MultiSimpleDocValues {
       NumericDocValues values = ctx.reader().getNumericDocValues(field);
 
       if (values == null) {
-        values = new NumericDocValues.EMPTY(ctx.reader().maxDoc());
+        values = NumericDocValues.EMPTY;
       } else {
         anyReal = true;
       }
@@ -97,11 +92,6 @@ public class MultiSimpleDocValues {
             return values.get(docID - leaves.get(subIndex).docBase);
           }
         }
-
-        @Override
-        public int size() {
-          return r.maxDoc();
-        }
       };
     }
   }
@@ -114,7 +104,7 @@ public class MultiSimpleDocValues {
       BinaryDocValues values = ctx.reader().getBinaryDocValues(field);
 
       if (values == null) {
-        values = new BinaryDocValues.EMPTY(ctx.reader().maxDoc());
+        values = BinaryDocValues.EMPTY;
       } else {
         anyReal = true;
       }
@@ -141,11 +131,6 @@ public class MultiSimpleDocValues {
             result.bytes = BinaryDocValues.MISSING;
           }
         }
-
-        @Override
-        public int size() {
-          return r.maxDoc();
-        }
       };
     }
   }

