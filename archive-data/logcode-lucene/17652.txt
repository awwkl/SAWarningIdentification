GitDiffStart: a604160149c218c980402e2c48678944a02ad11a | Mon Jul 26 15:36:58 2010 +0000
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/CodecProvider.java b/lucene/src/java/org/apache/lucene/index/codecs/CodecProvider.java
index 3af2112..3eb695c 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/CodecProvider.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/CodecProvider.java
@@ -53,8 +53,7 @@ public abstract class CodecProvider {
     if (codec.name == null) {
       throw new IllegalArgumentException("code.name is null");
     }
-    // nocommit
-    if (!codecs.containsKey(codec.name) || codec.name.equals("PreFlex")) {
+    if (!codecs.containsKey(codec.name)) {
       codecs.put(codec.name, codec);
       codec.getExtensions(knownExtensions);
     } else if (codecs.get(codec.name) != codec) {
@@ -67,13 +66,13 @@ public abstract class CodecProvider {
     if (codec.name == null) {
       throw new IllegalArgumentException("code.name is null");
     }
-    // nocommit
     if (codecs.containsKey(codec.name)) {
       Codec c = codecs.get(codec.name);
-      if (codec.getClass().isAssignableFrom(c.getClass()))
+      if (codec == c) {
         codecs.remove(codec.name);
-      else
+      } else {
         throw new IllegalArgumentException("codec '" + codec.name + "' is being impersonated by a different codec instance!!!");
+      }
     }
   }
 
@@ -126,8 +125,5 @@ class DefaultCodecProvider extends CodecProvider {
   @Override
   public Codec getWriter(SegmentWriteState state) {
     return lookup(CodecProvider.getDefaultCodec());
-    //return lookup("Pulsing");
-    //return lookup("Sep");
-    //return lookup("IntBlock");
   }
-}
\ No newline at end of file
+}
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.java b/lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.java
index 10fa047..473bff9 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.java
@@ -290,7 +290,8 @@ public class PreFlexFields extends FieldsProducer {
       // unicode character:
       assert isHighBMPChar(term.bytes, pos);
 
-      // nocommit -- why does this trip?
+      // TODO: understand why this assert sometimes (rarely)
+      // trips!
       // assert term.length >= pos + 3: "term.length=" + term.length + " pos+3=" + (pos+3);
 
       // Save the bytes && length, since we need to
@@ -597,7 +598,7 @@ public class PreFlexFields extends FieldsProducer {
             (upTo > newSuffixStart ||
              (upTo >= prevTerm.length ||
               (!isNonBMPChar(prevTerm.bytes, upTo) &&
-               !isHighBMPChar(prevTerm.bytes, upTo))))) {  // nocommit -- we can't cmp to prevTerm if we'd done a seek 3 or seek 2 before?
+               !isHighBMPChar(prevTerm.bytes, upTo))))) {
 
           // A non-BMP char (4 bytes UTF8) starts here:
           assert scratchTerm.length >= upTo + 4;
@@ -760,8 +761,8 @@ public class PreFlexFields extends FieldsProducer {
         return SeekStatus.FOUND;
       } else if (t == null || t.field() != fieldInfo.name) {
 
-        // nocommit -- why can't we handle this like the
-        // next() into null?  set term as prevTerm then dance?
+        // TODO: maybe we can handle this like the next()
+        // into null?  set term as prevTerm then dance?
 
         if (DEBUG_SURROGATES) {
           System.out.println("  seek hit EOF");
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer.java b/lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer.java
index 3b1dd82..679469d 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer.java
@@ -69,8 +69,8 @@ final class TermBuffer implements Cloneable {
 
   public void set(TermBuffer other) {
     field = other.field;
-    // nocommit -- right?
-    //term = other.term;
+    // dangerous to copy Term over, since the underlying
+    // BytesRef could subsequently be modified:
     term = null;
     bytes.copy(other.bytes);
   }
diff --git a/lucene/src/test/org/apache/lucene/search/TestFilteredQuery.java b/lucene/src/test/org/apache/lucene/search/TestFilteredQuery.java
index ec9cc98..8a51ccf 100644
--- a/lucene/src/test/org/apache/lucene/search/TestFilteredQuery.java
+++ b/lucene/src/test/org/apache/lucene/search/TestFilteredQuery.java
@@ -48,7 +48,6 @@ public class TestFilteredQuery extends LuceneTestCase {
   protected void setUp() throws Exception {
     super.setUp();
     directory = new RAMDirectory();
-    // nocommit seed
     RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory);
 
     Document doc = new Document();
diff --git a/lucene/src/test/org/apache/lucene/search/TestRegexpRandom2.java b/lucene/src/test/org/apache/lucene/search/TestRegexpRandom2.java
index ca664dc..485559a 100644
--- a/lucene/src/test/org/apache/lucene/search/TestRegexpRandom2.java
+++ b/lucene/src/test/org/apache/lucene/search/TestRegexpRandom2.java
@@ -55,7 +55,6 @@ public class TestRegexpRandom2 extends LuceneTestCase {
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    // nocommit seed
     random = newRandom();
     dir = new MockRAMDirectory();
     // TODO: fix mocktokenizer to not extend chartokenizer, so you can have an 'empty' keyword.
diff --git a/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java b/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java
index ef46ef3..57c192e 100644
--- a/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java
@@ -37,8 +37,7 @@ import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.search.FieldCache.CacheEntry;
 import org.apache.lucene.util.FieldCacheSanityChecker.Insanity;
 import org.apache.lucene.index.codecs.CodecProvider;
-import org.apache.lucene.index.codecs.preflex.PreFlexCodec;
-import org.apache.lucene.index.codecs.preflexrw.PreFlexRWCodec;
+import org.apache.lucene.index.codecs.Codec;
 
 /** 
  * Base class for all Lucene unit tests.  
@@ -79,6 +78,7 @@ public abstract class LuceneTestCase extends TestCase {
   
   private String savedDefaultCodec;
   private String codec;
+  private Codec preFlexSav;
 
   /** Used to track if setUp and tearDown are called correctly from subclasses */
   private boolean setup;
@@ -128,7 +128,7 @@ public abstract class LuceneTestCase extends TestCase {
     // test-only PreFlexRW codec (since core PreFlex can
     // only read segments):
     if (codec.equals("PreFlex")) {
-      CodecProvider.getDefault().register(new PreFlexRWCodec());
+      preFlexSav = LuceneTestCaseJ4.installPreFlexRW();
     } 
     CodecProvider.setDefaultCodec(codec);
   }
@@ -158,8 +158,7 @@ public abstract class LuceneTestCase extends TestCase {
     BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);
     // Restore read-only PreFlex codec:
     if (codec.equals("PreFlex")) {
-      CodecProvider.getDefault().unregister(new PreFlexRWCodec());
-      CodecProvider.getDefault().register(new PreFlexCodec());
+      LuceneTestCaseJ4.restorePreFlex(preFlexSav);
     } 
     CodecProvider.setDefaultCodec(savedDefaultCodec);
     
diff --git a/lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4.java b/lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4.java
index e6d033a..e798e38 100644
--- a/lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4.java
+++ b/lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4.java
@@ -28,7 +28,7 @@ import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.search.FieldCache.CacheEntry;
 import org.apache.lucene.util.FieldCacheSanityChecker.Insanity;
 import org.apache.lucene.index.codecs.CodecProvider;
-import org.apache.lucene.index.codecs.preflex.PreFlexCodec;
+import org.apache.lucene.index.codecs.Codec;
 import org.apache.lucene.index.codecs.preflexrw.PreFlexRWCodec;
 
 import org.junit.After;
@@ -140,7 +140,27 @@ public class LuceneTestCaseJ4 {
   // saves default codec: we do this statically as many build indexes in @beforeClass
   private static String savedDefaultCodec;
   private static String codec;
+  private static Codec preFlexSav;
   
+  // returns current PreFlex codec
+  public static Codec installPreFlexRW() {
+    final Codec preFlex = CodecProvider.getDefault().lookup("PreFlex");
+    if (preFlex != null) {
+      CodecProvider.getDefault().unregister(preFlex);
+    }
+    CodecProvider.getDefault().register(new PreFlexRWCodec());
+    return preFlex;
+  }
+
+  // returns current PreFlex codec
+  public static void restorePreFlex(Codec preFlex) {
+    Codec preFlexRW = CodecProvider.getDefault().lookup("PreFlex");
+    if (preFlexRW != null) {
+      CodecProvider.getDefault().unregister(preFlexRW);
+    }
+    CodecProvider.getDefault().register(preFlex);
+  }
+
   @BeforeClass
   public static void beforeClassLuceneTestCaseJ4() {
     savedDefaultCodec = CodecProvider.getDefaultCodec();
@@ -152,8 +172,9 @@ public class LuceneTestCaseJ4 {
     // test-only PreFlexRW codec (since core PreFlex can
     // only read segments):
     if (codec.equals("PreFlex")) {
-      CodecProvider.getDefault().register(new PreFlexRWCodec());
+      preFlexSav = installPreFlexRW();
     } 
+
     CodecProvider.setDefaultCodec(codec);
   }
   
@@ -161,9 +182,8 @@ public class LuceneTestCaseJ4 {
   public static void afterClassLuceneTestCaseJ4() {
     // Restore read-only PreFlex codec:
     if (codec.equals("PreFlex")) {
-      CodecProvider.getDefault().unregister(new PreFlexRWCodec());
-      CodecProvider.getDefault().register(new PreFlexCodec());
-    }
+      restorePreFlex(preFlexSav);
+    } 
     CodecProvider.setDefaultCodec(savedDefaultCodec);
   }
 

