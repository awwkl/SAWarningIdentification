GitDiffStart: 9f5b8ad035307945e20ebe325c81957fe4be217d | Wed Apr 29 11:23:28 2009 +0000
diff --git a/contrib/dataimporthandler/CHANGES.txt b/contrib/dataimporthandler/CHANGES.txt
index 3a2aaea..e5b9bae 100644
--- a/contrib/dataimporthandler/CHANGES.txt
+++ b/contrib/dataimporthandler/CHANGES.txt
@@ -136,6 +136,9 @@ New Features
               for processing with transformers and child entities.
               (Fergus McMenemie, Noble Paul, shalin)
 
+31.SOLR-1127: Add support for field name to be templatized.
+              (Noble Paul, shalin)
+
 Optimizations
 ----------------------
 1. SOLR-846:  Reduce memory consumption during delta import by removing keys when used
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.java
index c3ca8cc..7e0bbb0 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.java
@@ -190,6 +190,9 @@ public class DataConfig {
 
     public boolean multiValued = false;
 
+    boolean dynamicName;
+
+
     public Map<String, String> allAttributes = new HashMap<String, String>() {
       public String put(String key, String value) {
         if (super.containsKey(key))
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java
index 37921b6..0ae8fee 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java
@@ -181,6 +181,10 @@ public class DataImporter {
     if (e.fields != null) {
       for (DataConfig.Field f : e.fields) {
         if (schema != null) {
+          if(f.name != null && f.name.contains("${")){
+            f.dynamicName = true;
+            continue;
+          }
           SchemaField schemaField = schema.getFieldOrNull(f.getName());
           if (schemaField == null) {
             schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase());
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java
index 8353d58..b6101ed 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java
@@ -327,7 +327,7 @@ public class DocBuilder {
             DataConfig.Entity e = entity;
             while (e.parentEntity != null) {
               addFields(e.parentEntity, doc, (Map<String, Object>) vr
-                      .resolve(e.parentEntity.name));
+                      .resolve(e.parentEntity.name), vr);
               e = e.parentEntity;
             }
           }
@@ -335,7 +335,7 @@ public class DocBuilder {
           Map<String, Object> arow = entityProcessor.nextRow();
           if (arow == null) {
             entityProcessor.destroy();
-            break;            
+            break;
           }
 
           // Support for start parameter in debug mode
@@ -354,7 +354,7 @@ public class DocBuilder {
           importStatistics.rowsCount.incrementAndGet();
           if (doc != null) {
             handleSpecialCommands(arow, doc);
-            addFields(entity, doc, arow);
+            addFields(entity, doc, arow, vr);
           }
           if (isRoot)
             vr.removeNamespace(null);
@@ -480,7 +480,8 @@ public class DocBuilder {
   }
 
   @SuppressWarnings("unchecked")
-  private void addFields(DataConfig.Entity entity, DocWrapper doc, Map<String, Object> arow) {
+  private void addFields(DataConfig.Entity entity, DocWrapper doc,
+                         Map<String, Object> arow, VariableResolver vr) {
     for (Map.Entry<String, Object> entry : arow.entrySet()) {
       String key = entry.getKey();
       Object value = entry.getValue();
@@ -500,7 +501,11 @@ public class DocBuilder {
       } else {
         if (field != null) {
           for (DataConfig.Field f : field) {
-            if (f.toWrite) addFieldToDoc(entry.getValue(), f.getName(), f.boost, f.multiValued, doc);
+            String name = f.getName();
+            if(f.dynamicName){
+              name =  vr.replaceTokens(name);
+            }
+            if (f.toWrite) addFieldToDoc(entry.getValue(), name, f.boost, f.multiValued, doc);
           }
         }
       }
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2.java
index 56f2e91..a5ad195 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2.java
@@ -112,6 +112,21 @@ public class TestDocBuilder2 extends AbstractDataImportHandlerTest {
 
   @Test
   @SuppressWarnings("unchecked")
+  public void testRequestParamsAsFieldName() throws Exception {
+    List rows = new ArrayList();
+    rows.add(createMap("mypk", "101", "text", "ApacheSolr"));
+    MockDataSource.setIterator("select * from x", rows.iterator());
+
+    LocalSolrQueryRequest request = lrf.makeRequest("command", "full-import",
+            "debug", "on", "clean", "true", "commit", "true",
+            "mypk", "id", "text", "desc",
+            "dataConfig", dataConfigWithTemplatizedFieldNames);
+    h.query("/dataimport", request);
+    assertQ(req("id:101"), "//*[@numFound='1']");
+  }
+
+  @Test
+  @SuppressWarnings("unchecked")
   public void testContext() throws Exception {
     List rows = new ArrayList();
     rows.add(createMap("id", "1", "desc", "one"));
@@ -299,4 +314,13 @@ public class TestDocBuilder2 extends AbstractDataImportHandlerTest {
           "        </entity>\n" +
           "    </document>\n" +
           "</dataConfig>";
+
+  private final String dataConfigWithTemplatizedFieldNames = "<dataConfig>\n" +
+          "    <document>\n" +
+          "        <entity name=\"books\" query=\"select * from x\">\n" +
+          "            <field column=\"mypk\" name=\"${dih.request.mypk}\" />\n" +
+          "            <field column=\"text\" name=\"${dih.request.text}\" />\n" +
+          "        </entity>\n" +
+          "    </document>\n" +
+          "</dataConfig>";
 }

