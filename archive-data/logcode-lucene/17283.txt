GitDiffStart: 8051dfce1a7e9e3f0cd8f603cb9921fb67cc691d | Mon Oct 4 01:54:23 2010 +0000
diff --git a/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag.java b/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag.java
index f14fb23..0d219b6 100644
--- a/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag.java
+++ b/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag.java
@@ -154,7 +154,7 @@ public class TestEvaluatorBag extends SolrTestCaseJ4 {
         values.put("key", entry.getKey());
         resolver.addNamespace("A", values);
 
-        String expected = (String) entry.getValue();
+        String expected = entry.getValue();
         String actual = evaluator.evaluate("A.key", ctx);
         assertEquals(expected, actual);
       }
diff --git a/solr/src/common/org/apache/solr/common/util/FastWriter.java b/solr/src/common/org/apache/solr/common/util/FastWriter.java
index 090c3ab..4ea49df 100755
--- a/solr/src/common/org/apache/solr/common/util/FastWriter.java
+++ b/solr/src/common/org/apache/solr/common/util/FastWriter.java
@@ -55,7 +55,7 @@ public class FastWriter extends Writer {
       sink.write(buf,0,pos);
       pos=0;
     }
-    buf[pos++] = (char)c;
+    buf[pos++] = c;
   }
 
   @Override
@@ -64,7 +64,7 @@ public class FastWriter extends Writer {
       sink.write(buf,0,pos);
       pos=0;
     }
-    buf[pos++] = (char)c;
+    buf[pos++] = c;
     return this;
   }
 
diff --git a/solr/src/java/org/apache/solr/analysis/EnglishPorterFilterFactory.java b/solr/src/java/org/apache/solr/analysis/EnglishPorterFilterFactory.java
index 3871f30..f9e1ff7 100644
--- a/solr/src/java/org/apache/solr/analysis/EnglishPorterFilterFactory.java
+++ b/solr/src/java/org/apache/solr/analysis/EnglishPorterFilterFactory.java
@@ -32,6 +32,7 @@ import java.io.IOException;
  *
  * @deprecated Use SnowballPorterFilterFactory with language="English" instead
  */
+@Deprecated
 public class EnglishPorterFilterFactory extends BaseTokenFilterFactory implements ResourceLoaderAware {
   public static final String PROTECTED_TOKENS = "protected";
 
diff --git a/solr/src/java/org/apache/solr/analysis/TokenizerChain.java b/solr/src/java/org/apache/solr/analysis/TokenizerChain.java
index e882fef..4c0d04a 100644
--- a/solr/src/java/org/apache/solr/analysis/TokenizerChain.java
+++ b/solr/src/java/org/apache/solr/analysis/TokenizerChain.java
@@ -65,7 +65,7 @@ public final class TokenizerChain extends SolrAnalyzer {
 
   @Override
   public TokenStreamInfo getStream(String fieldName, Reader reader) {
-    Tokenizer tk = (Tokenizer)tokenizer.create(charStream(reader));
+    Tokenizer tk = tokenizer.create(charStream(reader));
     TokenStream ts = tk;
     for (int i=0; i<filters.length; i++) {
       ts = filters[i].create(ts);
diff --git a/solr/src/java/org/apache/solr/core/CoreContainer.java b/solr/src/java/org/apache/solr/core/CoreContainer.java
index 1ba89b1..ef72123 100644
--- a/solr/src/java/org/apache/solr/core/CoreContainer.java
+++ b/solr/src/java/org/apache/solr/core/CoreContainer.java
@@ -86,6 +86,7 @@ public class CoreContainer
     /**
      * @deprecated all cores now abort on configuration error regardless of configuration
      */
+    @Deprecated
     public boolean isAbortOnConfigurationError() {
       return true;
     }
@@ -94,6 +95,7 @@ public class CoreContainer
      * @exception generates an error if you attempt to set this value to false
      * @deprecated all cores now abort on configuration error regardless of configuration
      */
+    @Deprecated
     public void setAbortOnConfigurationError(boolean abortOnConfigurationError) {
       if (false == abortOnConfigurationError)
         throw new SolrException
diff --git a/solr/src/java/org/apache/solr/core/SolrConfig.java b/solr/src/java/org/apache/solr/core/SolrConfig.java
index 3845986..07f75a8 100644
--- a/solr/src/java/org/apache/solr/core/SolrConfig.java
+++ b/solr/src/java/org/apache/solr/core/SolrConfig.java
@@ -180,7 +180,7 @@ public class SolrConfig extends Config {
 
     httpCachingConfig = new HttpCachingConfig(this);
     
-    Node jmx = (Node) getNode("jmx", false);
+    Node jmx = getNode("jmx", false);
     if (jmx != null) {
       jmxConfig = new JmxConfiguration(true, 
                                        get("jmx/@agentId", null), 
diff --git a/solr/src/java/org/apache/solr/handler/AnalysisRequestHandler.java b/solr/src/java/org/apache/solr/handler/AnalysisRequestHandler.java
index 8e58076..ad0f86d 100644
--- a/solr/src/java/org/apache/solr/handler/AnalysisRequestHandler.java
+++ b/solr/src/java/org/apache/solr/handler/AnalysisRequestHandler.java
@@ -48,6 +48,7 @@ import java.util.Collection;
  *
  * @deprecated Use {@link org.apache.solr.handler.DocumentAnalysisRequestHandler} instead.
  **/
+@Deprecated
 public class AnalysisRequestHandler extends RequestHandlerBase {
 
   public static Logger log = LoggerFactory.getLogger(AnalysisRequestHandler.class);
diff --git a/solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java b/solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
index f086fad..b5216f7 100644
--- a/solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
+++ b/solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.java
@@ -263,18 +263,12 @@ public abstract class AnalysisRequestHandlerBase extends RequestHandlerBase {
     private final List<Token> tokens;
     private Iterator<Token> tokenIterator;
 
-    private final CharTermAttribute termAtt = (CharTermAttribute) 
-      addAttribute(CharTermAttribute.class);
-    private final OffsetAttribute offsetAtt = (OffsetAttribute) 
-      addAttribute(OffsetAttribute.class);
-    private final TypeAttribute typeAtt = (TypeAttribute) 
-      addAttribute(TypeAttribute.class);
-    private final FlagsAttribute flagsAtt = (FlagsAttribute) 
-      addAttribute(FlagsAttribute.class);
-    private final PayloadAttribute payloadAtt = (PayloadAttribute) 
-      addAttribute(PayloadAttribute.class);
-    private final PositionIncrementAttribute posIncAtt = (PositionIncrementAttribute) 
-      addAttribute(PositionIncrementAttribute.class);
+    private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
+    private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
+    private final TypeAttribute typeAtt = addAttribute(TypeAttribute.class);
+    private final FlagsAttribute flagsAtt = addAttribute(FlagsAttribute.class);
+    private final PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);
+    private final PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);
     /**
      * Creates a new ListBasedTokenStream which uses the given tokens as its token source.
      *
diff --git a/solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java b/solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java
index 73ee16c..4757719 100644
--- a/solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java
+++ b/solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java
@@ -60,16 +60,19 @@ public class XmlUpdateRequestHandler extends ContentStreamHandlerBase {
   /**
    * @deprecated use {@link #OVERWRITE}
    */
+  @Deprecated
   public static final String OVERWRITE_COMMITTED = "overwriteCommitted";
   
   /**
    * @deprecated use {@link #OVERWRITE}
    */
+  @Deprecated
   public static final String OVERWRITE_PENDING = "overwritePending";
 
   /**
    * @deprecated use {@link #OVERWRITE}
    */
+  @Deprecated
   public static final String ALLOW_DUPS = "allowDups";
 
   XMLInputFactory inputFactory;
diff --git a/solr/src/java/org/apache/solr/handler/component/FacetComponent.java b/solr/src/java/org/apache/solr/handler/component/FacetComponent.java
index cb5bb61..79e007a 100644
--- a/solr/src/java/org/apache/solr/handler/component/FacetComponent.java
+++ b/solr/src/java/org/apache/solr/handler/component/FacetComponent.java
@@ -251,7 +251,7 @@ public class  FacetComponent extends SearchComponent
       NamedList facet_queries = (NamedList)facet_counts.get("facet_queries");
       if (facet_queries != null) {
         for (int i=0; i<facet_queries.size(); i++) {
-          String returnedKey = (String)facet_queries.getName(i);
+          String returnedKey = facet_queries.getName(i);
           long count = ((Number)facet_queries.getVal(i)).longValue();
           QueryFacet qf = fi.queryFacets.get(returnedKey);
           qf.count += count;
@@ -341,7 +341,7 @@ public class  FacetComponent extends SearchComponent
 
       for (int i=0; i<facet_fields.size(); i++) {
         String key = facet_fields.getName(i);
-        DistribFieldFacet dff = (DistribFieldFacet)fi.facets.get(key);
+        DistribFieldFacet dff = fi.facets.get(key);
         if (dff == null) continue;
 
         NamedList shardCounts = (NamedList)facet_fields.getVal(i);
diff --git a/solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.java b/solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.java
index 8e0661c..ea88910 100644
--- a/solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.java
+++ b/solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.java
@@ -329,7 +329,7 @@ public class SpellCheckComponent extends SearchComponent implements SolrCoreAwar
         sugQueue.insertWithOverflow(sug);
         if (sugQueue.size() == numSug) {
           // if queue full, maintain the minScore score
-          min = ((SuggestWord) sugQueue.top()).score;
+          min = sugQueue.top().score;
         }
       }
 
@@ -343,7 +343,7 @@ public class SpellCheckComponent extends SearchComponent implements SolrCoreAwar
       for (int k=0; k < sugQueue.size() - count; k++) sugQueue.pop();
       // now collect the top 'count' responses
       for (int k = Math.min(count, sugQueue.size()) - 1; k >= 0; k--)  {
-        suggestions[k] = ((SuggestWord) sugQueue.pop());
+        suggestions[k] = sugQueue.pop();
       }
 
       if (extendedResults) {
diff --git a/solr/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java b/solr/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java
index 8457a6b..e65c311 100644
--- a/solr/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java
+++ b/solr/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java
@@ -562,7 +562,7 @@ final class TokenOrderingFilter extends TokenFilter {
   private final int windowSize;
   private final LinkedList<OrderedToken> queue = new LinkedList<OrderedToken>();
   private boolean done=false;
-  private final OffsetAttribute offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);
+  private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
   
   protected TokenOrderingFilter(TokenStream input, int windowSize) {
     super(input);
@@ -622,7 +622,7 @@ class TermOffsetsTokenStream {
 
   public TermOffsetsTokenStream( TokenStream tstream ){
     bufferedTokenStream = tstream;
-    bufferedOffsetAtt = (OffsetAttribute) bufferedTokenStream.addAttribute(OffsetAttribute.class);
+    bufferedOffsetAtt = bufferedTokenStream.addAttribute(OffsetAttribute.class);
     startOffset = 0;
     bufferedToken = null;
   }
@@ -634,7 +634,7 @@ class TermOffsetsTokenStream {
   
   final class MultiValuedStream extends TokenStream {
     private final int length;
-    OffsetAttribute offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);
+    OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
 
       MultiValuedStream(int length) { 
         super(bufferedTokenStream.cloneAttributes());
diff --git a/solr/src/java/org/apache/solr/highlight/GapFragmenter.java b/solr/src/java/org/apache/solr/highlight/GapFragmenter.java
index c130870..b8d4f0d 100644
--- a/solr/src/java/org/apache/solr/highlight/GapFragmenter.java
+++ b/solr/src/java/org/apache/solr/highlight/GapFragmenter.java
@@ -93,8 +93,8 @@ class LuceneGapFragmenter extends SimpleFragmenter {
    * @see org.apache.lucene.search.highlight.TextFragmenter#start(java.lang.String)
    */
   public void start(String originalText, TokenStream tokenStream) {
-    offsetAtt = (OffsetAttribute) tokenStream.getAttribute(OffsetAttribute.class);
-    posIncAtt = (PositionIncrementAttribute) tokenStream.getAttribute(PositionIncrementAttribute.class);
+    offsetAtt = tokenStream.getAttribute(OffsetAttribute.class);
+    posIncAtt = tokenStream.getAttribute(PositionIncrementAttribute.class);
     fragOffset = 0;
   }
 
diff --git a/solr/src/java/org/apache/solr/highlight/RegexFragmenter.java b/solr/src/java/org/apache/solr/highlight/RegexFragmenter.java
index 5887621..ec18e33 100644
--- a/solr/src/java/org/apache/solr/highlight/RegexFragmenter.java
+++ b/solr/src/java/org/apache/solr/highlight/RegexFragmenter.java
@@ -202,8 +202,8 @@ class LuceneRegexFragmenter implements Fragmenter
     currentNumFrags = 1;
     currentOffset = 0;
     addHotSpots(originalText);
-    posIncAtt = (PositionIncrementAttribute) tokenStream.getAttribute(PositionIncrementAttribute.class);
-    offsetAtt = (OffsetAttribute) tokenStream.getAttribute(OffsetAttribute.class);
+    posIncAtt = tokenStream.getAttribute(PositionIncrementAttribute.class);
+    offsetAtt = tokenStream.getAttribute(OffsetAttribute.class);
   }
 
   ////////////////////////////////////
diff --git a/solr/src/java/org/apache/solr/request/BinaryQueryResponseWriter.java b/solr/src/java/org/apache/solr/request/BinaryQueryResponseWriter.java
index 5cbdbfe..6e78e49 100644
--- a/solr/src/java/org/apache/solr/request/BinaryQueryResponseWriter.java
+++ b/solr/src/java/org/apache/solr/request/BinaryQueryResponseWriter.java
@@ -20,6 +20,7 @@ package org.apache.solr.request;
 /**
  * @deprecated use org.apache.solr.response.BinaryQueryResponseWriter
  */
+@Deprecated
 public interface BinaryQueryResponseWriter extends org.apache.solr.response.BinaryQueryResponseWriter 
 {
   
diff --git a/solr/src/java/org/apache/solr/request/BinaryResponseWriter.java b/solr/src/java/org/apache/solr/request/BinaryResponseWriter.java
index 8af34b6..87d5c51 100644
--- a/solr/src/java/org/apache/solr/request/BinaryResponseWriter.java
+++ b/solr/src/java/org/apache/solr/request/BinaryResponseWriter.java
@@ -23,6 +23,7 @@ import org.slf4j.LoggerFactory;
 /**
  * @deprecated use org.apache.solr.response.BinaryResponseWriter
  */
+@Deprecated
 public class BinaryResponseWriter extends org.apache.solr.response.BinaryResponseWriter 
 {
   private static Logger log =  LoggerFactory.getLogger(BinaryResponseWriter.class.getName());
diff --git a/solr/src/java/org/apache/solr/request/JSONResponseWriter.java b/solr/src/java/org/apache/solr/request/JSONResponseWriter.java
index db98f52..ab6db26 100644
--- a/solr/src/java/org/apache/solr/request/JSONResponseWriter.java
+++ b/solr/src/java/org/apache/solr/request/JSONResponseWriter.java
@@ -23,6 +23,7 @@ import org.slf4j.LoggerFactory;
 /**
  * @deprecated use org.apache.solr.response.JSONResponseWriter
  */
+@Deprecated
 public class JSONResponseWriter extends org.apache.solr.response.JSONResponseWriter 
 {
   
diff --git a/solr/src/java/org/apache/solr/request/PHPResponseWriter.java b/solr/src/java/org/apache/solr/request/PHPResponseWriter.java
index 9c68743..f92f4eb 100644
--- a/solr/src/java/org/apache/solr/request/PHPResponseWriter.java
+++ b/solr/src/java/org/apache/solr/request/PHPResponseWriter.java
@@ -23,6 +23,7 @@ import org.slf4j.LoggerFactory;
 /**
  * @deprecated use org.apache.solr.response.PHPResponseWriter
  */
+@Deprecated
 public class PHPResponseWriter extends org.apache.solr.response.PHPResponseWriter 
 {
   private static Logger log = LoggerFactory.getLogger(PHPResponseWriter.class.getName());
diff --git a/solr/src/java/org/apache/solr/request/PHPSerializedResponseWriter.java b/solr/src/java/org/apache/solr/request/PHPSerializedResponseWriter.java
index db7298b..1ac0241 100644
--- a/solr/src/java/org/apache/solr/request/PHPSerializedResponseWriter.java
+++ b/solr/src/java/org/apache/solr/request/PHPSerializedResponseWriter.java
@@ -23,6 +23,7 @@ import org.slf4j.LoggerFactory;
 /**
  * @deprecated use org.apache.solr.response.PHPSerializedResponseWriter
  */
+@Deprecated
 public class PHPSerializedResponseWriter extends org.apache.solr.response.PHPSerializedResponseWriter 
 {
   private static Logger log = LoggerFactory.getLogger(PHPSerializedResponseWriter.class.getName());
diff --git a/solr/src/java/org/apache/solr/request/PythonResponseWriter.java b/solr/src/java/org/apache/solr/request/PythonResponseWriter.java
index 4282941..d1cce20 100644
--- a/solr/src/java/org/apache/solr/request/PythonResponseWriter.java
+++ b/solr/src/java/org/apache/solr/request/PythonResponseWriter.java
@@ -23,6 +23,7 @@ import org.slf4j.LoggerFactory;
 /**
  * @deprecated use org.apache.solr.response.PythonResponseWriter
  */
+@Deprecated
 public class PythonResponseWriter extends org.apache.solr.response.PythonResponseWriter 
 {
   private static Logger log = LoggerFactory.getLogger(PythonResponseWriter.class.getName());
diff --git a/solr/src/java/org/apache/solr/request/QueryResponseWriter.java b/solr/src/java/org/apache/solr/request/QueryResponseWriter.java
index 750f480..6551a4e 100644
--- a/solr/src/java/org/apache/solr/request/QueryResponseWriter.java
+++ b/solr/src/java/org/apache/solr/request/QueryResponseWriter.java
@@ -20,6 +20,7 @@ package org.apache.solr.request;
 /**
  * @deprecated use org.apache.solr.response.QueryResponseWriter
  */
+@Deprecated
 public interface QueryResponseWriter extends org.apache.solr.response.QueryResponseWriter 
 {
 	
diff --git a/solr/src/java/org/apache/solr/request/RawResponseWriter.java b/solr/src/java/org/apache/solr/request/RawResponseWriter.java
index 81e6164..d9c54f0 100644
--- a/solr/src/java/org/apache/solr/request/RawResponseWriter.java
+++ b/solr/src/java/org/apache/solr/request/RawResponseWriter.java
@@ -23,6 +23,7 @@ import org.slf4j.LoggerFactory;
 /**
  * @deprecated use org.apache.solr.response.RawResponseWriter
  */
+@Deprecated
 public class RawResponseWriter extends org.apache.solr.response.RawResponseWriter 
 {
   private static Logger log = LoggerFactory.getLogger(RawResponseWriter.class.getName());
diff --git a/solr/src/java/org/apache/solr/request/RubyResponseWriter.java b/solr/src/java/org/apache/solr/request/RubyResponseWriter.java
index 3dd41b0..c8ef266 100644
--- a/solr/src/java/org/apache/solr/request/RubyResponseWriter.java
+++ b/solr/src/java/org/apache/solr/request/RubyResponseWriter.java
@@ -23,6 +23,7 @@ import org.slf4j.LoggerFactory;
 /**
  * @deprecated use org.apache.solr.response.RubyResponseWriter
  */
+@Deprecated
 public class RubyResponseWriter extends org.apache.solr.response.RubyResponseWriter 
 {
   private static Logger log = LoggerFactory.getLogger(RubyResponseWriter.class.getName());
diff --git a/solr/src/java/org/apache/solr/request/SolrQueryResponse.java b/solr/src/java/org/apache/solr/request/SolrQueryResponse.java
index 9df1502..3e80c28 100644
--- a/solr/src/java/org/apache/solr/request/SolrQueryResponse.java
+++ b/solr/src/java/org/apache/solr/request/SolrQueryResponse.java
@@ -23,6 +23,7 @@ import org.slf4j.LoggerFactory;
 /**
  * @deprecated use org.apache.solr.response.SolrQueryResponse
  */
+@Deprecated
 public class SolrQueryResponse extends org.apache.solr.response.SolrQueryResponse 
 {
   private static Logger log = LoggerFactory.getLogger(SolrQueryResponse.class.getName());
diff --git a/solr/src/java/org/apache/solr/request/TextResponseWriter.java b/solr/src/java/org/apache/solr/request/TextResponseWriter.java
index e837291..69fafe0 100644
--- a/solr/src/java/org/apache/solr/request/TextResponseWriter.java
+++ b/solr/src/java/org/apache/solr/request/TextResponseWriter.java
@@ -26,6 +26,7 @@ import org.slf4j.LoggerFactory;
 /**
  * @deprecated use org.apache.solr.response.TextResponseWriter
  */
+@Deprecated
 public abstract class TextResponseWriter extends org.apache.solr.response.TextResponseWriter 
 {
   private static Logger log = LoggerFactory.getLogger(TextResponseWriter.class.getName());
diff --git a/solr/src/java/org/apache/solr/request/XMLResponseWriter.java b/solr/src/java/org/apache/solr/request/XMLResponseWriter.java
index a137efa..f91f9e3 100644
--- a/solr/src/java/org/apache/solr/request/XMLResponseWriter.java
+++ b/solr/src/java/org/apache/solr/request/XMLResponseWriter.java
@@ -23,6 +23,7 @@ import org.slf4j.LoggerFactory;
 /**
  * @deprecated use org.apache.solr.response.XMLResponseWriter
  */
+@Deprecated
 public class XMLResponseWriter extends org.apache.solr.response.XMLResponseWriter 
 {
   private static Logger log = LoggerFactory.getLogger(XMLResponseWriter.class.getName());
diff --git a/solr/src/java/org/apache/solr/request/XSLTResponseWriter.java b/solr/src/java/org/apache/solr/request/XSLTResponseWriter.java
index 1f9c747..a83483f 100644
--- a/solr/src/java/org/apache/solr/request/XSLTResponseWriter.java
+++ b/solr/src/java/org/apache/solr/request/XSLTResponseWriter.java
@@ -23,6 +23,7 @@ import org.slf4j.LoggerFactory;
 /**
  * @deprecated use org.apache.solr.response.XSLTResponseWriter
  */
+@Deprecated
 public class XSLTResponseWriter extends org.apache.solr.response.XSLTResponseWriter 
 {
   private static Logger log = LoggerFactory.getLogger(XSLTResponseWriter.class.getName());
diff --git a/solr/src/java/org/apache/solr/response/BaseResponseWriter.java b/solr/src/java/org/apache/solr/response/BaseResponseWriter.java
index 9b0534a..2d80526 100644
--- a/solr/src/java/org/apache/solr/response/BaseResponseWriter.java
+++ b/solr/src/java/org/apache/solr/response/BaseResponseWriter.java
@@ -167,7 +167,7 @@ public abstract class BaseResponseWriter {
   private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {
     Document doc = info.searcher.doc(id);
     SolrDocument solrDoc = new SolrDocument();
-    for (Fieldable f : (List<Fieldable>) doc.getFields()) {
+    for (Fieldable f : doc.getFields()) {
       String fieldName = f.name();
       if (info.returnFields != null && !info.returnFields.contains(fieldName))
         continue;
diff --git a/solr/src/java/org/apache/solr/response/BinaryResponseWriter.java b/solr/src/java/org/apache/solr/response/BinaryResponseWriter.java
index 76e018c..4dac4ab 100755
--- a/solr/src/java/org/apache/solr/response/BinaryResponseWriter.java
+++ b/solr/src/java/org/apache/solr/response/BinaryResponseWriter.java
@@ -132,7 +132,7 @@ public class BinaryResponseWriter implements BinaryQueryResponseWriter {
 
     public SolrDocument getDoc(Document doc) {
       SolrDocument solrDoc = new SolrDocument();
-      for (Fieldable f : (List<Fieldable>) doc.getFields()) {
+      for (Fieldable f : doc.getFields()) {
         String fieldName = f.name();
         if (returnFields != null && !returnFields.contains(fieldName)) continue;
         SchemaField sf = schema.getFieldOrNull(fieldName);
diff --git a/solr/src/java/org/apache/solr/response/JSONResponseWriter.java b/solr/src/java/org/apache/solr/response/JSONResponseWriter.java
index 6fcd2e9..cae758e 100644
--- a/solr/src/java/org/apache/solr/response/JSONResponseWriter.java
+++ b/solr/src/java/org/apache/solr/response/JSONResponseWriter.java
@@ -447,7 +447,7 @@ class JSONWriter extends TextResponseWriter {
       other = scoreMap;
       scoreMap.put("score",score);
     }
-    writeDoc(name, (List<Fieldable>)(doc.getFields()), returnFields, other);
+    writeDoc(name, doc.getFields(), returnFields, other);
   }
 
   public void writeDocList(String name, DocList ids, Set<String> fields, Map otherFields) throws IOException {
diff --git a/solr/src/java/org/apache/solr/schema/DateField.java b/solr/src/java/org/apache/solr/schema/DateField.java
index a9395e3..1259d10 100644
--- a/solr/src/java/org/apache/solr/schema/DateField.java
+++ b/solr/src/java/org/apache/solr/schema/DateField.java
@@ -236,6 +236,7 @@ public class DateField extends FieldType {
    * 
    * @deprecated - use formatDate(Date) instead
    */
+  @Deprecated
   protected DateFormat getThreadLocalDateFormat() {
     return fmtThreadLocal.get();
   }
diff --git a/solr/src/java/org/apache/solr/schema/IndexSchema.java b/solr/src/java/org/apache/solr/schema/IndexSchema.java
index 89d9f90..f975566 100644
--- a/solr/src/java/org/apache/solr/schema/IndexSchema.java
+++ b/solr/src/java/org/apache/solr/schema/IndexSchema.java
@@ -132,6 +132,7 @@ public final class IndexSchema {
   /**
    * @deprecated -- get access to SolrConfig some other way...
    */
+  @Deprecated
   public SolrConfig getSolrConfig() {
     return solrConfig;
   }
@@ -274,6 +275,7 @@ public final class IndexSchema {
    * @param defaultField if non-null overrides the schema default
    * @deprecated
    */
+  @Deprecated
   public SolrQueryParser getSolrQueryParser(String defaultField) {
     SolrQueryParser qp = new SolrQueryParser(this,defaultField);
     String operator = getQueryParserDefaultOperator();
@@ -550,7 +552,7 @@ public final class IndexSchema {
     log.trace("Dynamic Field Ordering:" + dFields);
 
     // stuff it in a normal array for faster access
-    dynamicFields = (DynamicField[])dFields.toArray(new DynamicField[dFields.size()]);
+    dynamicFields = dFields.toArray(new DynamicField[dFields.size()]);
 
 
     Node node = (Node) xpath.evaluate("/schema/similarity", document, XPathConstants.NODE);
diff --git a/solr/src/java/org/apache/solr/schema/RandomSortField.java b/solr/src/java/org/apache/solr/schema/RandomSortField.java
index 4ace53e..22438e7 100644
--- a/solr/src/java/org/apache/solr/schema/RandomSortField.java
+++ b/solr/src/java/org/apache/solr/schema/RandomSortField.java
@@ -167,7 +167,7 @@ public class RandomSortField extends FieldType {
 
           @Override
           public int intVal(int doc) {
-            return (int)hash(doc+seed);
+            return hash(doc+seed);
           }
 
           @Override
diff --git a/solr/src/java/org/apache/solr/schema/SchemaField.java b/solr/src/java/org/apache/solr/schema/SchemaField.java
index 3af985a..5f45992 100644
--- a/solr/src/java/org/apache/solr/schema/SchemaField.java
+++ b/solr/src/java/org/apache/solr/schema/SchemaField.java
@@ -135,7 +135,7 @@ public final class SchemaField extends FieldProperties {
 
     String defaultValue = null;
     if( props.containsKey( "default" ) ) {
-    	defaultValue = (String)props.get( "default" );
+    	defaultValue = props.get( "default" );
     }
     return new SchemaField(name, ft, calcProps(name, ft, props), defaultValue );
   }
diff --git a/solr/src/java/org/apache/solr/search/LuceneQueryOptimizer.java b/solr/src/java/org/apache/solr/search/LuceneQueryOptimizer.java
index 58fa181..56596c7 100644
--- a/solr/src/java/org/apache/solr/search/LuceneQueryOptimizer.java
+++ b/solr/src/java/org/apache/solr/search/LuceneQueryOptimizer.java
@@ -65,7 +65,7 @@ class LuceneQueryOptimizer {
     BooleanQuery query = new BooleanQuery();
     BooleanQuery filterQuery = null;
 
-    for (BooleanClause c : (List<BooleanClause>)original.clauses()) {
+    for (BooleanClause c : original.clauses()) {
 
 /***
 System.out.println("required="+c.required);
diff --git a/solr/src/java/org/apache/solr/search/QueryParsing.java b/solr/src/java/org/apache/solr/search/QueryParsing.java
index 62f538e..146f6e9 100644
--- a/solr/src/java/org/apache/solr/search/QueryParsing.java
+++ b/solr/src/java/org/apache/solr/search/QueryParsing.java
@@ -408,7 +408,7 @@ public class QueryParsing {
       return null;
     }
 
-    return new Sort((SortField[]) lst.toArray(new SortField[lst.size()]));
+    return new Sort(lst.toArray(new SortField[lst.size()]));
   }
 
 
@@ -508,7 +508,7 @@ public class QueryParsing {
         out.append('(');
       }
       boolean first = true;
-      for (BooleanClause c : (List<BooleanClause>) q.clauses()) {
+      for (BooleanClause c : q.clauses()) {
         if (!first) {
           out.append(' ');
         } else {
diff --git a/solr/src/java/org/apache/solr/search/SolrIndexSearcher.java b/solr/src/java/org/apache/solr/search/SolrIndexSearcher.java
index a032b8d..552801a 100644
--- a/solr/src/java/org/apache/solr/search/SolrIndexSearcher.java
+++ b/solr/src/java/org/apache/solr/search/SolrIndexSearcher.java
@@ -91,6 +91,7 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
    * 
    * @deprecated use alternate constructor
    */
+  @Deprecated
   public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, String path, boolean enableCache) throws IOException {
     this(core, schema,name, core.getIndexReaderFactory().newReader(core.getDirectoryFactory().open(path), false), true, enableCache);
   }
@@ -421,7 +422,7 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
     
     Document d;
     if (documentCache != null) {
-      d = (Document)documentCache.get(i);
+      d = documentCache.get(i);
       if (d!=null) return d;
     }
 
@@ -538,7 +539,7 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
     boolean positive = query==absQ;
 
     if (filterCache != null) {
-      DocSet absAnswer = (DocSet)filterCache.get(absQ);
+      DocSet absAnswer = filterCache.get(absQ);
       if (absAnswer!=null) {
         if (positive) return absAnswer;
         else return getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);
@@ -564,7 +565,7 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
     boolean positive = query==absQ;
 
     if (filterCache != null) {
-      DocSet absAnswer = (DocSet)filterCache.get(absQ);
+      DocSet absAnswer = filterCache.get(absQ);
       if (absAnswer!=null) {
         if (positive) return absAnswer;
         else return getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);
@@ -586,7 +587,7 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
   DocSet getPositiveDocSet(Query q) throws IOException {
     DocSet answer;
     if (filterCache != null) {
-      answer = (DocSet)filterCache.get(q);
+      answer = filterCache.get(q);
       if (answer!=null) return answer;
     }
     answer = getDocSetNC(q,null);
@@ -598,7 +599,7 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
   DocSet getPositiveDocSet(Query q, DocsEnumState deState) throws IOException {
     DocSet answer;
     if (filterCache != null) {
-      answer = (DocSet)filterCache.get(q);
+      answer = filterCache.get(q);
       if (answer!=null) return answer;
     }
     answer = getDocSetNC(q,null,deState);
@@ -880,7 +881,7 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
 
     DocSet first;
     if (filterCache != null) {
-      first = (DocSet)filterCache.get(absQ);
+      first = filterCache.get(absQ);
       if (first==null) {
         first = getDocSetNC(absQ,null);
         filterCache.put(absQ,first);
@@ -1064,7 +1065,7 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
     NamedList grouped = new SimpleOrderedMap();
     for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {
       Grouping.Command groupCommand = cmd.groupCommands.get(cmdnum);
-      GroupCollector gcollector = (GroupCollector)collectors.get(cmdnum);
+      GroupCollector gcollector = collectors.get(cmdnum);
 
       NamedList groupResult = new SimpleOrderedMap();
       grouped.add(groupCommand.key, groupResult);  // grouped={ key={
@@ -1194,7 +1195,7 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
         // so set all of them on the cache key.
         key = new QueryResultKey(cmd.getQuery(), cmd.getFilterList(), cmd.getSort(), cmd.getFlags());
         if ((cmd.getFlags() & NO_CHECK_QCACHE)==0) {
-          superset = (DocList)queryResultCache.get(key);
+          superset = queryResultCache.get(key);
 
           if (superset != null) {
             // check that the cache entry has scores recorded if we need them
diff --git a/solr/src/java/org/apache/solr/search/function/ByteFieldSource.java b/solr/src/java/org/apache/solr/search/function/ByteFieldSource.java
index 7729cc5..c3c97d2 100644
--- a/solr/src/java/org/apache/solr/search/function/ByteFieldSource.java
+++ b/solr/src/java/org/apache/solr/search/function/ByteFieldSource.java
@@ -52,7 +52,7 @@ public class ByteFieldSource extends NumericFieldCacheSource<ByteValues> {
     return new DocValues() {
       @Override
       public byte byteVal(int doc) {
-        return (byte) arr[doc];
+        return arr[doc];
       }
 
       @Override
diff --git a/solr/src/java/org/apache/solr/search/function/IntFieldSource.java b/solr/src/java/org/apache/solr/search/function/IntFieldSource.java
index d8bfca6..a375675 100644
--- a/solr/src/java/org/apache/solr/search/function/IntFieldSource.java
+++ b/solr/src/java/org/apache/solr/search/function/IntFieldSource.java
@@ -60,7 +60,7 @@ public class IntFieldSource extends NumericFieldCacheSource<IntValues> {
       }
 
       public int intVal(int doc) {
-        return (int)arr[doc];
+        return arr[doc];
       }
 
       public long longVal(int doc) {
diff --git a/solr/src/java/org/apache/solr/search/function/LongFieldSource.java b/solr/src/java/org/apache/solr/search/function/LongFieldSource.java
index e96cad9..ab1509e 100644
--- a/solr/src/java/org/apache/solr/search/function/LongFieldSource.java
+++ b/solr/src/java/org/apache/solr/search/function/LongFieldSource.java
@@ -63,7 +63,7 @@ public class LongFieldSource extends NumericFieldCacheSource<LongValues> {
       }
 
       public long longVal(int doc) {
-        return (long) arr[doc];
+        return arr[doc];
       }
 
       public double doubleVal(int doc) {
diff --git a/solr/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java b/solr/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java
index f669cb6..36f17f7 100644
--- a/solr/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java
+++ b/solr/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java
@@ -66,7 +66,7 @@ public class ReverseOrdFieldSource extends ValueSource {
       }
 
       public int intVal(int doc) {
-        return (int)(end - sindex.getOrd(doc));
+        return (end - sindex.getOrd(doc));
       }
 
       public long longVal(int doc) {
diff --git a/solr/src/java/org/apache/solr/search/function/ShortFieldSource.java b/solr/src/java/org/apache/solr/search/function/ShortFieldSource.java
index 2738471..2701705 100644
--- a/solr/src/java/org/apache/solr/search/function/ShortFieldSource.java
+++ b/solr/src/java/org/apache/solr/search/function/ShortFieldSource.java
@@ -55,7 +55,7 @@ public class ShortFieldSource extends NumericFieldCacheSource<ShortValues> {
 
       @Override
       public short shortVal(int doc) {
-        return (short) arr[doc];
+        return arr[doc];
       }
 
       public float floatVal(int doc) {
diff --git a/solr/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction.java b/solr/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction.java
index 5e26fb4..b461658 100644
--- a/solr/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction.java
+++ b/solr/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction.java
@@ -72,7 +72,7 @@ public class GeohashHaversineFunction extends ValueSource {
       }
 
       public double doubleVal(int doc) {
-        return (double) distance(doc, gh1DV, gh2DV);
+        return distance(doc, gh1DV, gh2DV);
       }
 
       public String strVal(int doc) {
diff --git a/solr/src/java/org/apache/solr/search/function/distance/HaversineFunction.java b/solr/src/java/org/apache/solr/search/function/distance/HaversineFunction.java
index 26ee222..c442b06 100644
--- a/solr/src/java/org/apache/solr/search/function/distance/HaversineFunction.java
+++ b/solr/src/java/org/apache/solr/search/function/distance/HaversineFunction.java
@@ -113,7 +113,7 @@ public class HaversineFunction extends ValueSource {
       }
 
       public double doubleVal(int doc) {
-        return (double) distance(doc, vals1, vals2);
+        return distance(doc, vals1, vals2);
       }
 
       public String strVal(int doc) {
diff --git a/solr/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java b/solr/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java
index 8396d6e..ecdcb4d 100644
--- a/solr/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java
+++ b/solr/src/java/org/apache/solr/search/function/distance/StringDistanceFunction.java
@@ -37,7 +37,7 @@ public class StringDistanceFunction extends ValueSource {
     return new DocValues() {
 
       public float floatVal(int doc) {
-        return (float) dist.getDistance(str1DV.strVal(doc), str2DV.strVal(doc));
+        return dist.getDistance(str1DV.strVal(doc), str2DV.strVal(doc));
       }
 
       public int intVal(int doc) {
diff --git a/solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java b/solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java
index 0e9de43..306a466 100644
--- a/solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java
+++ b/solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java
@@ -167,7 +167,7 @@ public abstract class AbstractLuceneSpellChecker extends SolrSpellChecker {
     Term term = field != null ? new Term(field, "") : null;
     float theAccuracy = (options.accuracy == Float.MIN_VALUE) ? spellChecker.getAccuracy() : options.accuracy;
     
-    int count = (int) Math.max(options.count, AbstractLuceneSpellChecker.DEFAULT_SUGGESTION_COUNT);
+    int count = Math.max(options.count, AbstractLuceneSpellChecker.DEFAULT_SUGGESTION_COUNT);
     for (Token token : options.tokens) {
       String tokenText = new String(token.buffer(), 0, token.length());
       String[] suggestions = spellChecker.suggestSimilar(tokenText,
diff --git a/solr/src/java/org/apache/solr/spelling/suggest/tst/TSTAutocomplete.java b/solr/src/java/org/apache/solr/spelling/suggest/tst/TSTAutocomplete.java
index d725d2e..206260f 100644
--- a/solr/src/java/org/apache/solr/spelling/suggest/tst/TSTAutocomplete.java
+++ b/solr/src/java/org/apache/solr/spelling/suggest/tst/TSTAutocomplete.java
@@ -122,7 +122,7 @@ public class TSTAutocomplete {
     Stack<TernaryTreeNode> st = new Stack<TernaryTreeNode>();
     st.push(p);
     while (!st.empty()) {
-      TernaryTreeNode top = (TernaryTreeNode) st.peek();
+      TernaryTreeNode top = st.peek();
       st.pop();
       if (top.token != null) {
         suggest.add(top);
diff --git a/solr/src/java/org/apache/solr/update/DirectUpdateHandler.java b/solr/src/java/org/apache/solr/update/DirectUpdateHandler.java
index 69b60d3..a70f946 100644
--- a/solr/src/java/org/apache/solr/update/DirectUpdateHandler.java
+++ b/solr/src/java/org/apache/solr/update/DirectUpdateHandler.java
@@ -52,7 +52,7 @@ import org.apache.solr.core.SolrCore;
  *
  * @deprecated Use {@link DirectUpdateHandler2} instead.  This is only kept around for back-compatibility (way back).
  */
-
+@Deprecated
 public class DirectUpdateHandler extends UpdateHandler {
 
   // the set of ids in the "pending set" (those docs that have been added, but
diff --git a/solr/src/java/org/apache/solr/update/SolrIndexWriter.java b/solr/src/java/org/apache/solr/update/SolrIndexWriter.java
index c79ad1a..1457a18 100644
--- a/solr/src/java/org/apache/solr/update/SolrIndexWriter.java
+++ b/solr/src/java/org/apache/solr/update/SolrIndexWriter.java
@@ -144,6 +144,7 @@ public class SolrIndexWriter extends IndexWriter {
   }
   
   /** @deprecated remove when getDirectory(String,SolrIndexConfig) is gone */
+  @Deprecated
   private static DirectoryFactory LEGACY_DIR_FACTORY 
     = new StandardDirectoryFactory();
   static {
@@ -153,6 +154,7 @@ public class SolrIndexWriter extends IndexWriter {
   /**
    * @deprecated use getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config)
    */
+  @Deprecated
   public static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {
     log.warn("SolrIndexWriter is using LEGACY_DIR_FACTORY which means deprecated code is likely in use and SolrIndexWriter is ignoring any custom DirectoryFactory.");
     return getDirectory(path, LEGACY_DIR_FACTORY, config);
@@ -175,6 +177,7 @@ public class SolrIndexWriter extends IndexWriter {
   /**
    * @deprecated
    */
+  @Deprecated
   public SolrIndexWriter(String name, String path, boolean create, IndexSchema schema) throws IOException {
     super(getDirectory(path, null), schema.getAnalyzer(), create, MaxFieldLength.LIMITED);
     init(name, schema, null);
@@ -183,6 +186,7 @@ public class SolrIndexWriter extends IndexWriter {
   /**
    * @deprecated
    */
+  @Deprecated
   public SolrIndexWriter(String name, String path, boolean create, IndexSchema schema, SolrIndexConfig config) throws IOException {
     super(getDirectory(path, config), schema.getAnalyzer(), create, MaxFieldLength.LIMITED);
     init(name, schema, config);
diff --git a/solr/src/java/org/apache/solr/util/BitSetIterator.java b/solr/src/java/org/apache/solr/util/BitSetIterator.java
index cea2123..c51712b 100644
--- a/solr/src/java/org/apache/solr/util/BitSetIterator.java
+++ b/solr/src/java/org/apache/solr/util/BitSetIterator.java
@@ -26,6 +26,7 @@ import org.apache.lucene.util.OpenBitSet;
  * @deprecated Use {@link org.apache.lucene.util.OpenBitSetIterator} instead.
  * @version $Id$
  */
+@Deprecated
 public class BitSetIterator {
 
   // The General Idea: instead of having an array per byte that has
diff --git a/solr/src/java/org/apache/solr/util/BitUtil.java b/solr/src/java/org/apache/solr/util/BitUtil.java
index 215d227..47f4cfe 100644
--- a/solr/src/java/org/apache/solr/util/BitUtil.java
+++ b/solr/src/java/org/apache/solr/util/BitUtil.java
@@ -21,6 +21,7 @@ package org.apache.solr.util;
  * @deprecated Use {@link org.apache.lucene.util.BitUtil} directly
  * @version $Id$
  */
+@Deprecated
 public class BitUtil extends org.apache.lucene.util.BitUtil {
   // just inherit for backwards-compatibility reasons
 }
diff --git a/solr/src/java/org/apache/solr/util/DisMaxParams.java b/solr/src/java/org/apache/solr/util/DisMaxParams.java
index 6f1b484..5285af3 100644
--- a/solr/src/java/org/apache/solr/util/DisMaxParams.java
+++ b/solr/src/java/org/apache/solr/util/DisMaxParams.java
@@ -35,47 +35,56 @@ public class DisMaxParams extends CommonParams implements org.apache.solr.common
   /** query and init param for filtering query
    * @deprecated use SolrParams.FQ or SolrPluginUtils.parseFilterQueries
    */
+  @Deprecated
   public static String FQ = "fq";
   
   /**
    * the default tie breaker to use in DisjunctionMaxQueries
    * @deprecated - use explicit default with SolrParams.getFloat
    */
+  @Deprecated
   public float tiebreaker = 0.0f;
   /**
    * the default query fields to be used
    * @deprecated - use explicit default with SolrParams.get
    */
+  @Deprecated
   public String qf = null;
   /**
    * the default phrase boosting fields to be used
    * @deprecated - use explicit default with SolrParams.get
    */
+  @Deprecated
   public String pf = null;
   /**
    * the default min should match to be used
    * @deprecated - use explicit default with SolrParams.get
    */
+  @Deprecated
   public String mm = "100%";
   /**
    * the default phrase slop to be used 
    * @deprecated - use explicit default with SolrParams.getInt
    */
+  @Deprecated
   public int pslop = 0;
   /**
    * the default boosting query to be used
    * @deprecated - use explicit default with SolrParams.get
    */
+  @Deprecated
   public String bq = null;
   /**
    * the default boosting functions to be used
    * @deprecated - use explicit default with SolrParams.get
    */
+  @Deprecated
   public String bf = null;
   /**
    * the default filtering query to be used
    * @deprecated - use explicit default with SolrParams.get
    */
+  @Deprecated
   public String fq = null;
 
 
@@ -94,6 +103,7 @@ public class DisMaxParams extends CommonParams implements org.apache.solr.common
    * </p>
    * @deprecated use SolrParams.toSolrParams
    */
+  @Deprecated
   public void setValues(NamedList args) {
 
     super.setValues(args);
diff --git a/solr/src/java/org/apache/solr/util/HighlightingUtils.java b/solr/src/java/org/apache/solr/util/HighlightingUtils.java
index af631fc..685a0d0 100644
--- a/solr/src/java/org/apache/solr/util/HighlightingUtils.java
+++ b/solr/src/java/org/apache/solr/util/HighlightingUtils.java
@@ -51,6 +51,7 @@ import org.apache.lucene.search.highlight.*;
  * @deprecated use DefaultSolrHighlighter
  * @see DefaultSolrHighlighter
  */
+@Deprecated
 public class HighlightingUtils implements HighlightParams {
 
    static SolrParams DEFAULTS = null;
@@ -76,6 +77,7 @@ public class HighlightingUtils implements HighlightParams {
     * @deprecated use DefaultSolrHighlighter
     * @see DefaultSolrHighlighter#isHighlightingEnabled
     */
+   @Deprecated
    public static boolean isHighlightingEnabled(SolrQueryRequest request) {
      return HIGHLIGHTER.isHighlightingEnabled(getParams(request));
    }
@@ -84,6 +86,7 @@ public class HighlightingUtils implements HighlightParams {
     * @deprecated use DefaultSolrHighlighter
     * @see DefaultSolrHighlighter
     */
+   @Deprecated
    public static Highlighter getHighlighter(Query query, String fieldName, SolrQueryRequest request) {
      return HIGHLIGHTER.getHighlighterX(query, fieldName, request);
    }
@@ -92,6 +95,7 @@ public class HighlightingUtils implements HighlightParams {
     * @deprecated use DefaultSolrHighlighter
     * @see DefaultSolrHighlighter#getHighlightFields
     */
+   @Deprecated
    public static String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {
      return HIGHLIGHTER.getHighlightFields(query, request, defaultFields);
    }
@@ -100,6 +104,7 @@ public class HighlightingUtils implements HighlightParams {
     * @deprecated use DefaultSolrHighlighter
     * @see DefaultSolrHighlighter
     */
+   @Deprecated
    public static int getMaxSnippets(String fieldName, SolrQueryRequest request) {
      return HIGHLIGHTER.getMaxSnippetsX(fieldName, request);
    }
@@ -108,6 +113,7 @@ public class HighlightingUtils implements HighlightParams {
     * @deprecated use DefaultSolrHighlighter
     * @see DefaultSolrHighlighter
     */
+   @Deprecated
    public static Formatter getFormatter(String fieldName, SolrQueryRequest request) {
      return HIGHLIGHTER.getFormatterX(fieldName, request);
    }
@@ -116,6 +122,7 @@ public class HighlightingUtils implements HighlightParams {
     * @deprecated use DefaultSolrHighlighter
     * @see DefaultSolrHighlighter
     */
+   @Deprecated
    public static Fragmenter getFragmenter(String fieldName, SolrQueryRequest request) {
      return HIGHLIGHTER.getFragmenterX(fieldName, request);
    }
@@ -124,7 +131,7 @@ public class HighlightingUtils implements HighlightParams {
     * @deprecated use DefaultSolrHighlighter
     * @see DefaultSolrHighlighter#doHighlighting
     */
-   @SuppressWarnings("unchecked")
+   @Deprecated @SuppressWarnings("unchecked")
    public static NamedList doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {
      return HIGHLIGHTER.doHighlighting(docs, query, req, defaultFields);
    }
diff --git a/solr/src/java/org/apache/solr/util/OpenBitSet.java b/solr/src/java/org/apache/solr/util/OpenBitSet.java
index 266aad1..b80f4f2 100644
--- a/solr/src/java/org/apache/solr/util/OpenBitSet.java
+++ b/solr/src/java/org/apache/solr/util/OpenBitSet.java
@@ -73,7 +73,7 @@ Test system: AMD Opteron, 64 bit linux, Sun Java 1.5_06 -server -Xbatch -Xmx64M
  @deprecated Use {@link org.apache.lucene.util.OpenBitSet} directly.
  * @version $Id$
  */
-
+@Deprecated
 public class OpenBitSet extends org.apache.lucene.util.OpenBitSet implements Cloneable, Serializable {
   /** Constructs an OpenBitSet large enough to hold numBits.
    *
diff --git a/solr/src/java/org/apache/solr/util/SolrPluginUtils.java b/solr/src/java/org/apache/solr/util/SolrPluginUtils.java
index b7ce01c..755a0ff 100644
--- a/solr/src/java/org/apache/solr/util/SolrPluginUtils.java
+++ b/solr/src/java/org/apache/solr/util/SolrPluginUtils.java
@@ -127,6 +127,7 @@ public class SolrPluginUtils {
    * Returns the param, or the default if it's empty or not specified.
    * @deprecated use SolrParam.get(String,String)
    */
+  @Deprecated
   public static String getParam(SolrQueryRequest req,
                                 String param, String def) {
 
@@ -144,6 +145,7 @@ public class SolrPluginUtils {
    * there or if it's not a number.
    * @deprecated use SolrParam.getFloat(String,float)
    */
+  @Deprecated
   public static Number getNumberParam(SolrQueryRequest req,
                                       String param, Number def) {
 
@@ -165,6 +167,7 @@ public class SolrPluginUtils {
    * any other non-empty string is true.
    * @deprecated use SolrParam.getBool(String,boolean)
    */
+  @Deprecated
   public static boolean getBooleanParam(SolrQueryRequest req,
                                        String param, boolean def) {
     String v = req.getParam(param);
@@ -543,6 +546,7 @@ public class SolrPluginUtils {
    * @see #parseFieldBoosts
    * @deprecated
    */
+  @Deprecated
   public static List<Query> parseFuncs(IndexSchema s, String in)
     throws ParseException {
 
@@ -592,7 +596,7 @@ public class SolrPluginUtils {
   public static void setMinShouldMatch(BooleanQuery q, String spec) {
 
     int optionalClauses = 0;
-    for (BooleanClause c : (List<BooleanClause>)q.clauses()) {
+    for (BooleanClause c : q.clauses()) {
       if (c.getOccur() == Occur.SHOULD) {
         optionalClauses++;
       }
@@ -659,7 +663,7 @@ public class SolrPluginUtils {
    */
   public static void flattenBooleanQuery(BooleanQuery to, BooleanQuery from) {
 
-    for (BooleanClause clause : (List<BooleanClause>)from.clauses()) {
+    for (BooleanClause clause : from.clauses()) {
 
       Query cq = clause.getQuery();
       cq.setBoost(cq.getBoost() * from.getBoost());
diff --git a/solr/src/java/org/apache/solr/util/TestHarness.java b/solr/src/java/org/apache/solr/util/TestHarness.java
index 1d069df..a28972e 100644
--- a/solr/src/java/org/apache/solr/util/TestHarness.java
+++ b/solr/src/java/org/apache/solr/util/TestHarness.java
@@ -409,6 +409,7 @@ public class TestHarness {
    * to a StringBuffer.
    * @deprecated see {@link #appendSimpleDoc(StringBuilder, String...)}
    */
+  @Deprecated
   public void appendSimpleDoc(StringBuffer buf, String... fieldsAndValues)
     throws IOException {
 
diff --git a/solr/src/solrj/org/apache/solr/client/solrj/SolrQuery.java b/solr/src/solrj/org/apache/solr/client/solrj/SolrQuery.java
index 930cdbd..20739fe 100644
--- a/solr/src/solrj/org/apache/solr/client/solrj/SolrQuery.java
+++ b/solr/src/solrj/org/apache/solr/client/solrj/SolrQuery.java
@@ -364,6 +364,7 @@ public class SolrQuery extends ModifiableSolrParams
   /**
    * @deprecated use {@link #setFacetMissing(Boolean)}
    */
+  @Deprecated
   public SolrQuery setMissing(String fld) {
     return setFacetMissing(Boolean.valueOf(fld));
   }
diff --git a/solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec.java b/solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec.java
index 3c7e086..2492495 100644
--- a/solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec.java
+++ b/solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec.java
@@ -213,7 +213,7 @@ public class JavaBinUpdateRequestCodec {
       List<String> l = (List) nl.getVal(i);
       if (l != null)
         solrParams.add(nl.getName(i),
-                (String[]) l.toArray(new String[l.size()]));
+                l.toArray(new String[l.size()]));
     }
     return solrParams;
   }
diff --git a/solr/src/solrj/org/apache/solr/client/solrj/request/UpdateRequest.java b/solr/src/solrj/org/apache/solr/client/solrj/request/UpdateRequest.java
index eb6b332..1b5ae4a 100644
--- a/solr/src/solrj/org/apache/solr/client/solrj/request/UpdateRequest.java
+++ b/solr/src/solrj/org/apache/solr/client/solrj/request/UpdateRequest.java
@@ -47,6 +47,7 @@ public class UpdateRequest extends AbstractUpdateRequest {
    *
    * @deprecated Use {@link AbstractUpdateRequest.ACTION} instead
    */
+  @Deprecated
   public enum ACTION {
     COMMIT,
     OPTIMIZE
@@ -137,6 +138,7 @@ public class UpdateRequest extends AbstractUpdateRequest {
    *
    * @deprecated Use {@link org.apache.solr.client.solrj.request.AbstractUpdateRequest.ACTION} instead
    * */
+  @Deprecated
   public UpdateRequest setAction(ACTION action, boolean waitFlush, boolean waitSearcher ) {
     return setAction(action, waitFlush, waitSearcher, 1);
   }
@@ -145,6 +147,7 @@ public class UpdateRequest extends AbstractUpdateRequest {
    *
    * @deprecated Use {@link org.apache.solr.client.solrj.request.AbstractUpdateRequest.ACTION} instead
    */
+  @Deprecated
   public UpdateRequest setAction(ACTION action, boolean waitFlush, boolean waitSearcher, int maxSegments ) {
     if (params == null)
       params = new ModifiableSolrParams();
@@ -166,6 +169,7 @@ public class UpdateRequest extends AbstractUpdateRequest {
    *
    * @deprecated Use {@link org.apache.solr.client.solrj.request.AbstractUpdateRequest.ACTION} instead
    */
+  @Deprecated
   public UpdateRequest setAction(ACTION action, boolean waitFlush, boolean waitSearcher, int maxSegments , boolean expungeDeletes) {
     setAction(action, waitFlush, waitSearcher,maxSegments) ;
     params.set(UpdateParams.EXPUNGE_DELETES,""+expungeDeletes);
diff --git a/solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse.java b/solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse.java
index 0d0372a..168cc2b 100644
--- a/solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse.java
+++ b/solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse.java
@@ -259,7 +259,7 @@ public class QueryResponse extends SolrResponseBase
     for( NamedList nl : list ) {
       // NOTE, this is cheating, but we know the order they are written in, so no need to check
       String f = (String)nl.getVal( 0 );
-      Object v = (Object)nl.getVal( 1 );
+      Object v = nl.getVal( 1 );
       int cnt = ((Integer)nl.getVal( 2 )).intValue();
       List<PivotField> p = (nl.size()<4)?null:readPivots((List<NamedList>)nl.getVal(3) );
       values.add( new PivotField( f, v, cnt, p ) );
diff --git a/solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils.java b/solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils.java
index 32097f3..0a5df43 100644
--- a/solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils.java
+++ b/solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils.java
@@ -143,6 +143,7 @@ public class ClientUtils
   /**
    * @deprecated Use {@link org.apache.solr.common.util.DateUtil#DEFAULT_DATE_FORMATS}
    */
+  @Deprecated
   public static final Collection<String> fmts = DateUtil.DEFAULT_DATE_FORMATS;
 
   /**
@@ -153,6 +154,7 @@ public class ClientUtils
    *
    * @deprecated Use {@link org.apache.solr.common.util.DateUtil#parseDate(String)}
    */
+  @Deprecated
   public static Date parseDate( String d ) throws ParseException, DateParseException
   {
     return DateUtil.parseDate(d);
@@ -164,6 +166,7 @@ public class ClientUtils
    *
    * @deprecated use {@link org.apache.solr.common.util.DateUtil#getThreadLocalDateFormat()}
    */
+  @Deprecated
   public static DateFormat getThreadLocalDateFormat() {
 
     return DateUtil.getThreadLocalDateFormat();
@@ -172,6 +175,7 @@ public class ClientUtils
   /**
    * @deprecated Use {@link org.apache.solr.common.util.DateUtil#UTC}.
    */
+  @Deprecated
   public static TimeZone UTC = DateUtil.UTC;
 
 
diff --git a/solr/src/test/org/apache/solr/analysis/TestSynonymMap.java b/solr/src/test/org/apache/solr/analysis/TestSynonymMap.java
index d13fc8d..e00cd35 100644
--- a/solr/src/test/org/apache/solr/analysis/TestSynonymMap.java
+++ b/solr/src/test/org/apache/solr/analysis/TestSynonymMap.java
@@ -258,7 +258,7 @@ public class TestSynonymMap extends LuceneTestCase {
   }
   
   private void assertTokIncludes( SynonymMap map, String src, String exp ) throws Exception {
-    Token[] tokens = ((SynonymMap)map.submap.get( src )).synonyms;
+    Token[] tokens = map.submap.get( src ).synonyms;
     boolean inc = false;
     for( Token token : tokens ){
       if( exp.equals( new String(token.buffer(), 0, token.length()) ) )
@@ -268,6 +268,6 @@ public class TestSynonymMap extends LuceneTestCase {
   }
   
   private SynonymMap getSubSynonymMap( SynonymMap map, String src ){
-    return (SynonymMap)map.submap.get( src );
+    return map.submap.get( src );
   }
 }
diff --git a/solr/src/test/org/apache/solr/util/TestOpenBitSet.java b/solr/src/test/org/apache/solr/util/TestOpenBitSet.java
index 01dd4be..f4371fc 100644
--- a/solr/src/test/org/apache/solr/util/TestOpenBitSet.java
+++ b/solr/src/test/org/apache/solr/util/TestOpenBitSet.java
@@ -28,6 +28,7 @@ import org.apache.lucene.search.DocIdSetIterator;
  * @deprecated
  * @version $Id$
  */
+@Deprecated
 public class TestOpenBitSet extends LuceneTestCase {
   static Random rand = new Random();
 
diff --git a/solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java b/solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java
index e0cd871..ffeb71f 100644
--- a/solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java
+++ b/solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java
@@ -245,6 +245,7 @@ public class EmbeddedSolrServer extends SolrServer
    * 
    * @deprecated use {@link BinaryResponseWriter#getParsedResponse(SolrQueryRequest, SolrQueryResponse)}
    */
+  @Deprecated
   public NamedList<Object> getParsedResponse( SolrQueryRequest req, SolrQueryResponse rsp )
   {
     return BinaryResponseWriter.getParsedResponse(req, rsp);

