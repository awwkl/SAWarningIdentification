GitDiffStart: 2593733ce4dd84e05841e77a916a3c3cce32cc35 | Mon Dec 28 14:41:18 2009 +0000
diff --git a/src/java/org/apache/solr/schema/PointType.java b/src/java/org/apache/solr/schema/PointType.java
index cff280a..2b38da4 100644
--- a/src/java/org/apache/solr/schema/PointType.java
+++ b/src/java/org/apache/solr/schema/PointType.java
@@ -19,21 +19,17 @@ package org.apache.solr.schema;
 
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.Fieldable;
-import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.search.BooleanClause;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.Query;
-import org.apache.lucene.search.Searcher;
 import org.apache.lucene.search.SortField;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.params.MapSolrParams;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.request.TextResponseWriter;
 import org.apache.solr.request.XMLWriter;
-import org.apache.solr.search.MultiValueSource;
 import org.apache.solr.search.QParser;
-import org.apache.solr.search.ToMultiValueSource;
-import org.apache.solr.search.function.DocValues;
+import org.apache.solr.search.VectorValueSource;
 import org.apache.solr.search.function.ValueSource;
 import org.apache.solr.search.function.distance.DistanceUtils;
 
@@ -176,7 +172,7 @@ public class PointType extends CoordinateFieldType {
 }
 
 
-class PointTypeValueSource extends ToMultiValueSource {
+class PointTypeValueSource extends VectorValueSource {
   private final SchemaField sf;
   
   public PointTypeValueSource(SchemaField sf, List<ValueSource> sources) {
diff --git a/src/java/org/apache/solr/search/ToMultiValueSource.java b/src/java/org/apache/solr/search/ToMultiValueSource.java
deleted file mode 100644
index 733ca05..0000000
--- a/src/java/org/apache/solr/search/ToMultiValueSource.java
+++ /dev/null
@@ -1,218 +0,0 @@
-package org.apache.solr.search;
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.search.Searcher;
-import org.apache.solr.search.function.DocValues;
-import org.apache.solr.search.function.ValueSource;
-
-import java.io.IOException;
-import java.util.List;
-import java.util.Map;
-
-
-/**
- * Converts individual ValueSource instances to leverage the DocValues *Val functions that work with multiple values,
- * i.e. {@link org.apache.solr.search.function.DocValues#doubleVal(int, double[])}
- */
-//Not crazy about the name, but...
-public class ToMultiValueSource extends MultiValueSource {
-  protected List<ValueSource> sources;
-
-
-  public ToMultiValueSource(List<ValueSource> sources) {
-    this.sources = sources;
-  }
-
-  public List<ValueSource> getSources() {
-    return sources;
-  }
-
-  public int dimension() {
-    return sources.size();
-  }
-
-  public String name() {
-    return "toMultiVS";
-  }
-
-  @Override
-  public DocValues getValues(Map context, IndexReader reader) throws IOException {
-    int size = sources.size();
-
-    // special-case x,y and lat,lon since it's so common
-    if (size==2) {
-      final DocValues x = sources.get(0).getValues(context, reader);
-      final DocValues y = sources.get(1).getValues(context, reader);
-      return new DocValues() {
-        @Override
-        public void byteVal(int doc, byte[] vals) {
-          vals[0] = x.byteVal(doc);
-          vals[1] = y.byteVal(doc);
-        }
-
-        @Override
-        public void shortVal(int doc, short[] vals) {
-          vals[0] = x.shortVal(doc);
-          vals[1] = y.shortVal(doc);
-        }
-        @Override
-        public void intVal(int doc, int[] vals) {
-          vals[0] = x.intVal(doc);
-          vals[1] = y.intVal(doc);
-        }
-        @Override
-        public void longVal(int doc, long[] vals) {
-          vals[0] = x.longVal(doc);
-          vals[1] = y.longVal(doc);
-        }
-        @Override
-        public void floatVal(int doc, float[] vals) {
-          vals[0] = x.byteVal(doc);
-          vals[1] = y.byteVal(doc);
-        }
-        @Override
-        public void doubleVal(int doc, double[] vals) {
-          vals[0] = x.doubleVal(doc);
-          vals[1] = y.doubleVal(doc);
-        }
-        @Override
-        public void strVal(int doc, String[] vals) {
-          vals[0] = x.strVal(doc);
-          vals[1] = y.strVal(doc);
-        }
-        public String toString(int doc) {
-          return name() + "(" + x.toString(doc) + "," + y.toString(doc) + ")";
-        }
-      };
-    }
-
-
-    final DocValues[] valsArr = new DocValues[size];
-    for (int i = 0; i < size; i++) {
-      valsArr[i] = sources.get(i).getValues(context, reader);
-    }
-
-    return new DocValues() {
-      @Override
-      public void byteVal(int doc, byte[] vals) {
-        for (int i = 0; i < valsArr.length; i++) {
-          vals[i] = valsArr[i].byteVal(doc);
-        }
-      }
-
-      @Override
-      public void shortVal(int doc, short[] vals) {
-        for (int i = 0; i < valsArr.length; i++) {
-          vals[i] = valsArr[i].shortVal(doc);
-        }
-      }
-
-      @Override
-      public void floatVal(int doc, float[] vals) {
-        for (int i = 0; i < valsArr.length; i++) {
-          vals[i] = valsArr[i].floatVal(doc);
-        }
-      }
-
-      @Override
-      public void intVal(int doc, int[] vals) {
-        for (int i = 0; i < valsArr.length; i++) {
-          vals[i] = valsArr[i].intVal(doc);
-        }
-      }
-
-      @Override
-      public void longVal(int doc, long[] vals) {
-        for (int i = 0; i < valsArr.length; i++) {
-          vals[i] = valsArr[i].longVal(doc);
-        }
-      }
-
-      @Override
-      public void doubleVal(int doc, double[] vals) {
-        for (int i = 0; i < valsArr.length; i++) {
-          vals[i] = valsArr[i].doubleVal(doc);
-        }
-      }
-
-      @Override
-      public void strVal(int doc, String[] vals) {
-        for (int i = 0; i < valsArr.length; i++) {
-          vals[i] = valsArr[i].strVal(doc);
-        }
-      }
-
-      @Override
-      public String toString(int doc) {
-        StringBuilder sb = new StringBuilder();
-        sb.append(name()).append('(');
-        boolean firstTime = true;
-        for (DocValues vals : valsArr) {
-          if (firstTime) {
-            firstTime = false;
-          } else {
-            sb.append(',');
-          }
-          sb.append(vals.toString(doc));
-        }
-        sb.append(')');
-        return sb.toString();
-      }
-    };
-  }
-
-  public void createWeight(Map context, Searcher searcher) throws IOException {
-    for (ValueSource source : sources)
-      source.createWeight(context, searcher);
-  }
-
-
-  public String description() {
-    StringBuilder sb = new StringBuilder();
-    sb.append(name()).append('(');
-    boolean firstTime = true;
-    for (ValueSource source : sources) {
-      if (firstTime) {
-        firstTime = false;
-      } else {
-        sb.append(',');
-      }
-      sb.append(source);
-    }
-    sb.append(")");
-    return sb.toString();
-  }
-
-  @Override
-  public boolean equals(Object o) {
-    if (this == o) return true;
-    if (!(o instanceof ToMultiValueSource)) return false;
-
-    ToMultiValueSource that = (ToMultiValueSource) o;
-
-    if (!sources.equals(that.sources)) return false;
-
-    return true;
-  }
-
-  @Override
-  public int hashCode() {
-    return sources.hashCode();
-  }
-}
diff --git a/src/java/org/apache/solr/search/ValueSourceParser.java b/src/java/org/apache/solr/search/ValueSourceParser.java
index ce43761..e463fa5 100755
--- a/src/java/org/apache/solr/search/ValueSourceParser.java
+++ b/src/java/org/apache/solr/search/ValueSourceParser.java
@@ -203,9 +203,9 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
         };
       }
     });
-    addParser("toMultiVS", new ValueSourceParser(){
+    addParser("vector", new ValueSourceParser(){
       public ValueSource parse(FunctionQParser fp) throws ParseException{
-        return new ToMultiValueSource(fp.parseValueSourceList());
+        return new VectorValueSource(fp.parseValueSourceList());
       }
     });
     addParser("query", new ValueSourceParser() {
@@ -240,13 +240,13 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
           List<ValueSource> s1 = new ArrayList<ValueSource>();
           s1.add(one);
           s1.add(two);
-          pv1 = new ToMultiValueSource(s1);
+          pv1 = new VectorValueSource(s1);
           ValueSource x2 = fp.parseValueSource();
           ValueSource y2 = fp.parseValueSource();
           List<ValueSource> s2 = new ArrayList<ValueSource>();
           s2.add(x2);
           s2.add(y2);
-          pv2 = new ToMultiValueSource(s2);
+          pv2 = new VectorValueSource(s2);
         } else {
           //check to see if we have multiValue source
           if (one instanceof MultiValueSource && two instanceof MultiValueSource){
@@ -482,8 +482,8 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
         //if one is a MultiValueSource, than the other one needs to be too.
         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Illegal number of sources.  There must be an even number of sources");
       } else {
-        mvr.mv1 = new ToMultiValueSource(Collections.singletonList(sources.get(0)));
-        mvr.mv2 = new ToMultiValueSource(Collections.singletonList(sources.get(1)));
+        mvr.mv1 = new VectorValueSource(Collections.singletonList(sources.get(0)));
+        mvr.mv2 = new VectorValueSource(Collections.singletonList(sources.get(1)));
       }
     } else {
       int dim = sources.size() / 2;
@@ -491,8 +491,8 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
       List<ValueSource> sources2 = new ArrayList<ValueSource>(dim);
       //Get dim value sources for the first vector
       splitSources(dim, sources, sources1, sources2);
-      mvr.mv1 = new ToMultiValueSource(sources1);
-      mvr.mv2 = new ToMultiValueSource(sources2);
+      mvr.mv1 = new VectorValueSource(sources1);
+      mvr.mv2 = new VectorValueSource(sources2);
     }
 
     return mvr;
diff --git a/src/java/org/apache/solr/search/VectorValueSource.java b/src/java/org/apache/solr/search/VectorValueSource.java
new file mode 100644
index 0000000..58189f8
--- /dev/null
+++ b/src/java/org/apache/solr/search/VectorValueSource.java
@@ -0,0 +1,218 @@
+package org.apache.solr.search;
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.search.Searcher;
+import org.apache.solr.search.function.DocValues;
+import org.apache.solr.search.function.ValueSource;
+
+import java.io.IOException;
+import java.util.List;
+import java.util.Map;
+
+
+/**
+ * Converts individual ValueSource instances to leverage the DocValues *Val functions that work with multiple values,
+ * i.e. {@link org.apache.solr.search.function.DocValues#doubleVal(int, double[])}
+ */
+//Not crazy about the name, but...
+public class VectorValueSource extends MultiValueSource {
+  protected List<ValueSource> sources;
+
+
+  public VectorValueSource(List<ValueSource> sources) {
+    this.sources = sources;
+  }
+
+  public List<ValueSource> getSources() {
+    return sources;
+  }
+
+  public int dimension() {
+    return sources.size();
+  }
+
+  public String name() {
+    return "vector";
+  }
+
+  @Override
+  public DocValues getValues(Map context, IndexReader reader) throws IOException {
+    int size = sources.size();
+
+    // special-case x,y and lat,lon since it's so common
+    if (size==2) {
+      final DocValues x = sources.get(0).getValues(context, reader);
+      final DocValues y = sources.get(1).getValues(context, reader);
+      return new DocValues() {
+        @Override
+        public void byteVal(int doc, byte[] vals) {
+          vals[0] = x.byteVal(doc);
+          vals[1] = y.byteVal(doc);
+        }
+
+        @Override
+        public void shortVal(int doc, short[] vals) {
+          vals[0] = x.shortVal(doc);
+          vals[1] = y.shortVal(doc);
+        }
+        @Override
+        public void intVal(int doc, int[] vals) {
+          vals[0] = x.intVal(doc);
+          vals[1] = y.intVal(doc);
+        }
+        @Override
+        public void longVal(int doc, long[] vals) {
+          vals[0] = x.longVal(doc);
+          vals[1] = y.longVal(doc);
+        }
+        @Override
+        public void floatVal(int doc, float[] vals) {
+          vals[0] = x.byteVal(doc);
+          vals[1] = y.byteVal(doc);
+        }
+        @Override
+        public void doubleVal(int doc, double[] vals) {
+          vals[0] = x.doubleVal(doc);
+          vals[1] = y.doubleVal(doc);
+        }
+        @Override
+        public void strVal(int doc, String[] vals) {
+          vals[0] = x.strVal(doc);
+          vals[1] = y.strVal(doc);
+        }
+        public String toString(int doc) {
+          return name() + "(" + x.toString(doc) + "," + y.toString(doc) + ")";
+        }
+      };
+    }
+
+
+    final DocValues[] valsArr = new DocValues[size];
+    for (int i = 0; i < size; i++) {
+      valsArr[i] = sources.get(i).getValues(context, reader);
+    }
+
+    return new DocValues() {
+      @Override
+      public void byteVal(int doc, byte[] vals) {
+        for (int i = 0; i < valsArr.length; i++) {
+          vals[i] = valsArr[i].byteVal(doc);
+        }
+      }
+
+      @Override
+      public void shortVal(int doc, short[] vals) {
+        for (int i = 0; i < valsArr.length; i++) {
+          vals[i] = valsArr[i].shortVal(doc);
+        }
+      }
+
+      @Override
+      public void floatVal(int doc, float[] vals) {
+        for (int i = 0; i < valsArr.length; i++) {
+          vals[i] = valsArr[i].floatVal(doc);
+        }
+      }
+
+      @Override
+      public void intVal(int doc, int[] vals) {
+        for (int i = 0; i < valsArr.length; i++) {
+          vals[i] = valsArr[i].intVal(doc);
+        }
+      }
+
+      @Override
+      public void longVal(int doc, long[] vals) {
+        for (int i = 0; i < valsArr.length; i++) {
+          vals[i] = valsArr[i].longVal(doc);
+        }
+      }
+
+      @Override
+      public void doubleVal(int doc, double[] vals) {
+        for (int i = 0; i < valsArr.length; i++) {
+          vals[i] = valsArr[i].doubleVal(doc);
+        }
+      }
+
+      @Override
+      public void strVal(int doc, String[] vals) {
+        for (int i = 0; i < valsArr.length; i++) {
+          vals[i] = valsArr[i].strVal(doc);
+        }
+      }
+
+      @Override
+      public String toString(int doc) {
+        StringBuilder sb = new StringBuilder();
+        sb.append(name()).append('(');
+        boolean firstTime = true;
+        for (DocValues vals : valsArr) {
+          if (firstTime) {
+            firstTime = false;
+          } else {
+            sb.append(',');
+          }
+          sb.append(vals.toString(doc));
+        }
+        sb.append(')');
+        return sb.toString();
+      }
+    };
+  }
+
+  public void createWeight(Map context, Searcher searcher) throws IOException {
+    for (ValueSource source : sources)
+      source.createWeight(context, searcher);
+  }
+
+
+  public String description() {
+    StringBuilder sb = new StringBuilder();
+    sb.append(name()).append('(');
+    boolean firstTime = true;
+    for (ValueSource source : sources) {
+      if (firstTime) {
+        firstTime = false;
+      } else {
+        sb.append(',');
+      }
+      sb.append(source);
+    }
+    sb.append(")");
+    return sb.toString();
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) return true;
+    if (!(o instanceof VectorValueSource)) return false;
+
+    VectorValueSource that = (VectorValueSource) o;
+
+    if (!sources.equals(that.sources)) return false;
+
+    return true;
+  }
+
+  @Override
+  public int hashCode() {
+    return sources.hashCode();
+  }
+}
diff --git a/src/test/org/apache/solr/schema/PolyFieldTest.java b/src/test/org/apache/solr/schema/PolyFieldTest.java
index b67c2b3..acdb1ab 100644
--- a/src/test/org/apache/solr/schema/PolyFieldTest.java
+++ b/src/test/org/apache/solr/schema/PolyFieldTest.java
@@ -143,10 +143,10 @@ public class PolyFieldTest extends AbstractSolrTestCase {
             "//*[@numFound='1']",
             "//str[@name='homed'][.='1000,10000']");
     assertQ(req("fl", "*,score", "q",
-            "{!func}sqedist(home, toMultiVS(0, 0))"),
+            "{!func}sqedist(home, vector(0, 0))"),
             "\"//*[@numFound='50']\"");
     assertQ(req("fl", "*,score", "q",
-            "{!func}dist(2, home, toMultiVS(0, 0))"),
+            "{!func}dist(2, home, vector(0, 0))"),
             "\"//*[@numFound='50']\"");
 
     assertQ(req("fl", "*,score", "q",
diff --git a/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest.java b/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest.java
index d18dcd3..4c7667f 100644
--- a/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest.java
+++ b/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest.java
@@ -117,10 +117,10 @@ public class DistanceFunctionTest extends AbstractSolrTestCase {
 
 
     //Do point tests:
-    assertQ(req("fl", "*,score", "q", "{!func}dist(1, toMultiVS(x_td, y_td), toMultiVS(0, 0))", "fq", "id:5"),
+    assertQ(req("fl", "*,score", "q", "{!func}dist(1, vector(x_td, y_td), vector(0, 0))", "fq", "id:5"),
             "//float[@name='score']='" + (float) (2.3 + 5.5) + "'");
 
-    assertQ(req("fl", "*,score", "q", "{!func}dist(1, point, toMultiVS(0, 0))", "fq", "id:6"),
+    assertQ(req("fl", "*,score", "q", "{!func}dist(1, point, vector(0, 0))", "fq", "id:6"),
             "//float[@name='score']='" + 1.0f + "'");
 
   }

