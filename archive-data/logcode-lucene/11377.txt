GitDiffStart: 1ee80d804e1b153012a38dcff7b35c12af3b50c0 | Thu Aug 23 18:03:06 2012 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation.java
index 06ee01b..435c458 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation.java
@@ -152,16 +152,6 @@ abstract class BulkOperation implements PackedInts.Decoder, PackedInts.Encoder {
   }
 
   @Override
-  public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
   public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
     encode(toLongArray(values, valuesOffset, iterations * valueCount()), 0, blocks, blocksOffset, iterations);
   }
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked33.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked33.java
index e02d602..9fb1d0b 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked33.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked33.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked33 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked34.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked34.java
index 3b09e0c..3519678 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked34.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked34.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked34 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked35.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked35.java
index aede649..366020e 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked35.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked35.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked35 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked36.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked36.java
index 0d0a918..87e2af8 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked36.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked36.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked36 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked37.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked37.java
index 8a3b655..3099690 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked37.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked37.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked37 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked38.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked38.java
index bf6da1e..1999397 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked38.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked38.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked38 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked39.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked39.java
index 72725f5..37b88c2 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked39.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked39.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked39 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked40.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked40.java
index 7a9c9d7..a4cf8ba 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked40.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked40.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked40 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked41.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked41.java
index ceb4788..2285ce7 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked41.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked41.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked41 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked42.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked42.java
index bdc4661..835be98 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked42.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked42.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked42 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked43.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked43.java
index 8836fdb..3b8c6a4 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked43.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked43.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked43 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked44.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked44.java
index 9e8e85f..47fefef 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked44.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked44.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked44 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked45.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked45.java
index e830391..e8ab1eb 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked45.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked45.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked45 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked46.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked46.java
index 6282f33..b84a250 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked46.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked46.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked46 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked47.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked47.java
index 22265a6..df28122 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked47.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked47.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked47 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked48.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked48.java
index 891cdf8..d9c9535 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked48.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked48.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked48 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked49.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked49.java
index 2666898..70ce732 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked49.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked49.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked49 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked50.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked50.java
index 5484865..d9da22a 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked50.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked50.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked50 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked51.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked51.java
index 4a20bfb..6ad35da 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked51.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked51.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked51 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked52.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked52.java
index dd31c0a..89b8a47 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked52.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked52.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked52 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked53.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked53.java
index 5302b82..94646d6 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked53.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked53.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked53 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked54.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked54.java
index 5c9ee2a..c7f3e59 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked54.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked54.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked54 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked55.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked55.java
index 6b1c008..4bf56cd 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked55.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked55.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked55 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked56.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked56.java
index 994b9d1..821651d 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked56.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked56.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked56 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked57.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked57.java
index 4a45ec2..2612308 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked57.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked57.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked57 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked58.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked58.java
index eb5ee26..1817df3 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked58.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked58.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked58 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked59.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked59.java
index 1c85c49..e2166af 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked59.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked59.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked59 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked60.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked60.java
index 7a0a448..2e04034 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked60.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked60.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked60 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked61.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked61.java
index 0626bc2..470c24b 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked61.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked61.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked61 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked62.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked62.java
index b7146e9..1973c82 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked62.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked62.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked62 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked63.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked63.java
index 4759187..13e892e 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked63.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked63.java
@@ -35,6 +35,10 @@ final class BulkOperationPacked63 extends BulkOperation {
       throw new UnsupportedOperationException();
     }
 
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       assert blocksOffset + iterations * blockCount() <= blocks.length;
       assert valuesOffset + iterations * valueCount() <= values.length;
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked64.java b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked64.java
index 894f57a..5b7f394 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked64.java
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked64.java
@@ -38,6 +38,16 @@ final class BulkOperationPacked64 extends BulkOperation {
       System.arraycopy(blocks, blocksOffset, values, valuesOffset, valueCount() * iterations);
     }
 
+    @Override
+    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       LongBuffer.wrap(values, valuesOffset, iterations * valueCount()).put(ByteBuffer.wrap(blocks, blocksOffset, 8 * iterations * blockCount()).asLongBuffer());
     }
diff --git a/lucene/core/src/java/org/apache/lucene/util/packed/gen_BulkOperation.py b/lucene/core/src/java/org/apache/lucene/util/packed/gen_BulkOperation.py
index 239bd91..bcb025f 100644
--- a/lucene/core/src/java/org/apache/lucene/util/packed/gen_BulkOperation.py
+++ b/lucene/core/src/java/org/apache/lucene/util/packed/gen_BulkOperation.py
@@ -55,16 +55,6 @@ FOOTER="""
   }
 
   @Override
-  public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
   public void encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) {
     encode(toLongArray(values, valuesOffset, iterations * valueCount()), 0, blocks, blocksOffset, iterations);
   }
@@ -277,6 +267,16 @@ def packed64(bpv, f):
       System.arraycopy(blocks, blocksOffset, values, valuesOffset, valueCount() * iterations);
     }
 
+    @Override
+    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
+      throw new UnsupportedOperationException();
+    }
+
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
       LongBuffer.wrap(values, valuesOffset, iterations * valueCount()).put(ByteBuffer.wrap(blocks, blocksOffset, 8 * iterations * blockCount()).asLongBuffer());
     }
@@ -298,79 +298,77 @@ def p64_decode(bpv, f, bits, values):
   f.write("    public void decode(long[] blocks, int blocksOffset, %s[] values, int valuesOffset, int iterations) {\n" %typ)
   if bits < bpv:
     f.write("      throw new UnsupportedOperationException();\n")
-    f.write("    }\n\n")
-    return
-  f.write("      assert blocksOffset + iterations * blockCount() <= blocks.length;\n")
-  f.write("      assert valuesOffset + iterations * valueCount() <= values.length;\n")
-  f.write("      for (int i = 0; i < iterations; ++i) {\n")
-  mask = (1 << bpv) - 1
-  for i in xrange(0, values):
-    block_offset = i * bpv / 64
-    bit_offset = (i * bpv) % 64
-    if bit_offset == 0:
-      # start of block
-      f.write("        final long block%d = blocks[blocksOffset++];\n" %block_offset);
-      f.write("        values[valuesOffset++] = %sblock%d >>> %d%s;\n" %(cast_start, block_offset, 64 - bpv, cast_end))
-    elif bit_offset + bpv == 64:
-      # end of block
-      f.write("        values[valuesOffset++] = %sblock%d & %dL%s;\n" %(cast_start, block_offset, mask, cast_end))
-    elif bit_offset + bpv < 64:
-      # middle of block
-      f.write("        values[valuesOffset++] = %s(block%d >>> %d) & %dL%s;\n" %(cast_start, block_offset, 64 - bit_offset - bpv, mask, cast_end))
-    else:
-      # value spans across 2 blocks
-      mask1 = (1 << (64 - bit_offset)) -1
-      shift1 = bit_offset + bpv - 64
-      shift2 = 64 - shift1
-      f.write("        final long block%d = blocks[blocksOffset++];\n" %(block_offset + 1));
-      f.write("        values[valuesOffset++] = %s((block%d & %dL) << %d) | (block%d >>> %d)%s;\n" %(cast_start, block_offset, mask1, shift1, block_offset + 1, shift2, cast_end))
-  f.write("      }\n")
+  else:
+    f.write("      assert blocksOffset + iterations * blockCount() <= blocks.length;\n")
+    f.write("      assert valuesOffset + iterations * valueCount() <= values.length;\n")
+    f.write("      for (int i = 0; i < iterations; ++i) {\n")
+    mask = (1 << bpv) - 1
+    for i in xrange(0, values):
+      block_offset = i * bpv / 64
+      bit_offset = (i * bpv) % 64
+      if bit_offset == 0:
+        # start of block
+        f.write("        final long block%d = blocks[blocksOffset++];\n" %block_offset);
+        f.write("        values[valuesOffset++] = %sblock%d >>> %d%s;\n" %(cast_start, block_offset, 64 - bpv, cast_end))
+      elif bit_offset + bpv == 64:
+        # end of block
+        f.write("        values[valuesOffset++] = %sblock%d & %dL%s;\n" %(cast_start, block_offset, mask, cast_end))
+      elif bit_offset + bpv < 64:
+        # middle of block
+        f.write("        values[valuesOffset++] = %s(block%d >>> %d) & %dL%s;\n" %(cast_start, block_offset, 64 - bit_offset - bpv, mask, cast_end))
+      else:
+        # value spans across 2 blocks
+        mask1 = (1 << (64 - bit_offset)) -1
+        shift1 = bit_offset + bpv - 64
+        shift2 = 64 - shift1
+        f.write("        final long block%d = blocks[blocksOffset++];\n" %(block_offset + 1));
+        f.write("        values[valuesOffset++] = %s((block%d & %dL) << %d) | (block%d >>> %d)%s;\n" %(cast_start, block_offset, mask1, shift1, block_offset + 1, shift2, cast_end))
+    f.write("      }\n")
   f.write("    }\n\n")
 
   f.write("    public void decode(byte[] blocks, int blocksOffset, %s[] values, int valuesOffset, int iterations) {\n" %typ)
   if bits < bpv:
     f.write("      throw new UnsupportedOperationException();\n")
-    f.write("    }\n\n")
-    return
-  f.write("      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n")
-  f.write("      assert valuesOffset + iterations * valueCount() <= values.length;\n")
-  f.write("      for (int i = 0; i < iterations; ++i) {\n")
-  blocks = values * bpv / 8
-  for i in xrange(0, values):
-    byte_start = i * bpv / 8
-    bit_start = (i * bpv) % 8
-    byte_end = ((i + 1) * bpv - 1) / 8
-    bit_end = ((i + 1) * bpv - 1) % 8
-    shift = lambda b: 8 * (byte_end - b - 1) + 1 + bit_end
-    if bit_start == 0:
-      f.write("        final %s byte%d = blocks[blocksOffset++] & 0xFF;\n" %(typ, byte_start))
-    for b in xrange(byte_start + 1, byte_end + 1):
-      f.write("        final %s byte%d = blocks[blocksOffset++] & 0xFF;\n" %(typ, b))
-    f.write("        values[valuesOffset++] =")
-    if byte_start == byte_end:
+  else:
+    f.write("      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n")
+    f.write("      assert valuesOffset + iterations * valueCount() <= values.length;\n")
+    f.write("      for (int i = 0; i < iterations; ++i) {\n")
+    blocks = values * bpv / 8
+    for i in xrange(0, values):
+      byte_start = i * bpv / 8
+      bit_start = (i * bpv) % 8
+      byte_end = ((i + 1) * bpv - 1) / 8
+      bit_end = ((i + 1) * bpv - 1) % 8
+      shift = lambda b: 8 * (byte_end - b - 1) + 1 + bit_end
       if bit_start == 0:
-        if bit_end == 7:
-          f.write(" byte%d" %byte_start)
+        f.write("        final %s byte%d = blocks[blocksOffset++] & 0xFF;\n" %(typ, byte_start))
+      for b in xrange(byte_start + 1, byte_end + 1):
+        f.write("        final %s byte%d = blocks[blocksOffset++] & 0xFF;\n" %(typ, b))
+      f.write("        values[valuesOffset++] =")
+      if byte_start == byte_end:
+        if bit_start == 0:
+          if bit_end == 7:
+            f.write(" byte%d" %byte_start)
+          else:
+            f.write(" byte%d >>> %d" %(byte_start, 7 - bit_end))
         else:
-          f.write(" byte%d >>> %d" %(byte_start, 7 - bit_end))
+          if bit_end == 7:
+            f.write(" byte%d & %d" %(byte_start, 2 ** (8 - bit_start) - 1))
+          else:
+            f.write(" (byte%d >>> %d) & %d" %(byte_start, 7 - bit_end, 2 ** (bit_end - bit_start + 1) - 1))
       else:
+        if bit_start == 0:
+          f.write(" (byte%d << %d)" %(byte_start, shift(byte_start)))
+        else:
+          f.write(" ((byte%d & %d) << %d)" %(byte_start, 2 ** (8 - bit_start) - 1, shift(byte_start)))
+        for b in xrange(byte_start + 1, byte_end):
+          f.write(" | (byte%d << %d)" %(b, shift(b)))
         if bit_end == 7:
-          f.write(" byte%d & %d" %(byte_start, 2 ** (8 - bit_start) - 1))
+          f.write(" | byte%d" %byte_end)
         else:
-          f.write(" (byte%d >>> %d) & %d" %(byte_start, 7 - bit_end, 2 ** (bit_end - bit_start + 1) - 1))
-    else:
-      if bit_start == 0:
-        f.write(" (byte%d << %d)" %(byte_start, shift(byte_start)))
-      else:
-        f.write(" ((byte%d & %d) << %d)" %(byte_start, 2 ** (8 - bit_start) - 1, shift(byte_start)))
-      for b in xrange(byte_start + 1, byte_end):
-        f.write(" | (byte%d << %d)" %(b, shift(b)))
-      if bit_end == 7:
-        f.write(" | byte%d" %byte_end)
-      else:
-        f.write(" | (byte%d >>> %d)" %(byte_end, 7 - bit_end))
-    f.write(";\n")
-  f.write("      }\n")
+          f.write(" | (byte%d >>> %d)" %(byte_end, 7 - bit_end))
+      f.write(";\n")
+    f.write("      }\n")
   f.write("    }\n\n")
 
 def p64_encode(bpv, f, bits, values):

