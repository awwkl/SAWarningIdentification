GitDiffStart: b7253a06b769fa4eee87b1f24fb7c65fe49d618f | Thu Oct 11 12:10:31 2007 +0000
diff --git a/contrib/benchmark/conf/micro-standard-flush-by-ram.alg b/contrib/benchmark/conf/micro-standard-flush-by-ram.alg
index f79b32c..d01723e 100644
--- a/contrib/benchmark/conf/micro-standard-flush-by-ram.alg
+++ b/contrib/benchmark/conf/micro-standard-flush-by-ram.alg
@@ -19,7 +19,7 @@
 
 #merge.factor=mrg:10:100:10:100
 #max.buffered=buf:10:10:100:100
-ram.flush.mb=ram:32:40:48:56
+ram.flush.mb=flush:32:40:48:56
 compound=true
 
 analyzer=org.apache.lucene.analysis.standard.StandardAnalyzer
diff --git a/contrib/benchmark/conf/standard-flush-by-RAM.alg b/contrib/benchmark/conf/standard-flush-by-RAM.alg
index f135221..0727876 100644
--- a/contrib/benchmark/conf/standard-flush-by-RAM.alg
+++ b/contrib/benchmark/conf/standard-flush-by-RAM.alg
@@ -19,7 +19,7 @@
 
 #merge.factor=mrg:10:100:10:100:10:100:10:100
 #max.buffered=buf:10:10:100:100:10:10:100:100
-ram.flush.mb=ram:32:40:48:56:32:40:48:56
+ram.flush.mb=flush:32:40:48:56:32:40:48:56
 compound=cmpnd:true:true:true:true:false:false:false:false
 
 analyzer=org.apache.lucene.analysis.standard.StandardAnalyzer
diff --git a/contrib/benchmark/conf/wikipedia-flush-by-RAM.alg b/contrib/benchmark/conf/wikipedia-flush-by-RAM.alg
new file mode 100644
index 0000000..f1393bd
--- /dev/null
+++ b/contrib/benchmark/conf/wikipedia-flush-by-RAM.alg
@@ -0,0 +1,69 @@
+#/**
+# * Licensed to the Apache Software Foundation (ASF) under one or more
+# * contributor license agreements.  See the NOTICE file distributed with
+# * this work for additional information regarding copyright ownership.
+# * The ASF licenses this file to You under the Apache License, Version 2.0
+# * (the "License"); you may not use this file except in compliance with
+# * the License.  You may obtain a copy of the License at
+# *
+# *     http://www.apache.org/licenses/LICENSE-2.0
+# *
+# * Unless required by applicable law or agreed to in writing, software
+# * distributed under the License is distributed on an "AS IS" BASIS,
+# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# * See the License for the specific language governing permissions and
+# * limitations under the License.
+# */
+# -------------------------------------------------------------------------------------
+# multi val params are iterated by NewRound's, added to reports, start with column name.
+#
+# based on micro-standard
+#
+# modified to use wikipedia sources and index entire docs
+# currently just used to measure ingest rate
+
+#merge.factor=mrg:10:100:10:100
+#max.buffered=buf:10:10:100:100
+ram.flush.mb=ram:32:40:48:56
+
+max.field.length=2147483647
+
+
+compound=true
+
+analyzer=org.apache.lucene.analysis.standard.StandardAnalyzer
+directory=FSDirectory
+
+doc.stored=true
+doc.tokenized=true
+doc.term.vector=false
+doc.add.log.step=500
+
+docs.dir=enwiki
+
+doc.maker=org.apache.lucene.benchmark.byTask.feeds.DirDocMaker
+
+query.maker=org.apache.lucene.benchmark.byTask.feeds.ReutersQueryMaker
+
+# task at this depth or less would print when they start
+task.max.depth.log=2
+
+log.queries=false
+# -------------------------------------------------------------------------------------
+
+{ "Rounds"
+
+    ResetSystemErase
+
+    { "Populate"
+        CreateIndex
+        { "MAddDocs" AddDoc > : 200000
+        CloseIndex
+    }
+
+    NewRound
+
+} : 8
+
+RepSumByName
+RepSumByPrefRound MAddDocs
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config.java
index 5c2ff0c..bcb4b47 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config.java
@@ -376,7 +376,7 @@ public class Config {
         else if (a instanceof double[]) {
           double ad[] = (double[]) a;
           int n = roundNum % ad.length;
-          sb.append(Format.format(2, (float) ad[n],template));
+          sb.append(Format.format(2, ad[n],template));
         }
         else {
           boolean ab[] = (boolean[]) a;
diff --git a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Format.java b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Format.java
index 7d49aae..e689f6c 100644
--- a/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Format.java
+++ b/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Format.java
@@ -52,6 +52,11 @@ public class Format {
     return res.substring(res.length() - col.length());
   }
 
+  public static String format(int numFracDigits, double f, String col) {
+    String res = padd + numFormat[numFracDigits].format(f);
+    return res.substring(res.length() - col.length());
+  }
+
   /**
    * Padd a number from right.
    * @param numFracDigits number of digits in fraction part - must be 0 or 1 or 2.
@@ -64,6 +69,11 @@ public class Format {
     return res.substring(0, col.length());
   }
 
+  public static String formatPaddRight(int numFracDigits, double f, String col) {
+    String res = numFormat[numFracDigits].format(f) + padd;
+    return res.substring(0, col.length());
+  }
+
   /**
    * Padd a number from left.
    * @param n number to be formatted.

