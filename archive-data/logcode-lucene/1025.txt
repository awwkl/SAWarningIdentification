GitDiffStart: d1202a8f8d223a6148e79628e63e7677dd4325a6 | Wed May 18 02:02:30 2016 +0530
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 5f5b389..b29417e 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -219,6 +219,7 @@ Bug Fixes
 
 * SOLR-9118: HashQParserPlugin should trim partition keys (Joel Bernstein)
 
+* SOLR-9117: The first SolrCore is leaked after reload. (Jessica Cheng via shalin)
 
 Optimizations
 ----------------------
diff --git a/solr/core/src/java/org/apache/solr/core/CoreContainer.java b/solr/core/src/java/org/apache/solr/core/CoreContainer.java
index db9887c..ff776b5 100644
--- a/solr/core/src/java/org/apache/solr/core/CoreContainer.java
+++ b/solr/core/src/java/org/apache/solr/core/CoreContainer.java
@@ -834,7 +834,6 @@ public class CoreContainer {
       ConfigSet coreConfig = coreConfigService.getConfig(dcore);
       log.info("Creating SolrCore '{}' using configuration from {}", dcore.getName(), coreConfig.getName());
       core = new SolrCore(dcore, coreConfig);
-      solrCores.addCreated(core);
 
       // always kick off recovery if we are in non-Cloud mode
       if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {
diff --git a/solr/core/src/java/org/apache/solr/core/SolrCores.java b/solr/core/src/java/org/apache/solr/core/SolrCores.java
index af287b7..8a4af9f 100644
--- a/solr/core/src/java/org/apache/solr/core/SolrCores.java
+++ b/solr/core/src/java/org/apache/solr/core/SolrCores.java
@@ -51,8 +51,6 @@ class SolrCores {
 
   private final Map<String, CoreDescriptor> dynamicDescriptors = new LinkedHashMap<>();
 
-  private final Map<String, SolrCore> createdCores = new LinkedHashMap<>();
-
   private final CoreContainer container;
   
   private Set<String> currentlyLoadingCores = Collections.newSetFromMap(new ConcurrentHashMap<String,Boolean>());
@@ -213,7 +211,6 @@ class SolrCores {
       set.addAll(cores.keySet());
       set.addAll(transientCores.keySet());
       set.addAll(dynamicDescriptors.keySet());
-      set.addAll(createdCores.keySet());
     }
     return set;
   }
@@ -261,8 +258,6 @@ class SolrCores {
       // in particular should be checked. It could have been a dynamic core.
       tmp = transientCores.remove(name);
       ret = (ret == null) ? tmp : ret;
-      tmp = createdCores.remove(name);
-      ret = (ret == null) ? tmp : ret;
       dynamicDescriptors.remove(name);
       return ret;
     }
@@ -407,12 +402,6 @@ class SolrCores {
     return null;
   }
 
-  protected void addCreated(SolrCore core) {
-    synchronized (modifyLock) {
-      createdCores.put(core.getName(), core);
-    }
-  }
-
   /**
    * Return the CoreDescriptor corresponding to a given core name.
    * Blocks if the SolrCore is still loading until it is ready.

