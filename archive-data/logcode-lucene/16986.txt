GitDiffStart: 2e730465b2100dbee3dba6dab776c691a870a061 | Mon Nov 8 22:40:56 2010 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 2dc2c52..78cb530 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -302,6 +302,9 @@ New Features
 * SOLR-1336: Add SmartChinese (word segmentation for Simplified Chinese) 
   tokenizer and filters to contrib/analysis-extras (rmuir)
 
+* SOLR-2211: Added UAX29TokenizerFactory, which implements UAX#29, a unicode algorithm 
+  with good results for most languages.  (Tom Burton-West via rmuir)
+
 Optimizations
 ----------------------
 
diff --git a/solr/src/java/org/apache/solr/analysis/UAX29TokenizerFactory.java b/solr/src/java/org/apache/solr/analysis/UAX29TokenizerFactory.java
new file mode 100644
index 0000000..8e87cb4
--- /dev/null
+++ b/solr/src/java/org/apache/solr/analysis/UAX29TokenizerFactory.java
@@ -0,0 +1,43 @@
+package org.apache.solr.analysis;
+
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+
+import org.apache.lucene.analysis.standard.UAX29Tokenizer;
+
+import java.io.Reader;
+import java.util.Map;
+
+/**
+ * @version $Id$
+ * 
+ */
+
+public class UAX29TokenizerFactory extends BaseTokenizerFactory {
+  @Override
+  public void init(Map<String,String> args) {
+    super.init(args);
+    assureMatchVersion();
+  }
+
+  public UAX29Tokenizer create(Reader input) {
+    return new UAX29Tokenizer(input);
+  }
+}
diff --git a/solr/src/test/org/apache/solr/analysis/TestUAX29TokenizerFactory.java b/solr/src/test/org/apache/solr/analysis/TestUAX29TokenizerFactory.java
new file mode 100644
index 0000000..47acf8e
--- /dev/null
+++ b/solr/src/test/org/apache/solr/analysis/TestUAX29TokenizerFactory.java
@@ -0,0 +1,81 @@
+package org.apache.solr.analysis;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.Reader;
+import java.io.StringReader;
+import org.apache.lucene.analysis.Tokenizer;
+
+/**
+ * A few tests based on  org.apache.lucene.analysis.TestUAX29Tokenizer;
+ */
+
+public class TestUAX29TokenizerFactory extends BaseTokenTestCase {
+  /**
+   * Test UAX29TokenizerFactory
+   */
+  public void testUAX29Tokenizer() throws Exception {
+    Reader reader = new StringReader("Wha\u0301t's this thing do?");
+    UAX29TokenizerFactory factory = new UAX29TokenizerFactory();
+    factory.init(DEFAULT_VERSION_PARAM);
+    Tokenizer stream = factory.create(reader);
+    assertTokenStreamContents(stream, 
+        new String[] {"Wha\u0301t's", "this", "thing", "do" });
+  }
+  
+  public void testArabic() throws Exception {
+    Reader reader = new StringReader("Ø§????? Ø§??Ø«Ø§Ø¦?? Ø§?Ø£?? Ø¹? ????Ø¨?Ø¯?Ø§ ?Ø³?? \"Ø§?Ø­???Ø© Ø¨Ø§?Ø£Ø±?Ø§?: ?ØµØ© ????Ø¨?Ø¯?Ø§\" (Ø¨Ø§?Ø¥?Ø¬??Ø²?Ø©: Truth in Numbers: The Wikipedia Story)? Ø³?Øª? Ø¥Ø·?Ø§?? ?? 2008.");
+    UAX29TokenizerFactory factory = new UAX29TokenizerFactory();
+    factory.init(DEFAULT_VERSION_PARAM);
+    Tokenizer stream = factory.create(reader);
+    assertTokenStreamContents(stream, 
+        new String[] {"Ø§?????", "Ø§??Ø«Ø§Ø¦??", "Ø§?Ø£??", "Ø¹?", "????Ø¨?Ø¯?Ø§", "?Ø³??", "Ø§?Ø­???Ø©", "Ø¨Ø§?Ø£Ø±?Ø§?", "?ØµØ©", "????Ø¨?Ø¯?Ø§",
+        "Ø¨Ø§?Ø¥?Ø¬??Ø²?Ø©", "Truth", "in", "Numbers", "The", "Wikipedia", "Story", "Ø³?Øª?", "Ø¥Ø·?Ø§??", "??", "2008"  });
+  }
+  
+  public void testChinese() throws Exception {
+    Reader reader = new StringReader("???ä¸??äººã?? ï¼??ï¼?? ï¼´ï?ï½??ï½? ");
+    UAX29TokenizerFactory factory = new UAX29TokenizerFactory();
+    factory.init(DEFAULT_VERSION_PARAM);
+    Tokenizer stream = factory.create(reader);
+    assertTokenStreamContents(stream, 
+        new String[] {"??", "??", "ä¸?", "??", "äº?", "ï¼??ï¼??", "ï¼´ï?ï½??ï½?"});
+  }
+  public void testKorean() throws Exception {
+    Reader reader = new StringReader("???????? ????????");
+    UAX29TokenizerFactory factory = new UAX29TokenizerFactory();
+    factory.init(DEFAULT_VERSION_PARAM);
+    Tokenizer stream = factory.create(reader);
+    assertTokenStreamContents(stream, 
+        new String[] {"????????", "????????"});
+  }
+    
+  public void testHyphen() throws Exception {
+    Reader reader = new StringReader("some-dashed-phrase");
+    UAX29TokenizerFactory factory = new UAX29TokenizerFactory();
+    factory.init(DEFAULT_VERSION_PARAM);
+    Tokenizer stream = factory.create(reader);
+    assertTokenStreamContents(stream, 
+        new String[] {"some", "dashed", "phrase"});
+  }
+
+}
+    
+  
+  
+  

