GitDiffStart: 53d3a0cfab20e529a9849647d1b8a99f293f8a91 | Tue Feb 5 14:02:32 2008 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index 4505dae..34049c1 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -40,6 +40,10 @@ Bug fixes
     
  1. LUCENE-1134: Fixed BooleanQuery.rewrite to only optimze a single 
     clause query if minNumShouldMatch<=0. (Shai Erera via Michael Busch)
+
+ 2. LUCENE-1163: Fixed bug in CharArraySet.contains(char[] buffer, int
+    offset, int len) that was ignoring offset and thus giving the
+    wrong answer.  (Thomas Peuss via Mike McCandless)
 	
 New features
 
diff --git a/src/java/org/apache/lucene/analysis/CharArraySet.java b/src/java/org/apache/lucene/analysis/CharArraySet.java
index 828c9fd..2bef4b8 100644
--- a/src/java/org/apache/lucene/analysis/CharArraySet.java
+++ b/src/java/org/apache/lucene/analysis/CharArraySet.java
@@ -66,7 +66,7 @@ public class CharArraySet extends AbstractSet {
   }
 
   private int getSlot(char[] text, int off, int len) {
-    int code = getHashCode(text, len);
+    int code = getHashCode(text, off, len);
     int pos = code & (entries.length-1);
     char[] text2 = entries[pos];
     if (text2 != null && !equals(text, off, len, text2)) {
@@ -175,14 +175,15 @@ public class CharArraySet extends AbstractSet {
     }
   }
   
-  private int getHashCode(char[] text, int len) {
+  private int getHashCode(char[] text, int offset, int len) {
     int code = 0;
+    final int stop = offset + len;
     if (ignoreCase) {
-      for (int i=0; i<len; i++) {
+      for (int i=offset; i<stop; i++) {
         code = code*31 + Character.toLowerCase(text[i]);
       }
     } else {
-      for (int i=0; i<len; i++) {
+      for (int i=offset; i<stop; i++) {
         code = code*31 + text[i];
       }
     }
diff --git a/src/test/org/apache/lucene/analysis/TestCharArraySet.java b/src/test/org/apache/lucene/analysis/TestCharArraySet.java
index b6ea5a1..7a17bf5 100755
--- a/src/test/org/apache/lucene/analysis/TestCharArraySet.java
+++ b/src/test/org/apache/lucene/analysis/TestCharArraySet.java
@@ -17,20 +17,27 @@ package org.apache.lucene.analysis;
  * limitations under the License.
  */
 
-import java.io.IOException;
+import java.util.Arrays;
 
 import org.apache.lucene.util.LuceneTestCase;
-import org.apache.lucene.analysis.StopAnalyzer;
-import org.apache.lucene.analysis.CharArraySet;
 
 public class TestCharArraySet extends LuceneTestCase
 {
-    public void testRehash() throws Exception {
-      CharArraySet cas = new CharArraySet(0, true);
-      for(int i=0;i<StopAnalyzer.ENGLISH_STOP_WORDS.length;i++)
-        cas.add(StopAnalyzer.ENGLISH_STOP_WORDS[i]);
-      assertEquals(StopAnalyzer.ENGLISH_STOP_WORDS.length, cas.size());
-      for(int i=0;i<StopAnalyzer.ENGLISH_STOP_WORDS.length;i++)
-        assertTrue(cas.contains(StopAnalyzer.ENGLISH_STOP_WORDS[i]));
-    }
+  public void testRehash() throws Exception {
+    CharArraySet cas = new CharArraySet(0, true);
+    for(int i=0;i<StopAnalyzer.ENGLISH_STOP_WORDS.length;i++)
+      cas.add(StopAnalyzer.ENGLISH_STOP_WORDS[i]);
+    assertEquals(StopAnalyzer.ENGLISH_STOP_WORDS.length, cas.size());
+    for(int i=0;i<StopAnalyzer.ENGLISH_STOP_WORDS.length;i++)
+      assertTrue(cas.contains(StopAnalyzer.ENGLISH_STOP_WORDS[i]));
+  }
+
+  public void testNonZeroOffset() {
+    String[] words={"Hello","World","this","is","a","test"};
+    char[] findme="xthisy".toCharArray();   
+    CharArraySet set=new CharArraySet(10,true);
+    set.addAll(Arrays.asList(words));
+    assertTrue(set.contains(findme, 1, 4));
+    assertTrue(set.contains(new String(findme,1,4)));
+  }
 }

