GitDiffStart: 571150f303127515a47c5c7f3d40acca99294489 | Wed Aug 26 15:35:26 2009 +0000
diff --git a/docs/benchmarktemplate.xml b/docs/benchmarktemplate.xml
deleted file mode 100644
index df7601f..0000000
--- a/docs/benchmarktemplate.xml
+++ /dev/null
@@ -1,61 +0,0 @@
-<benchmark>
-  <ul>
-  <p>
-  <b>Hardware Environment</b><br/>
-  <li><i>Dedicated machine for indexing</i>: Self-explanatory 
-(yes/no)</li>
-  <li><i>CPU</i>: Self-explanatory (Type, Speed and Quantity)</li>
-  <li><i>RAM</i>: Self-explanatory</li>
-  <li><i>Drive configuration</i>: Self-explanatory (IDE, SCSI, RAID-1, 
-RAID-5)</li>
-  </p>
-  <p>
-  <b>Software environment</b><br/>
-  <li><i>Lucene Version</i>: Self-explanatory</li>
-  <li><i>Java Version</i>: Version of Java SDK/JRE that is run </li>
-  <li><i>Java VM</i>: Server/client VM, Sun VM/JRockIt</li>
-  <li><i>OS Version</i>: Self-explanatory</li>
-  <li><i>Location of index</i>: Is the index stored in filesystem or 
-database? Is it on the same server (local) or 
-  over the network?</li>
-  </p>
-  <p>
-  <b>Lucene indexing variables</b><br/>
-  <li><i>Number of source documents</i>: Number of documents being 
-indexed</li>
-  <li><i>Total filesize of source documents</i>: Self-explanatory</li>
-  <li><i>Average filesize of source documents</i>: 
-Self-explanatory</li>
-  <li><i>Source documents storage location</i>: Where are the documents 
-being indexed located? 
-    Filesystem, DB, http,etc</li>
-  <li><i>File type of source documents</i>: Types of files being 
-indexed, e.g. HTML files, XML files, PDF files, etc.</li>
-  <li><i>Parser(s) used, if any</i>: Parsers used for parsing the 
-various files for indexing, 
-    e.g. XML parser, HTML parser, etc.</li>
-  <li><i>Analyzer(s) used</i>: Type of Lucene analyzer used</li>
-  <li><i>Number of fields per document</i>: Number of Fields each 
-Document contains</li>
-  <li><i>Type of fields</i>: Type of each field</li>
-  <li><i>Index persistence</i>: Where the index is stored, e.g. 
-FSDirectory, SqlDirectory, etc</li>
-  </p>
-  <p>
-  <b>Figures</b><br/>
-  <li><i>Time taken (in ms/s as an average of at least 3 indexing 
-runs)</i>: Time taken to index to index all files</li>
-  <li><i>Time taken / 1000 docs indexed</i>: Time taken to index 1000 
-files</li>
-  <li><i>Memory consumption</i>: Self-explanatory</li>
-  <li><i>Query speed</i>: average time a query takes, type
-    of queries (e.g. simple one-term query, phrase query),
-    not measuring any overhead outside Lucene</li>
-  </p>
-  <p>
-  <b>Notes</b><br/>
-  <li><i>Notes</i>: Any comments which don't belong in the above, 
-special tuning/strategies, etc</li>
-  </p>
-  </ul>
-</benchmark>
diff --git a/docs/contributions.html b/docs/contributions.html
index 14736bb..1faa4ba 100644
--- a/docs/contributions.html
+++ b/docs/contributions.html
@@ -202,9 +202,6 @@ document.write("Last Published: " + document.lastModified);
 </div>
 </div>
 </div>
-<div class="menuitem">
-<a href="benchmarks.html">Benchmarks</a>
-</div>
 <div class="menupage">
 <div class="menupagetitle">Contributions</div>
 </div>
diff --git a/docs/demo.html b/docs/demo.html
index 1935f4d..1853f94 100644
--- a/docs/demo.html
+++ b/docs/demo.html
@@ -203,9 +203,6 @@ document.write("Last Published: " + document.lastModified);
 </div>
 </div>
 <div class="menuitem">
-<a href="benchmarks.html">Benchmarks</a>
-</div>
-<div class="menuitem">
 <a href="contributions.html">Contributions</a>
 </div>
 <div class="menuitem">
diff --git a/docs/demo2.html b/docs/demo2.html
index 36a6dd3..f5cb126 100644
--- a/docs/demo2.html
+++ b/docs/demo2.html
@@ -203,9 +203,6 @@ document.write("Last Published: " + document.lastModified);
 </div>
 </div>
 <div class="menuitem">
-<a href="benchmarks.html">Benchmarks</a>
-</div>
-<div class="menuitem">
 <a href="contributions.html">Contributions</a>
 </div>
 <div class="menuitem">
@@ -327,11 +324,11 @@ instance of <span class="codefrag">org.apache.lucene.analysis.Analyzer</span>.
 The particular <span class="codefrag">Analyzer</span> we
 are using, <span class="codefrag">StandardAnalyzer</span>, is
 little more than a standard Java Tokenizer, converting all strings to lowercase and filtering out
-useless words and characters from the index.  By useless words and characters I mean common language
-words such as articles (a, an, the, etc.) and other strings that would be useless for searching
+stop words and characters from the index.  By stop words and characters I mean common language
+words such as articles (a, an, the, etc.) and other strings that may have less value for searching
 (e.g. <b>'s</b>) .  It should be noted that there are different rules for every language, and you
 should use the proper analyzer for each.  Lucene currently provides Analyzers for a number of
-different languages (see the <span class="codefrag">*Analyzer.java</span> sources under <a href="http://svn.apache.org/repos/asf/lucene/java/trunk/contrib/analyzers/src/java/org/apache/lucene/analysis/">contrib/analyzers/src/java/org/apache/lucene/analysis</a>).
+different languages (see the <span class="codefrag">*Analyzer.java</span> sources under <a href="http://svn.apache.org/repos/asf/lucene/java/trunk/contrib/analyzers/common/src/java/org/apache/lucene/analysis/">contrib/analyzers/src/java/org/apache/lucene/analysis</a>).
 </p>
 <p>
 Looking further down in the file, you should see the <span class="codefrag">indexDocs()</span> code.  This recursive
diff --git a/docs/demo2.pdf b/docs/demo2.pdf
index 3bc6e03..006a280 100644
--- a/docs/demo2.pdf
+++ b/docs/demo2.pdf
@@ -49,12 +49,12 @@ one of the subclasses of Directory. In any case, you must also pass an instance
 org.apache.lucene.analysis.Analyzer.
 
 The particular Analyzer we are using, StandardAnalyzer, is little more than a
-standard Java Tokenizer, converting all strings to lowercase and filtering out useless words
-and characters from the index. By useless words and characters I mean common language
-words such as articles (a, an, the, etc.) and other strings that would be useless for searching
-(e.g. 's) . It should be noted that there are different rules for every language, and you should
-use the proper analyzer for each. Lucene currently provides Analyzers for a number of
-different languages (see the *Analyzer.java sources under
+standard Java Tokenizer, converting all strings to lowercase and filtering out stop words and
+characters from the index. By stop words and characters I mean common language words
+such as articles (a, an, the, etc.) and other strings that may have less value for searching (e.g.
+'s) . It should be noted that there are different rules for every language, and you should use
+the proper analyzer for each. Lucene currently provides Analyzers for a number of different
+languages (see the *Analyzer.java sources under
 
                                                                        Page 2
 
diff --git a/docs/demo3.html b/docs/demo3.html
index 1cad0bd..57b587c 100644
--- a/docs/demo3.html
+++ b/docs/demo3.html
@@ -203,9 +203,6 @@ document.write("Last Published: " + document.lastModified);
 </div>
 </div>
 <div class="menuitem">
-<a href="benchmarks.html">Benchmarks</a>
-</div>
-<div class="menuitem">
 <a href="contributions.html">Contributions</a>
 </div>
 <div class="menuitem">
diff --git a/docs/demo4.html b/docs/demo4.html
index 147e531..00cd264 100644
--- a/docs/demo4.html
+++ b/docs/demo4.html
@@ -203,9 +203,6 @@ document.write("Last Published: " + document.lastModified);
 </div>
 </div>
 <div class="menuitem">
-<a href="benchmarks.html">Benchmarks</a>
-</div>
-<div class="menuitem">
 <a href="contributions.html">Contributions</a>
 </div>
 <div class="menuitem">
diff --git a/docs/fileformats.html b/docs/fileformats.html
index a8a6c24..e7a3fc7 100644
--- a/docs/fileformats.html
+++ b/docs/fileformats.html
@@ -203,9 +203,6 @@ document.write("Last Published: " + document.lastModified);
 </div>
 </div>
 <div class="menuitem">
-<a href="benchmarks.html">Benchmarks</a>
-</div>
-<div class="menuitem">
 <a href="contributions.html">Contributions</a>
 </div>
 <div class="menuitem">
diff --git a/docs/gettingstarted.html b/docs/gettingstarted.html
index 43cc420..3939e6f 100644
--- a/docs/gettingstarted.html
+++ b/docs/gettingstarted.html
@@ -203,9 +203,6 @@ document.write("Last Published: " + document.lastModified);
 </div>
 </div>
 <div class="menuitem">
-<a href="benchmarks.html">Benchmarks</a>
-</div>
-<div class="menuitem">
 <a href="contributions.html">Contributions</a>
 </div>
 <div class="menuitem">
diff --git a/docs/index.html b/docs/index.html
index af5665a..0b66a93 100644
--- a/docs/index.html
+++ b/docs/index.html
@@ -201,9 +201,6 @@ document.write("Last Published: " + document.lastModified);
 </div>
 </div>
 <div class="menuitem">
-<a href="benchmarks.html">Benchmarks</a>
-</div>
-<div class="menuitem">
 <a href="contributions.html">Contributions</a>
 </div>
 <div class="menuitem">
diff --git a/docs/linkmap.html b/docs/linkmap.html
index cc691b4..f5c9743 100644
--- a/docs/linkmap.html
+++ b/docs/linkmap.html
@@ -201,9 +201,6 @@ document.write("Last Published: " + document.lastModified);
 </div>
 </div>
 <div class="menuitem">
-<a href="benchmarks.html">Benchmarks</a>
-</div>
-<div class="menuitem">
 <a href="contributions.html">Contributions</a>
 </div>
 <div class="menuitem">
@@ -461,12 +458,6 @@ document.write("Last Published: " + document.lastModified);
       
 <ul>
 <li>
-<a href="benchmarks.html">Benchmarks</a>&nbsp;&nbsp;___________________&nbsp;&nbsp;<em>benchmarks</em>
-</li>
-</ul>
-      
-<ul>
-<li>
 <a href="contributions.html">Contributions</a>&nbsp;&nbsp;___________________&nbsp;&nbsp;<em>contributions</em>
 </li>
 </ul>
diff --git a/docs/linkmap.pdf b/docs/linkmap.pdf
index 46cfeea..37795cc 100644
--- a/docs/linkmap.pdf
+++ b/docs/linkmap.pdf
@@ -45,7 +45,6 @@ This is a map of the complete site and its structure.
                   ?? XML Query
 
                       Parser ___________________ javadoc-contrib-xml-query-parser
-?? Benchmarks ___________________ benchmarks
 ?? Contributions ___________________ contributions
 ?? FAQ ___________________ faq
 ?? File Formats ___________________ file-formats
diff --git a/docs/lucene-sandbox/index.html b/docs/lucene-sandbox/index.html
index 906e469..4cdebec 100644
--- a/docs/lucene-sandbox/index.html
+++ b/docs/lucene-sandbox/index.html
@@ -203,9 +203,6 @@ document.write("Last Published: " + document.lastModified);
 </div>
 </div>
 <div class="menuitem">
-<a href="../benchmarks.html">Benchmarks</a>
-</div>
-<div class="menuitem">
 <a href="../contributions.html">Contributions</a>
 </div>
 <div class="menuitem">
diff --git a/docs/queryparsersyntax.html b/docs/queryparsersyntax.html
index b9404f1..1ffa982 100644
--- a/docs/queryparsersyntax.html
+++ b/docs/queryparsersyntax.html
@@ -203,9 +203,6 @@ document.write("Last Published: " + document.lastModified);
 </div>
 </div>
 <div class="menuitem">
-<a href="benchmarks.html">Benchmarks</a>
-</div>
-<div class="menuitem">
 <a href="contributions.html">Contributions</a>
 </div>
 <div class="menuitem">
diff --git a/docs/scoring.html b/docs/scoring.html
index 18e775c..454b080 100644
--- a/docs/scoring.html
+++ b/docs/scoring.html
@@ -203,9 +203,6 @@ document.write("Last Published: " + document.lastModified);
 </div>
 </div>
 <div class="menuitem">
-<a href="benchmarks.html">Benchmarks</a>
-</div>
-<div class="menuitem">
 <a href="contributions.html">Contributions</a>
 </div>
 <div class="menuitem">
@@ -325,10 +322,10 @@ document.write("Last Published: " + document.lastModified);
                 <a href="http://wiki.apache.org/lucene-java/InformationRetrieval">Lucene Wiki IR references</a>.
             </p>
 <p>The rest of this document will cover <a href="#Scoring">Scoring</a> basics and how to change your
-                <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a>.  Next it will cover ways you can
+                <a href="api/core/org/apache/lucene/search/Similarity.html">Similarity</a>.  Next it will cover ways you can
                 customize the Lucene internals in <a href="#Changing your Scoring -- Expert Level">Changing your Scoring
                 -- Expert Level</a> which gives details on implementing your own
-                <a href="api/org/apache/lucene/search/Query.html">Query</a> class and related functionality.  Finally, we
+                <a href="api/core/org/apache/lucene/search/Query.html">Query</a> class and related functionality.  Finally, we
                 will finish up with some reference material in the <a href="#Appendix">Appendix</a>.
             </p>
 </div>
@@ -342,21 +339,21 @@ document.write("Last Published: " + document.lastModified);
                 and the Lucene
                 <a href="fileformats.html">file formats</a>
                 before continuing on with this section.)  It is also assumed that readers know how to use the
-                <a href="api/org/apache/lucene/search/Searcher.html#explain(Query query, int doc)">Searcher.explain(Query query, int doc)</a> functionality,
+                <a href="api/core/org/apache/lucene/search/Searcher.html#explain(Query query, int doc)">Searcher.explain(Query query, int doc)</a> functionality,
                 which can go a long way in informing why a score is returned.
             </p>
 <a name="N10059"></a><a name="Fields and Documents"></a>
 <h3 class="boxed">Fields and Documents</h3>
 <p>In Lucene, the objects we are scoring are
-                    <a href="api/org/apache/lucene/document/Document.html">Documents</a>.  A Document is a collection
+                    <a href="api/core/org/apache/lucene/document/Document.html">Documents</a>.  A Document is a collection
                 of
-                    <a href="api/org/apache/lucene/document/Field.html">Fields</a>.  Each Field has semantics about how
+                    <a href="api/core/org/apache/lucene/document/Field.html">Fields</a>.  Each Field has semantics about how
                 it is created and stored (i.e. tokenized, untokenized, raw data, compressed, etc.)  It is important to
                     note that Lucene scoring works on Fields and then combines the results to return Documents.  This is
                     important because two Documents with the exact same content, but one having the content in two Fields
                     and the other in one Field will return different scores for the same query due to length normalization
                     (assumming the
-                    <a href="api/org/apache/lucene/search/DefaultSimilarity.html">DefaultSimilarity</a>
+                    <a href="api/core/org/apache/lucene/search/DefaultSimilarity.html">DefaultSimilarity</a>
                     on the Fields).
                 </p>
 <a name="N1006E"></a><a name="Score Boosting"></a>
@@ -367,21 +364,21 @@ document.write("Last Published: " + document.lastModified);
 <li>
 <b>Document level boosting</b>
                     - while indexing - by calling
-                    <a href="api/org/apache/lucene/document/Document.html#setBoost(float)">document.setBoost()</a>
+                    <a href="api/core/org/apache/lucene/document/Document.html#setBoost(float)">document.setBoost()</a>
                     before a document is added to the index.
                     </li>
                     
 <li>
 <b>Document's Field level boosting</b>
                     - while indexing - by calling
-                    <a href="api/org/apache/lucene/document/Fieldable.html#setBoost(float)">field.setBoost()</a>
+                    <a href="api/core/org/apache/lucene/document/Fieldable.html#setBoost(float)">field.setBoost()</a>
                     before adding a field to the document (and before adding the document to the index).
                     </li>
                     
 <li>
 <b>Query level boosting</b>
                      - during search, by setting a boost on a query clause, calling
-                     <a href="api/org/apache/lucene/search/Query.html#setBoost(float)">Query.setBoost()</a>.
+                     <a href="api/core/org/apache/lucene/search/Query.html#setBoost(float)">Query.setBoost()</a>.
                     </li>
                   
 </ul>
@@ -402,66 +399,66 @@ document.write("Last Published: " + document.lastModified);
 <p>This composition of 1-byte representation of norms
                 (that is, indexing time multiplication of field boosts &amp; doc boost &amp; field-length-norm)
                 is nicely described in
-                <a href="api/org/apache/lucene/document/Fieldable.html#setBoost(float)">Fieldable.setBoost()</a>.
+                <a href="api/core/org/apache/lucene/document/Fieldable.html#setBoost(float)">Fieldable.setBoost()</a>.
                 </p>
 <p>Encoding and decoding of the resulted float norm in a single byte are done by the
                 static methods of the class Similarity:
-                <a href="api/org/apache/lucene/search/Similarity.html#encodeNorm(float)">encodeNorm()</a> and
-                <a href="api/org/apache/lucene/search/Similarity.html#decodeNorm(byte)">decodeNorm()</a>.
+                <a href="api/core/org/apache/lucene/search/Similarity.html#encodeNorm(float)">encodeNorm()</a> and
+                <a href="api/core/org/apache/lucene/search/Similarity.html#decodeNorm(byte)">decodeNorm()</a>.
                 Due to loss of precision, it is not guaranteed that decode(encode(x)) = x,
                 e.g. decode(encode(0.89)) = 0.75.
                 At scoring (search) time, this norm is brought into the score of document
                 as <b>norm(t, d)</b>, as shown by the formula in
-                <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a>.
+                <a href="api/core/org/apache/lucene/search/Similarity.html">Similarity</a>.
                 </p>
 <a name="N100B1"></a><a name="Understanding the Scoring Formula"></a>
 <h3 class="boxed">Understanding the Scoring Formula</h3>
 <p>
                 This scoring formula is described in the
-                    <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a> class.  Please take the time to study this formula, as it contains much of the information about how the
+                    <a href="api/core/org/apache/lucene/search/Similarity.html">Similarity</a> class.  Please take the time to study this formula, as it contains much of the information about how the
                     basics of Lucene scoring work, especially the
-                    <a href="api/org/apache/lucene/search/TermQuery.html">TermQuery</a>.
+                    <a href="api/core/org/apache/lucene/search/TermQuery.html">TermQuery</a>.
                 </p>
 <a name="N100C2"></a><a name="The Big Picture"></a>
 <h3 class="boxed">The Big Picture</h3>
 <p>OK, so the tf-idf formula and the
-                    <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a>
+                    <a href="api/core/org/apache/lucene/search/Similarity.html">Similarity</a>
                     is great for understanding the basics of Lucene scoring, but what really drives Lucene scoring are
                     the use and interactions between the
-                    <a href="api/org/apache/lucene/search/Query.html">Query</a> classes, as created by each application in
+                    <a href="api/core/org/apache/lucene/search/Query.html">Query</a> classes, as created by each application in
                     response to a user's information need.
                 </p>
-<p>In this regard, Lucene offers a wide variety of <a href="api/org/apache/lucene/search/Query.html">Query</a> implementations, most of which are in the
-                    <a href="api/org/apache/lucene/search/package-summary.html">org.apache.lucene.search</a> package.
+<p>In this regard, Lucene offers a wide variety of <a href="api/core/org/apache/lucene/search/Query.html">Query</a> implementations, most of which are in the
+                    <a href="api/core/org/apache/lucene/search/package-summary.html">org.apache.lucene.search</a> package.
                     These implementations can be combined in a wide variety of ways to provide complex querying
                     capabilities along with
                     information about where matches took place in the document collection. The <a href="#Query Classes">Query</a>
                     section below
                     highlights some of the more important Query classes.  For information on the other ones, see the
-                    <a href="api/org/apache/lucene/search/package-summary.html">package summary</a>.  For details on implementing
+                    <a href="api/core/org/apache/lucene/search/package-summary.html">package summary</a>.  For details on implementing
                     your own Query class, see <a href="#Changing your Scoring -- Expert Level">Changing your Scoring --
                     Expert Level</a> below.
                 </p>
 <p>Once a Query has been created and submitted to the
-                    <a href="api/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a>, the scoring process
+                    <a href="api/core/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a>, the scoring process
                 begins.  (See the <a href="#Appendix">Appendix</a> Algorithm section for more notes on the process.)  After some infrastructure setup,
-                control finally passes to the <a href="api/org/apache/lucene/search/Weight.html">Weight</a> implementation and its
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a> instance.  In the case of any type of
-                    <a href="api/org/apache/lucene/search/BooleanQuery.html">BooleanQuery</a>, scoring is handled by the
+                control finally passes to the <a href="api/core/org/apache/lucene/search/Weight.html">Weight</a> implementation and its
+                    <a href="api/core/org/apache/lucene/search/Scorer.html">Scorer</a> instance.  In the case of any type of
+                    <a href="api/core/org/apache/lucene/search/BooleanQuery.html">BooleanQuery</a>, scoring is handled by the
                     <a href="http://svn.apache.org/viewvc/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java?view=log">BooleanWeight2</a> (link goes to ViewVC BooleanQuery java code which contains the BooleanWeight2 inner class),
-                    unless the static
-                    <a href="api/org/apache/lucene/search/BooleanQuery.html#setUseScorer14(boolean)">
-                        BooleanQuery#setUseScorer14(boolean)</a> method is set to true,
+                    unless 
+                    <a href="api/core/org/apache/lucene/search/Weight.html#scoresDocsOutOfOrder()">
+                        Weight#scoresDocsOutOfOrder()</a> method is set to true,
                 in which case the
                     <a href="http://svn.apache.org/viewvc/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java?view=log">BooleanWeight</a>
                     (link goes to ViewVC BooleanQuery java code, which contains the BooleanWeight inner class) from the 1.4 version of Lucene is used by default.
                     See <a href="http://svn.apache.org/repos/asf/lucene/java/trunk/CHANGES.txt">CHANGES.txt</a> under release 1.9 RC1 for more information on choosing which Scorer to use.
                 </p>
-<p>
+<p>ry#setUseScorer14(boolean)
                     Assuming the use of the BooleanWeight2, a
                     BooleanScorer2 is created by bringing together
                     all of the
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>s from the sub-clauses of the BooleanQuery.
+                    <a href="api/core/org/apache/lucene/search/Scorer.html">Scorer</a>s from the sub-clauses of the BooleanQuery.
                     When the BooleanScorer2 is asked to score it delegates its work to an internal Scorer based on the type
                     of clauses in the Query.  This internal Scorer essentially loops over the sub scorers and sums the scores
                     provided by each scorer while factoring in the coord() score.
@@ -470,14 +467,14 @@ document.write("Last Published: " + document.lastModified);
 <a name="N1011A"></a><a name="Query Classes"></a>
 <h3 class="boxed">Query Classes</h3>
 <p>For information on the Query Classes, refer to the
-                    <a href="api/org/apache/lucene/search/package-summary.html#query">search package javadocs</a>
+                    <a href="api/core/org/apache/lucene/search/package-summary.html#query">search package javadocs</a>
                 
 </p>
 <a name="N10127"></a><a name="Changing Similarity"></a>
 <h3 class="boxed">Changing Similarity</h3>
 <p>One of the ways of changing the scoring characteristics of Lucene is to change the similarity factors.  For information on
                 how to do this, see the
-                    <a href="api/org/apache/lucene/search/package-summary.html#changingSimilarity">search package javadocs</a>
+                    <a href="api/core/org/apache/lucene/search/package-summary.html#changingSimilarity">search package javadocs</a>
 </p>
 </div>
         
@@ -486,7 +483,7 @@ document.write("Last Published: " + document.lastModified);
 <div class="section">
 <p>At a much deeper level, one can affect scoring by implementing their own Query classes (and related scoring classes.)  To learn more
                 about how to do this, refer to the
-                <a href="api/org/apache/lucene/search/package-summary.html#scoring">search package javadocs</a>
+                <a href="api/core/org/apache/lucene/search/package-summary.html#scoring">search package javadocs</a>
             
 </p>
 </div>
@@ -511,19 +508,19 @@ document.write("Last Published: " + document.lastModified);
 <p>This section is mostly notes on stepping through the Scoring process and serves as
                     fertilizer for the earlier sections.</p>
 <p>In the typical search application, a
-                    <a href="api/org/apache/lucene/search/Query.html">Query</a>
+                    <a href="api/core/org/apache/lucene/search/Query.html">Query</a>
                     is passed to the
-                    <a href="api/org/apache/lucene/search/Searcher.html">Searcher</a>
+                    <a href="api/core/org/apache/lucene/search/Searcher.html">Searcher</a>
                     , beginning the scoring process.
                 </p>
 <p>Once inside the Searcher, a
-                    <a href="api/org/apache/lucene/search/HitCollector.html">HitCollector</a>
+                    <a href="api/core/org/apache/lucene/search/Collector.html">Collector</a>
                     is used for the scoring and sorting of the search results.
                     These important objects are involved in a search:
                     <ol>
                         
 <li>The
-                            <a href="api/org/apache/lucene/search/Weight.html">Weight</a>
+                            <a href="api/core/org/apache/lucene/search/Weight.html">Weight</a>
                             object of the Query. The Weight object is an internal representation of the Query that
                             allows the Query to be reused by the Searcher.
                         </li>
@@ -531,12 +528,12 @@ document.write("Last Published: " + document.lastModified);
 <li>The Searcher that initiated the call.</li>
                         
 <li>A
-                            <a href="api/org/apache/lucene/search/Filter.html">Filter</a>
+                            <a href="api/core/org/apache/lucene/search/Filter.html">Filter</a>
                             for limiting the result set. Note, the Filter may be null.
                         </li>
                         
 <li>A
-                            <a href="api/org/apache/lucene/search/Sort.html">Sort</a>
+                            <a href="api/core/org/apache/lucene/search/Sort.html">Sort</a>
                             object for specifying how to sort the results if the standard score based sort method is not
                             desired.
                         </li>
@@ -546,45 +543,45 @@ document.write("Last Published: " + document.lastModified);
 </p>
 <p> Assuming we are not sorting (since sorting doesn't
                     effect the raw Lucene score),
-                    we call one of the search method of the Searcher, passing in the
-                    <a href="api/org/apache/lucene/search/Weight.html">Weight</a>
+                    we call one of the search methods of the Searcher, passing in the
+                    <a href="api/core/org/apache/lucene/search/Weight.html">Weight</a>
                     object created by Searcher.createWeight(Query),
-                    <a href="api/org/apache/lucene/search/Filter.html">Filter</a>
+                    <a href="api/core/org/apache/lucene/search/Filter.html">Filter</a>
                     and the number of results we want. This method
                     returns a
-                    <a href="api/org/apache/lucene/search/TopDocs.html">TopDocs</a>
+                    <a href="api/core/org/apache/lucene/search/TopDocs.html">TopDocs</a>
                     object, which is an internal collection of search results.
                     The Searcher creates a
-                    <a href="api/org/apache/lucene/search/TopDocCollector.html">TopDocCollector</a>
+                    <a href="api/core/org/apache/lucene/search/TopScoreDocCollector.html">TopScoreDocCollector</a>
                     and passes it along with the Weight, Filter to another expert search method (for more on the
-                    <a href="api/org/apache/lucene/search/HitCollector.html">HitCollector</a>
+                    <a href="api/core/org/apache/lucene/search/Collector.html">Collector</a>
                     mechanism, see
-                    <a href="api/org/apache/lucene/search/Searcher.html">Searcher</a>
+                    <a href="api/core/org/apache/lucene/search/Searcher.html">Searcher</a>
                     .) The TopDocCollector uses a
-                    <a href="api/org/apache/lucene/util/PriorityQueue.html">PriorityQueue</a>
+                    <a href="api/core/org/apache/lucene/util/PriorityQueue.html">PriorityQueue</a>
                     to collect the top results for the search.
                 </p>
 <p>If a Filter is being used, some initial setup is done to determine which docs to include. Otherwise,
                     we ask the Weight for
                     a
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>
+                    <a href="api/core/org/apache/lucene/search/Scorer.html">Scorer</a>
                     for the
-                    <a href="api/org/apache/lucene/index/IndexReader.html">IndexReader</a>
+                    <a href="api/core/org/apache/lucene/index/IndexReader.html">IndexReader</a>
                     of the current searcher and we proceed by
                     calling the score method on the
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>
+                    <a href="api/core/org/apache/lucene/search/Scorer.html">Scorer</a>
                     .
                 </p>
-<p>At last, we are actually going to score some documents. The score method takes in the HitCollector
-                    (most likely the TopDocCollector) and does its business.
+<p>At last, we are actually going to score some documents. The score method takes in the Collector
+                    (most likely the TopScoreDocCollector or TopFieldCollector) and does its business.
                     Of course, here is where things get involved. The
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>
+                    <a href="api/core/org/apache/lucene/search/Scorer.html">Scorer</a>
                     that is returned by the
-                    <a href="api/org/apache/lucene/search/Weight.html">Weight</a>
+                    <a href="api/core/org/apache/lucene/search/Weight.html">Weight</a>
                     object depends on what type of Query was submitted. In most real world applications with multiple
                     query terms,
                     the
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>
+                    <a href="api/core/org/apache/lucene/search/Scorer.html">Scorer</a>
                     is going to be a
                     <a href="http://svn.apache.org/viewvc/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanScorer2.java?view=log">BooleanScorer2</a>
                     (see the section on customizing your scoring for info on changing this.)
diff --git a/docs/scoring.pdf b/docs/scoring.pdf
index 4c202a5..5e1f062 100644
--- a/docs/scoring.pdf
+++ b/docs/scoring.pdf
@@ -134,17 +134,16 @@ begins. (See the Appendix Algorithm section for more notes on the process.) Afte
 infrastructure setup, control finally passes to the Weight implementation and its Scorer
 instance. In the case of any type of BooleanQuery, scoring is handled by the BooleanWeight2
 (link goes to ViewVC BooleanQuery java code which contains the BooleanWeight2 inner
-class), unless the static BooleanQuery#setUseScorer14(boolean) method is set to true, in
-which case the BooleanWeight (link goes to ViewVC BooleanQuery java code, which
-contains the BooleanWeight inner class) from the 1.4 version of Lucene is used by default.
-See CHANGES.txt under release 1.9 RC1 for more information on choosing which Scorer to
-use.
-
-Assuming the use of the BooleanWeight2, a BooleanScorer2 is created by bringing together
-all of the Scorers from the sub-clauses of the BooleanQuery. When the BooleanScorer2 is
-asked to score it delegates its work to an internal Scorer based on the type of clauses in the
-Query. This internal Scorer essentially loops over the sub scorers and sums the scores
-provided by each scorer while factoring in the coord() score.
+class), unless Weight#scoresDocsOutOfOrder() method is set to true, in which case the
+BooleanWeight (link goes to ViewVC BooleanQuery java code, which contains the
+BooleanWeight inner class) from the 1.4 version of Lucene is used by default. See
+CHANGES.txt under release 1.9 RC1 for more information on choosing which Scorer to use.
+
+ry#setUseScorer14(boolean) Assuming the use of the BooleanWeight2, a BooleanScorer2 is
+created by bringing together all of the Scorers from the sub-clauses of the BooleanQuery.
+When the BooleanScorer2 is asked to score it delegates its work to an internal Scorer based
+on the type of clauses in the Query. This internal Scorer essentially loops over the sub scorers
+and sums the scores provided by each scorer while factoring in the coord() score.
 
 2.5. Query Classes
 
@@ -158,13 +157,13 @@ factors. For information on how to do this, see the search package javadocs
 3. Changing your Scoring -- Expert Level
 
 At a much deeper level, one can affect scoring by implementing their own Query classes (and
+related scoring classes.) To learn more about how to do this, refer to the search package
 
                                                                        Page 4
 
 Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Scoring
 
-related scoring classes.) To learn more about how to do this, refer to the search package
 javadocs
 
 4. Appendix
@@ -185,8 +184,8 @@ for the earlier sections.
 In the typical search application, a Query is passed to the Searcher , beginning the scoring
 process.
 
-Once inside the Searcher, a HitCollector is used for the scoring and sorting of the search
-results. These important objects are involved in a search:
+Once inside the Searcher, a Collector is used for the scoring and sorting of the search results.
+These important objects are involved in a search:
 1. The Weight object of the Query. The Weight object is an internal representation of the
 
     Query that allows the Query to be reused by the Searcher.
@@ -197,28 +196,29 @@ results. These important objects are involved in a search:
     method is not desired.
 
 Assuming we are not sorting (since sorting doesn't effect the raw Lucene score), we call one
-of the search method of the Searcher, passing in the Weight object created by
+of the search methods of the Searcher, passing in the Weight object created by
 Searcher.createWeight(Query), Filter and the number of results we want. This method returns
 a TopDocs object, which is an internal collection of search results. The Searcher creates a
-TopDocCollector and passes it along with the Weight, Filter to another expert search method
-(for more on the HitCollector mechanism, see Searcher .) The TopDocCollector uses a
+TopScoreDocCollector and passes it along with the Weight, Filter to another expert search
+method (for more on the Collector mechanism, see Searcher .) The TopDocCollector uses a
 PriorityQueue to collect the top results for the search.
 
 If a Filter is being used, some initial setup is done to determine which docs to include.
 Otherwise, we ask the Weight for a Scorer for the IndexReader of the current searcher and
 we proceed by calling the score method on the Scorer .
 
+At last, we are actually going to score some documents. The score method takes in the
+
 Page 5
 
         Copyright © 2006 The Apache Software Foundation. All rights reserved.
                                                                                                                                Apache Lucene - Scoring
 
-At last, we are actually going to score some documents. The score method takes in the
-HitCollector (most likely the TopDocCollector) and does its business. Of course, here is
-where things get involved. The Scorer that is returned by the Weight object depends on what
-type of Query was submitted. In most real world applications with multiple query terms, the
-Scorer is going to be a BooleanScorer2 (see the section on customizing your scoring for info
-on changing this.)
+Collector (most likely the TopScoreDocCollector or TopFieldCollector) and does its
+business. Of course, here is where things get involved. The Scorer that is returned by the
+Weight object depends on what type of Query was submitted. In most real world applications
+with multiple query terms, the Scorer is going to be a BooleanScorer2 (see the section on
+customizing your scoring for info on changing this.)
 
 Assuming a BooleanScorer2 scorer, we first initialize the Coordinator, which is used to apply
 the coord() factor. We then get a internal Scorer based on the required, optional and
diff --git a/docs/skin/images/rc-b-l-15-1body-2menu-3menu.png b/docs/skin/images/rc-b-l-15-1body-2menu-3menu.png
index dd790d3..cdb460a 100644
Binary files a/docs/skin/images/rc-b-l-15-1body-2menu-3menu.png and b/docs/skin/images/rc-b-l-15-1body-2menu-3menu.png differ
diff --git a/docs/skin/images/rc-b-r-15-1body-2menu-3menu.png b/docs/skin/images/rc-b-r-15-1body-2menu-3menu.png
index 790f43f..3eff254 100644
Binary files a/docs/skin/images/rc-b-r-15-1body-2menu-3menu.png and b/docs/skin/images/rc-b-r-15-1body-2menu-3menu.png differ
diff --git a/docs/skin/images/rc-b-r-5-1header-2tab-selected-3tab-selected.png b/docs/skin/images/rc-b-r-5-1header-2tab-selected-3tab-selected.png
index 1987c0a..b175f27 100644
Binary files a/docs/skin/images/rc-b-r-5-1header-2tab-selected-3tab-selected.png and b/docs/skin/images/rc-b-r-5-1header-2tab-selected-3tab-selected.png differ
diff --git a/docs/skin/images/rc-t-l-5-1header-2searchbox-3searchbox.png b/docs/skin/images/rc-t-l-5-1header-2searchbox-3searchbox.png
index b69812a..e9f4440 100644
Binary files a/docs/skin/images/rc-t-l-5-1header-2searchbox-3searchbox.png and b/docs/skin/images/rc-t-l-5-1header-2searchbox-3searchbox.png differ
diff --git a/docs/skin/images/rc-t-l-5-1header-2tab-selected-3tab-selected.png b/docs/skin/images/rc-t-l-5-1header-2tab-selected-3tab-selected.png
index 07e5ebe..f1e015b 100644
Binary files a/docs/skin/images/rc-t-l-5-1header-2tab-selected-3tab-selected.png and b/docs/skin/images/rc-t-l-5-1header-2tab-selected-3tab-selected.png differ
diff --git a/docs/skin/images/rc-t-l-5-1header-2tab-unselected-3tab-unselected.png b/docs/skin/images/rc-t-l-5-1header-2tab-unselected-3tab-unselected.png
index b69812a..e9f4440 100644
Binary files a/docs/skin/images/rc-t-l-5-1header-2tab-unselected-3tab-unselected.png and b/docs/skin/images/rc-t-l-5-1header-2tab-unselected-3tab-unselected.png differ
diff --git a/docs/skin/images/rc-t-r-15-1body-2menu-3menu.png b/docs/skin/images/rc-t-r-15-1body-2menu-3menu.png
index 5e44a80..29388b5 100644
Binary files a/docs/skin/images/rc-t-r-15-1body-2menu-3menu.png and b/docs/skin/images/rc-t-r-15-1body-2menu-3menu.png differ
diff --git a/docs/skin/images/rc-t-r-5-1header-2searchbox-3searchbox.png b/docs/skin/images/rc-t-r-5-1header-2searchbox-3searchbox.png
index cbaea9c..944ed73 100644
Binary files a/docs/skin/images/rc-t-r-5-1header-2searchbox-3searchbox.png and b/docs/skin/images/rc-t-r-5-1header-2searchbox-3searchbox.png differ
diff --git a/docs/skin/images/rc-t-r-5-1header-2tab-selected-3tab-selected.png b/docs/skin/images/rc-t-r-5-1header-2tab-selected-3tab-selected.png
index 6fe87de..c4d4a8c 100644
Binary files a/docs/skin/images/rc-t-r-5-1header-2tab-selected-3tab-selected.png and b/docs/skin/images/rc-t-r-5-1header-2tab-selected-3tab-selected.png differ
diff --git a/docs/skin/images/rc-t-r-5-1header-2tab-unselected-3tab-unselected.png b/docs/skin/images/rc-t-r-5-1header-2tab-unselected-3tab-unselected.png
index cbaea9c..944ed73 100644
Binary files a/docs/skin/images/rc-t-r-5-1header-2tab-unselected-3tab-unselected.png and b/docs/skin/images/rc-t-r-5-1header-2tab-unselected-3tab-unselected.png differ
diff --git a/src/site/src/documentation/content/xdocs/demo2.xml b/src/site/src/documentation/content/xdocs/demo2.xml
index d74a151..c4634ff 100644
--- a/src/site/src/documentation/content/xdocs/demo2.xml
+++ b/src/site/src/documentation/content/xdocs/demo2.xml
@@ -39,15 +39,15 @@ Bring it up in <code>vi</code> or your editor of choice and let's take a look at
 
 <p>
 As we discussed in the previous walk-through, the <code><a
-href="api/org/apache/lucene/demo/IndexFiles.html">IndexFiles</a></code> class creates a Lucene
+href="api/core/org/apache/lucene/demo/IndexFiles.html">IndexFiles</a></code> class creates a Lucene
 Index. Let's take a look at how it does this.
 </p>
 
 <p>
 The first substantial thing the <code>main</code> function does is instantiate <code><a
-href="api/org/apache/lucene/index/IndexWriter.html">IndexWriter</a></code>.  It passes the string
+href="api/core/org/apache/lucene/index/IndexWriter.html">IndexWriter</a></code>.  It passes the string
 "<code>index</code>" and a new instance of a class called <code><a
-href="api/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a></code>.
+href="api/core/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a></code>.
 The "<code>index</code>" string is the name of the filesystem directory where all index information
 should be stored.  Because we're not passing a full path, this will be created as a subdirectory of
 the current working directory (if it does not already exist). On some platforms, it may be created
@@ -55,45 +55,45 @@ in other directories (such as the user's home directory).
 </p>
 
 <p>
-The <code><a href="api/org/apache/lucene/index/IndexWriter.html">IndexWriter</a></code> is the main
+The <code><a href="api/core/org/apache/lucene/index/IndexWriter.html">IndexWriter</a></code> is the main
 class responsible for creating indices.  To use it you must instantiate it with a path that it can
 write the index into.  If this path does not exist it will first create it.  Otherwise it will
 refresh the index at that path.  You can also create an index using one of the subclasses of <code><a
-href="api/org/apache/lucene/store/Directory.html">Directory</a></code>.  In any case, you must also pass an
+href="api/core/org/apache/lucene/store/Directory.html">Directory</a></code>.  In any case, you must also pass an
 instance of <code><a
-href="api/org/apache/lucene/analysis/Analyzer.html">org.apache.lucene.analysis.Analyzer</a></code>.
+href="api/core/org/apache/lucene/analysis/Analyzer.html">org.apache.lucene.analysis.Analyzer</a></code>.
 </p>
 
 <p>
-The particular <code><a href="api/org/apache/lucene/analysis/Analyzer.html">Analyzer</a></code> we
+The particular <code><a href="api/core/org/apache/lucene/analysis/Analyzer.html">Analyzer</a></code> we
 are using, <code><a
-href="api/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a></code>, is
+href="api/core/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a></code>, is
 little more than a standard Java Tokenizer, converting all strings to lowercase and filtering out
-useless words and characters from the index.  By useless words and characters I mean common language
-words such as articles (a, an, the, etc.) and other strings that would be useless for searching
+stop words and characters from the index.  By stop words and characters I mean common language
+words such as articles (a, an, the, etc.) and other strings that may have less value for searching
 (e.g. <b>'s</b>) .  It should be noted that there are different rules for every language, and you
 should use the proper analyzer for each.  Lucene currently provides Analyzers for a number of
 different languages (see the <code>*Analyzer.java</code> sources under <a
-href="http://svn.apache.org/repos/asf/lucene/java/trunk/contrib/analyzers/src/java/org/apache/lucene/analysis/">contrib/analyzers/src/java/org/apache/lucene/analysis</a>).
+href="http://svn.apache.org/repos/asf/lucene/java/trunk/contrib/analyzers/common/src/java/org/apache/lucene/analysis/">contrib/analyzers/src/java/org/apache/lucene/analysis</a>).
 </p>
 
 <p>
 Looking further down in the file, you should see the <code>indexDocs()</code> code.  This recursive
 function simply crawls the directories and uses <code><a
-href="api/org/apache/lucene/demo/FileDocument.html">FileDocument</a></code> to create <code><a
-href="api/org/apache/lucene/document/Document.html">Document</a></code> objects.  The <code><a
-href="api/org/apache/lucene/document/Document.html">Document</a></code> is simply a data object to
+href="api/core/org/apache/lucene/demo/FileDocument.html">FileDocument</a></code> to create <code><a
+href="api/core/org/apache/lucene/document/Document.html">Document</a></code> objects.  The <code><a
+href="api/core/org/apache/lucene/document/Document.html">Document</a></code> is simply a data object to
 represent the content in the file as well as its creation time and location.  These instances are
 added to the <code>indexWriter</code>.  Take a look inside <code><a
-href="api/org/apache/lucene/demo/FileDocument.html">FileDocument</a></code>.  It's not particularly
+href="api/core/org/apache/lucene/demo/FileDocument.html">FileDocument</a></code>.  It's not particularly
 complicated.  It just adds fields to the <code><a
-href="api/org/apache/lucene/document/Document.html">Document</a></code>.
+href="api/core/org/apache/lucene/document/Document.html">Document</a></code>.
 </p>
 
 <p>
 As you can see there isn't much to creating an index.  The devil is in the details.  You may also
 wish to examine the other samples in this directory, particularly the <code><a
-href="api/org/apache/lucene/demo/IndexHTML.html">IndexHTML</a></code> class.  It is a bit more
+href="api/core/org/apache/lucene/demo/IndexHTML.html">IndexHTML</a></code> class.  It is a bit more
 complex but builds upon this example.
 </p>
 
@@ -102,28 +102,28 @@ complex but builds upon this example.
 <section id="Searching Files"><title>Searching Files</title>
 
 <p>
-The <code><a href="api/org/apache/lucene/demo/SearchFiles.html">SearchFiles</a></code> class is
+The <code><a href="api/core/org/apache/lucene/demo/SearchFiles.html">SearchFiles</a></code> class is
 quite simple.  It primarily collaborates with an <code><a
-href="api/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a></code>, <code><a
-href="api/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a></code>
+href="api/core/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a></code>, <code><a
+href="api/core/org/apache/lucene/analysis/standard/StandardAnalyzer.html">StandardAnalyzer</a></code>
 (which is used in the <code><a
-href="api/org/apache/lucene/demo/IndexFiles.html">IndexFiles</a></code> class as well) and a
-<code><a href="api/org/apache/lucene/queryParser/QueryParser.html">QueryParser</a></code>.  The
+href="api/core/org/apache/lucene/demo/IndexFiles.html">IndexFiles</a></code> class as well) and a
+<code><a href="api/core/org/apache/lucene/queryParser/QueryParser.html">QueryParser</a></code>.  The
 query parser is constructed with an analyzer used to interpret your query text in the same way the
 documents are interpreted: finding the end of words and removing useless words like 'a', 'an' and
-'the'.  The <code><a href="api/org/apache/lucene/search/Query.html">Query</a></code> object contains
+'the'.  The <code><a href="api/core/org/apache/lucene/search/Query.html">Query</a></code> object contains
 the results from the <code><a
-href="api/org/apache/lucene/queryParser/QueryParser.html">QueryParser</a></code> which is passed to
+href="api/core/org/apache/lucene/queryParser/QueryParser.html">QueryParser</a></code> which is passed to
 the searcher.  Note that it's also possible to programmatically construct a rich <code><a
-href="api/org/apache/lucene/search/Query.html">Query</a></code> object without using the query
+href="api/core/org/apache/lucene/search/Query.html">Query</a></code> object without using the query
 parser.  The query parser just enables decoding the <a href="queryparsersyntax.html">Lucene query
 syntax</a> into the corresponding <code><a
-href="api/org/apache/lucene/search/Query.html">Query</a></code> object. Search can be executed in 
+href="api/core/org/apache/lucene/search/Query.html">Query</a></code> object. Search can be executed in 
 two different ways: 
 <ul>
-<li>Streaming: A <code><a href="api/org/apache/lucene/search/HitCollector.html">HitCollector</a></code> subclass
+<li>Streaming: A <code><a href="api/core/org/apache/lucene/search/HitCollector.html">HitCollector</a></code> subclass
 simply prints out the document ID and score for each matching document.</li>
-<li>Paging: Using a <code><a href="api/org/apache/lucene/search/TopDocCollector.html">TopDocCollector</a></code> 
+<li>Paging: Using a <code><a href="api/core/org/apache/lucene/search/TopDocCollector.html">TopDocCollector</a></code> 
 the search results are printed in pages, sorted by score (i. e. relevance).</li>
 </ul>  
 </p>
diff --git a/src/site/src/documentation/content/xdocs/scoring.xml b/src/site/src/documentation/content/xdocs/scoring.xml
index dac9a01..f03c264 100644
--- a/src/site/src/documentation/content/xdocs/scoring.xml
+++ b/src/site/src/documentation/content/xdocs/scoring.xml
@@ -34,10 +34,10 @@
                 <a href="http://wiki.apache.org/lucene-java/InformationRetrieval">Lucene Wiki IR references</a>.
             </p>
             <p>The rest of this document will cover <a href="#Scoring">Scoring</a> basics and how to change your
-                <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a>.  Next it will cover ways you can
+                <a href="api/core/org/apache/lucene/search/Similarity.html">Similarity</a>.  Next it will cover ways you can
                 customize the Lucene internals in <a href="#Changing your Scoring -- Expert Level">Changing your Scoring
                 -- Expert Level</a> which gives details on implementing your own
-                <a href="api/org/apache/lucene/search/Query.html">Query</a> class and related functionality.  Finally, we
+                <a href="api/core/org/apache/lucene/search/Query.html">Query</a> class and related functionality.  Finally, we
                 will finish up with some reference material in the <a href="#Appendix">Appendix</a>.
             </p>
         </section>
@@ -48,20 +48,20 @@
                 and the Lucene
                 <a href="fileformats.html">file formats</a>
                 before continuing on with this section.)  It is also assumed that readers know how to use the
-                <a href="api/org/apache/lucene/search/Searcher.html#explain(Query query, int doc)">Searcher.explain(Query query, int doc)</a> functionality,
+                <a href="api/core/org/apache/lucene/search/Searcher.html#explain(Query query, int doc)">Searcher.explain(Query query, int doc)</a> functionality,
                 which can go a long way in informing why a score is returned.
             </p>
             <section id="Fields and Documents"><title>Fields and Documents</title>
                 <p>In Lucene, the objects we are scoring are
-                    <a href="api/org/apache/lucene/document/Document.html">Documents</a>.  A Document is a collection
+                    <a href="api/core/org/apache/lucene/document/Document.html">Documents</a>.  A Document is a collection
                 of
-                    <a href="api/org/apache/lucene/document/Field.html">Fields</a>.  Each Field has semantics about how
+                    <a href="api/core/org/apache/lucene/document/Field.html">Fields</a>.  Each Field has semantics about how
                 it is created and stored (i.e. tokenized, untokenized, raw data, compressed, etc.)  It is important to
                     note that Lucene scoring works on Fields and then combines the results to return Documents.  This is
                     important because two Documents with the exact same content, but one having the content in two Fields
                     and the other in one Field will return different scores for the same query due to length normalization
                     (assumming the
-                    <a href="api/org/apache/lucene/search/DefaultSimilarity.html">DefaultSimilarity</a>
+                    <a href="api/core/org/apache/lucene/search/DefaultSimilarity.html">DefaultSimilarity</a>
                     on the Fields).
                 </p>
             </section>
@@ -70,17 +70,17 @@
                   <ul>
                     <li><b>Document level boosting</b>
                     - while indexing - by calling
-                    <a href="api/org/apache/lucene/document/Document.html#setBoost(float)">document.setBoost()</a>
+                    <a href="api/core/org/apache/lucene/document/Document.html#setBoost(float)">document.setBoost()</a>
                     before a document is added to the index.
                     </li>
                     <li><b>Document's Field level boosting</b>
                     - while indexing - by calling
-                    <a href="api/org/apache/lucene/document/Fieldable.html#setBoost(float)">field.setBoost()</a>
+                    <a href="api/core/org/apache/lucene/document/Fieldable.html#setBoost(float)">field.setBoost()</a>
                     before adding a field to the document (and before adding the document to the index).
                     </li>
                     <li><b>Query level boosting</b>
                      - during search, by setting a boost on a query clause, calling
-                     <a href="api/org/apache/lucene/search/Query.html#setBoost(float)">Query.setBoost()</a>.
+                     <a href="api/core/org/apache/lucene/search/Query.html#setBoost(float)">Query.setBoost()</a>.
                     </li>
                   </ul>
                 </p>
@@ -99,68 +99,68 @@
                 <p>This composition of 1-byte representation of norms
                 (that is, indexing time multiplication of field boosts &amp; doc boost &amp; field-length-norm)
                 is nicely described in
-                <a href="api/org/apache/lucene/document/Fieldable.html#setBoost(float)">Fieldable.setBoost()</a>.
+                <a href="api/core/org/apache/lucene/document/Fieldable.html#setBoost(float)">Fieldable.setBoost()</a>.
                 </p>
                 <p>Encoding and decoding of the resulted float norm in a single byte are done by the
                 static methods of the class Similarity:
-                <a href="api/org/apache/lucene/search/Similarity.html#encodeNorm(float)">encodeNorm()</a> and
-                <a href="api/org/apache/lucene/search/Similarity.html#decodeNorm(byte)">decodeNorm()</a>.
+                <a href="api/core/org/apache/lucene/search/Similarity.html#encodeNorm(float)">encodeNorm()</a> and
+                <a href="api/core/org/apache/lucene/search/Similarity.html#decodeNorm(byte)">decodeNorm()</a>.
                 Due to loss of precision, it is not guaranteed that decode(encode(x)) = x,
                 e.g. decode(encode(0.89)) = 0.75.
                 At scoring (search) time, this norm is brought into the score of document
                 as <b>norm(t, d)</b>, as shown by the formula in
-                <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a>.
+                <a href="api/core/org/apache/lucene/search/Similarity.html">Similarity</a>.
                 </p>
             </section>
             <section id="Understanding the Scoring Formula"><title>Understanding the Scoring Formula</title>
 
                 <p>
                 This scoring formula is described in the
-                    <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a> class.  Please take the time to study this formula, as it contains much of the information about how the
+                    <a href="api/core/org/apache/lucene/search/Similarity.html">Similarity</a> class.  Please take the time to study this formula, as it contains much of the information about how the
                     basics of Lucene scoring work, especially the
-                    <a href="api/org/apache/lucene/search/TermQuery.html">TermQuery</a>.
+                    <a href="api/core/org/apache/lucene/search/TermQuery.html">TermQuery</a>.
                 </p>
             </section>
             <section id="The Big Picture"><title>The Big Picture</title>
                 <p>OK, so the tf-idf formula and the
-                    <a href="api/org/apache/lucene/search/Similarity.html">Similarity</a>
+                    <a href="api/core/org/apache/lucene/search/Similarity.html">Similarity</a>
                     is great for understanding the basics of Lucene scoring, but what really drives Lucene scoring are
                     the use and interactions between the
-                    <a href="api/org/apache/lucene/search/Query.html">Query</a> classes, as created by each application in
+                    <a href="api/core/org/apache/lucene/search/Query.html">Query</a> classes, as created by each application in
                     response to a user's information need.
                 </p>
-                <p>In this regard, Lucene offers a wide variety of <a href="api/org/apache/lucene/search/Query.html">Query</a> implementations, most of which are in the
-                    <a href="api/org/apache/lucene/search/package-summary.html">org.apache.lucene.search</a> package.
+                <p>In this regard, Lucene offers a wide variety of <a href="api/core/org/apache/lucene/search/Query.html">Query</a> implementations, most of which are in the
+                    <a href="api/core/org/apache/lucene/search/package-summary.html">org.apache.lucene.search</a> package.
                     These implementations can be combined in a wide variety of ways to provide complex querying
                     capabilities along with
                     information about where matches took place in the document collection. The <a href="#Query Classes">Query</a>
                     section below
                     highlights some of the more important Query classes.  For information on the other ones, see the
-                    <a href="api/org/apache/lucene/search/package-summary.html">package summary</a>.  For details on implementing
+                    <a href="api/core/org/apache/lucene/search/package-summary.html">package summary</a>.  For details on implementing
                     your own Query class, see <a href="#Changing your Scoring -- Expert Level">Changing your Scoring --
                     Expert Level</a> below.
                 </p>
                 <p>Once a Query has been created and submitted to the
-                    <a href="api/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a>, the scoring process
+                    <a href="api/core/org/apache/lucene/search/IndexSearcher.html">IndexSearcher</a>, the scoring process
                 begins.  (See the <a
                 href="#Appendix">Appendix</a> Algorithm section for more notes on the process.)  After some infrastructure setup,
-                control finally passes to the <a href="api/org/apache/lucene/search/Weight.html">Weight</a> implementation and its
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a> instance.  In the case of any type of
-                    <a href="api/org/apache/lucene/search/BooleanQuery.html">BooleanQuery</a>, scoring is handled by the
+                control finally passes to the <a href="api/core/org/apache/lucene/search/Weight.html">Weight</a> implementation and its
+                    <a href="api/core/org/apache/lucene/search/Scorer.html">Scorer</a> instance.  In the case of any type of
+                    <a href="api/core/org/apache/lucene/search/BooleanQuery.html">BooleanQuery</a>, scoring is handled by the
                     <a href="http://svn.apache.org/viewvc/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java?view=log">BooleanWeight2</a> (link goes to ViewVC BooleanQuery java code which contains the BooleanWeight2 inner class),
-                    unless the static
-                    <a href="api/org/apache/lucene/search/BooleanQuery.html#setUseScorer14(boolean)">
-                        BooleanQuery#setUseScorer14(boolean)</a> method is set to true,
+                    unless 
+                    <a href="api/core/org/apache/lucene/search/Weight.html#scoresDocsOutOfOrder()">
+                        Weight#scoresDocsOutOfOrder()</a> method is set to true,
                 in which case the
                     <a href="http://svn.apache.org/viewvc/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java?view=log">BooleanWeight</a>
                     (link goes to ViewVC BooleanQuery java code, which contains the BooleanWeight inner class) from the 1.4 version of Lucene is used by default.
                     See <a href="http://svn.apache.org/repos/asf/lucene/java/trunk/CHANGES.txt">CHANGES.txt</a> under release 1.9 RC1 for more information on choosing which Scorer to use.
                 </p>
-                <p>
+                <p>ry#setUseScorer14(boolean)
                     Assuming the use of the BooleanWeight2, a
                     BooleanScorer2 is created by bringing together
                     all of the
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>s from the sub-clauses of the BooleanQuery.
+                    <a href="api/core/org/apache/lucene/search/Scorer.html">Scorer</a>s from the sub-clauses of the BooleanQuery.
                     When the BooleanScorer2 is asked to score it delegates its work to an internal Scorer based on the type
                     of clauses in the Query.  This internal Scorer essentially loops over the sub scorers and sums the scores
                     provided by each scorer while factoring in the coord() score.
@@ -169,20 +169,20 @@
             </section>
             <section id="Query Classes"><title>Query Classes</title>
                 <p>For information on the Query Classes, refer to the
-                    <a href="api/org/apache/lucene/search/package-summary.html#query">search package javadocs</a>
+                    <a href="api/core/org/apache/lucene/search/package-summary.html#query">search package javadocs</a>
                 </p>
             </section>
             <section id="Changing Similarity"><title>Changing Similarity</title>
                 <p>One of the ways of changing the scoring characteristics of Lucene is to change the similarity factors.  For information on
                 how to do this, see the
-                    <a href="api/org/apache/lucene/search/package-summary.html#changingSimilarity">search package javadocs</a></p>
+                    <a href="api/core/org/apache/lucene/search/package-summary.html#changingSimilarity">search package javadocs</a></p>
             </section>
 
         </section>
         <section id="Changing your Scoring -- Expert Level"><title>Changing your Scoring -- Expert Level</title>
             <p>At a much deeper level, one can affect scoring by implementing their own Query classes (and related scoring classes.)  To learn more
                 about how to do this, refer to the
-                <a href="api/org/apache/lucene/search/package-summary.html#scoring">search package javadocs</a>
+                <a href="api/core/org/apache/lucene/search/package-summary.html#scoring">search package javadocs</a>
             </p>
         </section>
 
@@ -200,29 +200,29 @@
                 <p>This section is mostly notes on stepping through the Scoring process and serves as
                     fertilizer for the earlier sections.</p>
                 <p>In the typical search application, a
-                    <a href="api/org/apache/lucene/search/Query.html">Query</a>
+                    <a href="api/core/org/apache/lucene/search/Query.html">Query</a>
                     is passed to the
                     <a
-                            href="api/org/apache/lucene/search/Searcher.html">Searcher</a>
+                            href="api/core/org/apache/lucene/search/Searcher.html">Searcher</a>
                     , beginning the scoring process.
                 </p>
                 <p>Once inside the Searcher, a
-                    <a href="api/org/apache/lucene/search/HitCollector.html">HitCollector</a>
+                    <a href="api/core/org/apache/lucene/search/Collector.html">Collector</a>
                     is used for the scoring and sorting of the search results.
                     These important objects are involved in a search:
                     <ol>
                         <li>The
-                            <a href="api/org/apache/lucene/search/Weight.html">Weight</a>
+                            <a href="api/core/org/apache/lucene/search/Weight.html">Weight</a>
                             object of the Query. The Weight object is an internal representation of the Query that
                             allows the Query to be reused by the Searcher.
                         </li>
                         <li>The Searcher that initiated the call.</li>
                         <li>A
-                            <a href="api/org/apache/lucene/search/Filter.html">Filter</a>
+                            <a href="api/core/org/apache/lucene/search/Filter.html">Filter</a>
                             for limiting the result set. Note, the Filter may be null.
                         </li>
                         <li>A
-                            <a href="api/org/apache/lucene/search/Sort.html">Sort</a>
+                            <a href="api/core/org/apache/lucene/search/Sort.html">Sort</a>
                             object for specifying how to sort the results if the standard score based sort method is not
                             desired.
                         </li>
@@ -230,45 +230,45 @@
                 </p>
                 <p> Assuming we are not sorting (since sorting doesn't
                     effect the raw Lucene score),
-                    we call one of the search method of the Searcher, passing in the
-                    <a href="api/org/apache/lucene/search/Weight.html">Weight</a>
+                    we call one of the search methods of the Searcher, passing in the
+                    <a href="api/core/org/apache/lucene/search/Weight.html">Weight</a>
                     object created by Searcher.createWeight(Query),
-                    <a href="api/org/apache/lucene/search/Filter.html">Filter</a>
+                    <a href="api/core/org/apache/lucene/search/Filter.html">Filter</a>
                     and the number of results we want. This method
                     returns a
-                    <a href="api/org/apache/lucene/search/TopDocs.html">TopDocs</a>
+                    <a href="api/core/org/apache/lucene/search/TopDocs.html">TopDocs</a>
                     object, which is an internal collection of search results.
                     The Searcher creates a
-                    <a href="api/org/apache/lucene/search/TopDocCollector.html">TopDocCollector</a>
+                    <a href="api/core/org/apache/lucene/search/TopScoreDocCollector.html">TopScoreDocCollector</a>
                     and passes it along with the Weight, Filter to another expert search method (for more on the
-                    <a href="api/org/apache/lucene/search/HitCollector.html">HitCollector</a>
+                    <a href="api/core/org/apache/lucene/search/Collector.html">Collector</a>
                     mechanism, see
-                    <a href="api/org/apache/lucene/search/Searcher.html">Searcher</a>
+                    <a href="api/core/org/apache/lucene/search/Searcher.html">Searcher</a>
                     .) The TopDocCollector uses a
-                    <a href="api/org/apache/lucene/util/PriorityQueue.html">PriorityQueue</a>
+                    <a href="api/core/org/apache/lucene/util/PriorityQueue.html">PriorityQueue</a>
                     to collect the top results for the search.
                 </p>
                 <p>If a Filter is being used, some initial setup is done to determine which docs to include. Otherwise,
                     we ask the Weight for
                     a
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>
+                    <a href="api/core/org/apache/lucene/search/Scorer.html">Scorer</a>
                     for the
-                    <a href="api/org/apache/lucene/index/IndexReader.html">IndexReader</a>
+                    <a href="api/core/org/apache/lucene/index/IndexReader.html">IndexReader</a>
                     of the current searcher and we proceed by
                     calling the score method on the
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>
+                    <a href="api/core/org/apache/lucene/search/Scorer.html">Scorer</a>
                     .
                 </p>
-                <p>At last, we are actually going to score some documents. The score method takes in the HitCollector
-                    (most likely the TopDocCollector) and does its business.
+                <p>At last, we are actually going to score some documents. The score method takes in the Collector
+                    (most likely the TopScoreDocCollector or TopFieldCollector) and does its business.
                     Of course, here is where things get involved. The
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>
+                    <a href="api/core/org/apache/lucene/search/Scorer.html">Scorer</a>
                     that is returned by the
-                    <a href="api/org/apache/lucene/search/Weight.html">Weight</a>
+                    <a href="api/core/org/apache/lucene/search/Weight.html">Weight</a>
                     object depends on what type of Query was submitted. In most real world applications with multiple
                     query terms,
                     the
-                    <a href="api/org/apache/lucene/search/Scorer.html">Scorer</a>
+                    <a href="api/core/org/apache/lucene/search/Scorer.html">Scorer</a>
                     is going to be a
                     <a href="http://svn.apache.org/viewvc/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanScorer2.java?view=log">BooleanScorer2</a>
                     (see the section on customizing your scoring for info on changing this.)

