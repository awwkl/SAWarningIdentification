GitDiffStart: 2af3939769bb5580f12549cc93db3e25799aa933 | Thu May 22 11:58:07 2014 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 3c9bd97..8ea632f 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -125,6 +125,9 @@ Bug Fixes
   rollback as well as how SolrIndexWriter manages it's ref counted directory
   instance. (Mark Miller, Gregory Chanan)
 
+* SOLR-6104: The 'addreplica' Collection API does not support 'async' parameter.
+  (shalin)
+
 Other Changes
 ---------------------
 
diff --git a/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java b/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
index a262cbb..8e23120 100644
--- a/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
+++ b/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
@@ -2234,7 +2234,7 @@ public class OverseerCollectionProcessor implements Runnable, ClosableThread {
     String node = message.getStr("node");
     String shard = message.getStr(SHARD_ID_PROP);
     String coreName = message.getStr(CoreAdminParams.NAME);
-
+    String asyncId = message.getStr("async");
 
     DocCollection coll = clusterState.getCollection(collection);
     if (coll == null) {
@@ -2246,9 +2246,9 @@ public class OverseerCollectionProcessor implements Runnable, ClosableThread {
     }
     ShardHandler shardHandler = shardHandlerFactory.getShardHandler();
 
-    if(node== null){
-      node = getNodesForNewShard(clusterState,collection, coll.getSlices().size() , coll.getInt(MAX_SHARDS_PER_NODE, 1),coll.getInt(REPLICATION_FACTOR, 1),null).get(0).nodeName;
-      log.info("node not provided , Identified {} for creating new replica",node);
+    if (node == null) {
+      node = getNodesForNewShard(clusterState, collection, coll.getSlices().size(), coll.getInt(MAX_SHARDS_PER_NODE, 1), coll.getInt(REPLICATION_FACTOR, 1), null).get(0).nodeName;
+      log.info("Node not provided, Identified {} for creating new replica", node);
     }
 
 
@@ -2317,10 +2317,15 @@ public class OverseerCollectionProcessor implements Runnable, ClosableThread {
     }
     addPropertyParams(message, params);
 
+    // For tracking async calls.
+    HashMap<String, String> requestMap = new HashMap<>();
+    setupAsyncRequest(asyncId, requestMap, params, node);
     sendShardRequest(node, params, shardHandler);
 
     collectShardResponses(results, true,
         "ADDREPLICA failed to create replica", shardHandler);
+
+    completeAsyncRequest(asyncId, requestMap, results);
   }
 
   private void processResponses(NamedList results, ShardHandler shardHandler) {
diff --git a/solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler.java b/solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler.java
index dd4d590..3f57aac 100644
--- a/solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler.java
@@ -610,7 +610,7 @@ public class CollectionsHandler extends RequestHandlerBase {
     Map<String,Object> props = new HashMap<>();
     props.put(Overseer.QUEUE_OPERATION, CollectionAction.ADDREPLICA.toString());
     copyIfNotNull(req.getParams(), props, COLLECTION_PROP, "node", SHARD_ID_PROP, ShardParams._ROUTE_,
-        CoreAdminParams.NAME, CoreAdminParams.INSTANCE_DIR, CoreAdminParams.DATA_DIR);
+        CoreAdminParams.NAME, CoreAdminParams.INSTANCE_DIR, CoreAdminParams.DATA_DIR, ASYNC);
     ZkNodeProps m = new ZkNodeProps(props);
     handleResponse(CollectionAction.ADDREPLICA.toString(), m, rsp);
   }
diff --git a/solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest.java b/solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest.java
index 9cb8530..e3590e6 100644
--- a/solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest.java
@@ -80,9 +80,17 @@ public class CollectionsAPIAsyncDistributedZkTest extends AbstractFullDistribZkT
 
     assertEquals("Recreating a collection with the same name didn't fail, should have.", "failed", state);
 
-    CollectionAdminRequest.splitShard("testasynccollectioncreation", "shard1", server, "1003");
-
+    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();
+    addReplica.setCollectionName("testasynccollectioncreation");
+    addReplica.setShardName("shard1");
+    addReplica.setAsyncId("1003");
+    server.request(addReplica);
     state = getRequestStateAfterCompletion("1003", 60, server);
+    assertEquals("Add replica did not complete", "completed", state);
+
+    CollectionAdminRequest.splitShard("testasynccollectioncreation", "shard1", server, "1004");
+
+    state = getRequestStateAfterCompletion("1004", 60, server);
 
     assertEquals("Shard split did not complete. Last recorded state: " + state, "completed", state);
   }

