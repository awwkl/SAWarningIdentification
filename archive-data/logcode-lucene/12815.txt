GitDiffStart: 2ac01fc72e90e93f6198e058eb58d59dfe918a88 | Mon Apr 16 11:16:46 2012 +0000
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.java
index cf65b72..60b6523 100644
--- a/modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.java
+++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.java
@@ -756,29 +756,74 @@ public class TestRandomChains extends BaseTokenStreamTestCase {
     }
   }
   
-  static final class CheckThatYouDidntReadAnythingReaderWrapper extends CharFilter {
-    boolean readSomething = false;
+  // wants charfilter to be a filterreader...
+  // do *NOT*, do *NOT* refactor me to be a charfilter: LUCENE-3990
+  static class CheckThatYouDidntReadAnythingReaderWrapper extends CharStream {
+    boolean readSomething;
+    CharStream in;
     
     CheckThatYouDidntReadAnythingReaderWrapper(Reader in) {
-      super(CharReader.get(in));
+      this.in = CharReader.get(in);
+    }
+    
+    @Override
+    public int correctOffset(int currentOff) {
+      return in.correctOffset(currentOff);
+    }
+
+    @Override
+    public void close() throws IOException {
+      in.close();
     }
 
     @Override
     public int read(char[] cbuf, int off, int len) throws IOException {
       readSomething = true;
-      return input.read(cbuf, off, len);
+      return in.read(cbuf, off, len);
     }
 
     @Override
     public int read() throws IOException {
       readSomething = true;
-      return input.read();
+      return in.read();
+    }
+
+    @Override
+    public int read(CharBuffer target) throws IOException {
+      readSomething = true;
+      return in.read(target);
+    }
+
+    @Override
+    public void mark(int readAheadLimit) throws IOException {
+      in.mark(readAheadLimit);
+    }
+
+    @Override
+    public boolean markSupported() {
+      return in.markSupported();
+    }
+
+    @Override
+    public int read(char[] cbuf) throws IOException {
+      readSomething = true;
+      return in.read(cbuf);
+    }
+
+    @Override
+    public boolean ready() throws IOException {
+      return in.ready();
+    }
+
+    @Override
+    public void reset() throws IOException {
+      in.reset();
     }
 
     @Override
     public long skip(long n) throws IOException {
       readSomething = true;
-      return input.skip(n);
+      return in.skip(n);
     }
   }
   

