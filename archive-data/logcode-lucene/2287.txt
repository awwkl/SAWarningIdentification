GitDiffStart: 78197cb8f56d3a63340d5ab7aac87a95444351dc | Fri Dec 11 19:25:48 2015 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 6b0eafd..2625236 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -306,6 +306,8 @@ Other Changes
 
 * LUCENE-6925: add RandomForceMergePolicy class in test-framework (Christine Poerschke)
 
+* SOLR-8404: tweak SolrQueryResponse.getToLogAsString, add TestSolrQueryResponse.testToLog (Christine Poerschke)
+
 ==================  5.4.0 ==================
 
 Consult the LUCENE_CHANGES.txt file for additional, low level, changes in this release
diff --git a/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java b/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
index 4a56443..9e048a9 100644
--- a/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
@@ -1244,7 +1244,7 @@ public class CoreAdminHandler extends RequestHandlerBase {
     }
 
     public void setRspObject(SolrQueryResponse rspObject) {
-      this.rspInfo = rspObject.getToLogAsString("TaskId: " + this.taskId + " ");
+      this.rspInfo = rspObject.getToLogAsString("TaskId: " + this.taskId);
     }
 
     public void setRspObjectFromException(Exception e) {
diff --git a/solr/core/src/java/org/apache/solr/response/SolrQueryResponse.java b/solr/core/src/java/org/apache/solr/response/SolrQueryResponse.java
index b928c9a..5fc3198 100644
--- a/solr/core/src/java/org/apache/solr/response/SolrQueryResponse.java
+++ b/solr/core/src/java/org/apache/solr/response/SolrQueryResponse.java
@@ -199,12 +199,15 @@ public class SolrQueryResponse {
   public String getToLogAsString(String logid) {
     StringBuilder sb = new StringBuilder(logid);
     for (int i=0; i<toLog.size(); i++) {
+      if (sb.length() > 0) {
+        sb.append(' ');
+      }
       String name = toLog.getName(i);
       Object val = toLog.getVal(i);
       if (name != null) {
         sb.append(name).append('=');
       }
-      sb.append(val).append(' ');
+      sb.append(val);
     }
     return sb.toString();
   }
diff --git a/solr/core/src/java/org/apache/solr/servlet/HttpSolrCall.java b/solr/core/src/java/org/apache/solr/servlet/HttpSolrCall.java
index 9217bd7..25286ec 100644
--- a/solr/core/src/java/org/apache/solr/servlet/HttpSolrCall.java
+++ b/solr/core/src/java/org/apache/solr/servlet/HttpSolrCall.java
@@ -664,7 +664,7 @@ public class HttpSolrCall {
     handler.handleRequest(solrReq, solrResp);
     SolrCore.postDecorateResponse(handler, solrReq, solrResp);
     if (log.isInfoEnabled() && solrResp.getToLog().size() > 0) {
-      log.info(solrResp.getToLogAsString("[admin] "));
+      log.info(solrResp.getToLogAsString("[admin]"));
     }
     QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));
     if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get("standard");
diff --git a/solr/core/src/test/org/apache/solr/response/TestSolrQueryResponse.java b/solr/core/src/test/org/apache/solr/response/TestSolrQueryResponse.java
index 98b3947..c66b02e 100644
--- a/solr/core/src/test/org/apache/solr/response/TestSolrQueryResponse.java
+++ b/solr/core/src/test/org/apache/solr/response/TestSolrQueryResponse.java
@@ -17,18 +17,53 @@ package org.apache.solr.response;
  * limitations under the License.
  */
 
-import org.apache.lucene.util.LuceneTestCase;
-import org.apache.solr.response.SolrQueryResponse;
-import org.junit.Test;
-
 import java.util.Arrays;
 import java.util.Iterator;
+import java.util.Map;
 import java.util.Map.Entry;
 
+import org.apache.lucene.util.LuceneTestCase;
+import org.apache.solr.response.SolrQueryResponse;
+import org.junit.Test;
 
 public class TestSolrQueryResponse extends LuceneTestCase {
   
   @Test
+  public void testToLog() throws Exception {
+    final SolrQueryResponse response = new SolrQueryResponse();
+    assertEquals("toLog initially not empty", 0, response.getToLog().size());
+    assertEquals("logid_only", response.getToLogAsString("logid_only"));
+    // initially empty, then add something
+    response.addToLog("key1", "value1");
+    {
+      final Iterator<Map.Entry<String,Object>> it = response.getToLog().iterator();
+      assertTrue(it.hasNext());
+      final Map.Entry<String,Object> entry1 = it.next();
+      assertEquals("key1", entry1.getKey());
+      assertEquals("value1", entry1.getValue());
+      assertFalse(it.hasNext());
+    }
+    assertEquals("key1=value1", response.getToLogAsString(""));
+    assertEquals("abc123 key1=value1", response.getToLogAsString("abc123"));
+    // and then add something else
+    response.addToLog("key2", "value2");
+    {
+      final Iterator<Map.Entry<String,Object>> it = response.getToLog().iterator();
+      assertTrue(it.hasNext());
+      final Map.Entry<String,Object> entry1 = it.next();
+      assertEquals("key1", entry1.getKey());
+      assertEquals("value1", entry1.getValue());
+      assertTrue(it.hasNext());
+      final Map.Entry<String,Object> entry2 = it.next();
+      assertEquals("key2", entry2.getKey());
+      assertEquals("value2", entry2.getValue());
+      assertFalse(it.hasNext());
+    }
+    assertEquals("key1=value1 key2=value2", response.getToLogAsString(""));
+    assertEquals("xyz789 key1=value1 key2=value2", response.getToLogAsString("xyz789"));
+  }
+
+  @Test
   public void testAddHttpHeader() {
     SolrQueryResponse response = new SolrQueryResponse();
     Iterator<Entry<String, String>> it = response.httpHeaders();

