GitDiffStart: 02cadd8bb0a6f6de6c2eee33db3fa85b983ea0eb | Thu Jun 21 17:53:24 2007 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index d10c20b..4a042c1 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -71,6 +71,10 @@ New Features
     This field type should only be used for sorting or as a value source
     in a FunctionQuery (ryan, hossman, yonik) 
 
+10. SOLR-266: Adding show=schema to LukeRequestHandler to show the parsed
+    schema fields and field types.  (ryan)
+
+
 Changes in runtime behavior
 
 Optimizations
diff --git a/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java b/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
index d861ced..c500d4e 100644
--- a/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
+++ b/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java
@@ -20,6 +20,7 @@ package org.apache.solr.handler.admin;
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Date;
 import java.util.HashMap;
@@ -128,6 +129,9 @@ public class LukeRequestHandler extends RequestHandlerBase
       docinfo.add( "solr", doc );
       rsp.add( "doc", docinfo );
     }
+    else if ( "schema".equals( params.get( "show" ) ) ) {
+      rsp.add( "schema", getSchemaInfo( req.getSchema() ) );
+    }
     else {
       // If no doc is given, show all fields and top terms
       Set<String> fields = null;
@@ -335,6 +339,48 @@ public class LukeRequestHandler extends RequestHandlerBase
     return finfo;
   }
     
+  /**
+   * Return info from the index
+   */
+  private static SimpleOrderedMap<Object> getSchemaInfo( IndexSchema schema ) 
+  { 
+    Map<String, List<String>> typeusemap = new HashMap<String, List<String>>();
+    SimpleOrderedMap<Object> fields = new SimpleOrderedMap<Object>();
+    for( SchemaField f : schema.getFields().values() ) {
+      FieldType ft = f.getType();
+      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();
+      field.add( "type", ft.getTypeName() );
+      field.add( "flags", getFieldFlags(f) );
+      if( f.isRequired() ) {
+        field.add( "required", f.isRequired() );
+      }
+      if( f.getDefaultValue() != null ) {
+        field.add( "default", f.getDefaultValue() );
+      }
+      fields.add( f.getName(), field );
+      
+      List<String> v = typeusemap.get( ft.getTypeName() );
+      if( v == null ) {
+        v = new ArrayList<String>();
+      }
+      v.add( f.getName() );
+      typeusemap.put( ft.getTypeName(), v );
+    }
+
+    SimpleOrderedMap<Object> types = new SimpleOrderedMap<Object>();
+    for( FieldType ft : schema.getFieldTypes().values() ) {
+      SimpleOrderedMap<Object> field = new SimpleOrderedMap<Object>();
+      field.add( "fields", typeusemap.get( ft.getTypeName() ) );
+      field.add( "tokenized", ft.isTokenized() );
+      field.add( "analyzer", ft.getAnalyzer()+"" );
+      types.add( ft.getTypeName(), field );
+    }
+
+    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();
+    finfo.add("fields", fields);
+    finfo.add("types", types);
+    return finfo;
+  }
   
   private static SimpleOrderedMap<Object> getIndexInfo( IndexReader reader, boolean countTerms ) throws IOException
   {
@@ -534,3 +580,4 @@ public class LukeRequestHandler extends RequestHandlerBase
 
 
 
+

