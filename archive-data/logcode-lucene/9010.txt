GitDiffStart: ad9a5b91e0ae3afad7fecefc24b11f77db5e3590 | Wed Mar 27 05:30:26 2013 +0000
diff --git a/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java b/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
index 27532bc..904e01e 100644
--- a/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
+++ b/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java
@@ -381,7 +381,7 @@ public class SolrResourceLoader implements ResourceLoader
    * is loaded using a shortname.
    *
    * @param cname The name or the short name of the class.
-   * @param subpackages the packages to be tried if the cnams starts with solr.
+   * @param subpackages the packages to be tried if the cname starts with solr.
    * @return the loaded class. An exception is thrown if it fails
    */
   public <T> Class<? extends T> findClass(String cname, Class<T> expectedType, String... subpackages) {
diff --git a/solr/core/src/java/org/apache/solr/schema/FieldType.java b/solr/core/src/java/org/apache/solr/schema/FieldType.java
index b90cd3b..c0b8b34 100644
--- a/solr/core/src/java/org/apache/solr/schema/FieldType.java
+++ b/solr/core/src/java/org/apache/solr/schema/FieldType.java
@@ -26,6 +26,8 @@ import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.Tokenizer;
@@ -750,7 +752,7 @@ public abstract class FieldType extends FieldProperties {
   public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {
     SimpleOrderedMap<Object> namedPropertyValues = new SimpleOrderedMap<Object>();
     namedPropertyValues.add(TYPE_NAME, getTypeName());
-    namedPropertyValues.add(CLASS_NAME, normalizeSPIname(getClass().getName()));
+    namedPropertyValues.add(CLASS_NAME, getShortName(getClass().getName()));
     if (showDefaults) {
       Map<String,String> fieldTypeArgs = getNonFieldPropertyArgs();
       if (null != fieldTypeArgs) {
@@ -835,8 +837,7 @@ public abstract class FieldType extends FieldProperties {
    */
   protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {
     SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<Object>();
-    analyzerProps.add(CLASS_NAME, normalizeSPIname(analyzer.getClass().getName()));
-    
+
     if (analyzer instanceof TokenizerChain) {
       Map<String,String> factoryArgs;
       TokenizerChain tokenizerChain = (TokenizerChain)analyzer;
@@ -845,7 +846,7 @@ public abstract class FieldType extends FieldProperties {
         List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<SimpleOrderedMap<Object>>();
         for (CharFilterFactory charFilterFactory : charFilterFactories) {
           SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();
-          props.add(CLASS_NAME, normalizeSPIname(charFilterFactory.getClass().getName()));
+          props.add(CLASS_NAME, getShortName(charFilterFactory.getClass().getName()));
           factoryArgs = charFilterFactory.getOriginalArgs();
           if (null != factoryArgs) {
             for (String key : factoryArgs.keySet()) {
@@ -859,7 +860,7 @@ public abstract class FieldType extends FieldProperties {
 
       SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<Object>();
       TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();
-      tokenizerProps.add(CLASS_NAME, normalizeSPIname(tokenizerFactory.getClass().getName()));
+      tokenizerProps.add(CLASS_NAME, getShortName(tokenizerFactory.getClass().getName()));
       factoryArgs = tokenizerFactory.getOriginalArgs();
       if (null != factoryArgs) {
         for (String key : factoryArgs.keySet()) {
@@ -873,7 +874,7 @@ public abstract class FieldType extends FieldProperties {
         List<SimpleOrderedMap<Object>> filterProps = new ArrayList<SimpleOrderedMap<Object>>();
         for (TokenFilterFactory filterFactory : filterFactories) {
           SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();
-          props.add(CLASS_NAME, normalizeSPIname(filterFactory.getClass().getName()));
+          props.add(CLASS_NAME, getShortName(filterFactory.getClass().getName()));
           factoryArgs = filterFactory.getOriginalArgs();
           if (null != factoryArgs) {
             for (String key : factoryArgs.keySet()) {
@@ -884,14 +885,17 @@ public abstract class FieldType extends FieldProperties {
         }
         analyzerProps.add(FILTERS, filterProps);
       }
+    } else { // analyzer is not instanceof TokenizerChain
+      analyzerProps.add(CLASS_NAME, analyzer.getClass().getName());
     }
     return analyzerProps;
   }
+  
+  private static final Pattern SHORTENABLE_PACKAGE_PATTERN 
+      = Pattern.compile("org\\.apache\\.(?:lucene\\.analysis(?=.).*|solr\\.(?:analysis|schema))\\.([^.]+)$");
 
-  private static String normalizeSPIname(String fullyQualifiedName) {
-    if (fullyQualifiedName.startsWith("org.apache.lucene.") || fullyQualifiedName.startsWith("org.apache.solr.")) {
-      return "solr" + fullyQualifiedName.substring(fullyQualifiedName.lastIndexOf('.'));
-    }
-    return fullyQualifiedName;
+  private static String getShortName(String fullyQualifiedName) {
+    Matcher matcher = SHORTENABLE_PACKAGE_PATTERN.matcher(fullyQualifiedName);
+    return matcher.matches() ? "solr." + matcher.group(1) : fullyQualifiedName;
   }
 }
diff --git a/solr/core/src/java/org/apache/solr/schema/SimilarityFactory.java b/solr/core/src/java/org/apache/solr/schema/SimilarityFactory.java
index 670ff87..33104c5 100644
--- a/solr/core/src/java/org/apache/solr/schema/SimilarityFactory.java
+++ b/solr/core/src/java/org/apache/solr/schema/SimilarityFactory.java
@@ -18,8 +18,6 @@ package org.apache.solr.schema;
 
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.solr.common.util.SimpleOrderedMap;
-import org.apache.solr.schema.SchemaAware; // javadocs
-import org.apache.solr.schema.FieldType; // javadocs
 import org.apache.solr.common.params.SolrParams;
 
 import java.util.Iterator;
@@ -52,13 +50,6 @@ public abstract class SimilarityFactory {
   public abstract Similarity getSimilarity();
 
 
-  private static String normalizeName(String fullyQualifiedName) {
-    if (fullyQualifiedName.startsWith(SOLR_SIMILARITIES_PACKAGE + ".")) {
-      return "solr" + fullyQualifiedName.substring(SOLR_SIMILARITIES_PACKAGE.length());
-    }
-    return fullyQualifiedName;
-  }
-
   /** Returns a serializable description of this similarity(factory) */
   public SimpleOrderedMap<Object> getNamedPropertyValues() {
     String className = getClass().getName();
@@ -66,8 +57,10 @@ public abstract class SimilarityFactory {
       // If this class is just a no-params wrapper around a similarity class, use the similarity class
       className = getSimilarity().getClass().getName();
     } else {
-      // Only normalize factory names
-      className = normalizeName(className);
+      // Only shorten factory names
+      if (className.startsWith(SOLR_SIMILARITIES_PACKAGE + ".")) {
+        className = className.replace(SOLR_SIMILARITIES_PACKAGE, "solr");
+      }
     }
     SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();
     props.add(CLASS_NAME, className);

