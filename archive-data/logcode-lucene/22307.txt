GitDiffStart: 27c4c6a3b1db0a938c0b568319cf8408065d68d0 | Sat Aug 18 23:15:14 2007 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index 131e43b..98f3270 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -76,6 +76,11 @@ Bug fixes
     close any streams they had opened if an exception is hit in the
     constructor.  (Ning Li via Mike McCandless)
 
+12. LUCENE-985: If an extremely long term is in a doc (> 16383 chars),
+    we now throw an IllegalArgumentException saying the term is too
+    long, instead of cryptic ArrayIndexOutOfBoundsException.  (Karl
+    Wettin via Mike McCandless)
+
 New features
 
  1. LUCENE-906: Elision filter for French.
diff --git a/src/java/org/apache/lucene/index/DocumentsWriter.java b/src/java/org/apache/lucene/index/DocumentsWriter.java
index bf00209..acf8a8a 100644
--- a/src/java/org/apache/lucene/index/DocumentsWriter.java
+++ b/src/java/org/apache/lucene/index/DocumentsWriter.java
@@ -1452,8 +1452,11 @@ final class DocumentsWriter {
           p = postingsFreeList[--postingsFreeCount];
 
           final int textLen1 = 1+tokenTextLen;
-          if (textLen1 + charPool.byteUpto > CHAR_BLOCK_SIZE)
+          if (textLen1 + charPool.byteUpto > CHAR_BLOCK_SIZE) {
+            if (textLen1 > CHAR_BLOCK_SIZE)
+              throw new IllegalArgumentException("term length " + tokenTextLen + " exceeds max term length " + (CHAR_BLOCK_SIZE-1));
             charPool.nextBuffer();
+          }
           final char[] text = charPool.buffer;
           final int textUpto = charPool.byteUpto;
           p.textStart = textUpto + charPool.byteOffset;
diff --git a/src/java/org/apache/lucene/index/IndexWriter.java b/src/java/org/apache/lucene/index/IndexWriter.java
index 7cb68fa..60244bb 100644
--- a/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/src/java/org/apache/lucene/index/IndexWriter.java
@@ -1091,6 +1091,10 @@ public class IndexWriter {
    * temporary space usage) then the maximum free disk space
    * required is the same as {@link #optimize}.</p>
    *
+   * <p>Note that each term in the document can be no longer
+   * than 16383 characters, otherwise an
+   * IllegalArgumentException will be thrown.</p>
+   *
    * @throws CorruptIndexException if the index is corrupt
    * @throws IOException if there is a low-level IO error
    */
diff --git a/src/test/org/apache/lucene/index/TestIndexWriter.java b/src/test/org/apache/lucene/index/TestIndexWriter.java
index 2fb599b..39a8f58 100644
--- a/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ b/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -25,6 +25,7 @@ import java.util.Random;
 import junit.framework.TestCase;
 
 import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.index.IndexReader;
@@ -491,6 +492,28 @@ public class TestIndexWriter extends TestCase
     }
 
     /**
+     * Make sure we get a friendly exception for a wicked
+     * long term.
+    */
+    public void testWickedLongTerm() throws IOException {
+      RAMDirectory dir = new RAMDirectory();
+      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true);
+
+      char[] chars = new char[16384];
+      Arrays.fill(chars, 'x');
+      Document doc = new Document();
+      String contents = "a b c " + new String(chars);
+      doc.add(new Field("content", contents, Field.Store.NO, Field.Index.TOKENIZED));
+      try {
+        writer.addDocument(doc);
+        fail("did not hit expected exception");
+      } catch (IllegalArgumentException e) {
+      }
+      writer.close();
+      dir.close();
+    }
+
+    /**
      * Make sure optimize doesn't use any more than 1X
      * starting index size as its temporary free space
      * required.

