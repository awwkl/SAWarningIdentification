GitDiffStart: fc84112ece8e7306083283c7d3b099e97bdbcbfb | Thu May 17 18:03:13 2012 +0000
diff --git a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/ToStringUtil.java b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/ToStringUtil.java
index c83de19..977ab49 100644
--- a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/ToStringUtil.java
+++ b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/ToStringUtil.java
@@ -252,6 +252,8 @@ public class ToStringUtil {
   /**
    * Romanize katakana with modified hepburn
    */
+  // TODO: now that this is used by readingsfilter and not just for
+  // debugging, fix this to really be a scheme that works best with IMEs
   public static void getRomanization(Appendable builder, CharSequence s) throws IOException {
     final int len = s.length();
     for (int i = 0; i < len; i++) {
@@ -522,6 +524,9 @@ public class ToStringUtil {
           if (ch2 == '??') {
             builder.append("t?");
             i++;
+          } else if (ch2 == '??') {
+            builder.append("tu");
+            i++;
           } else {
             builder.append("to");
           }
@@ -665,7 +670,7 @@ public class ToStringUtil {
           builder.append("mu");
           break;
         case '??':
-          builder.append("mi");
+          builder.append("me");
           break;
         case '??':
           if (ch2 == '??') {
@@ -690,7 +695,12 @@ public class ToStringUtil {
           }
           break;
         case '??':
-          builder.append("ra");
+          if (ch2 == '??') {
+            builder.append("la");
+            i++;
+          } else {
+            builder.append("ra");
+          }
           break;
         case '??':
           if (ch2 == '??' && ch3 == '??') {
@@ -711,20 +721,36 @@ public class ToStringUtil {
           } else if (ch2 == '??') {
             builder.append("rye");
             i++;
+          } else if (ch2 == '??') {
+            builder.append("li");
+            i++;
           } else {
             builder.append("ri");
           }
           break;
         case '??':
-          builder.append("ru");
+          if (ch2 == '??') {
+            builder.append("lu");
+            i++;
+          } else {
+            builder.append("ru");
+          }
           break;
         case '??':
-          builder.append("re");
+          if (ch2 == '??') {
+            builder.append("le");
+            i++;
+          } else {
+            builder.append("re");
+          }
           break;
         case '??':
           if (ch2 == '??') {
             builder.append("r?");
             i++;
+          } else if (ch2 == '??') {
+            builder.append("lo");
+            i++;
           } else {
             builder.append("ro");
           }
@@ -887,7 +913,28 @@ public class ToStringUtil {
           builder.append("da");
           break;
         case '??':
-          builder.append("ji");
+          // TODO: investigate all this
+          if (ch2 == '??' && ch3 == '??') {
+            builder.append("j?");
+            i += 2;
+          } else if (ch2 == '??' && ch3 == '??') {
+            builder.append("jÅ«");
+            i += 2;
+          } else if (ch2 == '??') {
+            builder.append("ja");
+            i++;
+          } else if (ch2 == '??') {
+            builder.append("jo");
+            i++;
+          } else if (ch2 == '??') {
+            builder.append("ju");
+            i++;
+          } else if (ch2 == '??') {
+            builder.append("je");
+            i++;
+          } else {
+            builder.append("ji");
+          }
           break;
         case '??':
           builder.append("zu");
@@ -994,6 +1041,18 @@ public class ToStringUtil {
             builder.append("po");
           }
           break;
+        case '??':
+          builder.append("va");
+          break;
+        case '??':
+          builder.append("vi");
+          break;
+        case '??':
+          builder.append("ve");
+          break;
+        case '??':
+          builder.append("vo");
+          break;
         case '??':
           if (ch2 == '??' && ch3 == '??') {
             builder.append("vye");
diff --git a/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/util/TestToStringUtil.java b/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/util/TestToStringUtil.java
index f95a527..a2388d7 100644
--- a/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/util/TestToStringUtil.java
+++ b/lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/util/TestToStringUtil.java
@@ -17,6 +17,9 @@ package org.apache.lucene.analysis.ja.util;
  * limitations under the License.
  */
 
+import java.util.HashMap;
+import java.util.Map;
+
 import org.apache.lucene.util.LuceneTestCase;
 
 public class TestToStringUtil extends LuceneTestCase {
@@ -31,4 +34,79 @@ public class TestToStringUtil extends LuceneTestCase {
     assertEquals("chashu", ToStringUtil.getRomanization("????¼ã??¥ã?"));
     assertEquals("shumai", ToStringUtil.getRomanization("?·ã??¼ã???"));
   }
+  
+  // see http://en.wikipedia.org/wiki/Hepburn_romanization,
+  // but this isnt even thorough or really probably what we want!
+  public void testHepburnTable() {
+    Map<String,String> table = new HashMap<String,String>() {{
+      put("??", "a");   put("??", "i");   put("??", "u");   put("??", "e");   put("??", "o");
+      put("??", "ka");  put("??", "ki");  put("??", "ku");  put("??", "ke");  put("??", "ko");
+      put("??", "sa");  put("??", "shi"); put("??", "su");  put("??", "se");  put("??", "so");
+      put("??", "ta");  put("??", "chi"); put("??", "tsu"); put("??", "te");  put("??", "to");
+      put("??", "na");  put("??", "ni");  put("??", "nu");  put("??", "ne");  put("??", "no");
+      put("??", "ha");  put("??", "hi");  put("??", "fu");  put("??", "he");  put("??", "ho");
+      put("??", "ma");  put("??", "mi");  put("??", "mu");  put("??", "me");  put("??", "mo");
+      put("??", "ya");                  put("??", "yu");                 put("??", "yo");
+      put("??", "ra");  put("??", "ri");  put("??", "ru");  put("??", "re");  put("??", "ro");
+      put("??", "wa");  put("??", "i");                   put("??", "e");   put("??", "o");
+                                                                     put("??", "n");
+      put("??", "ga");  put("??", "gi");  put("??", "gu");  put("??", "ge");  put("??", "go");
+      put("??", "za");  put("??", "ji");  put("??", "zu");  put("??", "ze");  put("??", "zo");
+      put("??", "da");  put("??", "ji");  put("??", "zu");  put("??", "de");  put("??", "do");
+      put("??", "ba");  put("??", "bi");  put("??", "bu");  put("??", "be");  put("??", "bo");
+      put("??", "pa");  put("??", "pi");  put("??", "pu");  put("??", "pe");  put("??", "po");
+      
+                   put("???", "kya");   put("???", "kyu");   put("???", "kyo");
+                   put("?·ã?", "sha");   put("?·ã?", "shu");   put("?·ã?", "sho");
+                   put("???", "cha");   put("???", "chu");   put("???", "cho");
+                   put("???", "nya");   put("???", "nyu");   put("???", "nyo");
+                   put("???", "hya");   put("???", "hyu");   put("???", "hyo");
+                   put("???", "mya");   put("???", "myu");   put("???", "myo");
+                   put("???", "rya");   put("???", "ryu");   put("???", "ryo");
+                   put("???", "gya");   put("???", "gyu");   put("???", "gyo");
+                   put("?¸ã?", "ja");    put("?¸ã?", "ju");    put("?¸ã?", "jo");
+                   put("???", "ja");    put("???", "ju");    put("???", "jo");
+                   put("???", "bya");   put("???", "byu");   put("???", "byo");
+                   put("???", "pya");   put("???", "pyu");   put("???", "pyo");
+      
+                      put("?¤ã?", "yi");                 put("?¤ã?", "ye");
+      put("???", "wa"); put("???", "wi"); put("???", "wu"); put("???", "we"); put("???", "wo");
+                                     put("???", "wyu");
+                                   // TODO: really should be vu
+      put("?´ã?", "va"); put("?´ã?", "vi"); put("??", "v");  put("?´ã?", "ve"); put("?´ã?", "vo");
+      put("?´ã?", "vya");              put("?´ã?", "vyu"); put("?´ã???", "vye"); put("?´ã?", "vyo");
+                                                     put("???", "kye");
+                                                     put("???", "gye");
+      put("???", "kwa"); put("???", "kwi");              put("???", "kwe"); put("???", "kwo");
+      put("???", "kwa");
+      put("?°ã?", "gwa"); put("?°ã?", "gwi");              put("?°ã?", "gwe"); put("?°ã?", "gwo");
+      put("?°ã?", "gwa");
+                                                     put("?·ã?", "she");
+                                                     put("?¸ã?", "je");
+                       put("?¹ã?", "si");
+                       put("?ºã?", "zi");
+                                                     put("???", "che");
+      put("???", "tsa"); put("???", "tsi");              put("???", "tse"); put("???", "tso");
+                                     put("???", "tsyu");
+                      put("???", "ti"); put("???", "tu");
+                                     put("???", "tyu");
+                      put("???", "di"); put("???", "du");
+                                     put("???", "dyu");
+                                                     put("???", "nye");
+                                                     put("???", "hye");
+                                                     put("???", "bye");
+                                                     put("???", "pye");
+      put("???", "fa");  put("???", "fi");               put("???", "fe");  put("???", "fo");
+      put("???", "fya");              put("???", "fyu"); put("?????", "fye"); put("???", "fyo");
+                                    put("???", "hu");
+                                                     put("???", "mye");
+                                                     put("???", "rye");
+      put("?©ã?", "la");  put("???", "li");  put("???", "lu");  put("???", "le");  put("???", "lo");
+      put("??", "va");  put("??", "vi");                  put("??", "ve");  put("??", "vo");
+    }};
+    
+    for (String s : table.keySet()) {
+      assertEquals(s, table.get(s), ToStringUtil.getRomanization(s));
+    }
+  }
 }

