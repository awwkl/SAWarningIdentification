GitDiffStart: ee00e19246fa777e891202422a22316445585210 | Sat May 22 17:34:31 2004 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index 719e21b..4faccbd 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -11,6 +11,13 @@ $Id$
  2. Added new class FieldCache to manage in-memory caches of field term
     values.  (Tim Jones)
 
+ 3. Added overloaded getFieldQuery method to QueryParser which
+    accepts the slop factor specified for the phrase (or the default
+    phrase slop for the QueryParser instance).  This allows overriding
+    methods to replace a PhraseQuery with a SpanNearQuery instead,
+    keeping the proper slop factor. (Erik Hatcher)
+
+
 1.4 RC3
 
  1. Fixed several search bugs introduced by the skipTo() changes in
@@ -265,7 +272,7 @@ $Id$
 
  7. Modified QueryParser to make it possible to programmatically specify the
     default Boolean operator (OR or AND).
-    (P?er Hal?sy via otis)
+    (Pï¿?er Halï¿?sy via otis)
 
  8. Made many search methods and classes non-final, per requests.
     This includes IndexWriter and IndexSearcher, among others.
diff --git a/src/java/org/apache/lucene/queryParser/QueryParser.java b/src/java/org/apache/lucene/queryParser/QueryParser.java
index c66d209..e1eefff 100644
--- a/src/java/org/apache/lucene/queryParser/QueryParser.java
+++ b/src/java/org/apache/lucene/queryParser/QueryParser.java
@@ -262,6 +262,26 @@ public class QueryParser implements QueryParserConstants {
   }
 
   /**
+   * Base implementation delegates to {@link #getFieldQuery(String,Analyzer,String)}.
+   * This method may be overridden, for example, to return
+   * a SpanNearQuery instead of a PhraseQuery.
+   *
+   * @exception ParseException throw in overridden method to disallow
+   */
+  protected Query getFieldQuery(String field,
+                                Analyzer analyzer,
+                                String queryText,
+                                int slop)  throws ParseException {
+    Query query = getFieldQuery(field, analyzer, queryText);
+
+    if (query instanceof PhraseQuery) {
+      ((PhraseQuery) query).setSlop(slop);
+    }
+
+    return query;
+  }
+
+  /**
    * @exception ParseException throw in overridden method to disallow
    */
   protected Query getRangeQuery(String field,
@@ -770,15 +790,17 @@ public class QueryParser implements QueryParserConstants {
         jj_la1[20] = jj_gen;
         ;
       }
-         q = getFieldQuery(field, analyzer,
-                           term.image.substring(1, term.image.length()-1));
-         if (slop != null && q instanceof PhraseQuery) {
+         int s = phraseSlop;
+
+         if (slop != null) {
            try {
-             int s = Float.valueOf(slop.image.substring(1)).intValue();
-             ((PhraseQuery) q).setSlop(s);
+             s = Float.valueOf(slop.image.substring(1)).intValue();
            }
            catch (Exception ignored) { }
          }
+         q = getFieldQuery(field, analyzer,
+                           term.image.substring(1, term.image.length()-1),
+                           s);
       break;
     default:
       jj_la1[21] = jj_gen;
diff --git a/src/java/org/apache/lucene/queryParser/QueryParser.jj b/src/java/org/apache/lucene/queryParser/QueryParser.jj
index 585565f..43fbf98 100644
--- a/src/java/org/apache/lucene/queryParser/QueryParser.jj
+++ b/src/java/org/apache/lucene/queryParser/QueryParser.jj
@@ -285,6 +285,26 @@ public class QueryParser {
   }
 
   /**
+   * Base implementation delegates to {@link #getFieldQuery(String,Analyzer,String)}.
+   * This method may be overridden, for example, to return
+   * a SpanNearQuery instead of a PhraseQuery.
+   *
+   * @exception ParseException throw in overridden method to disallow
+   */
+  protected Query getFieldQuery(String field,
+                                Analyzer analyzer,
+                                String queryText,
+                                int slop)  throws ParseException {
+    Query query = getFieldQuery(field, analyzer, queryText);
+
+    if (query instanceof PhraseQuery) {
+      ((PhraseQuery) query).setSlop(slop);
+    }
+
+    return query;
+  }
+
+  /**
    * @exception ParseException throw in overridden method to disallow
    */
   protected Query getRangeQuery(String field,
@@ -655,15 +675,17 @@ Query Term(String field) : {
        [ slop=<SLOP> ]
        [ <CARAT> boost=<NUMBER> ]
        {
-         q = getFieldQuery(field, analyzer,
-                           term.image.substring(1, term.image.length()-1));
-         if (slop != null && q instanceof PhraseQuery) {
+         int s = phraseSlop;
+
+         if (slop != null) {
            try {
-             int s = Float.valueOf(slop.image.substring(1)).intValue();
-             ((PhraseQuery) q).setSlop(s);
+             s = Float.valueOf(slop.image.substring(1)).intValue();
            }
            catch (Exception ignored) { }
          }
+         q = getFieldQuery(field, analyzer,
+                           term.image.substring(1, term.image.length()-1),
+                           s);
        }
   )
   {

