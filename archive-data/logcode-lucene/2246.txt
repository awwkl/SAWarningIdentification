GitDiffStart: d5ebe9cd85e89401c8cbc920b4527f1141142479 | Fri Dec 18 14:24:59 2015 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalReader.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalReader.java
index 172ffe7..d30077e 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalReader.java
@@ -95,7 +95,11 @@ public class Lucene60DimensionalReader extends DimensionalReader implements Clos
     }
 
     BKDReader reader = readers.get(fieldInfo.number);
-    assert reader != null;
+    if (reader == null) {
+      // Schema ghost corner case!  This field did index dimensional values in the past, but
+      // now all docs having this dimensional field were deleted in this segment:
+      return;
+    }
 
     reader.intersect(visitor);
   }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter.java
index 9fdd2a4..b8bdbde 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter.java
@@ -105,7 +105,10 @@ public class Lucene60DimensionalWriter extends DimensionalWriter implements Clos
           }
         });
 
-      indexFPs.put(fieldInfo.name, writer.finish(dataOut));
+      // We could have 0 points since all docs with dimensional fields may be deleted:
+      if (writer.getPointCount() > 0) {
+        indexFPs.put(fieldInfo.name, writer.finish(dataOut));
+      }
     }
   }
 
@@ -156,7 +159,9 @@ public class Lucene60DimensionalWriter extends DimensionalWriter implements Clos
               }
             }
 
-            indexFPs.put(fieldInfo.name, writer.merge(dataOut, docMaps, bkdReaders, docIDBases));
+            if (writer.getPointCount() > 0) {
+              indexFPs.put(fieldInfo.name, writer.merge(dataOut, docMaps, bkdReaders, docIDBases));
+            }
           }
         } else {
           mergeOneField(mergeState, fieldInfo);
diff --git a/lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.java b/lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.java
index 23035f1..92f2cec 100644
--- a/lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.java
+++ b/lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.java
@@ -55,6 +55,7 @@ public class BKDReader implements Accountable {
 
     // Read index:
     int numLeaves = in.readVInt();
+    assert numLeaves > 0;
     leafNodeOffset = numLeaves;
 
     splitPackedValues = new byte[(1+bytesPerDim)*numLeaves];
diff --git a/lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.java b/lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.java
index 7680996..3ac5507 100644
--- a/lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.java
@@ -216,6 +216,11 @@ public class BKDWriter implements Closeable {
     pointCount++;
   }
 
+  /** How many points have been added so far */
+  public long getPointCount() {
+    return pointCount;
+  }
+
   private static class MergeReader {
     final BKDReader bkd;
     final BKDReader.IntersectState state;
@@ -264,6 +269,7 @@ public class BKDWriter implements Closeable {
           }
           //System.out.println("  new block @ fp=" + state.in.getFilePointer());
           docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);
+          assert docsInBlock > 0;
           docBlockUpto = 0;
           for(int dim=0;dim<bkd.numDims;dim++) {
             int prefix = state.in.readVInt();
@@ -277,6 +283,7 @@ public class BKDWriter implements Closeable {
         }
 
         int oldDocID = state.scratchDocIDs[docBlockUpto++];
+
         int mappedDocID;
         if (docMap == null) {
           mappedDocID = oldDocID;
@@ -726,6 +733,10 @@ public class BKDWriter implements Closeable {
       offlinePointWriter.close();
     }
 
+    if (pointCount == 0) {
+      throw new IllegalStateException("must index at least one point");
+    }
+
     LongBitSet ordBitSet;
     if (numDims > 1) {
       ordBitSet = new LongBitSet(pointCount);
@@ -818,6 +829,7 @@ public class BKDWriter implements Closeable {
     out.writeVInt(maxPointsInLeafNode);
     out.writeVInt(bytesPerDim);
 
+    assert leafBlockFPs.length > 0;
     out.writeVInt(leafBlockFPs.length);
 
     // TODO: for 1D case, don't waste the first byte of each split value (it's always 0)
@@ -834,6 +846,7 @@ public class BKDWriter implements Closeable {
   }
 
   protected void writeLeafBlockDocs(IndexOutput out, int[] docIDs, int start, int count) throws IOException {
+    assert count > 0: "maxPointsInLeafNode=" + maxPointsInLeafNode;
     out.writeVInt(count);
 
     for (int i=0;i<count;i++) {
@@ -1003,6 +1016,7 @@ public class BKDWriter implements Closeable {
       // Write docIDs first, as their own chunk, so that at intersect time we can add all docIDs w/o
       // loading the values:
       int count = Math.toIntExact(source.count);
+      assert count > 0: "nodeID=" + nodeID + " leafNodeOffset=" + leafNodeOffset;
       writeLeafBlockDocs(out, heapSource.docIDs, Math.toIntExact(source.start), count);
 
       // TODO: we should delta compress / only write suffix bytes, like terms dict (the values will all be "close together" since we are at
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery.java b/lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery.java
index d401339..806f15b 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery.java
@@ -39,8 +39,10 @@ import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.NumericDocValuesField;
 import org.apache.lucene.document.SortedNumericDocValuesField;
+import org.apache.lucene.document.StringField;
 import org.apache.lucene.index.DimensionalValues;
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.MultiDocValues;
@@ -975,6 +977,43 @@ public class TestDimensionalRangeQuery extends LuceneTestCase {
     IOUtils.close(r, w, dir);
   }
 
+  public void testAllDimensionalDocsWereDeletedAndThenMergedAgain() throws Exception {
+    Directory dir = getDirectory();
+    IndexWriterConfig iwc = newIndexWriterConfig();
+    iwc.setCodec(getCodec());
+    IndexWriter w = new IndexWriter(dir, iwc);
+    Document doc = new Document();
+    doc.add(new StringField("id", "0", Field.Store.NO));
+    doc.add(new DimensionalLongField("value", 0L));
+    w.addDocument(doc);
+
+    // Add document that won't be deleted to avoid IW dropping
+    // segment below since it's 100% deleted:
+    w.addDocument(new Document());
+    w.commit();
+
+    // Need another segment so we invoke BKDWriter.merge
+    doc = new Document();
+    doc.add(new StringField("id", "0", Field.Store.NO));
+    doc.add(new DimensionalLongField("value", 0L));
+    w.addDocument(doc);
+    w.addDocument(new Document());
+
+    w.deleteDocuments(new Term("id", "0"));
+    w.forceMerge(1);
+
+    doc = new Document();
+    doc.add(new StringField("id", "0", Field.Store.NO));
+    doc.add(new DimensionalLongField("value", 0L));
+    w.addDocument(doc);
+    w.addDocument(new Document());
+
+    w.deleteDocuments(new Term("id", "0"));
+    w.forceMerge(1);
+
+    IOUtils.close(w, dir);
+  }
+
   private static Directory noVirusChecker(Directory dir) {
     if (dir instanceof MockDirectoryWrapper) {
       ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDimensionalFormat.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDimensionalFormat.java
index 2fb1c67..044ca5a 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDimensionalFormat.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDimensionalFormat.java
@@ -24,6 +24,7 @@ import org.apache.lucene.codecs.DimensionalFormat;
 import org.apache.lucene.codecs.DimensionalReader;
 import org.apache.lucene.codecs.DimensionalWriter;
 import org.apache.lucene.index.FieldInfo;
+import org.apache.lucene.index.MergeState;
 import org.apache.lucene.index.SegmentReadState;
 import org.apache.lucene.index.SegmentWriteState;
 import org.apache.lucene.util.Accountable;
@@ -101,10 +102,8 @@ public final class AssertingDimensionalFormat extends DimensionalFormat {
 
   static class AssertingDimensionalWriter extends DimensionalWriter {
     private final DimensionalWriter in;
-    private final SegmentWriteState writeState;
 
     AssertingDimensionalWriter(SegmentWriteState writeState, DimensionalWriter in) {
-      this.writeState = writeState;
       this.in = in;
     }
     
@@ -117,6 +116,11 @@ public final class AssertingDimensionalFormat extends DimensionalFormat {
     }
 
     @Override
+    public void merge(MergeState mergeState) throws IOException {
+      in.merge(mergeState);
+    }
+
+    @Override
     public void close() throws IOException {
       in.close();
       in.close(); // close again

