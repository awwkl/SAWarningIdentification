GitDiffStart: 70b95b599692998bf9a537e1b320f2e7fab8a12a | Fri Mar 16 14:23:44 2012 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java
index 9dc996e..3a9c947 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.java
@@ -475,7 +475,7 @@ public class PulsingPostingsReader extends PostingsReaderBase {
           payloadLength = postings.readVInt();
           //System.out.println("PR     new payload len=" + payloadLength);
         }
-        position += code >> 1;
+        position += code >>> 1;
         payloadRetrieved = false;
       } else {
         position += postings.readVInt();
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java
index 97738f0..1259a91 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java
@@ -705,14 +705,14 @@ public class SepPostingsReader extends PostingsReaderBase {
       }
 
       final int code = posReader.next();
-      assert code >= 0;
+
       if (storePayloads) {
         if ((code & 1) != 0) {
           // Payload length has changed
           payloadLength = posReader.next();
           assert payloadLength >= 0;
         }
-        position += code >> 1;
+        position += code >>> 1;
         pendingPayloadBytes += payloadLength;
         payloadPending = payloadLength > 0;
       } else {
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java b/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
index 6c4fa4c..dcbe904 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
@@ -1524,6 +1524,9 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     Document doc = new Document();
     Token t1 = new Token("foo", 0, 3);
     t1.setPositionIncrement(Integer.MAX_VALUE-500);
+    if (random.nextBoolean()) {
+      t1.setPayload(new Payload(new byte[] { 0x1 } ));
+    }
     TokenStream overflowingTokenStream = new CannedTokenStream(
         new Token[] { t1 }
     );
diff --git a/lucene/test-framework/src/java/org/apache/lucene/analysis/CannedTokenStream.java b/lucene/test-framework/src/java/org/apache/lucene/analysis/CannedTokenStream.java
index 4b5fc0f..4703c23 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/analysis/CannedTokenStream.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/analysis/CannedTokenStream.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
+import org.apache.lucene.analysis.tokenattributes.PayloadAttribute;
 import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 
 /**
@@ -32,6 +33,7 @@ public final class CannedTokenStream extends TokenStream {
   private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
   private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);
   private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
+  private final PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);
   
   public CannedTokenStream(Token[] tokens) {
     this.tokens = tokens;
@@ -48,6 +50,7 @@ public final class CannedTokenStream extends TokenStream {
       termAtt.append(token.toString());
       posIncrAtt.setPositionIncrement(token.getPositionIncrement());
       offsetAtt.setOffset(token.startOffset(), token.endOffset());
+      payloadAtt.setPayload(token.getPayload());
       return true;
     } else {
       return false;
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat.java
index ac776b4..f5d2481 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat.java
@@ -109,7 +109,6 @@ public class MockFixedIntBlockPostingsFormat extends PostingsFormat {
           @Override
           protected void flushBlock() throws IOException {
             for(int i=0;i<buffer.length;i++) {
-              assert buffer[i] >= 0;
               out.writeVInt(buffer[i]);
             }
           }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.java
index c06741c..438d91d 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.java
@@ -117,7 +117,6 @@ public class MockVariableIntBlockPostingsFormat extends PostingsFormat {
           
           @Override
           protected int add(int value) throws IOException {
-            assert value >= 0;
             buffer[pendingCount++] = value;
             // silly variable block length int encoder: if
             // first value <= 3, we write N vints at once;
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/mocksep/MockSingleIntIndexOutput.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/mocksep/MockSingleIntIndexOutput.java
index 3f4c22f..e4ab610 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/mocksep/MockSingleIntIndexOutput.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/mocksep/MockSingleIntIndexOutput.java
@@ -53,7 +53,6 @@ public class MockSingleIntIndexOutput extends IntIndexOutput {
   /** Write an int to the primary file */
   @Override
   public void write(int v) throws IOException {
-    assert v >= 0;
     out.writeVInt(v);
   }
 

