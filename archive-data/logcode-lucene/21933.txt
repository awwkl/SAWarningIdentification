GitDiffStart: fffa39127c0e4d094aab09c91a72dcec9250c0f0 | Wed Jan 9 15:57:58 2008 +0000
diff --git a/example/solr/conf/solrconfig.xml b/example/solr/conf/solrconfig.xml
index ccfac03..b0e7865 100755
--- a/example/solr/conf/solrconfig.xml
+++ b/example/solr/conf/solrconfig.xml
@@ -443,7 +443,7 @@
   
    -->
  
-  <requestHandler name="/search" class="solr.SearchHandler">
+  <requestHandler name="/search" class="org.apache.solr.handler.component.SearchHandler">
     <lst name="defaults">
       <str name="echoParams">explicit</str>
     </lst>
diff --git a/src/java/org/apache/solr/handler/SearchHandler.java b/src/java/org/apache/solr/handler/SearchHandler.java
deleted file mode 100644
index 57cf55c..0000000
--- a/src/java/org/apache/solr/handler/SearchHandler.java
+++ /dev/null
@@ -1,215 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.handler;
-
-import org.apache.lucene.queryParser.ParseException;
-import org.apache.solr.common.SolrException;
-import org.apache.solr.common.params.CommonParams;
-import org.apache.solr.common.util.NamedList;
-import org.apache.solr.common.util.RTimer;
-import org.apache.solr.common.util.SimpleOrderedMap;
-import org.apache.solr.core.SolrCore;
-import org.apache.solr.handler.component.DebugComponent;
-import org.apache.solr.handler.component.FacetComponent;
-import org.apache.solr.handler.component.HighlightComponent;
-import org.apache.solr.handler.component.MoreLikeThisComponent;
-import org.apache.solr.handler.component.QueryComponent;
-import org.apache.solr.handler.component.ResponseBuilder;
-import org.apache.solr.handler.component.SearchComponent;
-import org.apache.solr.request.SolrQueryRequest;
-import org.apache.solr.request.SolrQueryResponse;
-import org.apache.solr.util.plugin.SolrCoreAware;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.logging.Logger;
-
-/**
- *
- * Refer SOLR-281
- *
- * @since solr 1.3
- */
-public class SearchHandler extends RequestHandlerBase implements SolrCoreAware
-{
-  static final String RESPONSE_BUILDER_CONTEXT_KEY = "ResponseBuilder";
-  
-  static final String INIT_COMPONENTS = "components";
-  static final String INIT_FISRT_COMPONENTS = "first-components";
-  static final String INIT_LAST_COMPONENTS = "last-components";
-  
-  protected static Logger log = Logger.getLogger(SearchHandler.class.getName());
-  
-  protected List<SearchComponent> components = null;
-  protected NamedList initArgs = null;
-  
-  @Override
-  public void init(NamedList args) {
-    super.init( args );
-    initArgs = args;
-  }
-
-  protected List<String> getDefaultComponets()
-  {
-    ArrayList<String> names = new ArrayList<String>(5);
-    names.add( QueryComponent.COMPONENT_NAME );
-    names.add( FacetComponent.COMPONENT_NAME );
-    names.add( MoreLikeThisComponent.COMPONENT_NAME );
-    names.add( HighlightComponent.COMPONENT_NAME );
-    names.add( DebugComponent.COMPONENT_NAME );
-    return names;
-  }
-
-  /**
-   * Initialize the components based on name
-   */
-  @SuppressWarnings("unchecked")
-  public void inform(SolrCore core) 
-  {
-    Object declaredComponents = initArgs.get(INIT_COMPONENTS);
-    List<String> first = (List<String>) initArgs.get(INIT_FISRT_COMPONENTS);
-    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);
-
-    List<String> list = null;
-    if( declaredComponents == null ) {
-      // Use the default component list
-      list = getDefaultComponets();
-      
-      if( first != null ) {
-        List<String> clist = first;
-        clist.addAll( list );
-        list = clist;
-      }
-      
-      if( last != null ) {
-        list.addAll( last );
-      }
-    }
-    else {
-      list = (List<String>)declaredComponents;
-      if( first != null || last != null ) {
-        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,
-            "First/Last components only valid if you do not declare 'components'");
-      }
-    }
-    
-    // Build the component list
-    components = new ArrayList<SearchComponent>( list.size() );
-    for(String c : list){
-      SearchComponent comp = core.getSearchComponent( c );
-      components.add(comp);
-      log.info("Adding  component:"+comp);
-    }
-  }
-
-  public List<SearchComponent> getComponents() {
-    return components;
-  }
-  
-  public static ResponseBuilder getResponseBuilder(SolrQueryRequest req) 
-  {
-    return (ResponseBuilder) req.getContext().get( RESPONSE_BUILDER_CONTEXT_KEY );
-  }
-  
-  //---------------------------------------------------------------------------------------
-  // SolrRequestHandler
-  //---------------------------------------------------------------------------------------
-  
-  @Override
-  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, ParseException, InstantiationException, IllegalAccessException 
-  {
-    ResponseBuilder builder = new ResponseBuilder();
-    req.getContext().put( RESPONSE_BUILDER_CONTEXT_KEY, builder );
-    
-    if( components == null ) {
-      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,
-          "SearchHandler not initialized properly.  No components registered." );
-    }
-    
-    // The semantics of debugging vs not debugging are distinct enough 
-    // to justify two control loops
-    if( !req.getParams().getBool( CommonParams.DEBUG_QUERY, false ) ) {
-      // Prepare
-      for( SearchComponent c : components ) {
-        c.prepare( req, rsp );
-      }
-  
-      // Process
-      for( SearchComponent c : components ) {
-        c.process( req, rsp );
-      }
-    }
-    else {
-      builder.setDebug( true );
-      RTimer timer = new RTimer();
-      
-      // Prepare
-      RTimer subt = timer.sub( "prepare" );
-      for( SearchComponent c : components ) {
-        builder.setTimer( subt.sub( c.getName() ) );
-        c.prepare( req, rsp );
-        builder.getTimer().stop();
-      }
-      subt.stop();
-  
-      // Process
-      subt = timer.sub( "process" );
-      for( SearchComponent c : components ) {
-        builder.setTimer( subt.sub( c.getName() ) );
-        c.process( req, rsp );
-        builder.getTimer().stop();
-      }
-      subt.stop();
-      timer.stop();
-      
-      // add the timing info
-      builder.addDebugInfo( "timing", timer.asNamedList() );
-    }
-  }
-
-  //---------------------------------------------------------------------------------------
-  // SolrInfoMBeans
-  //---------------------------------------------------------------------------------------
-  
-  @Override
-  public String getDescription() {
-    StringBuilder sb = new StringBuilder();
-    sb.append("Search using components: ");
-    for(SearchComponent c : components){
-      sb.append(c.getName());
-      sb.append(",");
-    }
-    return sb.toString();
-  }
-
-  @Override
-  public String getVersion() {
-    return "$Revision$";
-  }
-
-  @Override
-  public String getSourceId() {
-    return "$Id$";
-  }
-
-  @Override
-  public String getSource() {
-    return "$URL$";
-  }
-}
diff --git a/src/java/org/apache/solr/handler/StandardRequestHandler.java b/src/java/org/apache/solr/handler/StandardRequestHandler.java
index d9fe082..e19bdcb 100644
--- a/src/java/org/apache/solr/handler/StandardRequestHandler.java
+++ b/src/java/org/apache/solr/handler/StandardRequestHandler.java
@@ -20,6 +20,8 @@ package org.apache.solr.handler;
 import java.net.MalformedURLException;
 import java.net.URL;
 
+import org.apache.solr.handler.component.SearchHandler;
+
 /**
  * @version $Id$
  *
diff --git a/src/java/org/apache/solr/handler/component/DebugComponent.java b/src/java/org/apache/solr/handler/component/DebugComponent.java
index 053f8fc..2762a17 100644
--- a/src/java/org/apache/solr/handler/component/DebugComponent.java
+++ b/src/java/org/apache/solr/handler/component/DebugComponent.java
@@ -26,7 +26,6 @@ import java.util.List;
 
 import org.apache.lucene.search.Query;
 import org.apache.solr.common.util.NamedList;
-import org.apache.solr.handler.SearchHandler;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.request.SolrQueryResponse;
 import org.apache.solr.search.QueryParsing;
diff --git a/src/java/org/apache/solr/handler/component/FacetComponent.java b/src/java/org/apache/solr/handler/component/FacetComponent.java
index 81f5a77..9802b9e 100644
--- a/src/java/org/apache/solr/handler/component/FacetComponent.java
+++ b/src/java/org/apache/solr/handler/component/FacetComponent.java
@@ -22,7 +22,6 @@ import java.net.URL;
 
 import org.apache.solr.common.params.FacetParams;
 import org.apache.solr.common.params.SolrParams;
-import org.apache.solr.handler.SearchHandler;
 import org.apache.solr.request.SimpleFacets;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.request.SolrQueryResponse;
diff --git a/src/java/org/apache/solr/handler/component/HighlightComponent.java b/src/java/org/apache/solr/handler/component/HighlightComponent.java
index d1e500a..d420ac7 100644
--- a/src/java/org/apache/solr/handler/component/HighlightComponent.java
+++ b/src/java/org/apache/solr/handler/component/HighlightComponent.java
@@ -21,7 +21,6 @@ import org.apache.solr.common.SolrException;
 import org.apache.solr.common.params.CommonParams;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.NamedList;
-import org.apache.solr.handler.SearchHandler;
 import org.apache.solr.highlight.SolrHighlighter;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.request.SolrQueryResponse;
diff --git a/src/java/org/apache/solr/handler/component/MoreLikeThisComponent.java b/src/java/org/apache/solr/handler/component/MoreLikeThisComponent.java
index a860b52..467fea1 100644
--- a/src/java/org/apache/solr/handler/component/MoreLikeThisComponent.java
+++ b/src/java/org/apache/solr/handler/component/MoreLikeThisComponent.java
@@ -24,7 +24,6 @@ import org.apache.solr.common.params.MoreLikeThisParams;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.handler.MoreLikeThisHandler;
-import org.apache.solr.handler.SearchHandler;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.request.SolrQueryResponse;
 import org.apache.solr.search.DocList;
diff --git a/src/java/org/apache/solr/handler/component/QueryComponent.java b/src/java/org/apache/solr/handler/component/QueryComponent.java
index 7abb5d9..8759d62 100644
--- a/src/java/org/apache/solr/handler/component/QueryComponent.java
+++ b/src/java/org/apache/solr/handler/component/QueryComponent.java
@@ -21,7 +21,6 @@ import org.apache.lucene.queryParser.ParseException;
 import org.apache.lucene.search.Query;
 import org.apache.solr.common.params.CommonParams;
 import org.apache.solr.common.params.SolrParams;
-import org.apache.solr.handler.SearchHandler;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.request.SolrQueryResponse;
 import org.apache.solr.search.*;
diff --git a/src/java/org/apache/solr/handler/component/SearchHandler.java b/src/java/org/apache/solr/handler/component/SearchHandler.java
new file mode 100644
index 0000000..c9c8aa7
--- /dev/null
+++ b/src/java/org/apache/solr/handler/component/SearchHandler.java
@@ -0,0 +1,208 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.handler.component;
+
+import org.apache.lucene.queryParser.ParseException;
+import org.apache.solr.common.SolrException;
+import org.apache.solr.common.params.CommonParams;
+import org.apache.solr.common.util.NamedList;
+import org.apache.solr.common.util.RTimer;
+import org.apache.solr.core.SolrCore;
+import org.apache.solr.handler.RequestHandlerBase;
+import org.apache.solr.request.SolrQueryRequest;
+import org.apache.solr.request.SolrQueryResponse;
+import org.apache.solr.util.plugin.SolrCoreAware;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.logging.Logger;
+
+/**
+ *
+ * Refer SOLR-281
+ *
+ * @since solr 1.3
+ */
+public class SearchHandler extends RequestHandlerBase implements SolrCoreAware
+{
+  static final String RESPONSE_BUILDER_CONTEXT_KEY = "ResponseBuilder";
+  
+  static final String INIT_COMPONENTS = "components";
+  static final String INIT_FISRT_COMPONENTS = "first-components";
+  static final String INIT_LAST_COMPONENTS = "last-components";
+  
+  protected static Logger log = Logger.getLogger(SearchHandler.class.getName());
+  
+  protected List<SearchComponent> components = null;
+  protected NamedList initArgs = null;
+  
+  @Override
+  public void init(NamedList args) {
+    super.init( args );
+    initArgs = args;
+  }
+
+  protected List<String> getDefaultComponets()
+  {
+    ArrayList<String> names = new ArrayList<String>(5);
+    names.add( QueryComponent.COMPONENT_NAME );
+    names.add( FacetComponent.COMPONENT_NAME );
+    names.add( MoreLikeThisComponent.COMPONENT_NAME );
+    names.add( HighlightComponent.COMPONENT_NAME );
+    names.add( DebugComponent.COMPONENT_NAME );
+    return names;
+  }
+
+  /**
+   * Initialize the components based on name
+   */
+  @SuppressWarnings("unchecked")
+  public void inform(SolrCore core) 
+  {
+    Object declaredComponents = initArgs.get(INIT_COMPONENTS);
+    List<String> first = (List<String>) initArgs.get(INIT_FISRT_COMPONENTS);
+    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);
+
+    List<String> list = null;
+    if( declaredComponents == null ) {
+      // Use the default component list
+      list = getDefaultComponets();
+      
+      if( first != null ) {
+        List<String> clist = first;
+        clist.addAll( list );
+        list = clist;
+      }
+      
+      if( last != null ) {
+        list.addAll( last );
+      }
+    }
+    else {
+      list = (List<String>)declaredComponents;
+      if( first != null || last != null ) {
+        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,
+            "First/Last components only valid if you do not declare 'components'");
+      }
+    }
+    
+    // Build the component list
+    components = new ArrayList<SearchComponent>( list.size() );
+    for(String c : list){
+      SearchComponent comp = core.getSearchComponent( c );
+      components.add(comp);
+      log.info("Adding  component:"+comp);
+    }
+  }
+
+  public List<SearchComponent> getComponents() {
+    return components;
+  }
+  
+  public static ResponseBuilder getResponseBuilder(SolrQueryRequest req) 
+  {
+    return (ResponseBuilder) req.getContext().get( RESPONSE_BUILDER_CONTEXT_KEY );
+  }
+  
+  //---------------------------------------------------------------------------------------
+  // SolrRequestHandler
+  //---------------------------------------------------------------------------------------
+  
+  @Override
+  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, ParseException, InstantiationException, IllegalAccessException 
+  {
+    ResponseBuilder builder = new ResponseBuilder();
+    req.getContext().put( RESPONSE_BUILDER_CONTEXT_KEY, builder );
+    
+    if( components == null ) {
+      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,
+          "SearchHandler not initialized properly.  No components registered." );
+    }
+    
+    // The semantics of debugging vs not debugging are distinct enough 
+    // to justify two control loops
+    if( !req.getParams().getBool( CommonParams.DEBUG_QUERY, false ) ) {
+      // Prepare
+      for( SearchComponent c : components ) {
+        c.prepare( req, rsp );
+      }
+  
+      // Process
+      for( SearchComponent c : components ) {
+        c.process( req, rsp );
+      }
+    }
+    else {
+      builder.setDebug( true );
+      RTimer timer = new RTimer();
+      
+      // Prepare
+      RTimer subt = timer.sub( "prepare" );
+      for( SearchComponent c : components ) {
+        builder.setTimer( subt.sub( c.getName() ) );
+        c.prepare( req, rsp );
+        builder.getTimer().stop();
+      }
+      subt.stop();
+  
+      // Process
+      subt = timer.sub( "process" );
+      for( SearchComponent c : components ) {
+        builder.setTimer( subt.sub( c.getName() ) );
+        c.process( req, rsp );
+        builder.getTimer().stop();
+      }
+      subt.stop();
+      timer.stop();
+      
+      // add the timing info
+      builder.addDebugInfo( "timing", timer.asNamedList() );
+    }
+  }
+
+  //---------------------------------------------------------------------------------------
+  // SolrInfoMBeans
+  //---------------------------------------------------------------------------------------
+  
+  @Override
+  public String getDescription() {
+    StringBuilder sb = new StringBuilder();
+    sb.append("Search using components: ");
+    for(SearchComponent c : components){
+      sb.append(c.getName());
+      sb.append(",");
+    }
+    return sb.toString();
+  }
+
+  @Override
+  public String getVersion() {
+    return "$Revision$";
+  }
+
+  @Override
+  public String getSourceId() {
+    return "$Id$";
+  }
+
+  @Override
+  public String getSource() {
+    return "$URL$";
+  }
+}
diff --git a/src/test/org/apache/solr/handler/SearchHandlerTest.java b/src/test/org/apache/solr/handler/SearchHandlerTest.java
deleted file mode 100644
index 8a3fe07..0000000
--- a/src/test/org/apache/solr/handler/SearchHandlerTest.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.handler;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.apache.solr.common.util.NamedList;
-import org.apache.solr.core.SolrCore;
-import org.apache.solr.handler.component.FacetComponent;
-import org.apache.solr.handler.component.MoreLikeThisComponent;
-import org.apache.solr.handler.component.SearchComponent;
-import org.apache.solr.util.AbstractSolrTestCase;
-
-
-public class SearchHandlerTest extends AbstractSolrTestCase 
-{
-  @Override public String getSchemaFile() { return "schema.xml"; }
-  @Override public String getSolrConfigFile() { return "solrconfig.xml"; }
-  
-  @SuppressWarnings("unchecked")
-  public void testInitalization()
-  {
-    SolrCore core = h.getCore();
-    
-    // Build an explicit list
-    //-----------------------------------------------
-    List<String> names0 = new ArrayList<String>();
-    names0.add( MoreLikeThisComponent.COMPONENT_NAME );
-    
-    NamedList args = new NamedList();
-    args.add( SearchHandler.INIT_COMPONENTS, names0 );
-    SearchHandler handler = new SearchHandler();
-    handler.init( args );
-    handler.inform( core );
-    
-    assertEquals( 1, handler.getComponents().size() );
-    assertEquals( core.getSearchComponent( MoreLikeThisComponent.COMPONENT_NAME ), 
-        handler.getComponents().get( 0 ) );
-    
-
-    // First/Last list
-    //-----------------------------------------------
-    names0 = new ArrayList<String>();
-    names0.add( MoreLikeThisComponent.COMPONENT_NAME );
-    
-    List<String> names1 = new ArrayList<String>();
-    names1.add( FacetComponent.COMPONENT_NAME );
-    
-    args = new NamedList();
-    args.add( SearchHandler.INIT_FISRT_COMPONENTS, names0 );
-    args.add( SearchHandler.INIT_LAST_COMPONENTS, names1 );
-    handler = new SearchHandler();
-    handler.init( args );
-    handler.inform( core );
-    
-    List<SearchComponent> comps = handler.getComponents();
-    assertEquals( 2+handler.getDefaultComponets().size(), comps.size() );
-    assertEquals( core.getSearchComponent( MoreLikeThisComponent.COMPONENT_NAME ), comps.get( 0 ) );
-    assertEquals( core.getSearchComponent( FacetComponent.COMPONENT_NAME ), comps.get( comps.size()-1 ) );
-  }
-}
diff --git a/src/test/org/apache/solr/handler/component/SearchHandlerTest.java b/src/test/org/apache/solr/handler/component/SearchHandlerTest.java
new file mode 100644
index 0000000..ca9ec59
--- /dev/null
+++ b/src/test/org/apache/solr/handler/component/SearchHandlerTest.java
@@ -0,0 +1,78 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.handler.component;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.solr.common.util.NamedList;
+import org.apache.solr.core.SolrCore;
+import org.apache.solr.handler.component.FacetComponent;
+import org.apache.solr.handler.component.MoreLikeThisComponent;
+import org.apache.solr.handler.component.SearchComponent;
+import org.apache.solr.handler.component.SearchHandler;
+import org.apache.solr.util.AbstractSolrTestCase;
+
+
+public class SearchHandlerTest extends AbstractSolrTestCase 
+{
+  @Override public String getSchemaFile() { return "schema.xml"; }
+  @Override public String getSolrConfigFile() { return "solrconfig.xml"; }
+  
+  @SuppressWarnings("unchecked")
+  public void testInitalization()
+  {
+    SolrCore core = h.getCore();
+    
+    // Build an explicit list
+    //-----------------------------------------------
+    List<String> names0 = new ArrayList<String>();
+    names0.add( MoreLikeThisComponent.COMPONENT_NAME );
+    
+    NamedList args = new NamedList();
+    args.add( SearchHandler.INIT_COMPONENTS, names0 );
+    SearchHandler handler = new SearchHandler();
+    handler.init( args );
+    handler.inform( core );
+    
+    assertEquals( 1, handler.getComponents().size() );
+    assertEquals( core.getSearchComponent( MoreLikeThisComponent.COMPONENT_NAME ), 
+        handler.getComponents().get( 0 ) );
+    
+
+    // First/Last list
+    //-----------------------------------------------
+    names0 = new ArrayList<String>();
+    names0.add( MoreLikeThisComponent.COMPONENT_NAME );
+    
+    List<String> names1 = new ArrayList<String>();
+    names1.add( FacetComponent.COMPONENT_NAME );
+    
+    args = new NamedList();
+    args.add( SearchHandler.INIT_FISRT_COMPONENTS, names0 );
+    args.add( SearchHandler.INIT_LAST_COMPONENTS, names1 );
+    handler = new SearchHandler();
+    handler.init( args );
+    handler.inform( core );
+    
+    List<SearchComponent> comps = handler.getComponents();
+    assertEquals( 2+handler.getDefaultComponets().size(), comps.size() );
+    assertEquals( core.getSearchComponent( MoreLikeThisComponent.COMPONENT_NAME ), comps.get( 0 ) );
+    assertEquals( core.getSearchComponent( FacetComponent.COMPONENT_NAME ), comps.get( comps.size()-1 ) );
+  }
+}

