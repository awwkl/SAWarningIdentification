GitDiffStart: 38fa222128ab63ab60d7f878839a03dfa148fa2e | Fri Nov 4 09:35:15 2011 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 247a47c..8d40649 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -194,6 +194,10 @@ Changes in backwards compatibility policy
   to the Bits interface. This method should never do I/O for performance reasons.
   (Mike McCandless, Uwe Schindler, Robert Muir, Chris Male, Yonik Seeley,
   Jason Rutherglen, Paul Elschot)
+
+* LUCENE-3559: The methods "docFreq" and "maxDoc" on IndexSearcher were removed,
+  as these are no longer used by the scoring system. See MIGRATE.txt for more
+  details.  (Robert Muir)
   
 Changes in Runtime Behavior
 
diff --git a/lucene/MIGRATE.txt b/lucene/MIGRATE.txt
index bc6df20..8fd1865 100644
--- a/lucene/MIGRATE.txt
+++ b/lucene/MIGRATE.txt
@@ -395,6 +395,16 @@ LUCENE-1458, LUCENE-2111: Flexible Indexing
 
   The scorePayload method now takes a BytesRef. It is never null.
 
+* LUCENE-3559: The methods "docFreq" and "maxDoc" on IndexSearcher were removed,
+  as these are no longer used by the scoring system.
+
+  If you were using these casually in your code for reasons unrelated to scoring,
+  call them on the IndexSearcher's reader instead: getIndexReader().
+
+  If you were subclassing IndexSearcher and overriding these methods to alter
+  scoring, override IndexSearcher's termStatistics() and collectionStatistics()
+  methods instead.
+
 * LUCENE-3283: Lucene's core o.a.l.queryParser QueryParsers have been consolidated into module/queryparser,
   where other QueryParsers from the codebase will also be placed.  The following classes were moved:
   - o.a.l.queryParser.CharStream -> o.a.l.queryparser.classic.CharStream
diff --git a/lucene/src/java/org/apache/lucene/search/IndexSearcher.java b/lucene/src/java/org/apache/lucene/search/IndexSearcher.java
index 0d579f9..1fe4be9 100644
--- a/lucene/src/java/org/apache/lucene/search/IndexSearcher.java
+++ b/lucene/src/java/org/apache/lucene/search/IndexSearcher.java
@@ -215,36 +215,6 @@ public class IndexSearcher implements Closeable {
     return reader;
   }
 
-  /** Expert: Returns one greater than the largest possible document number.
-   * 
-   * @see org.apache.lucene.index.IndexReader#maxDoc()
-   */
-  public int maxDoc() {
-    return reader.maxDoc();
-  }
-
-  /** Returns total docFreq for this term. */
-  public int docFreq(final Term term) throws IOException {
-    if (executor == null) {
-      return reader.docFreq(term);
-    } else {
-      final ExecutionHelper<Integer> runner = new ExecutionHelper<Integer>(executor);
-      for(int i = 0; i < leafContexts.length; i++) {
-        final IndexReader leaf = leafContexts[i].reader;
-        runner.submit(new Callable<Integer>() {
-            public Integer call() throws IOException {
-              return Integer.valueOf(leaf.docFreq(term));
-            }
-          });
-      }
-      int docFreq = 0;
-      for (Integer num : runner) {
-        docFreq += num.intValue();
-      }
-      return docFreq;
-    }
-  }
-
   /* Sugar for <code>.getIndexReader().document(docID)</code> */
   public Document doc(int docID) throws CorruptIndexException, IOException {
     return reader.document(docID);
diff --git a/lucene/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.java b/lucene/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.java
index 2b10c19..146fecb 100644
--- a/lucene/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.java
+++ b/lucene/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.java
@@ -571,11 +571,11 @@ public abstract class TFIDFSimilarity extends Similarity {
    * idf(docFreq, searcher.maxDoc());
    * </pre>
    * 
-   * Note that {@link IndexSearcher#maxDoc()} is used instead of
+   * Note that {@link CollectionStatistics#maxDoc()} is used instead of
    * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also 
-   * {@link IndexSearcher#docFreq(Term)} is used, and when the latter 
-   * is inaccurate, so is {@link IndexSearcher#maxDoc()}, and in the same direction.
-   * In addition, {@link IndexSearcher#maxDoc()} is more efficient to compute
+   * {@link TermStatistics#docFreq()} is used, and when the latter 
+   * is inaccurate, so is {@link CollectionStatistics#maxDoc()}, and in the same direction.
+   * In addition, {@link CollectionStatistics#maxDoc()} is more efficient to compute
    *   
    * @param collectionStats collection-level statistics
    * @param termStats term-level statistics for the term
diff --git a/lucene/src/test-framework/org/apache/lucene/search/CheckHits.java b/lucene/src/test-framework/org/apache/lucene/search/CheckHits.java
index 81e9421..ce46604 100644
--- a/lucene/src/test-framework/org/apache/lucene/search/CheckHits.java
+++ b/lucene/src/test-framework/org/apache/lucene/search/CheckHits.java
@@ -61,7 +61,7 @@ public class CheckHits {
       ignore.add(Integer.valueOf(results[i]));
     }
     
-    int maxDoc = searcher.maxDoc();
+    int maxDoc = searcher.getIndexReader().maxDoc();
     for (int doc = 0; doc < maxDoc; doc++) {
       if (ignore.contains(Integer.valueOf(doc))) continue;
 
diff --git a/lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.java b/lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.java
index 9d57867..08b096f 100644
--- a/lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.java
+++ b/lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.java
@@ -717,7 +717,7 @@ public class TestDeletionPolicy extends LuceneTestCase {
               expectedCount -= 17;
             }
           }
-          assertEquals("maxDoc=" + searcher.maxDoc() + " numDocs=" + searcher.getIndexReader().numDocs(), expectedCount, hits.length);
+          assertEquals("maxDoc=" + searcher.getIndexReader().maxDoc() + " numDocs=" + searcher.getIndexReader().numDocs(), expectedCount, hits.length);
           searcher.close();
           reader.close();
           if (i == N) {
diff --git a/lucene/src/test/org/apache/lucene/search/TestSearchAfter.java b/lucene/src/test/org/apache/lucene/search/TestSearchAfter.java
index 8a02c8e..19d258b 100644
--- a/lucene/src/test/org/apache/lucene/search/TestSearchAfter.java
+++ b/lucene/src/test/org/apache/lucene/search/TestSearchAfter.java
@@ -73,8 +73,9 @@ public class TestSearchAfter extends LuceneTestCase {
   }
   
   void assertQuery(Query query, Filter filter) throws Exception {
-    TopDocs all = searcher.search(query, filter, searcher.maxDoc());
-    int pageSize = _TestUtil.nextInt(random, 1, searcher.maxDoc()*2);
+    int maxDoc = searcher.getIndexReader().maxDoc();
+    TopDocs all = searcher.search(query, filter, maxDoc);
+    int pageSize = _TestUtil.nextInt(random, 1, maxDoc*2);
     int pageStart = 0;
     ScoreDoc lastBottom = null;
     while (pageStart < all.totalHits) {
diff --git a/lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs.java b/lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs.java
index e4de0ac..f8d9e2d 100644
--- a/lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs.java
+++ b/lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs.java
@@ -134,7 +134,7 @@ public class TestSubScorerFreqs extends LuceneTestCase {
     CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10,
         true));
     s.search(q, null, c);
-    final int maxDocs = s.maxDoc();
+    final int maxDocs = s.getIndexReader().maxDoc();
     assertEquals(maxDocs, c.docCounts.size());
     for (int i = 0; i < maxDocs; i++) {
       Map<Query, Float> doc0 = c.docCounts.get(i);
@@ -171,7 +171,7 @@ public class TestSubScorerFreqs extends LuceneTestCase {
       CountingCollector c = new CountingCollector(TopScoreDocCollector.create(
           10, true), occur);
       s.search(query, null, c);
-      final int maxDocs = s.maxDoc();
+      final int maxDocs = s.getIndexReader().maxDoc();
       assertEquals(maxDocs, c.docCounts.size());
       boolean includeOptional = occur.contains(Occur.SHOULD.toString());
       for (int i = 0; i < maxDocs; i++) {
@@ -201,7 +201,7 @@ public class TestSubScorerFreqs extends LuceneTestCase {
     CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10,
         true));
     s.search(q, null, c);
-    final int maxDocs = s.maxDoc();
+    final int maxDocs = s.getIndexReader().maxDoc();
     assertEquals(maxDocs, c.docCounts.size());
     for (int i = 0; i < maxDocs; i++) {
       Map<Query, Float> doc0 = c.docCounts.get(i);
diff --git a/modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler.java b/modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler.java
index 0583bc0..5fbb06a 100644
--- a/modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler.java
+++ b/modules/facet/src/test/org/apache/lucene/facet/search/TestTopKInEachNodeResultHandler.java
@@ -109,7 +109,7 @@ public class TestTopKInEachNodeResultHandler extends LuceneTestCase {
       // Get all of the documents and run the query, then do different
       // facet counts and compare to control
       Query q = new TermQuery(new Term("content", "alpha"));
-      ScoredDocIdCollector scoredDoc = ScoredDocIdCollector.create(is.maxDoc(), true);
+      ScoredDocIdCollector scoredDoc = ScoredDocIdCollector.create(ir.maxDoc(), true);
 
       // Collector collector = new MultiCollector(scoredDoc);
       is.search(q, scoredDoc);
diff --git a/modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK.java b/modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK.java
index 4367ea9..3554dd9 100644
--- a/modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK.java
+++ b/modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK.java
@@ -61,7 +61,7 @@ public abstract class BaseSampleTestTopK extends BaseTestTopK {
         // Get all of the documents and run the query, then do different
         // facet counts and compare to control
         Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs
-        ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(searcher.maxDoc(), false);
+        ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(indexReader.maxDoc(), false);
         
         FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); 
         FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);
diff --git a/modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java b/modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java
index a16e9db..8a05589 100644
--- a/modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java
+++ b/modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest.java
@@ -106,9 +106,10 @@ public class AllGroupHeadsCollectorTest extends LuceneTestCase {
     doc.add(newField("id", "7", StringField.TYPE_STORED));
     w.addDocument(doc);
 
-    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());
+    IndexReader reader = w.getReader();
+    IndexSearcher indexSearcher = new IndexSearcher(reader);
     w.close();
-    int maxDoc = indexSearcher.maxDoc();
+    int maxDoc = reader.maxDoc();
 
     Sort sortWithinGroup = new Sort(new SortField("id", SortField.Type.INT, true));
     AbstractAllGroupHeadsCollector c1 = createRandomCollector(groupField, sortWithinGroup);
diff --git a/modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java b/modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java
index 8d243ce..275e6f6 100644
--- a/modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java
+++ b/modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.java
@@ -950,7 +950,7 @@ public class TestGrouping extends LuceneTestCase {
               }
               
               if (searchIter == 14) {
-                for(int docIDX=0;docIDX<s.maxDoc();docIDX++) {
+                for(int docIDX=0;docIDX<s.getIndexReader().maxDoc();docIDX++) {
                   System.out.println("ID=" + docIDToID[docIDX] + " explain=" + s.explain(query, docIDX));
                 }
               }
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java
index 6a76f32..f0c03e0 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource.java
@@ -148,7 +148,7 @@ public class DocFreqValueSource extends ValueSource {
   @Override
   public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     IndexSearcher searcher = (IndexSearcher)context.get("searcher");
-    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes));
+    int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));
     return new ConstIntDocValues(docfreq, this);
   }
 
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java
index 259ddaa..850c844 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource.java
@@ -46,8 +46,8 @@ public class IDFValueSource extends DocFreqValueSource {
     if (!(sim instanceof TFIDFSimilarity)) {
       throw new UnsupportedOperationException("requires a TFIDFSimilarity (such as DefaultSimilarity)");
     }
-    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes));
-    float idf = ((TFIDFSimilarity)sim).idf(docfreq, searcher.maxDoc());
+    int docfreq = searcher.getIndexReader().docFreq(new Term(indexedField, indexedBytes));
+    float idf = ((TFIDFSimilarity)sim).idf(docfreq, searcher.getIndexReader().maxDoc());
     return new ConstDoubleDocValues(idf, this);
   }
 }
diff --git a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java
index d0c448b..dd6eb92 100755
--- a/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java
+++ b/modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MaxDocValueSource.java
@@ -42,7 +42,7 @@ public class MaxDocValueSource extends ValueSource {
   @Override
   public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     IndexSearcher searcher = (IndexSearcher)context.get("searcher");
-    return new ConstIntDocValues(searcher.maxDoc(), this);
+    return new ConstIntDocValues(searcher.getIndexReader().maxDoc(), this);
   }
 
   @Override
diff --git a/modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java b/modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
index 253d82e..65e9fbc 100755
--- a/modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
+++ b/modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
@@ -470,7 +470,9 @@ public class SpellChecker implements java.io.Closeable {
     // obtainSearcher calls ensureOpen
     final IndexSearcher indexSearcher = obtainSearcher();
     try{
-      return indexSearcher.docFreq(new Term(F_WORD, word)) > 0;
+      // TODO: we should use ReaderUtil+seekExact, we dont care about the docFreq
+      // this is just an existence check
+      return indexSearcher.getIndexReader().docFreq(new Term(F_WORD, word)) > 0;
     } finally {
       releaseSearcher(indexSearcher);
     }
@@ -494,8 +496,9 @@ public class SpellChecker implements java.io.Closeable {
       IndexSearcher indexSearcher = obtainSearcher();
       final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();
 
-      if (searcher.maxDoc() > 0) {
-        new ReaderUtil.Gather(searcher.getIndexReader()) {
+      final IndexReader reader = searcher.getIndexReader();
+      if (reader.maxDoc() > 0) {
+        new ReaderUtil.Gather(reader) {
           @Override
           protected void add(int base, IndexReader r) throws IOException {
             Terms terms = r.terms(F_WORD);
diff --git a/solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer.java b/solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer.java
index c641239..9473099 100644
--- a/solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer.java
+++ b/solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer.java
@@ -55,7 +55,7 @@ class LuceneQueryOptimizer {
   }
 
   public TopDocs optimize(BooleanQuery original,
-                          IndexSearcher searcher,
+                          SolrIndexSearcher searcher,
                           int numHits,
                           Query[] queryOut,
                           Filter[] filterOut
diff --git a/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java b/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
index 9e92972..8ed63b1 100644
--- a/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
+++ b/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
@@ -191,6 +191,13 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
     return core;
   }
 
+  public final int maxDoc() {
+    return reader.maxDoc();
+  }
+  
+  public final int docFreq(Term term) throws IOException {
+    return reader.docFreq(term);
+  }
 
   /** Register sub-objects such as caches
    */

