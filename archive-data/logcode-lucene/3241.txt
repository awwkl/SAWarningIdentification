GitDiffStart: 81f4c0f1b546024a8d45e133892d0825537f3ba7 | Thu Jun 18 19:37:05 2015 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index e1d9c54..c05de03 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -179,6 +179,9 @@ Changes in Runtime Behavior
 * LUCENE-6569: Optimize MultiFunction.anyExists and allExists to eliminate
   excessive array creation in common 2 argument usage (Jacob Graves, hossman)
 
+* LUCENE-2880: Span queries now score more consistently with regular queries.
+  (Robert Muir, Adrien Grand)
+
 
 Build
 
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/ContainSpans.java b/lucene/core/src/java/org/apache/lucene/search/spans/ContainSpans.java
index 45b0af7..2c4d6f6 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/ContainSpans.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/ContainSpans.java
@@ -48,6 +48,11 @@ abstract class ContainSpans extends ConjunctionSpans {
   }
 
   @Override
+  public int width() {
+    return sourceSpans.width();
+  }
+
+  @Override
   public void collect(SpanCollector collector) throws IOException {
     sourceSpans.collect(collector);
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans.java b/lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans.java
index 168f350..92f3963 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans.java
@@ -111,6 +111,11 @@ public abstract class FilterSpans extends Spans {
   }
 
   @Override
+  public int width() {
+    return in.width();
+  }
+
+  @Override
   public void collect(SpanCollector collector) throws IOException {
     in.collect(collector);
   }
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java b/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java
index 6c992d2..f5f3019 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java
@@ -129,6 +129,11 @@ public class NearSpansOrdered extends NearSpans {
   }
 
   @Override
+  public int width() {
+    return matchWidth;
+  }
+
+  @Override
   public void collect(SpanCollector collector) throws IOException {
     for (Spans span : subSpans) {
       span.collect(collector);
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java b/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
index 4ea2ed4..6b654c1 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
@@ -115,6 +115,11 @@ public class NearSpansUnordered extends NearSpans {
     }
 
     @Override
+    public int width() {
+      return in.width();
+    }
+
+    @Override
     public void collect(SpanCollector collector) throws IOException {
       in.collect(collector);
     }
@@ -242,6 +247,11 @@ public class NearSpansUnordered extends NearSpans {
   }
 
   @Override
+  public int width() {
+    return maxEndPositionCell.startPosition() - minPositionCell().startPosition();
+  }
+
+  @Override
   public void collect(SpanCollector collector) throws IOException {
     for (SpansCell cell : subSpanCells) {
       cell.collect(collector);
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
index d270715..6dd8eb8 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
@@ -329,6 +329,11 @@ public class SpanOrQuery extends SpanQuery implements Cloneable {
         }
 
         @Override
+        public int width() {
+          return topPositionSpans.width();
+        }
+
+        @Override
         public void collect(SpanCollector collector) throws IOException {
           if (topPositionSpans != null)
             topPositionSpans.collect(collector);
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java
index 1669dc9..cd344fe 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer.java
@@ -99,8 +99,7 @@ public class SpanScorer extends Scorer {
         freq = 1;
         return;
       }
-      int matchLength = endPos - startPos;
-      freq += docScorer.computeSlopFactor(matchLength);
+      freq += docScorer.computeSlopFactor(spans.width());
       prevStartPos = startPos;
       prevEndPos = endPos;
       startPos = spans.nextStartPosition();
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/Spans.java b/lucene/core/src/java/org/apache/lucene/search/spans/Spans.java
index 17c973d..0c38365 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/Spans.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/Spans.java
@@ -19,6 +19,7 @@ package org.apache.lucene.search.spans;
 
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.search.TwoPhaseIterator;
+import org.apache.lucene.search.similarities.Similarity.SimScorer;
 
 import java.io.IOException;
 
@@ -50,6 +51,15 @@ public abstract class Spans extends DocIdSetIterator {
   public abstract int endPosition();
 
   /**
+   * Return the width of the match, which is typically used to compute
+   * the {@link SimScorer#computeSlopFactor(int) slop factor}. It is only legal
+   * to call this method when the iterator is on a valid doc ID and positioned.
+   * The return value must be positive, and lower values means that the match is
+   * better.
+   */
+  public abstract int width();
+
+  /**
    * Collect postings data from the leaves of the current Spans.
    *
    * This method should only be called after {@link #nextStartPosition()}, and before
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/TermSpans.java b/lucene/core/src/java/org/apache/lucene/search/spans/TermSpans.java
index b0db63e..0a008c9 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/TermSpans.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/TermSpans.java
@@ -102,6 +102,11 @@ public class TermSpans extends Spans {
   }
 
   @Override
+  public int width() {
+    return 0;
+  }
+
+  @Override
   public long cost() {
     return postings.cost();
   }
diff --git a/lucene/core/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java b/lucene/core/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java
index b07801f..d9b104e 100644
--- a/lucene/core/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java
+++ b/lucene/core/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java
@@ -61,6 +61,11 @@ final class JustCompileSearchSpans {
     }
 
     @Override
+    public int width() {
+      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
+    }
+
+    @Override
     public void collect(SpanCollector collector) throws IOException {
 
     }
@@ -123,6 +128,11 @@ final class JustCompileSearchSpans {
     }
 
     @Override
+    public int width() {
+      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
+    }
+
+    @Override
     public void collect(SpanCollector collector) throws IOException {
 
     }
diff --git a/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence.java b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence.java
index d6fb859..a171ec4 100644
--- a/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence.java
+++ b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence.java
@@ -39,7 +39,7 @@ public class TestSpanSearchEquivalence extends SearchEquivalenceTestBase {
   /** SpanTermQuery(A) = TermQuery(A) */
   public void testSpanTermVersusTerm() throws Exception {
     Term t1 = randomTerm();
-    assertSameSet(new TermQuery(t1), spanQuery(new SpanTermQuery(t1)));
+    assertSameScores(new TermQuery(t1), spanQuery(new SpanTermQuery(t1)));
   }
   
   /** SpanOrQuery(A) = SpanTermQuery(A) */
@@ -154,7 +154,7 @@ public class TestSpanSearchEquivalence extends SearchEquivalenceTestBase {
                            };
     SpanQuery q1 = spanQuery(new SpanNearQuery(subquery, 0, true));
     PhraseQuery q2 = new PhraseQuery(t1.field(), t1.bytes(), t2.bytes());
-    assertSameSet(q1, q2);
+    assertSameScores(q1, q2);
   }
   
   /** SpanNearQuery([A, B], ??, false) = +A +B */
diff --git a/lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java
index e2bc974..fb2de60 100644
--- a/lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java
+++ b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced.java
@@ -99,7 +99,7 @@ public class TestSpansAdvanced extends LuceneTestCase {
    */
   public void testBooleanQueryWithSpanQueries() throws IOException {
     
-    doTestBooleanQueryWithSpanQueries(searcher, 0.3884282f);
+    doTestBooleanQueryWithSpanQueries(searcher, 0.54932045f);
   }
   
   /**
diff --git a/lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java
index e8dc46d..9b43692 100644
--- a/lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java
+++ b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2.java
@@ -86,8 +86,8 @@ public class TestSpansAdvanced2 extends TestSpansAdvanced {
     final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, "should"));
     final String[] expectedIds = new String[] {"B", "D", "1", "2", "3", "4",
         "A"};
-    final float[] expectedScores = new float[] {0.625f, 0.45927936f,
-        0.35355338f, 0.35355338f, 0.35355338f, 0.35355338f, 0.26516503f,};
+    final float[] expectedScores = new float[] {0.8838834f, 0.64951903f,
+        0.5f, 0.5f, 0.5f, 0.5f, 0.375f,};
     assertHits(searcher2, spanQuery, "single span query", expectedIds,
         expectedScores);
   }
@@ -105,7 +105,7 @@ public class TestSpansAdvanced2 extends TestSpansAdvanced {
     final String[] expectedIds = new String[] {"D", "A"};
     // these values were pre LUCENE-413
     // final float[] expectedScores = new float[] { 0.93163157f, 0.20698164f };
-    final float[] expectedScores = new float[] {1.0191123f, 0.93163157f};
+    final float[] expectedScores = new float[] {1.44124233f, 1.31752586f};
     assertHits(searcher2, query.build(), "multiple different span queries",
         expectedIds, expectedScores);
   }
@@ -116,6 +116,6 @@ public class TestSpansAdvanced2 extends TestSpansAdvanced {
   @Override
   public void testBooleanQueryWithSpanQueries() throws IOException {
     
-    doTestBooleanQueryWithSpanQueries(searcher2, 0.73500174f);
+    doTestBooleanQueryWithSpanQueries(searcher2, 1.0394494f);
   }
 }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpans.java b/lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpans.java
index 6958f1b..4b9ff90 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpans.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpans.java
@@ -125,6 +125,14 @@ class AssertingSpans extends Spans {
   }
 
   @Override
+  public int width() {
+    assert state == State.ITERATING;
+    final int distance = in.width();
+    assert distance >= 0;
+    return distance;
+  }
+
+  @Override
   public void collect(SpanCollector collector) throws IOException {
     assert state == State.ITERATING : "collect() called in illegal state: " + state + ": " + in;
     in.collect(collector);

