GitDiffStart: e9f32e7a72dd62d75c876ad4b6513f6491f1042b | Tue May 15 21:47:27 2012 +0000
diff --git a/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestBeforeAfterOverrides.java b/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestBeforeAfterOverrides.java
index 611e68c..5b58dd7 100644
--- a/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestBeforeAfterOverrides.java
+++ b/lucene/core/src/test/org/apache/lucene/util/junitcompat/TestBeforeAfterOverrides.java
@@ -32,6 +32,8 @@ public class TestBeforeAfterOverrides extends WithNestedTests {
   public static class Before1 extends WithNestedTests.AbstractNestedTest {
     @Before
     public void before() {}
+    
+    public void testEmpty() {}
   }
   public static class Before2 extends Before1 {}
   public static class Before3 extends Before2 {
@@ -42,6 +44,8 @@ public class TestBeforeAfterOverrides extends WithNestedTests {
   public static class After1 extends WithNestedTests.AbstractNestedTest {
     @After
     public void after() {}
+    
+    public void testEmpty() {}
   }
   public static class After2 extends Before1 {}
   public static class After3 extends Before2 {
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java b/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
index 852fd58..943bd68 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java
@@ -106,11 +106,6 @@ import com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule;
   LuceneJUnit3MethodProvider.class,
   JUnit4MethodProvider.class
 })
-@Validators({
-  ValidateAssertionsRequired.class,
-  ValidateNoStaticHooksShadowing.class,
-  ValidateNoInstanceHooksOverrides.class
-})
 @Listeners({
   RunListenerPrintReproduceInfo.class
 })
@@ -297,6 +292,9 @@ public abstract class LuceneTestCase extends Assert {
   @ClassRule
   public static TestRule classRules = RuleChain
     .outerRule(suiteFailureMarker = new TestRuleMarkFailure())
+    .around(new TestRuleAssertionsRequired())
+    .around(new TestRuleNoStaticHooksShadowing())
+    .around(new TestRuleNoInstanceHooksOverrides())
     .around(new SystemPropertiesInvariantRule(IGNORED_INVARIANT_PROPERTIES))
     .around(new TestRuleIcuHack())
     .around(classNameRule = new TestRuleStoreClassName())
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired.java b/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired.java
new file mode 100644
index 0000000..b263631
--- /dev/null
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleAssertionsRequired.java
@@ -0,0 +1,50 @@
+package org.apache.lucene.util;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.junit.rules.TestRule;
+import org.junit.runner.Description;
+import org.junit.runners.model.Statement;
+
+import com.carrotsearch.randomizedtesting.ClassValidator;
+
+/**
+ * Require assertions for Lucene/Solr packages.
+ */
+public class TestRuleAssertionsRequired implements TestRule, ClassValidator {
+  @Override
+  public Statement apply(final Statement base, final Description description) {
+    return new Statement() {
+      @Override
+      public void evaluate() throws Throwable {
+        validate(description.getTestClass());
+        base.evaluate();
+      }
+    };
+  }
+
+  @Override
+  public void validate(Class<?> clazz) throws Throwable {
+    try {
+      assert false;
+      throw new Exception("Test class requires assertions, enable assertions globally (-ea) or for Solr/Lucene subpackages only.");
+    } catch (AssertionError e) {
+      // Ok, enabled.
+    }    
+  }
+}
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleNoInstanceHooksOverrides.java b/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleNoInstanceHooksOverrides.java
new file mode 100644
index 0000000..9304ca4
--- /dev/null
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleNoInstanceHooksOverrides.java
@@ -0,0 +1,106 @@
+package org.apache.lucene.util;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import static com.carrotsearch.randomizedtesting.MethodCollector.allDeclaredMethods;
+import static com.carrotsearch.randomizedtesting.MethodCollector.annotatedWith;
+import static com.carrotsearch.randomizedtesting.MethodCollector.flatten;
+import static com.carrotsearch.randomizedtesting.MethodCollector.removeOverrides;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.rules.TestRule;
+import org.junit.runner.Description;
+import org.junit.runners.model.Statement;
+
+import com.carrotsearch.randomizedtesting.ClassValidator;
+
+/**
+ * Don't allow {@link Before} and {@link After} hook overrides as it is most
+ * likely a user error and will result in superclass methods not being called
+ * (requires manual chaining). 
+ */
+public class TestRuleNoInstanceHooksOverrides implements TestRule, ClassValidator {
+  @Override
+  public Statement apply(final Statement base, final Description description) {
+    return new Statement() {
+      @Override
+      public void evaluate() throws Throwable {
+        validate(description.getTestClass());
+        base.evaluate();
+      }
+    };
+  }
+
+  @Override
+  public void validate(Class<?> clazz) throws Throwable {
+    List<List<Method>> all = allDeclaredMethods(clazz);
+
+    checkNoShadows(clazz, all, Before.class);
+    checkNoShadows(clazz, all, After.class);
+  }
+
+  private void checkNoShadows(Class<?> clazz, List<List<Method>> all, Class<? extends Annotation> ann) {
+    List<List<Method>> methodHierarchy = filterIgnored(annotatedWith(all, ann));
+    List<List<Method>> noOverrides = removeOverrides(methodHierarchy);
+    if (!noOverrides.equals(methodHierarchy)) {
+      Set<Method> shadowed = new HashSet<Method>(flatten(methodHierarchy));
+      shadowed.removeAll(flatten(noOverrides));
+
+      StringBuilder b = new StringBuilder();
+      for (Method m : shadowed) {
+        String sig = signature(m);
+        for (Method other : flatten(methodHierarchy)) {
+          if (other != m && sig.equals(signature(other))) {
+            b.append("Method: " + m.toString()
+                + "#" + sig + " possibly overriden by " + 
+                other.toString() + "#" + signature(other) + "\n");
+          }
+        }
+      }
+
+      throw new RuntimeException("There are overridden methods annotated with "
+          + ann.getName() + ". These methods would not be executed by JUnit and need to manually chain themselves which can lead to" +
+              " maintenance problems. Consider using different method names or make hook methods private.\n" + b.toString().trim());
+    }
+  }
+
+  private List<List<Method>> filterIgnored(List<List<Method>> methods) {
+    Set<String> ignored = new HashSet<String>(Arrays.asList("setUp", "tearDown"));
+    List<List<Method>> copy = new ArrayList<List<Method>>();
+    for (List<Method> m : methods) {
+      if (!ignored.contains(m.get(0).getName())) {
+        copy.add(m);
+      }
+    }
+    return copy;
+  }
+
+  private String signature(Method m) {
+    return m.getName() + Arrays.toString(m.getParameterTypes());
+  }
+}
+
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleNoStaticHooksShadowing.java b/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleNoStaticHooksShadowing.java
new file mode 100644
index 0000000..033f9e2
--- /dev/null
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleNoStaticHooksShadowing.java
@@ -0,0 +1,94 @@
+package org.apache.lucene.util;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import static com.carrotsearch.randomizedtesting.MethodCollector.allDeclaredMethods;
+import static com.carrotsearch.randomizedtesting.MethodCollector.annotatedWith;
+import static com.carrotsearch.randomizedtesting.MethodCollector.flatten;
+import static com.carrotsearch.randomizedtesting.MethodCollector.removeShadowed;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.rules.TestRule;
+import org.junit.runner.Description;
+import org.junit.runners.model.Statement;
+
+import com.carrotsearch.randomizedtesting.ClassValidator;
+
+/**
+ * Don't allow shadowing of {@link BeforeClass} or {@link AfterClass} hooks
+ * as it is very likely a user error and will prevent execution of shadowed hooks.
+ */
+public class TestRuleNoStaticHooksShadowing implements TestRule, ClassValidator {
+  
+  @Override
+  public Statement apply(final Statement base, final Description description) {
+    return new Statement() {
+      @Override
+      public void evaluate() throws Throwable {
+        validate(description.getTestClass());
+        base.evaluate();
+      }
+    };
+  }
+
+  @Override
+  public void validate(Class<?> clazz) throws Throwable {
+    List<List<Method>> all = allDeclaredMethods(clazz);
+
+    checkNoShadows(clazz, all, BeforeClass.class);
+    checkNoShadows(clazz, all, AfterClass.class);
+  }
+
+  private void checkNoShadows(Class<?> clazz, List<List<Method>> all, Class<? extends Annotation> ann) {
+    List<List<Method>> methodHierarchy = annotatedWith(all, ann);
+    List<List<Method>> noShadows = removeShadowed(methodHierarchy);
+    if (!noShadows.equals(methodHierarchy)) {
+      Set<Method> shadowed = new HashSet<Method>(flatten(methodHierarchy));
+      shadowed.removeAll(flatten(noShadows));
+
+      StringBuilder b = new StringBuilder();
+      for (Method m : shadowed) {
+        String sig = signature(m);
+        for (Method other : flatten(methodHierarchy)) {
+          if (other != m && sig.equals(signature(other))) {
+            b.append("Method: " + m.toString()
+                + "#" + sig + " possibly shadowed by " + 
+                other.toString() + "#" + signature(other) + "\n");
+          }
+        }
+      }
+
+      throw new RuntimeException("There are shadowed methods annotated with "
+          + ann.getName() + ". These methods would not be executed by JUnit and need to manually chain themselves which can lead to" +
+              " maintenance problems.\n" + b.toString().trim());
+    }
+  }
+
+  private String signature(Method m) {
+    return m.getName() + Arrays.toString(m.getParameterTypes());
+  }
+}
+
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/ValidateAssertionsRequired.java b/lucene/test-framework/src/java/org/apache/lucene/util/ValidateAssertionsRequired.java
deleted file mode 100644
index d3850d5..0000000
--- a/lucene/test-framework/src/java/org/apache/lucene/util/ValidateAssertionsRequired.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package org.apache.lucene.util;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import com.carrotsearch.randomizedtesting.ClassValidator;
-
-/**
- * Require assertions for Lucene/Solr packages.
- */
-public class ValidateAssertionsRequired implements ClassValidator {
-  @Override
-  public void validate(Class<?> clazz) throws Throwable {
-    try {
-      assert false;
-      throw new RuntimeException("Enable assertions globally (-ea) or for Solr/Lucene subpackages only.");
-    } catch (AssertionError e) {
-      // Ok, enabled.
-    }    
-  }
-}
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/ValidateNoInstanceHooksOverrides.java b/lucene/test-framework/src/java/org/apache/lucene/util/ValidateNoInstanceHooksOverrides.java
deleted file mode 100644
index a3e12b8..0000000
--- a/lucene/test-framework/src/java/org/apache/lucene/util/ValidateNoInstanceHooksOverrides.java
+++ /dev/null
@@ -1,89 +0,0 @@
-package org.apache.lucene.util;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import static com.carrotsearch.randomizedtesting.MethodCollector.*;
-
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
-import org.junit.After;
-import org.junit.Before;
-
-import com.carrotsearch.randomizedtesting.ClassValidator;
-
-/**
- * Don't allow {@link Before} and {@link After} hook overrides as it is most
- * likely a user error and will result in superclass methods not being called
- * (requires manual chaining). 
- */
-public class ValidateNoInstanceHooksOverrides implements ClassValidator {
-  @Override
-  public void validate(Class<?> clazz) throws Throwable {
-    List<List<Method>> all = allDeclaredMethods(clazz);
-
-    checkNoShadows(clazz, all, Before.class);
-    checkNoShadows(clazz, all, After.class);
-  }
-
-  private void checkNoShadows(Class<?> clazz, List<List<Method>> all, Class<? extends Annotation> ann) {
-    List<List<Method>> methodHierarchy = filterIgnored(annotatedWith(all, ann));
-    List<List<Method>> noOverrides = removeOverrides(methodHierarchy);
-    if (!noOverrides.equals(methodHierarchy)) {
-      Set<Method> shadowed = new HashSet<Method>(flatten(methodHierarchy));
-      shadowed.removeAll(flatten(noOverrides));
-
-      StringBuilder b = new StringBuilder();
-      for (Method m : shadowed) {
-        String sig = signature(m);
-        for (Method other : flatten(methodHierarchy)) {
-          if (other != m && sig.equals(signature(other))) {
-            b.append("Method: " + m.toString()
-                + "#" + sig + " possibly overriden by " + 
-                other.toString() + "#" + signature(other) + "\n");
-          }
-        }
-      }
-
-      throw new RuntimeException("There are overridden methods annotated with "
-          + ann.getName() + ". These methods would not be executed by JUnit and need to manually chain themselves which can lead to" +
-              " maintenance problems. Consider using different method names or make hook methods private.\n" + b.toString().trim());
-    }
-  }
-
-  private List<List<Method>> filterIgnored(List<List<Method>> methods) {
-    Set<String> ignored = new HashSet<String>(Arrays.asList("setUp", "tearDown"));
-    List<List<Method>> copy = new ArrayList<List<Method>>();
-    for (List<Method> m : methods) {
-      if (!ignored.contains(m.get(0).getName())) {
-        copy.add(m);
-      }
-    }
-    return copy;
-  }
-
-  private String signature(Method m) {
-    return m.getName() + Arrays.toString(m.getParameterTypes());
-  }
-}
-
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/ValidateNoStaticHooksShadowing.java b/lucene/test-framework/src/java/org/apache/lucene/util/ValidateNoStaticHooksShadowing.java
deleted file mode 100644
index 5387d38..0000000
--- a/lucene/test-framework/src/java/org/apache/lucene/util/ValidateNoStaticHooksShadowing.java
+++ /dev/null
@@ -1,79 +0,0 @@
-package org.apache.lucene.util;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import static com.carrotsearch.randomizedtesting.MethodCollector.allDeclaredMethods;
-import static com.carrotsearch.randomizedtesting.MethodCollector.annotatedWith;
-import static com.carrotsearch.randomizedtesting.MethodCollector.flatten;
-import static com.carrotsearch.randomizedtesting.MethodCollector.removeShadowed;
-
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Method;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
-import org.junit.AfterClass;
-import org.junit.BeforeClass;
-
-import com.carrotsearch.randomizedtesting.ClassValidator;
-
-/**
- * Don't allow shadowing of {@link BeforeClass} or {@link AfterClass} hooks
- * as it is very likely a user error and will prevent execution of shadowed hooks.
- */
-public class ValidateNoStaticHooksShadowing implements ClassValidator {
-  @Override
-  public void validate(Class<?> clazz) throws Throwable {
-    List<List<Method>> all = allDeclaredMethods(clazz);
-
-    checkNoShadows(clazz, all, BeforeClass.class);
-    checkNoShadows(clazz, all, AfterClass.class);
-  }
-
-  private void checkNoShadows(Class<?> clazz, List<List<Method>> all, Class<? extends Annotation> ann) {
-    List<List<Method>> methodHierarchy = annotatedWith(all, ann);
-    List<List<Method>> noShadows = removeShadowed(methodHierarchy);
-    if (!noShadows.equals(methodHierarchy)) {
-      Set<Method> shadowed = new HashSet<Method>(flatten(methodHierarchy));
-      shadowed.removeAll(flatten(noShadows));
-
-      StringBuilder b = new StringBuilder();
-      for (Method m : shadowed) {
-        String sig = signature(m);
-        for (Method other : flatten(methodHierarchy)) {
-          if (other != m && sig.equals(signature(other))) {
-            b.append("Method: " + m.toString()
-                + "#" + sig + " possibly shadowed by " + 
-                other.toString() + "#" + signature(other) + "\n");
-          }
-        }
-      }
-
-      throw new RuntimeException("There are shadowed methods annotated with "
-          + ann.getName() + ". These methods would not be executed by JUnit and need to manually chain themselves which can lead to" +
-              " maintenance problems.\n" + b.toString().trim());
-    }
-  }
-
-  private String signature(Method m) {
-    return m.getName() + Arrays.toString(m.getParameterTypes());
-  }
-}
-

