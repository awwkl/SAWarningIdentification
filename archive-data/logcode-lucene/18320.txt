GitDiffStart: f44f23026f4454215308359e0ea413ba7e43220e | Thu Mar 11 20:35:57 2010 +0000
diff --git a/docs/fileformats.html b/docs/fileformats.html
index d5ee15c..ad2d1bc 100644
--- a/docs/fileformats.html
+++ b/docs/fileformats.html
@@ -419,10 +419,32 @@ document.write("Last Published: " + document.lastModified);
 		compatible (in the same way as the lock-less commits
 		change in 2.1).
             </p>
+<p>
+	        In version 2.4, Strings are now written as true UTF-8
+	        byte sequence, not Java's modified UTF-8.  See issue
+	        LUCENE-510 for details.
+            </p>
+<p>
+	        In version 2.9, an optional opaque Map&lt;String,String&gt;
+	        CommitUserData may be passed to IndexWriter's commit
+	        methods (and later retrieved), which is recorded in
+	        the segments_N file.  See issue LUCENE-1382 for
+	        details.  Also, diagnostics were added to each segment
+	        written recording details about why it was written
+	        (due to flush, merge; which OS/JRE was used; etc.).
+	        See issue LUCENE-1654 for details.
+            </p>
+<p>
+	        In version 3.0, compressed fields are no longer
+	        written to the index (they can still be read, but on
+	        merge the new segment will write them,
+	        uncompressed). See issue LUCENE-1960 for details.
+
+            </p>
 </div>
 
         
-<a name="N1002B"></a><a name="Definitions"></a>
+<a name="N10034"></a><a name="Definitions"></a>
 <h2 class="boxed">Definitions</h2>
 <div class="section">
 <p>
@@ -463,7 +485,7 @@ document.write("Last Published: " + document.lastModified);
                 strings, the first naming the field, and the second naming text
                 within the field.
             </p>
-<a name="N1004B"></a><a name="Inverted Indexing"></a>
+<a name="N10054"></a><a name="Inverted Indexing"></a>
 <h3 class="boxed">Inverted Indexing</h3>
 <p>
                     The index stores statistics about terms in order
@@ -473,7 +495,7 @@ document.write("Last Published: " + document.lastModified);
                     it.  This is the inverse of the natural relationship, in which
                     documents list terms.
                 </p>
-<a name="N10057"></a><a name="Types of Fields"></a>
+<a name="N10060"></a><a name="Types of Fields"></a>
 <h3 class="boxed">Types of Fields</h3>
 <p>
                     In Lucene, fields may be <i>stored</i>, in which
@@ -487,7 +509,7 @@ document.write("Last Published: " + document.lastModified);
                     to be indexed literally.
                 </p>
 <p>See the <a href="api/core/org/apache/lucene/document/Field.html">Field</a> java docs for more information on Fields.</p>
-<a name="N10074"></a><a name="Segments"></a>
+<a name="N1007D"></a><a name="Segments"></a>
 <h3 class="boxed">Segments</h3>
 <p>
                     Lucene indexes may be composed of multiple sub-indexes, or
@@ -513,7 +535,7 @@ document.write("Last Published: " + document.lastModified);
                     Searches may involve multiple segments and/or multiple indexes, each
                     index potentially composed of a set of segments.
                 </p>
-<a name="N10092"></a><a name="Document Numbers"></a>
+<a name="N1009B"></a><a name="Document Numbers"></a>
 <h3 class="boxed">Document Numbers</h3>
 <p>
                     Internally, Lucene refers to documents by an integer <i>document
@@ -568,7 +590,7 @@ document.write("Last Published: " + document.lastModified);
 </div>
 
         
-<a name="N100B9"></a><a name="Overview"></a>
+<a name="N100C2"></a><a name="Overview"></a>
 <h2 class="boxed">Overview</h2>
 <div class="section">
 <p>
@@ -667,7 +689,7 @@ document.write("Last Published: " + document.lastModified);
 </div>
 
         
-<a name="N100FC"></a><a name="File Naming"></a>
+<a name="N10105"></a><a name="File Naming"></a>
 <h2 class="boxed">File Naming</h2>
 <div class="section">
 <p>
@@ -694,7 +716,7 @@ document.write("Last Published: " + document.lastModified);
             </p>
 </div>
       
-<a name="N1010B"></a><a name="file-names"></a>
+<a name="N10114"></a><a name="file-names"></a>
 <h2 class="boxed">Summary of File Extensions</h2>
 <div class="section">
 <p>The following table summarizes the names and extensions of the files in Lucene:
@@ -836,10 +858,10 @@ document.write("Last Published: " + document.lastModified);
 </div>
 
         
-<a name="N101F5"></a><a name="Primitive Types"></a>
+<a name="N101FE"></a><a name="Primitive Types"></a>
 <h2 class="boxed">Primitive Types</h2>
 <div class="section">
-<a name="N101FA"></a><a name="Byte"></a>
+<a name="N10203"></a><a name="Byte"></a>
 <h3 class="boxed">Byte</h3>
 <p>
                     The most primitive type
@@ -847,7 +869,7 @@ document.write("Last Published: " + document.lastModified);
                     other data types are defined as sequences
                     of bytes, so file formats are byte-order independent.
                 </p>
-<a name="N10203"></a><a name="UInt32"></a>
+<a name="N1020C"></a><a name="UInt32"></a>
 <h3 class="boxed">UInt32</h3>
 <p>
                     32-bit unsigned integers are written as four
@@ -857,7 +879,7 @@ document.write("Last Published: " + document.lastModified);
                     UInt32    --&gt; &lt;Byte&gt;<sup>4</sup>
                 
 </p>
-<a name="N10212"></a><a name="Uint64"></a>
+<a name="N1021B"></a><a name="Uint64"></a>
 <h3 class="boxed">Uint64</h3>
 <p>
                     64-bit unsigned integers are written as eight
@@ -866,7 +888,7 @@ document.write("Last Published: " + document.lastModified);
 <p>UInt64    --&gt; &lt;Byte&gt;<sup>8</sup>
                 
 </p>
-<a name="N10221"></a><a name="VInt"></a>
+<a name="N1022A"></a><a name="VInt"></a>
 <h3 class="boxed">VInt</h3>
 <p>
                     A variable-length format for positive integers is
@@ -1416,13 +1438,13 @@ document.write("Last Published: " + document.lastModified);
                     This provides compression while still being
                     efficient to decode.
                 </p>
-<a name="N10506"></a><a name="Chars"></a>
+<a name="N1050F"></a><a name="Chars"></a>
 <h3 class="boxed">Chars</h3>
 <p>
                     Lucene writes unicode
                     character sequences as UTF-8 encoded bytes.
                 </p>
-<a name="N1050F"></a><a name="String"></a>
+<a name="N10518"></a><a name="String"></a>
 <h3 class="boxed">String</h3>
 <p>
 		    Lucene writes strings as UTF-8 encoded bytes.
@@ -1435,10 +1457,10 @@ document.write("Last Published: " + document.lastModified);
 </div>
 
         
-<a name="N1051C"></a><a name="Compound Types"></a>
+<a name="N10525"></a><a name="Compound Types"></a>
 <h2 class="boxed">Compound Types</h2>
 <div class="section">
-<a name="N10521"></a><a name="MapStringString"></a>
+<a name="N1052A"></a><a name="MapStringString"></a>
 <h3 class="boxed">Map&lt;String,String&gt;</h3>
 <p>
 		    In a couple places Lucene stores a Map
@@ -1451,13 +1473,13 @@ document.write("Last Published: " + document.lastModified);
 </div>
 
         
-<a name="N10531"></a><a name="Per-Index Files"></a>
+<a name="N1053A"></a><a name="Per-Index Files"></a>
 <h2 class="boxed">Per-Index Files</h2>
 <div class="section">
 <p>
                 The files in this section exist one-per-index.
             </p>
-<a name="N10539"></a><a name="Segments File"></a>
+<a name="N10542"></a><a name="Segments File"></a>
 <h3 class="boxed">Segments File</h3>
 <p>
                     The active segments in the index are stored in the
@@ -1624,7 +1646,7 @@ document.write("Last Published: " + document.lastModified);
 		    Lucene version, OS, Java version, why the segment
 		    was created (merge, flush, addIndexes), etc.
                 </p>
-<a name="N105BE"></a><a name="Lock File"></a>
+<a name="N105C7"></a><a name="Lock File"></a>
 <h3 class="boxed">Lock File</h3>
 <p>
                     The write lock, which is stored in the index
@@ -1638,14 +1660,14 @@ document.write("Last Published: " + document.lastModified);
                     documents).  This lock file ensures that only one
                     writer is modifying the index at a time.
                 </p>
-<a name="N105C7"></a><a name="Deletable File"></a>
+<a name="N105D0"></a><a name="Deletable File"></a>
 <h3 class="boxed">Deletable File</h3>
 <p>
                     A writer dynamically computes
                     the files that are deletable, instead, so no file
                     is written.
                 </p>
-<a name="N105D0"></a><a name="Compound Files"></a>
+<a name="N105D9"></a><a name="Compound Files"></a>
 <h3 class="boxed">Compound Files</h3>
 <p>Starting with Lucene 1.4 the compound file format became default. This
                     is simply a container for all files described in the next section
@@ -1672,14 +1694,14 @@ document.write("Last Published: " + document.lastModified);
 </div>
 
         
-<a name="N105F8"></a><a name="Per-Segment Files"></a>
+<a name="N10601"></a><a name="Per-Segment Files"></a>
 <h2 class="boxed">Per-Segment Files</h2>
 <div class="section">
 <p>
                 The remaining files are all per-segment, and are
                 thus defined by suffix.
             </p>
-<a name="N10600"></a><a name="Fields"></a>
+<a name="N10609"></a><a name="Fields"></a>
 <h3 class="boxed">Fields</h3>
 <p>
                     
@@ -1873,7 +1895,7 @@ document.write("Last Published: " + document.lastModified);
 </li>
                 
 </ol>
-<a name="N106A7"></a><a name="Term Dictionary"></a>
+<a name="N106B0"></a><a name="Term Dictionary"></a>
 <h3 class="boxed">Term Dictionary</h3>
 <p>
                     The term dictionary is represented as two files:
@@ -2065,7 +2087,7 @@ document.write("Last Published: " + document.lastModified);
 </li>
                 
 </ol>
-<a name="N1072B"></a><a name="Frequencies"></a>
+<a name="N10734"></a><a name="Frequencies"></a>
 <h3 class="boxed">Frequencies</h3>
 <p>
                     The .frq file contains the lists of documents
@@ -2193,7 +2215,7 @@ document.write("Last Published: " + document.lastModified);
                    entry in level-1. In the example has entry 15 on level 1 a pointer to entry 15 on level 0 and entry 31 on level 1 a pointer
                    to entry 31 on level 0.                   
                 </p>
-<a name="N107B3"></a><a name="Positions"></a>
+<a name="N107BC"></a><a name="Positions"></a>
 <h3 class="boxed">Positions</h3>
 <p>
                     The .prx file contains the lists of positions that
@@ -2263,7 +2285,7 @@ document.write("Last Published: " + document.lastModified);
                     Payload. If PayloadLength is not stored, then this Payload has the same
                     length as the Payload at the previous position.
                 </p>
-<a name="N107EF"></a><a name="Normalization Factors"></a>
+<a name="N107F8"></a><a name="Normalization Factors"></a>
 <h3 class="boxed">Normalization Factors</h3>
 <p>There's a single .nrm file containing all norms:
                 </p>
@@ -2343,7 +2365,7 @@ document.write("Last Published: " + document.lastModified);
                 </p>
 <p>Separate norm files are created (when adequate) for both compound and non compound segments.
                 </p>
-<a name="N10840"></a><a name="Term Vectors"></a>
+<a name="N10849"></a><a name="Term Vectors"></a>
 <h3 class="boxed">Term Vectors</h3>
 <p>
 		  Term Vector support is an optional on a field by
@@ -2479,7 +2501,7 @@ document.write("Last Published: " + document.lastModified);
 </li>
                 
 </ol>
-<a name="N108DC"></a><a name="Deleted Documents"></a>
+<a name="N108E5"></a><a name="Deleted Documents"></a>
 <h3 class="boxed">Deleted Documents</h3>
 <p>The .del file is
                     optional, and only exists when a segment contains deletions.
@@ -2543,7 +2565,7 @@ document.write("Last Published: " + document.lastModified);
 </div>
 
         
-<a name="N10916"></a><a name="Limitations"></a>
+<a name="N1091F"></a><a name="Limitations"></a>
 <h2 class="boxed">Limitations</h2>
 <div class="section">
 <p>
diff --git a/docs/fileformats.pdf b/docs/fileformats.pdf
index fec049c..a62ea92 100644
--- a/docs/fileformats.pdf
+++ b/docs/fileformats.pdf
@@ -3,20 +3,20 @@ Apache Lucene - Index File Formats
 Table of contents
 
    1 Index File Formats............................................................................................................. 3
-   2 Definitions..........................................................................................................................3
+   2 Definitions..........................................................................................................................4
     2.1 Inverted Indexing...........................................................................................................4
     2.2 Types of Fields.............................................................................................................. 4
     2.3 Segments........................................................................................................................4
-    2.4 Document Numbers.......................................................................................................4
+    2.4 Document Numbers.......................................................................................................5
    3 Overview............................................................................................................................5
    4 File Naming....................................................................................................................... 6
    5 Summary of File Extensions.............................................................................................. 6
    6 Primitive Types.................................................................................................................. 7
     6.1 Byte................................................................................................................................7
     6.2 UInt32............................................................................................................................7
-    6.3 Uint64............................................................................................................................ 7
-    6.4 VInt................................................................................................................................7
-    6.5 Chars..............................................................................................................................8
+    6.3 Uint64............................................................................................................................ 8
+    6.4 VInt................................................................................................................................8
+    6.5 Chars..............................................................................................................................9
     6.6 String............................................................................................................................. 9
    7 Compound Types............................................................................................................... 9
     7.1 Map<String,String>.......................................................................................................9
@@ -24,19 +24,19 @@ Table of contents
     8.1 Segments File................................................................................................................ 9
     8.2 Lock File......................................................................................................................11
     8.3 Deletable File...............................................................................................................11
-    8.4 Compound Files...........................................................................................................11
+    8.4 Compound Files...........................................................................................................12
    9 Per-Segment Files............................................................................................................ 12
 
                    Copyright © 2006 The Apache Software Foundation. All rights reserved.
                                                                                                             Apache Lucene - Index File Formats
 
  9.1 Fields........................................................................................................................... 12
- 9.2 Term Dictionary.......................................................................................................... 13
- 9.3 Frequencies..................................................................................................................15
+ 9.2 Term Dictionary.......................................................................................................... 14
+ 9.3 Frequencies..................................................................................................................16
  9.4 Positions...................................................................................................................... 17
  9.5 Normalization Factors................................................................................................. 18
  9.6 Term Vectors............................................................................................................... 19
- 9.7 Deleted Documents..................................................................................................... 20
+ 9.7 Deleted Documents..................................................................................................... 21
 10 Limitations..................................................................................................................... 21
 
                                                                        Page 2
@@ -74,6 +74,24 @@ store (vectors & stored fields) files. This allows for faster indexing in certai
 change is fully backwards compatible (in the same way as the lock-less commits change in
 2.1).
 
+In version 2.4, Strings are now written as true UTF-8 byte sequence, not Java's modified
+UTF-8. See issue LUCENE-510 for details.
+
+In version 2.9, an optional opaque Map<String,String> CommitUserData may be passed to
+IndexWriter's commit methods (and later retrieved), which is recorded in the segments_N
+file. See issue LUCENE-1382 for details. Also, diagnostics were added to each segment
+written recording details about why it was written (due to flush, merge; which OS/JRE was
+used; etc.). See issue LUCENE-1654 for details.
+
+In version 3.0, compressed fields are no longer written to the index (they can still be read, but
+on merge the new segment will write them, uncompressed). See issue LUCENE-1960 for
+details.
+
+Page 3
+
+        Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
 2. Definitions
 
 The fundamental concepts in Lucene are index, document, field and term.
@@ -85,12 +103,6 @@ An index contains a sequence of documents.
 
 The same string in two different fields is considered a different term. Thus terms are
 represented as a pair of strings, the first naming the field, and the second naming text within
-
-Page 3
-
-        Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
 the field.
 
 2.1. Inverted Indexing
@@ -120,6 +132,12 @@ fully independent index, which could be searched separately. Indexes evolve by:
 2. Merging existing segments.
 
 Searches may involve multiple segments and/or multiple indexes, each index potentially
+
+                                                                       Page 4
+
+Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
 composed of a set of segments.
 
 2.4. Document Numbers
@@ -133,12 +151,6 @@ numbers outside of Lucene. In particular, numbers may change in the following si
 ?? The numbers stored in each segment are unique only within the segment, and must be
 
     converted before they can be used in a larger context. The standard technique is to
-
-                                                                       Page 4
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
     allocate each segment a range of values, based on the range of numbers used in that
     segment. To convert a document number from a segment to an external value, the
     segment's base document number is added. To convert an external value back to a
@@ -165,23 +177,27 @@ Each segment index maintains the following:
     contain the term, and pointers to the term's frequency and proximity data.
 ?? Term Frequency data. For each term in the dictionary, the numbers of all the documents
     that contain that term, and the frequency of the term in that document if omitTf is false.
+
+Page 5
+
+        Copyright © 2006 The Apache Software Foundation. All rights reserved.
+                                           Apache Lucene - Index File Formats
+
 ?? Term Proximity data. For each term in the dictionary, the positions that the term occurs in
     each document. Note that this will not exist if all fields in all documents set omitTf to
     true.
+
 ?? Normalization factors. For each field in each document, a value is stored that is
     multiplied into the score for hits on that field.
+
 ?? Term Vectors. For each field in each document, the term vector (sometimes called
     document vector) may be stored. A term vector consists of term text and term frequency.
     To add Term Vectors to your index see the Field constructors
+
 ?? Deleted documents. An optional file indicating which documents are deleted.
 
 Details on each of these are provided in subsequent sections.
 
-Page 5
-
-        Copyright © 2006 The Apache Software Foundation. All rights reserved.
-                                             Apache Lucene - Index File Formats
-
 4. File Naming
 
 All files belonging to a segment have the same name with varying extensions. The extensions
@@ -202,48 +218,49 @@ sequential long integer represented in alpha-numeric (base 36) form.
 
 The following table summarizes the names and extensions of the files in Lucene:
 
-             Name              Extension     Brief Description
-
-Segments File      segments.gen, segments_N  Stores information about
-                                             segments
-
-Lock File          write.lock                The Write lock prevents
-                                             multiple IndexWriters from
-                                             writing to the same file.
-
-Compound File      .cfs                      An optional "virtual" file
-                                             consisting of all the other index
-                                             files for systems that frequently
-                                             run out of file handles.
-
-Fields             .fnm                      Stores information about the
-                                             fields
-
-Field Index        .fdx                      Contains pointers to field data
+           Name                Extension   Brief Description
 
-Field Data         .fdt                      The stored fields for documents
+Segments File    segments.gen, segments_N  Stores information about
+                                           segments
 
-Term Infos         .tis                      Part of the term dictionary,
-                                             stores term info
+Lock File        write.lock                The Write lock prevents
+                                           multiple IndexWriters from
+                                           writing to the same file.
 
-Term Info Index    .tii                      The index into the Term Infos
-                                             file
+Compound File    .cfs                      An optional "virtual" file
+                                           consisting of all the other index
+                                           files for systems that frequently
 
-                                                                                    Page 6
+                                                                                  Page 6
 
-             Copyright © 2006 The Apache Software Foundation. All rights reserved.
+           Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
-Frequencies                         .frq  Contains the list of docs which
+Fields                              .fnm  run out of file handles.
+Field Index                         .fdx
+Field Data                          .fdt  Stores information about the
+Term Infos                          .tis  fields
+Term Info Index                     .tii
+Frequencies                         .frq  Contains pointers to field data
+
+Positions                           .prx  The stored fields for documents
+
+Norms                               .nrm  Part of the term dictionary,
+Term Vector Index                   .tvx  stores term info
+Term Vector Documents               .tvd
+                                          The index into the Term Infos
+Term Vector Fields                  .tvf  file
+Deleted Documents                   .del
+                                          Contains the list of docs which
                                           contain each term along with
-Positions                           .prx  frequency
+                                          frequency
 
-Norms                               .nrm  Stores position information
-Term Vector Index                   .tvx  about where a term occurs in
-Term Vector Documents               .tvd  the index
+                                          Stores position information
+                                          about where a term occurs in
+                                          the index
 
-Term Vector Fields                  .tvf  Encodes length and boost
-Deleted Documents                   .del  factors for docs and fields
+                                          Encodes length and boost
+                                          factors for docs and fields
 
                                           Stores offset into the document
                                           data file
@@ -265,6 +282,12 @@ The most primitive type is an eight-bit byte. Files are accessed as sequences of
 other data types are defined as sequences of bytes, so file formats are byte-order independent.
 
 6.2. UInt32
+
+Page 7
+
+        Copyright © 2006 The Apache Software Foundation. All rights reserved.
+                                 Apache Lucene - Index File Formats
+
 32-bit unsigned integers are written as four bytes, high-order bytes first.
 UInt32 --> <Byte>4
 
@@ -274,11 +297,6 @@ UInt64 --> <Byte>8
 
 6.4. VInt
 
-Page 7
-
-        Copyright © 2006 The Apache Software Foundation. All rights reserved.
-                                                                  Apache Lucene - Index File Formats
-
 A variable-length format for positive integers is defined where the high-order bit of each byte
 indicates whether more bytes remain to be read. The low-order seven bits are appended as
 increasingly more significant bits in the resulting integer value. Thus values from zero to 127
@@ -287,7 +305,7 @@ on.
 
 VInt Encoding Example
 
-Value       First byte  Second byte                               Third byte
+Value   First byte  Second byte  Third byte
 
 0 00000000
 
@@ -299,31 +317,30 @@ Value       First byte  Second byte                               Third byte
 
 127 01111111
 
-128         10000000    00000001
+128     10000000    00000001
 
-129         10000001    00000001
+129     10000001    00000001
 
-130         10000010    00000001
+130     10000010    00000001
 
 ...
 
-16,383      11111111    01111111
+16,383  11111111    01111111
 
-16,384      10000000    10000000                                  00000001
+                                                                               Page 8
 
-16,385      10000001    10000000                                  00000001
+        Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
+16,384  10000000                                10000000           00000001
+
+16,385  10000001                                10000000           00000001
 
  ...
 
 This provides compression while still being efficient to decode.
 
 6.5. Chars
-
-                                                                                   Page 8
-
-            Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
 Lucene writes unicode character sequences as UTF-8 encoded bytes.
 
 6.6. String
@@ -336,9 +353,7 @@ String --> VInt, Chars
 7. Compound Types
 
 7.1. Map<String,String>
-
 In a couple places Lucene stores a Map String->String.
-
 Map<String,String> --> Count<String,String>Count
 
 8. Per-Index Files
@@ -354,6 +369,11 @@ be deleted, or, a writer is in the process of committing, or a custom IndexDelet
 use). This file lists each segment by name, has details about the separate norms and deletion
 files, and also contains the size of each segment.
 
+Page 9
+
+        Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
 As of 2.1, there is also a file segments.gen. This file contains the current generation (the _N
 in segments_N) of the index. This is used only as a fallback in case the current generation
 cannot be accurately determined by directory listing alone (as is the case for some NFS
@@ -366,11 +386,6 @@ DocStoreOffset, [DocStoreSegment, DocStoreIsCompoundFile], HasSingleNormFile,
 NumField, NormGenNumField, IsCompoundFile, DeletionCount, HasProx,
 Diagnostics>SegCount, CommitUserData, Checksum
 
-Page 9
-
-        Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
 Format, NameCounter, SegCount, SegSize, NumField, DocStoreOffset, DeletionCount -->
 Int32
 
@@ -406,6 +421,11 @@ normGens stored and they are all assumed to be 0 when the segment file was writt
 and all assumed to be -1 when the segments file is 2.1 or above. The generation then has the
 same meaning as delGen (above).
 
+                                                                       Page 10
+
+Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
 IsCompoundFile records whether the segment is written as a compound file or not. If this is
 -1, the segment is not a compound file. If it is 1, the segment is a compound file. Else it is 0,
 which means we check filesystem to see if _X.cfs exists.
@@ -417,12 +437,6 @@ extension .nrm); if it is 0 then each field's norms are stored as separate .fN f
 DocStoreOffset, DocStoreSegment, DocStoreIsCompoundFile: If DocStoreOffset is -1, this
 segment has its own doc store (stored fields values and term vectors) files and
 DocStoreSegment and DocStoreIsCompoundFile are not stored. In this case all files for
-
-                                                                       Page 10
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
 stored field values (*.fdt and *.fdx) and term vectors (*.tvf, *.tvd and *.tvx) will be stored
 with this segment. Otherwise, DocStoreSegment is the name of the segment that has the
 shared doc store files; DocStoreIsCompoundFile is 1 if that segment is stored in compound
@@ -455,30 +469,22 @@ time.
 
 8.3. Deletable File
 
+Page 11
+
+         Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
 A writer dynamically computes the files that are deletable, instead, so no file is written.
 
 8.4. Compound Files
-
 Starting with Lucene 1.4 the compound file format became default. This is simply a container
 for all files described in the next section (except for the .del file).
-
 Compound (.cfs) --> FileCount, <DataOffset, FileName> FileCount , FileData FileCount
-
 FileCount --> VInt
-
 DataOffset --> Long
-
-Page 11
-
-         Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
 FileName --> String
-
 FileData --> raw file data
-
 The raw file data is the data from the individual files named above.
-
 Starting with Lucene 2.3, doc store files (stored field values and term vectors) can be shared
 in a single set of files for more than one segment. When compound file is enabled, these
 shared files will be added into a single compound file (same format as above) but with the
@@ -489,23 +495,22 @@ extension .cfx.
 The remaining files are all per-segment, and are thus defined by suffix.
 
 9.1. Fields
-
 Field Info
-
 Field names are stored in the field info file, with suffix .fnm.
-
 FieldInfos (.fnm) --> FNMVersion,FieldsCount, <FieldName, FieldBits> FieldsCount
-
 FNMVersion, FieldsCount --> VInt
-
 FieldName --> String
-
 FieldBits --> Byte
-
 ?? The low-order bit is one for indexed fields, and zero for non-indexed fields.
 ?? The second lowest-order bit is one for fields that have term vectors stored, and zero for
 
     fields without term vectors.
+
+                                                                       Page 12
+
+Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
 ?? If the third lowest-order bit is set (0x04), term positions are stored with the term vectors.
 ?? If the fourth lowest-order bit is set (0x08), term offsets are stored with the term vectors.
 ?? If the fifth lowest-order bit is set (0x10), norms are omitted for the indexed field.
@@ -519,11 +524,6 @@ relative.
 
 Stored Fields
 
-                                                                       Page 12
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
 Stored fields are represented by two files:
 1. The field index, or .fdx file.
 
@@ -537,6 +537,7 @@ Stored fields are represented by two files:
     document. Because it contains fixed-length data, this file may be easily randomly
     accessed. The position of document n 's field data is the Uint64 at n*8 in this file.
 2. The field data, or .fdt file.
+
     This contains the stored fields of each document, as follows:
 
     FieldData (.fdt) --> <DocFieldData> SegSize
@@ -557,6 +558,11 @@ Stored fields are represented by two files:
 
     Value --> String | BinaryValue (depending on Bits)
 
+Page 13
+
+         Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
     BinaryValue --> ValueSize, <Byte>^ValueSize
 
     ValueSize --> VInt
@@ -569,64 +575,58 @@ The term dictionary is represented as two files:
     TermInfoFile (.tis)--> TIVersion, TermCount, IndexInterval, SkipInterval,
     MaxSkipLevels, TermInfos
 
-Page 13
-
-         Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
-TIVersion --> UInt32
-
-TermCount --> UInt64
-
-IndexInterval --> UInt32
-
-SkipInterval --> UInt32
-
-MaxSkipLevels --> UInt32
+    TIVersion --> UInt32
 
-TermInfos --> <TermInfo> TermCount
+    TermCount --> UInt64
 
-TermInfo --> <Term, DocFreq, FreqDelta, ProxDelta, SkipDelta>
+    IndexInterval --> UInt32
 
-Term --> <PrefixLength, Suffix, FieldNum>
+    SkipInterval --> UInt32
 
-Suffix --> String
+    MaxSkipLevels --> UInt32
 
-PrefixLength, DocFreq, FreqDelta, ProxDelta, SkipDelta
---> VInt
+    TermInfos --> <TermInfo> TermCount
 
-This file is sorted by Term. Terms are ordered first lexicographically (by UTF16
-character code) by the term's field name, and within that lexicographically (by UTF16
-character code) by the term's text.
+    TermInfo --> <Term, DocFreq, FreqDelta, ProxDelta, SkipDelta>
 
-TIVersion names the version of the format of this file and is equal to
-TermInfosWriter.FORMAT_CURRENT.
+    Term --> <PrefixLength, Suffix, FieldNum>
 
-Term text prefixes are shared. The PrefixLength is the number of initial characters from
-the previous term which must be pre-pended to a term's suffix in order to form the term's
-text. Thus, if the previous term's text was "bone" and the term is "boy", the PrefixLength
-is two and the suffix is "y".
+    Suffix --> String
 
-FieldNumber determines the term's field, whose name is stored in the .fdt file.
+    PrefixLength, DocFreq, FreqDelta, ProxDelta, SkipDelta
+    --> VInt
 
-DocFreq is the count of documents which contain the term.
+    This file is sorted by Term. Terms are ordered first lexicographically (by UTF16
+    character code) by the term's field name, and within that lexicographically (by UTF16
+    character code) by the term's text.
 
-FreqDelta determines the position of this term's TermFreqs within the .frq file. In
-particular, it is the difference between the position of this term's data in that file and the
-position of the previous term's data (or zero, for the first term in the file).
+    TIVersion names the version of the format of this file and is equal to
+    TermInfosWriter.FORMAT_CURRENT.
 
-ProxDelta determines the position of this term's TermPositions within the .prx file. In
-particular, it is the difference between the position of this term's data in that file and the
-position of the previous term's data (or zero, for the first term in the file. For fields with
-omitTf true, this will be 0 since prox information is not stored.
+    Term text prefixes are shared. The PrefixLength is the number of initial characters from
+    the previous term which must be pre-pended to a term's suffix in order to form the term's
+    text. Thus, if the previous term's text was "bone" and the term is "boy", the PrefixLength
+    is two and the suffix is "y".
 
-SkipDelta determines the position of this term's SkipData within the .frq file. In
+    FieldNumber determines the term's field, whose name is stored in the .fdt file.
 
                                                                        Page 14
 
 Copyright © 2006 The Apache Software Foundation. All rights reserved.
 Apache Lucene - Index File Formats
 
+    DocFreq is the count of documents which contain the term.
+
+    FreqDelta determines the position of this term's TermFreqs within the .frq file. In
+    particular, it is the difference between the position of this term's data in that file and the
+    position of the previous term's data (or zero, for the first term in the file).
+
+    ProxDelta determines the position of this term's TermPositions within the .prx file. In
+    particular, it is the difference between the position of this term's data in that file and the
+    position of the previous term's data (or zero, for the first term in the file. For fields with
+    omitTf true, this will be 0 since prox information is not stored.
+
+    SkipDelta determines the position of this term's SkipData within the .frq file. In
     particular, it is the number of bytes after TermFreqs that the SkipData starts. In other
     words, it is the length of the TermFreq data. SkipDelta is only stored if DocFreq is not
     smaller than SkipInterval.
@@ -660,6 +660,12 @@ Copyright © 2006 The Apache Software Foundation. All rights reserved.
 
     SkipInterval is the fraction of TermDocs stored in skip tables. It is used to accelerate
     TermDocs.skipTo(int). Larger values result in smaller indexes, greater acceleration, but
+
+Page 15
+
+         Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
     fewer accelerable cases, while smaller values result in bigger indexes, less acceleration
     (in case of a small value for MaxSkipLevels) and more accelerable cases.
 
@@ -673,11 +679,6 @@ Copyright © 2006 The Apache Software Foundation. All rights reserved.
 The .frq file contains the lists of documents which contain each term, along with the
 frequency of the term in that document (if omitTf is false).
 
-Page 15
-
-         Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
 FreqFile (.frq) --> <TermFreqs, SkipData> TermCount
 
 TermFreqs --> <TermFreq> DocFreq
@@ -712,6 +713,11 @@ in document eleven, with omitTf false, would be the following sequence of VInts:
 
 If omitTf were true it would be this sequence of VInts instead:
 
+                                                                       Page 16
+
+Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
 7,4
 
 DocSkip records the document number before every SkipInterval th document in TermFreqs.
@@ -724,11 +730,6 @@ position of every SkipInterval th entry in FreqFile and ProxFile, respectively.
 are relative to the start of TermFreqs and Positions, to the previous SkipDatum in the
 sequence.
 
-                                                                       Page 16
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
 For example, if DocFreq=35 and SkipInterval=16, then there are two SkipData entries,
 containing the 15 th and 31 st document numbers in TermFreqs. The first FreqSkip names the
 number of bytes after the beginning of TermFreqs that the 16 th SkipDatum starts, and the
@@ -760,6 +761,11 @@ TermPositions --> <Positions> DocFreq
 
 Positions --> <PositionDelta,Payload?> Freq
 
+Page 17
+
+         Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
 Payload --> <PayloadLength?,PayloadData>
 
 PositionDelta --> VInt
@@ -773,11 +779,6 @@ TermPositions are ordered by term (the term is implicit, from the .tis file).
 Positions entries are ordered by increasing document number (the document number is
 implicit from the .frq file).
 
-Page 17
-
-         Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
 PositionDelta is, if payloads are disabled for the term's field, the difference between the
 position of the current occurrence in the document and the previous occurrence (or zero, if
 this is the first occurrence in this document). If payloads are enabled for the term's field, then
@@ -812,6 +813,11 @@ NormsHeader has 4 bytes, last of which is the format version for this file, curr
 Each byte encodes a floating point value. Bits 0-2 contain the 3-bit mantissa, and bits 3-8
 contain the 5-bit exponent.
 
+                                                                       Page 18
+
+Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
 These are converted to an IEEE single float value as follows:
 1. If the byte is zero, use a zero float.
 2. Otherwise, set the sign bit of the float to zero;
@@ -821,47 +827,56 @@ These are converted to an IEEE single float value as follows:
 
 A separate norm file is created when the norm values of an existing segment are modified.
 When field N is modified, a separate norm file .sN is created, to maintain the norm values for
-
-                                                                       Page 18
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
 that field.
+
 Separate norm files are created (when adequate) for both compound and non compound
 segments.
 
 9.6. Term Vectors
+
 Term Vector support is an optional on a field by field basis. It consists of 3 files.
 1. The Document Index or .tvx file.
 
     For each document, this stores the offset into the document data (.tvd) and field data (.tvf)
     files.
+
     DocumentIndex (.tvx) --> TVXVersion<DocumentPosition,FieldPosition> NumDocs
+
     TVXVersion --> Int (TermVectorsReader.CURRENT)
+
     DocumentPosition --> UInt64 (offset in the .tvd file)
+
     FieldPosition --> UInt64 (offset in the .tvf file)
 2. The Document or .tvd file.
+
     This contains, for each document, the number of fields, a list of the fields with term
     vector info and finally a list of pointers to the field information in the .tvf (Term Vector
     Fields) file.
+
     Document (.tvd) --> TVDVersion<NumFields, FieldNums, FieldPositions> NumDocs
+
     TVDVersion --> Int (TermVectorsReader.FORMAT_CURRENT)
+
     NumFields --> VInt
+
     FieldNums --> <FieldNumDelta> NumFields
+
+Page 19
+
+         Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
     FieldNumDelta --> VInt
+
     FieldPositions --> <FieldPositionDelta> NumFields-1
+
     FieldPositionDelta --> VLong
+
     The .tvd file is used to map out the fields that have term vectors stored and where the
     field information is in the .tvf file.
 3. The Field or .tvf file.
-    This file contains, for each field that has a term vector stored, a list of the terms, their
-
-Page 19
-
-         Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
 
+    This file contains, for each field that has a term vector stored, a list of the terms, their
     frequencies and, optionally, position and offest information.
 
     Field (.tvf) --> TVFVersion<NumTerms, Position/Offset, TermFreqs> NumFields
@@ -898,6 +913,12 @@ Page 19
     ?? Positions are stored as delta encoded VInts. This means we only store the difference
          of the current position from the last position
     ?? Offsets are stored as delta encoded VInts. The first VInt is the startOffset, the second
+
+                                                                       Page 20
+
+Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Apache Lucene - Index File Formats
+
          is the endOffset.
 
 9.7. Deleted Documents
@@ -910,11 +931,6 @@ Deletions (.del) --> [Format],ByteCount,BitCount, Bits | DGaps (depending on For
 
 Format,ByteSize,BitCount --> Uint32
 
-                                                                       Page 20
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
 Bits --> <Byte> ByteCount
 
 DGaps --> <DGap,NonzeroByte> NonzeroBytesCount
@@ -950,12 +966,17 @@ the term index, which means the maximum number of unique terms in any single ind
 segment is ~2.1 billion times the term index interval (default 128) = ~274 billion. This is
 technically not a limitation of the index file format, just of Lucene's current implementation.
 
+Page 21
+
+         Copyright © 2006 The Apache Software Foundation. All rights reserved.
+                                                                                                                Apache Lucene - Index File Formats
+
 Similarly, Lucene uses a Java int to refer to document numbers, and the index file format
 uses an Int32 on-disk to store document numbers. This is a limitation of both the index file
 format and the current implementation. Eventually these should be replaced with either
 UInt64 values, or better yet, VInt values which have no limit.
 
-Page 21
+                                                                       Page 22
 
-         Copyright © 2006 The Apache Software Foundation. All rights reserved.
+Copyright © 2006 The Apache Software Foundation. All rights reserved.
 
\ No newline at end of file
diff --git a/src/site/src/documentation/content/xdocs/fileformats.xml b/src/site/src/documentation/content/xdocs/fileformats.xml
index 2310ce8..960fb99 100644
--- a/src/site/src/documentation/content/xdocs/fileformats.xml
+++ b/src/site/src/documentation/content/xdocs/fileformats.xml
@@ -63,6 +63,30 @@
 		change in 2.1).
             </p>
 
+            <p>
+	        In version 2.4, Strings are now written as true UTF-8
+	        byte sequence, not Java's modified UTF-8.  See issue
+	        LUCENE-510 for details.
+            </p>
+
+	    <p>
+	        In version 2.9, an optional opaque Map&lt;String,String&gt;
+	        CommitUserData may be passed to IndexWriter's commit
+	        methods (and later retrieved), which is recorded in
+	        the segments_N file.  See issue LUCENE-1382 for
+	        details.  Also, diagnostics were added to each segment
+	        written recording details about why it was written
+	        (due to flush, merge; which OS/JRE was used; etc.).
+	        See issue LUCENE-1654 for details.
+            </p>
+	    
+	    <p>
+	        In version 3.0, compressed fields are no longer
+	        written to the index (they can still be read, but on
+	        merge the new segment will write them,
+	        uncompressed). See issue LUCENE-1960 for details.
+            </p>
+
         </section>
 
         <section id="Definitions"><title>Definitions</title>

