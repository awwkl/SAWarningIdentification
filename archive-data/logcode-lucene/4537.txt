GitDiffStart: 969dcdb43cbf9108573ace9b1047e5b06f2d8a75 | Sat Jan 10 13:16:06 2015 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.java b/lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.java
index db224ba..aa1baff 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/NumericTokenStream.java
@@ -17,6 +17,8 @@ package org.apache.lucene.analysis;
  * limitations under the License.
  */
 
+import java.util.Objects;
+
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute;
@@ -224,13 +226,7 @@ public final class NumericTokenStream extends TokenStream {
 
     @Override
     public int hashCode() {
-      final int prime = 31;
-      int result = 1;
-      result = prime * result + precisionStep;
-      result = prime * result + shift;
-      result = prime * result + Long.hashCode(value);
-      result = prime * result + valueSize;
-      return result;
+      return Objects.hash(precisionStep, shift, value, valueSize);
     }
 
     @Override
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/prefix/CellTokenStream.java b/lucene/spatial/src/java/org/apache/lucene/spatial/prefix/CellTokenStream.java
index 4784090..7d433a9 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/prefix/CellTokenStream.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/prefix/CellTokenStream.java
@@ -29,6 +29,7 @@ import org.apache.lucene.util.BytesRef;
 
 import java.io.IOException;
 import java.util.Iterator;
+import java.util.Objects;
 
 /**
  * A TokenStream used internally by {@link org.apache.lucene.spatial.prefix.PrefixTreeStrategy}.
@@ -134,11 +135,7 @@ class CellTokenStream extends TokenStream {
 
     @Override
     public int hashCode() {
-      final int prime = 31;
-      int result = 1;
-      result = prime * result + ((cell == null) ? 0 : cell.hashCode());
-      result = prime * result + Boolean.hashCode(omitLeafByte);
-      return result;
+      return Objects.hash(cell, omitLeafByte);
     }
 
     @Override

