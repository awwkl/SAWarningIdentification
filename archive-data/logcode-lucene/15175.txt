GitDiffStart: 80d436e29f477396416aca1d84acd0b01c172c11 | Fri Jul 15 08:41:26 2011 +0000
diff --git a/solr/contrib/dataimporthandler-extras/src/test/org/apache/solr/handler/dataimport/TestTikaEntityProcessor.java b/solr/contrib/dataimporthandler-extras/src/test/org/apache/solr/handler/dataimport/TestTikaEntityProcessor.java
index 4cb650d..7912c5f 100644
--- a/solr/contrib/dataimporthandler-extras/src/test/org/apache/solr/handler/dataimport/TestTikaEntityProcessor.java
+++ b/solr/contrib/dataimporthandler-extras/src/test/org/apache/solr/handler/dataimport/TestTikaEntityProcessor.java
@@ -18,12 +18,44 @@ package org.apache.solr.handler.dataimport;
 
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.xml.sax.InputSource;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+import java.io.StringReader;
+import java.io.StringWriter;
 
 /**Testcase for TikaEntityProcessor
  *
- * @since solr 1.5 
+ * @since solr 3.1
  */
 public class TestTikaEntityProcessor extends AbstractDataImportHandlerTestCase {
+  private String conf =
+  "<dataConfig>" +
+  "  <dataSource type=\"BinFileDataSource\"/>" +
+  "  <document>" +
+  "    <entity processor=\"TikaEntityProcessor\" url=\"" + getFile("solr-word.pdf").getAbsolutePath() + "\" >" +
+  "      <field column=\"Author\" meta=\"true\" name=\"author\"/>" +
+  "      <field column=\"title\" meta=\"true\" name=\"title\"/>" +
+  "      <field column=\"text\"/>" +
+  "     </entity>" +
+  "  </document>" +
+  "</dataConfig>";
+
+  private String[] tests = {
+      "//*[@numFound='1']"
+      ,"//str[@name='author'][.='Grant Ingersoll']"
+      ,"//str[@name='title'][.='solr-word']"
+      ,"//str[@name='text']"
+  };
+
+
   @BeforeClass
   public static void beforeClass() throws Exception {
     initCore("dataimport-solrconfig.xml", "dataimport-schema-no-unique-key.xml", getFile("solr-dihextras").getAbsolutePath());
@@ -31,23 +63,21 @@ public class TestTikaEntityProcessor extends AbstractDataImportHandlerTestCase {
 
   @Test
   public void testIndexingWithTikaEntityProcessor() throws Exception {
-    String conf =
-            "<dataConfig>" +
-                    "  <dataSource type=\"BinFileDataSource\"/>" +
-                    "  <document>" +
-                    "    <entity processor=\"TikaEntityProcessor\" url=\"" + getFile("solr-word.pdf").getAbsolutePath() + "\" >" +
-                    "      <field column=\"Author\" meta=\"true\" name=\"author\"/>" +
-                    "      <field column=\"title\" meta=\"true\" name=\"title\"/>" +
-                    "      <field column=\"text\"/>" +
-                    "     </entity>" +
-                    "  </document>" +
-                    "</dataConfig>";
     runFullImport(conf);
-    assertQ(req("*:*")
-            ,"//*[@numFound='1']"
-            ,"//str[@name='author'][.='Grant Ingersoll']"
-            ,"//str[@name='title'][.='solr-word']"
-            ,"//str[@name='text']"
-            );
+    assertQ(req("*:*"), tests );
   }
+
+  @Test
+  public void testIndexingWithTikaEntityProcessorThreaded() throws Exception {
+    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
+    Document doc = builder.parse(new InputSource(new StringReader(conf)));
+    ((Element) doc.getElementsByTagName("entity").item(0)).setAttribute("threads", "1");
+    Transformer trans = TransformerFactory.newInstance().newTransformer();
+    StringWriter writer = new StringWriter();
+    trans.transform(new DOMSource(doc), new StreamResult(writer));
+
+    runFullImport(writer.toString());
+    assertQ(req("*:*"), tests );
+  }
+
 }
diff --git a/solr/contrib/dataimporthandler/CHANGES.txt b/solr/contrib/dataimporthandler/CHANGES.txt
index 1b230df..150a15c 100644
--- a/solr/contrib/dataimporthandler/CHANGES.txt
+++ b/solr/contrib/dataimporthandler/CHANGES.txt
@@ -18,6 +18,7 @@ Bug Fixes
 ----------------------
 * SOLR-2644: When using threads=2 the default logging is set too high (Bill Bell via shalin)
 * SOLR-2492: DIH does not commit if only deletes are processed (James Dyer via shalin)
+* SOLR-2186: DataImportHandler's multi-threaded option throws NPE (Lance Norskog, Frank Wesemann, shalin)
 
 ==================  3.3.0 ==================
 
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ContextImpl.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ContextImpl.java
index 87b1ae2..1b32005 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ContextImpl.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ContextImpl.java
@@ -33,7 +33,7 @@ import java.util.concurrent.ConcurrentHashMap;
  * @since solr 1.3
  */
 public class ContextImpl extends Context {
-  private DataConfig.Entity entity;
+  protected DataConfig.Entity entity;
 
   private ContextImpl parent;
 
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ThreadedContext.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ThreadedContext.java
index cf550ff..0386e76 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ThreadedContext.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ThreadedContext.java
@@ -28,7 +28,7 @@ public class ThreadedContext extends ContextImpl{
 
   public ThreadedContext(DocBuilder.EntityRunner entityRunner, DocBuilder docBuilder) {
     super(entityRunner.entity,
-            null,//to be fethed realtime
+            null,//to be fetched realtime
             null,
             null,
             docBuilder.session,
@@ -75,7 +75,7 @@ public class ThreadedContext extends ContextImpl{
   @Override
   public String getResolvedEntityAttribute(String name) {
     checkLimited();
-    return super.getResolvedEntityAttribute(name);
+    return entity == null ? null : getVariableResolver().replaceTokens(entity.allAttributes.get(name));
   }
 
   @Override

