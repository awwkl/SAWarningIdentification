GitDiffStart: 4985b070409782508762482cd19b84abca1830fb | Wed Jul 4 10:38:36 2012 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.java b/lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.java
index aee5e07..d3144e2 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.java
@@ -151,7 +151,7 @@ public abstract class FixedIntBlockIndexInput extends IntIndexInput {
     }
 
     @Override
-    public void set(final IntIndexInput.Index other) {
+    public void copyFrom(final IntIndexInput.Index other) {
       final Index idx = (Index) other;
       fp = idx.fp;
       upto = idx.upto;
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexInput.java b/lucene/core/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexInput.java
index 392f106..0414aa8 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexInput.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexInput.java
@@ -183,7 +183,7 @@ public abstract class VariableIntBlockIndexInput extends IntIndexInput {
     }
 
     @Override
-    public void set(final IntIndexInput.Index other) {
+    public void copyFrom(final IntIndexInput.Index other) {
       final Index idx = (Index) other;
       fp = idx.fp;
       upto = idx.upto;
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/sep/IntIndexInput.java b/lucene/core/src/java/org/apache/lucene/codecs/sep/IntIndexInput.java
index 9f35b3b..d75b9bf 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/sep/IntIndexInput.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/sep/IntIndexInput.java
@@ -44,7 +44,7 @@ public abstract class IntIndexInput implements Closeable {
     /** Seeks primary stream to the last read offset */
     public abstract void seek(IntIndexInput.Reader stream) throws IOException;
 
-    public abstract void set(Index other);
+    public abstract void copyFrom(Index other);
     
     @Override
     public abstract Index clone();
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java b/lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java
index c9f300f..d7fdc21 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.java
@@ -160,13 +160,13 @@ public class SepPostingsReader extends PostingsReaderBase {
       if (docIndex == null) {
         docIndex = other.docIndex.clone();
       } else {
-        docIndex.set(other.docIndex);
+        docIndex.copyFrom(other.docIndex);
       }
       if (other.freqIndex != null) {
         if (freqIndex == null) {
           freqIndex = other.freqIndex.clone();
         } else {
-          freqIndex.set(other.freqIndex);
+          freqIndex.copyFrom(other.freqIndex);
         }
       } else {
         freqIndex = null;
@@ -175,7 +175,7 @@ public class SepPostingsReader extends PostingsReaderBase {
         if (posIndex == null) {
           posIndex = other.posIndex.clone();
         } else {
-          posIndex.set(other.posIndex);
+          posIndex.copyFrom(other.posIndex);
         }
       } else {
         posIndex = null;
@@ -356,11 +356,11 @@ public class SepPostingsReader extends PostingsReaderBase {
 
       // TODO: can't we only do this if consumer
       // skipped consuming the previous docs?
-      docIndex.set(termState.docIndex);
+      docIndex.copyFrom(termState.docIndex);
       docIndex.seek(docReader);
 
       if (!omitTF) {
-        freqIndex.set(termState.freqIndex);
+        freqIndex.copyFrom(termState.freqIndex);
         freqIndex.seek(freqReader);
       }
 
@@ -520,15 +520,15 @@ public class SepPostingsReader extends PostingsReaderBase {
 
       // TODO: can't we only do this if consumer
       // skipped consuming the previous docs?
-      docIndex.set(termState.docIndex);
+      docIndex.copyFrom(termState.docIndex);
       docIndex.seek(docReader);
       //System.out.println("  docIndex=" + docIndex);
 
-      freqIndex.set(termState.freqIndex);
+      freqIndex.copyFrom(termState.freqIndex);
       freqIndex.seek(freqReader);
       //System.out.println("  freqIndex=" + freqIndex);
 
-      posIndex.set(termState.posIndex);
+      posIndex.copyFrom(termState.posIndex);
       //System.out.println("  posIndex=" + posIndex);
       posSeekPending = true;
       payloadPending = false;
@@ -633,7 +633,7 @@ public class SepPostingsReader extends PostingsReaderBase {
           // NOTE: don't seek pos here; do it lazily
           // instead.  Eg a PhraseQuery may skip to many
           // docs before finally asking for positions...
-          posIndex.set(skipper.getPosIndex());
+          posIndex.copyFrom(skipper.getPosIndex());
           posSeekPending = true;
           count = newCount;
           doc = accum = skipper.getDoc();
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/sep/SepSkipListReader.java b/lucene/core/src/java/org/apache/lucene/codecs/sep/SepSkipListReader.java
index a259a1d..e1f8b28 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/sep/SepSkipListReader.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/sep/SepSkipListReader.java
@@ -108,12 +108,12 @@ class SepSkipListReader extends MultiLevelSkipListReader {
     lastPayloadPointer = payloadBasePointer;
 
     for(int i=0;i<maxNumberOfSkipLevels;i++) {
-      docIndex[i].set(docBaseIndex);
+      docIndex[i].copyFrom(docBaseIndex);
       if (freqIndex != null) {
-        freqIndex[i].set(freqBaseIndex);
+        freqIndex[i].copyFrom(freqBaseIndex);
       }
       if (posBaseIndex != null) {
-        posIndex[i].set(posBaseIndex);
+        posIndex[i].copyFrom(posBaseIndex);
       }
     }
     Arrays.fill(payloadPointer, payloadBasePointer);
@@ -145,20 +145,20 @@ class SepSkipListReader extends MultiLevelSkipListReader {
     lastPayloadPointer = payloadPointer[level];
     lastPayloadLength = payloadLength[level];
     if (freqIndex != null) {
-      lastFreqIndex.set(freqIndex[level]);
+      lastFreqIndex.copyFrom(freqIndex[level]);
     }
-    lastDocIndex.set(docIndex[level]);
+    lastDocIndex.copyFrom(docIndex[level]);
     if (lastPosIndex != null) {
-      lastPosIndex.set(posIndex[level]);
+      lastPosIndex.copyFrom(posIndex[level]);
     }
 
     if (level > 0) {
       if (freqIndex != null) {
-        freqIndex[level-1].set(freqIndex[level]);
+        freqIndex[level-1].copyFrom(freqIndex[level]);
       }
-      docIndex[level-1].set(docIndex[level]);
+      docIndex[level-1].copyFrom(docIndex[level]);
       if (posIndex != null) {
-        posIndex[level-1].set(posIndex[level]);
+        posIndex[level-1].copyFrom(posIndex[level]);
       }
     }
   }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/mocksep/MockSingleIntIndexInput.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/mocksep/MockSingleIntIndexInput.java
index 91585bf..68d224e 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/mocksep/MockSingleIntIndexInput.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/mocksep/MockSingleIntIndexInput.java
@@ -84,7 +84,7 @@ public class MockSingleIntIndexInput extends IntIndexInput {
     }
 
     @Override
-    public void set(IntIndexInput.Index other) {
+    public void copyFrom(IntIndexInput.Index other) {
       fp = ((MockSingleIntIndexInputIndex) other).fp;
     }
 

