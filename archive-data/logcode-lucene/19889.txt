GitDiffStart: 3c02e971ea6b23dfd0f5c7d91a5c90959b452432 | Thu Jul 16 15:17:39 2009 +0000
diff --git a/src/java/org/apache/solr/search/function/FunctionQuery.java b/src/java/org/apache/solr/search/function/FunctionQuery.java
index b643ad9..5fd3f50 100644
--- a/src/java/org/apache/solr/search/function/FunctionQuery.java
+++ b/src/java/org/apache/solr/search/function/FunctionQuery.java
@@ -107,6 +107,34 @@ public class FunctionQuery extends Query {
       vals = func.getValues(reader);
     }
 
+    @Override
+    public int docID() {
+      return doc;
+    }
+
+    @Override
+    // instead of matching all docs, we could also embed a query.
+    // the score could either ignore the subscore, or boost it.
+    // Containment:  floatline(foo:myTerm, "myFloatField", 1.0, 0.0f)
+    // Boost:        foo:myTerm^floatline("myFloatField",1.0,0.0f)
+    public int nextDoc() throws IOException {
+      for(;;) {
+        ++doc;
+        if (doc>=maxDoc) {
+          return doc=NO_MORE_DOCS;
+        }
+        if (hasDeletions && reader.isDeleted(doc)) continue;
+        return doc;
+      }
+    }
+
+    @Override
+    public int advance(int target) throws IOException {
+      // this will work even if target==NO_MORE_DOCS
+      doc=target-1;
+      return nextDoc();
+    }
+
     // instead of matching all docs, we could also embed a query.
     // the score could either ignore the subscore, or boost it.
     // Containment:  floatline(foo:myTerm, "myFloatField", 1.0, 0.0f)
diff --git a/src/java/org/apache/solr/search/function/ValueSource.java b/src/java/org/apache/solr/search/function/ValueSource.java
index 46f6d96..75036e0 100644
--- a/src/java/org/apache/solr/search/function/ValueSource.java
+++ b/src/java/org/apache/solr/search/function/ValueSource.java
@@ -78,6 +78,27 @@ class ValueSourceScorer extends Scorer {
     return true;
   }
 
+  @Override
+  public int docID() {
+    return doc;
+  }
+
+  @Override
+  public int nextDoc() throws IOException {
+    for(;;) {
+      doc++;
+      if (doc >= maxDoc) return doc=NO_MORE_DOCS;
+      if (matches(doc)) return doc;
+    }
+  }
+
+  @Override
+  public int advance(int target) throws IOException {
+    // also works fine when target==NO_MORE_DOCS
+    doc = target-1;
+    return nextDoc();
+  }
+
   public int doc() {
     return doc;
   }

