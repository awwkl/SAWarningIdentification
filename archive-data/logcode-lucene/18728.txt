GitDiffStart: 892bc7f55ab9e3b46136c890a60b23338f8fc8b7 | Wed Dec 2 16:08:56 2009 +0000
diff --git a/NOTICE.txt b/NOTICE.txt
index 8ae6c9b..8eeeb61 100644
--- a/NOTICE.txt
+++ b/NOTICE.txt
@@ -20,6 +20,11 @@ stopword list that is BSD-licensed created by Jacques Savoy.  The file resides i
 contrib/analyzers/common/src/resources/org/apache/lucene/analysis/fa/stopwords.txt.
 See http://members.unine.ch/jacques.savoy/clef/index.html.
 
+The Bulgarian analyzer (contrib/analyzers) comes with a default
+stopword list that is BSD-licensed created by Jacques Savoy.  The file resides in
+contrib/analyzers/common/src/resources/org/apache/lucene/analysis/bg/stopwords.txt.
+See http://members.unine.ch/jacques.savoy/clef/index.html.
+
 Includes lib/servlet-api-2.4.jar from  Apache Tomcat
 
 The SmartChineseAnalyzer source code (under contrib/analyzers) was
diff --git a/contrib/CHANGES.txt b/contrib/CHANGES.txt
index 9def22f..cc15487 100644
--- a/contrib/CHANGES.txt
+++ b/contrib/CHANGES.txt
@@ -15,6 +15,8 @@ New features
  * LUCENE-2067: Add a Czech light stemmer. CzechAnalyzer will now stem words
    when Version is set to 3.1 or higher.  (Robert Muir)
    
+ * LUCENE-2062: Add a Bulgarian analyzer.  (Robert Muir, Simon Willnauer)
+   
 
 ======================= Release 3.0.0 2009-11-25 =======================
 
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/bg/BulgarianAnalyzer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/bg/BulgarianAnalyzer.java
new file mode 100644
index 0000000..3e93e83
--- /dev/null
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/bg/BulgarianAnalyzer.java
@@ -0,0 +1,176 @@
+package org.apache.lucene.analysis.bg;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.util.Collections;
+import java.util.Set;
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.CharArraySet;
+import org.apache.lucene.analysis.LowerCaseFilter;
+import org.apache.lucene.analysis.StopFilter;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.Tokenizer;
+import org.apache.lucene.analysis.WordlistLoader;
+import org.apache.lucene.analysis.standard.StandardFilter;
+import org.apache.lucene.analysis.standard.StandardTokenizer;
+import org.apache.lucene.util.Version;
+
+/**
+ * {@link Analyzer} for Bulgarian.
+ * <p>
+ * This analyzer implements light-stemming as specified by: <i> Searching
+ * Strategies for the Bulgarian Language </i>
+ * http://members.unine.ch/jacques.savoy/Papers/BUIR.pdf
+ * <p>
+ */
+public final class BulgarianAnalyzer extends Analyzer {
+  
+  /**
+   * File containing default Bulgarian stopwords.
+   * 
+   * Default stopword list is from
+   * http://members.unine.ch/jacques.savoy/clef/index.html The stopword list is
+   * BSD-Licensed.
+   */
+  public final static String DEFAULT_STOPWORD_FILE = "stopwords.txt";
+  
+  /**
+   * Contains the stopwords used with the StopFilter.
+   */
+  private final Set<?> stoptable;
+  /**
+   * The comment character in the stopwords file. All lines prefixed with this
+   * will be ignored
+   */
+  public static final String STOPWORDS_COMMENT = "#";
+  
+  /**
+   * Returns an unmodifiable instance of the default stop-words set.
+   * 
+   * @return an unmodifiable instance of the default stop-words set.
+   */
+  public static Set<String> getDefaultStopSet() {
+    return DefaultSetHolder.DEFAULT_STOP_SET;
+  }
+  
+  /**
+   * Atomically loads the DEFAULT_STOP_SET in a lazy fashion once the outer
+   * class accesses the static final set the first time.;
+   */
+  private static class DefaultSetHolder {
+    static final Set<String> DEFAULT_STOP_SET;
+    
+    static {
+      try {
+        DEFAULT_STOP_SET = loadDefaultStopWordSet();
+      } catch (Exception ex) {
+        // default set should always be present as it is part of the
+        // distribution (JAR)
+        throw new RuntimeException("Unable to load default stopword set", ex);
+      }
+    }
+    
+    static Set<String> loadDefaultStopWordSet() throws IOException {
+      final InputStream stream = BulgarianAnalyzer.class
+          .getResourceAsStream(DEFAULT_STOPWORD_FILE);
+      try {
+        InputStreamReader reader = new InputStreamReader(stream, "UTF-8");
+        // make sure it is unmodifiable as we expose it in the outer class
+        return Collections.unmodifiableSet(WordlistLoader.getWordSet(reader,
+            STOPWORDS_COMMENT));
+      } finally {
+        if(stream != null)
+          stream.close();
+      }
+    }
+  }
+  
+  private final Version matchVersion;
+  
+  /**
+   * Builds an analyzer with the default stop words:
+   * {@link #DEFAULT_STOPWORD_FILE}.
+   */
+  public BulgarianAnalyzer(Version matchVersion) {
+    this(matchVersion, DefaultSetHolder.DEFAULT_STOP_SET);
+  }
+  
+  /**
+   * Builds an analyzer with the given stop words.
+   */
+  public BulgarianAnalyzer(Version matchVersion, Set<?> stopwords) {
+    super();
+    stoptable = CharArraySet.unmodifiableSet(CharArraySet.copy(matchVersion,
+        stopwords));
+    this.matchVersion = matchVersion;
+  }
+  
+  /**
+   * Creates a {@link TokenStream} which tokenizes all the text in the provided
+   * {@link Reader}.
+   * 
+   * @return A {@link TokenStream} built from an {@link StandardTokenizer}
+   *         filtered with {@link StandardFilter}, {@link LowerCaseFilter},
+   *         {@link StopFilter}, and {@link BulgarianStemFilter}.
+   */
+  @Override
+  public TokenStream tokenStream(String fieldName, Reader reader) {
+    TokenStream result = new StandardTokenizer(matchVersion, reader);
+    result = new StandardFilter(result);
+    result = new LowerCaseFilter(matchVersion, result);
+    result = new StopFilter(matchVersion, result, stoptable);
+    result = new BulgarianStemFilter(result);
+    return result;
+  }
+  
+  private class SavedStreams {
+    Tokenizer source;
+    TokenStream result;
+  };
+  
+  /**
+   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the
+   * text in the provided {@link Reader}.
+   * 
+   * @return A {@link TokenStream} built from an {@link StandardTokenizer}
+   *         filtered with {@link StandardFilter}, {@link LowerCaseFilter},
+   *         {@link StopFilter}, and {@link BulgarianStemFilter}.
+   */
+  @Override
+  public TokenStream reusableTokenStream(String fieldName, Reader reader)
+      throws IOException {
+    SavedStreams streams = (SavedStreams) getPreviousTokenStream();
+    if (streams == null) {
+      streams = new SavedStreams();
+      streams.source = new StandardTokenizer(matchVersion, reader);
+      streams.result = new StandardFilter(streams.source);
+      streams.result = new LowerCaseFilter(matchVersion, streams.result);
+      streams.result = new StopFilter(matchVersion, streams.result, stoptable);
+      streams.result = new BulgarianStemFilter(streams.result);
+      setPreviousTokenStream(streams);
+    } else {
+      streams.source.reset(reader);
+    }
+    return streams.result;
+  }
+}
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/bg/BulgarianStemFilter.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/bg/BulgarianStemFilter.java
new file mode 100644
index 0000000..b2bfc40
--- /dev/null
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/bg/BulgarianStemFilter.java
@@ -0,0 +1,50 @@
+package org.apache.lucene.analysis.bg;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.analysis.TokenFilter;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.tokenattributes.TermAttribute;
+
+/**
+ * A {@link TokenFilter} that applies {@link BulgarianStemmer} to stem Bulgarian
+ * words.
+ */
+public final class BulgarianStemFilter extends TokenFilter {
+  private final BulgarianStemmer stemmer;
+  private final TermAttribute termAtt;
+  
+  public BulgarianStemFilter(final TokenStream input) {
+    super(input);
+    stemmer = new BulgarianStemmer();
+    termAtt = addAttribute(TermAttribute.class);
+  }
+  
+  @Override
+  public boolean incrementToken() throws IOException {
+    if (input.incrementToken()) {
+      final int newlen = stemmer.stem(termAtt.termBuffer(), termAtt.termLength());
+      termAtt.setTermLength(newlen);
+      return true;
+    } else {
+      return false;
+    }
+  }
+}
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/bg/BulgarianStemmer.java b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/bg/BulgarianStemmer.java
new file mode 100644
index 0000000..1114517
--- /dev/null
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/bg/BulgarianStemmer.java
@@ -0,0 +1,152 @@
+package org.apache.lucene.analysis.bg;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Light Stemmer for Bulgarian.
+ * <p>
+ * Implements the algorithm described in:  
+ * <i>
+ * Searching Strategies for the Bulgarian Language
+ * </i>
+ * http://members.unine.ch/jacques.savoy/Papers/BUIR.pdf
+ */
+public class BulgarianStemmer {
+  
+  /**
+   * Stem an input buffer of Bulgarian text.
+   * 
+   * @param s input buffer
+   * @param len length of input buffer
+   * @return length of input buffer after normalization
+   */
+  public int stem(final char s[], int len) {
+    if (len < 4) // do not stem
+      return len;
+    
+    if (len > 5 && endsWith(s, len, "и?а"))
+      return len - 3;
+    
+    len = removeArticle(s, len);
+    len = removePlural(s, len);
+    
+    if (len > 3) {
+      if (endsWith(s, len, "?"))
+        len--;
+      if (endsWith(s, len, "а") ||
+          endsWith(s, len, "о") ||
+          endsWith(s, len, "е"))
+        len--;
+    }
+    
+    // the rule to rewrite ен -> н is duplicated in the paper.
+    // in the perl implementation referenced by the paper, this is fixed.
+    // (it is fixed here as well)
+    if (len > 4 && endsWith(s, len, "ен")) {
+      s[len - 2] = 'н'; // replace with н
+      len--;
+    }
+    
+    if (len > 5 && s[len - 2] == '?') {
+      s[len - 2] = s[len - 1]; // replace ?N with N
+      len--;
+    }
+
+    return len;
+  }
+  
+  /**
+   * Mainly remove the definite article
+   * @param s input buffer
+   * @param len length of input buffer
+   * @return new stemmed length
+   */
+  private int removeArticle(final char s[], final int len) {
+    if (len > 6 && endsWith(s, len, "и??"))
+      return len - 3;
+    
+    if (len > 5) {
+      if (endsWith(s, len, "??") ||
+          endsWith(s, len, "?о") ||
+          endsWith(s, len, "?е") ||
+          endsWith(s, len, "?а") ||
+          endsWith(s, len, "и?"))
+        return len - 2;
+    }
+    
+    if (len > 4 && endsWith(s, len, "??"))
+      return len - 2;
+
+    return len;
+  }
+  
+  private int removePlural(final char s[], final int len) {
+    if (len > 6) {
+      if (endsWith(s, len, "ов?и"))
+        return len - 3; // replace with о
+      if (endsWith(s, len, "ове"))
+        return len - 3;
+      if (endsWith(s, len, "еве")) {
+        s[len - 3] = 'й'; // replace with й
+        return len - 2;
+      }
+    }
+    
+    if (len > 5) {
+      if (endsWith(s, len, "и?а"))
+        return len - 3;
+      if (endsWith(s, len, "?а"))
+        return len - 2;
+      if (endsWith(s, len, "?и")) {
+        s[len - 2] = 'к'; // replace with к
+        return len - 1;
+      }
+      if (endsWith(s, len, "зи")) {
+        s[len - 2] = 'г'; // replace with г
+        return len - 1;
+      }
+      
+      if (s[len - 3] == 'е' && s[len - 1] == 'и') {
+        s[len - 3] = '?'; // replace е with ?, remove и
+        return len - 1;
+      }
+    }
+    
+    if (len > 4) {
+      if (endsWith(s, len, "?и")) {
+        s[len - 2] = '?'; // replace with ?
+        return len - 1;
+      }
+      if (endsWith(s, len, "и"))
+        return len - 1;
+    }
+    
+    return len;
+  }
+  
+  private boolean endsWith(final char s[], final int len, final String suffix) {
+    final int suffixLen = suffix.length();
+    if (suffixLen > len)
+      return false;
+    for (int i = suffixLen - 1; i >= 0; i--)
+      if (s[len -(suffixLen - i)] != suffix.charAt(i))
+        return false;
+    
+    return true;
+  }
+}
diff --git a/contrib/analyzers/common/src/java/org/apache/lucene/analysis/bg/package.html b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/bg/package.html
new file mode 100644
index 0000000..74c4008
--- /dev/null
+++ b/contrib/analyzers/common/src/java/org/apache/lucene/analysis/bg/package.html
@@ -0,0 +1,22 @@
+<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
+<!--
+ Licensed to the Apache Software Foundation (ASF) under one or more
+ contributor license agreements.  See the NOTICE file distributed with
+ this work for additional information regarding copyright ownership.
+ The ASF licenses this file to You under the Apache License, Version 2.0
+ (the "License"); you may not use this file except in compliance with
+ the License.  You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+<html><head></head>
+<body>
+Analyzer for Bulgarian.
+</body>
+</html>
diff --git a/contrib/analyzers/common/src/resources/org/apache/lucene/analysis/bg/stopwords.txt b/contrib/analyzers/common/src/resources/org/apache/lucene/analysis/bg/stopwords.txt
new file mode 100644
index 0000000..1ae4ba2
--- /dev/null
+++ b/contrib/analyzers/common/src/resources/org/apache/lucene/analysis/bg/stopwords.txt
@@ -0,0 +1,193 @@
+# This file was created by Jacques Savoy and is distributed under the BSD license.
+# See http://members.unine.ch/jacques.savoy/clef/index.html.
+# Also see http://www.opensource.org/licenses/bsd-license.html
+а
+аз
+ако
+ала
+бе
+без
+бе?е
+би
+бил
+била
+били
+било
+близо
+б?да?
+б?де
+б??а
+в
+ва?
+ва?
+ва?а
+ве?о??но
+ве?е
+взема
+ви
+вие
+винаги
+в?е
+в?еки
+в?и?ки
+в?и?ко
+в??ка
+в?в
+в?п?еки
+в????
+г
+ги
+главно
+го
+д
+да
+дали
+до
+дока?о
+докога
+до?и
+до?ега
+до??а
+е
+едва
+един
+е?о
+за
+зад
+заедно
+за?ади
+за?ега
+за?ова
+за?о
+за?о?о
+и
+из
+или
+им
+има
+има?
+и?ка
+й
+каза
+как
+каква
+какво
+как?о
+как?в
+ка?о
+кога
+кога?о
+кое?о
+кои?о
+кой
+кой?о
+колко
+ко??о
+к?де
+к?де?о
+к?м
+ли
+м
+ме
+межд?
+мен
+ми
+мнозина
+мога
+мога?
+може
+мол?
+момен?а
+м?
+н
+на
+над
+назад
+най
+нап?ави
+нап?ед
+нап?име?
+на?
+не
+него
+не?
+ни
+ние
+никой
+ни?о
+но
+н?кои
+н?кой
+н?ма
+оба?е
+около
+о?вен
+о?обено
+о?
+о?го?е
+о?ново
+о?е
+пак
+по
+пове?е
+пове?е?о
+под
+поне
+по?ади
+по?ле
+по??и
+п?ави
+п?ед
+п?еди
+п?ез
+п?и
+п?к
+п??во
+?
+?а
+?амо
+?е
+?ега
+?и
+?ко?о
+?лед
+?ме
+?по?ед
+??ед
+??е??
+??е
+??м
+???
+???о
+?
+?ази
+?ака
+?акива
+?ак?в
+?ам
+?вой
+?е
+?ези
+?и
+?н
+?о
+?ова
+?огава
+?ози
+?ой
+?олкова
+?о?но
+???бва
+??к
+??й
+??
+???
+?
+?а?е?ва
+?
+?е
+?е??о
+??ез
+?е
+?ом
+?
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianAnalyzer.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianAnalyzer.java
new file mode 100644
index 0000000..2203d35
--- /dev/null
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianAnalyzer.java
@@ -0,0 +1,70 @@
+package org.apache.lucene.analysis.bg;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Collections;
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.BaseTokenStreamTestCase;
+import org.apache.lucene.util.Version;
+
+/**
+ * Test the Bulgarian analyzer
+ */
+public class TestBulgarianAnalyzer extends BaseTokenStreamTestCase {
+  
+  /**
+   * This test fails with NPE when the stopwords file is missing in classpath
+   */
+  public void testResourcesAvailable() {
+    new BulgarianAnalyzer(Version.LUCENE_CURRENT);
+  }
+  
+  public void testStopwords() throws IOException {
+    Analyzer a = new BulgarianAnalyzer(Version.LUCENE_CURRENT);
+    assertAnalyzesTo(a, "?ак ?е казва??", new String[] {"казва?"});
+  }
+  
+  public void testCustomStopwords() throws IOException {
+    Analyzer a = new BulgarianAnalyzer(Version.LUCENE_CURRENT, Collections
+        .emptySet());
+    assertAnalyzesTo(a, "?ак ?е казва??", 
+        new String[] {"как", "?е", "казва?"});
+  }
+  
+  public void testReusableTokenStream() throws IOException {
+    Analyzer a = new BulgarianAnalyzer(Version.LUCENE_CURRENT);
+    assertAnalyzesToReuse(a, "док?мен?и", new String[] {"док?мен?"});
+    assertAnalyzesToReuse(a, "док?мен?", new String[] {"док?мен?"});
+  }
+  
+  /**
+   * Test some examples from the paper
+   */
+  public void testBasicExamples() throws IOException {
+    Analyzer a = new BulgarianAnalyzer(Version.LUCENE_CURRENT);
+    assertAnalyzesTo(a, "ене?гийни к?изи", new String[] {"ене?гийн", "к?из"});
+    assertAnalyzesTo(a, "??омна?а ене?ги?", new String[] {"а?омн", "ене?г"});
+    
+    assertAnalyzesTo(a, "комп???и", new String[] {"комп???"});
+    assertAnalyzesTo(a, "комп????", new String[] {"комп???"});
+    
+    assertAnalyzesTo(a, "г?адове", new String[] {"г?ад"});
+  }
+}
diff --git a/contrib/analyzers/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianStemmer.java b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianStemmer.java
new file mode 100644
index 0000000..e01bb49
--- /dev/null
+++ b/contrib/analyzers/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianStemmer.java
@@ -0,0 +1,210 @@
+package org.apache.lucene.analysis.bg;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.analysis.BaseTokenStreamTestCase;
+import org.apache.lucene.util.Version;
+
+/**
+ * Test the Bulgarian Stemmer
+ */
+public class TestBulgarianStemmer extends BaseTokenStreamTestCase {
+  /**
+   * Test showing how masculine noun forms conflate. An example noun for each
+   * common (and some rare) plural pattern is listed.
+   */
+  public void testMasculineNouns() throws IOException {
+    BulgarianAnalyzer a = new BulgarianAnalyzer(Version.LUCENE_CURRENT);
+    
+    // -и pattern
+    assertAnalyzesTo(a, "г?ад", new String[] {"г?ад"});
+    assertAnalyzesTo(a, "г?ада", new String[] {"г?ад"});
+    assertAnalyzesTo(a, "г?ад??", new String[] {"г?ад"});
+    assertAnalyzesTo(a, "г?адове", new String[] {"г?ад"});
+    assertAnalyzesTo(a, "г?адове?е", new String[] {"г?ад"});
+    
+    // -ове pattern
+    assertAnalyzesTo(a, "на?од", new String[] {"на?од"});
+    assertAnalyzesTo(a, "на?ода", new String[] {"на?од"});
+    assertAnalyzesTo(a, "на?од??", new String[] {"на?од"});
+    assertAnalyzesTo(a, "на?оди", new String[] {"на?од"});
+    assertAnalyzesTo(a, "на?оди?е", new String[] {"на?од"});
+    assertAnalyzesTo(a, "на?оде", new String[] {"на?од"});
+    
+    // -и?а pattern
+    assertAnalyzesTo(a, "п??", new String[] {"п??"});
+    assertAnalyzesTo(a, "п???", new String[] {"п??"});
+    assertAnalyzesTo(a, "п????", new String[] {"п??"});
+    assertAnalyzesTo(a, "п??и?а", new String[] {"п??"});
+    assertAnalyzesTo(a, "п??и?а?а", new String[] {"п??"});
+    
+    // -?е?а pattern
+    assertAnalyzesTo(a, "г?аде?", new String[] {"г?аде?"});
+    assertAnalyzesTo(a, "г?аде?а", new String[] {"г?аде?"});
+    assertAnalyzesTo(a, "г?аде???", new String[] {"г?аде?"});
+    /* note the below forms conflate with each other, but not the rest */
+    assertAnalyzesTo(a, "г?адов?е", new String[] {"г?адов?"});
+    assertAnalyzesTo(a, "г?адов?е?е", new String[] {"г?адов?"});
+    
+    // -ов?и pattern
+    assertAnalyzesTo(a, "д?до", new String[] {"д?д"});
+    assertAnalyzesTo(a, "д?до?о", new String[] {"д?д"});
+    assertAnalyzesTo(a, "д?дов?и", new String[] {"д?д"});
+    assertAnalyzesTo(a, "д?дов?и?е", new String[] {"д?д"});
+    
+    // -е pattern
+    assertAnalyzesTo(a, "м?ж", new String[] {"м?ж"});
+    assertAnalyzesTo(a, "м?жа", new String[] {"м?ж"});
+    assertAnalyzesTo(a, "м?же", new String[] {"м?ж"});
+    assertAnalyzesTo(a, "м?же?е", new String[] {"м?ж"});
+    assertAnalyzesTo(a, "м?жо", new String[] {"м?ж"});
+    /* word is too short, will not remove -?? */
+    assertAnalyzesTo(a, "м?ж??", new String[] {"м?ж??"});
+    
+    // -а pattern
+    assertAnalyzesTo(a, "к?ак", new String[] {"к?ак"});
+    assertAnalyzesTo(a, "к?ака", new String[] {"к?ак"});
+    assertAnalyzesTo(a, "к?ак??", new String[] {"к?ак"});
+    assertAnalyzesTo(a, "к?ака?а", new String[] {"к?ак"});
+    
+    // б?а?
+    assertAnalyzesTo(a, "б?а?", new String[] {"б?а?"});
+    assertAnalyzesTo(a, "б?а?а", new String[] {"б?а?"});
+    assertAnalyzesTo(a, "б?а???", new String[] {"б?а?"});
+    assertAnalyzesTo(a, "б?а??", new String[] {"б?а?"});
+    assertAnalyzesTo(a, "б?а???а", new String[] {"б?а?"});
+    assertAnalyzesTo(a, "б?а?е", new String[] {"б?а?"});
+  }
+  
+  /**
+   * Test showing how feminine noun forms conflate
+   */
+  public void testFeminineNouns() throws IOException {
+    BulgarianAnalyzer a = new BulgarianAnalyzer(Version.LUCENE_CURRENT);
+    
+    assertAnalyzesTo(a, "ве??", new String[] {"ве??"});
+    assertAnalyzesTo(a, "ве???а", new String[] {"ве??"});
+    assertAnalyzesTo(a, "ве??и", new String[] {"ве??"});
+    assertAnalyzesTo(a, "ве??и?е", new String[] {"ве??"});
+  }
+  
+  /**
+   * Test showing how neuter noun forms conflate an example noun for each common
+   * plural pattern is listed
+   */
+  public void testNeuterNouns() throws IOException {
+    BulgarianAnalyzer a = new BulgarianAnalyzer(Version.LUCENE_CURRENT);
+    
+    // -а pattern
+    assertAnalyzesTo(a, "д??во", new String[] {"д??в"});
+    assertAnalyzesTo(a, "д??во?о", new String[] {"д??в"});
+    assertAnalyzesTo(a, "д??ва", new String[] {"д??в"});
+    assertAnalyzesTo(a, "д??ве?а", new String[] {"д??в"});
+    assertAnalyzesTo(a, "д??ва?а", new String[] {"д??в"});
+    assertAnalyzesTo(a, "д??ве?а?а", new String[] {"д??в"});
+    
+    // -?а pattern
+    assertAnalyzesTo(a, "мо?е", new String[] {"мо?"});
+    assertAnalyzesTo(a, "мо?е?о", new String[] {"мо?"});
+    assertAnalyzesTo(a, "мо?е?а", new String[] {"мо?"});
+    assertAnalyzesTo(a, "мо?е?а?а", new String[] {"мо?"});
+    
+    // -? pattern
+    assertAnalyzesTo(a, "изкл??ение", new String[] {"изкл??ени"});
+    assertAnalyzesTo(a, "изкл??ение?о", new String[] {"изкл??ени"});
+    assertAnalyzesTo(a, "изкл??ени??а", new String[] {"изкл??ени"});
+    /* note the below form in this example does not conflate with the rest */
+    assertAnalyzesTo(a, "изкл??ени?", new String[] {"изкл??н"});
+  }
+  
+  /**
+   * Test showing how adjectival forms conflate
+   */
+  public void testAdjectives() throws IOException {
+    BulgarianAnalyzer a = new BulgarianAnalyzer(Version.LUCENE_CURRENT);
+    assertAnalyzesTo(a, "к?а?ив", new String[] {"к?а?ив"});
+    assertAnalyzesTo(a, "к?а?иви?", new String[] {"к?а?ив"});
+    assertAnalyzesTo(a, "к?а?иви??", new String[] {"к?а?ив"});
+    assertAnalyzesTo(a, "к?а?ива", new String[] {"к?а?ив"});
+    assertAnalyzesTo(a, "к?а?ива?а", new String[] {"к?а?ив"});
+    assertAnalyzesTo(a, "к?а?иво", new String[] {"к?а?ив"});
+    assertAnalyzesTo(a, "к?а?иво?о", new String[] {"к?а?ив"});
+    assertAnalyzesTo(a, "к?а?иви", new String[] {"к?а?ив"});
+    assertAnalyzesTo(a, "к?а?иви?е", new String[] {"к?а?ив"});
+  }
+  
+  /**
+   * Test some exceptional rules, implemented as rewrites.
+   */
+  public void testExceptions() throws IOException {
+    BulgarianAnalyzer a = new BulgarianAnalyzer(Version.LUCENE_CURRENT);
+    
+    // ?и -> к
+    assertAnalyzesTo(a, "?об??веник", new String[] {"?об??веник"});
+    assertAnalyzesTo(a, "?об??веника", new String[] {"?об??веник"});
+    assertAnalyzesTo(a, "?об??веник??", new String[] {"?об??веник"});
+    assertAnalyzesTo(a, "?об??вени?и", new String[] {"?об??веник"});
+    assertAnalyzesTo(a, "?об??вени?и?е", new String[] {"?об??веник"});
+    
+    // зи -> г
+    assertAnalyzesTo(a, "подлог", new String[] {"подлог"});
+    assertAnalyzesTo(a, "подлога", new String[] {"подлог"});
+    assertAnalyzesTo(a, "подлог??", new String[] {"подлог"});
+    assertAnalyzesTo(a, "подлози", new String[] {"подлог"});
+    assertAnalyzesTo(a, "подлози?е", new String[] {"подлог"});
+    
+    // ?и -> ?
+    assertAnalyzesTo(a, "кож??", new String[] {"кож??"});
+    assertAnalyzesTo(a, "кож??а", new String[] {"кож??"});
+    assertAnalyzesTo(a, "кож????", new String[] {"кож??"});
+    assertAnalyzesTo(a, "кож??и", new String[] {"кож??"});
+    assertAnalyzesTo(a, "кож??и?е", new String[] {"кож??"});
+    
+    // ? deletion
+    assertAnalyzesTo(a, "?ен???", new String[] {"?ен??"});
+    assertAnalyzesTo(a, "?ен???а", new String[] {"?ен??"});
+    assertAnalyzesTo(a, "?ен?????", new String[] {"?ен??"});
+    assertAnalyzesTo(a, "?ен??ове", new String[] {"?ен??"});
+    assertAnalyzesTo(a, "?ен??ове?е", new String[] {"?ен??"});
+    
+    // е*и -> ?*
+    assertAnalyzesTo(a, "п?ом?на", new String[] {"п?ом?н"});
+    assertAnalyzesTo(a, "п?ом?на?а", new String[] {"п?ом?н"});
+    assertAnalyzesTo(a, "п?омени", new String[] {"п?ом?н"});
+    assertAnalyzesTo(a, "п?омени?е", new String[] {"п?ом?н"});
+    
+    // ен -> н
+    assertAnalyzesTo(a, "пе?ен", new String[] {"пе?н"});
+    assertAnalyzesTo(a, "пе?ен?а", new String[] {"пе?н"});
+    assertAnalyzesTo(a, "пе?ни", new String[] {"пе?н"});
+    assertAnalyzesTo(a, "пе?ни?е", new String[] {"пе?н"});
+    
+    // -еве -> й
+    // note: this is the only word i think this rule works for.
+    // most -еве pluralized nouns are monosyllabic,
+    // and the stemmer requires length > 6...
+    assertAnalyzesTo(a, "???ой", new String[] {"???ой"});
+    assertAnalyzesTo(a, "???оеве", new String[] {"???ой"});
+    assertAnalyzesTo(a, "???оеве?е", new String[] {"???ой"});
+    /* note the below forms conflate with each other, but not the rest */
+    assertAnalyzesTo(a, "???о?", new String[] {"???"});
+    assertAnalyzesTo(a, "???о??", new String[] {"???"});
+  }
+}

