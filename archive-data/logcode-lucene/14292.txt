GitDiffStart: 72637d6c1cf90ea1b8b0d6fa4a22e03fee59201f | Fri Dec 9 16:02:09 2011 +0000
diff --git a/solr/contrib/clustering/CHANGES.txt b/solr/contrib/clustering/CHANGES.txt
index debc948..06307c1 100644
--- a/solr/contrib/clustering/CHANGES.txt
+++ b/solr/contrib/clustering/CHANGES.txt
@@ -26,6 +26,9 @@ $Id$
   language field be passed in the carrot.lang parameter, the carrot.lcmap
   parameter enables mapping of language codes to ISO 639 (Stanislaw Osinski).
 
+* SOLR-2940: Passing values for custom Carrot2 fields. The custom field
+  mapping are defined using the carrot.custom parameter (Stanislaw Osinski).
+
 ================== Release 3.5.0 ==================
 
 (No Changes)
diff --git a/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.java b/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.java
index 74b36b8..e2170f4 100644
--- a/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.java
+++ b/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.java
@@ -26,6 +26,7 @@ import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Set;
 
 import org.apache.commons.io.IOUtils;
@@ -324,6 +325,22 @@ public class CarrotClusteringEngine extends SearchClusteringEngine {
     String titleFieldSpec = solrParams.get(CarrotParams.TITLE_FIELD_NAME, "title");
     String snippetFieldSpec = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleFieldSpec);
     String languageField = solrParams.get(CarrotParams.LANGUAGE_FIELD_NAME, null);
+    
+    // Maps Solr field names to Carrot2 custom field names
+    Map<String, String> customFields = null;
+    String [] customFieldsSpec = solrParams.getParams(CarrotParams.CUSTOM_FIELD_NAME);
+    if (customFieldsSpec != null) {
+      customFields = Maps.newHashMap();
+      for (String customFieldSpec : customFieldsSpec) {
+        String [] split = customFieldSpec.split(":"); 
+        if (split.length == 2 && StringUtils.isNotBlank(split[0]) && StringUtils.isNotBlank(split[1])) {
+          customFields.put(split[0], split[1]);
+        } else {
+          log.warn("Unsupported format for " + CarrotParams.CUSTOM_FIELD_NAME
+              + ": '" + customFieldSpec + "'. Skipping this field definition.");
+        }
+      }
+    }
 
     // Parse language code map string into a map
     Map<String, String> languageCodeMap = Maps.newHashMap();
@@ -447,6 +464,14 @@ public class CarrotClusteringEngine extends SearchClusteringEngine {
           }
         }
       }
+      
+      // Add custom fields
+      if (customFields != null) {
+        for (Entry<String, String> entry : customFields.entrySet()) {
+          carrotDocument.setField(entry.getValue(), sdoc.getFieldValue(entry.getKey()));
+        }
+      }
+      
       result.add(carrotDocument);
     }
 
diff --git a/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotParams.java b/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotParams.java
index b5e8b94..0005047 100644
--- a/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotParams.java
+++ b/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotParams.java
@@ -32,6 +32,7 @@ public interface CarrotParams {
   String URL_FIELD_NAME = CARROT_PREFIX + "url";
   String SNIPPET_FIELD_NAME = CARROT_PREFIX + "snippet";
   String LANGUAGE_FIELD_NAME = CARROT_PREFIX + "lang";
+  String CUSTOM_FIELD_NAME = CARROT_PREFIX + "custom";
   
   String PRODUCE_SUMMARY = CARROT_PREFIX + "produceSummary";
   String SUMMARY_FRAGSIZE = CARROT_PREFIX + "fragSize";
diff --git a/solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/AbstractClusteringTestCase.java b/solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/AbstractClusteringTestCase.java
index 77827c6..d58d89d 100644
--- a/solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/AbstractClusteringTestCase.java
+++ b/solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/AbstractClusteringTestCase.java
@@ -73,6 +73,16 @@ public abstract class AbstractClusteringTestCase extends SolrTestCaseJ4 {
     docWithOneSupprtedLanguageOfMany.addField("lang", "de");
     assertNull(h.validateUpdate(adoc(docWithOneSupprtedLanguageOfMany)));
     
+    // Add a document with more languages, one supported by Carrot2
+    final SolrInputDocument docWithCustomFields = new SolrInputDocument();
+    docWithCustomFields.addField("id", numberOfDocs++);
+    docWithCustomFields.addField("url", "custom_fields");
+    docWithCustomFields.addField("intfield_i", 10);
+    docWithCustomFields.addField("floatfield_f", 10.5);
+    docWithCustomFields.addField("heading", "first");
+    docWithCustomFields.addField("heading", "second");
+    assertNull(h.validateUpdate(adoc(docWithCustomFields)));
+    
     assertNull(h.validateUpdate(commit()));
   }
 
diff --git a/solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest.java b/solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest.java
index 801c2ec..e4ef997 100644
--- a/solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest.java
+++ b/solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest.java
@@ -90,7 +90,7 @@ public class CarrotClusteringEngineTest extends AbstractClusteringTestCase {
   private List<NamedList<Object>> clusterWithHighlighting(
       boolean enableHighlighting, int fragSize) throws IOException {
     // Some documents don't have mining in the snippet
-    return clusterWithHighlighting(enableHighlighting, fragSize, 1, "mine", numberOfDocs - 6);
+    return clusterWithHighlighting(enableHighlighting, fragSize, 1, "mine", numberOfDocs - 7);
   }
 
   private List<NamedList<Object>> clusterWithHighlighting(
@@ -332,6 +332,25 @@ public class CarrotClusteringEngineTest extends AbstractClusteringTestCase {
     assertEquals(3, labels.size());
     assertEquals("Correct Carrot2 language", LanguageCode.POLISH.name(), labels.get(2));
   }
+  
+  @Test
+  public void passingOfCustomFields() throws Exception {
+    final ModifiableSolrParams params = new ModifiableSolrParams();
+    params.add(CarrotParams.CUSTOM_FIELD_NAME, "intfield_i:intfield");
+    params.add(CarrotParams.CUSTOM_FIELD_NAME, "floatfield_f:floatfield");
+    params.add(CarrotParams.CUSTOM_FIELD_NAME, "heading:multi");
+    
+    // Let the echo mock clustering algorithm know which custom field to echo
+    params.add("custom-fields", "intfield,floatfield,multi");
+    
+    final List<String> labels = getLabels(checkEngine(
+        getClusteringEngine("echo"), 1, 1, new TermQuery(new Term("url",
+            "custom_fields")), params).get(0));
+    assertEquals(5, labels.size());
+    assertEquals("Integer field", "10", labels.get(2));
+    assertEquals("Float field", "10.5", labels.get(3));
+    assertEquals("List field", "[first, second]", labels.get(4));
+  }
 
   private CarrotClusteringEngine getClusteringEngine(String engineName) {
     ClusteringComponent comp = (ClusteringComponent) h.getCore()
diff --git a/solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/EchoClusteringAlgorithm.java b/solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/EchoClusteringAlgorithm.java
index 4084f26..a47878f 100644
--- a/solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/EchoClusteringAlgorithm.java
+++ b/solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/EchoClusteringAlgorithm.java
@@ -15,6 +15,7 @@ package org.apache.solr.handler.clustering.carrot2;
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+import java.util.Collections;
 import java.util.List;
 
 import org.carrot2.core.Cluster;
@@ -48,6 +49,12 @@ public class EchoClusteringAlgorithm extends ProcessingComponentBase implements
   @Attribute(key = AttributeNames.CLUSTERS)
   private List<Cluster> clusters;
 
+  @Input
+  @Processing
+  @Attribute(key = "custom-fields")
+  private String customFields = "";
+
+  
   @Override
   public void process() throws ProcessingException {
     clusters = Lists.newArrayListWithCapacity(documents.size());
@@ -58,6 +65,12 @@ public class EchoClusteringAlgorithm extends ProcessingComponentBase implements
       if (document.getLanguage() != null) {
         cluster.addPhrases(document.getLanguage().name());
       }
+      for (String field : customFields.split(",")) {
+        Object value = document.getField(field);
+        if (value != null) {
+          cluster.addPhrases(value.toString());
+        }
+      }
       cluster.addDocuments(document);
       clusters.add(cluster);
     }

