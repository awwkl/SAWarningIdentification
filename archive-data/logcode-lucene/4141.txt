GitDiffStart: 46ede7622e42d9acfe1f3213c2391add9ad8c1fa | Thu Feb 26 14:05:24 2015 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 045bd44..5273be9 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -208,6 +208,8 @@ Other Changes
 * SOLR-7160: Rename ConfigSolr to NodeConfig, and decouple it from xml
   representation (Alan Woodward)
 
+* SOLR-7166: Encapsulate JettySolrRunner configuration (Alan Woodward)
+
 * SOLR-7130: Make stale state notification work without failing the requests
   (Noble Paul, shalin)
 
diff --git a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java
index ec4e2f7..b0b30c4 100644
--- a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java
+++ b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java
@@ -174,7 +174,7 @@ public class TestContentStreamDataSource extends AbstractDataImportHandlerTestCa
 
   private JettySolrRunner createJetty(SolrInstance instance) throws Exception {
     System.setProperty("solr.data.dir", instance.getDataDir());
-    JettySolrRunner jetty = new JettySolrRunner(instance.getHomeDir(), "/solr", 0, null, null, true, null, sslConfig);
+    JettySolrRunner jetty = new JettySolrRunner(instance.getHomeDir(), buildJettyConfig("/solr"));
     jetty.start();
     return jetty;
   }
diff --git a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
index fdb2d3c..5307584 100644
--- a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
+++ b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
@@ -340,7 +340,7 @@ public class TestSolrEntityProcessorEndToEnd extends AbstractDataImportHandlerTe
   }
   
   private JettySolrRunner createJetty(SolrInstance instance) throws Exception {
-    JettySolrRunner jetty = new JettySolrRunner(instance.getHomeDir(), "/solr", 0, null, null, true, null, sslConfig);
+    JettySolrRunner jetty = new JettySolrRunner(instance.getHomeDir(), buildJettyConfig("/solr"));
     jetty.setDataDir(instance.getDataDir());
     jetty.start();
     return jetty;
diff --git a/solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest.java b/solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest.java
index c642c11..9a395f6 100644
--- a/solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest.java
+++ b/solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest.java
@@ -743,9 +743,9 @@ public class MorphlineGoLiveMiniMRTest extends AbstractFullDistribZkTestBase {
   public JettySolrRunner createJetty(File solrHome, String dataDir,
       String shardList, String solrConfigOverride, String schemaOverride)
       throws Exception {
-    
-    JettySolrRunner jetty = new JettySolrRunner(solrHome.getAbsolutePath(),
-        context, 0, solrConfigOverride, schemaOverride, true, null, sslConfig);
+
+    JettySolrRunner jetty
+        = new JettySolrRunner(solrHome.getAbsolutePath(), solrConfigOverride, schemaOverride, buildJettyConfig(context));
 
     jetty.setShards(shardList);
     
diff --git a/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineZkTestBase.java b/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineZkTestBase.java
index 84514e2..ebcb60e 100644
--- a/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineZkTestBase.java
+++ b/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineZkTestBase.java
@@ -144,8 +144,8 @@ public abstract class AbstractSolrMorphlineZkTestBase extends AbstractFullDistri
       throws Exception {
 
     writeCoreProperties(solrHome.toPath(), DEFAULT_TEST_CORENAME);
-    JettySolrRunner jetty = new JettySolrRunner(solrHome.getAbsolutePath(),
-        context, 0, solrConfigOverride, schemaOverride, true, null, sslConfig);
+    JettySolrRunner jetty
+        = new JettySolrRunner(solrHome.getAbsolutePath(), solrConfigOverride, schemaOverride, buildJettyConfig(context));
 
     jetty.setShards(shardList);
     
diff --git a/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettyConfig.java b/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettyConfig.java
new file mode 100644
index 0000000..3cedd48
--- /dev/null
+++ b/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettyConfig.java
@@ -0,0 +1,122 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.client.solrj.embedded;
+
+import org.eclipse.jetty.servlet.ServletHolder;
+
+import javax.servlet.Filter;
+import java.util.Map;
+import java.util.TreeMap;
+
+public class JettyConfig {
+
+  final int port;
+
+  public final String context;
+
+  final boolean stopAtShutdown;
+
+  final Map<ServletHolder, String> extraServlets;
+
+  final Map<Class<? extends Filter>, String> extraFilters;
+
+  final SSLConfig sslConfig;
+
+  private JettyConfig(int port, String context, boolean stopAtShutdown, Map<ServletHolder, String> extraServlets,
+                      Map<Class<? extends Filter>, String> extraFilters, SSLConfig sslConfig) {
+    this.port = port;
+    this.context = context;
+    this.stopAtShutdown = stopAtShutdown;
+    this.extraServlets = extraServlets;
+    this.extraFilters = extraFilters;
+    this.sslConfig = sslConfig;
+  }
+
+  public static Builder builder() {
+    return new Builder();
+  }
+
+  public static Builder builder(JettyConfig other) {
+    Builder builder = new Builder();
+    builder.port = other.port;
+    builder.context = other.context;
+    builder.stopAtShutdown = other.stopAtShutdown;
+    builder.extraServlets = other.extraServlets;
+    builder.extraFilters = other.extraFilters;
+    builder.sslConfig = other.sslConfig;
+    return builder;
+  }
+
+  public static class Builder {
+
+    int port = 0;
+    String context = "/solr";
+    boolean stopAtShutdown = true;
+    Map<ServletHolder, String> extraServlets = new TreeMap<>();
+    Map<Class<? extends Filter>, String> extraFilters = new TreeMap<>();
+    SSLConfig sslConfig = null;
+
+    public Builder setPort(int port) {
+      this.port = port;
+      return this;
+    }
+
+    public Builder setContext(String context) {
+      this.context = context;
+      return this;
+    }
+
+    public Builder stopAtShutdown(boolean stopAtShutdown) {
+      this.stopAtShutdown = stopAtShutdown;
+      return this;
+    }
+
+    public Builder withServlet(ServletHolder servlet, String servletName) {
+      extraServlets.put(servlet, servletName);
+      return this;
+    }
+
+    public Builder withServlets(Map<ServletHolder, String> servlets) {
+      if (servlets != null)
+        extraServlets.putAll(servlets);
+      return this;
+    }
+
+    public Builder withFilter(Class<? extends Filter> filterClass, String filterName) {
+      extraFilters.put(filterClass, filterName);
+      return this;
+    }
+
+    public Builder withFilters(Map<Class<? extends Filter>, String> filters) {
+      if (filters != null)
+        extraFilters.putAll(filters);
+      return this;
+    }
+
+    public Builder withSSLConfig(SSLConfig sslConfig) {
+      this.sslConfig = sslConfig;
+      return this;
+    }
+
+    public JettyConfig build() {
+      return new JettyConfig(port, context, stopAtShutdown, extraServlets, extraFilters, sslConfig);
+    }
+
+  }
+
+}
diff --git a/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java b/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
index b14f944..fada290 100644
--- a/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
+++ b/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
@@ -53,7 +53,6 @@ import java.util.EnumSet;
 import java.util.LinkedList;
 import java.util.Random;
 import java.util.SortedMap;
-import java.util.TreeMap;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 
@@ -71,8 +70,6 @@ public class JettySolrRunner {
   FilterHolder dispatchFilter;
   FilterHolder debugFilter;
 
-  String context;
-
   private String solrConfigFilename;
   private String schemaFilename;
   private final String coreRootDirectory;
@@ -80,6 +77,7 @@ public class JettySolrRunner {
   private boolean waitOnSolr = false;
 
   private int lastPort = -1;
+  private final JettyConfig config;
 
   private String shards;
 
@@ -88,20 +86,13 @@ public class JettySolrRunner {
   
   private volatile boolean startedBefore = false;
 
-  private String solrHome;
-
-  private boolean stopAtShutdown;
+  private final String solrHome;
 
   private String coreNodeName;
 
   private final String name;
 
-  /** Maps servlet holders (i.e. factories: class + init params) to path specs */
-  private SortedMap<ServletHolder,String> extraServlets = new TreeMap<>();
-  private SortedMap<Class,String> extraRequestFilters;
   private LinkedList<FilterHolder> extraFilters;
-
-  private SSLConfig sslConfig;
   
   private int proxyPort = -1;
 
@@ -125,21 +116,6 @@ public class JettySolrRunner {
     @Override
     public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
       nRequests.incrementAndGet();
-
-      /***
-      HttpServletRequest req = (HttpServletRequest)servletRequest;
-      HttpServletResponse resp = (HttpServletResponse)servletResponse;
-
-      String path = req.getServletPath();
-      if( req.getPathInfo() != null ) {
-        // this lets you handle /update/commit when /update is a servlet
-        path += req.getPathInfo();
-      }
-      System.out.println("###################### FILTER request " + servletRequest);
-      System.out.println("\t\tgetServletPath="+req.getServletPath());
-      System.out.println("\t\tgetPathInfo="+req.getPathInfo());
-      ***/
-
       filterChain.doFilter(servletRequest, servletResponse);
     }
 
@@ -149,84 +125,113 @@ public class JettySolrRunner {
   }
 
   public JettySolrRunner(String solrHome, String context, int port) {
-    this.init(solrHome, context, port, true);
-    this.name = "jetty-" + JETTY_ID_COUNTER.incrementAndGet();
-    this.coreRootDirectory = System.getProperty("coreRootDirectory", null);
+    this(solrHome, JettyConfig.builder().setContext(context).setPort(port).build());
   }
 
   public JettySolrRunner(String solrHome, String context, int port, String solrConfigFilename, String schemaFileName) {
-    this.init(solrHome, context, port, true);
-    this.solrConfigFilename = solrConfigFilename;
-    this.schemaFilename = schemaFileName;
-    this.name = "jetty-" + JETTY_ID_COUNTER.incrementAndGet();
-    this.coreRootDirectory = System.getProperty("coreRootDirectory", null);
+    this(solrHome, solrConfigFilename, schemaFileName, JettyConfig.builder()
+        .setContext(context)
+        .setPort(port)
+        .build());
   }
-  
+
+  @Deprecated
   public JettySolrRunner(String solrHome, String context, int port,
       String solrConfigFilename, String schemaFileName, boolean stopAtShutdown) {
-    this.init(solrHome, context, port, stopAtShutdown);
-    this.solrConfigFilename = solrConfigFilename;
-    this.schemaFilename = schemaFileName;
-    this.name = "jetty-" + JETTY_ID_COUNTER.incrementAndGet();
-    this.coreRootDirectory = System.getProperty("coreRootDirectory", null);
+    this(solrHome, solrConfigFilename, schemaFileName, JettyConfig.builder()
+        .setContext(context)
+        .setPort(port)
+        .stopAtShutdown(stopAtShutdown)
+        .build());
   }
 
   /**
    * Constructor taking an ordered list of additional (servlet holder -&gt; path spec) mappings
    * to add to the servlet context
+   * @deprecated use {@link #JettySolrRunner(String,String,String,JettyConfig)}
    */
+  @Deprecated
   public JettySolrRunner(String solrHome, String context, int port,
       String solrConfigFilename, String schemaFileName, boolean stopAtShutdown,
       SortedMap<ServletHolder,String> extraServlets) {
-    this (solrHome, context, port, solrConfigFilename, schemaFileName,
-      stopAtShutdown, extraServlets, null, null);
+    this(solrHome, solrConfigFilename, schemaFileName, JettyConfig.builder()
+        .setContext(context)
+        .setPort(port)
+        .stopAtShutdown(stopAtShutdown)
+        .withServlets(extraServlets)
+        .build());
+  }
+
+  @Deprecated
+  public JettySolrRunner(String solrHome, String context, int port, String solrConfigFilename, String schemaFileName,
+                         boolean stopAtShutdown, SortedMap<ServletHolder, String> extraServlets, SSLConfig sslConfig) {
+    this(solrHome, solrConfigFilename, schemaFileName, JettyConfig.builder()
+        .setContext(context)
+        .setPort(port)
+        .stopAtShutdown(stopAtShutdown)
+        .withServlets(extraServlets)
+        .withSSLConfig(sslConfig)
+        .build());
+  }
+
+  @Deprecated
+  public JettySolrRunner(String solrHome, String context, int port, String solrConfigFilename, String schemaFileName,
+                         boolean stopAtShutdown, SortedMap<ServletHolder, String> extraServlets, SSLConfig sslConfig,
+                         SortedMap<Class<? extends Filter>, String> extraRequestFilters) {
+    this(solrHome, solrConfigFilename, schemaFileName, JettyConfig.builder()
+        .setContext(context)
+        .setPort(port)
+        .stopAtShutdown(stopAtShutdown)
+        .withServlets(extraServlets)
+        .withFilters(extraRequestFilters)
+        .withSSLConfig(sslConfig)
+        .build());
   }
-  
-  public JettySolrRunner(String solrHome, String context, int port,
-      String solrConfigFilename, String schemaFileName, boolean stopAtShutdown,
-      SortedMap<ServletHolder,String> extraServlets, SSLConfig sslConfig) {
-    this (solrHome, context, port, solrConfigFilename, schemaFileName,
-      stopAtShutdown, extraServlets, sslConfig, null);
+
+  /**
+   * Construct a JettySolrRunner
+   *
+   * @param solrHome    the base path to run from
+   * @param jettyConfig the configuration
+   */
+  public JettySolrRunner(String solrHome, JettyConfig jettyConfig) {
+    this(solrHome, null, null, jettyConfig);
   }
 
   /**
-   * Constructor taking an ordered list of additional (filter holder -&gt; path spec) mappings.
-   * Filters are placed after the DebugFilter but before the SolrDispatchFilter.
+   * Construct a JettySolrRunner
+   *
+   * @param solrHome            the base path to run from
+   * @param solrConfigFilename  the name of the solrconfig file to use
+   * @param schemaFileName      the name of the schema file to use
+   * @param jettyConfig         the configuration
    */
-  public JettySolrRunner(String solrHome, String context, int port,
-      String solrConfigFilename, String schemaFileName, boolean stopAtShutdown,
-      SortedMap<ServletHolder,String> extraServlets, SSLConfig sslConfig,
-      SortedMap<Class,String> extraRequestFilters) {
-    if (null != extraServlets) { this.extraServlets.putAll(extraServlets); }
-    if (null != extraRequestFilters) {
-      this.extraRequestFilters = new TreeMap<>(extraRequestFilters.comparator());
-      this.extraRequestFilters.putAll(extraRequestFilters);
-    }
+  public JettySolrRunner(String solrHome, String solrConfigFilename, String schemaFileName, JettyConfig jettyConfig) {
+
     this.solrConfigFilename = solrConfigFilename;
     this.schemaFilename = schemaFileName;
-    this.sslConfig = sslConfig;
 
     this.name = "jetty-" + JETTY_ID_COUNTER.incrementAndGet();
     this.coreRootDirectory = System.getProperty("coreRootDirectory", null);
 
-    this.init(solrHome, context, port, stopAtShutdown);
+    this.config = jettyConfig;
+    this.solrHome = solrHome;
+
+    this.init(this.config.port);
   }
   
-  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {
-    this.context = context;
-    this.solrHome = solrHome;
-    this.stopAtShutdown = stopAtShutdown;
+  private void init(int port) {
 
     System.setProperty("solr.solr.home", solrHome);
-    
+
     QueuedThreadPool qtp = new QueuedThreadPool();
     qtp.setMaxThreads(10000);
     qtp.setIdleTimeout((int) TimeUnit.SECONDS.toMillis(5));
     qtp.setStopTimeout((int) TimeUnit.MINUTES.toMillis(1));
     server = new Server(qtp);
     server.manage(qtp);
-    server.setStopAtShutdown(stopAtShutdown);
-    
+    server.setStopAtShutdown(config.stopAtShutdown);
+
     if (System.getProperty("jetty.testMode") != null) {
       // if this property is true, then jetty will be configured to use SSL
       // leveraging the same system properties as java to specify
@@ -237,12 +242,10 @@ public class JettySolrRunner {
       // the server as well as any client actions taken by this JVM in
       // talking to that server, but for the purposes of testing that should 
       // be good enough
-      final boolean useSsl = sslConfig == null ? false : sslConfig.isSSLMode();
-      final SslContextFactory sslcontext = new SslContextFactory(false);
-      sslInit(useSsl, sslcontext);
+      final SslContextFactory sslcontext = SSLConfig.createContextFactory(config.sslConfig);
 
       ServerConnector connector;
-      if (useSsl) {
+      if (sslcontext != null) {
         HttpConfiguration configuration = new HttpConfiguration();
         configuration.setSecureScheme("https");
         configuration.addCustomizer(new SecureRequestCustomizer());
@@ -272,7 +275,7 @@ public class JettySolrRunner {
     }
 
     // Initialize the servlets
-    final ServletContextHandler root = new ServletContextHandler(server, context, ServletContextHandler.SESSIONS);
+    final ServletContextHandler root = new ServletContextHandler(server, config.context, ServletContextHandler.SESSIONS);
     root.addFilter(GzipFilter.class, "*", EnumSet.of(DispatcherType.REQUEST));
     server.addLifeCycleListener(new LifeCycle.Listener() {
 
@@ -294,7 +297,9 @@ public class JettySolrRunner {
 
       @Override
       public void lifeCycleStarted(LifeCycle arg0) {
+
         lastPort = getFirstConnectorPort();
+
         System.setProperty("hostPort", Integer.toString(lastPort));
         if (solrConfigFilename != null) System.setProperty("solrconfig",
             solrConfigFilename);
@@ -302,21 +307,21 @@ public class JettySolrRunner {
             schemaFilename);
         if (coreRootDirectory != null)
           System.setProperty("coreRootDirectory", coreRootDirectory);
-//        SolrDispatchFilter filter = new SolrDispatchFilter();
-//        FilterHolder fh = new FilterHolder(filter);
+
         debugFilter = root.addFilter(DebugFilter.class, "*", EnumSet.of(DispatcherType.REQUEST) );
-        if (extraRequestFilters != null) {
-          extraFilters = new LinkedList<>();
-          for (Class filterClass : extraRequestFilters.keySet()) {
-            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),
+        extraFilters = new LinkedList<>();
+        for (Class<? extends Filter> filterClass : config.extraFilters.keySet()) {
+          extraFilters.add(root.addFilter(filterClass, config.extraFilters.get(filterClass),
               EnumSet.of(DispatcherType.REQUEST)));
-          }
         }
-        for (ServletHolder servletHolder : extraServlets.keySet()) {
-          String pathSpec = extraServlets.get(servletHolder);
+
+        for (ServletHolder servletHolder : config.extraServlets.keySet()) {
+          String pathSpec = config.extraServlets.get(servletHolder);
           root.addServlet(servletHolder, pathSpec);
         }
+
         dispatchFilter = root.addFilter(SolrDispatchFilter.class, "*", EnumSet.of(DispatcherType.REQUEST) );
+
         if (solrConfigFilename != null) System.clearProperty("solrconfig");
         if (schemaFilename != null) System.clearProperty("schema");
         System.clearProperty("solr.solr.home");
@@ -333,46 +338,7 @@ public class JettySolrRunner {
 
   }
 
-  private void sslInit(final boolean useSsl, final SslContextFactory sslcontext) {
-    if (useSsl && sslConfig != null) {
-      if (null != sslConfig.getKeyStore()) {
-        sslcontext.setKeyStorePath(sslConfig.getKeyStore());
-      }
-      if (null != sslConfig.getKeyStorePassword()) {
-        sslcontext.setKeyStorePassword(sslConfig.getKeyStorePassword());
-      }
-      if (null != sslConfig.getTrustStore()) {
-        sslcontext.setTrustStorePath(System
-            .getProperty(sslConfig.getTrustStore()));
-      }
-      if (null != sslConfig.getTrustStorePassword()) {
-        sslcontext.setTrustStorePassword(sslConfig.getTrustStorePassword());
-      }
-      sslcontext.setNeedClientAuth(sslConfig.isClientAuthMode());
-    } else {
-      boolean jettySsl = Boolean.getBoolean(System.getProperty("tests.jettySsl"));
 
-      if (jettySsl) {
-        if (null != System.getProperty("javax.net.ssl.keyStore")) {
-          sslcontext.setKeyStorePath
-            (System.getProperty("javax.net.ssl.keyStore"));
-        }
-        if (null != System.getProperty("javax.net.ssl.keyStorePassword")) {
-          sslcontext.setKeyStorePassword
-            (System.getProperty("javax.net.ssl.keyStorePassword"));
-        }
-        if (null != System.getProperty("javax.net.ssl.trustStore")) {
-          sslcontext.setTrustStorePath
-            (System.getProperty("javax.net.ssl.trustStore"));
-        }
-        if (null != System.getProperty("javax.net.ssl.trustStorePassword")) {
-          sslcontext.setTrustStorePassword
-            (System.getProperty("javax.net.ssl.trustStorePassword"));
-        }
-        sslcontext.setNeedClientAuth(Boolean.getBoolean("tests.jettySsl.clientAuth"));
-      }
-    }
-  }
 
   public FilterHolder getDispatchFilter() {
     return dispatchFilter;
@@ -397,7 +363,7 @@ public class JettySolrRunner {
     // if started before, make a new server
     if (startedBefore) {
       waitOnSolr = false;
-      init(solrHome, context, lastPort, stopAtShutdown);
+      init(lastPort);
     } else {
       startedBefore = true;
     }
@@ -508,7 +474,7 @@ public class JettySolrRunner {
                                         c.getLocalPort());
       }
       protocol = c.getDefaultProtocol().equals("SSL-http/1.1")  ? "https" : "http";
-      return new URL(protocol, c.getHost(), c.getLocalPort(), context);
+      return new URL(protocol, c.getHost(), c.getLocalPort(), config.context);
 
     } catch (MalformedURLException e) {
       throw new  IllegalStateException
diff --git a/solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig.java b/solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig.java
index 2b0bcbf..f969cd7 100644
--- a/solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig.java
+++ b/solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig.java
@@ -17,6 +17,8 @@ package org.apache.solr.client.solrj.embedded;
  * limitations under the License.
  */
 
+import org.eclipse.jetty.util.ssl.SslContextFactory;
+
 public class SSLConfig {
   
   private boolean useSsl;
@@ -66,4 +68,55 @@ public class SSLConfig {
   public String getTrustStorePassword() {
     return trustStorePassword;
   }
+
+  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {
+
+    if (sslConfig == null) {
+      if (Boolean.getBoolean(System.getProperty("tests.jettySsl"))) {
+        return configureSslFromSysProps();
+      }
+      return null;
+    }
+
+    if (!sslConfig.useSsl)
+      return null;
+
+    SslContextFactory factory = new SslContextFactory(false);
+    if (sslConfig.getKeyStore() != null)
+      factory.setKeyStorePath(sslConfig.getKeyStore());
+    if (sslConfig.getKeyStorePassword() != null)
+      factory.setKeyStorePassword(sslConfig.getKeyStorePassword());
+    if (sslConfig.getTrustStore() != null)
+      factory.setTrustStorePath(System.getProperty(sslConfig.getTrustStore()));
+    if (sslConfig.getTrustStorePassword() != null)
+      factory.setTrustStorePassword(sslConfig.getTrustStorePassword());
+
+    return factory;
+
+  }
+
+  private static SslContextFactory configureSslFromSysProps() {
+
+    SslContextFactory sslcontext = new SslContextFactory(false);
+
+    if (null != System.getProperty("javax.net.ssl.keyStore")) {
+      sslcontext.setKeyStorePath
+          (System.getProperty("javax.net.ssl.keyStore"));
+    }
+    if (null != System.getProperty("javax.net.ssl.keyStorePassword")) {
+      sslcontext.setKeyStorePassword
+          (System.getProperty("javax.net.ssl.keyStorePassword"));
+    }
+    if (null != System.getProperty("javax.net.ssl.trustStore")) {
+      sslcontext.setTrustStorePath
+          (System.getProperty("javax.net.ssl.trustStore"));
+    }
+    if (null != System.getProperty("javax.net.ssl.trustStorePassword")) {
+      sslcontext.setTrustStorePassword
+          (System.getProperty("javax.net.ssl.trustStorePassword"));
+    }
+    sslcontext.setNeedClientAuth(Boolean.getBoolean("tests.jettySsl.clientAuth"));
+
+    return sslcontext;
+  }
 }
diff --git a/solr/core/src/test/org/apache/solr/TestSolrCoreProperties.java b/solr/core/src/test/org/apache/solr/TestSolrCoreProperties.java
index 42fea2f..aaf6b37 100644
--- a/solr/core/src/test/org/apache/solr/TestSolrCoreProperties.java
+++ b/solr/core/src/test/org/apache/solr/TestSolrCoreProperties.java
@@ -73,7 +73,7 @@ public class TestSolrCoreProperties extends SolrJettyTestBase {
 
     Files.createFile(collDir.toPath().resolve("core.properties"));
 
-    jetty = new JettySolrRunner(homeDir.getAbsolutePath(), "/solr", 0, null, null, true, null, sslConfig);
+    jetty = new JettySolrRunner(homeDir.getAbsolutePath(), buildJettyConfig("/solr"));
 
     // this sets the property for jetty starting SolrDispatchFilter
     if (System.getProperty("solr.data.dir") == null && System.getProperty("solr.hdfs.home") == null) {
diff --git a/solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest.java b/solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest.java
index ee6fddc..8dd1569 100644
--- a/solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest.java
@@ -17,16 +17,12 @@ package org.apache.solr.cloud;
  * limitations under the License.
  */
 
-import static org.apache.solr.common.cloud.ZkNodeProps.makeMap;
-import org.apache.lucene.util.LuceneTestCase.BadApple;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-
 import org.apache.commons.lang.StringUtils;
+import org.apache.lucene.util.LuceneTestCase.BadApple;
+import org.apache.lucene.util.LuceneTestCase.Slow;
+import org.apache.solr.SolrTestCaseJ4.SuppressSSL;
 import org.apache.solr.client.solrj.SolrRequest;
+import org.apache.solr.client.solrj.embedded.JettyConfig;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
 import org.apache.solr.client.solrj.impl.HttpClientUtil;
 import org.apache.solr.client.solrj.impl.LBHttpSolrClient;
@@ -39,10 +35,15 @@ import org.apache.solr.common.params.CollectionParams.CollectionAction;
 import org.apache.solr.common.params.MapSolrParams;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.util.SSLTestConfig;
-import org.apache.solr.SolrTestCaseJ4.SuppressSSL;
-import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.junit.Test;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+
+import static org.apache.solr.common.cloud.ZkNodeProps.makeMap;
+
 /**
  * We want to make sure that when migrating between http and https modes the
  * replicas will not be rejoined as new nodes, but rather take off where it left
@@ -72,9 +73,15 @@ public class SSLMigrationTest extends AbstractFullDistribZkTestBase {
     HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());
     for(int i = 0; i < this.jettys.size(); i++) {
       JettySolrRunner runner = jettys.get(i);
-      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), 
-          context, runner.getLocalPort(), getSolrConfigFile(), getSchemaFile(), 
-          false, getExtraServlets(), sslConfig, getExtraRequestFilters());
+      JettyConfig config = JettyConfig.builder()
+          .setContext(context)
+          .setPort(runner.getLocalPort())
+          .stopAtShutdown(false)
+          .withServlets(getExtraServlets())
+          .withFilters(getExtraRequestFilters())
+          .withSSLConfig(sslConfig)
+          .build();
+      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), getSolrConfigFile(), getSchemaFile(), config);
       newRunner.setDataDir(getDataDir(testDir + "/shard" + i + "/data"));
       newRunner.start(true);
       jettys.set(i, newRunner);
diff --git a/solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest.java b/solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest.java
index 1d748e5..24edf85 100644
--- a/solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest.java
+++ b/solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest.java
@@ -87,7 +87,7 @@ public class OpenCloseCoreStressTest extends SolrTestCaseJ4 {
 
     solrHomeDirectory = createTempDir().toFile();
 
-    jetty = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), "/solr", 0, null, null, true, null, sslConfig);
+    jetty = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig("/solr"));
   }
 
   @After
diff --git a/solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest.java b/solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest.java
index 41b02a1..146251c 100644
--- a/solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest.java
+++ b/solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest.java
@@ -200,7 +200,7 @@ public class CoreAdminHandlerTest extends SolrTestCaseJ4 {
     copySolrHomeToTemp(solrHomeDirectory, "corex", true);
     File corex = new File(solrHomeDirectory, "corex");
     FileUtils.write(new File(corex, "core.properties"), "", Charsets.UTF_8.toString());
-    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), "/solr", 0, null, null, true, null, sslConfig);
+    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig("/solr"));
     runner.start();
 
     try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl() + "/corex")) {
diff --git a/solr/core/src/test/org/apache/solr/rest/schema/TestFieldCollectionResource.java b/solr/core/src/test/org/apache/solr/rest/schema/TestFieldCollectionResource.java
index 9e01a93..f075b37 100644
--- a/solr/core/src/test/org/apache/solr/rest/schema/TestFieldCollectionResource.java
+++ b/solr/core/src/test/org/apache/solr/rest/schema/TestFieldCollectionResource.java
@@ -16,6 +16,7 @@ package org.apache.solr.rest.schema;
  * limitations under the License.
  */
 
+import com.carrotsearch.randomizedtesting.annotations.Seed;
 import org.apache.solr.rest.SolrRestletTestBase;
 import org.junit.Test;
 
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient.java b/solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient.java
index 444adf6..dc7516c 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient.java
@@ -26,6 +26,7 @@ import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.apache.lucene.util.QuickPatchThreadsFilter;
 import org.apache.solr.SolrIgnoredThreadsFilter;
 import org.apache.solr.SolrTestCaseJ4;
+import org.apache.solr.client.solrj.embedded.JettyConfig;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
 import org.apache.solr.client.solrj.impl.HttpClientUtil;
 import org.apache.solr.client.solrj.impl.HttpSolrClient;
@@ -308,7 +309,12 @@ public class TestLBHttpSolrClient extends SolrTestCaseJ4 {
     }
 
     public void startJetty() throws Exception {
-      jetty = new JettySolrRunner(getHomeDir(), "/solr", port, "bad_solrconfig.xml", null, true, null, sslConfig);
+      jetty = new JettySolrRunner(getHomeDir(), "bad_solrconfig.xml", null, JettyConfig.builder()
+          .setContext("/solr")
+          .stopAtShutdown(true)
+          .setPort(port)
+          .withSSLConfig(sslConfig)
+          .build());
       jetty.setDataDir(getDataDir());
       jetty.start();
       int newPort = jetty.getLocalPort();
diff --git a/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java b/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
index 617e125..eb21a60 100644
--- a/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
+++ b/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
@@ -24,6 +24,7 @@ import org.apache.lucene.util.TestUtil;
 import org.apache.solr.client.solrj.SolrClient;
 import org.apache.solr.client.solrj.SolrResponse;
 import org.apache.solr.client.solrj.SolrServerException;
+import org.apache.solr.client.solrj.embedded.JettyConfig;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
 import org.apache.solr.client.solrj.impl.HttpSolrClient;
 import org.apache.solr.client.solrj.request.UpdateRequest;
@@ -46,6 +47,7 @@ import org.junit.runners.model.Statement;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import javax.servlet.Filter;
 import java.io.File;
 import java.io.IOException;
 import java.lang.annotation.ElementType;
@@ -389,10 +391,13 @@ public abstract class BaseDistributedSearchTestCase extends SolrTestCaseJ4 {
   
   public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, boolean explicitCoreNodeName) throws Exception {
 
-    boolean stopAtShutdown = true;
-    JettySolrRunner jetty = new JettySolrRunner
-        (solrHome.getAbsolutePath(), context, 0, solrConfigOverride, schemaOverride, stopAtShutdown,
-          getExtraServlets(), sslConfig, getExtraRequestFilters());
+    JettySolrRunner jetty = new JettySolrRunner(solrHome.getAbsolutePath(), solrConfigOverride, schemaOverride, JettyConfig.builder()
+        .stopAtShutdown(true)
+        .setContext(context)
+        .withFilters(getExtraRequestFilters())
+        .withServlets(getExtraServlets())
+        .withSSLConfig(sslConfig)
+        .build());
     jetty.setShards(shardList);
     jetty.setDataDir(dataDir);
     if (explicitCoreNodeName) {
@@ -409,7 +414,7 @@ public abstract class BaseDistributedSearchTestCase extends SolrTestCaseJ4 {
   }
 
   /** Override this method to insert extra filters into the JettySolrRunners that are created using createJetty() */
-  public SortedMap<Class,String> getExtraRequestFilters() {
+  public SortedMap<Class<? extends Filter>,String> getExtraRequestFilters() {
     return null;
   }
 
diff --git a/solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java b/solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java
index d91c38f..0ee84b9 100644
--- a/solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java
+++ b/solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java
@@ -21,6 +21,7 @@ import org.apache.commons.io.FileUtils;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.solr.client.solrj.SolrClient;
 import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;
+import org.apache.solr.client.solrj.embedded.JettyConfig;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
 import org.apache.solr.client.solrj.impl.HttpSolrClient;
 import org.apache.solr.util.ExternalPaths;
@@ -75,7 +76,15 @@ abstract public class SolrJettyTestBase extends SolrTestCaseJ4
 
     context = context==null ? "/solr" : context;
     SolrJettyTestBase.context = context;
-    jetty = new JettySolrRunner(solrHome, context, 0, configFile, schemaFile, stopAtShutdown, extraServlets, sslConfig);
+
+    JettyConfig jettyConfig = JettyConfig.builder()
+        .setContext(context)
+        .stopAtShutdown(stopAtShutdown)
+        .withServlets(extraServlets)
+        .withSSLConfig(sslConfig)
+        .build();
+
+    jetty = new JettySolrRunner(solrHome, configFile, schemaFile, jettyConfig);
 
     // this sets the property for jetty starting SolrDispatchFilter
     if (System.getProperty("solr.data.dir") == null && System.getProperty("solr.hdfs.home") == null) {
diff --git a/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java b/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
index 9f38b7c..ae37a1c 100644
--- a/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
+++ b/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
@@ -32,6 +32,7 @@ import org.apache.lucene.util.LuceneTestCase.SuppressFileSystems;
 import org.apache.lucene.util.LuceneTestCase.SuppressSysoutChecks;
 import org.apache.lucene.util.QuickPatchThreadsFilter;
 import org.apache.lucene.util.TestUtil;
+import org.apache.solr.client.solrj.embedded.JettyConfig;
 import org.apache.solr.client.solrj.impl.HttpClientConfigurer;
 import org.apache.solr.client.solrj.impl.HttpClientUtil;
 import org.apache.solr.client.solrj.util.ClientUtils;
@@ -46,14 +47,14 @@ import org.apache.solr.common.params.ModifiableSolrParams;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.ObjectReleaseTracker;
 import org.apache.solr.common.util.XML;
-import org.apache.solr.core.CoresLocator;
-import org.apache.solr.core.NodeConfig;
 import org.apache.solr.core.CoreContainer;
 import org.apache.solr.core.CoreDescriptor;
-import org.apache.solr.core.SolrXmlConfig;
+import org.apache.solr.core.CoresLocator;
+import org.apache.solr.core.NodeConfig;
 import org.apache.solr.core.SolrConfig;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.core.SolrResourceLoader;
+import org.apache.solr.core.SolrXmlConfig;
 import org.apache.solr.handler.UpdateRequestHandler;
 import org.apache.solr.request.LocalSolrQueryRequest;
 import org.apache.solr.request.SolrQueryRequest;
@@ -303,6 +304,10 @@ public abstract class SolrTestCaseJ4 extends LuceneTestCase {
     
     return new SSLTestConfig(trySsl, trySslClientAuth);
   }
+
+  protected static JettyConfig buildJettyConfig(String context) {
+    return JettyConfig.builder().setContext(context).withSSLConfig(sslConfig).build();
+  }
   
   protected static String buildUrl(final int port, final String context) {
     return (isSSLMode() ? "https" : "http") + "://127.0.0.1:" + port + context;
diff --git a/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java b/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
index cc8bf52..bd0bbf4 100644
--- a/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
+++ b/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
@@ -24,6 +24,7 @@ import org.apache.solr.client.solrj.SolrClient;
 import org.apache.solr.client.solrj.SolrQuery;
 import org.apache.solr.client.solrj.SolrRequest;
 import org.apache.solr.client.solrj.SolrServerException;
+import org.apache.solr.client.solrj.embedded.JettyConfig;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
 import org.apache.solr.client.solrj.impl.CloudSolrClient;
 import org.apache.solr.client.solrj.impl.HttpSolrClient;
@@ -494,8 +495,16 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
   public JettySolrRunner createJetty(String dataDir, String ulogDir, String shardList,
       String solrConfigOverride) throws Exception {
 
-    JettySolrRunner jetty = new JettySolrRunner(getSolrHome(), context, 0,
-        solrConfigOverride, null, false, getExtraServlets(), sslConfig, getExtraRequestFilters());
+    JettyConfig jettyconfig = JettyConfig.builder()
+        .setContext(context)
+        .stopAtShutdown(false)
+        .withServlets(getExtraServlets())
+        .withFilters(getExtraRequestFilters())
+        .withSSLConfig(sslConfig)
+        .build();
+    
+    JettySolrRunner jetty = new JettySolrRunner(getSolrHome(), solrConfigOverride, null, jettyconfig);
+
     jetty.setShards(shardList);
     jetty.setDataDir(getDataDir(dataDir));
     jetty.start();
@@ -509,7 +518,16 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
       solrHome = getRelativeSolrHomePath(solrHome);
     }
 
-    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context, 0, solrConfigOverride, schemaOverride, false, getExtraServlets(), sslConfig, getExtraRequestFilters());
+    JettyConfig jettyconfig = JettyConfig.builder()
+        .setContext(context)
+        .stopAtShutdown(false)
+        .withServlets(getExtraServlets())
+        .withFilters(getExtraRequestFilters())
+        .withSSLConfig(sslConfig)
+        .build();
+    
+    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), solrConfigOverride, schemaOverride, jettyconfig);
+
     jetty.setShards(shardList);
     jetty.setDataDir(getDataDir(dataDir));
     jetty.start();
@@ -526,13 +544,19 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
                                      String shardList, String solrConfigOverride, String schemaOverride)
       throws Exception {
 
-    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context,
-        0, solrConfigOverride, schemaOverride, false,
-        getExtraServlets(), sslConfig, getExtraRequestFilters());
+    JettyConfig jettyconfig = JettyConfig.builder()
+        .setContext(context)
+        .stopAtShutdown(false)
+        .withServlets(getExtraServlets())
+        .withFilters(getExtraRequestFilters())
+        .withSSLConfig(sslConfig)
+        .build();
+
+    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), solrConfigOverride, schemaOverride, jettyconfig);
     jetty.setShards(shardList);
     jetty.setDataDir(getDataDir(dataDir));
 
-    SocketProxy proxy = new SocketProxy(0, sslConfig == null ? false : sslConfig.isSSLMode());
+    SocketProxy proxy = new SocketProxy(0, sslConfig != null && sslConfig.isSSLMode());
     jetty.setProxyPort(proxy.getListenPort());
     jetty.start();
     proxy.open(jetty.getBaseUrl().toURI());
diff --git a/solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster.java b/solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster.java
index f252c6c..9789a10 100644
--- a/solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster.java
+++ b/solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster.java
@@ -18,6 +18,7 @@ package org.apache.solr.cloud;
  */
 
 import org.apache.solr.client.solrj.SolrServerException;
+import org.apache.solr.client.solrj.embedded.JettyConfig;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
 import org.apache.solr.client.solrj.embedded.SSLConfig;
 import org.apache.solr.client.solrj.impl.CloudSolrClient;
@@ -33,6 +34,7 @@ import org.eclipse.jetty.servlet.ServletHolder;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import javax.servlet.Filter;
 import java.io.File;
 import java.io.IOException;
 import java.util.Collections;
@@ -45,10 +47,11 @@ public class MiniSolrCloudCluster {
   
   private static Logger log = LoggerFactory.getLogger(MiniSolrCloudCluster.class);
 
-  private ZkTestServer zkServer;
-  private List<JettySolrRunner> jettys;
-  private File testDir;
-  private CloudSolrClient solrClient;
+  private final ZkTestServer zkServer;
+  private final List<JettySolrRunner> jettys;
+  private final File testDir;
+  private final CloudSolrClient solrClient;
+  private final JettyConfig jettyConfig;
 
   /**
    * "Mini" SolrCloud cluster to be used for testing
@@ -61,7 +64,7 @@ public class MiniSolrCloudCluster {
    */
   public MiniSolrCloudCluster(int numServers, String hostContext, File baseDir, File solrXml,
       SortedMap<ServletHolder, String> extraServlets,
-      SortedMap<Class, String> extraRequestFilters) throws Exception {
+      SortedMap<Class<? extends Filter>, String> extraRequestFilters) throws Exception {
     this(numServers, hostContext, baseDir, solrXml, extraServlets, extraRequestFilters, null);
   }
 
@@ -77,9 +80,20 @@ public class MiniSolrCloudCluster {
    */
   public MiniSolrCloudCluster(int numServers, String hostContext, File baseDir, File solrXml,
       SortedMap<ServletHolder, String> extraServlets,
-      SortedMap<Class, String> extraRequestFilters,
+      SortedMap<Class<? extends Filter>, String> extraRequestFilters,
       SSLConfig sslConfig) throws Exception {
-    testDir = baseDir;
+    this(numServers, baseDir, solrXml, JettyConfig.builder()
+        .setContext(hostContext)
+        .withSSLConfig(sslConfig)
+        .withFilters(extraRequestFilters)
+        .withServlets(extraServlets)
+        .build());
+  }
+
+  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig) throws Exception {
+
+    this.testDir = baseDir;
+    this.jettyConfig = jettyConfig;
 
     String zkDir = testDir.getAbsolutePath() + File.separator
       + "zookeeper/server1/data";
@@ -95,13 +109,9 @@ public class MiniSolrCloudCluster {
     System.setProperty("solr.solrxml.location","zookeeper");
     System.setProperty("zkHost", zkServer.getZkAddress());
 
-    jettys = new LinkedList<JettySolrRunner>();
+    jettys = new LinkedList<>();
     for (int i = 0; i < numServers; ++i) {
-      if (sslConfig == null) {
-        startJettySolrRunner(hostContext, extraServlets, extraRequestFilters);
-      } else {
-        startJettySolrRunner(hostContext, extraServlets, extraRequestFilters, sslConfig);
-      }
+      startJettySolrRunner(jettyConfig);
     }
     
     solrClient = buildSolrClient();
@@ -123,37 +133,78 @@ public class MiniSolrCloudCluster {
 
   /**
    * Start a new Solr instance
+   *
    * @param hostContext context path of Solr servers used by Jetty
    * @param extraServlets Extra servlets to be started by Jetty
    * @param extraRequestFilters extra filters to be started by Jetty
+   *
    * @return new Solr instance
+   *
    */
   public JettySolrRunner startJettySolrRunner(String hostContext,
       SortedMap<ServletHolder, String> extraServlets,
-      SortedMap<Class, String> extraRequestFilters) throws Exception {
+      SortedMap<Class<? extends Filter>, String> extraRequestFilters) throws Exception {
     return startJettySolrRunner(hostContext, extraServlets, extraRequestFilters, null);
   }
 
   /**
    * Start a new Solr instance
+   *
    * @param hostContext context path of Solr servers used by Jetty
    * @param extraServlets Extra servlets to be started by Jetty
    * @param extraRequestFilters extra filters to be started by Jetty
    * @param sslConfig SSL configuration
+   *
    * @return new Solr instance
    */
   public JettySolrRunner startJettySolrRunner(String hostContext,
       SortedMap<ServletHolder, String> extraServlets,
-      SortedMap<Class, String> extraRequestFilters, SSLConfig sslConfig) throws Exception {
+      SortedMap<Class<? extends Filter>, String> extraRequestFilters, SSLConfig sslConfig) throws Exception {
+    return startJettySolrRunner(hostContext, JettyConfig.builder()
+        .withServlets(extraServlets)
+        .withFilters(extraRequestFilters)
+        .withSSLConfig(sslConfig)
+        .build());
+  }
+
+  /**
+   * Start a new Solr instance
+   *
+   * @param config a JettyConfig for the instance's {@link org.apache.solr.client.solrj.embedded.JettySolrRunner}
+   *
+   * @return a JettySolrRunner
+   */
+  public JettySolrRunner startJettySolrRunner(JettyConfig config) throws Exception {
+    return startJettySolrRunner(config.context, config);
+  }
+
+  /**
+   * Start a new Solr instance on a particular servlet context
+   *
+   * @param hostContext the context to run on
+   * @param config a JettyConfig for the instance's {@link org.apache.solr.client.solrj.embedded.JettySolrRunner}
+   *
+   * @return a JettySolrRunner
+   */
+  public JettySolrRunner startJettySolrRunner(String hostContext, JettyConfig config) throws Exception {
     String context = getHostContextSuitableForServletContext(hostContext);
-    JettySolrRunner jetty = new JettySolrRunner(testDir.getAbsolutePath(), context,
-      0, null, null, true, extraServlets, sslConfig, extraRequestFilters);
+    JettyConfig newConfig = JettyConfig.builder(config).setContext(context).build();
+    JettySolrRunner jetty = new JettySolrRunner(testDir.getAbsolutePath(), newConfig);
     jetty.start();
     jettys.add(jetty);
     return jetty;
   }
 
   /**
+   * Start a new Solr instance, using the default config
+   *
+   * @return a JettySolrRunner
+   */
+  public JettySolrRunner startJettySolrRunner() throws Exception {
+    return startJettySolrRunner(jettyConfig);
+  }
+
+  /**
    * Stop a Solr instance
    * @param index the index of node in collection returned by {@link #getJettySolrRunners()}
    * @return the shut down node
@@ -222,7 +273,7 @@ public class MiniSolrCloudCluster {
 
   private static String getHostContextSuitableForServletContext(String ctx) {
     if (ctx == null || "".equals(ctx)) ctx = "/solr";
-    if (ctx.endsWith("/")) ctx = ctx.substring(0,ctx.length()-1);;
+    if (ctx.endsWith("/")) ctx = ctx.substring(0,ctx.length()-1);
     if (!ctx.startsWith("/")) ctx = "/" + ctx;
     return ctx;
   }

