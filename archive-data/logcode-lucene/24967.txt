GitDiffStart: 98ce298586e66665c031d109b9b24d7d0653c415 | Fri Sep 3 21:16:28 2004 +0000
diff --git a/src/test/org/apache/lucene/queryParser/TestQueryParser.java b/src/test/org/apache/lucene/queryParser/TestQueryParser.java
index ec0a763..211c818 100644
--- a/src/test/org/apache/lucene/queryParser/TestQueryParser.java
+++ b/src/test/org/apache/lucene/queryParser/TestQueryParser.java
@@ -343,36 +343,36 @@ public class TestQueryParser extends TestCase {
     //assertQueryEquals("foo \\|| bar", a, "foo \\|| bar");
     //assertQueryEquals("foo \\AND bar", a, "foo \\AND bar");
 
-	assertQueryEquals("a\\-b:c",a,"a\\-b:c");
-	assertQueryEquals("a\\+b:c",a,"a\\+b:c");
-	assertQueryEquals("a\\:b:c",a,"a\\:b:c");
-	assertQueryEquals("a\\\\b:c",a,"a\\\\b:c");
-
-	assertQueryEquals("a:b\\-c",a,"a:b\\-c");
-	assertQueryEquals("a:b\\+c",a,"a:b\\+c");
-	assertQueryEquals("a:b\\:c",a,"a:b\\:c");
-	assertQueryEquals("a:b\\\\c",a,"a:b\\\\c");
-
-	assertQueryEquals("a:b\\-c*",a,"a:b-c*");
-	assertQueryEquals("a:b\\+c*",a,"a:b+c*");
-	assertQueryEquals("a:b\\:c*",a,"a:b:c*");
-  
-	assertQueryEquals("a:b\\\\c*",a,"a:b\\c*");
-
-	assertQueryEquals("a:b\\-?c",a,"a:b-?c");
-	assertQueryEquals("a:b\\+?c",a,"a:b+?c");
-	assertQueryEquals("a:b\\:?c",a,"a:b:?c");
-  
-	assertQueryEquals("a:b\\\\?c",a,"a:b\\\\\\?c");
-
-	assertQueryEquals("a:b\\-c~",a,"a:b-c~");
-	assertQueryEquals("a:b\\+c~",a,"a:b+c~");
-	assertQueryEquals("a:b\\:c~",a,"a:b:c~");
-	assertQueryEquals("a:b\\\\c~",a,"a:b\\c~");
-
-	assertQueryEquals("[ a\\- TO a\\+ ]", null, "[a- TO a+]");
-	assertQueryEquals("[ a\\: TO a\\~ ]", null, "[a: TO a~]");
-	assertQueryEquals("[ a\\\\ TO a\\* ]", null, "[a\\ TO a*]");
+    assertQueryEquals("a\\-b:c", a, "a\\-b:c");
+    assertQueryEquals("a\\+b:c", a, "a\\+b:c");
+    assertQueryEquals("a\\:b:c", a, "a\\:b:c");
+    assertQueryEquals("a\\\\b:c", a, "a\\\\b:c");
+
+    assertQueryEquals("a:b\\-c", a, "a:b\\-c");
+    assertQueryEquals("a:b\\+c", a, "a:b\\+c");
+    assertQueryEquals("a:b\\:c", a, "a:b\\:c");
+    assertQueryEquals("a:b\\\\c", a, "a:b\\\\c");
+
+    assertQueryEquals("a:b\\-c*", a, "a:b-c*");
+    assertQueryEquals("a:b\\+c*", a, "a:b+c*");
+    assertQueryEquals("a:b\\:c*", a, "a:b:c*");
+
+    assertQueryEquals("a:b\\\\c*", a, "a:b\\c*");
+
+    assertQueryEquals("a:b\\-?c", a, "a:b-?c");
+    assertQueryEquals("a:b\\+?c", a, "a:b+?c");
+    assertQueryEquals("a:b\\:?c", a, "a:b:?c");
+
+    assertQueryEquals("a:b\\\\?c", a, "a:b\\\\\\?c");
+
+    assertQueryEquals("a:b\\-c~", a, "a:b-c~");
+    assertQueryEquals("a:b\\+c~", a, "a:b+c~");
+    assertQueryEquals("a:b\\:c~", a, "a:b:c~");
+    assertQueryEquals("a:b\\\\c~", a, "a:b\\c~");
+
+    assertQueryEquals("[ a\\- TO a\\+ ]", null, "[a- TO a+]");
+    assertQueryEquals("[ a\\: TO a\\~ ]", null, "[a: TO a~]");
+    assertQueryEquals("[ a\\\\ TO a\\* ]", null, "[a\\ TO a*]");
   }
 
   public void testTabNewlineCarriageReturn()

