GitDiffStart: fd11477ecec6ce0e39d3a83853a2e14a27c481fa | Sat Oct 2 19:58:35 2010 +0000
diff --git a/lucene/src/java/org/apache/lucene/queryParser/QueryParser.java b/lucene/src/java/org/apache/lucene/queryParser/QueryParser.java
index 8f0a1f2..5a243c8 100644
--- a/lucene/src/java/org/apache/lucene/queryParser/QueryParser.java
+++ b/lucene/src/java/org/apache/lucene/queryParser/QueryParser.java
@@ -156,12 +156,15 @@ public class QueryParser implements QueryParserConstants {
   Collator rangeCollator = null;
 
   /** @deprecated remove when getFieldQuery is removed */
+  @Deprecated
   private static final VirtualMethod<QueryParser> getFieldQueryMethod =
     new VirtualMethod<QueryParser>(QueryParser.class, "getFieldQuery", String.class, String.class);
   /** @deprecated remove when getFieldQuery is removed */
+  @Deprecated
   private static final VirtualMethod<QueryParser> getFieldQueryWithQuotedMethod =
     new VirtualMethod<QueryParser>(QueryParser.class, "getFieldQuery", String.class, String.class, boolean.class);
   /** @deprecated remove when getFieldQuery is removed */
+  @Deprecated
   private final boolean hasNewAPI =
     VirtualMethod.compareImplementationDistance(getClass(),
         getFieldQueryWithQuotedMethod, getFieldQueryMethod) >= 0; // its ok for both to be overridden
@@ -1622,12 +1625,6 @@ public class QueryParser implements QueryParserConstants {
     finally { jj_save(0, xla); }
   }
 
-  private boolean jj_3R_2() {
-    if (jj_scan_token(TERM)) return true;
-    if (jj_scan_token(COLON)) return true;
-    return false;
-  }
-
   private boolean jj_3_1() {
     Token xsp;
     xsp = jj_scanpos;
@@ -1644,6 +1641,12 @@ public class QueryParser implements QueryParserConstants {
     return false;
   }
 
+  private boolean jj_3R_2() {
+    if (jj_scan_token(TERM)) return true;
+    if (jj_scan_token(COLON)) return true;
+    return false;
+  }
+
   /** Generated Token Manager. */
   public QueryParserTokenManager token_source;
   /** Current token. */
diff --git a/lucene/src/java/org/apache/lucene/queryParser/QueryParser.jj b/lucene/src/java/org/apache/lucene/queryParser/QueryParser.jj
index 39d7c56..9970e0e 100644
--- a/lucene/src/java/org/apache/lucene/queryParser/QueryParser.jj
+++ b/lucene/src/java/org/apache/lucene/queryParser/QueryParser.jj
@@ -180,12 +180,15 @@ public class QueryParser {
   Collator rangeCollator = null;
 
   /** @deprecated remove when getFieldQuery is removed */
+  @Deprecated
   private static final VirtualMethod<QueryParser> getFieldQueryMethod =
     new VirtualMethod<QueryParser>(QueryParser.class, "getFieldQuery", String.class, String.class);
   /** @deprecated remove when getFieldQuery is removed */
+  @Deprecated
   private static final VirtualMethod<QueryParser> getFieldQueryWithQuotedMethod =
     new VirtualMethod<QueryParser>(QueryParser.class, "getFieldQuery", String.class, String.class, boolean.class);
   /** @deprecated remove when getFieldQuery is removed */
+  @Deprecated
   private final boolean hasNewAPI = 
     VirtualMethod.compareImplementationDistance(getClass(), 
         getFieldQueryWithQuotedMethod, getFieldQueryMethod) >= 0; // its ok for both to be overridden
diff --git a/lucene/src/java/org/apache/lucene/search/FilteredTermsEnum.java b/lucene/src/java/org/apache/lucene/search/FilteredTermsEnum.java
index 1c65283..89c6ea5 100644
--- a/lucene/src/java/org/apache/lucene/search/FilteredTermsEnum.java
+++ b/lucene/src/java/org/apache/lucene/search/FilteredTermsEnum.java
@@ -183,6 +183,7 @@ public abstract class FilteredTermsEnum extends TermsEnum {
     tenum.cacheCurrentTerm();
   }
     
+  @SuppressWarnings("fallthrough")
   @Override
   public BytesRef next() throws IOException {
     if (tenum == null)
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter.java
index 882f82c..7942f44 100644
--- a/modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter.java
+++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter.java
@@ -62,11 +62,13 @@ public final class CommonGramsFilter extends TokenFilter {
   private State savedState;
 
   /** @deprecated Use {@link #CommonGramsFilter(Version, TokenStream, Set)} instead */
+  @Deprecated
   public CommonGramsFilter(TokenStream input, Set<?> commonWords) {
     this(Version.LUCENE_29, input, commonWords);
   }
   
   /** @deprecated Use {@link #CommonGramsFilter(Version, TokenStream, Set, boolean)} instead */
+  @Deprecated
   public CommonGramsFilter(TokenStream input, Set<?> commonWords, boolean ignoreCase) {
     this(Version.LUCENE_29, input, commonWords, ignoreCase);
   }
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/core/LetterTokenizer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/core/LetterTokenizer.java
index 471f471..9b1d5c9 100644
--- a/modules/analysis/common/src/java/org/apache/lucene/analysis/core/LetterTokenizer.java
+++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/core/LetterTokenizer.java
@@ -93,6 +93,7 @@ public class LetterTokenizer extends CharTokenizer {
    * @deprecated use {@link #LetterTokenizer(Version, Reader)} instead. This
    *             will be removed in Lucene 4.0.
    */
+  @Deprecated
   public LetterTokenizer(Reader in) {
     super(Version.LUCENE_30, in);
   }
@@ -103,6 +104,7 @@ public class LetterTokenizer extends CharTokenizer {
    * use {@link #LetterTokenizer(Version, AttributeSource, Reader)} instead.
    * This will be removed in Lucene 4.0.
    */
+  @Deprecated
   public LetterTokenizer(AttributeSource source, Reader in) {
     super(Version.LUCENE_30, source, in);
   }
@@ -114,6 +116,7 @@ public class LetterTokenizer extends CharTokenizer {
    * @deprecated use {@link #LetterTokenizer(Version, AttributeSource.AttributeFactory, Reader)}
    *             instead. This will be removed in Lucene 4.0.
    */
+  @Deprecated
   public LetterTokenizer(AttributeFactory factory, Reader in) {
     super(Version.LUCENE_30, factory, in);
   }
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/core/LowerCaseTokenizer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/core/LowerCaseTokenizer.java
index b3e1072..0c8e594 100644
--- a/modules/analysis/common/src/java/org/apache/lucene/analysis/core/LowerCaseTokenizer.java
+++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/core/LowerCaseTokenizer.java
@@ -106,6 +106,7 @@ public final class LowerCaseTokenizer extends LetterTokenizer {
    * @deprecated use {@link #LowerCaseTokenizer(AttributeSource, Reader)}
    *             instead. This will be removed in Lucene 4.0.
    */
+  @Deprecated
   public LowerCaseTokenizer(AttributeSource source, Reader in) {
     super(Version.LUCENE_30, source, in);
   }
@@ -117,6 +118,7 @@ public final class LowerCaseTokenizer extends LetterTokenizer {
    * @deprecated use {@link #LowerCaseTokenizer(AttributeSource.AttributeFactory, Reader)}
    *             instead. This will be removed in Lucene 4.0.
    */
+  @Deprecated
   public LowerCaseTokenizer(AttributeFactory factory, Reader in) {
     super(Version.LUCENE_30, factory, in);
   }
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishMinimalStemmer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishMinimalStemmer.java
index aff2e9f..e7fe007 100644
--- a/modules/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishMinimalStemmer.java
+++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/en/EnglishMinimalStemmer.java
@@ -25,6 +25,7 @@ package org.apache.lucene.analysis.en;
  * Donna Harman.
  */
 public class EnglishMinimalStemmer {
+  @SuppressWarnings("fallthrough")
   public int stem(char s[], int len) {
     if (len < 3 || s[len-1] != 's')
       return len;
@@ -38,7 +39,7 @@ public class EnglishMinimalStemmer {
           return len - 2;
         }
         if (s[len-3] == 'i' || s[len-3] == 'a' || s[len-3] == 'o' || s[len-3] == 'e')
-          return len;
+          return len; /* intentional fallthrough */
       default: return len - 1;
     }
   }
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/hu/HungarianLightStemmer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/hu/HungarianLightStemmer.java
index 31b5e6f..53f0dc8 100644
--- a/modules/analysis/common/src/java/org/apache/lucene/analysis/hu/HungarianLightStemmer.java
+++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/hu/HungarianLightStemmer.java
@@ -202,6 +202,7 @@ public class HungarianLightStemmer {
     return len;
   }
 
+  @SuppressWarnings("fallthrough")
   private int removePlural(char s[], int len) {
     if (len > 3 && s[len-1] == 'k')
       switch(s[len-2]) {
diff --git a/modules/analysis/common/src/java/org/tartarus/snowball/TestApp.java b/modules/analysis/common/src/java/org/tartarus/snowball/TestApp.java
index 2a253e2..855dfad 100644
--- a/modules/analysis/common/src/java/org/tartarus/snowball/TestApp.java
+++ b/modules/analysis/common/src/java/org/tartarus/snowball/TestApp.java
@@ -89,7 +89,7 @@ public class TestApp {
 	int character;
 	while ((character = reader.read()) != -1) {
 	    char ch = (char) character;
-	    if (Character.isWhitespace((char) ch)) {
+	    if (Character.isWhitespace(ch)) {
 		if (input.length() > 0) {
 		    stemmer.setCurrent(input.toString());
 		    for (int i = repeat; i != 0; i--) {
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestTrimFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestTrimFilter.java
index 9b4d31d..68c5d70 100644
--- a/modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestTrimFilter.java
+++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestTrimFilter.java
@@ -72,6 +72,7 @@ public class TestTrimFilter extends BaseTokenStreamTestCase {
   /**
    * @deprecated does not support custom attributes
    */
+  @Deprecated
   private static class IterTokenStream extends TokenStream {
     final Token tokens[];
     int index = 0;
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer.java
index f3f086e..2e8ac60 100644
--- a/modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer.java
+++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer.java
@@ -98,6 +98,7 @@ public class TestPatternTokenizer extends BaseTokenStreamTestCase
    * TODO: rewrite tests not to use string comparison.
    * @deprecated only tests TermAttribute!
    */
+  @Deprecated
   private static String tsToString(TokenStream in) throws IOException {
     StringBuilder out = new StringBuilder();
     CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java
index 63a4e23..e5771c3 100644
--- a/modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java
+++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowball.java
@@ -73,6 +73,7 @@ public class TestSnowball extends BaseTokenStreamTestCase {
    * Test turkish lowercasing (old buggy behavior)
    * @deprecated Remove this when support for 3.0 indexes is no longer required
    */
+  @Deprecated
   public void testTurkishBWComp() throws Exception {
     Analyzer a = new SnowballAnalyzer(Version.LUCENE_30, "Turkish");
     // A?ACI in turkish lowercases to a?acı, but with lowercase filter a?aci.
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter.java
index 7cb690e..311e413 100644
--- a/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter.java
+++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter.java
@@ -334,6 +334,7 @@ public class TestSynonymFilter extends BaseTokenStreamTestCase {
    * a,1,10,11  => "a" with positionIncrement=1, startOffset=10, endOffset=11
    * @deprecated does not support attributes api
    */
+  @Deprecated
   private List<Token> tokens(String str) {
     String[] arr = str.split(" ");
     List<Token> result = new ArrayList<Token>();
@@ -379,6 +380,7 @@ public class TestSynonymFilter extends BaseTokenStreamTestCase {
   /**
    * @deprecated does not support custom attributes
    */
+  @Deprecated
   private static class IterTokenStream extends TokenStream {
     final Token tokens[];
     int index = 0;

