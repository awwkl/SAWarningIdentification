GitDiffStart: c4db8d57a43e01226afe58fcb765d4a117753de9 | Mon Dec 21 14:39:21 2015 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 8fac0cf..2991a61 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -368,7 +368,7 @@ Other Changes
 * SOLR-8419: TermVectorComponent for distributed search now requires a uniqueKey in the schema.  Also, it no longer
   returns "uniqueKeyField" in the response. (David Smiley)
 
-* SOLR-8317: add responseHeader and response accessors to SolrQueryResponse. (Christine Poerschke)
+* SOLR-8317: add & use responseHeader and response accessors to SolrQueryResponse. (Christine Poerschke)
 
 ==================  5.4.0 ==================
 
diff --git a/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent.java b/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent.java
index ad01624..1dd8cf9 100644
--- a/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent.java
+++ b/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent.java
@@ -273,7 +273,7 @@ public class ClusteringComponent extends SearchComponent implements SolrCoreAwar
       SearchClusteringEngine engine = searchClusteringEngines.get(name);
       if (engine != null) {
         checkAvailable(name, engine);
-        SolrDocumentList solrDocList = (SolrDocumentList) rb.rsp.getValues().get("response");
+        SolrDocumentList solrDocList = (SolrDocumentList) rb.rsp.getResponse();
         // TODO: Currently, docIds is set to null in distributed environment.
         // This causes CarrotParams.PRODUCE_SUMMARY doesn't work.
         // To work CarrotParams.PRODUCE_SUMMARY under distributed mode, we can choose either one of:
diff --git a/solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest.java b/solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest.java
index 791fc05..4b53cdb 100644
--- a/solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest.java
+++ b/solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest.java
@@ -52,7 +52,7 @@ public class ClusteringComponentTest extends AbstractClusteringTestCase {
     SolrRequestHandler handler = core.getRequestHandler("standard");
     SolrQueryResponse rsp;
     rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap<>());
+    rsp.addResponseHeader(new SimpleOrderedMap<>());
     SolrQueryRequest req = new LocalSolrQueryRequest(core, params);
     handler.handleRequest(req, rsp);
     NamedList<?> values = rsp.getValues();
@@ -70,7 +70,7 @@ public class ClusteringComponentTest extends AbstractClusteringTestCase {
     handler = core.getRequestHandler("docClustering");
 
     rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap<>());
+    rsp.addResponseHeader(new SimpleOrderedMap<>());
     req = new LocalSolrQueryRequest(core, params);
     handler.handleRequest(req, rsp);
     values = rsp.getValues();
diff --git a/solr/contrib/velocity/src/java/org/apache/solr/response/PageTool.java b/solr/contrib/velocity/src/java/org/apache/solr/response/PageTool.java
index df56810..6c35d4d 100644
--- a/solr/contrib/velocity/src/java/org/apache/solr/response/PageTool.java
+++ b/solr/contrib/velocity/src/java/org/apache/solr/response/PageTool.java
@@ -42,7 +42,7 @@ public class PageTool {
       results_per_page = new Integer(rows);
     }
     //TODO: Handle group by results
-    Object docs = response.getValues().get("response");
+    Object docs = response.getResponse();
     if (docs != null) {
       if (docs instanceof DocSlice) {
         DocSlice doc_slice = (DocSlice) docs;
diff --git a/solr/core/src/java/org/apache/solr/core/SolrCore.java b/solr/core/src/java/org/apache/solr/core/SolrCore.java
index 00602ca..40649a4 100644
--- a/solr/core/src/java/org/apache/solr/core/SolrCore.java
+++ b/solr/core/src/java/org/apache/solr/core/SolrCore.java
@@ -2079,7 +2079,7 @@ public final class SolrCore implements SolrInfoMBean, Closeable {
   public static void preDecorateResponse(SolrQueryRequest req, SolrQueryResponse rsp) {
     // setup response header
     final NamedList<Object> responseHeader = new SimpleOrderedMap<>();
-    rsp.add("responseHeader", responseHeader);
+    rsp.addResponseHeader(responseHeader);
 
     // toLog is a local ref to the same NamedList used by the response
     NamedList<Object> toLog = rsp.getToLog();
diff --git a/solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.java b/solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.java
index 0de0a84..59da510 100644
--- a/solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.java
@@ -212,7 +212,7 @@ public class MoreLikeThisHandler extends RequestHandlerBase
         if (mltDocs == null) {
           mltDocs = new DocListAndSet(); // avoid NPE
         }
-        rsp.add("response", mltDocs.docList);
+        rsp.addResponse(mltDocs.docList);
 
 
         if (interesting != null) {
diff --git a/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java b/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
index dca6462..1fa4554 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
@@ -353,7 +353,7 @@ public class QueryComponent extends SearchComponent
       rb.setResults(res);
 
       ResultContext ctx = new BasicResultContext(rb);
-      rsp.add("response", ctx);
+      rsp.addResponse(ctx);
       return;
     }
 
@@ -506,7 +506,7 @@ public class QueryComponent extends SearchComponent
 
         if (grouping.mainResult != null) {
           ResultContext ctx = new BasicResultContext(rb, grouping.mainResult);
-          rsp.add("response", ctx);
+          rsp.addResponse(ctx);
           rsp.getToLog().add("hits", grouping.mainResult.matches());
         } else if (!grouping.getCommands().isEmpty()) { // Can never be empty since grouping.execute() checks for this.
           rsp.add("grouped", result.groupedResults);
@@ -523,7 +523,7 @@ public class QueryComponent extends SearchComponent
     rb.setResult(result);
 
     ResultContext ctx = new BasicResultContext(rb);
-    rsp.add("response", ctx);
+    rsp.addResponse(ctx);
     rsp.getToLog().add("hits", rb.getResults().docList.matches());
 
     if ( ! rb.req.getParams().getBool(ShardParams.IS_SHARD,false) ) {
@@ -822,7 +822,7 @@ public class QueryComponent extends SearchComponent
       }
     }
 
-    rb.rsp.add("response", rb._responseDocs);
+    rb.rsp.addResponse(rb._responseDocs);
     if (null != rb.getNextCursorMark()) {
       rb.rsp.add(CursorMarkParams.CURSOR_MARK_NEXT,
                  rb.getNextCursorMark().getSerializedTotem());
diff --git a/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java b/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java
index 9af3f0f..7cf7214 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent.java
@@ -221,7 +221,7 @@ public class RealTimeGetComponent extends SearchComponent
      rsp.add("doc", docList.size() > 0 ? docList.get(0) : null);
    } else {
      docList.setNumFound(docList.size());
-     rsp.add("response", docList);
+     rsp.addResponse(docList);
    }
 
   }
@@ -499,7 +499,7 @@ public class RealTimeGetComponent extends SearchComponent
       rb.rsp.add("doc", docList.size() > 0 ? docList.get(0) : null);
     } else {
       docList.setNumFound(docList.size());
-      rb.rsp.add("response", docList);
+      rb.rsp.addResponse(docList);
     }
   }
 
diff --git a/solr/core/src/java/org/apache/solr/handler/component/ResponseLogComponent.java b/solr/core/src/java/org/apache/solr/handler/component/ResponseLogComponent.java
index 4eb58f7..d9102a7 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/ResponseLogComponent.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/ResponseLogComponent.java
@@ -70,7 +70,7 @@ public class ResponseLogComponent extends SearchComponent {
     IndexSchema schema = searcher.getSchema();
     if (schema.getUniqueKeyField() == null) return;
 
-    ResultContext rc = (ResultContext) rb.rsp.getValues().get("response");
+    ResultContext rc = (ResultContext) rb.rsp.getResponse();
 
     DocList docs = rc.getDocList();
     if (docs.hasScores()) {
diff --git a/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java b/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java
index 8bfd442..f79091f 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java
@@ -290,11 +290,11 @@ public class SearchHandler extends RequestHandlerBase implements SolrCoreAware ,
         }
       } catch (ExitableDirectoryReader.ExitingReaderException ex) {
         log.warn( "Query: " + req.getParamString() + "; " + ex.getMessage());
-        SolrDocumentList r = (SolrDocumentList) rb.rsp.getValues().get("response");
+        SolrDocumentList r = (SolrDocumentList) rb.rsp.getResponse();
         if(r == null)
           r = new SolrDocumentList();
         r.setNumFound(0);
-        rb.rsp.add("response", r);
+        rb.rsp.addResponse(r);
         if(rb.isDebug()) {
           NamedList debug = new NamedList();
           debug.add("explain", new NamedList());
diff --git a/solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.java b/solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.java
index 61ec553..b11d44d 100644
--- a/solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.java
+++ b/solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.java
@@ -50,7 +50,7 @@ public class BinaryResponseWriter implements BinaryQueryResponseWriter {
   public void write(OutputStream out, SolrQueryRequest req, SolrQueryResponse response) throws IOException {
     Resolver resolver = new Resolver(req, response.getReturnFields());
     Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);
-    if (omitHeader != null && omitHeader) response.getValues().remove("responseHeader");
+    if (omitHeader != null && omitHeader) response.removeResponseHeader();
     new JavaBinCodec(resolver).setWritableDocFields(resolver).marshal(response.getValues(), out);
   }
 
diff --git a/solr/core/src/java/org/apache/solr/response/CSVResponseWriter.java b/solr/core/src/java/org/apache/solr/response/CSVResponseWriter.java
index b3baf4a..bba71c1 100644
--- a/solr/core/src/java/org/apache/solr/response/CSVResponseWriter.java
+++ b/solr/core/src/java/org/apache/solr/response/CSVResponseWriter.java
@@ -236,7 +236,7 @@ class CSVWriter extends TextResponseWriter {
     }
 
     Collection<String> fields = returnFields.getRequestedFieldNames();
-    Object responseObj = rsp.getValues().get("response");
+    Object responseObj = rsp.getResponse();
     boolean returnOnlyStored = false;
     if (fields==null||returnFields.hasPatternMatching()) {
       if (responseObj instanceof SolrDocumentList) {
diff --git a/solr/core/src/java/org/apache/solr/response/JSONResponseWriter.java b/solr/core/src/java/org/apache/solr/response/JSONResponseWriter.java
index 75c50ec..f61f2b9 100644
--- a/solr/core/src/java/org/apache/solr/response/JSONResponseWriter.java
+++ b/solr/core/src/java/org/apache/solr/response/JSONResponseWriter.java
@@ -92,7 +92,7 @@ class JSONWriter extends TextResponseWriter {
         writer.write(wrapperFunction + "(");
     }
     Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);
-    if(omitHeader != null && omitHeader) rsp.getValues().remove("responseHeader");
+    if(omitHeader != null && omitHeader) rsp.removeResponseHeader();
     writeNamedList(null, rsp.getValues());
     if(wrapperFunction!=null) {
         writer.write(')');
diff --git a/solr/core/src/java/org/apache/solr/response/PHPSerializedResponseWriter.java b/solr/core/src/java/org/apache/solr/response/PHPSerializedResponseWriter.java
index 9198222..49a813d 100644
--- a/solr/core/src/java/org/apache/solr/response/PHPSerializedResponseWriter.java
+++ b/solr/core/src/java/org/apache/solr/response/PHPSerializedResponseWriter.java
@@ -81,7 +81,7 @@ class PHPSerializedWriter extends JSONWriter {
   @Override
   public void writeResponse() throws IOException {
     Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);
-    if(omitHeader != null && omitHeader) rsp.getValues().remove("responseHeader");
+    if(omitHeader != null && omitHeader) rsp.removeResponseHeader();
     writeNamedList(null, rsp.getValues());
   }
   
diff --git a/solr/core/src/java/org/apache/solr/response/XMLWriter.java b/solr/core/src/java/org/apache/solr/response/XMLWriter.java
index 9fdaa02..9711671 100644
--- a/solr/core/src/java/org/apache/solr/response/XMLWriter.java
+++ b/solr/core/src/java/org/apache/solr/response/XMLWriter.java
@@ -104,9 +104,9 @@ public class XMLWriter extends TextResponseWriter {
     writer.write(XML_START2_NOSCHEMA);
 
     // dump response values
-    NamedList<?> lst = rsp.getValues();
     Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);
-    if(omitHeader != null && omitHeader) lst.remove("responseHeader");
+    if(omitHeader != null && omitHeader) rsp.removeResponseHeader();
+    final NamedList<?> lst = rsp.getValues();
     int sz = lst.size();
     int start=0;
 
diff --git a/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer.java b/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer.java
index 44ea1c4..d8afd38 100644
--- a/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer.java
+++ b/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer.java
@@ -57,7 +57,7 @@ public class MainEndResultTransformer implements EndResultTransformer {
       if (maxScore != Float.NEGATIVE_INFINITY) {
         docList.setMaxScore(maxScore);
       }
-      rb.rsp.add("response", docList);
+      rb.rsp.addResponse(docList);
     }
   }
 }
diff --git a/solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory.java
index c8dbba6..91f4985 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory.java
@@ -139,7 +139,7 @@ public class IgnoreCommitOptimizeUpdateProcessorFactory extends UpdateRequestPro
           } else {
             responseHeader = new SimpleOrderedMap<Object>();
             responseHeader.add("msg", responseMsg);
-            rsp.add("responseHeader", responseHeader);
+            rsp.addResponseHeader(responseHeader);
           }
         }
       }
diff --git a/solr/core/src/test/org/apache/solr/BasicFunctionalityTest.java b/solr/core/src/test/org/apache/solr/BasicFunctionalityTest.java
index 0f89e81..d2f47a6 100644
--- a/solr/core/src/test/org/apache/solr/BasicFunctionalityTest.java
+++ b/solr/core/src/test/org/apache/solr/BasicFunctionalityTest.java
@@ -710,7 +710,7 @@ public class BasicFunctionalityTest extends SolrTestCaseJ4 {
     SolrQueryResponse rsp = new SolrQueryResponse();
     core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);
 
-    DocList dl = ((ResultContext) rsp.getValues().get("response")).getDocList();
+    DocList dl = ((ResultContext) rsp.getResponse()).getDocList();
     StoredDocument d = req.getSearcher().doc(dl.iterator().nextDoc());
     // ensure field in fl is not lazy
     assertFalse( ((Field) d.getField("test_hlt")).getClass().getSimpleName().equals("LazyField"));
@@ -735,7 +735,7 @@ public class BasicFunctionalityTest extends SolrTestCaseJ4 {
     SolrQueryResponse rsp = new SolrQueryResponse();
     core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);
 
-    DocList dl = ((ResultContext) rsp.getValues().get("response")).getDocList();
+    DocList dl = ((ResultContext) rsp.getResponse()).getDocList();
     DocIterator di = dl.iterator();    
     StoredDocument d1 = req.getSearcher().doc(di.nextDoc());
     StorableField[] values1 = null;
@@ -757,7 +757,7 @@ public class BasicFunctionalityTest extends SolrTestCaseJ4 {
     rsp = new SolrQueryResponse();
     core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);
 
-    dl = ((ResultContext) rsp.getValues().get("response")).getDocList();
+    dl = ((ResultContext) rsp.getResponse()).getDocList();
     di = dl.iterator();    
     StoredDocument d2 = req.getSearcher().doc(di.nextDoc());
     // ensure same doc, same lazy field now
diff --git a/solr/core/src/test/org/apache/solr/TestGroupingSearch.java b/solr/core/src/test/org/apache/solr/TestGroupingSearch.java
index a02bf55..8929c58 100644
--- a/solr/core/src/test/org/apache/solr/TestGroupingSearch.java
+++ b/solr/core/src/test/org/apache/solr/TestGroupingSearch.java
@@ -273,7 +273,7 @@ public class TestGroupingSearch extends SolrTestCaseJ4 {
       SolrRequestInfo.clearRequestInfo();
     }
 
-    assertEquals(6, ((ResultContext) response.getValues().get("response")).getDocList().matches());
+    assertEquals(6, ((ResultContext) response.getResponse()).getDocList().matches());
     new BinaryResponseParser().processResponse(new ByteArrayInputStream(out.toByteArray()), "");
     out.close();
   }
diff --git a/solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java b/solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java
index 0038503..b2cda00 100644
--- a/solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java
+++ b/solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java
@@ -297,7 +297,7 @@ public class SpellCheckComponentTest extends SolrTestCaseJ4 {
 
         SolrRequestHandler handler = core.getRequestHandler("spellCheckCompRH");
         SolrQueryResponse rsp = new SolrQueryResponse();
-        rsp.add("responseHeader", new SimpleOrderedMap());
+        rsp.addResponseHeader(new SimpleOrderedMap());
         SolrQueryRequest req = new LocalSolrQueryRequest(core, params);
         handler.handleRequest(req, rsp);
         req.close();
@@ -310,7 +310,7 @@ public class SpellCheckComponentTest extends SolrTestCaseJ4 {
         params.remove(SpellingParams.SPELLCHECK_DICT);
         params.add(SpellingParams.SPELLCHECK_DICT, "threshold_direct");
         rsp = new SolrQueryResponse();
-        rsp.add("responseHeader", new SimpleOrderedMap());
+        rsp.addResponseHeader(new SimpleOrderedMap());
         req = new LocalSolrQueryRequest(core, params);
         handler.handleRequest(req, rsp);
         req.close();
diff --git a/solr/core/src/test/org/apache/solr/request/JSONWriterTest.java b/solr/core/src/test/org/apache/solr/request/JSONWriterTest.java
index 9d2ca2e..0edfb83 100644
--- a/solr/core/src/test/org/apache/solr/request/JSONWriterTest.java
+++ b/solr/core/src/test/org/apache/solr/request/JSONWriterTest.java
@@ -124,7 +124,7 @@ public class JSONWriterTest extends SolrTestCaseJ4 {
     list.setMaxScore(0.7f);
     list.add(solrDoc);
 
-    rsp.add("response", list);
+    rsp.addResponse(list);
 
     w.write(buf, req, rsp);
     String result = buf.toString();
diff --git a/solr/core/src/test/org/apache/solr/request/SmileWriterTest.java b/solr/core/src/test/org/apache/solr/request/SmileWriterTest.java
index 3ebe8b6..0835089 100644
--- a/solr/core/src/test/org/apache/solr/request/SmileWriterTest.java
+++ b/solr/core/src/test/org/apache/solr/request/SmileWriterTest.java
@@ -130,7 +130,7 @@ public class SmileWriterTest extends SolrTestCaseJ4 {
     list.setMaxScore(0.7f);
     list.add(solrDoc);
 
-    rsp.add("response", list);
+    rsp.addResponse(list);
 
     w.write(buf, req, rsp);
 
diff --git a/solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter.java b/solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter.java
index ecfc9bd..887d100 100644
--- a/solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter.java
+++ b/solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter.java
@@ -143,7 +143,7 @@ public class TestCSVResponseWriter extends SolrTestCaseJ4 {
     
     SolrQueryRequest req = req("q","*:*");
     SolrQueryResponse rsp = new SolrQueryResponse();
-    rsp.add("response", sdl);
+    rsp.addResponse(sdl);
     QueryResponseWriter w = new CSVResponseWriter();
     
     rsp.setReturnFields( new SolrReturnFields("id,foo_s", req) );
diff --git a/solr/core/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter.java b/solr/core/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter.java
index 722fac3..0110f53 100644
--- a/solr/core/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter.java
+++ b/solr/core/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter.java
@@ -96,7 +96,7 @@ public class TestPHPSerializedResponseWriter extends SolrTestCaseJ4 {
     SolrDocumentList sdl = new SolrDocumentList();
     sdl.add(d1);
     sdl.add(d2);
-    rsp.add("response", sdl); 
+    rsp.addResponse(sdl);
     
     w.write(buf, req, rsp);
     assertEquals("a:1:{s:8:\"response\";a:3:{s:8:\"numFound\";i:0;s:5:\"start\";i:0;s:4:\"docs\";a:2:{i:0;a:6:{s:2:\"id\";s:1:\"1\";s:5:\"data1\";s:5:\"hello\";s:5:\"data2\";i:42;s:5:\"data3\";b:1;s:5:\"data4\";a:2:{s:7:\"data4.1\";s:7:\"hashmap\";s:7:\"data4.2\";s:5:\"hello\";}s:5:\"data5\";a:3:{i:0;s:7:\"data5.1\";i:1;s:7:\"data5.2\";i:2;s:7:\"data5.3\";}}i:1;a:1:{s:2:\"id\";s:1:\"2\";}}}}", 
diff --git a/solr/core/src/test/org/apache/solr/search/TestRangeQuery.java b/solr/core/src/test/org/apache/solr/search/TestRangeQuery.java
index 055050d..9816eff 100644
--- a/solr/core/src/test/org/apache/solr/search/TestRangeQuery.java
+++ b/solr/core/src/test/org/apache/solr/search/TestRangeQuery.java
@@ -259,8 +259,8 @@ public class TestRangeQuery extends SolrTestCaseJ4 {
         SolrQueryResponse qr = h.queryAndResponse(handler, req);
         if (last != null) {
           // we only test if the same docs matched since some queries will include factors like idf, etc.
-          DocList rA = ((ResultContext)qr.getValues().get("response")).getDocList();
-          DocList rB = ((ResultContext)last.getValues().get("response")).getDocList();
+          DocList rA = ((ResultContext)qr.getResponse()).getDocList();
+          DocList rB = ((ResultContext)last.getResponse()).getDocList();
           sameDocs( rA, rB );
         }
         req.close();
diff --git a/solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest.java b/solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest.java
index d1a4c44..a605785 100644
--- a/solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest.java
+++ b/solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest.java
@@ -112,7 +112,7 @@ public class SpellCheckCollatorTest extends SolrTestCaseJ4 {
     {
       SolrRequestHandler handler = core.getRequestHandler("spellCheckCompRH");
       SolrQueryResponse rsp = new SolrQueryResponse();
-      rsp.add("responseHeader", new SimpleOrderedMap());
+      rsp.addResponseHeader(new SimpleOrderedMap());
       SolrQueryRequest req = new LocalSolrQueryRequest(core, params);
       handler.handleRequest(req, rsp);
       req.close();
@@ -144,7 +144,7 @@ public class SpellCheckCollatorTest extends SolrTestCaseJ4 {
     {
       SolrRequestHandler handler = core.getRequestHandler("spellCheckCompRH");
       SolrQueryResponse rsp = new SolrQueryResponse();
-      rsp.add("responseHeader", new SimpleOrderedMap());
+      rsp.addResponseHeader(new SimpleOrderedMap());
       SolrQueryRequest req = new LocalSolrQueryRequest(core, params);
       handler.handleRequest(req, rsp);
       req.close();
@@ -238,7 +238,7 @@ public class SpellCheckCollatorTest extends SolrTestCaseJ4 {
     //not want the collations to return us "lowerfilt:(+faith +hope +loaves)" as this only matches doc id#1.
     SolrRequestHandler handler = core.getRequestHandler("spellCheckCompRH");
     SolrQueryResponse rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
+    rsp.addResponseHeader(new SimpleOrderedMap());
     SolrQueryRequest req = new LocalSolrQueryRequest(core, params);
     handler.handleRequest(req, rsp);
     req.close();
@@ -273,7 +273,7 @@ public class SpellCheckCollatorTest extends SolrTestCaseJ4 {
     //because requrying against this Request Handler results in 0 hits.
     SolrRequestHandler handler = core.getRequestHandler("spellCheckCompRH");
     SolrQueryResponse rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
+    rsp.addResponseHeader(new SimpleOrderedMap());
     SolrQueryRequest req = new LocalSolrQueryRequest(core, params);
     handler.handleRequest(req, rsp);
     req.close();
@@ -288,7 +288,7 @@ public class SpellCheckCollatorTest extends SolrTestCaseJ4 {
     params.remove(SpellingParams.SPELLCHECK_BUILD);
     handler = core.getRequestHandler("spellCheckCompRH1");
     rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
+    rsp.addResponseHeader(new SimpleOrderedMap());
     req = new LocalSolrQueryRequest(core, params);
     handler.handleRequest(req, rsp);
     req.close();
@@ -320,7 +320,7 @@ public class SpellCheckCollatorTest extends SolrTestCaseJ4 {
     // return no results if tried.
     SolrRequestHandler handler = core.getRequestHandler("spellCheckCompRH");
     SolrQueryResponse rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
+    rsp.addResponseHeader(new SimpleOrderedMap());
     SolrQueryRequest req = new LocalSolrQueryRequest(core, params);
     handler.handleRequest(req, rsp);
     req.close();
@@ -337,7 +337,7 @@ public class SpellCheckCollatorTest extends SolrTestCaseJ4 {
     params.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, "1");
     handler = core.getRequestHandler("spellCheckCompRH");
     rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
+    rsp.addResponseHeader(new SimpleOrderedMap());
     req = new LocalSolrQueryRequest(core, params);
     handler.handleRequest(req, rsp);
     req.close();
@@ -355,7 +355,7 @@ public class SpellCheckCollatorTest extends SolrTestCaseJ4 {
     params.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, "2");
     handler = core.getRequestHandler("spellCheckCompRH");
     rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
+    rsp.addResponseHeader(new SimpleOrderedMap());
     req = new LocalSolrQueryRequest(core, params);
     handler.handleRequest(req, rsp);
     req.close();
@@ -374,7 +374,7 @@ public class SpellCheckCollatorTest extends SolrTestCaseJ4 {
     params.add(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, "true");
     handler = core.getRequestHandler("spellCheckCompRH");
     rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
+    rsp.addResponseHeader(new SimpleOrderedMap());
     req = new LocalSolrQueryRequest(core, params);
     handler.handleRequest(req, rsp);
     req.close();
@@ -428,7 +428,7 @@ public class SpellCheckCollatorTest extends SolrTestCaseJ4 {
     //not want the collations to return us "lowerfilt:(+faith +hope +loaves)" as this only matches doc id#1.
     SolrRequestHandler handler = core.getRequestHandler("spellCheckCompRH");
     SolrQueryResponse rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
+    rsp.addResponseHeader(new SimpleOrderedMap());
     SolrQueryRequest req = new LocalSolrQueryRequest(core, params);
     handler.handleRequest(req, rsp);
     req.close();
@@ -585,7 +585,7 @@ public class SpellCheckCollatorTest extends SolrTestCaseJ4 {
     params.add(CommonParams.Q, "lowerfilt:(+fauth)");
     SolrRequestHandler handler = core.getRequestHandler("spellCheckCompRH");
     SolrQueryResponse rsp = new SolrQueryResponse();
-    rsp.add("responseHeader", new SimpleOrderedMap());
+    rsp.addResponseHeader(new SimpleOrderedMap());
     SolrQueryRequest req = new LocalSolrQueryRequest(core, params);
     handler.handleRequest(req, rsp);
     req.close();
diff --git a/solr/core/src/test/org/apache/solr/update/DocumentBuilderTest.java b/solr/core/src/test/org/apache/solr/update/DocumentBuilderTest.java
index f51930f..4d1978b 100644
--- a/solr/core/src/test/org/apache/solr/update/DocumentBuilderTest.java
+++ b/solr/core/src/test/org/apache/solr/update/DocumentBuilderTest.java
@@ -345,7 +345,7 @@ public class DocumentBuilderTest extends SolrTestCaseJ4 {
       SolrQueryResponse rsp = new SolrQueryResponse();
       core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);
 
-      DocList dl = ((ResultContext) rsp.getValues().get("response")).getDocList();
+      DocList dl = ((ResultContext) rsp.getResponse()).getDocList();
       assertTrue("can't find the doc we just added", 1 == dl.size());
       int docid = dl.iterator().nextDoc();
 

