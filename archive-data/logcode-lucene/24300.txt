GitDiffStart: 7b8f43ec7c689eb0315d2ac78367d8d010c59d8b | Wed Apr 27 09:16:31 2005 +0000
diff --git a/contrib/miscellaneous/README.txt b/contrib/miscellaneous/README.txt
new file mode 100644
index 0000000..275b895
--- /dev/null
+++ b/contrib/miscellaneous/README.txt
@@ -0,0 +1,3 @@
+jakarta-lucene-sandbox/contributions/miscellaneous is a home of different
+Lucene-related classes that all belong to org.apache.lucene.misc package,
+as they are not substantial enough to warrant their own package.
diff --git a/contrib/miscellaneous/build.xml b/contrib/miscellaneous/build.xml
new file mode 100644
index 0000000..b8228e7
--- /dev/null
+++ b/contrib/miscellaneous/build.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0"?>
+
+<project name="misc" default="default">
+
+  <description>
+    Miscellaneous Lucene extensions
+  </description>
+
+  <import file="../common.xml"/>
+</project>
diff --git a/contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter.java b/contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter.java
new file mode 100644
index 0000000..b581065
--- /dev/null
+++ b/contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter.java
@@ -0,0 +1,262 @@
+package org.apache.lucene.misc;
+
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution,
+ *    if any, must include the following acknowledgment:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgment may appear in the software itself,
+ *    if and wherever such third-party acknowledgments normally appear.
+ *
+ * 4. The names "Apache" and "Apache Software Foundation" and
+ *    "Apache Lucene" must not be used to endorse or promote products
+ *    derived from this software without prior written permission. For
+ *    written permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache",
+ *    "Apache Lucene", nor may "Apache" appear in their name, without
+ *    prior written permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.search.Filter;
+
+import java.io.IOException;
+import java.util.BitSet;
+
+/**
+ * <p>
+ * Allows multiple {@link Filter}s to be chained.
+ * Logical operations such as <b>NOT</b> and <b>XOR</b>
+ * are applied between filters. One operation can be used
+ * for all filters, or a specific operation can be declared
+ * for each filter.
+ * </p>
+ * <p>
+ * Order in which filters are called depends on
+ * the position of the filter in the chain. It's probably
+ * more efficient to place the most restrictive filters
+ * /least computationally-intensive filters first.
+ * </p>
+ *
+ * @author <a href="mailto:kelvint@apache.org">Kelvin Tan</a>
+ */
+public class ChainedFilter extends Filter
+{
+    /**
+     * {@link BitSet#or}.
+     */
+    public static final int OR = 0;
+
+    /**
+     * {@link BitSet#and}.
+     */
+    public static final int AND = 1;
+
+    /**
+     * {@link BitSet#andNot}.
+     */
+    public static final int ANDNOT = 2;
+
+    /**
+     * {@link BitSet#xor}.
+     */
+    public static final int XOR = 3;
+
+    /**
+     * Logical operation when none is declared. Defaults to
+     * {@link BitSet#or}.
+     */
+    public static int DEFAULT = OR;
+
+    /** The filter chain */
+    private Filter[] chain = null;
+
+    private int[] logicArray;
+
+    private int logic = -1;
+
+    /**
+     * Ctor.
+     * @param chain The chain of filters
+     */
+    public ChainedFilter(Filter[] chain)
+    {
+        this.chain = chain;
+    }
+
+    /**
+     * Ctor.
+     * @param chain The chain of filters
+     * @param logicArray Logical operations to apply between filters
+     */
+    public ChainedFilter(Filter[] chain, int[] logicArray)
+    {
+        this.chain = chain;
+        this.logicArray = logicArray;
+    }
+
+    /**
+     * Ctor.
+     * @param chain The chain of filters
+     * @param logic Logicial operation to apply to ALL filters
+     */
+    public ChainedFilter(Filter[] chain, int logic)
+    {
+        this.chain = chain;
+        this.logic = logic;
+    }
+
+    /**
+     * {@link Filter#bits}.
+     */
+    public BitSet bits(IndexReader reader) throws IOException
+    {
+        if (logic != -1)
+            return bits(reader, logic);
+        else if (logicArray != null)
+            return bits(reader, logicArray);
+        else
+            return bits(reader, DEFAULT);
+    }
+
+    /**
+     * Delegates to each filter in the chain.
+     * @param reader IndexReader
+     * @param logic Logical operation
+     * @return BitSet
+     */
+    private BitSet bits(IndexReader reader, int logic) throws IOException
+    {
+        BitSet result;
+        int i = 0;
+
+        /**
+         * First AND operation takes place against a completely false
+         * bitset and will always return zero results. Thanks to
+         * Daniel Armbrust for pointing this out and suggesting workaround.
+         */
+        if (logic == AND)
+        {
+            result = (BitSet) chain[i].bits(reader).clone();
+            ++i;
+        }
+        else
+        {
+            result = new BitSet(reader.maxDoc());
+        }
+
+        for (; i < chain.length; i++)
+        {
+            doChain(result, reader, logic, chain[i]);
+        }
+        return result;
+    }
+
+    /**
+     * Delegates to each filter in the chain.
+     * @param reader IndexReader
+     * @param logic Logical operation
+     * @return BitSet
+     */
+    private BitSet bits(IndexReader reader, int[] logic) throws IOException
+    {
+        if (logic.length != chain.length)
+            throw new IllegalArgumentException("Invalid number of elements in logic array");
+        BitSet result;
+        int i = 0;
+
+        /**
+         * First AND operation takes place against a completely false
+         * bitset and will always return zero results. Thanks to
+         * Daniel Armbrust for pointing this out and suggesting workaround.
+         */
+        if (logic[0] == AND)
+        {
+            result = (BitSet) chain[i].bits(reader).clone();
+            ++i;
+        }
+        else
+        {
+            result = new BitSet(reader.maxDoc());
+        }
+
+        for (; i < chain.length; i++)
+        {
+            doChain(result, reader, logic[i], chain[i]);
+        }
+        return result;
+    }
+
+    public String toString()
+    {
+        StringBuffer sb = new StringBuffer();
+        sb.append("ChainedFilter: [");
+        for (int i = 0; i < chain.length; i++)
+        {
+            sb.append(chain[i]);
+            sb.append(' ');
+        }
+        sb.append(']');
+        return sb.toString();
+    }
+
+    private void doChain(BitSet result, IndexReader reader,
+                         int logic, Filter filter) throws IOException
+    {
+        switch (logic)
+        {
+            case OR:
+                result.or(filter.bits(reader));
+                break;
+            case AND:
+                result.and(filter.bits(reader));
+                break;
+            case ANDNOT:
+                result.andNot(filter.bits(reader));
+                break;
+            case XOR:
+                result.xor(filter.bits(reader));
+                break;
+            default:
+                doChain(result, reader, DEFAULT, filter);
+                break;
+        }
+    }
+}
diff --git a/contrib/miscellaneous/src/java/org/apache/lucene/misc/HighFreqTerms.java b/contrib/miscellaneous/src/java/org/apache/lucene/misc/HighFreqTerms.java
new file mode 100644
index 0000000..f530d86
--- /dev/null
+++ b/contrib/miscellaneous/src/java/org/apache/lucene/misc/HighFreqTerms.java
@@ -0,0 +1,123 @@
+package org.apache.lucene.misc;
+
+/* ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2001,2004 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution,
+ *    if any, must include the following acknowledgment:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgment may appear in the software itself,
+ *    if and wherever such third-party acknowledgments normally appear.
+ *
+ * 4. The names "Apache" and "Apache Software Foundation" and
+ *    "Apache Lucene" must not be used to endorse or promote products
+ *    derived from this software without prior written permission. For
+ *    written permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache",
+ *    "Apache Lucene", nor may "Apache" appear in their name, without
+ *    prior written permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.index.TermEnum;
+import org.apache.lucene.util.PriorityQueue;
+
+/**
+ * <code>HighFreqTerms</code> class extracts terms and their frequencies out
+ * of an existing Lucene index.
+ *
+ * @version $Id$
+ */
+public class HighFreqTerms {
+	
+	// The top numTerms will be displayed
+	public static final int numTerms = 100;
+
+	public static void main(String[] args) throws Exception {
+		IndexReader reader = null;
+		if (args.length == 1) {
+			reader = IndexReader.open(args[0]);
+		} else {
+			usage();
+			System.exit(1);
+		}
+
+		TermInfoQueue tiq = new TermInfoQueue(numTerms);
+		TermEnum terms = reader.terms();
+
+		while (terms.next()) {
+			tiq.insert(new TermInfo(terms.term(), terms.docFreq()));
+		}
+
+		while (tiq.size() != 0) {
+			TermInfo termInfo = (TermInfo) tiq.pop();
+			System.out.println(termInfo.term + " " + termInfo.docFreq);
+		}
+
+		reader.close();
+	}
+
+	private static void usage() {
+		System.out.println(
+			"\n\n"
+				+ "java org.apache.lucene.misc.HighFreqTerms <index dir>\n\n");
+	}
+}
+
+final class TermInfo {
+	TermInfo(Term t, int df) {
+		term = t;
+		docFreq = df;
+	}
+	int docFreq;
+	Term term;
+}
+
+final class TermInfoQueue extends PriorityQueue {
+	TermInfoQueue(int size) {
+		initialize(size);
+	}
+
+	protected final boolean lessThan(Object a, Object b) {
+		TermInfo termInfoA = (TermInfo) a;
+		TermInfo termInfoB = (TermInfo) b;
+		return termInfoA.docFreq < termInfoB.docFreq;
+	}
+}
diff --git a/contrib/miscellaneous/src/test/org/apache/lucene/misc/ChainedFilterTest.java b/contrib/miscellaneous/src/test/org/apache/lucene/misc/ChainedFilterTest.java
new file mode 100644
index 0000000..bbbb2ba
--- /dev/null
+++ b/contrib/miscellaneous/src/test/org/apache/lucene/misc/ChainedFilterTest.java
@@ -0,0 +1,141 @@
+package org.apache.lucene.misc;
+
+/**
+ * Copyright 2004 The Apache Software Foundation
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import junit.framework.TestCase;
+import java.util.Calendar;
+import java.util.Date;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.analysis.WhitespaceAnalyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.search.Filter;
+import org.apache.lucene.search.DateFilter;
+import org.apache.lucene.search.Hits;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.QueryFilter;
+
+public class ChainedFilterTest extends TestCase {
+  public static final int MAX = 500;
+
+  private RAMDirectory directory;
+  private IndexSearcher searcher;
+  private Query query;
+  private DateFilter dateFilter;
+  private QueryFilter bobFilter;
+  private QueryFilter sueFilter;
+
+  public void setUp() throws Exception {
+    directory = new RAMDirectory();
+    IndexWriter writer =
+       new IndexWriter(directory, new WhitespaceAnalyzer(), true);
+
+    Calendar cal = Calendar.getInstance();
+    cal.setTimeInMillis(1041397200000L); // 2003 January 01
+
+    for (int i = 0; i < MAX; i++) {
+      Document doc = new Document();
+      doc.add(Field.Keyword("key", "" + (i + 1)));
+      doc.add(
+          Field.Keyword("owner", (i < MAX / 2) ? "bob" : "sue"));
+      doc.add(Field.Keyword("date", cal.getTime()));
+      writer.addDocument(doc);
+
+      cal.add(Calendar.DATE, 1);
+    }
+
+    writer.close();
+
+    searcher = new IndexSearcher(directory);
+
+    // query for everything to make life easier
+    BooleanQuery bq = new BooleanQuery();
+    bq.add(new TermQuery(new Term("owner", "bob")), false, false);
+    bq.add(new TermQuery(new Term("owner", "sue")),false, false);
+    query = bq;
+
+    // date filter matches everything too
+    Date pastTheEnd = parseDate("2099 Jan 1");
+    dateFilter = DateFilter.Before("date", pastTheEnd);
+
+    bobFilter = new QueryFilter(
+        new TermQuery(new Term("owner", "bob")));
+    sueFilter = new QueryFilter(
+        new TermQuery(new Term("owner", "sue")));
+  }
+
+  public void testSingleFilter() throws Exception {
+    ChainedFilter chain = new ChainedFilter(
+        new Filter[] {dateFilter});
+
+    Hits hits = searcher.search(query, chain);
+    assertEquals(MAX, hits.length());
+
+    chain = new ChainedFilter(new Filter[] {bobFilter});
+    hits = searcher.search(query, chain);
+    assertEquals(MAX / 2, hits.length());
+  }
+
+  public void testOR() throws Exception {
+    ChainedFilter chain = new ChainedFilter(
+      new Filter[] {sueFilter, bobFilter});
+
+    Hits hits = searcher.search(query, chain);
+    assertEquals("OR matches all", MAX, hits.length());
+  }
+
+  public void testAND() throws Exception {
+    ChainedFilter chain = new ChainedFilter(
+      new Filter[] {dateFilter, bobFilter}, ChainedFilter.AND);
+
+    Hits hits = searcher.search(query, chain);
+    assertEquals("AND matches just bob", MAX / 2, hits.length());
+    assertEquals("bob", hits.doc(0).get("owner"));
+  }
+
+  public void testXOR() throws Exception {
+    ChainedFilter chain = new ChainedFilter(
+      new Filter[]{dateFilter, bobFilter}, ChainedFilter.XOR);
+
+    Hits hits = searcher.search(query, chain);
+    assertEquals("XOR matches sue", MAX / 2, hits.length());
+    assertEquals("sue", hits.doc(0).get("owner"));
+  }
+
+  public void testANDNOT() throws Exception {
+    ChainedFilter chain = new ChainedFilter(
+      new Filter[]{dateFilter, sueFilter},
+        new int[] {ChainedFilter.AND, ChainedFilter.ANDNOT});
+
+    Hits hits = searcher.search(query, chain);
+    assertEquals("ANDNOT matches just bob",
+        MAX / 2, hits.length());
+    assertEquals("bob", hits.doc(0).get("owner"));
+  }
+
+  private Date parseDate(String s) throws ParseException {
+    return new SimpleDateFormat("yyyy MMM dd").parse(s);
+  }
+
+}
diff --git a/sandbox/contributions/miscellaneous/README.txt b/sandbox/contributions/miscellaneous/README.txt
deleted file mode 100644
index 275b895..0000000
--- a/sandbox/contributions/miscellaneous/README.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-jakarta-lucene-sandbox/contributions/miscellaneous is a home of different
-Lucene-related classes that all belong to org.apache.lucene.misc package,
-as they are not substantial enough to warrant their own package.
diff --git a/sandbox/contributions/miscellaneous/build.xml b/sandbox/contributions/miscellaneous/build.xml
deleted file mode 100644
index b8228e7..0000000
--- a/sandbox/contributions/miscellaneous/build.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<?xml version="1.0"?>
-
-<project name="misc" default="default">
-
-  <description>
-    Miscellaneous Lucene extensions
-  </description>
-
-  <import file="../common.xml"/>
-</project>
diff --git a/sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter.java b/sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter.java
deleted file mode 100644
index b581065..0000000
--- a/sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter.java
+++ /dev/null
@@ -1,262 +0,0 @@
-package org.apache.lucene.misc;
-
-/* ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation" and
- *    "Apache Lucene" must not be used to endorse or promote products
- *    derived from this software without prior written permission. For
- *    written permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache",
- *    "Apache Lucene", nor may "Apache" appear in their name, without
- *    prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.search.Filter;
-
-import java.io.IOException;
-import java.util.BitSet;
-
-/**
- * <p>
- * Allows multiple {@link Filter}s to be chained.
- * Logical operations such as <b>NOT</b> and <b>XOR</b>
- * are applied between filters. One operation can be used
- * for all filters, or a specific operation can be declared
- * for each filter.
- * </p>
- * <p>
- * Order in which filters are called depends on
- * the position of the filter in the chain. It's probably
- * more efficient to place the most restrictive filters
- * /least computationally-intensive filters first.
- * </p>
- *
- * @author <a href="mailto:kelvint@apache.org">Kelvin Tan</a>
- */
-public class ChainedFilter extends Filter
-{
-    /**
-     * {@link BitSet#or}.
-     */
-    public static final int OR = 0;
-
-    /**
-     * {@link BitSet#and}.
-     */
-    public static final int AND = 1;
-
-    /**
-     * {@link BitSet#andNot}.
-     */
-    public static final int ANDNOT = 2;
-
-    /**
-     * {@link BitSet#xor}.
-     */
-    public static final int XOR = 3;
-
-    /**
-     * Logical operation when none is declared. Defaults to
-     * {@link BitSet#or}.
-     */
-    public static int DEFAULT = OR;
-
-    /** The filter chain */
-    private Filter[] chain = null;
-
-    private int[] logicArray;
-
-    private int logic = -1;
-
-    /**
-     * Ctor.
-     * @param chain The chain of filters
-     */
-    public ChainedFilter(Filter[] chain)
-    {
-        this.chain = chain;
-    }
-
-    /**
-     * Ctor.
-     * @param chain The chain of filters
-     * @param logicArray Logical operations to apply between filters
-     */
-    public ChainedFilter(Filter[] chain, int[] logicArray)
-    {
-        this.chain = chain;
-        this.logicArray = logicArray;
-    }
-
-    /**
-     * Ctor.
-     * @param chain The chain of filters
-     * @param logic Logicial operation to apply to ALL filters
-     */
-    public ChainedFilter(Filter[] chain, int logic)
-    {
-        this.chain = chain;
-        this.logic = logic;
-    }
-
-    /**
-     * {@link Filter#bits}.
-     */
-    public BitSet bits(IndexReader reader) throws IOException
-    {
-        if (logic != -1)
-            return bits(reader, logic);
-        else if (logicArray != null)
-            return bits(reader, logicArray);
-        else
-            return bits(reader, DEFAULT);
-    }
-
-    /**
-     * Delegates to each filter in the chain.
-     * @param reader IndexReader
-     * @param logic Logical operation
-     * @return BitSet
-     */
-    private BitSet bits(IndexReader reader, int logic) throws IOException
-    {
-        BitSet result;
-        int i = 0;
-
-        /**
-         * First AND operation takes place against a completely false
-         * bitset and will always return zero results. Thanks to
-         * Daniel Armbrust for pointing this out and suggesting workaround.
-         */
-        if (logic == AND)
-        {
-            result = (BitSet) chain[i].bits(reader).clone();
-            ++i;
-        }
-        else
-        {
-            result = new BitSet(reader.maxDoc());
-        }
-
-        for (; i < chain.length; i++)
-        {
-            doChain(result, reader, logic, chain[i]);
-        }
-        return result;
-    }
-
-    /**
-     * Delegates to each filter in the chain.
-     * @param reader IndexReader
-     * @param logic Logical operation
-     * @return BitSet
-     */
-    private BitSet bits(IndexReader reader, int[] logic) throws IOException
-    {
-        if (logic.length != chain.length)
-            throw new IllegalArgumentException("Invalid number of elements in logic array");
-        BitSet result;
-        int i = 0;
-
-        /**
-         * First AND operation takes place against a completely false
-         * bitset and will always return zero results. Thanks to
-         * Daniel Armbrust for pointing this out and suggesting workaround.
-         */
-        if (logic[0] == AND)
-        {
-            result = (BitSet) chain[i].bits(reader).clone();
-            ++i;
-        }
-        else
-        {
-            result = new BitSet(reader.maxDoc());
-        }
-
-        for (; i < chain.length; i++)
-        {
-            doChain(result, reader, logic[i], chain[i]);
-        }
-        return result;
-    }
-
-    public String toString()
-    {
-        StringBuffer sb = new StringBuffer();
-        sb.append("ChainedFilter: [");
-        for (int i = 0; i < chain.length; i++)
-        {
-            sb.append(chain[i]);
-            sb.append(' ');
-        }
-        sb.append(']');
-        return sb.toString();
-    }
-
-    private void doChain(BitSet result, IndexReader reader,
-                         int logic, Filter filter) throws IOException
-    {
-        switch (logic)
-        {
-            case OR:
-                result.or(filter.bits(reader));
-                break;
-            case AND:
-                result.and(filter.bits(reader));
-                break;
-            case ANDNOT:
-                result.andNot(filter.bits(reader));
-                break;
-            case XOR:
-                result.xor(filter.bits(reader));
-                break;
-            default:
-                doChain(result, reader, DEFAULT, filter);
-                break;
-        }
-    }
-}
diff --git a/sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/HighFreqTerms.java b/sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/HighFreqTerms.java
deleted file mode 100644
index f530d86..0000000
--- a/sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/HighFreqTerms.java
+++ /dev/null
@@ -1,123 +0,0 @@
-package org.apache.lucene.misc;
-
-/* ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2001,2004 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation" and
- *    "Apache Lucene" must not be used to endorse or promote products
- *    derived from this software without prior written permission. For
- *    written permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache",
- *    "Apache Lucene", nor may "Apache" appear in their name, without
- *    prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
-
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.index.TermEnum;
-import org.apache.lucene.util.PriorityQueue;
-
-/**
- * <code>HighFreqTerms</code> class extracts terms and their frequencies out
- * of an existing Lucene index.
- *
- * @version $Id$
- */
-public class HighFreqTerms {
-	
-	// The top numTerms will be displayed
-	public static final int numTerms = 100;
-
-	public static void main(String[] args) throws Exception {
-		IndexReader reader = null;
-		if (args.length == 1) {
-			reader = IndexReader.open(args[0]);
-		} else {
-			usage();
-			System.exit(1);
-		}
-
-		TermInfoQueue tiq = new TermInfoQueue(numTerms);
-		TermEnum terms = reader.terms();
-
-		while (terms.next()) {
-			tiq.insert(new TermInfo(terms.term(), terms.docFreq()));
-		}
-
-		while (tiq.size() != 0) {
-			TermInfo termInfo = (TermInfo) tiq.pop();
-			System.out.println(termInfo.term + " " + termInfo.docFreq);
-		}
-
-		reader.close();
-	}
-
-	private static void usage() {
-		System.out.println(
-			"\n\n"
-				+ "java org.apache.lucene.misc.HighFreqTerms <index dir>\n\n");
-	}
-}
-
-final class TermInfo {
-	TermInfo(Term t, int df) {
-		term = t;
-		docFreq = df;
-	}
-	int docFreq;
-	Term term;
-}
-
-final class TermInfoQueue extends PriorityQueue {
-	TermInfoQueue(int size) {
-		initialize(size);
-	}
-
-	protected final boolean lessThan(Object a, Object b) {
-		TermInfo termInfoA = (TermInfo) a;
-		TermInfo termInfoB = (TermInfo) b;
-		return termInfoA.docFreq < termInfoB.docFreq;
-	}
-}
diff --git a/sandbox/contributions/miscellaneous/src/test/org/apache/lucene/misc/ChainedFilterTest.java b/sandbox/contributions/miscellaneous/src/test/org/apache/lucene/misc/ChainedFilterTest.java
deleted file mode 100644
index bbbb2ba..0000000
--- a/sandbox/contributions/miscellaneous/src/test/org/apache/lucene/misc/ChainedFilterTest.java
+++ /dev/null
@@ -1,141 +0,0 @@
-package org.apache.lucene.misc;
-
-/**
- * Copyright 2004 The Apache Software Foundation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import junit.framework.TestCase;
-import java.util.Calendar;
-import java.util.Date;
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.store.RAMDirectory;
-import org.apache.lucene.analysis.WhitespaceAnalyzer;
-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
-import org.apache.lucene.search.Filter;
-import org.apache.lucene.search.DateFilter;
-import org.apache.lucene.search.Hits;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.BooleanQuery;
-import org.apache.lucene.search.QueryFilter;
-
-public class ChainedFilterTest extends TestCase {
-  public static final int MAX = 500;
-
-  private RAMDirectory directory;
-  private IndexSearcher searcher;
-  private Query query;
-  private DateFilter dateFilter;
-  private QueryFilter bobFilter;
-  private QueryFilter sueFilter;
-
-  public void setUp() throws Exception {
-    directory = new RAMDirectory();
-    IndexWriter writer =
-       new IndexWriter(directory, new WhitespaceAnalyzer(), true);
-
-    Calendar cal = Calendar.getInstance();
-    cal.setTimeInMillis(1041397200000L); // 2003 January 01
-
-    for (int i = 0; i < MAX; i++) {
-      Document doc = new Document();
-      doc.add(Field.Keyword("key", "" + (i + 1)));
-      doc.add(
-          Field.Keyword("owner", (i < MAX / 2) ? "bob" : "sue"));
-      doc.add(Field.Keyword("date", cal.getTime()));
-      writer.addDocument(doc);
-
-      cal.add(Calendar.DATE, 1);
-    }
-
-    writer.close();
-
-    searcher = new IndexSearcher(directory);
-
-    // query for everything to make life easier
-    BooleanQuery bq = new BooleanQuery();
-    bq.add(new TermQuery(new Term("owner", "bob")), false, false);
-    bq.add(new TermQuery(new Term("owner", "sue")),false, false);
-    query = bq;
-
-    // date filter matches everything too
-    Date pastTheEnd = parseDate("2099 Jan 1");
-    dateFilter = DateFilter.Before("date", pastTheEnd);
-
-    bobFilter = new QueryFilter(
-        new TermQuery(new Term("owner", "bob")));
-    sueFilter = new QueryFilter(
-        new TermQuery(new Term("owner", "sue")));
-  }
-
-  public void testSingleFilter() throws Exception {
-    ChainedFilter chain = new ChainedFilter(
-        new Filter[] {dateFilter});
-
-    Hits hits = searcher.search(query, chain);
-    assertEquals(MAX, hits.length());
-
-    chain = new ChainedFilter(new Filter[] {bobFilter});
-    hits = searcher.search(query, chain);
-    assertEquals(MAX / 2, hits.length());
-  }
-
-  public void testOR() throws Exception {
-    ChainedFilter chain = new ChainedFilter(
-      new Filter[] {sueFilter, bobFilter});
-
-    Hits hits = searcher.search(query, chain);
-    assertEquals("OR matches all", MAX, hits.length());
-  }
-
-  public void testAND() throws Exception {
-    ChainedFilter chain = new ChainedFilter(
-      new Filter[] {dateFilter, bobFilter}, ChainedFilter.AND);
-
-    Hits hits = searcher.search(query, chain);
-    assertEquals("AND matches just bob", MAX / 2, hits.length());
-    assertEquals("bob", hits.doc(0).get("owner"));
-  }
-
-  public void testXOR() throws Exception {
-    ChainedFilter chain = new ChainedFilter(
-      new Filter[]{dateFilter, bobFilter}, ChainedFilter.XOR);
-
-    Hits hits = searcher.search(query, chain);
-    assertEquals("XOR matches sue", MAX / 2, hits.length());
-    assertEquals("sue", hits.doc(0).get("owner"));
-  }
-
-  public void testANDNOT() throws Exception {
-    ChainedFilter chain = new ChainedFilter(
-      new Filter[]{dateFilter, sueFilter},
-        new int[] {ChainedFilter.AND, ChainedFilter.ANDNOT});
-
-    Hits hits = searcher.search(query, chain);
-    assertEquals("ANDNOT matches just bob",
-        MAX / 2, hits.length());
-    assertEquals("bob", hits.doc(0).get("owner"));
-  }
-
-  private Date parseDate(String s) throws ParseException {
-    return new SimpleDateFormat("yyyy MMM dd").parse(s);
-  }
-
-}

