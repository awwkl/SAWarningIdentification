GitDiffStart: 16e3abe513ecb66279a052813bb1365ba4931b56 | Tue May 1 16:15:59 2012 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/search/ReferenceManager.java b/lucene/core/src/java/org/apache/lucene/search/ReferenceManager.java
index 2376677..6bf13fc 100755
--- a/lucene/core/src/java/org/apache/lucene/search/ReferenceManager.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ReferenceManager.java
@@ -194,7 +194,7 @@ public abstract class ReferenceManager<G> implements Closeable {
     try {
       doMaybeRefresh();
     } finally {
-      refreshLock.lock();
+      refreshLock.unlock();
     }
   }
 
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java b/lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java
index 4b4dd93..aca12db 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestSearcherManager.java
@@ -353,4 +353,35 @@ public class TestSearcherManager extends ThreadedIndexingAndSearchingTestCase {
     other.close();
     dir.close();
   }
+  
+  public void testMaybeRefreshBlockingLock() throws Exception {
+    // make sure that maybeRefreshBlocking releases the lock, otherwise other
+    // threads cannot obtain it.
+    final Directory dir = newDirectory();
+    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);
+    w.close();
+    
+    final SearcherManager sm = new SearcherManager(dir, null);
+    
+    Thread t = new Thread() {
+      @Override
+      public void run() {
+        try {
+          // this used to not release the lock, preventing other threads from obtaining it.
+          sm.maybeRefreshBlocking();
+        } catch (Exception e) {
+          throw new RuntimeException(e);
+        }
+      }
+    };
+    t.start();
+    t.join();
+    
+    // if maybeRefreshBlocking didn't release the lock, this will fail.
+    assertTrue("failde to obtain the refreshLock!", sm.maybeRefresh());
+    
+    sm.close();
+    dir.close();
+  }
+  
 }

