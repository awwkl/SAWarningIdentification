GitDiffStart: 40eb1cd53fdd7284dc34708a951dc165460b28ef | Thu Jan 3 07:32:38 2008 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index 5c9ef9c..4c2a4c1 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -375,6 +375,9 @@ Build
 
 Test Cases
 
+ 1. LUCENE-766: Test adding two fields with the same name but different 
+    term vector setting.  (Nicolas Lalev√©e via Doron Cohen)  
+    
 ======================= Release 2.2.0 2007-06-19 =======================
 
 Changes in runtime behavior
diff --git a/src/test/org/apache/lucene/index/TestDocumentWriter.java b/src/test/org/apache/lucene/index/TestDocumentWriter.java
index 1a42d60..788dc3c 100644
--- a/src/test/org/apache/lucene/index/TestDocumentWriter.java
+++ b/src/test/org/apache/lucene/index/TestDocumentWriter.java
@@ -18,11 +18,13 @@ package org.apache.lucene.index;
  */
 
 import org.apache.lucene.analysis.*;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
+import org.apache.lucene.document.Field.Index;
+import org.apache.lucene.document.Field.Store;
 import org.apache.lucene.document.Field.TermVector;
 import org.apache.lucene.document.Fieldable;
-import org.apache.lucene.search.Similarity;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.util.LuceneTestCase;
 
@@ -49,7 +51,6 @@ public class TestDocumentWriter extends LuceneTestCase {
     Document testDoc = new Document();
     DocHelper.setupDoc(testDoc);
     Analyzer analyzer = new WhitespaceAnalyzer();
-    Similarity similarity = Similarity.getDefault();
     IndexWriter writer = new IndexWriter(dir, analyzer, true);
     writer.addDocument(testDoc);
     writer.flush();
@@ -105,7 +106,6 @@ public class TestDocumentWriter extends LuceneTestCase {
       }
     };
 
-    Similarity similarity = Similarity.getDefault();
     IndexWriter writer = new IndexWriter(dir, analyzer, true);
 
     Document doc = new Document();
@@ -191,7 +191,6 @@ public class TestDocumentWriter extends LuceneTestCase {
 
 
   public void testPreAnalyzedField() throws IOException {
-    Similarity similarity = Similarity.getDefault();
     IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true);
     Document doc = new Document();
     
@@ -232,4 +231,33 @@ public class TestDocumentWriter extends LuceneTestCase {
     assertEquals(2, termPositions.nextPosition());
 
   }
+
+  /**
+   * Test adding two fields with the same name, but 
+   * with different term vector setting (LUCENE-766).
+   */
+  public void testMixedTermVectorSettingsSameField() throws Exception {
+    Document doc = new Document();
+    // f1 first without tv then with tv
+    doc.add(new Field("f1", "v1", Store.YES, Index.UN_TOKENIZED, TermVector.NO));
+    doc.add(new Field("f1", "v2", Store.YES, Index.UN_TOKENIZED, TermVector.WITH_POSITIONS_OFFSETS));
+    // f2 first with tv then without tv
+    doc.add(new Field("f2", "v1", Store.YES, Index.UN_TOKENIZED, TermVector.WITH_POSITIONS_OFFSETS));
+    doc.add(new Field("f2", "v2", Store.YES, Index.UN_TOKENIZED, TermVector.NO));
+
+    RAMDirectory ram = new RAMDirectory();
+    IndexWriter writer = new IndexWriter(ram, new StandardAnalyzer(), true);
+    writer.addDocument(doc);
+    writer.close();
+
+    IndexReader reader = IndexReader.open(ram);
+    // f1
+    TermFreqVector tfv1 = reader.getTermFreqVector(0, "f1");
+    assertNotNull(tfv1);
+    assertEquals("the 'with_tv' setting should rule!",2,tfv1.getTerms().length);
+    // f2
+    TermFreqVector tfv2 = reader.getTermFreqVector(0, "f2");
+    assertNotNull(tfv2);
+    assertEquals("the 'with_tv' setting should rule!",2,tfv2.getTerms().length);
+  }
 }

