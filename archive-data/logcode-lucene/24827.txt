GitDiffStart: f8d0d0b140defd38f9fe15710f61b53a2a531a49 | Sat Nov 13 15:11:26 2004 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index d35da69..98c92d6 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -12,7 +12,7 @@ $Id$
  2. FuzzyQuery now takes an additional parameter that specifies the
     minimum similarity that is required for a term to match the query.
     The QueryParser syntax for this is term~x, where x is a floating 
-    point number between 0 and 1 (a bigger number means that a higher
+    point number >= 0 and < 1 (a bigger number means that a higher
     similarity is required). Furthermore, a prefix can be specified
     for FuzzyQuerys so that only those terms are considered similar that 
     start with this prefix. This can speed up FuzzyQuery greatly.
@@ -113,6 +113,13 @@ $Id$
     of 0 now run 20-50% faster (Patch #31882).
     (Jonathan Hager via Daniel Naber)
 
+25. QueryParser now correctly works with Analyzers that can return more 
+    than one token per position. For example, a query "+fast +car"
+    would be parsed as "+fast +(car automobile)" if the Analyzer
+    returns "car" and "automobile" at the same position whenever it 
+    finds "car" (Patch #23307).
+    (Pierrick Brihaye, Daniel Naber)
+
 
 1.4.1
 
diff --git a/src/java/org/apache/lucene/queryParser/QueryParser.java b/src/java/org/apache/lucene/queryParser/QueryParser.java
index aa627c6..2c2ac5e 100644
--- a/src/java/org/apache/lucene/queryParser/QueryParser.java
+++ b/src/java/org/apache/lucene/queryParser/QueryParser.java
@@ -292,10 +292,11 @@ public class QueryParser implements QueryParserConstants {
     // Use the analyzer to get all the tokens, and then build a TermQuery,
     // PhraseQuery, or nothing based on the term count
 
-    TokenStream source = analyzer.tokenStream(field,
-                                              new StringReader(queryText));
+    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));
     Vector v = new Vector();
     org.apache.lucene.analysis.Token t;
+    int positionCount = 0;
+    boolean severalTokensAtSamePosition = false;
 
     while (true) {
       try {
@@ -306,7 +307,11 @@ public class QueryParser implements QueryParserConstants {
       }
       if (t == null)
         break;
-      v.addElement(t.termText());
+      v.addElement(t);
+      if (t.getPositionIncrement() == 1)
+        positionCount++;
+      else
+        severalTokensAtSamePosition = true;
     }
     try {
       source.close();
@@ -317,15 +322,48 @@ public class QueryParser implements QueryParserConstants {
 
     if (v.size() == 0)
       return null;
-    else if (v.size() == 1)
-      return new TermQuery(new Term(field, (String) v.elementAt(0)));
-    else {
-      PhraseQuery q = new PhraseQuery();
-      q.setSlop(phraseSlop);
-      for (int i=0; i<v.size(); i++) {
-        q.add(new Term(field, (String) v.elementAt(i)));
+    else if (v.size() == 1) {
+      t = (org.apache.lucene.analysis.Token) v.elementAt(0);
+      return new TermQuery(new Term(field, t.termText()));
+    } else {
+      if (severalTokensAtSamePosition) {
+        if (positionCount == 1) {
+          // no phrase query:
+          BooleanQuery q = new BooleanQuery();
+          for (int i = 0; i < v.size(); i++) {
+            t = (org.apache.lucene.analysis.Token) v.elementAt(i);
+            TermQuery currentQuery = new TermQuery(
+                new Term(field, t.termText()));
+            q.add(currentQuery, BooleanClause.Occur.SHOULD);
+          }
+          return q;
+        }
+        else {
+          // phrase query:
+          MultiPhraseQuery mpq = new MultiPhraseQuery();
+          List multiTerms = new ArrayList();
+          for (int i = 0; i < v.size(); i++) {
+            t = (org.apache.lucene.analysis.Token) v.elementAt(i);
+            if (t.getPositionIncrement() == 1 && multiTerms.size() > 0) {
+              mpq.add((Term[])multiTerms.toArray(new Term[0]));
+              multiTerms.clear();
+            }
+            multiTerms.add(new Term(field, t.termText()));
+          }
+          mpq.add((Term[])multiTerms.toArray(new Term[0]));
+          return mpq;
+        }
+      }
+      else {
+        PhraseQuery q = new PhraseQuery();
+        q.setSlop(phraseSlop);
+        for (int i = 0; i < v.size(); i++) {
+          q.add(new Term(field, ((org.apache.lucene.analysis.Token)
+              v.elementAt(i)).termText()));
+
+        }
+        return q;
       }
-      return q;
     }
   }
 
@@ -357,6 +395,9 @@ public class QueryParser implements QueryParserConstants {
     if (query instanceof PhraseQuery) {
       ((PhraseQuery) query).setSlop(slop);
     }
+    if (query instanceof MultiPhraseQuery) {
+      ((MultiPhraseQuery) query).setSlop(slop);
+    }
 
     return query;
   }
diff --git a/src/java/org/apache/lucene/queryParser/QueryParser.jj b/src/java/org/apache/lucene/queryParser/QueryParser.jj
index 0b57915..d77de37 100644
--- a/src/java/org/apache/lucene/queryParser/QueryParser.jj
+++ b/src/java/org/apache/lucene/queryParser/QueryParser.jj
@@ -315,10 +315,11 @@ public class QueryParser {
     // Use the analyzer to get all the tokens, and then build a TermQuery,
     // PhraseQuery, or nothing based on the term count
 
-    TokenStream source = analyzer.tokenStream(field,
-                                              new StringReader(queryText));
+    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));
     Vector v = new Vector();
     org.apache.lucene.analysis.Token t;
+    int positionCount = 0;
+    boolean severalTokensAtSamePosition = false;
 
     while (true) {
       try {
@@ -329,7 +330,11 @@ public class QueryParser {
       }
       if (t == null)
         break;
-      v.addElement(t.termText());
+      v.addElement(t);
+      if (t.getPositionIncrement() == 1)
+        positionCount++;
+      else
+        severalTokensAtSamePosition = true;
     }
     try {
       source.close();
@@ -340,15 +345,48 @@ public class QueryParser {
 
     if (v.size() == 0)
       return null;
-    else if (v.size() == 1)
-      return new TermQuery(new Term(field, (String) v.elementAt(0)));
-    else {
-      PhraseQuery q = new PhraseQuery();
-      q.setSlop(phraseSlop);
-      for (int i=0; i<v.size(); i++) {
-        q.add(new Term(field, (String) v.elementAt(i)));
+    else if (v.size() == 1) {
+      t = (org.apache.lucene.analysis.Token) v.elementAt(0);
+      return new TermQuery(new Term(field, t.termText()));
+    } else {
+      if (severalTokensAtSamePosition) {
+        if (positionCount == 1) {
+          // no phrase query:
+          BooleanQuery q = new BooleanQuery();
+          for (int i = 0; i < v.size(); i++) {
+            t = (org.apache.lucene.analysis.Token) v.elementAt(i);
+            TermQuery currentQuery = new TermQuery(
+                new Term(field, t.termText()));
+            q.add(currentQuery, BooleanClause.Occur.SHOULD);
+          }
+          return q;
+        }
+        else {
+          // phrase query:
+          MultiPhraseQuery mpq = new MultiPhraseQuery();
+          List multiTerms = new ArrayList();
+          for (int i = 0; i < v.size(); i++) {
+            t = (org.apache.lucene.analysis.Token) v.elementAt(i);
+            if (t.getPositionIncrement() == 1 && multiTerms.size() > 0) {
+              mpq.add((Term[])multiTerms.toArray(new Term[0]));
+              multiTerms.clear();
+            }
+            multiTerms.add(new Term(field, t.termText()));
+          }
+          mpq.add((Term[])multiTerms.toArray(new Term[0]));
+          return mpq;
+        }
+      }
+      else {
+        PhraseQuery q = new PhraseQuery();
+        q.setSlop(phraseSlop);
+        for (int i = 0; i < v.size(); i++) {
+          q.add(new Term(field, ((org.apache.lucene.analysis.Token) 
+              v.elementAt(i)).termText()));
+
+        }
+        return q;
       }
-      return q;
     }
   }
   
@@ -380,6 +418,9 @@ public class QueryParser {
     if (query instanceof PhraseQuery) {
       ((PhraseQuery) query).setSlop(slop);
     }
+    if (query instanceof MultiPhraseQuery) {
+      ((MultiPhraseQuery) query).setSlop(slop);
+    }
 
     return query;
   }

