GitDiffStart: e2b625af45043a4cba04166e2563301a66c4967b | Fri Jun 18 00:24:41 2010 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index afff725..0625204 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -27,6 +27,7 @@ Versions of Major Components
 Apache Lucene trunk
 Apache Tika 0.6
 Carrot2 3.1.0
+Velocity 1.6.1
 
 
 Upgrading from Solr 1.4
@@ -179,7 +180,10 @@ New Features
 
 * SOLR-1932: New relevancy function queries: termfreq, tf, docfreq, idf
   norm, maxdoc, numdocs. (yonik)
-
+  
+* SOLR-1957: The VelocityResponseWriter contrib moved to core.
+             Example search UI now available at http://localhost:8983/solr/browse
+             (ehatcher)
 
    
 Optimizations
diff --git a/solr/contrib/velocity/src/main/java/org/apache/solr/response/PageTool.java b/solr/contrib/velocity/src/main/java/org/apache/solr/response/PageTool.java
deleted file mode 100644
index ab817cd..0000000
--- a/solr/contrib/velocity/src/main/java/org/apache/solr/response/PageTool.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.response;
-
-import org.apache.solr.request.SolrQueryRequest;
-import org.apache.solr.response.SolrQueryResponse;
-import org.apache.solr.search.DocSlice;
-import org.apache.solr.common.SolrDocumentList;
-
-public class PageTool {
-  private long start;
-  private int results_per_page = 10;
-  private long results_found;
-  private int page_count;
-  private int current_page_number;
-
-  public PageTool(SolrQueryRequest request, SolrQueryResponse response) {
-    String rows = request.getParams().get("rows");
-
-    if (rows != null) {
-      results_per_page = new Integer(rows);
-    }
-
-    Object docs = response.getValues().get("response");
-    if (docs != null) {
-      if (docs instanceof DocSlice) {
-        DocSlice doc_slice = (DocSlice) docs;
-        results_found = doc_slice.matches();
-        start = doc_slice.offset();
-      } else {
-        SolrDocumentList doc_list = (SolrDocumentList) docs;
-        results_found = doc_list.getNumFound();
-        start = doc_list.getStart();
-      }
-    }
-
-    page_count = (int) Math.ceil(results_found / (double) results_per_page);
-    current_page_number = (int) Math.ceil(start / (double) results_per_page) + (page_count > 0 ? 1 : 0);
-  }
-
-  public long getStart() {
-    return start;
-  }
-
-  public int getResults_per_page() {
-    return results_per_page;
-  }
-
-  public long getResults_found() {
-    return results_found;
-  }
-
-  public int getPage_count() {
-    return page_count;
-  }
-
-  public int getCurrent_page_number() {
-    return current_page_number;
-  }
-
-  public String toString() {
-    return "Found " + results_found +
-           " Page " + current_page_number + " of " + page_count +
-           " Starting at " + start + " per page " + results_per_page;
-  }
-}
diff --git a/solr/contrib/velocity/src/main/java/org/apache/solr/response/SolrParamResourceLoader.java b/solr/contrib/velocity/src/main/java/org/apache/solr/response/SolrParamResourceLoader.java
deleted file mode 100644
index c9381cf..0000000
--- a/solr/contrib/velocity/src/main/java/org/apache/solr/response/SolrParamResourceLoader.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.response;
-
-import org.apache.solr.request.SolrQueryRequest;
-import org.apache.velocity.runtime.resource.loader.ResourceLoader;
-import org.apache.velocity.runtime.resource.Resource;
-import org.apache.velocity.exception.ResourceNotFoundException;
-import org.apache.commons.collections.ExtendedProperties;
-
-import java.io.ByteArrayInputStream;
-import java.io.InputStream;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-
-public class SolrParamResourceLoader extends ResourceLoader {
-  private Map<String,String> templates = new HashMap<String,String>();
-  public SolrParamResourceLoader(SolrQueryRequest request) {
-    super();
-
-    // TODO: Consider using content streams, but need a template name associated with each stream
-    // for now, a custom param convention of template.<name>=<template body> is a nice example
-    // of per-request overrides of templates
-
-    org.apache.solr.common.params.SolrParams params = request.getParams();
-    Iterator<String> names = params.getParameterNamesIterator();
-    while (names.hasNext()) {
-      String name = names.next();
-      
-      if (name.startsWith("v.template.")) {
-        templates.put(name.substring(11) + ".vm",params.get(name));
-      }
-    }
-  }
-
-  public void init(ExtendedProperties extendedProperties) {
-  }
-
-  public InputStream getResourceStream(String s) throws ResourceNotFoundException {
-    String template = templates.get(s);
-    return template == null ? null : new ByteArrayInputStream(template.getBytes());
-  }
-
-  public boolean isSourceModified(Resource resource) {
-    return false;
-  }
-
-  public long getLastModified(Resource resource) {
-    return 0;
-  }
-}
diff --git a/solr/contrib/velocity/src/main/java/org/apache/solr/response/SolrVelocityResourceLoader.java b/solr/contrib/velocity/src/main/java/org/apache/solr/response/SolrVelocityResourceLoader.java
deleted file mode 100644
index c42dc10..0000000
--- a/solr/contrib/velocity/src/main/java/org/apache/solr/response/SolrVelocityResourceLoader.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.solr.response;
-
-import org.apache.velocity.runtime.resource.loader.ResourceLoader;
-import org.apache.velocity.runtime.resource.Resource;
-import org.apache.velocity.exception.ResourceNotFoundException;
-import org.apache.commons.collections.ExtendedProperties;
-import org.apache.solr.core.SolrResourceLoader;
-
-import java.io.InputStream;
-
-// TODO: the name of this class seems ridiculous
-public class SolrVelocityResourceLoader extends ResourceLoader {
-  private SolrResourceLoader loader;
-
-  public SolrVelocityResourceLoader(SolrResourceLoader loader) {
-    super();
-    this.loader = loader;
-  }
-
-  public void init(ExtendedProperties extendedProperties) {
-  }
-
-  public InputStream getResourceStream(String template_name) throws ResourceNotFoundException {
-    return loader.openResource(template_name);
-  }
-
-  public boolean isSourceModified(Resource resource) {
-    return false;
-  }
-
-  public long getLastModified(Resource resource) {
-    return 0;
-  }
-}
diff --git a/solr/contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter.java b/solr/contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter.java
deleted file mode 100644
index 454a0e5..0000000
--- a/solr/contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter.java
+++ /dev/null
@@ -1,191 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.response;
-
-import org.apache.solr.client.solrj.SolrResponse;
-import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;
-import org.apache.solr.client.solrj.response.QueryResponse;
-import org.apache.solr.client.solrj.response.SolrResponseBase;
-import org.apache.solr.common.util.NamedList;
-import org.apache.solr.request.SolrQueryRequest;
-import org.apache.velocity.Template;
-import org.apache.velocity.VelocityContext;
-import org.apache.velocity.app.VelocityEngine;
-import org.apache.velocity.tools.generic.*;
-
-import java.io.*;
-import java.util.Properties;
-
-public class VelocityResponseWriter implements QueryResponseWriter {
-
-  // TODO: maybe pass this Logger to the template for logging from there?
-//  private static final Logger log = LoggerFactory.getLogger(VelocityResponseWriter.class);
-
-  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {
-    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine
-
-    Template template = getTemplate(engine, request);
-
-    VelocityContext context = new VelocityContext();
-
-    context.put("request", request);
-
-    // Turn the SolrQueryResponse into a SolrResponse.
-    // QueryResponse has lots of conveniences suitable for a view
-    // Problem is, which SolrResponse class to use?
-    // One patch to SOLR-620 solved this by passing in a class name as
-    // as a parameter and using reflection and Solr's class loader to
-    // create a new instance.  But for now the implementation simply
-    // uses QueryResponse, and if it chokes in a known way, fall back
-    // to bare bones SolrResponseBase.
-    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least
-    SolrResponse rsp = new QueryResponse();
-    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);
-    try {
-      rsp.setResponse(parsedResponse);
-
-      // page only injected if QueryResponse works
-      context.put("page", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*
-    } catch (ClassCastException e) {
-      // known edge case where QueryResponse's extraction assumes "response" is a SolrDocumentList
-      // (AnalysisRequestHandler emits a "response")
-      e.printStackTrace();
-      rsp = new SolrResponseBase();
-      rsp.setResponse(parsedResponse);
-    }
-    context.put("response", rsp);
-
-    // Velocity context tools - TODO: make these pluggable
-    context.put("esc", new EscapeTool());
-    context.put("date", new ComparisonDateTool());
-    context.put("list", new ListTool());
-    context.put("math", new MathTool());
-    context.put("number", new NumberTool());
-    context.put("sort", new SortTool());
-
-    context.put("engine", engine);  // for $engine.resourceExists(...)
-
-    String layout_template = request.getParams().get("v.layout");
-    String json_wrapper = request.getParams().get("v.json");
-    boolean wrap_response = (layout_template != null) || (json_wrapper != null);
-
-    // create output, optionally wrap it into a json object
-    if (wrap_response) {
-      StringWriter stringWriter = new StringWriter();
-      template.merge(context, stringWriter);
-
-      if (layout_template != null) {
-        context.put("content", stringWriter.toString());
-        stringWriter = new StringWriter();
-        try {
-          engine.getTemplate(layout_template + ".vm").merge(context, stringWriter);
-        } catch (Exception e) {
-          throw new IOException(e.getMessage());
-        }
-      }
-
-      if (json_wrapper != null) {
-        writer.write(request.getParams().get("v.json") + "(");
-        writer.write(getJSONWrap(stringWriter.toString()));
-        writer.write(')');
-      } else {  // using a layout, but not JSON wrapping
-        writer.write(stringWriter.toString());
-      }
-    } else {
-      template.merge(context, writer);
-    }
-  }
-
-  private VelocityEngine getEngine(SolrQueryRequest request) {
-    VelocityEngine engine = new VelocityEngine();
-    String template_root = request.getParams().get("v.base_dir");
-    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), "velocity");
-    if (template_root != null) {
-      baseDir = new File(template_root);
-    }
-    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());
-    engine.setProperty("params.resource.loader.instance", new SolrParamResourceLoader(request));
-    SolrVelocityResourceLoader resourceLoader =
-        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());
-    engine.setProperty("solr.resource.loader.instance", resourceLoader);
-
-    // TODO: Externalize Velocity properties
-    engine.setProperty(VelocityEngine.RESOURCE_LOADER, "params,file,solr");
-    String propFile = request.getParams().get("v.properties");
-    try {
-      if (propFile == null)
-        engine.init();
-      else {
-        InputStream is = null;
-        try {
-          is = resourceLoader.getResourceStream(propFile);
-          Properties props = new Properties();
-          props.load(is);
-          engine.init(props);
-        }
-        finally {
-          if (is != null) is.close();
-        }
-      }
-    }
-    catch (Exception e) {
-      throw new RuntimeException(e);
-    }
-
-    return engine;
-  }
-
-  private Template getTemplate(VelocityEngine engine, SolrQueryRequest request) throws IOException {
-    Template template;
-
-    String template_name = request.getParams().get("v.template");
-    String qt = request.getParams().get("qt");
-    String path = (String) request.getContext().get("path");
-    if (template_name == null && path != null) {
-      template_name = path;
-    }  // TODO: path is never null, so qt won't get picked up  maybe special case for '/select' to use qt, otherwise use path?
-    if (template_name == null && qt != null) {
-      template_name = qt;
-    }
-    if (template_name == null) template_name = "index";
-    try {
-      template = engine.getTemplate(template_name + ".vm");
-    } catch (Exception e) {
-      throw new IOException(e.getMessage());
-    }
-
-    return template;
-  }
-
-  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
-    return request.getParams().get("v.contentType", "text/html;charset=UTF-8");
-  }
-
-  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?
-    // escape the double quotes and backslashes
-    String replace1 = xmlResult.replaceAll("\\\\", "\\\\\\\\");
-    replace1 = replace1.replaceAll("\\n", "\\\\n");
-    replace1 = replace1.replaceAll("\\r", "\\\\r");
-    String replaced = replace1.replaceAll("\"", "\\\\\"");
-    // wrap it in a JSON object
-    return "{\"result\":\"" + replaced + "\"}";
-  }
-
-  public void init(NamedList args) {
-  }
-}
diff --git a/solr/contrib/velocity/src/main/solr/conf/velocity/VM_global_library.vm b/solr/contrib/velocity/src/main/solr/conf/velocity/VM_global_library.vm
deleted file mode 100644
index 398b8a2..0000000
--- a/solr/contrib/velocity/src/main/solr/conf/velocity/VM_global_library.vm
+++ /dev/null
@@ -1,50 +0,0 @@
-
-
-
-#macro(nl2ul $named_list)
-  <ul>
-  #foreach($kv in $named_list)
-    <li>$kv.key ($kv.value)
-      #nl2ul($kv.value)
-    </li>
-  #end
-  </ul>
-#end
-
-#macro(url_for_filters $filter_queries)
-  /solr/itas?fq=$filter_queries
-#end
-
-#macro(url_for_home)/solr/itas#end
-
-#macro(url_for_start $start)/solr/itas?start=$start&q=$!{esc.url($params.get('q'))}#end
-
-## TODO: need to add escaping
-#macro(url_for_nested_facet $field $value)/solr/itas?fq=$field:%22$value%22#end
-
-#macro(link_to_previous_page $text)
-  #if($page.current_page_number > 1)
-    #set($prev_start = $page.start - $page.results_per_page)
-    <a class="prev-page" href="#url_for_start($prev_start)">$text</a>
-  #end
-#end
-
-#macro(link_to_next_page $text)
-  #if($page.current_page_number < $page.page_count)
-    #set($next_start = $page.start + $page.results_per_page)
-    <a class="next-page" href="#url_for_start($next_start)">$text</a>
-  #end
-#end
-
-#macro(link_to_page $page_number $text)
-  #if($page_number == $page.current_page_number)
-    $text
-  #else
-    #if($page_number <= $page.page_count)
-      #set($page_start = $page_number * $page.results_per_page - $page.results_per_page)
-      <a class="page" href="#url_for_start($page_start)">$text</a>
-    #end
-  #end
-#end
-
-#macro(param $key)$request.params.get($key)#end
diff --git a/solr/contrib/velocity/src/main/solr/lib/commons-beanutils-1.7.0.jar b/solr/contrib/velocity/src/main/solr/lib/commons-beanutils-1.7.0.jar
deleted file mode 100644
index e211356..0000000
--- a/solr/contrib/velocity/src/main/solr/lib/commons-beanutils-1.7.0.jar
+++ /dev/null
@@ -1,2 +0,0 @@
-AnyObjectId[b1b89c9c921f16af22a88db3ff28975a8e40d886] was removed in git history.
-Apache SVN contains full history.
\ No newline at end of file
diff --git a/solr/contrib/velocity/src/main/solr/lib/commons-collections-3.2.1.jar b/solr/contrib/velocity/src/main/solr/lib/commons-collections-3.2.1.jar
deleted file mode 100644
index 3e2ca02..0000000
--- a/solr/contrib/velocity/src/main/solr/lib/commons-collections-3.2.1.jar
+++ /dev/null
@@ -1,2 +0,0 @@
-AnyObjectId[c35fa1fee145cba638884e41b80a401cbe4924ef] was removed in git history.
-Apache SVN contains full history.
\ No newline at end of file
diff --git a/solr/contrib/velocity/src/main/solr/lib/commons-lang-2.4.jar b/solr/contrib/velocity/src/main/solr/lib/commons-lang-2.4.jar
deleted file mode 100644
index 63550c9..0000000
--- a/solr/contrib/velocity/src/main/solr/lib/commons-lang-2.4.jar
+++ /dev/null
@@ -1,2 +0,0 @@
-AnyObjectId[ce0ca22c8d29a9be736d775fe50bfdc6ce770186] was removed in git history.
-Apache SVN contains full history.
\ No newline at end of file
diff --git a/solr/contrib/velocity/src/main/solr/lib/velocity-1.6.1.jar b/solr/contrib/velocity/src/main/solr/lib/velocity-1.6.1.jar
deleted file mode 100644
index 967bedc..0000000
--- a/solr/contrib/velocity/src/main/solr/lib/velocity-1.6.1.jar
+++ /dev/null
@@ -1,2 +0,0 @@
-AnyObjectId[8a96a970f64082c9a8cca350c3a8b3c9317b514a] was removed in git history.
-Apache SVN contains full history.
\ No newline at end of file
diff --git a/solr/contrib/velocity/src/main/solr/lib/velocity-tools-2.0-beta3.jar b/solr/contrib/velocity/src/main/solr/lib/velocity-tools-2.0-beta3.jar
deleted file mode 100644
index b20f8ba..0000000
--- a/solr/contrib/velocity/src/main/solr/lib/velocity-tools-2.0-beta3.jar
+++ /dev/null
@@ -1,2 +0,0 @@
-AnyObjectId[a6a6dd497ecc6d6e64f7e41ccf674919c563317f] was removed in git history.
-Apache SVN contains full history.
\ No newline at end of file
diff --git a/solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest.java b/solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest.java
deleted file mode 100644
index 911ca19..0000000
--- a/solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package org.apache.solr.velocity;
-
-import org.apache.solr.response.SolrQueryResponse;
-import org.apache.solr.response.VelocityResponseWriter;
-import org.apache.solr.request.SolrQueryRequest;
-import org.apache.solr.util.AbstractSolrTestCase;
-
-import java.io.StringWriter;
-import java.io.IOException;
-
-public class VelocityResponseWriterTest extends AbstractSolrTestCase {
-  public String getSchemaFile() { return "schema.xml"; }
-  public String getSolrConfigFile() { return "solrconfig.xml"; }
-
-
-  public void testTemplateName() throws IOException {
-    org.apache.solr.response.VelocityResponseWriter vrw = new VelocityResponseWriter();
-    SolrQueryRequest req = req("v.template","custom", "v.template.custom","$response.response.response_data");
-    SolrQueryResponse rsp = new SolrQueryResponse();
-    StringWriter buf = new StringWriter();
-    rsp.add("response_data", "testing");
-    vrw.write(buf, req, rsp);
-    assertEquals("testing", buf.toString());
-  }
-}
diff --git a/solr/example/solr/conf/solrconfig.xml b/solr/example/solr/conf/solrconfig.xml
index 53d042b..af046ad 100755
--- a/solr/example/solr/conf/solrconfig.xml
+++ b/solr/example/solr/conf/solrconfig.xml
@@ -55,7 +55,6 @@
        classpath, this is useful for including all jars in a directory.
     -->
   <lib dir="../../contrib/extraction/lib" />
-  <lib dir="../../contrib/velocity/src/main/solr/lib" />
   <!-- When a regex is specified in addition to a directory, only the files in that
        directory which completely match the regex (anchored on both ends)
        will be included.
@@ -509,6 +508,37 @@
         -->
      </lst>
   </requestHandler>
+  
+  <!-- 
+  -->
+  <requestHandler name="/browse" class="solr.SearchHandler">
+     <lst name="defaults">
+       <str name="wt">velocity</str>
+
+       <str name="v.template">browse</str>
+       <str name="v.layout">layout</str>
+       <str name="title">Solritas</str>
+
+       <str name="defType">dismax</str>
+       <str name="q.alt">*:*</str>
+       <str name="rows">10</str>
+       <str name="fl">*,score</str>
+
+       <str name="facet">on</str>
+       <str name="facet.field">cat</str>
+       <str name="facet.field">manu_exact</str>
+       <str name="facet.mincount">1</str>
+       <str name="qf">
+          text^0.5 features^1.0 name^1.2 sku^1.5 id^10.0 manu^1.1 cat^1.4
+       </str>
+       
+       <str name="hl">on</str>
+       <str name="hl.fl">text features name</str>
+       <str name="f.name.hl.fragsize">0</str>
+       <str name="f.name.hl.alternateField">name</str>
+     </lst>
+  </requestHandler>
+  
 
 <!-- Please refer to http://wiki.apache.org/solr/SolrReplication for details on configuring replication -->
 <!-- remove the <lst name="master"> section if this is just a slave -->
@@ -1022,14 +1052,13 @@
     <queryResponseWriter name="ruby" class="solr.RubyResponseWriter"/>
     <queryResponseWriter name="php" class="solr.PHPResponseWriter"/>
     <queryResponseWriter name="phps" class="solr.PHPSerializedResponseWriter"/>
+    <queryResponseWriter name="velocity" class="solr.VelocityResponseWriter"/>
 
       Custom response writers can be declared as needed...
     
     <queryResponseWriter name="custom" class="com.example.MyResponseWriter"/>
   -->
 
-  <queryResponseWriter name="velocity" class="solr.VelocityResponseWriter"/>
-
   <!-- XSLT response writer transforms the XML output by any xslt file found
        in Solr's conf/xslt directory.  Changes to xslt files are checked for
        every xsltCacheLifetimeSeconds.  
diff --git a/solr/example/solr/conf/velocity/VM_global_library.vm b/solr/example/solr/conf/velocity/VM_global_library.vm
index aff5838..6b7d88a 100644
--- a/solr/example/solr/conf/velocity/VM_global_library.vm
+++ b/solr/example/solr/conf/velocity/VM_global_library.vm
@@ -1,11 +1,46 @@
-#macro(nl2ul $named_list)
-  <ul>
-  #foreach($kv in $named_list)
-    <li>$kv.key ($kv.value)
-      #nl2ul($kv.value)
-    </li>
+#macro(param $key)$request.params.get($key)#end
+
+#macro(url_for_solr)/solr#end
+#macro(url_for_home)#url_for_solr/browse#end
+
+#macro(q)q=$!{esc.url($params.get('q'))}#end
+
+#macro(fqs $p)#foreach($fq in $p)#if($velocityCount>1)&#{end}fq=$esc.url($fq)#end#end
+
+#macro(debug)#if($request.params.get('debugQuery'))&debugQuery=true#end#end
+
+#macro(lens)?#q#if($list.size($request.params.getParams('fq')) > 0)&#fqs($request.params.getParams('fq'))#end#debug#end
+
+#macro(url_for_lens)#{url_for_home}#lens#end
+
+#macro(url_for_start $start)#url_for_home#lens&start=$start#end
+
+#macro(url_for_filters $p)#url_for_home?#q#if($list.size($p) > 0)&#fqs($p)#end#debug#end
+
+## TODO: convert to use {!raw f=$field}$value (with escaping of course)
+#macro(url_for_facet_filter $field $value)#url_for_home#lens&fq=$esc.url($field):%22$esc.url($value)%22#end
+
+#macro(link_to_previous_page $text)
+  #if($page.current_page_number > 1)
+    #set($prev_start = $page.start - $page.results_per_page)
+    <a class="prev-page" href="#url_for_start($prev_start)">$text</a>
   #end
-  </ul>
 #end
 
-#macro(param $key)$request.params.get($key)#end
+#macro(link_to_next_page $text)
+  #if($page.current_page_number < $page.page_count)
+    #set($next_start = $page.start + $page.results_per_page)
+    <a class="next-page" href="#url_for_start($next_start)">$text</a>
+  #end
+#end
+
+#macro(link_to_page $page_number $text)
+  #if($page_number == $page.current_page_number)
+    $text
+  #else
+    #if($page_number <= $page.page_count)
+      #set($page_start = $page_number * $page.results_per_page - $page.results_per_page)
+      <a class="page" href="#url_for_start($page_start)">$text</a>
+    #end
+  #end
+#end
diff --git a/solr/example/solr/conf/velocity/browse.vm b/solr/example/solr/conf/velocity/browse.vm
new file mode 100644
index 0000000..ddea03b
--- /dev/null
+++ b/solr/example/solr/conf/velocity/browse.vm
@@ -0,0 +1,55 @@
+#set($searcher=$request.searcher)
+#set($params=$request.params)
+#set($clusters = $response.response.clusters)
+
+<div class="query-box">
+  <form id="query-form" action="#{url_for_home}#fqs($request.params.getParams('fq'))" method="GET">
+    <a href="#url_for_home#if($request.params.get('debugQuery'))?debugQuery=true#end">Find</a>: <input type="text" name="q" value="$!esc.html($params.get('q'))"/>
+    #if($request.params.get('debugQuery'))
+      <input type="hidden" name="debugQuery" value="true"/>
+    #end
+    <div>
+      #foreach($fq in $params.getParams('fq'))
+        #set($previous_fq_count=$velocityCount - 1)
+      &gt; <a style="{text-decoration: line-through;}" href="#url_for_filters($request.params.getParams('fq').subList(0,$previous_fq_count))">$fq</a>
+      #end
+    </div>
+     #if($request.params.get('debugQuery'))
+        <a href="#" onclick='jQuery(this).siblings("pre").toggle(); return false;'>toggle parsed query</a>
+        <pre style="display:none">$response.response.debug.parsedquery</pre>
+      #end    
+  </form>
+  <script language="text/javascript">
+    $("input[type=text]").autoSuggest("/solr/suggest", {selectedItemProp: "name", searchObjProps: "name"}});
+  </script>
+</div>
+
+#if($response.response.spellcheck.suggestions.size() > 0)
+  Did you mean <a href="#url_for_home?q=$esc.url($response.response.spellcheck.suggestions.collation)#if($list.size($request.params.getParams('fq')) > 0)&#fqs($request.params.getParams('fq'))#end#debug">$response.response.spellcheck.suggestions.collation</a>?
+#end
+
+<div class="navigators">
+  #parse("facets.vm")
+</div>
+
+<div class="pagination">
+  <span><span class="results-found">$page.results_found</span> results found in ${response.responseHeader.QTime} ms</span>
+  Page <span class="page-num">$page.current_page_number</span> of <span
+        class="page-count">$page.page_count</span>
+</div>
+
+<div class="results">
+  #foreach($doc in $response.results)
+    #parse("hit.vm")
+  #end
+</div>
+
+<div class="pagination">
+  #link_to_previous_page("previous")
+  <span class="results-found">$page.results_found</span> results found.
+  Page <span class="page-num">$page.current_page_number</span> of <span
+        class="page-count">$page.page_count</span>
+  #link_to_next_page("next")
+
+  <br/>
+</div>
diff --git a/solr/example/solr/conf/velocity/facets.vm b/solr/example/solr/conf/velocity/facets.vm
new file mode 100644
index 0000000..bd1fd3f
--- /dev/null
+++ b/solr/example/solr/conf/velocity/facets.vm
@@ -0,0 +1,12 @@
+  #if($response.facetFields)
+    <h2>Facets</h2>
+    #foreach($field in $response.facetFields)
+      <span class="facet-field">$field.name</span>
+      
+      <ul>
+        #foreach($facet in $field.values)
+            <li><a href="#url_for_facet_filter($field.name, $facet.name)">$facet.name</a> ($facet.count)</li>
+        #end
+      </ul>
+    #end
+  #end
diff --git a/solr/example/solr/conf/velocity/footer.vm b/solr/example/solr/conf/velocity/footer.vm
new file mode 100644
index 0000000..5dd0416
--- /dev/null
+++ b/solr/example/solr/conf/velocity/footer.vm
@@ -0,0 +1,7 @@
+<hr/>
+Generated by <a href="http://wiki.apache.org/solr/VelocityResponseWriter">VelocityResponseWriter</a>
+#if($request.params.get('debugQuery'))
+  <a href="#url_for_home?#q#if($list.size($request.params.getParams('fq')) > 0)&#fqs($request.params.getParams('fq'))#end">disable debug</a>
+#else
+  <a href="#url_for_lens&debugQuery=true">enable debug</a>
+#end
diff --git a/solr/example/solr/conf/velocity/header.vm b/solr/example/solr/conf/velocity/header.vm
new file mode 100644
index 0000000..067f777
--- /dev/null
+++ b/solr/example/solr/conf/velocity/header.vm
@@ -0,0 +1 @@
+## empty header, customize as desired
\ No newline at end of file
diff --git a/solr/example/solr/conf/velocity/hit.vm b/solr/example/solr/conf/velocity/hit.vm
new file mode 100644
index 0000000..a312a0b
--- /dev/null
+++ b/solr/example/solr/conf/velocity/hit.vm
@@ -0,0 +1,19 @@
+#macro(field $f)
+  #if($response.response.highlighting.get($doc.getFieldValue('id')).get($f).get(0))
+    $!response.response.highlighting.get($doc.getFieldValue('id')).get($f).get(0)
+  #else
+    #foreach($v in $doc.getFieldValues($f))
+      $v
+    #end
+  #end
+#end
+<div class="result-document">
+  <p><b>#field('name')</b> $!number.currency($doc.getFieldValue('price'))</p>
+  
+  <p>#field('features')</p>
+  
+  #if($params.getBool("debugQuery",false))
+    <a href="#" onclick='jQuery(this).siblings("pre").toggle(); return false;'>toggle explain</a>
+    <pre style="display:none">$response.getExplainMap().get($doc.getFirstValue('id'))</pre>
+  #end
+</div>
diff --git a/solr/example/solr/conf/velocity/layout.vm b/solr/example/solr/conf/velocity/layout.vm
new file mode 100644
index 0000000..fb0e7feb
--- /dev/null
+++ b/solr/example/solr/conf/velocity/layout.vm
@@ -0,0 +1,23 @@
+<html>
+  <head>
+    ## An example of using an arbitrary request parameter
+    <title>#param('title')</title>
+    <meta http-equiv="content-type" content="text/html; charset=UTF-8"/>
+    <script type="text/javascript" src="/solr/admin/jquery-1.2.3.min.js"></script>
+    <link rel="stylesheet" type="text/css" href="/solr/admin/file?file=/velocity/main.css&contentType=text/css"/>
+  </head>
+  <body>
+    <div id="header">
+      #parse("header.vm")
+    </div>
+    
+    <div id="content">
+      $content
+    </div>
+  
+    <div id="footer">
+      #parse("footer.vm")
+    </div>
+
+  </body>
+</html>
\ No newline at end of file
diff --git a/solr/example/solr/conf/velocity/main.css b/solr/example/solr/conf/velocity/main.css
new file mode 100644
index 0000000..5a82702
--- /dev/null
+++ b/solr/example/solr/conf/velocity/main.css
@@ -0,0 +1,96 @@
+.array-field {
+  border: 2px solid #474747;
+  background: #FFE9D8;
+  padding: 5px;
+  margin: 5px;
+}
+
+.array-field-list li {
+  list-style: circle;
+  margin-left: 20px;
+}
+
+body {
+  font-family: Arial, Helvetica, sans-serif;
+  font-size: 10pt;
+}
+
+.constraints-title {
+  background: gray;
+}
+
+.navigators {
+  float: left;
+  margin: 5px;
+  margin-top: 0px;
+  background: #FEC293;
+  border: 2px solid #474747;
+  width: 185px;
+  padding: 2px;
+}
+
+.facet-field {
+  font-weight: bold;
+}
+
+.highlight {
+  color: white;
+  background-color: gray;
+  border: 1px black solid;
+}
+
+.highlight-box {
+  margin-left: 15px;
+}
+
+.field-name {
+  font-weight: bold;
+}
+
+.highlighted-facet-field {
+  background: white;
+}
+
+#logo {
+  margin: 10px;
+}
+
+.query-box, .constraints {
+  padding: 5px;
+  margin: 5px;
+  border: 3px solid #474747;
+  color: white;
+  background: #FD9644;
+  font-weight: bold;
+  font-size: 16px;
+}
+
+.query-box input {
+  margin-left: 8px;
+  width: 85%;
+}
+
+.pagination {
+  padding-left: 33%;
+  font-weight: bold;
+  background: gray;
+  color: white;
+  margin: 5px;
+  margin-left: 200px;
+}
+
+.result-document {
+  border: 3px solid #474747;
+  background: #FEC293;
+  padding: 5px;
+  margin: 5px;
+  margin-left: 200px;
+}
+
+.selected-facet-field {
+  font-weight: bold;
+}
+
+li.show {
+  list-style: disc;
+}
\ No newline at end of file
diff --git a/solr/lib/commons-beanutils-1.7.0.jar b/solr/lib/commons-beanutils-1.7.0.jar
new file mode 100644
index 0000000..e211356
--- /dev/null
+++ b/solr/lib/commons-beanutils-1.7.0.jar
@@ -0,0 +1,2 @@
+AnyObjectId[b1b89c9c921f16af22a88db3ff28975a8e40d886] was removed in git history.
+Apache SVN contains full history.
\ No newline at end of file
diff --git a/solr/lib/commons-collections-3.2.1.jar b/solr/lib/commons-collections-3.2.1.jar
new file mode 100644
index 0000000..3e2ca02
--- /dev/null
+++ b/solr/lib/commons-collections-3.2.1.jar
@@ -0,0 +1,2 @@
+AnyObjectId[c35fa1fee145cba638884e41b80a401cbe4924ef] was removed in git history.
+Apache SVN contains full history.
\ No newline at end of file
diff --git a/solr/lib/commons-lang-2.4.jar b/solr/lib/commons-lang-2.4.jar
new file mode 100644
index 0000000..63550c9
--- /dev/null
+++ b/solr/lib/commons-lang-2.4.jar
@@ -0,0 +1,2 @@
+AnyObjectId[ce0ca22c8d29a9be736d775fe50bfdc6ce770186] was removed in git history.
+Apache SVN contains full history.
\ No newline at end of file
diff --git a/solr/lib/velocity-1.6.1.jar b/solr/lib/velocity-1.6.1.jar
new file mode 100644
index 0000000..967bedc
--- /dev/null
+++ b/solr/lib/velocity-1.6.1.jar
@@ -0,0 +1,2 @@
+AnyObjectId[8a96a970f64082c9a8cca350c3a8b3c9317b514a] was removed in git history.
+Apache SVN contains full history.
\ No newline at end of file
diff --git a/solr/lib/velocity-tools-2.0-beta3.jar b/solr/lib/velocity-tools-2.0-beta3.jar
new file mode 100644
index 0000000..b20f8ba
--- /dev/null
+++ b/solr/lib/velocity-tools-2.0-beta3.jar
@@ -0,0 +1,2 @@
+AnyObjectId[a6a6dd497ecc6d6e64f7e41ccf674919c563317f] was removed in git history.
+Apache SVN contains full history.
\ No newline at end of file
diff --git a/solr/src/java/org/apache/solr/core/SolrCore.java b/solr/src/java/org/apache/solr/core/SolrCore.java
index c25fea5..f9265d3 100644
--- a/solr/src/java/org/apache/solr/core/SolrCore.java
+++ b/solr/src/java/org/apache/solr/core/SolrCore.java
@@ -43,6 +43,7 @@ import org.apache.solr.response.QueryResponseWriter;
 import org.apache.solr.response.RawResponseWriter;
 import org.apache.solr.response.RubyResponseWriter;
 import org.apache.solr.response.SolrQueryResponse;
+import org.apache.solr.response.VelocityResponseWriter;
 import org.apache.solr.response.XMLResponseWriter;
 import org.apache.solr.schema.IndexSchema;
 import org.apache.solr.search.QParserPlugin;
@@ -1406,6 +1407,7 @@ public final class SolrCore implements SolrInfoMBean {
     m.put("ruby", new RubyResponseWriter());
     m.put("raw", new RawResponseWriter());
     m.put("javabin", new BinaryResponseWriter());
+    m.put("velocity", new VelocityResponseWriter());
     DEFAULT_RESPONSE_WRITERS = Collections.unmodifiableMap(m);
   }
   
diff --git a/solr/src/java/org/apache/solr/response/PageTool.java b/solr/src/java/org/apache/solr/response/PageTool.java
new file mode 100644
index 0000000..ab817cd
--- /dev/null
+++ b/solr/src/java/org/apache/solr/response/PageTool.java
@@ -0,0 +1,81 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.response;
+
+import org.apache.solr.request.SolrQueryRequest;
+import org.apache.solr.response.SolrQueryResponse;
+import org.apache.solr.search.DocSlice;
+import org.apache.solr.common.SolrDocumentList;
+
+public class PageTool {
+  private long start;
+  private int results_per_page = 10;
+  private long results_found;
+  private int page_count;
+  private int current_page_number;
+
+  public PageTool(SolrQueryRequest request, SolrQueryResponse response) {
+    String rows = request.getParams().get("rows");
+
+    if (rows != null) {
+      results_per_page = new Integer(rows);
+    }
+
+    Object docs = response.getValues().get("response");
+    if (docs != null) {
+      if (docs instanceof DocSlice) {
+        DocSlice doc_slice = (DocSlice) docs;
+        results_found = doc_slice.matches();
+        start = doc_slice.offset();
+      } else {
+        SolrDocumentList doc_list = (SolrDocumentList) docs;
+        results_found = doc_list.getNumFound();
+        start = doc_list.getStart();
+      }
+    }
+
+    page_count = (int) Math.ceil(results_found / (double) results_per_page);
+    current_page_number = (int) Math.ceil(start / (double) results_per_page) + (page_count > 0 ? 1 : 0);
+  }
+
+  public long getStart() {
+    return start;
+  }
+
+  public int getResults_per_page() {
+    return results_per_page;
+  }
+
+  public long getResults_found() {
+    return results_found;
+  }
+
+  public int getPage_count() {
+    return page_count;
+  }
+
+  public int getCurrent_page_number() {
+    return current_page_number;
+  }
+
+  public String toString() {
+    return "Found " + results_found +
+           " Page " + current_page_number + " of " + page_count +
+           " Starting at " + start + " per page " + results_per_page;
+  }
+}
diff --git a/solr/src/java/org/apache/solr/response/SolrParamResourceLoader.java b/solr/src/java/org/apache/solr/response/SolrParamResourceLoader.java
new file mode 100644
index 0000000..c9381cf
--- /dev/null
+++ b/solr/src/java/org/apache/solr/response/SolrParamResourceLoader.java
@@ -0,0 +1,67 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.response;
+
+import org.apache.solr.request.SolrQueryRequest;
+import org.apache.velocity.runtime.resource.loader.ResourceLoader;
+import org.apache.velocity.runtime.resource.Resource;
+import org.apache.velocity.exception.ResourceNotFoundException;
+import org.apache.commons.collections.ExtendedProperties;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+public class SolrParamResourceLoader extends ResourceLoader {
+  private Map<String,String> templates = new HashMap<String,String>();
+  public SolrParamResourceLoader(SolrQueryRequest request) {
+    super();
+
+    // TODO: Consider using content streams, but need a template name associated with each stream
+    // for now, a custom param convention of template.<name>=<template body> is a nice example
+    // of per-request overrides of templates
+
+    org.apache.solr.common.params.SolrParams params = request.getParams();
+    Iterator<String> names = params.getParameterNamesIterator();
+    while (names.hasNext()) {
+      String name = names.next();
+      
+      if (name.startsWith("v.template.")) {
+        templates.put(name.substring(11) + ".vm",params.get(name));
+      }
+    }
+  }
+
+  public void init(ExtendedProperties extendedProperties) {
+  }
+
+  public InputStream getResourceStream(String s) throws ResourceNotFoundException {
+    String template = templates.get(s);
+    return template == null ? null : new ByteArrayInputStream(template.getBytes());
+  }
+
+  public boolean isSourceModified(Resource resource) {
+    return false;
+  }
+
+  public long getLastModified(Resource resource) {
+    return 0;
+  }
+}
diff --git a/solr/src/java/org/apache/solr/response/SolrVelocityResourceLoader.java b/solr/src/java/org/apache/solr/response/SolrVelocityResourceLoader.java
new file mode 100644
index 0000000..c42dc10
--- /dev/null
+++ b/solr/src/java/org/apache/solr/response/SolrVelocityResourceLoader.java
@@ -0,0 +1,50 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.solr.response;
+
+import org.apache.velocity.runtime.resource.loader.ResourceLoader;
+import org.apache.velocity.runtime.resource.Resource;
+import org.apache.velocity.exception.ResourceNotFoundException;
+import org.apache.commons.collections.ExtendedProperties;
+import org.apache.solr.core.SolrResourceLoader;
+
+import java.io.InputStream;
+
+// TODO: the name of this class seems ridiculous
+public class SolrVelocityResourceLoader extends ResourceLoader {
+  private SolrResourceLoader loader;
+
+  public SolrVelocityResourceLoader(SolrResourceLoader loader) {
+    super();
+    this.loader = loader;
+  }
+
+  public void init(ExtendedProperties extendedProperties) {
+  }
+
+  public InputStream getResourceStream(String template_name) throws ResourceNotFoundException {
+    return loader.openResource(template_name);
+  }
+
+  public boolean isSourceModified(Resource resource) {
+    return false;
+  }
+
+  public long getLastModified(Resource resource) {
+    return 0;
+  }
+}
diff --git a/solr/src/java/org/apache/solr/response/VelocityResponseWriter.java b/solr/src/java/org/apache/solr/response/VelocityResponseWriter.java
new file mode 100644
index 0000000..454a0e5
--- /dev/null
+++ b/solr/src/java/org/apache/solr/response/VelocityResponseWriter.java
@@ -0,0 +1,191 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.response;
+
+import org.apache.solr.client.solrj.SolrResponse;
+import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;
+import org.apache.solr.client.solrj.response.QueryResponse;
+import org.apache.solr.client.solrj.response.SolrResponseBase;
+import org.apache.solr.common.util.NamedList;
+import org.apache.solr.request.SolrQueryRequest;
+import org.apache.velocity.Template;
+import org.apache.velocity.VelocityContext;
+import org.apache.velocity.app.VelocityEngine;
+import org.apache.velocity.tools.generic.*;
+
+import java.io.*;
+import java.util.Properties;
+
+public class VelocityResponseWriter implements QueryResponseWriter {
+
+  // TODO: maybe pass this Logger to the template for logging from there?
+//  private static final Logger log = LoggerFactory.getLogger(VelocityResponseWriter.class);
+
+  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {
+    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine
+
+    Template template = getTemplate(engine, request);
+
+    VelocityContext context = new VelocityContext();
+
+    context.put("request", request);
+
+    // Turn the SolrQueryResponse into a SolrResponse.
+    // QueryResponse has lots of conveniences suitable for a view
+    // Problem is, which SolrResponse class to use?
+    // One patch to SOLR-620 solved this by passing in a class name as
+    // as a parameter and using reflection and Solr's class loader to
+    // create a new instance.  But for now the implementation simply
+    // uses QueryResponse, and if it chokes in a known way, fall back
+    // to bare bones SolrResponseBase.
+    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least
+    SolrResponse rsp = new QueryResponse();
+    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);
+    try {
+      rsp.setResponse(parsedResponse);
+
+      // page only injected if QueryResponse works
+      context.put("page", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*
+    } catch (ClassCastException e) {
+      // known edge case where QueryResponse's extraction assumes "response" is a SolrDocumentList
+      // (AnalysisRequestHandler emits a "response")
+      e.printStackTrace();
+      rsp = new SolrResponseBase();
+      rsp.setResponse(parsedResponse);
+    }
+    context.put("response", rsp);
+
+    // Velocity context tools - TODO: make these pluggable
+    context.put("esc", new EscapeTool());
+    context.put("date", new ComparisonDateTool());
+    context.put("list", new ListTool());
+    context.put("math", new MathTool());
+    context.put("number", new NumberTool());
+    context.put("sort", new SortTool());
+
+    context.put("engine", engine);  // for $engine.resourceExists(...)
+
+    String layout_template = request.getParams().get("v.layout");
+    String json_wrapper = request.getParams().get("v.json");
+    boolean wrap_response = (layout_template != null) || (json_wrapper != null);
+
+    // create output, optionally wrap it into a json object
+    if (wrap_response) {
+      StringWriter stringWriter = new StringWriter();
+      template.merge(context, stringWriter);
+
+      if (layout_template != null) {
+        context.put("content", stringWriter.toString());
+        stringWriter = new StringWriter();
+        try {
+          engine.getTemplate(layout_template + ".vm").merge(context, stringWriter);
+        } catch (Exception e) {
+          throw new IOException(e.getMessage());
+        }
+      }
+
+      if (json_wrapper != null) {
+        writer.write(request.getParams().get("v.json") + "(");
+        writer.write(getJSONWrap(stringWriter.toString()));
+        writer.write(')');
+      } else {  // using a layout, but not JSON wrapping
+        writer.write(stringWriter.toString());
+      }
+    } else {
+      template.merge(context, writer);
+    }
+  }
+
+  private VelocityEngine getEngine(SolrQueryRequest request) {
+    VelocityEngine engine = new VelocityEngine();
+    String template_root = request.getParams().get("v.base_dir");
+    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), "velocity");
+    if (template_root != null) {
+      baseDir = new File(template_root);
+    }
+    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());
+    engine.setProperty("params.resource.loader.instance", new SolrParamResourceLoader(request));
+    SolrVelocityResourceLoader resourceLoader =
+        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());
+    engine.setProperty("solr.resource.loader.instance", resourceLoader);
+
+    // TODO: Externalize Velocity properties
+    engine.setProperty(VelocityEngine.RESOURCE_LOADER, "params,file,solr");
+    String propFile = request.getParams().get("v.properties");
+    try {
+      if (propFile == null)
+        engine.init();
+      else {
+        InputStream is = null;
+        try {
+          is = resourceLoader.getResourceStream(propFile);
+          Properties props = new Properties();
+          props.load(is);
+          engine.init(props);
+        }
+        finally {
+          if (is != null) is.close();
+        }
+      }
+    }
+    catch (Exception e) {
+      throw new RuntimeException(e);
+    }
+
+    return engine;
+  }
+
+  private Template getTemplate(VelocityEngine engine, SolrQueryRequest request) throws IOException {
+    Template template;
+
+    String template_name = request.getParams().get("v.template");
+    String qt = request.getParams().get("qt");
+    String path = (String) request.getContext().get("path");
+    if (template_name == null && path != null) {
+      template_name = path;
+    }  // TODO: path is never null, so qt won't get picked up  maybe special case for '/select' to use qt, otherwise use path?
+    if (template_name == null && qt != null) {
+      template_name = qt;
+    }
+    if (template_name == null) template_name = "index";
+    try {
+      template = engine.getTemplate(template_name + ".vm");
+    } catch (Exception e) {
+      throw new IOException(e.getMessage());
+    }
+
+    return template;
+  }
+
+  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {
+    return request.getParams().get("v.contentType", "text/html;charset=UTF-8");
+  }
+
+  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?
+    // escape the double quotes and backslashes
+    String replace1 = xmlResult.replaceAll("\\\\", "\\\\\\\\");
+    replace1 = replace1.replaceAll("\\n", "\\\\n");
+    replace1 = replace1.replaceAll("\\r", "\\\\r");
+    String replaced = replace1.replaceAll("\"", "\\\\\"");
+    // wrap it in a JSON object
+    return "{\"result\":\"" + replaced + "\"}";
+  }
+
+  public void init(NamedList args) {
+  }
+}
diff --git a/solr/src/test/org/apache/solr/velocity/VelocityResponseWriterTest.java b/solr/src/test/org/apache/solr/velocity/VelocityResponseWriterTest.java
new file mode 100644
index 0000000..911ca19
--- /dev/null
+++ b/solr/src/test/org/apache/solr/velocity/VelocityResponseWriterTest.java
@@ -0,0 +1,25 @@
+package org.apache.solr.velocity;
+
+import org.apache.solr.response.SolrQueryResponse;
+import org.apache.solr.response.VelocityResponseWriter;
+import org.apache.solr.request.SolrQueryRequest;
+import org.apache.solr.util.AbstractSolrTestCase;
+
+import java.io.StringWriter;
+import java.io.IOException;
+
+public class VelocityResponseWriterTest extends AbstractSolrTestCase {
+  public String getSchemaFile() { return "schema.xml"; }
+  public String getSolrConfigFile() { return "solrconfig.xml"; }
+
+
+  public void testTemplateName() throws IOException {
+    org.apache.solr.response.VelocityResponseWriter vrw = new VelocityResponseWriter();
+    SolrQueryRequest req = req("v.template","custom", "v.template.custom","$response.response.response_data");
+    SolrQueryResponse rsp = new SolrQueryResponse();
+    StringWriter buf = new StringWriter();
+    rsp.add("response_data", "testing");
+    vrw.write(buf, req, rsp);
+    assertEquals("testing", buf.toString());
+  }
+}
diff --git a/solr/src/test/test-files/solr/conf/velocity/VM_global_library.vm b/solr/src/test/test-files/solr/conf/velocity/VM_global_library.vm
new file mode 100644
index 0000000..398b8a2
--- /dev/null
+++ b/solr/src/test/test-files/solr/conf/velocity/VM_global_library.vm
@@ -0,0 +1,50 @@
+
+
+
+#macro(nl2ul $named_list)
+  <ul>
+  #foreach($kv in $named_list)
+    <li>$kv.key ($kv.value)
+      #nl2ul($kv.value)
+    </li>
+  #end
+  </ul>
+#end
+
+#macro(url_for_filters $filter_queries)
+  /solr/itas?fq=$filter_queries
+#end
+
+#macro(url_for_home)/solr/itas#end
+
+#macro(url_for_start $start)/solr/itas?start=$start&q=$!{esc.url($params.get('q'))}#end
+
+## TODO: need to add escaping
+#macro(url_for_nested_facet $field $value)/solr/itas?fq=$field:%22$value%22#end
+
+#macro(link_to_previous_page $text)
+  #if($page.current_page_number > 1)
+    #set($prev_start = $page.start - $page.results_per_page)
+    <a class="prev-page" href="#url_for_start($prev_start)">$text</a>
+  #end
+#end
+
+#macro(link_to_next_page $text)
+  #if($page.current_page_number < $page.page_count)
+    #set($next_start = $page.start + $page.results_per_page)
+    <a class="next-page" href="#url_for_start($next_start)">$text</a>
+  #end
+#end
+
+#macro(link_to_page $page_number $text)
+  #if($page_number == $page.current_page_number)
+    $text
+  #else
+    #if($page_number <= $page.page_count)
+      #set($page_start = $page_number * $page.results_per_page - $page.results_per_page)
+      <a class="page" href="#url_for_start($page_start)">$text</a>
+    #end
+  #end
+#end
+
+#macro(param $key)$request.params.get($key)#end

