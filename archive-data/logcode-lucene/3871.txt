GitDiffStart: f951625286f533fa06a7683a889bf0fa34e2a3cf | Wed Apr 1 15:29:42 2015 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 6f43430..fc5df69 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -376,6 +376,9 @@ Bug Fixes
 * SOLR-6924: The config API forcefully refreshes all replicas in the collection to ensure all are
   updated (Noble Paul)
 
+* SOLR-7266: The IgnoreCommitOptimizeUpdateProcessor blocks commit requests from
+  replicas needing to recover. (Jessica Cheng Mallet, Timothy Potter)
+
 Optimizations
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory.java b/solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory.java
index 5cf9afc..d3eea4f 100644
--- a/solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory.java
+++ b/solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory.java
@@ -118,6 +118,12 @@ class IgnoreCommitOptimizeUpdateProcessor extends UpdateRequestProcessor {
       return;
     }
 
+    if (cmd.getReq().getParams().getBool(DistributedUpdateProcessor.COMMIT_END_POINT, false)) {
+      // this is a targeted commit from replica to leader needed for recovery, so can't be ignored
+      if (next != null) next.processCommit(cmd);
+      return;
+    }
+
     final String cmdType = cmd.optimize ? "optimize" : "commit";
     if (errorCode != null) {
       IgnoreCommitOptimizeUpdateProcessorFactory.log.info(
diff --git a/solr/core/src/test/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactoryTest.java b/solr/core/src/test/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactoryTest.java
index 8711f62..0c6b1c1ce 100644
--- a/solr/core/src/test/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactoryTest.java
+++ b/solr/core/src/test/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactoryTest.java
@@ -52,15 +52,29 @@ public class IgnoreCommitOptimizeUpdateProcessorFactoryTest extends SolrTestCase
 
     rsp = processCommit("ignore-optimize-only-from-client-403", true);
     assertNotNull("Sending an optimize should have resulted in an exception in the response", rsp.getException());
+    // commit should happen if DistributedUpdateProcessor.COMMIT_END_POINT == true
+    rsp = processCommit("ignore-commit-from-client-403", false, new Boolean(true));
+    shouldBeNull = rsp.getException();
+    assertNull("Sending a commit should NOT have resulted in an exception in the response: "+shouldBeNull, shouldBeNull);
   }
 
   SolrQueryResponse processCommit(final String chain, boolean optimize) throws IOException {
+    return processCommit(chain, optimize, null);
+  }
+
+  SolrQueryResponse processCommit(final String chain, boolean optimize, Boolean commitEndPoint) throws IOException {
     SolrCore core = h.getCore();
     UpdateRequestProcessorChain pc = core.getUpdateProcessingChain(chain);
     assertNotNull("No Chain named: " + chain, pc);
 
     SolrQueryResponse rsp = new SolrQueryResponse();
     SolrQueryRequest req = new LocalSolrQueryRequest(core, new ModifiableSolrParams());
+
+    if (commitEndPoint != null) {
+      ((ModifiableSolrParams)req.getParams()).set(
+          DistributedUpdateProcessor.COMMIT_END_POINT, commitEndPoint.booleanValue());
+    }
+
     try {
       SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));
       CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);

