GitDiffStart: c476a59ff9af6ccebf80370308728385ccaa476e | Wed Mar 13 18:22:03 2013 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index d23e4b4..1a95bf0 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -80,6 +80,9 @@ Bug Fixes
   codecs. The special case of a null context ClassLoader is now also
   supported.  (Christian Kohlsch√ºtter, Uwe Schindler)
 
+* LUCENE-4828: BooleanQuery no longer extracts terms from its MUST_NOT
+  clauses.  (Mike McCandless)
+
 ======================= Lucene 4.2.0 =======================
 
 Changes in backwards compatibility policy
diff --git a/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java b/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
index b0a221b..487cece 100644
--- a/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -446,9 +446,11 @@ public class BooleanQuery extends Query implements Iterable<BooleanClause> {
   // inherit javadoc
   @Override
   public void extractTerms(Set<Term> terms) {
-      for (BooleanClause clause : clauses) {
-          clause.getQuery().extractTerms(terms);
-        }
+    for (BooleanClause clause : clauses) {
+      if (clause.getOccur() != Occur.MUST_NOT) {
+        clause.getQuery().extractTerms(terms);
+      }
+    }
   }
 
   @Override @SuppressWarnings("unchecked")
diff --git a/lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter.java b/lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter.java
index f5f8eb1..55ac68e 100644
--- a/lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter.java
+++ b/lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter.java
@@ -406,4 +406,32 @@ public class TestPostingsHighlighter extends LuceneTestCase {
     ir.close();
     dir.close();
   }
+
+  public void testBooleanMustNot() throws Exception {
+    Directory dir = newDirectory();
+    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);
+    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer);
+    FieldType positionsType = new FieldType(TextField.TYPE_STORED);
+    positionsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
+    Field body = new Field("body", "This sentence has both terms.  This sentence has only terms.", positionsType);
+    Document document = new Document();
+    document.add(body);
+    iw.addDocument(document);
+    IndexReader ir = iw.getReader();
+    iw.close();
+    IndexSearcher searcher = newSearcher(ir);
+    BooleanQuery query = new BooleanQuery();
+    query.add(new TermQuery(new Term("body", "terms")), BooleanClause.Occur.SHOULD);
+    BooleanQuery query2 = new BooleanQuery();
+    query.add(query2, BooleanClause.Occur.SHOULD);
+    query2.add(new TermQuery(new Term("body", "both")), BooleanClause.Occur.MUST_NOT);
+    TopDocs topDocs = searcher.search(query, 10);
+    assertEquals(1, topDocs.totalHits);
+    PostingsHighlighter highlighter = new PostingsHighlighter(Integer.MAX_VALUE-1);
+    String snippets[] = highlighter.highlight("body", query, searcher, topDocs, 2);
+    assertEquals(1, snippets.length);
+    assertFalse(snippets[0].contains("<b>both</b>"));
+    ir.close();
+    dir.close();
+  }
 }

