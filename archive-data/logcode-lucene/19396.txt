GitDiffStart: 1e9ed072144940240b9ca8903bd11396d763bfe8 | Thu Sep 10 13:07:19 2009 +0000
diff --git a/src/solrj/org/apache/solr/client/solrj/request/AbstractUpdateRequest.java b/src/solrj/org/apache/solr/client/solrj/request/AbstractUpdateRequest.java
new file mode 100644
index 0000000..920aa87
--- /dev/null
+++ b/src/solrj/org/apache/solr/client/solrj/request/AbstractUpdateRequest.java
@@ -0,0 +1,126 @@
+package org.apache.solr.client.solrj.request;
+
+import org.apache.solr.client.solrj.SolrRequest;
+import org.apache.solr.client.solrj.SolrServer;
+import org.apache.solr.client.solrj.SolrServerException;
+import org.apache.solr.client.solrj.response.UpdateResponse;
+import org.apache.solr.common.params.ModifiableSolrParams;
+import org.apache.solr.common.params.UpdateParams;
+
+import java.io.IOException;
+
+
+/**
+ *
+ *
+ **/
+public abstract class AbstractUpdateRequest extends SolrRequest {
+  protected ModifiableSolrParams params;
+  protected int commitWithin = -1;
+
+  public enum ACTION {
+    COMMIT,
+    OPTIMIZE
+  }
+
+  public AbstractUpdateRequest(METHOD m, String path) {
+    super(m, path);
+  }
+
+  /** Sets appropriate parameters for the given ACTION */
+  public AbstractUpdateRequest setAction(ACTION action, boolean waitFlush, boolean waitSearcher ) {
+    return setAction(action, waitFlush, waitSearcher, 1);
+  }
+
+  public AbstractUpdateRequest setAction(ACTION action, boolean waitFlush, boolean waitSearcher, int maxSegments ) {
+    if (params == null)
+      params = new ModifiableSolrParams();
+
+    if( action == ACTION.OPTIMIZE ) {
+      params.set( UpdateParams.OPTIMIZE, "true" );
+      params.set(UpdateParams.MAX_OPTIMIZE_SEGMENTS, maxSegments);
+    }
+    else if( action == ACTION.COMMIT ) {
+      params.set( UpdateParams.COMMIT, "true" );
+    }
+    params.set( UpdateParams.WAIT_FLUSH, String.valueOf(waitFlush));
+    params.set( UpdateParams.WAIT_SEARCHER, String.valueOf(waitSearcher));
+    return this;
+  }
+
+  public AbstractUpdateRequest setAction(ACTION action, boolean waitFlush, boolean waitSearcher, int maxSegments , boolean expungeDeletes) {
+    setAction(action, waitFlush, waitSearcher,maxSegments) ;
+    params.set(UpdateParams.EXPUNGE_DELETES, String.valueOf(expungeDeletes));
+    return this;
+  }
+
+  /**
+   * @since Solr 1.4
+   */
+  public AbstractUpdateRequest rollback() {
+    if (params == null)
+      params = new ModifiableSolrParams();
+
+    params.set( UpdateParams.ROLLBACK, "true" );
+    return this;
+  }
+
+  public void setParam(String param, String value) {
+    if (params == null)
+      params = new ModifiableSolrParams();
+    params.set(param, value);
+  }
+
+  /** Sets the parameters for this update request, overwriting any previous */
+  public void setParams(ModifiableSolrParams params) {
+    this.params = params;
+  }
+
+  @Override
+  public ModifiableSolrParams getParams() {
+    return params;
+  }
+
+  @Override
+  public UpdateResponse process( SolrServer server ) throws SolrServerException, IOException
+  {
+    long startTime = System.currentTimeMillis();
+    UpdateResponse res = new UpdateResponse();
+    res.setResponse( server.request( this ) );
+    res.setElapsedTime( System.currentTimeMillis()-startTime );
+    return res;
+  }
+
+  public boolean isWaitFlush() {
+    return params != null && params.getBool(UpdateParams.WAIT_FLUSH, false);
+  }
+
+  public boolean isWaitSearcher() {
+    return params != null && params.getBool(UpdateParams.WAIT_SEARCHER, false);
+  }
+
+  public ACTION getAction() {
+    if (params==null) return null;
+    if (params.getBool(UpdateParams.COMMIT, false)) return ACTION.COMMIT;
+    if (params.getBool(UpdateParams.OPTIMIZE, false)) return ACTION.OPTIMIZE;
+    return null;
+  }
+
+  public void setWaitFlush(boolean waitFlush) {
+    setParam( UpdateParams.WAIT_FLUSH, waitFlush+"" );
+  }
+
+  public void setWaitSearcher(boolean waitSearcher) {
+    setParam( UpdateParams.WAIT_SEARCHER, waitSearcher+"" );
+  }
+
+  public int getCommitWithin() {
+    return commitWithin;
+  }
+
+  public void setCommitWithin(int commitWithin) {
+    this.commitWithin = commitWithin;
+  }
+
+
+}
diff --git a/src/solrj/org/apache/solr/client/solrj/request/ContentStreamUpdateRequest.java b/src/solrj/org/apache/solr/client/solrj/request/ContentStreamUpdateRequest.java
new file mode 100644
index 0000000..d1606ff
--- /dev/null
+++ b/src/solrj/org/apache/solr/client/solrj/request/ContentStreamUpdateRequest.java
@@ -0,0 +1,79 @@
+package org.apache.solr.client.solrj.request;
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+import org.apache.solr.client.solrj.SolrRequest;
+import org.apache.solr.client.solrj.SolrServer;
+import org.apache.solr.client.solrj.SolrServerException;
+import org.apache.solr.client.solrj.response.UpdateResponse;
+import org.apache.solr.common.params.ModifiableSolrParams;
+import org.apache.solr.common.params.SolrParams;
+import org.apache.solr.common.util.ContentStream;
+import org.apache.solr.common.util.ContentStreamBase;
+
+import java.io.IOException;
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+
+/**
+ * Basic functionality to upload a File to a Solr Cell
+ * <p/>
+ * See http://wiki.apache.org/solr/ExtractingRequestHandler
+ *
+ **/
+public class ContentStreamUpdateRequest extends AbstractUpdateRequest {
+  List<ContentStream> contentStreams;
+
+  /**
+   *
+   * @param url The URL for Solr Cell.
+   */
+  public ContentStreamUpdateRequest(String url) {
+    super(METHOD.POST, url);
+    contentStreams = new ArrayList<ContentStream>();
+  }
+
+  @Override
+  public Collection<ContentStream> getContentStreams() throws IOException {
+    return contentStreams;
+  }
+
+  /**
+   * Add a File to the {@link org.apache.solr.common.util.ContentStream}s.
+   * @param file The File to add.
+   * @throws IOException if there was an error with the file.
+   *
+   * @see #getContentStreams()
+   * @see org.apache.solr.common.util.ContentStreamBase.FileStream
+   */
+  public void addFile(File file) throws IOException {
+    addContentStream(new ContentStreamBase.FileStream(file));
+  }
+
+  /**
+   * Add a {@link org.apache.solr.common.util.ContentStream} to {@link #getContentStreams()}
+   * @param contentStream The {@link org.apache.solr.common.util.ContentStream}
+   */
+  public void addContentStream(ContentStream contentStream){
+    contentStreams.add(contentStream);
+  }
+  
+}
diff --git a/src/solrj/org/apache/solr/client/solrj/request/UpdateRequest.java b/src/solrj/org/apache/solr/client/solrj/request/UpdateRequest.java
index 24f6cec..eb6b332 100644
--- a/src/solrj/org/apache/solr/client/solrj/request/UpdateRequest.java
+++ b/src/solrj/org/apache/solr/client/solrj/request/UpdateRequest.java
@@ -41,8 +41,12 @@ import org.apache.solr.common.util.XML;
  * @version $Id$
  * @since solr 1.3
  */
-public class UpdateRequest extends SolrRequest
-{
+public class UpdateRequest extends AbstractUpdateRequest {
+  /**
+   * Kept for back compatibility.
+   *
+   * @deprecated Use {@link AbstractUpdateRequest.ACTION} instead
+   */
   public enum ACTION {
     COMMIT,
     OPTIMIZE
@@ -53,9 +57,6 @@ public class UpdateRequest extends SolrRequest
   private List<String> deleteById = null;
   private List<String> deleteQuery = null;
 
-  private ModifiableSolrParams params;
-  private int commitWithin = -1;
-  
   public UpdateRequest()
   {
     super( METHOD.POST, "/update" );
@@ -132,11 +133,18 @@ public class UpdateRequest extends SolrRequest
     return this;
   }
 
-  /** Sets appropriate parameters for the given ACTION */
+  /** Sets appropriate parameters for the given ACTION
+   *
+   * @deprecated Use {@link org.apache.solr.client.solrj.request.AbstractUpdateRequest.ACTION} instead
+   * */
   public UpdateRequest setAction(ACTION action, boolean waitFlush, boolean waitSearcher ) {
     return setAction(action, waitFlush, waitSearcher, 1);
   }
 
+  /**
+   *
+   * @deprecated Use {@link org.apache.solr.client.solrj.request.AbstractUpdateRequest.ACTION} instead
+   */
   public UpdateRequest setAction(ACTION action, boolean waitFlush, boolean waitSearcher, int maxSegments ) {
     if (params == null)
       params = new ModifiableSolrParams();
@@ -153,34 +161,17 @@ public class UpdateRequest extends SolrRequest
     return this;
   }
 
+  /**
+   *
+   *
+   * @deprecated Use {@link org.apache.solr.client.solrj.request.AbstractUpdateRequest.ACTION} instead
+   */
   public UpdateRequest setAction(ACTION action, boolean waitFlush, boolean waitSearcher, int maxSegments , boolean expungeDeletes) {
     setAction(action, waitFlush, waitSearcher,maxSegments) ;
     params.set(UpdateParams.EXPUNGE_DELETES,""+expungeDeletes);
     return this;
   }
 
-  /**
-   * @since Solr 1.4
-   */
-  public UpdateRequest rollback() {
-    if (params == null)
-      params = new ModifiableSolrParams();
-
-    params.set( UpdateParams.ROLLBACK, "true" );
-    return this;
-  }
-  
-
-  public void setParam(String param, String value) {
-    if (params == null)
-      params = new ModifiableSolrParams();
-    params.set(param, value);
-  }
-
-  /** Sets the parameters for this update request, overwriting any previous */
-  public void setParams(ModifiableSolrParams params) {
-    this.params = params;
-  }
 
   public void setDocIterator(Iterator<SolrInputDocument> docIterator) {
     this.docIterator = docIterator;
@@ -261,21 +252,6 @@ public class UpdateRequest extends SolrRequest
   //--------------------------------------------------------------------------
   //--------------------------------------------------------------------------
 
-  @Override
-  public ModifiableSolrParams getParams() {
-    return params;
-  }
-  
-  @Override
-  public UpdateResponse process( SolrServer server ) throws SolrServerException, IOException
-  {
-    long startTime = System.currentTimeMillis();
-    UpdateResponse res = new UpdateResponse();
-    res.setResponse( server.request( this ) );
-    res.setElapsedTime( System.currentTimeMillis()-startTime );
-    return res;
-  }
-  
   //--------------------------------------------------------------------------
   // 
   //--------------------------------------------------------------------------
@@ -296,34 +272,4 @@ public class UpdateRequest extends SolrRequest
     return deleteQuery;
   }
 
-  public boolean isWaitFlush() {
-    return params != null && params.getBool(UpdateParams.WAIT_FLUSH, false);
-  }
-
-  public boolean isWaitSearcher() {
-    return params != null && params.getBool(UpdateParams.WAIT_SEARCHER, false);
-  }
-
-  public ACTION getAction() {
-    if (params==null) return null;
-    if (params.getBool(UpdateParams.COMMIT, false)) return ACTION.COMMIT; 
-    if (params.getBool(UpdateParams.OPTIMIZE, false)) return ACTION.OPTIMIZE;
-    return null;
-  }
-
-  public void setWaitFlush(boolean waitFlush) {
-    setParam( UpdateParams.WAIT_FLUSH, waitFlush+"" );
-  }
-
-  public void setWaitSearcher(boolean waitSearcher) {
-    setParam( UpdateParams.WAIT_SEARCHER, waitSearcher+"" );
-  }
-
-  public int getCommitWithin() {
-    return commitWithin;
-  }
-
-  public void setCommitWithin(int commitWithin) {
-    this.commitWithin = commitWithin;
-  }
 }
diff --git a/src/test/org/apache/solr/client/solrj/SolrExampleTests.java b/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
index 3c207e3..e050ec4 100644
--- a/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
+++ b/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
@@ -20,6 +20,7 @@ package org.apache.solr.client.solrj;
 
 import java.io.IOException;
 import java.io.StringWriter;
+import java.io.File;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
@@ -31,6 +32,8 @@ import org.apache.solr.client.solrj.request.LukeRequest;
 import org.apache.solr.client.solrj.request.SolrPing;
 import org.apache.solr.client.solrj.response.FieldStatsInfo;
 import org.apache.solr.client.solrj.request.UpdateRequest;
+import org.apache.solr.client.solrj.request.ContentStreamUpdateRequest;
+import org.apache.solr.client.solrj.request.AbstractUpdateRequest;
 import org.apache.solr.client.solrj.response.LukeResponse;
 import org.apache.solr.client.solrj.response.QueryResponse;
 import org.apache.solr.client.solrj.response.FacetField;
@@ -38,6 +41,7 @@ import org.apache.solr.client.solrj.response.UpdateResponse;
 import org.apache.solr.client.solrj.util.ClientUtils;
 import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.common.util.XML;
+import org.apache.solr.common.util.NamedList;
 import org.apache.solr.common.params.FacetParams;
 
 /**
@@ -239,8 +243,41 @@ abstract public class SolrExampleTests extends SolrExampleTestBase
     
     Assert.assertEquals( 1, rsp.getResults().getNumFound() );
   }
-  
-  
+
+
+  public void testContentStreamRequest() throws Exception {
+    SolrServer server = getSolrServer();
+    server.deleteByQuery( "*:*" );// delete everything!
+    server.commit();
+    QueryResponse rsp = server.query( new SolrQuery( "*:*") );
+    Assert.assertEquals( 0, rsp.getResults().getNumFound() );
+
+    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest("/update/csv");
+    up.addFile(new File("books.csv"));
+    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);
+    NamedList<Object> result = server.request(up);
+    assertNotNull("Couldn't upload books.csv", result);
+    rsp = server.query( new SolrQuery( "*:*") );
+    Assert.assertEquals( 10, rsp.getResults().getNumFound() );
+
+    server.deleteByQuery( "*:*" );// delete everything!
+    server.commit();
+    rsp = server.query( new SolrQuery( "*:*") );
+    Assert.assertEquals( 0, rsp.getResults().getNumFound() );
+
+    up = new ContentStreamUpdateRequest("/update/extract");
+    up.addFile(new File("mailing_lists.pdf"));
+    up.setParam("literal.id", "mailing_lists.pdf");
+    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);
+    result = server.request(up);
+    assertNotNull("Couldn't upload mailing_lists.pdf", result);
+    rsp = server.query( new SolrQuery( "*:*") );
+    Assert.assertEquals( 1, rsp.getResults().getNumFound() );
+
+
+  }
+
+
   protected void assertNumFound( String query, int num ) throws SolrServerException, IOException
   {
     QueryResponse rsp = getSolrServer().query( new SolrQuery( query ) );
diff --git a/src/test/test-files/books.csv b/src/test/test-files/books.csv
new file mode 100644
index 0000000..36b20f5
--- /dev/null
+++ b/src/test/test-files/books.csv
@@ -0,0 +1,11 @@
+id,cat,name,price,inStock,author_t,series_t,sequence_i,genre_s
+0553573403,book,A Game of Thrones,7.99,true,George R.R. Martin,"A Song of Ice and Fire",1,fantasy
+0553579908,book,A Clash of Kings,7.99,true,George R.R. Martin,"A Song of Ice and Fire",2,fantasy
+055357342X,book,A Storm of Swords,7.99,true,George R.R. Martin,"A Song of Ice and Fire",3,fantasy
+0553293354,book,Foundation,7.99,true,Isaac Asimov,Foundation Novels,1,scifi
+0812521390,book,The Black Company,6.99,false,Glen Cook,The Chronicles of The Black Company,1,fantasy
+0812550706,book,Ender's Game,6.99,true,Orson Scott Card,Ender,1,scifi
+0441385532,book,Jhereg,7.95,false,Steven Brust,Vlad Taltos,1,fantasy
+0380014300,book,Nine Princes In Amber,6.99,true,Roger Zelazny,the Chronicles of Amber,1,fantasy
+0805080481,book,The Book of Three,5.99,true,Lloyd Alexander,The Chronicles of Prydain,1,fantasy
+080508049X,book,The Black Cauldron,5.99,true,Lloyd Alexander,The Chronicles of Prydain,2,fantasy
diff --git a/src/test/test-files/mailing_lists.pdf b/src/test/test-files/mailing_lists.pdf
new file mode 100755
index 0000000..33b819f
--- /dev/null
+++ b/src/test/test-files/mailing_lists.pdf
@@ -0,0 +1,46 @@
+Solr Mailing Lists
+
+Table of contents
+
+   1 Users...................................................................................................................................2
+   2 Developers......................................................................................................................... 2
+   3 Commits............................................................................................................................. 2
+
+                   Copyright © 2007 The Apache Software Foundation. All rights reserved.
+                                                                                                                                           Solr Mailing Lists
+
+1. Users
+
+If you use Solr, please subscribe to the Solr user mailing list.
+The Solr user mailing list is : solr-user@lucene.apache.org.
+?? Subscribe to List
+?? Unsubscribe from List
+?? View List Archive (Alternate list archive providers can be found on the wiki)
+
+     Note:
+
+       In order to post to the list, it is necessary to first subscribe to it.
+
+2. Developers
+
+If you'd like to contribute to Solr, please subscribe to the Solr developer mailing list.
+The Solr developer mailing list is : solr-dev@lucene.apache.org.
+?? Subscribe to List
+?? Unsubscribe from List
+?? View List Archive (Alternate list archive providers can be found on the wiki)
+
+     Note:
+
+       In order to post to the list, it is necessary to first subscribe to it.
+
+3. Commits
+
+If you'd like to see changes made in Solr's version control system then subscribe to the Solr
+commit mailing list.
+?? Subscribe to List
+?? Unsubscribe from List
+
+                                                                       Page 2
+
+Copyright © 2007 The Apache Software Foundation. All rights reserved.
+
\ No newline at end of file

