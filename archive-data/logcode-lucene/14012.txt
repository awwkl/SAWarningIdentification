GitDiffStart: 35a73d5f5586370590eeb08e6a45f0dcb147ce1f | Tue Jan 24 09:50:21 2012 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 9682166..d6e53f5 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -814,7 +814,7 @@ Bug fixes
 * LUCENE-3641: Fixed MultiReader to correctly propagate readerFinishedListeners
   to clones/reopened readers.  (Uwe Schindler)
 
-* LUCENE-3642, SOLR-2891, LUCENE-3717: Fixed bugs in CharTokenizer, n-gram filters, 
+* LUCENE-3642, SOLR-2891, LUCENE-3717: Fixed bugs in CharTokenizer, n-gram tokenizers/filters, 
   compound token filters, thai word filter, icutokenizer, pattern analyzer, 
   wikipediatokenizer, and smart chinese where they would create invalid offsets in 
   some situations, leading to problems in highlighting.  
diff --git a/lucene/src/java/org/apache/lucene/analysis/Analyzer.java b/lucene/src/java/org/apache/lucene/analysis/Analyzer.java
index 3a6a236..33e5beb 100644
--- a/lucene/src/java/org/apache/lucene/analysis/Analyzer.java
+++ b/lucene/src/java/org/apache/lucene/analysis/Analyzer.java
@@ -52,12 +52,12 @@ public abstract class Analyzer {
    * @param fieldName
    *          the name of the fields content passed to the
    *          {@link TokenStreamComponents} sink as a reader
-   * @param aReader
+   * @param reader
    *          the reader passed to the {@link Tokenizer} constructor
    * @return the {@link TokenStreamComponents} for this analyzer.
    */
   protected abstract TokenStreamComponents createComponents(String fieldName,
-      Reader aReader);
+      Reader reader);
 
   /**
    * Creates a TokenStream that is allowed to be re-use from the previous time
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.java
index b11814b..029f405 100644
--- a/modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.java
+++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.java
@@ -74,7 +74,8 @@ public final class EdgeNGramTokenizer extends Tokenizer {
   private int gramSize;
   private Side side;
   private boolean started = false;
-  private int inLen;
+  private int inLen; // length of the input AFTER trim()
+  private int charsRead; // length of the input
   private String inStr;
 
 
@@ -183,7 +184,11 @@ public final class EdgeNGramTokenizer extends Tokenizer {
     if (!started) {
       started = true;
       char[] chars = new char[1024];
-      int charsRead = input.read(chars);
+      charsRead = input.read(chars);
+      if (charsRead < 0) {
+        charsRead = inLen = 0;
+        return false;
+      }
       inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces
       inLen = inStr.length();
       gramSize = minGram;
@@ -211,7 +216,7 @@ public final class EdgeNGramTokenizer extends Tokenizer {
   @Override
   public final void end() {
     // set final offset
-    final int finalOffset = inLen;
+    final int finalOffset = correctOffset(charsRead);
     this.offsetAtt.setOffset(finalOffset, finalOffset);
   }    
 
@@ -225,5 +230,6 @@ public final class EdgeNGramTokenizer extends Tokenizer {
   public void reset() throws IOException {
     super.reset();
     started = false;
+    charsRead = 0;
   }
 }
diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer.java
index e7137c9..c410993 100644
--- a/modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer.java
+++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer.java
@@ -35,7 +35,8 @@ public final class NGramTokenizer extends Tokenizer {
   private int minGram, maxGram;
   private int gramSize;
   private int pos = 0;
-  private int inLen;
+  private int inLen; // length of the input AFTER trim()
+  private int charsRead; // length of the input
   private String inStr;
   private boolean started = false;
   
@@ -104,7 +105,11 @@ public final class NGramTokenizer extends Tokenizer {
       started = true;
       gramSize = minGram;
       char[] chars = new char[1024];
-      input.read(chars);
+      charsRead = input.read(chars);
+      if (charsRead < 0) {
+        charsRead = inLen = 0;
+        return false;
+      }
       inStr = new String(chars).trim();  // remove any trailing empty strings 
       inLen = inStr.length();
     }
@@ -128,7 +133,7 @@ public final class NGramTokenizer extends Tokenizer {
   @Override
   public final void end() {
     // set final offset
-    final int finalOffset = inLen;
+    final int finalOffset = correctOffset(charsRead);
     this.offsetAtt.setOffset(finalOffset, finalOffset);
   }    
   
@@ -143,5 +148,6 @@ public final class NGramTokenizer extends Tokenizer {
     super.reset();
     started = false;
     pos = 0;
+    charsRead = 0;
   }
 }
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest.java
index a88f23c..e46fd52 100644
--- a/modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest.java
+++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest.java
@@ -129,4 +129,27 @@ public class EdgeNGramTokenFilterTest extends BaseTokenStreamTestCase {
         new int[]    {    0,     0,      0,       0,        0,         0,          0,           0,            0,             0,              0 },
         new int[]    {   11,    11,     11,      11,       11,        11,         11,          11,           11,            11,             11 });
   }
+  
+  /** blast some random strings through the analyzer */
+  public void testRandomStrings() throws Exception {
+    Analyzer a = new Analyzer() {
+      @Override
+      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
+        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
+        return new TokenStreamComponents(tokenizer, 
+            new EdgeNGramTokenFilter(tokenizer, EdgeNGramTokenFilter.Side.FRONT, 2, 15));
+      }    
+    };
+    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);
+    
+    Analyzer b = new Analyzer() {
+      @Override
+      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
+        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
+        return new TokenStreamComponents(tokenizer, 
+            new EdgeNGramTokenFilter(tokenizer, EdgeNGramTokenFilter.Side.BACK, 2, 15));
+      }    
+    };
+    checkRandomData(random, b, 10000*RANDOM_MULTIPLIER);
+  }
 }
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest.java
index cf2686b..5d4976f 100644
--- a/modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest.java
+++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest.java
@@ -18,9 +18,13 @@ package org.apache.lucene.analysis.ngram;
  */
 
 
+import java.io.Reader;
 import java.io.StringReader;
 
+import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
+import org.apache.lucene.analysis.Tokenizer;
+import org.apache.lucene.analysis.Analyzer.TokenStreamComponents;
 
 /**
  * Tests {@link EdgeNGramTokenizer} for correctness.
@@ -95,4 +99,25 @@ public class EdgeNGramTokenizerTest extends BaseTokenStreamTestCase {
     tokenizer.reset(new StringReader("abcde"));
     assertTokenStreamContents(tokenizer, new String[]{"a","ab","abc"}, new int[]{0,0,0}, new int[]{1,2,3}, 5 /* abcde */);
   }
+  
+  /** blast some random strings through the analyzer */
+  public void testRandomStrings() throws Exception {
+    Analyzer a = new Analyzer() {
+      @Override
+      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
+        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.FRONT, 2, 15);
+        return new TokenStreamComponents(tokenizer, tokenizer);
+      }    
+    };
+    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);
+    
+    Analyzer b = new Analyzer() {
+      @Override
+      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
+        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.BACK, 2, 15);
+        return new TokenStreamComponents(tokenizer, tokenizer);
+      }    
+    };
+    checkRandomData(random, b, 10000*RANDOM_MULTIPLIER);
+  }
 }
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest.java
index 6b12775..ec93076 100644
--- a/modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest.java
+++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest.java
@@ -23,6 +23,7 @@ import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.Tokenizer;
+import org.apache.lucene.analysis.Analyzer.TokenStreamComponents;
 import org.apache.lucene.analysis.core.WhitespaceTokenizer;
 import org.apache.lucene.analysis.miscellaneous.ASCIIFoldingFilter;
 
@@ -33,89 +34,102 @@ import java.io.StringReader;
  * Tests {@link NGramTokenFilter} for correctness.
  */
 public class NGramTokenFilterTest extends BaseTokenStreamTestCase {
-    private TokenStream input;
-    
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        input = new MockTokenizer(new StringReader("abcde"), MockTokenizer.WHITESPACE, false);
+  private TokenStream input;
+  
+  @Override
+  public void setUp() throws Exception {
+    super.setUp();
+    input = new MockTokenizer(new StringReader("abcde"), MockTokenizer.WHITESPACE, false);
+  }
+  
+  public void testInvalidInput() throws Exception {
+    boolean gotException = false;
+    try {        
+      new NGramTokenFilter(input, 2, 1);
+    } catch (IllegalArgumentException e) {
+      gotException = true;
     }
-
-    public void testInvalidInput() throws Exception {
-        boolean gotException = false;
-        try {        
-            new NGramTokenFilter(input, 2, 1);
-        } catch (IllegalArgumentException e) {
-            gotException = true;
-        }
-        assertTrue(gotException);
-    }
-
-    public void testInvalidInput2() throws Exception {
-        boolean gotException = false;
-        try {        
-            new NGramTokenFilter(input, 0, 1);
-        } catch (IllegalArgumentException e) {
-            gotException = true;
-        }
-        assertTrue(gotException);
-    }
-
-    public void testUnigrams() throws Exception {
-      NGramTokenFilter filter = new NGramTokenFilter(input, 1, 1);
-      assertTokenStreamContents(filter, new String[]{"a","b","c","d","e"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5});
-    }
-
-    public void testBigrams() throws Exception {
-      NGramTokenFilter filter = new NGramTokenFilter(input, 2, 2);
-      assertTokenStreamContents(filter, new String[]{"ab","bc","cd","de"}, new int[]{0,1,2,3}, new int[]{2,3,4,5});
+    assertTrue(gotException);
+  }
+  
+  public void testInvalidInput2() throws Exception {
+    boolean gotException = false;
+    try {        
+      new NGramTokenFilter(input, 0, 1);
+    } catch (IllegalArgumentException e) {
+      gotException = true;
     }
-
-    public void testNgrams() throws Exception {
-      NGramTokenFilter filter = new NGramTokenFilter(input, 1, 3);
-      assertTokenStreamContents(filter,
+    assertTrue(gotException);
+  }
+  
+  public void testUnigrams() throws Exception {
+    NGramTokenFilter filter = new NGramTokenFilter(input, 1, 1);
+    assertTokenStreamContents(filter, new String[]{"a","b","c","d","e"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5});
+  }
+  
+  public void testBigrams() throws Exception {
+    NGramTokenFilter filter = new NGramTokenFilter(input, 2, 2);
+    assertTokenStreamContents(filter, new String[]{"ab","bc","cd","de"}, new int[]{0,1,2,3}, new int[]{2,3,4,5});
+  }
+  
+  public void testNgrams() throws Exception {
+    NGramTokenFilter filter = new NGramTokenFilter(input, 1, 3);
+    assertTokenStreamContents(filter,
         new String[]{"a","b","c","d","e", "ab","bc","cd","de", "abc","bcd","cde"}, 
         new int[]{0,1,2,3,4, 0,1,2,3, 0,1,2},
         new int[]{1,2,3,4,5, 2,3,4,5, 3,4,5}
-      );
-    }
-
-    public void testOversizedNgrams() throws Exception {
-      NGramTokenFilter filter = new NGramTokenFilter(input, 6, 7);
-      assertTokenStreamContents(filter, new String[0], new int[0], new int[0]);
-    }
-    
-    public void testSmallTokenInStream() throws Exception {
-      input = new MockTokenizer(new StringReader("abc de fgh"), MockTokenizer.WHITESPACE, false);
-      NGramTokenFilter filter = new NGramTokenFilter(input, 3, 3);
-      assertTokenStreamContents(filter, new String[]{"abc","fgh"}, new int[]{0,7}, new int[]{3,10});
-    }
-    
-    public void testReset() throws Exception {
-      WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader("abcde"));
-      NGramTokenFilter filter = new NGramTokenFilter(tokenizer, 1, 1);
-      assertTokenStreamContents(filter, new String[]{"a","b","c","d","e"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5});
-      tokenizer.reset(new StringReader("abcde"));
-      assertTokenStreamContents(filter, new String[]{"a","b","c","d","e"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5});
-    }
-    
-    // LUCENE-3642
-    // EdgeNgram blindly adds term length to offset, but this can take things out of bounds
-    // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)
-    // so in this case we behave like WDF, and preserve any modified offsets
-    public void testInvalidOffsets() throws Exception {
-      Analyzer analyzer = new Analyzer() {
-        @Override
-        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
-          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
-          TokenFilter filters = new ASCIIFoldingFilter(tokenizer);
-          filters = new NGramTokenFilter(filters, 2, 2);
-          return new TokenStreamComponents(tokenizer, filters);
-        }
-      };
-      assertAnalyzesTo(analyzer, "mosfellsbær",
-          new String[] { "mo", "os", "sf", "fe", "el", "ll", "ls", "sb", "ba", "ae", "er" },
-          new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
-          new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 });
-    }
+        );
+  }
+  
+  public void testOversizedNgrams() throws Exception {
+    NGramTokenFilter filter = new NGramTokenFilter(input, 6, 7);
+    assertTokenStreamContents(filter, new String[0], new int[0], new int[0]);
+  }
+  
+  public void testSmallTokenInStream() throws Exception {
+    input = new MockTokenizer(new StringReader("abc de fgh"), MockTokenizer.WHITESPACE, false);
+    NGramTokenFilter filter = new NGramTokenFilter(input, 3, 3);
+    assertTokenStreamContents(filter, new String[]{"abc","fgh"}, new int[]{0,7}, new int[]{3,10});
+  }
+  
+  public void testReset() throws Exception {
+    WhitespaceTokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader("abcde"));
+    NGramTokenFilter filter = new NGramTokenFilter(tokenizer, 1, 1);
+    assertTokenStreamContents(filter, new String[]{"a","b","c","d","e"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5});
+    tokenizer.reset(new StringReader("abcde"));
+    assertTokenStreamContents(filter, new String[]{"a","b","c","d","e"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5});
+  }
+  
+  // LUCENE-3642
+  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds
+  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)
+  // so in this case we behave like WDF, and preserve any modified offsets
+  public void testInvalidOffsets() throws Exception {
+    Analyzer analyzer = new Analyzer() {
+      @Override
+      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
+        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
+        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);
+        filters = new NGramTokenFilter(filters, 2, 2);
+        return new TokenStreamComponents(tokenizer, filters);
+      }
+    };
+    assertAnalyzesTo(analyzer, "mosfellsbær",
+        new String[] { "mo", "os", "sf", "fe", "el", "ll", "ls", "sb", "ba", "ae", "er" },
+        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
+        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 });
+  }
+  
+  /** blast some random strings through the analyzer */
+  public void testRandomStrings() throws Exception {
+    Analyzer a = new Analyzer() {
+      @Override
+      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
+        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
+        return new TokenStreamComponents(tokenizer, 
+            new NGramTokenFilter(tokenizer, 2, 15));
+      }    
+    };
+    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);
+  }
 }
diff --git a/modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest.java b/modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest.java
index 08289f8..49e00a8 100644
--- a/modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest.java
+++ b/modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest.java
@@ -18,71 +18,86 @@ package org.apache.lucene.analysis.ngram;
  */
 
 
+import java.io.Reader;
 import java.io.StringReader;
 
+import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
+import org.apache.lucene.analysis.Tokenizer;
 
 /**
  * Tests {@link NGramTokenizer} for correctness.
  */
 public class NGramTokenizerTest extends BaseTokenStreamTestCase {
-    private StringReader input;
-    
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        input = new StringReader("abcde");
+  private StringReader input;
+  
+  @Override
+  public void setUp() throws Exception {
+    super.setUp();
+    input = new StringReader("abcde");
+  }
+  
+  public void testInvalidInput() throws Exception {
+    boolean gotException = false;
+    try {        
+      new NGramTokenizer(input, 2, 1);
+    } catch (IllegalArgumentException e) {
+      gotException = true;
     }
-
-    public void testInvalidInput() throws Exception {
-        boolean gotException = false;
-        try {        
-            new NGramTokenizer(input, 2, 1);
-        } catch (IllegalArgumentException e) {
-            gotException = true;
-        }
-        assertTrue(gotException);
-    }
-
-    public void testInvalidInput2() throws Exception {
-        boolean gotException = false;
-        try {        
-            new NGramTokenizer(input, 0, 1);
-        } catch (IllegalArgumentException e) {
-            gotException = true;
-        }
-        assertTrue(gotException);
-    }
-
-    public void testUnigrams() throws Exception {
-        NGramTokenizer tokenizer = new NGramTokenizer(input, 1, 1);
-        assertTokenStreamContents(tokenizer, new String[]{"a","b","c","d","e"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5}, 5 /* abcde */);
-    }
-
-    public void testBigrams() throws Exception {
-        NGramTokenizer tokenizer = new NGramTokenizer(input, 2, 2);
-        assertTokenStreamContents(tokenizer, new String[]{"ab","bc","cd","de"}, new int[]{0,1,2,3}, new int[]{2,3,4,5}, 5 /* abcde */);
+    assertTrue(gotException);
+  }
+  
+  public void testInvalidInput2() throws Exception {
+    boolean gotException = false;
+    try {        
+      new NGramTokenizer(input, 0, 1);
+    } catch (IllegalArgumentException e) {
+      gotException = true;
     }
-
-    public void testNgrams() throws Exception {
-        NGramTokenizer tokenizer = new NGramTokenizer(input, 1, 3);
-        assertTokenStreamContents(tokenizer,
-          new String[]{"a","b","c","d","e", "ab","bc","cd","de", "abc","bcd","cde"}, 
-          new int[]{0,1,2,3,4, 0,1,2,3, 0,1,2},
-          new int[]{1,2,3,4,5, 2,3,4,5, 3,4,5},
-          5 /* abcde */
+    assertTrue(gotException);
+  }
+  
+  public void testUnigrams() throws Exception {
+    NGramTokenizer tokenizer = new NGramTokenizer(input, 1, 1);
+    assertTokenStreamContents(tokenizer, new String[]{"a","b","c","d","e"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5}, 5 /* abcde */);
+  }
+  
+  public void testBigrams() throws Exception {
+    NGramTokenizer tokenizer = new NGramTokenizer(input, 2, 2);
+    assertTokenStreamContents(tokenizer, new String[]{"ab","bc","cd","de"}, new int[]{0,1,2,3}, new int[]{2,3,4,5}, 5 /* abcde */);
+  }
+  
+  public void testNgrams() throws Exception {
+    NGramTokenizer tokenizer = new NGramTokenizer(input, 1, 3);
+    assertTokenStreamContents(tokenizer,
+        new String[]{"a","b","c","d","e", "ab","bc","cd","de", "abc","bcd","cde"}, 
+        new int[]{0,1,2,3,4, 0,1,2,3, 0,1,2},
+        new int[]{1,2,3,4,5, 2,3,4,5, 3,4,5},
+        5 /* abcde */
         );
-    }
-
-    public void testOversizedNgrams() throws Exception {
-        NGramTokenizer tokenizer = new NGramTokenizer(input, 6, 7);
-        assertTokenStreamContents(tokenizer, new String[0], new int[0], new int[0], 5 /* abcde */);
-    }
-    
-    public void testReset() throws Exception {
-      NGramTokenizer tokenizer = new NGramTokenizer(input, 1, 1);
-      assertTokenStreamContents(tokenizer, new String[]{"a","b","c","d","e"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5}, 5 /* abcde */);
-      tokenizer.reset(new StringReader("abcde"));
-      assertTokenStreamContents(tokenizer, new String[]{"a","b","c","d","e"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5}, 5 /* abcde */);
-    }
+  }
+  
+  public void testOversizedNgrams() throws Exception {
+    NGramTokenizer tokenizer = new NGramTokenizer(input, 6, 7);
+    assertTokenStreamContents(tokenizer, new String[0], new int[0], new int[0], 5 /* abcde */);
+  }
+  
+  public void testReset() throws Exception {
+    NGramTokenizer tokenizer = new NGramTokenizer(input, 1, 1);
+    assertTokenStreamContents(tokenizer, new String[]{"a","b","c","d","e"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5}, 5 /* abcde */);
+    tokenizer.reset(new StringReader("abcde"));
+    assertTokenStreamContents(tokenizer, new String[]{"a","b","c","d","e"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5}, 5 /* abcde */);
+  }
+  
+  /** blast some random strings through the analyzer */
+  public void testRandomStrings() throws Exception {
+    Analyzer a = new Analyzer() {
+      @Override
+      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
+        Tokenizer tokenizer = new NGramTokenizer(reader, 2, 15);
+        return new TokenStreamComponents(tokenizer, tokenizer);
+      }    
+    };
+    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);
+  }
 }

