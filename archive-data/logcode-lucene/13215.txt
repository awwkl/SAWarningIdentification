GitDiffStart: 4f37e0f34145c5becdced2ee6a5fdb6521e1e5ba | Fri Mar 16 12:37:58 2012 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index c66ae95..3b212d3 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -943,6 +943,10 @@ Bug fixes
   integer overflow. This can happen, for example when using a buggy
   TokenStream that forgets to call clearAttributes() in combination
   with a StopFilter. (Robert Muir)
+
+* LUCENE-3876: Fix bug where positions for a document exceeding
+  Integer.MAX_VALUE/2 would produce a corrupt index.  
+  (Simon Willnauer, Mike Mccandless, Robert Muir)
     
 Optimizations
 
diff --git a/lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java b/lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java
index ba75c9d..25aa837 100644
--- a/lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java
+++ b/lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java
@@ -486,7 +486,7 @@ final class FreqProxTermsWriterPerField extends TermsHashConsumerPerField implem
 
             if (readPositions) {
               final int code = prox.readVInt();
-              position += code >> 1;
+              position += code >>> 1;
 
               if ((code & 1) != 0) {
 
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java b/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
index a4503dc..6c4fa4c 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
@@ -1517,4 +1517,20 @@ public class TestIndexWriterExceptions extends LuceneTestCase {
     iw.close();
     dir.close();
   }
+  
+  public void testLegalbutVeryLargePositions() throws Exception {
+    Directory dir = newDirectory();
+    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));
+    Document doc = new Document();
+    Token t1 = new Token("foo", 0, 3);
+    t1.setPositionIncrement(Integer.MAX_VALUE-500);
+    TokenStream overflowingTokenStream = new CannedTokenStream(
+        new Token[] { t1 }
+    );
+    Field field = new TextField("foo", overflowingTokenStream);
+    doc.add(field);
+    iw.addDocument(doc);
+    iw.close();
+    dir.close();
+  }
 }

