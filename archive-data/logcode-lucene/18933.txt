GitDiffStart: 2e37f69d3f62eee886e9afc1143ad2c2efeea08b | Sat Oct 31 01:37:34 2009 +0000
diff --git a/site/features.html b/site/features.html
index 8b41fd2..879d8df 100755
--- a/site/features.html
+++ b/site/features.html
@@ -224,7 +224,7 @@ document.write("Last Published: " + document.lastModified);
     
 <li> Optimized for High Volume Web Traffic </li>
     
-<li> Standards Based Open Interfaces - XML and HTTP </li>
+<li> Standards Based Open Interfaces - XML,JSON and HTTP </li>
     
 <li> Comprehensive HTML Administration Interfaces </li>
     
@@ -249,7 +249,7 @@ document.write("Last Published: " + document.lastModified);
     
 <li> Powerful Extensions to the Lucene Query Language </li>
     
-<li> Support for Dynamic Faceted Browsing and Filtering </li>
+<li> Faceted Search and Filtering </li>
     
 <li> Advanced, Configurable Text Analysis </li>
     
@@ -263,24 +263,26 @@ document.write("Last Published: " + document.lastModified);
     
 <li> Monitorable Logging </li>
     
-<li> Fast Incremental Updates and Snapshot Distribution </li>
+<li> Fast Incremental Updates and Index Replication </li>
     
-<li> Distributed search with sharded index on multiple hosts </li>
+<li> Highly Scalable Distributed search with sharded index across multiple hosts </li>
     
-<li> XML and CSV/delimited-text update formats </li>
+<li> XML, CSV/delimited-text, and binary update formats </li>
     
 <li> Easy ways to pull in data from databases and XML files from local disk and HTTP sources </li>
     
+<li> Rich Document Parsing and Indexing (PDF, Word, HTML, etc) using Apache Tika </li>
+    
 <li> Multiple search indices </li>
   
 </ul>
 </div>
 
 
-<a name="N10066"></a><a name="Detailed+Features"></a>
+<a name="N10069"></a><a name="Detailed+Features"></a>
 <h2 class="boxed">Detailed Features</h2>
 <div class="section">
-<a name="N1006C"></a><a name="Schema"></a>
+<a name="N1006F"></a><a name="Schema"></a>
 <h3 class="boxed">Schema</h3>
 <ul>
       
@@ -301,11 +303,11 @@ document.write("Last Published: " + document.lastModified);
 <li>Many additional text analysis components including word splitting, regex and sounds-like filters</li>
     
 </ul>
-<a name="N1008D"></a><a name="Query"></a>
+<a name="N10090"></a><a name="Query"></a>
 <h3 class="boxed">Query</h3>
 <ul>
       
-<li>HTTP interface with configurable response formats (XML/XSLT, JSON, Python, Ruby)</li>
+<li>HTTP interface with configurable response formats (XML/XSLT, JSON, Python, Ruby, PHP, Velocity, binary)</li>
       
 <li>Sort by any number of fields</li>
       
@@ -313,49 +315,66 @@ document.write("Last Published: " + document.lastModified);
       
 <li>Highlighted context snippets</li>
       
-<li>Faceted Searching based on unique field values and explicit queries</li>
+<li>Faceted Searching based on unique field values, explicit queries, or date ranges</li>
+      
+<li>Multi-Select Faceting by tagging and selectively excluding filters</li>
       
 <li>Spelling suggestions for user queries</li>
       
 <li>More Like This suggestions for given document</li>
       
-<li>Constant scoring range and prefix queries - no idf, coord, or lengthNorm factors, and no restriction on the number of terms the query matches.</li>
+<li>Function Query - influence the score by user specified complex functions of
+	     numeric fields or query relevancy scores.</li>
       
-<li>Function Query - influence the score by a function of a field's numeric value or ordinal</li>
+<li>Range filter over Function Query results</li>
       
 <li>Date Math - specify dates relative to "NOW" in queries and updates</li>
       
+<li>Dynamic search results clustering using Carrot2</li>
+      
+<li>Numeric field statistics such as min, max, average, standard deviation </li>
+      
+<li>Combine queries derived from different syntaxes</li>
+      
+<li>Auto-suggest functionality</li>
+      
+<li>Allow configuration of top results for a query, overriding normal scoring and sorting</li>
+      
 <li>Performance Optimizations</li>
     
 </ul>
-<a name="N100B7"></a><a name="Core"></a>
+<a name="N100CC"></a><a name="Core"></a>
 <h3 class="boxed">Core</h3>
 <ul>
       
+<li>Dynamically create and delete document collections without restarting</li>
+      
 <li>Pluggable query handlers and extensible XML data format</li>
       
-<li>Document uniqueness enforcement based on unique key field</li>
+<li>Pluggable user functions for Function Query</li>
       
-<li>Batches updates and deletes for high performance</li>
+<li>Customizable component based request handler with distributed search support</li>
       
-<li>User configurable commands triggered on index changes</li>
+<li>Document uniqueness enforcement based on unique key field</li>
       
-<li>Searcher concurrency control</li>
+<li>Duplicate document detection, including fuzzy near duplicates</li>
       
-<li>Correct handling of numeric types for both sorting and range queries</li>
+<li>Custom index processing chains, allowing document manipulation before indexing</li>
+      
+<li>User configurable commands triggered on index changes</li>
       
 <li>Ability to control where docs with the sort field missing will be placed</li>
       
 <li>"Luke" request handler for corpus information</li>
     
 </ul>
-<a name="N100D8"></a><a name="Caching"></a>
+<a name="N100F3"></a><a name="Caching"></a>
 <h3 class="boxed">Caching</h3>
 <ul>
       
 <li>Configurable Query Result, Filter, and Document cache instances</li>
       
-<li>Pluggable Cache implementations</li>
+<li>Pluggable Cache implementations, including a lock free, high concurrency implementation</li>
       
 <li>Cache warming in background
         <ul>
@@ -371,7 +390,7 @@ document.write("Last Published: " + document.lastModified);
         <ul>
           
 <li>The most recently accessed items in the caches of the current
-            searcher are re-populated in the new searcher, enabing high cache hit
+            searcher are re-populated in the new searcher, enabling high cache hit
             rates across index/searcher changes.</li>
         
 </ul>
@@ -383,23 +402,31 @@ document.write("Last Published: " + document.lastModified);
 <li>User level caching with autowarming support</li>
     
 </ul>
-<a name="N100FD"></a><a name="Replication"></a>
+<a name="N10118"></a><a name="Replication"></a>
 <h3 class="boxed">Replication</h3>
 <ul>
       
-<li>Efficient distribution of index parts that have changed via rsync transport</li>
+<li>Efficient distribution of index parts that have changed</li>
       
 <li>Pull strategy allows for easy addition of searchers</li>
       
 <li>Configurable distribution interval allows tradeoff between timeliness and cache utilization</li>
+      
+<li>Replication and automatic reloading of configuration files</li>
     
 </ul>
-<a name="N1010F"></a><a name="Admin+Interface"></a>
+<a name="N1012D"></a><a name="Admin+Interface"></a>
 <h3 class="boxed">Admin Interface</h3>
 <ul>
       
 <li>Comprehensive statistics on cache utilization, updates, and queries</li>
       
+<li>Interactive schema browser that includes index statistics</li>
+      
+<li>Replication monitoring</li>
+      
+<li>Full logging control</li>
+      
 <li>Text analysis debugger, showing result of every stage in an analyzer</li>
       
 <li>Web Query Interface w/ debugging output
diff --git a/site/features.pdf b/site/features.pdf
index 52d8687..b547ee4 100755
--- a/site/features.pdf
+++ b/site/features.pdf
@@ -9,7 +9,7 @@ Table of contents
     3.1 Schema.......................................................................................................................... 2
     3.2 Query............................................................................................................................. 3
     3.3 Core............................................................................................................................... 3
-    3.4 Caching..........................................................................................................................3
+    3.4 Caching..........................................................................................................................4
     3.5 Replication.....................................................................................................................4
     3.6 Admin Interface.............................................................................................................4
 
@@ -24,7 +24,7 @@ receive XML results.
 
 ?? Advanced Full-Text Search Capabilities
 ?? Optimized for High Volume Web Traffic
-?? Standards Based Open Interfaces - XML and HTTP
+?? Standards Based Open Interfaces - XML,JSON and HTTP
 ?? Comprehensive HTML Administration Interfaces
 ?? Server statistics exposed over JMX for monitoring
 ?? Scalability - Efficient Replication to other Solr Search Servers
@@ -35,19 +35,20 @@ receive XML results.
 
 ?? A Real Data Schema, with Numeric Types, Dynamic Fields, Unique Keys
 ?? Powerful Extensions to the Lucene Query Language
-?? Support for Dynamic Faceted Browsing and Filtering
+?? Faceted Search and Filtering
 ?? Advanced, Configurable Text Analysis
 ?? Highly Configurable and User Extensible Caching
 ?? Performance Optimizations
 ?? External Configuration via XML
 ?? An Administration Interface
 ?? Monitorable Logging
-?? Fast Incremental Updates and Snapshot Distribution
-?? Distributed search with sharded index on multiple hosts
-?? XML and CSV/delimited-text update formats
+?? Fast Incremental Updates and Index Replication
+?? Highly Scalable Distributed search with sharded index across multiple hosts
+?? XML, CSV/delimited-text, and binary update formats
 ?? Easy ways to pull in data from databases and XML files from local disk and HTTP
 
     sources
+?? Rich Document Parsing and Indexing (PDF, Word, HTML, etc) using Apache Tika
 ?? Multiple search indices
 
 3. Detailed Features
@@ -56,13 +57,13 @@ receive XML results.
 
 ?? Defines the field types and fields of documents
 ?? Can drive more intelligent processing
-?? Declarative Lucene Analyzer specification
 
                                                                        Page 2
 
 Copyright © 2007 The Apache Software Foundation. All rights reserved.
 Introduction to The Solr Enterprise Search Server
 
+?? Declarative Lucene Analyzer specification
 ?? Dynamic Fields enables on-the-fly addition of new fields
 ?? CopyField functionality allows indexing a single field multiple ways, or combining
 
@@ -77,62 +78,82 @@ Copyright © 2007 The Apache Software Foundation. All rights reserved.
 
 3.2. Query
 
-?? HTTP interface with configurable response formats (XML/XSLT, JSON, Python, Ruby)
+?? HTTP interface with configurable response formats (XML/XSLT, JSON, Python, Ruby,
+    PHP, Velocity, binary)
+
 ?? Sort by any number of fields
 ?? Advanced DisMax query parser for high relevancy results from user-entered queries
 ?? Highlighted context snippets
-?? Faceted Searching based on unique field values and explicit queries
+?? Faceted Searching based on unique field values, explicit queries, or date ranges
+?? Multi-Select Faceting by tagging and selectively excluding filters
 ?? Spelling suggestions for user queries
 ?? More Like This suggestions for given document
-?? Constant scoring range and prefix queries - no idf, coord, or lengthNorm factors, and no
+?? Function Query - influence the score by user specified complex functions of numeric
 
-    restriction on the number of terms the query matches.
-?? Function Query - influence the score by a function of a field's numeric value or ordinal
+    fields or query relevancy scores.
+?? Range filter over Function Query results
 ?? Date Math - specify dates relative to "NOW" in queries and updates
+?? Dynamic search results clustering using Carrot2
+?? Numeric field statistics such as min, max, average, standard deviation
+?? Combine queries derived from different syntaxes
+?? Auto-suggest functionality
+?? Allow configuration of top results for a query, overriding normal scoring and sorting
 ?? Performance Optimizations
 
 3.3. Core
 
+?? Dynamically create and delete document collections without restarting
 ?? Pluggable query handlers and extensible XML data format
+?? Pluggable user functions for Function Query
+?? Customizable component based request handler with distributed search support
 ?? Document uniqueness enforcement based on unique key field
-?? Batches updates and deletes for high performance
+?? Duplicate document detection, including fuzzy near duplicates
+?? Custom index processing chains, allowing document manipulation before indexing
+
+Page 3
+
+        Copyright © 2007 The Apache Software Foundation. All rights reserved.
+Introduction to The Solr Enterprise Search Server
+
 ?? User configurable commands triggered on index changes
-?? Searcher concurrency control
-?? Correct handling of numeric types for both sorting and range queries
 ?? Ability to control where docs with the sort field missing will be placed
 ?? "Luke" request handler for corpus information
 
 3.4. Caching
 
 ?? Configurable Query Result, Filter, and Document cache instances
-?? Pluggable Cache implementations
+?? Pluggable Cache implementations, including a lock free, high concurrency
+
+    implementation
 ?? Cache warming in background
 
     ?? When a new searcher is opened, configurable searches are run against it in order to
-
-Page 3
-
-        Copyright © 2007 The Apache Software Foundation. All rights reserved.
-                                                                                               Introduction to The Solr Enterprise Search Server
-
          warm it up to avoid slow first hits. During warming, the current searcher handles live
          requests.
+
 ?? Autowarming in background
     ?? The most recently accessed items in the caches of the current searcher are
-         re-populated in the new searcher, enabing high cache hit rates across index/searcher
+         re-populated in the new searcher, enabling high cache hit rates across index/searcher
          changes.
+
 ?? Fast/small filter implementation
 ?? User level caching with autowarming support
 
 3.5. Replication
-?? Efficient distribution of index parts that have changed via rsync transport
+
+?? Efficient distribution of index parts that have changed
 ?? Pull strategy allows for easy addition of searchers
 ?? Configurable distribution interval allows tradeoff between timeliness and cache
 
     utilization
+?? Replication and automatic reloading of configuration files
 
 3.6. Admin Interface
+
 ?? Comprehensive statistics on cache utilization, updates, and queries
+?? Interactive schema browser that includes index statistics
+?? Replication monitoring
+?? Full logging control
 ?? Text analysis debugger, showing result of every stage in an analyzer
 ?? Web Query Interface w/ debugging output
 
@@ -145,4 +166,9 @@ Page 3
                                                                        Page 4
 
 Copyright © 2007 The Apache Software Foundation. All rights reserved.
+Introduction to The Solr Enterprise Search Server
+
+Page 5
+
+        Copyright © 2007 The Apache Software Foundation. All rights reserved.
 
\ No newline at end of file
diff --git a/src/site/src/documentation/content/xdocs/features.xml b/src/site/src/documentation/content/xdocs/features.xml
index 7b2f5a4..8509b93 100755
--- a/src/site/src/documentation/content/xdocs/features.xml
+++ b/src/site/src/documentation/content/xdocs/features.xml
@@ -33,7 +33,7 @@
   <ul>
     <li> Advanced Full-Text Search Capabilities </li>
     <li> Optimized for High Volume Web Traffic </li>
-    <li> Standards Based Open Interfaces - XML and HTTP </li>
+    <li> Standards Based Open Interfaces - XML,JSON and HTTP </li>
     <li> Comprehensive HTML Administration Interfaces </li>
     <li> Server statistics exposed over JMX for monitoring </li>
     <li> Scalability - Efficient Replication to other Solr Search Servers </li>
@@ -47,17 +47,18 @@
   <ul>
     <li> A Real Data Schema, with Numeric Types, Dynamic Fields, Unique Keys </li>
     <li> Powerful Extensions to the Lucene Query Language </li>
-    <li> Support for Dynamic Faceted Browsing and Filtering </li>
+    <li> Faceted Search and Filtering </li>
     <li> Advanced, Configurable Text Analysis </li>
     <li> Highly Configurable and User Extensible Caching </li>
     <li> Performance Optimizations </li>
     <li> External Configuration via XML </li>
     <li> An Administration Interface </li>
     <li> Monitorable Logging </li>
-    <li> Fast Incremental Updates and Snapshot Distribution </li>
-    <li> Distributed search with sharded index on multiple hosts </li>
-    <li> XML and CSV/delimited-text update formats </li>
+    <li> Fast Incremental Updates and Index Replication </li>
+    <li> Highly Scalable Distributed search with sharded index across multiple hosts </li>
+    <li> XML, CSV/delimited-text, and binary update formats </li>
     <li> Easy ways to pull in data from databases and XML files from local disk and HTTP sources </li>
+    <li> Rich Document Parsing and Indexing (PDF, Word, HTML, etc) using Apache Tika </li>
     <li> Multiple search indices </li>
   </ul>
 </section>
@@ -80,28 +81,37 @@
 
   <section><title>Query</title>
     <ul>
-      <li>HTTP interface with configurable response formats (XML/XSLT, JSON, Python, Ruby)</li>
+      <li>HTTP interface with configurable response formats (XML/XSLT, JSON, Python, Ruby, PHP, Velocity, binary)</li>
       <li>Sort by any number of fields</li>
       <li>Advanced DisMax query parser for high relevancy results from user-entered queries</li> 
       <li>Highlighted context snippets</li>
-      <li>Faceted Searching based on unique field values and explicit queries</li>
+      <li>Faceted Searching based on unique field values, explicit queries, or date ranges</li>
+      <li>Multi-Select Faceting by tagging and selectively excluding filters</li>
       <li>Spelling suggestions for user queries</li>
       <li>More Like This suggestions for given document</li>
-      <li>Constant scoring range and prefix queries - no idf, coord, or lengthNorm factors, and no restriction on the number of terms the query matches.</li>
-      <li>Function Query - influence the score by a function of a field's numeric value or ordinal</li>
+      <li>Function Query - influence the score by user specified complex functions of
+	     numeric fields or query relevancy scores.</li>
+      <li>Range filter over Function Query results</li>
       <li>Date Math - specify dates relative to "NOW" in queries and updates</li>
+      <li>Dynamic search results clustering using Carrot2</li>
+      <li>Numeric field statistics such as min, max, average, standard deviation </li>
+      <li>Combine queries derived from different syntaxes</li>
+      <li>Auto-suggest functionality</li>
+      <li>Allow configuration of top results for a query, overriding normal scoring and sorting</li>
       <li>Performance Optimizations</li>
     </ul>
   </section>
 
   <section><title>Core</title>
     <ul>
+      <li>Dynamically create and delete document collections without restarting</li>
       <li>Pluggable query handlers and extensible XML data format</li>
+      <li>Pluggable user functions for Function Query</li>
+      <li>Customizable component based request handler with distributed search support</li>
       <li>Document uniqueness enforcement based on unique key field</li>
-      <li>Batches updates and deletes for high performance</li>
+      <li>Duplicate document detection, including fuzzy near duplicates</li>
+      <li>Custom index processing chains, allowing document manipulation before indexing</li>
       <li>User configurable commands triggered on index changes</li>
-      <li>Searcher concurrency control</li>
-      <li>Correct handling of numeric types for both sorting and range queries</li>
       <li>Ability to control where docs with the sort field missing will be placed</li>
       <li>"Luke" request handler for corpus information</li>
     </ul>
@@ -110,7 +120,7 @@
   <section><title>Caching</title>
     <ul>
       <li>Configurable Query Result, Filter, and Document cache instances</li>
-      <li>Pluggable Cache implementations</li>
+      <li>Pluggable Cache implementations, including a lock free, high concurrency implementation</li>
       <li>Cache warming in background
         <ul><li> When a new searcher is opened, configurable searches are run against
             it in order to warm it up to avoid
@@ -120,7 +130,7 @@
       <li>Autowarming in background
         <ul>
           <li>The most recently accessed items in the caches of the current
-            searcher are re-populated in the new searcher, enabing high cache hit
+            searcher are re-populated in the new searcher, enabling high cache hit
             rates across index/searcher changes.</li>
         </ul>
       </li>
@@ -131,15 +141,19 @@
 
   <section><title>Replication</title>
     <ul>
-      <li>Efficient distribution of index parts that have changed via rsync transport</li>
+      <li>Efficient distribution of index parts that have changed</li>
       <li>Pull strategy allows for easy addition of searchers</li>
       <li>Configurable distribution interval allows tradeoff between timeliness and cache utilization</li>
+      <li>Replication and automatic reloading of configuration files</li>
     </ul>
   </section>
 
   <section><title>Admin Interface</title>
     <ul>
       <li>Comprehensive statistics on cache utilization, updates, and queries</li>
+      <li>Interactive schema browser that includes index statistics</li>
+      <li>Replication monitoring</li>
+      <li>Full logging control</li>
       <li>Text analysis debugger, showing result of every stage in an analyzer</li>
       <li>Web Query Interface w/ debugging output
         <ul>

