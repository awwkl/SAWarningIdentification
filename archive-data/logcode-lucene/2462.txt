GitDiffStart: f25c8907098135fd61a6f068229367a8476f0550 | Tue Nov 10 16:26:20 2015 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/util/StringHelper.java b/lucene/core/src/java/org/apache/lucene/util/StringHelper.java
index 45f6d67..2d4f3a8 100644
--- a/lucene/core/src/java/org/apache/lucene/util/StringHelper.java
+++ b/lucene/core/src/java/org/apache/lucene/util/StringHelper.java
@@ -382,8 +382,8 @@ public abstract class StringHelper {
   }
 
   /** Compares a fixed length slice of two byte arrays interpreted as
-   *  unsigned values.  Returns positive int if a &gt; b, negative
-   *  int if a &lt; b and 0 if a == b */
+   *  big-endian unsigned values.  Returns positive int if a &gt; b,
+   *  negative int if a &lt; b and 0 if a == b */
   public static int compare(int count, byte[] a, int aOffset, byte[] b, int bOffset) {
     for(int i=0;i<count;i++) {
       int cmp = (a[aOffset+i]&0xff) - (b[bOffset+i]&0xff);
diff --git a/lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.java b/lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.java
index 3a2a13a..2866abe 100644
--- a/lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.java
+++ b/lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.java
@@ -129,8 +129,6 @@ public class BKDReader implements Accountable {
     int count = in.readVInt();
     visitor.grow(count);
 
-    // TODO: especially for the 1D case, this was a decent speedup, because caller could know it should budget for around XXX docs:
-    //state.docs.grow(count);
     for(int i=0;i<count;i++) {
       visitor.visit(in.readInt());
     }
@@ -142,9 +140,6 @@ public class BKDReader implements Accountable {
     // How many points are stored in this leaf cell:
     int count = in.readVInt();
 
-    // TODO: we could maybe pollute the IntersectVisitor API with a "grow" method if this maybe helps perf
-    // enough (it did before, esp. for the 1D case):
-    //state.docs.grow(count);
     for(int i=0;i<count;i++) {
       docIDs[i] = in.readInt();
     }
diff --git a/lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.java b/lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.java
index eb94e90..970f920 100644
--- a/lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.java
@@ -474,6 +474,8 @@ public class BKDWriter implements Closeable {
 
     out.writeVInt(leafBlockFPs.length);
 
+    // TODO: for 1D case, don't waste the first byte of each split value (it's always 0)
+
     // NOTE: splitPackedValues[0] is unused, because nodeID is 1-based:
     out.writeBytes(splitPackedValues, 0, splitPackedValues.length);
 
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery.java b/lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery.java
index 435009f..10651bb 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery.java
@@ -50,7 +50,6 @@ import org.apache.lucene.index.Term;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.util.FixedBitSet;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
@@ -90,24 +89,11 @@ public class TestDimensionalRangeQuery extends LuceneTestCase {
     int numValues = atLeast(10000);
     long value = randomValue(false);
     long[] values = new long[numValues];
-    FixedBitSet missing = new FixedBitSet(numValues);
 
     if (VERBOSE) {
       System.out.println("TEST: use same value=" + value);
     }
-
-    for(int docID=0;docID<numValues;docID++) {
-      int x = random().nextInt(20);
-      if (x == 17) {
-        // Some docs don't have a point:
-        missing.set(docID);
-        if (VERBOSE) {
-          System.out.println("  doc=" + docID + " is missing");
-        }
-        continue;
-      }
-      values[docID] = value;
-    }
+    Arrays.fill(values, value);
 
     verifyLongs(values, null);
   }

