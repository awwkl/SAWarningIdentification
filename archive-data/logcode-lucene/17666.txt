GitDiffStart: 483266f22bcd3f9e0f3fdb1fa1da5cec78f58a24 | Sat Jul 24 11:55:26 2010 +0000
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/CodecProvider.java b/lucene/src/java/org/apache/lucene/index/codecs/CodecProvider.java
index 01a7b09..3af2112 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/CodecProvider.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/CodecProvider.java
@@ -71,7 +71,7 @@ public abstract class CodecProvider {
     if (codecs.containsKey(codec.name)) {
       Codec c = codecs.get(codec.name);
       if (codec.getClass().isAssignableFrom(c.getClass()))
-          codecs.remove(codec.name);
+        codecs.remove(codec.name);
       else
         throw new IllegalArgumentException("codec '" + codec.name + "' is being impersonated by a different codec instance!!!");
     }
diff --git a/lucene/src/test/org/apache/lucene/index/RandomIndexWriter.java b/lucene/src/test/org/apache/lucene/index/RandomIndexWriter.java
index d789d0c..9c9fe81 100644
--- a/lucene/src/test/org/apache/lucene/index/RandomIndexWriter.java
+++ b/lucene/src/test/org/apache/lucene/index/RandomIndexWriter.java
@@ -24,7 +24,7 @@ import java.util.Random;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
-import org.apache.lucene.index.codecs.preflex.PreFlexCodec;
+import org.apache.lucene.index.codecs.CodecProvider;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCaseJ4;
 import org.apache.lucene.util.Version;
@@ -81,6 +81,10 @@ public class RandomIndexWriter implements Closeable {
     this.r = r;
     w = new MockIndexWriter(r, dir, c);
     flushAt = _TestUtil.nextInt(r, 10, 1000);
+    if (LuceneTestCaseJ4.VERBOSE) {
+      System.out.println("RIW config=" + w.getConfig());
+      System.out.println("codec default=" + CodecProvider.getDefaultCodec());
+    }
   } 
 
   public void addDocument(Document doc) throws IOException {
@@ -99,24 +103,27 @@ public class RandomIndexWriter implements Closeable {
     w.deleteDocuments(term);
   }
   
+  public void commit() throws CorruptIndexException, IOException {
+    w.commit();
+  }
+  
   public int maxDoc() {
     return w.maxDoc();
   }
 
   public IndexReader getReader() throws IOException {
-    // nocommit: hack!
-    if (w.codecs.getWriter(null).name.equals("PreFlex")) {
-      w.commit();
-      return IndexReader.open(w.getDirectory(),
-          null,
-          false,
-          _TestUtil.nextInt(r, 1, 10),
-          _TestUtil.alwaysCodec(new PreFlexCodec()));
-    }
-    
-    if (r.nextBoolean()) {
+    // If we are writing with PreFlexRW, force a full
+    // IndexReader.open so terms are sorted in codepoint
+    // order during searching:
+    if (!w.codecs.getWriter(null).name.equals("PreFlex") && r.nextBoolean()) {
+      if (LuceneTestCaseJ4.VERBOSE) {
+        System.out.println("RIW.getReader: use NRT reader");
+      }
       return w.getReader();
     } else {
+      if (LuceneTestCaseJ4.VERBOSE) {
+        System.out.println("RIW.getReader: open new reader");
+      }
       w.commit();
       return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));
     }
diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java b/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
index 9fede44..23d985a 100644
--- a/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ b/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -4670,18 +4670,16 @@ public class TestIndexWriter extends LuceneTestCase {
   }
 
   // Make sure terms, including ones with surrogate pairs,
-  // sort in UTF16 sort order by default
+  // sort in codepoint sort order by default
   public void testTermUTF16SortOrder() throws Throwable {
+    Random rnd = newRandom();
     Directory dir = new MockRAMDirectory();
-    // nocommit -- allow preflexrw but must force preflex
-    // for reading
-    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec("Standard")));
+    RandomIndexWriter writer = new RandomIndexWriter(rnd, dir);
     Document d = new Document();
     // Single segment
     Field f = new Field("f", "", Field.Store.NO, Field.Index.NOT_ANALYZED);
     d.add(f);
     char[] chars = new char[2];
-    Random rnd = newRandom();
     final Set<String> allTerms = new HashSet<String>();
 
     for(int i=0;i<10*_TestUtil.getRandomMultiplier();i++) {
diff --git a/lucene/src/test/org/apache/lucene/index/TestMultiFields.java b/lucene/src/test/org/apache/lucene/index/TestMultiFields.java
index e3fd00b..4b0bc2b 100644
--- a/lucene/src/test/org/apache/lucene/index/TestMultiFields.java
+++ b/lucene/src/test/org/apache/lucene/index/TestMultiFields.java
@@ -86,7 +86,6 @@ public class TestMultiFields extends LuceneTestCase {
         }
       }
 
-      // nocommit
       IndexReader reader = w.getReader();
       w.close();
       //System.out.println("TEST reader=" + reader);
diff --git a/lucene/src/test/org/apache/lucene/index/TestStressIndexing2.java b/lucene/src/test/org/apache/lucene/index/TestStressIndexing2.java
index d42e792..da92b5f 100644
--- a/lucene/src/test/org/apache/lucene/index/TestStressIndexing2.java
+++ b/lucene/src/test/org/apache/lucene/index/TestStressIndexing2.java
@@ -25,6 +25,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import org.apache.lucene.util.*;
+import org.apache.lucene.index.codecs.preflexrw.PreFlexRWCodec;
 
 import junit.framework.Assert;
 
@@ -68,10 +69,10 @@ public class TestStressIndexing2 extends MultiCodecTestCase {
     
     // TODO: verify equals using IW.getReader
     DocsAndWriter dw = indexRandomIWReader(5, 3, 100, dir);
-    IndexReader r = dw.writer.getReader();
+    IndexReader reader = dw.writer.getReader();
     dw.writer.commit();
-    verifyEquals(r, dir, "id");
-    r.close();
+    verifyEquals(r, reader, dir, "id");
+    reader.close();
     dw.writer.close();
     dir.close();
   }
@@ -261,8 +262,11 @@ public class TestStressIndexing2 extends MultiCodecTestCase {
     w.close();
   }
   
-  public static void verifyEquals(IndexReader r1, Directory dir2, String idField) throws Throwable {
-    IndexReader r2 = IndexReader.open(dir2, true);
+  public static void verifyEquals(Random r, IndexReader r1, Directory dir2, String idField) throws Throwable {
+    // When we're testing w/ PreFlex codec, we must open
+    // this reader with UTF16 terms since incoming NRT
+    // reader is sorted this way:
+    IndexReader r2 = IndexReader.open(dir2, null, true, _TestUtil.nextInt(r, 1, 3), _TestUtil.alwaysCodec(new PreFlexRWCodec("utf16")));
     verifyEquals(r1, r2, idField);
     r2.close();
   }
diff --git a/lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates.java b/lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates.java
index ff4000b..5ab7deb 100644
--- a/lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates.java
+++ b/lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates.java
@@ -272,7 +272,7 @@ public class TestSurrogates extends LuceneTestCaseJ4 {
     RandomIndexWriter w = new RandomIndexWriter(r,
                                                 dir,
                                                 newIndexWriterConfig(r, TEST_VERSION_CURRENT,
-                                                                      new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(new PreFlexRWCodec())));
+                                                                      new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(new PreFlexRWCodec(null))));
 
     final int numField = _TestUtil.nextInt(r, 2, 5);
 
@@ -284,8 +284,6 @@ public class TestSurrogates extends LuceneTestCaseJ4 {
 
     for(int f=0;f<numField;f++) {
       String field = "f" + f;
-      Term protoTerm = new Term(field);
-
       final int numTerms = 10000*_TestUtil.getRandomMultiplier();
 
       final Set<String> uniqueTerms = new HashSet<String>();
diff --git a/lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec.java b/lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec.java
index becad2e..242e503 100644
--- a/lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec.java
+++ b/lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec.java
@@ -33,20 +33,46 @@ import org.apache.lucene.index.codecs.FieldsProducer;
  */
 public class PreFlexRWCodec extends PreFlexCodec {
 
-  public PreFlexRWCodec() {
-    // NOTE: we use same name as core PreFlex codec so that
-    // it can read the segments we write!
+  private final String termSortOrder;
+
+  // termSortOrder should be null (dynamically deteremined
+  // by stack), "codepoint" or "utf16" 
+  public PreFlexRWCodec(String termSortOrder) {
+    // NOTE: we impersonate the PreFlex codec so that it can
+    // read the segments we write!
     super();
+    this.termSortOrder = termSortOrder;
   }
   
   @Override
   public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {
+    System.out.println("PFW");
     return new PreFlexFieldsWriter(state);
   }
 
   @Override
   public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {
-    //System.out.println("preflexrw");
-    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor, false);
+
+    // Whenever IW opens readers, eg for merging, we have to
+    // keep terms order in UTF16:
+
+    boolean unicodeSortOrder;
+    if (termSortOrder == null) {
+      unicodeSortOrder = true;
+
+      StackTraceElement[] trace = new Exception().getStackTrace();
+      for (int i = 0; i < trace.length; i++) {
+        //System.out.println(trace[i].getClassName());
+        if ("org.apache.lucene.index.IndexWriter".equals(trace[i].getClassName())) {
+          unicodeSortOrder = false;
+          break;
+        }
+      }
+      //System.out.println("PRW: " + unicodeSortOrder);
+    } else {
+      unicodeSortOrder = termSortOrder.equals("codepoint");
+    }
+
+    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor, unicodeSortOrder);
   }
 }
diff --git a/lucene/src/test/org/apache/lucene/search/TestFilteredQuery.java b/lucene/src/test/org/apache/lucene/search/TestFilteredQuery.java
index 3d9159e..ec9cc98 100644
--- a/lucene/src/test/org/apache/lucene/search/TestFilteredQuery.java
+++ b/lucene/src/test/org/apache/lucene/search/TestFilteredQuery.java
@@ -48,6 +48,7 @@ public class TestFilteredQuery extends LuceneTestCase {
   protected void setUp() throws Exception {
     super.setUp();
     directory = new RAMDirectory();
+    // nocommit seed
     RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory);
 
     Document doc = new Document();
@@ -70,6 +71,11 @@ public class TestFilteredQuery extends LuceneTestCase {
     doc.add (new Field("sorter", "c", Field.Store.YES, Field.Index.ANALYZED));
     writer.addDocument (doc);
 
+    // tests here require single segment (eg try seed
+    // 8239472272678419952L), because SingleDocTestFilter(x)
+    // blindly accepts that docID in any sub-segment
+    writer.optimize();
+
     reader = writer.getReader();
     writer.close ();
 
diff --git a/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java b/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java
index 53c8eed..eefad03 100644
--- a/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java
@@ -32,9 +32,6 @@ import junit.framework.TestCase;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.index.ConcurrentMergeScheduler;
 import org.apache.lucene.index.IndexWriterConfig;
-import org.apache.lucene.index.LogDocMergePolicy;
-import org.apache.lucene.index.LogMergePolicy;
-import org.apache.lucene.index.SerialMergeScheduler;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.search.FieldCache.CacheEntry;
@@ -122,12 +119,16 @@ public abstract class LuceneTestCase extends TestCase {
     ConcurrentMergeScheduler.setTestMode();
     savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();
     savedDefaultCodec = CodecProvider.getDefaultCodec();
+
     codec = _TestUtil.getTestCodec();
     if (codec.equals("random"))
       codec = CodecProvider.CORE_CODECS[seedRnd.nextInt(CodecProvider.CORE_CODECS.length)];
-    //nocommit
+
+    // If we're running w/ PreFlex codec we must swap in the
+    // test-only PreFlexRW codec (since core PreFlex can
+    // only read segments):
     if (codec.equals("PreFlex")) {
-        CodecProvider.getDefault().register(new PreFlexRWCodec());
+      CodecProvider.getDefault().register(new PreFlexRWCodec(null));
     } 
     CodecProvider.setDefaultCodec(codec);
   }
@@ -155,10 +156,10 @@ public abstract class LuceneTestCase extends TestCase {
     assertTrue("ensure your setUp() calls super.setUp()!!!", setup);
     setup = false;
     BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);
-    // nocommit
+    // Restore read-only PreFlex codec:
     if (codec.equals("PreFlex")) {
-        CodecProvider.getDefault().unregister(new PreFlexRWCodec());
-        CodecProvider.getDefault().register(new PreFlexCodec());
+      CodecProvider.getDefault().unregister(new PreFlexRWCodec(null));
+      CodecProvider.getDefault().register(new PreFlexCodec());
     } 
     CodecProvider.setDefaultCodec(savedDefaultCodec);
     
diff --git a/lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4.java b/lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4.java
index 5d5d563..bcfb3a2 100644
--- a/lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4.java
+++ b/lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4.java
@@ -45,7 +45,6 @@ import java.io.File;
 import java.io.PrintStream;
 import java.io.IOException;
 import java.util.Arrays;
-import java.util.Hashtable;
 import java.util.Iterator;
 import java.util.Random;
 import java.util.ArrayList;
@@ -148,19 +147,22 @@ public class LuceneTestCaseJ4 {
     codec = _TestUtil.getTestCodec();
     if (codec.equals("random"))
       codec = CodecProvider.CORE_CODECS[seedRnd.nextInt(CodecProvider.CORE_CODECS.length)];
-    //nocommit
+
+    // If we're running w/ PreFlex codec we must swap in the
+    // test-only PreFlexRW codec (since core PreFlex can
+    // only read segments):
     if (codec.equals("PreFlex")) {
-        CodecProvider.getDefault().register(new PreFlexRWCodec());
+      CodecProvider.getDefault().register(new PreFlexRWCodec(null));
     } 
     CodecProvider.setDefaultCodec(codec);
   }
   
   @AfterClass
   public static void afterClassLuceneTestCaseJ4() {
-    //nocommit
+    // Restore read-only PreFlex codec:
     if (codec.equals("PreFlex")) {
-        CodecProvider.getDefault().unregister(new PreFlexRWCodec());
-        CodecProvider.getDefault().register(new PreFlexCodec());
+      CodecProvider.getDefault().unregister(new PreFlexRWCodec(null));
+      CodecProvider.getDefault().register(new PreFlexCodec());
     }
     CodecProvider.setDefaultCodec(savedDefaultCodec);
   }
diff --git a/lucene/src/test/org/apache/lucene/util/_TestUtil.java b/lucene/src/test/org/apache/lucene/util/_TestUtil.java
index 5481457..3e6be0a 100644
--- a/lucene/src/test/org/apache/lucene/util/_TestUtil.java
+++ b/lucene/src/test/org/apache/lucene/util/_TestUtil.java
@@ -240,6 +240,7 @@ public class _TestUtil {
 
   /** gets the codec to run tests with */
   public static String getTestCodec() {
+    // nocommit: should we default to random?
     return System.getProperty("tests.codec", "Standard");
   }
 
@@ -254,8 +255,11 @@ public class _TestUtil {
       public Codec lookup(String name) {
         // can't do this until we fix PreFlexRW to not
         //impersonate PreFlex:
-        //return CodecProvider.getDefault().lookup(name);
-        return c;
+        if (name.equals(c.name)) {
+          return c;
+        } else {
+          return CodecProvider.getDefault().lookup(name);
+        }
       }
     };
   }

