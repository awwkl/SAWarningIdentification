GitDiffStart: 892131b0d110a99c1d38ae009f8918addba571dc | Tue Jul 29 12:06:46 2014 +0000
diff --git a/lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.java b/lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.java
index 7be85a8..0db261d 100644
--- a/lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.java
+++ b/lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.java
@@ -644,13 +644,6 @@ class FieldCacheImpl implements FieldCache {
 
       int startTermsBPV;
 
-      final int termCountHardLimit;
-      if (maxDoc == Integer.MAX_VALUE) {
-        termCountHardLimit = Integer.MAX_VALUE;
-      } else {
-        termCountHardLimit = maxDoc+1;
-      }
-
       // TODO: use Uninvert?
       if (terms != null) {
         // Try for coarse estimate for number of bits; this
@@ -658,11 +651,8 @@ class FieldCacheImpl implements FieldCache {
         // is fine -- GrowableWriter will reallocate as needed
         long numUniqueTerms = terms.size();
         if (numUniqueTerms != -1L) {
-          if (numUniqueTerms > termCountHardLimit) {
-            // app is misusing the API (there is more than
-            // one term per doc); in this case we make best
-            // effort to load what we can (see LUCENE-2142)
-            numUniqueTerms = termCountHardLimit;
+          if (numUniqueTerms > maxDoc) {
+            throw new IllegalStateException("Type mismatch: " + key.field + " was indexed with multiple values per document, use SORTED_SET instead");
           }
 
           startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);
@@ -689,8 +679,8 @@ class FieldCacheImpl implements FieldCache {
           if (term == null) {
             break;
           }
-          if (termOrd >= termCountHardLimit) {
-            break;
+          if (termOrd >= maxDoc) {
+            throw new IllegalStateException("Type mismatch: " + key.field + " was indexed with multiple values per document, use SORTED_SET instead");
           }
 
           termOrdToBytesOffset.add(bytes.copyUsingLengthPrefix(term));
diff --git a/lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader.java b/lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader.java
index de3eeb6..49a367f 100644
--- a/lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader.java
+++ b/lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader.java
@@ -227,15 +227,13 @@ public class UninvertingReader extends FilterAtomicReader {
 
   @Override
   public NumericDocValues getNumericDocValues(String field) throws IOException {
-    Type v = mapping.get(field);
+    Type v = getType(field);
     if (v != null) {
       switch (v) {
         case INTEGER: return FieldCache.DEFAULT.getNumerics(in, field, FieldCache.NUMERIC_UTILS_INT_PARSER, true);
         case FLOAT: return FieldCache.DEFAULT.getNumerics(in, field, FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);
         case LONG: return FieldCache.DEFAULT.getNumerics(in, field, FieldCache.NUMERIC_UTILS_LONG_PARSER, true);
         case DOUBLE: return FieldCache.DEFAULT.getNumerics(in, field, FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);
-        default:
-          throw new IllegalStateException("Type mismatch: " + field + " was indexed as " + v);
       }
     }
     return super.getNumericDocValues(field);
@@ -243,11 +241,9 @@ public class UninvertingReader extends FilterAtomicReader {
 
   @Override
   public BinaryDocValues getBinaryDocValues(String field) throws IOException {
-    Type v = mapping.get(field);
+    Type v = getType(field);
     if (v == Type.BINARY) {
       return FieldCache.DEFAULT.getTerms(in, field, true);
-    } else if (v != null && v != Type.SORTED) {
-      throw new IllegalStateException("Type mismatch: " + field + " was indexed as " + v);
     } else {
       return in.getBinaryDocValues(field);
     }
@@ -255,11 +251,9 @@ public class UninvertingReader extends FilterAtomicReader {
 
   @Override
   public SortedDocValues getSortedDocValues(String field) throws IOException {
-    Type v = mapping.get(field);
+    Type v = getType(field);
     if (v == Type.SORTED) {
       return FieldCache.DEFAULT.getTermsIndex(in, field);
-    } else if (v != null) {
-      throw new IllegalStateException("Type mismatch: " + field + " was indexed as " + v);
     } else {
       return in.getSortedDocValues(field);
     }
@@ -267,7 +261,7 @@ public class UninvertingReader extends FilterAtomicReader {
   
   @Override
   public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {
-    Type v = mapping.get(field);
+    Type v = getType(field);
     if (v != null) {
       switch (v) {
         case SORTED_SET_INTEGER:
@@ -278,10 +272,6 @@ public class UninvertingReader extends FilterAtomicReader {
           return FieldCache.DEFAULT.getDocTermOrds(in, field, FieldCache.INT64_TERM_PREFIX);
         case SORTED_SET_BINARY:
           return FieldCache.DEFAULT.getDocTermOrds(in, field, null);
-        default:
-          if (v != Type.SORTED) {
-            throw new IllegalStateException("Type mismatch: " + field + " was indexed as " + v);
-          }
       }
     }
     return in.getSortedSetDocValues(field);
@@ -289,12 +279,24 @@ public class UninvertingReader extends FilterAtomicReader {
 
   @Override
   public Bits getDocsWithField(String field) throws IOException {
-    if (mapping.containsKey(field)) {
+    if (getType(field) != null) {
       return FieldCache.DEFAULT.getDocsWithField(in, field);
     } else {
       return in.getDocsWithField(field);
     }
   }
+  
+  /** 
+   * Returns the field's uninversion type, or null 
+   * if the field doesn't exist or doesn't have a mapping.
+   */
+  private Type getType(String field) {
+    FieldInfo info = fieldInfos.fieldInfo(field);
+    if (info == null || info.hasDocValues() == false) {
+      return null;
+    }
+    return mapping.get(field);
+  }
 
   @Override
   public Object getCoreCacheKey() {
diff --git a/lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort.java b/lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort.java
index ad13b89..9ba1cab 100644
--- a/lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort.java
+++ b/lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort.java
@@ -49,6 +49,7 @@ import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.uninverting.UninvertingReader.Type;
 import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util.TestUtil;
 
 /*
  * Tests sorting (but with fieldcache instead of docvalues)
@@ -87,6 +88,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("bar", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("foo", searcher.doc(td.scoreDocs[1].doc).get("value"));
 
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -125,7 +127,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertNull(searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("bar", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("foo", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -161,7 +163,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     // 'foo' comes after 'bar' in reverse order
     assertEquals("foo", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("bar", searcher.doc(td.scoreDocs[1].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -202,7 +204,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertNull(searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("bar", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("foo", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -243,7 +245,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("bar", searcher.doc(td.scoreDocs[1].doc).get("value"));
     // null comes last
     assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -285,7 +287,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("foo", searcher.doc(td.scoreDocs[1].doc).get("value"));
     // null comes last
     assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -327,7 +329,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertNull(searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("foo", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("bar", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -353,7 +355,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     // docid 0, then docid 1
     assertEquals(0, td.scoreDocs[0].doc);
     assertEquals(1, td.scoreDocs[1].doc);
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -379,7 +381,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     // docid 1, then docid 0
     assertEquals(1, td.scoreDocs[0].doc);
     assertEquals(0, td.scoreDocs[1].doc);
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -409,7 +411,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     for (int i = 0; i < actual.scoreDocs.length; i++) {
       assertEquals(actual.scoreDocs[i].doc, expected.scoreDocs[i].doc);
     }
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -438,7 +440,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals(expected.totalHits, actual.totalHits);
     assertEquals(actual.scoreDocs[0].doc, expected.scoreDocs[1].doc);
     assertEquals(actual.scoreDocs[1].doc, expected.scoreDocs[0].doc);
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -469,7 +471,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("-1", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("300000", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -499,7 +501,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("-1", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("4", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -531,7 +533,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("-1", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -562,7 +564,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("300000", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("-1", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -593,7 +595,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("-1", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("3000000000", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -623,7 +625,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("-1", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("4", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -655,7 +657,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("-1", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -686,7 +688,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("3000000000", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("-1", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -717,7 +719,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("-1.3", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4.2", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("30.1", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -747,7 +749,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("-1.3", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("4.2", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -779,7 +781,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("-1.3", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4.2", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -810,7 +812,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("30.1", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("4.2", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("-1.3", searcher.doc(td.scoreDocs[2].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -845,7 +847,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("4.2333333333332", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("4.2333333333333", searcher.doc(td.scoreDocs[2].doc).get("value"));
     assertEquals("30.1", searcher.doc(td.scoreDocs[3].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -878,7 +880,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     // check sign bits
     assertEquals(1, Double.doubleToLongBits(v0) >>> 63);
     assertEquals(0, Double.doubleToLongBits(v1) >>> 63);
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -912,7 +914,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("4.2333333333332", searcher.doc(td.scoreDocs[2].doc).get("value"));
     assertEquals("4.2333333333333", searcher.doc(td.scoreDocs[3].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -948,7 +950,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("4.2333333333332", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("4.2333333333333", searcher.doc(td.scoreDocs[2].doc).get("value"));
     assertNull(searcher.doc(td.scoreDocs[3].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -983,7 +985,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals("4.2333333333333", searcher.doc(td.scoreDocs[1].doc).get("value"));
     assertEquals("4.2333333333332", searcher.doc(td.scoreDocs[2].doc).get("value"));
     assertEquals("-1.3", searcher.doc(td.scoreDocs[3].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -1010,11 +1012,12 @@ public class TestFieldCacheSort extends LuceneTestCase {
     // null sorts first
     assertEquals(1, hits.scoreDocs[0].doc);
     assertEquals(0, hits.scoreDocs[1].doc);
+    TestUtil.checkReader(r);
     r.close();
     dir.close();
   }
   
-  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */
+  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */
   public void testMultiValuedField() throws IOException {
     Directory indexStore = newDirectory();
     IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(
@@ -1030,14 +1033,13 @@ public class TestFieldCacheSort extends LuceneTestCase {
     Sort sort = new Sort(
         new SortField("string", SortField.Type.STRING),
         SortField.FIELD_DOC);
-    // this should not throw AIOOBE or RuntimeEx
     IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),
                          Collections.singletonMap("string", Type.SORTED));
-    // NOTE: we can't wrap this with newSearcher, because when the API is abused in this way,
-    // the number of ords can exceed the number of documents, and AssertingAtomicReader will get angry,
-    // rightfully so (its a broken dv)
     IndexSearcher searcher = new IndexSearcher(reader);
-    searcher.search(new MatchAllDocsQuery(), null, 500, sort);
+    try {
+      searcher.search(new MatchAllDocsQuery(), null, 500, sort);
+      fail("didn't get expected exception");
+    } catch (IllegalStateException expected) {}
     reader.close();
     indexStore.close();
   }
@@ -1073,6 +1075,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);
     assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField("id", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);
     assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField("id", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);
+    TestUtil.checkReader(r);
     r.close();
     d.close();
   }
@@ -1124,7 +1127,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);
     assertEquals(1, td.totalHits);
     assertEquals("foo", searcher.doc(td.scoreDocs[0].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -1149,7 +1152,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     
     assertEquals(expected.totalHits, actual.totalHits);
     assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -1183,7 +1186,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     // 'bar' comes before 'foo'
     assertEquals("bar", searcher.doc(td.scoreDocs[0].doc).get("value"));
     assertEquals("foo", searcher.doc(td.scoreDocs[1].doc).get("value"));
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -1210,7 +1213,7 @@ public class TestFieldCacheSort extends LuceneTestCase {
     assertEquals(2, td.totalHits);
     assertEquals(1, td.scoreDocs[0].doc);
     assertEquals(0, td.scoreDocs[1].doc);
-
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
diff --git a/lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32.java b/lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32.java
index 687c00d..ae649f1 100644
--- a/lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32.java
+++ b/lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32.java
@@ -108,6 +108,7 @@ public class TestNumericTerms32 extends LuceneTestCase {
   @AfterClass
   public static void afterClass() throws Exception {
     searcher = null;
+    TestUtil.checkReader(reader);
     reader.close();
     reader = null;
     directory.close();
diff --git a/lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms64.java b/lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms64.java
index 83b8353..ba3a27d 100644
--- a/lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms64.java
+++ b/lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms64.java
@@ -113,6 +113,7 @@ public class TestNumericTerms64 extends LuceneTestCase {
   @AfterClass
   public static void afterClass() throws Exception {
     searcher = null;
+    TestUtil.checkReader(reader);
     reader.close();
     reader = null;
     directory.close();
diff --git a/lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader.java b/lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader.java
index 714ebad..9d0ed3b 100644
--- a/lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader.java
+++ b/lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader.java
@@ -19,8 +19,6 @@ package org.apache.lucene.uninverting;
 
 import java.io.IOException;
 import java.util.Collections;
-import java.util.EnumSet;
-import java.util.Set;
 
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -28,7 +26,6 @@ import org.apache.lucene.document.IntField;
 import org.apache.lucene.document.LongField;
 import org.apache.lucene.index.AtomicReader;
 import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.FieldInfo.DocValuesType;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.SortedSetDocValues;
 import org.apache.lucene.store.Directory;
@@ -36,6 +33,7 @@ import org.apache.lucene.uninverting.UninvertingReader.Type;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.NumericUtils;
+import org.apache.lucene.util.TestUtil;
 
 public class TestUninvertingReader extends LuceneTestCase {
   
@@ -58,9 +56,7 @@ public class TestUninvertingReader extends LuceneTestCase {
     DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), 
                          Collections.singletonMap("foo", Type.SORTED_SET_INTEGER));
     AtomicReader ar = ir.leaves().get(0).reader();
-    assertNoSilentInsanity(ar, "foo", DocValuesType.SORTED_SET);
     SortedSetDocValues v = ar.getSortedSetDocValues("foo");
-    assertNoSilentInsanity(ar, "foo", DocValuesType.SORTED_SET);
     assertEquals(2, v.getValueCount());
     
     v.setDocument(0);
@@ -77,7 +73,7 @@ public class TestUninvertingReader extends LuceneTestCase {
     
     value = v.lookupOrd(1);
     assertEquals(5, NumericUtils.prefixCodedToInt(value));
-    
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -102,9 +98,7 @@ public class TestUninvertingReader extends LuceneTestCase {
                          Collections.singletonMap("foo", Type.SORTED_SET_FLOAT));
     AtomicReader ar = ir.leaves().get(0).reader();
     
-    assertNoSilentInsanity(ar, "foo", DocValuesType.SORTED_SET);
     SortedSetDocValues v = ar.getSortedSetDocValues("foo");
-    assertNoSilentInsanity(ar, "foo", DocValuesType.SORTED_SET);
     assertEquals(2, v.getValueCount());
     
     v.setDocument(0);
@@ -121,7 +115,7 @@ public class TestUninvertingReader extends LuceneTestCase {
     
     value = v.lookupOrd(1);
     assertEquals(Float.floatToRawIntBits(5f), NumericUtils.prefixCodedToInt(value));
-    
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -145,9 +139,7 @@ public class TestUninvertingReader extends LuceneTestCase {
     DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), 
         Collections.singletonMap("foo", Type.SORTED_SET_LONG));
     AtomicReader ar = ir.leaves().get(0).reader();
-    assertNoSilentInsanity(ar, "foo", DocValuesType.SORTED_SET);
     SortedSetDocValues v = ar.getSortedSetDocValues("foo");
-    assertNoSilentInsanity(ar, "foo", DocValuesType.SORTED_SET);
     assertEquals(2, v.getValueCount());
     
     v.setDocument(0);
@@ -164,7 +156,7 @@ public class TestUninvertingReader extends LuceneTestCase {
     
     value = v.lookupOrd(1);
     assertEquals(5, NumericUtils.prefixCodedToLong(value));
-    
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
@@ -188,9 +180,7 @@ public class TestUninvertingReader extends LuceneTestCase {
     DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), 
         Collections.singletonMap("foo", Type.SORTED_SET_DOUBLE));
     AtomicReader ar = ir.leaves().get(0).reader();
-    assertNoSilentInsanity(ar, "foo", DocValuesType.SORTED_SET);
     SortedSetDocValues v = ar.getSortedSetDocValues("foo");
-    assertNoSilentInsanity(ar, "foo", DocValuesType.SORTED_SET);
     assertEquals(2, v.getValueCount());
     
     v.setDocument(0);
@@ -207,42 +197,8 @@ public class TestUninvertingReader extends LuceneTestCase {
     
     value = v.lookupOrd(1);
     assertEquals(Double.doubleToRawLongBits(5d), NumericUtils.prefixCodedToLong(value));
-    
+    TestUtil.checkReader(ir);
     ir.close();
     dir.close();
   }
-  
-  private void assertNoSilentInsanity(AtomicReader reader, String field, DocValuesType type) throws IOException {
-    Set<DocValuesType> insaneTypes = EnumSet.allOf(DocValuesType.class);
-    insaneTypes.remove(type);
-    
-    for (DocValuesType t : insaneTypes) {
-      tryToBeInsane(reader, field, type, t);
-    }
-  }
-  
-  private void tryToBeInsane(AtomicReader reader, String field, DocValuesType actualType, DocValuesType insaneType) throws IOException {
-    try {
-      switch(insaneType) {
-        case NUMERIC:
-          reader.getNumericDocValues(field);
-          break;
-        case SORTED:
-          reader.getSortedDocValues(field);
-          break;
-        case BINARY:
-          reader.getBinaryDocValues(field);
-          break;
-        case SORTED_SET:
-          reader.getSortedSetDocValues(field);
-          break;
-        case SORTED_NUMERIC:
-          // not supported
-          return;
-        default:
-          throw new AssertionError();
-      }
-      fail("didn't get expected exception: actual=" + actualType + ",insane=" + insaneType);
-    } catch (IllegalStateException expected) {}
-  }
 }

