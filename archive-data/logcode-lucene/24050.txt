GitDiffStart: 4fd74d2554a010c4c1549dda17f746707f28d6e7 | Tue Nov 15 23:18:22 2005 +0000
diff --git a/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTest.java b/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTest.java
deleted file mode 100644
index 9aa0561..0000000
--- a/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTest.java
+++ /dev/null
@@ -1,93 +0,0 @@
-package org.apache.lucene.queryParser.surround.query;
-
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.Searcher;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.HitCollector;
-
-import org.apache.lucene.queryParser.surround.parser.QueryParser;
-
-import junit.framework.TestCase;
-
-public class BooleanQueryTest {
-  String queryText;
-  final int[] expectedDocNrs;
-  SingleFieldTestDb dBase;
-  String fieldName;
-  TestCase testCase;
-  BasicQueryFactory qf;
-  boolean verbose = true;
-
-  public BooleanQueryTest(
-      String queryText,
-      int[] expectedDocNrs,
-      SingleFieldTestDb dBase,
-      String fieldName,
-      TestCase testCase,
-      BasicQueryFactory qf) {
-    this.queryText = queryText;
-    this.expectedDocNrs = expectedDocNrs;
-    this.dBase = dBase;
-    this.fieldName = fieldName;
-    this.testCase = testCase;
-    this.qf = qf;
-  }
-  
-  public void setVerbose(boolean verbose) {this.verbose = verbose;}
-
-  class TestCollector extends HitCollector { // FIXME: use check hits from Lucene tests
-    int totalMatched;
-    boolean[] encountered;
-
-    TestCollector() {
-      totalMatched = 0;
-      encountered = new boolean[expectedDocNrs.length];
-    }
-
-    public void collect(int docNr, float score) {
-      /* System.out.println(docNr + " '" + dBase.getDocs()[docNr] + "': " + score); */
-      TestCase.assertTrue(queryText + ": positive score", score > 0.0);
-      TestCase.assertTrue(queryText + ": too many hits", totalMatched < expectedDocNrs.length);
-      int i;
-      for (i = 0; i < expectedDocNrs.length; i++) {
-        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {
-          encountered[i] = true;
-          break;
-        }
-      }
-      if (i == expectedDocNrs.length) {
-        TestCase.assertTrue(queryText + ": doc nr for hit not expected: " + docNr, false);
-      }
-      totalMatched++;
-    }
-
-    void checkNrHits() {
-      TestCase.assertEquals(queryText + ": nr of hits", expectedDocNrs.length, totalMatched);
-    }
-  }
-
-  public void doTest() throws Exception {
-
-    if (verbose) {    
-        System.out.println("");
-        System.out.println("Query: " + queryText);
-    }
-    
-    SrndQuery lq = QueryParser.parse(queryText);
-    
-    /* if (verbose) System.out.println("Srnd: " + lq.toString()); */
-    
-    Query query = lq.makeLuceneQueryField(fieldName, qf);
-    /* if (verbose) System.out.println("Lucene: " + query.toString()); */
-
-    TestCollector tc = new TestCollector();
-    Searcher searcher = new IndexSearcher(dBase.getDb());
-    try {
-      searcher.search(query, tc);
-    } finally {
-      searcher.close();
-    }
-    tc.checkNrHits();
-  }
-}
-
diff --git a/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.java b/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.java
new file mode 100644
index 0000000..7e9ae63
--- /dev/null
+++ b/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.java
@@ -0,0 +1,93 @@
+package org.apache.lucene.queryParser.surround.query;
+
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Searcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.HitCollector;
+
+import org.apache.lucene.queryParser.surround.parser.QueryParser;
+
+import junit.framework.TestCase;
+
+public class BooleanQueryTst {
+  String queryText;
+  final int[] expectedDocNrs;
+  SingleFieldTestDb dBase;
+  String fieldName;
+  TestCase testCase;
+  BasicQueryFactory qf;
+  boolean verbose = true;
+
+  public BooleanQueryTst(
+      String queryText,
+      int[] expectedDocNrs,
+      SingleFieldTestDb dBase,
+      String fieldName,
+      TestCase testCase,
+      BasicQueryFactory qf) {
+    this.queryText = queryText;
+    this.expectedDocNrs = expectedDocNrs;
+    this.dBase = dBase;
+    this.fieldName = fieldName;
+    this.testCase = testCase;
+    this.qf = qf;
+  }
+  
+  public void setVerbose(boolean verbose) {this.verbose = verbose;}
+
+  class TestCollector extends HitCollector { // FIXME: use check hits from Lucene tests
+    int totalMatched;
+    boolean[] encountered;
+
+    TestCollector() {
+      totalMatched = 0;
+      encountered = new boolean[expectedDocNrs.length];
+    }
+
+    public void collect(int docNr, float score) {
+      /* System.out.println(docNr + " '" + dBase.getDocs()[docNr] + "': " + score); */
+      TestCase.assertTrue(queryText + ": positive score", score > 0.0);
+      TestCase.assertTrue(queryText + ": too many hits", totalMatched < expectedDocNrs.length);
+      int i;
+      for (i = 0; i < expectedDocNrs.length; i++) {
+        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {
+          encountered[i] = true;
+          break;
+        }
+      }
+      if (i == expectedDocNrs.length) {
+        TestCase.assertTrue(queryText + ": doc nr for hit not expected: " + docNr, false);
+      }
+      totalMatched++;
+    }
+
+    void checkNrHits() {
+      TestCase.assertEquals(queryText + ": nr of hits", expectedDocNrs.length, totalMatched);
+    }
+  }
+
+  public void doTest() throws Exception {
+
+    if (verbose) {    
+        System.out.println("");
+        System.out.println("Query: " + queryText);
+    }
+    
+    SrndQuery lq = QueryParser.parse(queryText);
+    
+    /* if (verbose) System.out.println("Srnd: " + lq.toString()); */
+    
+    Query query = lq.makeLuceneQueryField(fieldName, qf);
+    /* if (verbose) System.out.println("Lucene: " + query.toString()); */
+
+    TestCollector tc = new TestCollector();
+    Searcher searcher = new IndexSearcher(dBase.getDb());
+    try {
+      searcher.search(query, tc);
+    } finally {
+      searcher.close();
+    }
+    tc.checkNrHits();
+  }
+}
+
diff --git a/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/ExceptionQueryTest.java b/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/ExceptionQueryTest.java
deleted file mode 100644
index e88495e..0000000
--- a/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/ExceptionQueryTest.java
+++ /dev/null
@@ -1,48 +0,0 @@
-package org.apache.lucene.queryParser.surround.query;
-
-import org.apache.lucene.queryParser.surround.parser.ParseException;
-import org.apache.lucene.queryParser.surround.parser.QueryParser;
-
-
-public class ExceptionQueryTest {
-  private String queryText;
-  private boolean verbose;
-  
-  public ExceptionQueryTest(String queryText, boolean verbose) {
-    this.queryText = queryText;
-    this.verbose = verbose;
-  }
-
-  public void doTest(StringBuffer failQueries) {
-    boolean pass = false;
-    SrndQuery lq = null;
-    try {
-      lq = QueryParser.parse(queryText);
-      if (verbose) {
-        System.out.println("Query: " + queryText + "\nParsed as: " + lq.toString());
-      }
-    } catch (ParseException e) {
-      if (verbose) {
-        System.out.println("Parse exception for query:\n"
-                            + queryText + "\n"
-                            + e.getMessage());
-      }
-      pass = true;
-    }
-    if (! pass) {
-      failQueries.append(queryText);
-      failQueries.append("\nParsed as: ");
-      failQueries.append(lq.toString());
-      failQueries.append("\n");
-    }
-  }
-  
-  public static String getFailQueries(String[] exceptionQueries, boolean verbose) {
-    StringBuffer failQueries = new StringBuffer();
-    for (int i = 0; i < exceptionQueries.length; i++ ) {
-      new ExceptionQueryTest( exceptionQueries[i], verbose).doTest(failQueries);
-    }
-    return failQueries.toString();
-  }
-}
-
diff --git a/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/ExceptionQueryTst.java b/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/ExceptionQueryTst.java
new file mode 100644
index 0000000..7bd73b8
--- /dev/null
+++ b/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/ExceptionQueryTst.java
@@ -0,0 +1,48 @@
+package org.apache.lucene.queryParser.surround.query;
+
+import org.apache.lucene.queryParser.surround.parser.ParseException;
+import org.apache.lucene.queryParser.surround.parser.QueryParser;
+
+
+public class ExceptionQueryTst {
+  private String queryText;
+  private boolean verbose;
+  
+  public ExceptionQueryTst(String queryText, boolean verbose) {
+    this.queryText = queryText;
+    this.verbose = verbose;
+  }
+
+  public void doTest(StringBuffer failQueries) {
+    boolean pass = false;
+    SrndQuery lq = null;
+    try {
+      lq = QueryParser.parse(queryText);
+      if (verbose) {
+        System.out.println("Query: " + queryText + "\nParsed as: " + lq.toString());
+      }
+    } catch (ParseException e) {
+      if (verbose) {
+        System.out.println("Parse exception for query:\n"
+                            + queryText + "\n"
+                            + e.getMessage());
+      }
+      pass = true;
+    }
+    if (! pass) {
+      failQueries.append(queryText);
+      failQueries.append("\nParsed as: ");
+      failQueries.append(lq.toString());
+      failQueries.append("\n");
+    }
+  }
+  
+  public static String getFailQueries(String[] exceptionQueries, boolean verbose) {
+    StringBuffer failQueries = new StringBuffer();
+    for (int i = 0; i < exceptionQueries.length; i++ ) {
+      new ExceptionQueryTst( exceptionQueries[i], verbose).doTest(failQueries);
+    }
+    return failQueries.toString();
+  }
+}
+
diff --git a/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/Test01Exceptions.java b/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/Test01Exceptions.java
index 27976cf..39a320d 100644
--- a/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/Test01Exceptions.java
+++ b/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/Test01Exceptions.java
@@ -41,7 +41,7 @@ public class Test01Exceptions extends TestCase {
   };
 
   public void test01Exceptions() throws Exception {
-    String m = ExceptionQueryTest.getFailQueries(exceptionQueries, verbose);
+    String m = ExceptionQueryTst.getFailQueries(exceptionQueries, verbose);
     if (m.length() > 0) {
       fail("No ParseException for:\n" + m);
     }
diff --git a/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/Test02Boolean.java b/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/Test02Boolean.java
index c79d535..4190092 100644
--- a/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/Test02Boolean.java
+++ b/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/Test02Boolean.java
@@ -25,7 +25,7 @@ public class Test02Boolean extends TestCase {
   SingleFieldTestDb db1 = new SingleFieldTestDb(docs1, fieldName);
 
   public void normalTest1(String query, int[] expdnrs) throws Exception {
-    BooleanQueryTest bqt = new BooleanQueryTest( query, expdnrs, db1, fieldName, this,
+    BooleanQueryTst bqt = new BooleanQueryTst( query, expdnrs, db1, fieldName, this,
                                                 new BasicQueryFactory(maxBasicQueries));
     bqt.setVerbose(verbose);
     bqt.doTest();
diff --git a/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/Test03Distance.java b/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/Test03Distance.java
index 011046f..98543b3 100644
--- a/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/Test03Distance.java
+++ b/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/Test03Distance.java
@@ -24,7 +24,7 @@ public class Test03Distance extends TestCase {
   };
   
   public void test00Exceptions() throws Exception {
-    String m = ExceptionQueryTest.getFailQueries(exceptionQueries, verbose);
+    String m = ExceptionQueryTst.getFailQueries(exceptionQueries, verbose);
     if (m.length() > 0) {
       fail("No ParseException for:\n" + m);
     }
@@ -51,14 +51,14 @@ public class Test03Distance extends TestCase {
   SingleFieldTestDb db2 = new SingleFieldTestDb(docs2, fieldName);
 
   public void distanceTest1(String query, int[] expdnrs) throws Exception {
-    BooleanQueryTest bqt = new BooleanQueryTest( query, expdnrs, db1, fieldName, this,
+    BooleanQueryTst bqt = new BooleanQueryTst( query, expdnrs, db1, fieldName, this,
                                                 new BasicQueryFactory(maxBasicQueries));
     bqt.setVerbose(verbose);
     bqt.doTest();
   }
 
   public void distanceTest2(String query, int[] expdnrs) throws Exception {
-    BooleanQueryTest bqt = new BooleanQueryTest( query, expdnrs, db2, fieldName, this,
+    BooleanQueryTst bqt = new BooleanQueryTst( query, expdnrs, db2, fieldName, this,
                                                 new BasicQueryFactory(maxBasicQueries));
     bqt.setVerbose(verbose);
     bqt.doTest();

