GitDiffStart: d8afc5ab847e0f1a35bff6aa2f6ae7ba48ff34db | Tue Jan 29 00:05:50 2013 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum.java b/lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum.java
index 6588aaf..4151a47 100644
--- a/lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum.java
+++ b/lucene/core/src/java/org/apache/lucene/index/SortedDocValuesTermsEnum.java
@@ -39,7 +39,6 @@ public class SortedDocValuesTermsEnum extends TermsEnum {
   @Override
   public SeekStatus seekCeil(BytesRef text, boolean useCache /* ignored */) throws IOException {
     int ord = values.lookupTerm(text, term);
-    // nocommit >= 0!?
     if (ord >= 0) {
       currentOrd = ord;
       term.offset = 0;
@@ -50,7 +49,7 @@ public class SortedDocValuesTermsEnum extends TermsEnum {
       if (currentOrd == values.getValueCount()) {
         return SeekStatus.END;
       } else {
-        // nocommit hmm can we avoid this "extra" lookup?:
+        // TODO: hmm can we avoid this "extra" lookup?:
         values.lookupOrd(currentOrd, term);
         return SeekStatus.NOT_FOUND;
       }
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestFieldCache.java b/lucene/core/src/test/org/apache/lucene/search/TestFieldCache.java
index 658ed95..d91092f 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestFieldCache.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestFieldCache.java
@@ -206,7 +206,6 @@ public class TestFieldCache extends LuceneTestCase {
     }
 
     int nTerms = termsIndex.getValueCount();
-    // System.out.println("nTerms="+nTerms);
 
     TermsEnum tenum = new SortedDocValuesTermsEnum(termsIndex);
     BytesRef val = new BytesRef();
@@ -218,14 +217,21 @@ public class TestFieldCache extends LuceneTestCase {
     }
 
     // seek the enum around (note this isn't a great test here)
+    // nocommit
     int num = atLeast(100);
     for (int i = 0; i < num; i++) {
-      int k = _TestUtil.nextInt(random(), 1, nTerms-1);
+      int k = random().nextInt(nTerms);
       termsIndex.lookupOrd(k, val);
       assertEquals(TermsEnum.SeekStatus.FOUND, tenum.seekCeil(val));
       assertEquals(val, tenum.term());
     }
-    
+
+    for(int i=0;i<nTerms;i++) {
+      termsIndex.lookupOrd(i, val);
+      assertEquals(TermsEnum.SeekStatus.FOUND, tenum.seekCeil(val));
+      assertEquals(val, tenum.term());
+    }
+
     // test bad field
     termsIndex = cache.getTermsIndex(reader, "bogusfield");
 

