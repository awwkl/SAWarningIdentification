GitDiffStart: 414b7696eb78dde6cb33cc3e39bc32ef5a039194 | Thu Jun 11 20:23:49 2015 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 8d82755..59779de 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -70,6 +70,8 @@ New Features
   the per-hit polygon check when a leaf cell is fully contained by the
   polygon.  (Nick Knize, Mike McCandless)
 
+* LUCENE-6549: Add preload option to MMapDirectory. (Robert Muir)
+
 API Changes
 
 * LUCENE-6508: Simplify Lock api, there is now just 
diff --git a/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java b/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java
index 21b4d88..4d828a6 100644
--- a/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java
+++ b/lucene/core/src/java/org/apache/lucene/store/MMapDirectory.java
@@ -19,6 +19,7 @@ package org.apache.lucene.store;
  
 import java.io.IOException;
 import java.nio.ByteBuffer;
+import java.nio.MappedByteBuffer;
 import java.nio.channels.ClosedChannelException; // javadoc @link
 import java.nio.channels.FileChannel;
 import java.nio.channels.FileChannel.MapMode;
@@ -86,6 +87,8 @@ import org.apache.lucene.util.Constants;
  */
 public class MMapDirectory extends FSDirectory {
   private boolean useUnmapHack = UNMAP_SUPPORTED;
+  private boolean preload;
+
   /** 
    * Default max chunk size.
    * @see #MMapDirectory(Path, LockFactory, int)
@@ -198,6 +201,24 @@ public class MMapDirectory extends FSDirectory {
   }
   
   /**
+   * Set to {@code true} to ask mapped pages to be loaded
+   * into physical memory on init. The behavior is best-effort 
+   * and operating system dependent.
+   * @see MappedByteBuffer#load
+   */
+  public void setPreload(boolean preload) {
+    this.preload = preload;
+  }
+  
+  /**
+   * Returns {@code true} if mapped pages should be loaded.
+   * @see #setPreload
+   */
+  public boolean getPreload() {
+    return preload;
+  }
+  
+  /**
    * Returns the current mmap chunk size.
    * @see #MMapDirectory(Path, LockFactory, int)
    */
@@ -237,11 +258,16 @@ public class MMapDirectory extends FSDirectory {
           ? chunkSize
               : (length - bufferStart)
           );
+      MappedByteBuffer buffer;
       try {
-        buffers[bufNr] = fc.map(MapMode.READ_ONLY, offset + bufferStart, bufSize);
+        buffer = fc.map(MapMode.READ_ONLY, offset + bufferStart, bufSize);
       } catch (IOException ioe) {
         throw convertMapFailedIOException(ioe, resourceDescription, bufSize);
       }
+      if (preload) {
+        buffer.load();
+      }
+      buffers[bufNr] = buffer;
       bufferStart += bufSize;
     }
     
diff --git a/lucene/core/src/test/org/apache/lucene/store/TestMmapDirectory.java b/lucene/core/src/test/org/apache/lucene/store/TestMmapDirectory.java
index bd7dd21..a92c1c0 100644
--- a/lucene/core/src/test/org/apache/lucene/store/TestMmapDirectory.java
+++ b/lucene/core/src/test/org/apache/lucene/store/TestMmapDirectory.java
@@ -27,6 +27,8 @@ public class TestMmapDirectory extends BaseDirectoryTestCase {
 
   @Override
   protected Directory getDirectory(Path path) throws IOException {
-    return new MMapDirectory(path);
+    MMapDirectory m = new MMapDirectory(path);
+    m.setPreload(random().nextBoolean());
+    return m;
   }
 }

