GitDiffStart: e0cbfe9406de857fc6d33d6cf5ae59d744ec19b9 | Mon Sep 17 12:34:16 2012 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 23cc157..516a2f1 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -23,6 +23,9 @@ Changes in backwards compatibility policy
 * LUCENE-4392: Class org.apache.lucene.util.SortedVIntList has been removed.
   (Adrien Grand)
 
+* LUCENE-4393: RollingCharBuffer has been moved to the o.a.l.analysis.util
+  package of lucene-analysis-common. (Adrien Grand)
+
 New Features
 
 * LUCENE-1888: Added the option to store payloads in the term
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilter.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilter.java
index ff3ba54..e91dc36 100644
--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilter.java
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilter.java
@@ -22,8 +22,8 @@ import java.io.Reader;
 import java.util.Map;
 
 import org.apache.lucene.analysis.CharFilter; // javadocs
+import org.apache.lucene.analysis.util.RollingCharBuffer;
 import org.apache.lucene.util.CharsRef;
-import org.apache.lucene.util.RollingCharBuffer;
 import org.apache.lucene.util.fst.CharSequenceOutputs;
 import org.apache.lucene.util.fst.FST;
 import org.apache.lucene.util.fst.Outputs;
diff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/RollingCharBuffer.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/RollingCharBuffer.java
new file mode 100644
index 0000000..39b63b4
--- /dev/null
+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/RollingCharBuffer.java
@@ -0,0 +1,153 @@
+package org.apache.lucene.analysis.util;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.io.Reader;
+
+import org.apache.lucene.util.ArrayUtil;
+import org.apache.lucene.util.RamUsageEstimator;
+
+/** Acts like a forever growing char[] as you read
+ *  characters into it from the provided reader, but
+ *  internally it uses a circular buffer to only hold the
+ *  characters that haven't been freed yet.  This is like a
+ *  PushbackReader, except you don't have to specify
+ *  up-front the max size of the buffer, but you do have to
+ *  periodically call {@link #freeBefore}. */
+
+public final class RollingCharBuffer {
+
+  private Reader reader;
+
+  private char[] buffer = new char[512];
+
+  // Next array index to write to in buffer:
+  private int nextWrite;
+
+  // Next absolute position to read from reader:
+  private int nextPos;
+
+  // How many valid chars (wrapped) are in the buffer:
+  private int count;
+
+  // True if we hit EOF
+  private boolean end;
+    
+  /** Clear array and switch to new reader. */
+  public void reset(Reader reader) {
+    this.reader = reader;
+    nextPos = 0;
+    nextWrite = 0;
+    count = 0;
+    end = false;
+  }
+
+  /* Absolute position read.  NOTE: pos must not jump
+   * ahead by more than 1!  Ie, it's OK to read arbitarily
+   * far back (just not prior to the last {@link
+   * #freeBefore}), but NOT ok to read arbitrarily far
+   * ahead.  Returns -1 if you hit EOF. */
+  public int get(int pos) throws IOException {
+    //System.out.println("    get pos=" + pos + " nextPos=" + nextPos + " count=" + count);
+    if (pos == nextPos) {
+      if (end) {
+        return -1;
+      }
+      if (count == buffer.length) {
+        // Grow
+        final char[] newBuffer = new char[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_CHAR)];
+        //System.out.println(Thread.currentThread().getName() + ": cb grow " + newBuffer.length);
+        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);
+        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);
+        nextWrite = buffer.length;
+        buffer = newBuffer;
+      }
+      if (nextWrite == buffer.length) {
+        nextWrite = 0;
+      }
+
+      final int toRead = buffer.length - Math.max(count, nextWrite);
+      final int readCount = reader.read(buffer, nextWrite, toRead);
+      if (readCount == -1) {
+        end = true;
+        return -1;
+      }
+      final int ch = buffer[nextWrite];
+      nextWrite += readCount;
+      count += readCount;
+      nextPos += readCount;
+      return ch;
+    } else {
+      // Cannot read from future (except by 1):
+      assert pos < nextPos;
+
+      // Cannot read from already freed past:
+      assert nextPos - pos <= count: "nextPos=" + nextPos + " pos=" + pos + " count=" + count;
+
+      return buffer[getIndex(pos)];
+    }
+  }
+
+  // For assert:
+  private boolean inBounds(int pos) {
+    return pos >= 0 && pos < nextPos && pos >= nextPos - count;
+  }
+
+  private int getIndex(int pos) {
+    int index = nextWrite - (nextPos - pos);
+    if (index < 0) {
+      // Wrap:
+      index += buffer.length;
+      assert index >= 0;
+    }
+    return index;
+  }
+
+  public char[] get(int posStart, int length) {
+    assert length > 0;
+    assert inBounds(posStart): "posStart=" + posStart + " length=" + length;
+    //System.out.println("    buffer.get posStart=" + posStart + " len=" + length);
+      
+    final int startIndex = getIndex(posStart);
+    final int endIndex = getIndex(posStart + length);
+    //System.out.println("      startIndex=" + startIndex + " endIndex=" + endIndex);
+
+    final char[] result = new char[length];
+    if (endIndex >= startIndex && length < buffer.length) {
+      System.arraycopy(buffer, startIndex, result, 0, endIndex-startIndex);
+    } else {
+      // Wrapped:
+      final int part1 = buffer.length-startIndex;
+      System.arraycopy(buffer, startIndex, result, 0, part1);
+      System.arraycopy(buffer, 0, result, buffer.length-startIndex, length-part1);
+    }
+    return result;
+  }
+
+  /** Call this to notify us that no chars before this
+   *  absolute position are needed anymore. */
+  public void freeBefore(int pos) {
+    assert pos >= 0;
+    assert pos <= nextPos;
+    final int newCount = nextPos - pos;
+    assert newCount <= count: "newCount=" + newCount + " count=" + count;
+    assert newCount <= buffer.length: "newCount=" + newCount + " buf.length=" + buffer.length;
+    count = newCount;
+  }
+}
diff --git a/lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestRollingCharBuffer.java b/lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestRollingCharBuffer.java
new file mode 100644
index 0000000..b0da1fd
--- /dev/null
+++ b/lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestRollingCharBuffer.java
@@ -0,0 +1,99 @@
+package org.apache.lucene.analysis.util;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.StringReader;
+import java.util.Random;
+
+import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util._TestUtil;
+
+public class TestRollingCharBuffer extends LuceneTestCase {
+
+  public void test() throws Exception {
+    final int ITERS = atLeast(1000);
+    
+    RollingCharBuffer buffer = new RollingCharBuffer();
+
+    Random random = random();
+    for(int iter=0;iter<ITERS;iter++) {
+      final int stringLen = random.nextBoolean() ? random.nextInt(50) : random.nextInt(20000);
+      final String s;
+      if (stringLen == 0) {
+        s = "";
+      } else {
+        s = _TestUtil.randomUnicodeString(random, stringLen);
+      }
+      if (VERBOSE) {
+        System.out.println("\nTEST: iter=" + iter + " s.length()=" + s.length());
+      }
+      buffer.reset(new StringReader(s));
+      int nextRead = 0;
+      int availCount = 0;
+      while(nextRead < s.length()) {
+        if (VERBOSE) {
+          System.out.println("  cycle nextRead=" + nextRead + " avail=" + availCount);
+        }
+        if (availCount == 0 || random.nextBoolean()) {
+          // Read next char
+          if (VERBOSE) {
+            System.out.println("    new char");
+          }
+          assertEquals(s.charAt(nextRead), buffer.get(nextRead));
+          nextRead++;
+          availCount++;
+        } else if (random.nextBoolean()) {
+          // Read previous char
+          int pos = _TestUtil.nextInt(random, nextRead-availCount, nextRead-1);
+          if (VERBOSE) {
+            System.out.println("    old char pos=" + pos);
+          }
+          assertEquals(s.charAt(pos), buffer.get(pos));
+        } else {
+          // Read slice
+          int length;
+          if (availCount == 1) {
+            length = 1;
+          } else {
+            length = _TestUtil.nextInt(random, 1, availCount);
+          }
+          int start;
+          if (length == availCount) {
+            start = nextRead - availCount;
+          } else {
+            start = nextRead - availCount + random.nextInt(availCount-length);
+          }
+          if (VERBOSE) {
+            System.out.println("    slice start=" + start + " length=" + length);
+          }
+          assertEquals(s.substring(start, start+length),
+                       new String(buffer.get(start, length)));
+        }
+
+        if (availCount > 0 && random.nextInt(20) == 17) {
+          final int toFree = random.nextInt(availCount);
+          if (VERBOSE) {
+            System.out.println("    free " + toFree + " (avail=" + (availCount-toFree) + ")");
+          }
+          buffer.freeBefore(nextRead-(availCount-toFree));
+          availCount -= toFree;
+        }
+      }
+    }
+  }
+}
diff --git a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter.java b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter.java
index 07d7119..374fe2c 100644
--- a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter.java
+++ b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter.java
@@ -18,7 +18,7 @@ package org.apache.lucene.analysis.ja;
  */
 
 import org.apache.lucene.analysis.CharFilter;
-import org.apache.lucene.util.RollingCharBuffer;
+import org.apache.lucene.analysis.util.RollingCharBuffer;
 
 import java.io.IOException;
 import java.io.Reader;
diff --git a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.java b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.java
index a2c2be5..04d5921 100644
--- a/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.java
+++ b/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.java
@@ -38,10 +38,10 @@ import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
 import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute;
+import org.apache.lucene.analysis.util.RollingCharBuffer;
 import org.apache.lucene.util.ArrayUtil;
 import org.apache.lucene.util.IntsRef;
 import org.apache.lucene.util.RamUsageEstimator;
-import org.apache.lucene.util.RollingCharBuffer;
 import org.apache.lucene.util.fst.FST;
 
 // TODO: somehow factor out a reusable viterbi search here,
diff --git a/lucene/core/src/java/org/apache/lucene/util/RollingCharBuffer.java b/lucene/core/src/java/org/apache/lucene/util/RollingCharBuffer.java
deleted file mode 100644
index eaddb17..0000000
--- a/lucene/core/src/java/org/apache/lucene/util/RollingCharBuffer.java
+++ /dev/null
@@ -1,150 +0,0 @@
-package org.apache.lucene.util;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-import java.io.Reader;
-
-/** Acts like a forever growing char[] as you read
- *  characters into it from the provided reader, but
- *  internally it uses a circular buffer to only hold the
- *  characters that haven't been freed yet.  This is like a
- *  PushbackReader, except you don't have to specify
- *  up-front the max size of the buffer, but you do have to
- *  periodically call {@link #freeBefore}. */
-
-public final class RollingCharBuffer {
-
-  private Reader reader;
-
-  private char[] buffer = new char[512];
-
-  // Next array index to write to in buffer:
-  private int nextWrite;
-
-  // Next absolute position to read from reader:
-  private int nextPos;
-
-  // How many valid chars (wrapped) are in the buffer:
-  private int count;
-
-  // True if we hit EOF
-  private boolean end;
-    
-  /** Clear array and switch to new reader. */
-  public void reset(Reader reader) {
-    this.reader = reader;
-    nextPos = 0;
-    nextWrite = 0;
-    count = 0;
-    end = false;
-  }
-
-  /* Absolute position read.  NOTE: pos must not jump
-   * ahead by more than 1!  Ie, it's OK to read arbitarily
-   * far back (just not prior to the last {@link
-   * #freeBefore}), but NOT ok to read arbitrarily far
-   * ahead.  Returns -1 if you hit EOF. */
-  public int get(int pos) throws IOException {
-    //System.out.println("    get pos=" + pos + " nextPos=" + nextPos + " count=" + count);
-    if (pos == nextPos) {
-      if (end) {
-        return -1;
-      }
-      if (count == buffer.length) {
-        // Grow
-        final char[] newBuffer = new char[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_CHAR)];
-        //System.out.println(Thread.currentThread().getName() + ": cb grow " + newBuffer.length);
-        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);
-        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);
-        nextWrite = buffer.length;
-        buffer = newBuffer;
-      }
-      if (nextWrite == buffer.length) {
-        nextWrite = 0;
-      }
-
-      final int toRead = buffer.length - Math.max(count, nextWrite);
-      final int readCount = reader.read(buffer, nextWrite, toRead);
-      if (readCount == -1) {
-        end = true;
-        return -1;
-      }
-      final int ch = buffer[nextWrite];
-      nextWrite += readCount;
-      count += readCount;
-      nextPos += readCount;
-      return ch;
-    } else {
-      // Cannot read from future (except by 1):
-      assert pos < nextPos;
-
-      // Cannot read from already freed past:
-      assert nextPos - pos <= count: "nextPos=" + nextPos + " pos=" + pos + " count=" + count;
-
-      return buffer[getIndex(pos)];
-    }
-  }
-
-  // For assert:
-  private boolean inBounds(int pos) {
-    return pos >= 0 && pos < nextPos && pos >= nextPos - count;
-  }
-
-  private int getIndex(int pos) {
-    int index = nextWrite - (nextPos - pos);
-    if (index < 0) {
-      // Wrap:
-      index += buffer.length;
-      assert index >= 0;
-    }
-    return index;
-  }
-
-  public char[] get(int posStart, int length) {
-    assert length > 0;
-    assert inBounds(posStart): "posStart=" + posStart + " length=" + length;
-    //System.out.println("    buffer.get posStart=" + posStart + " len=" + length);
-      
-    final int startIndex = getIndex(posStart);
-    final int endIndex = getIndex(posStart + length);
-    //System.out.println("      startIndex=" + startIndex + " endIndex=" + endIndex);
-
-    final char[] result = new char[length];
-    if (endIndex >= startIndex && length < buffer.length) {
-      System.arraycopy(buffer, startIndex, result, 0, endIndex-startIndex);
-    } else {
-      // Wrapped:
-      final int part1 = buffer.length-startIndex;
-      System.arraycopy(buffer, startIndex, result, 0, part1);
-      System.arraycopy(buffer, 0, result, buffer.length-startIndex, length-part1);
-    }
-    return result;
-  }
-
-  /** Call this to notify us that no chars before this
-   *  absolute position are needed anymore. */
-  public void freeBefore(int pos) {
-    assert pos >= 0;
-    assert pos <= nextPos;
-    final int newCount = nextPos - pos;
-    assert newCount <= count: "newCount=" + newCount + " count=" + count;
-    assert newCount <= buffer.length: "newCount=" + newCount + " buf.length=" + buffer.length;
-    count = newCount;
-  }
-}
diff --git a/lucene/core/src/test/org/apache/lucene/util/TestRollingCharBuffer.java b/lucene/core/src/test/org/apache/lucene/util/TestRollingCharBuffer.java
deleted file mode 100644
index abe57eb..0000000
--- a/lucene/core/src/test/org/apache/lucene/util/TestRollingCharBuffer.java
+++ /dev/null
@@ -1,96 +0,0 @@
-package org.apache.lucene.util;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.StringReader;
-import java.util.Random;
-
-public class TestRollingCharBuffer extends LuceneTestCase {
-
-  public void test() throws Exception {
-    final int ITERS = atLeast(1000);
-    
-    RollingCharBuffer buffer = new RollingCharBuffer();
-
-    Random random = random();
-    for(int iter=0;iter<ITERS;iter++) {
-      final int stringLen = random.nextBoolean() ? random.nextInt(50) : random.nextInt(20000);
-      final String s;
-      if (stringLen == 0) {
-        s = "";
-      } else {
-        s = _TestUtil.randomUnicodeString(random, stringLen);
-      }
-      if (VERBOSE) {
-        System.out.println("\nTEST: iter=" + iter + " s.length()=" + s.length());
-      }
-      buffer.reset(new StringReader(s));
-      int nextRead = 0;
-      int availCount = 0;
-      while(nextRead < s.length()) {
-        if (VERBOSE) {
-          System.out.println("  cycle nextRead=" + nextRead + " avail=" + availCount);
-        }
-        if (availCount == 0 || random.nextBoolean()) {
-          // Read next char
-          if (VERBOSE) {
-            System.out.println("    new char");
-          }
-          assertEquals(s.charAt(nextRead), buffer.get(nextRead));
-          nextRead++;
-          availCount++;
-        } else if (random.nextBoolean()) {
-          // Read previous char
-          int pos = _TestUtil.nextInt(random, nextRead-availCount, nextRead-1);
-          if (VERBOSE) {
-            System.out.println("    old char pos=" + pos);
-          }
-          assertEquals(s.charAt(pos), buffer.get(pos));
-        } else {
-          // Read slice
-          int length;
-          if (availCount == 1) {
-            length = 1;
-          } else {
-            length = _TestUtil.nextInt(random, 1, availCount);
-          }
-          int start;
-          if (length == availCount) {
-            start = nextRead - availCount;
-          } else {
-            start = nextRead - availCount + random.nextInt(availCount-length);
-          }
-          if (VERBOSE) {
-            System.out.println("    slice start=" + start + " length=" + length);
-          }
-          assertEquals(s.substring(start, start+length),
-                       new String(buffer.get(start, length)));
-        }
-
-        if (availCount > 0 && random.nextInt(20) == 17) {
-          final int toFree = random.nextInt(availCount);
-          if (VERBOSE) {
-            System.out.println("    free " + toFree + " (avail=" + (availCount-toFree) + ")");
-          }
-          buffer.freeBefore(nextRead-(availCount-toFree));
-          availCount -= toFree;
-        }
-      }
-    }
-  }
-}

