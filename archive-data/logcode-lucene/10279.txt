GitDiffStart: 4a8408ceeadffab8fa3b0b7e047862fcb4081a62 | Sun Dec 9 16:54:01 2012 +0000
diff --git a/solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest.java b/solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest.java
index 2d92fa9..65fea21 100644
--- a/solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest.java
@@ -150,11 +150,17 @@ public class ShardRoutingTest extends AbstractFullDistribZkTestBase {
     doQuery("b!doc1,c!doc2,d!doc3,e!doc4", "q","*:*", "shards","shard1,shard2,shard3,shard4");
     doQuery("b!doc1,c!doc2,d!doc3,e!doc4", "q","*:*", shardKeys,"b!,c!,d!,e!");
     doQuery("b!doc1", "q","*:*", shardKeys,"b!");
-    doQuery("b!doc1", "q","*:*", "shards",bucket1);
     doQuery("c!doc2", "q","*:*", shardKeys,"c!");
     doQuery("d!doc3", "q","*:*", shardKeys,"d!");
     doQuery("e!doc4", "q","*:*", shardKeys,"e!");
 
+    // try using shards parameter
+    doQuery("b!doc1", "q","*:*", "shards",bucket1);
+    doQuery("c!doc2", "q","*:*", "shards",bucket2);
+    doQuery("d!doc3", "q","*:*", "shards",bucket3);
+    doQuery("e!doc4", "q","*:*", "shards",bucket4);
+
+
     doQuery("b!doc1,c!doc2", "q","*:*", shardKeys,"b!,c!");
     doQuery("b!doc1,e!doc4", "q","*:*", shardKeys,"b!,e!");
 
@@ -167,6 +173,7 @@ public class ShardRoutingTest extends AbstractFullDistribZkTestBase {
 
     doQuery("b!doc1,c!doc2,d!doc3,e!doc4", "q","*:*", shardKeys,"foo/0!");
 
+    // test targeting deleteByQuery at only certain shards
     doDBQ("*:*", shardKeys,"b!");
     commit();
     doQuery("c!doc2,d!doc3,e!doc4", "q","*:*");
@@ -187,6 +194,10 @@ public class ShardRoutingTest extends AbstractFullDistribZkTestBase {
     doQuery("b!doc1,c!doc2", "q","*:*");
     doAddDoc("d!doc3");
     doAddDoc("e!doc4");
+
+    commit();
+
+
   }
 
   void doAddDoc(String id) throws Exception {
diff --git a/solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter.java b/solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter.java
index 564543b..95d00a8 100644
--- a/solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter.java
+++ b/solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter.java
@@ -154,7 +154,7 @@ public abstract class DocRouter {
     return ranges;
   }
 
-
+  /** Returns the Slice that the document should reside on, or null if there is not enough information */
   public abstract Slice getTargetSlice(String id, SolrInputDocument sdoc, SolrParams params, DocCollection collection);
 
   /** This method is consulted to determine what slices should be queried for a request when
diff --git a/solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter.java b/solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter.java
index e6b8433..9628eed 100644
--- a/solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter.java
+++ b/solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter.java
@@ -62,6 +62,7 @@ public abstract class HashBasedRouter extends DocRouter {
     }
 
     // use the shardKey as an id for plain hashing
-    return Collections.singletonList(getTargetSlice(shardKey, null, params, collection));
+    Slice slice = getTargetSlice(shardKey, null, params, collection);
+    return slice == null ? Collections.<Slice>emptyList() : Collections.singletonList(slice);
   }
 }
diff --git a/solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter.java b/solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter.java
index e32db6a..4026c94 100644
--- a/solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter.java
+++ b/solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter.java
@@ -48,6 +48,7 @@ public class ImplicitDocRouter extends DocRouter {
       if (slice == null) {
         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "No _shard_=" + shard + " in " + collection);
       }
+      return slice;
     }
 
     return null;  // no shard specified... use default.

