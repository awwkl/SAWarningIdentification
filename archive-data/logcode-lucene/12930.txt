GitDiffStart: b5103519f02926eefa2211ae3c72bdc27d69fb0d | Sun Apr 8 20:44:58 2012 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.java b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.java
index 1a158d0..0523d9a 100644
--- a/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.java
+++ b/lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.java
@@ -40,10 +40,18 @@ public class OffsetAttributeImpl extends AttributeImpl implements OffsetAttribut
   /** Set the starting and ending offset.
     @see #startOffset() and #endOffset()*/
   public void setOffset(int startOffset, int endOffset) {
+
+    // TODO: we could assert that this is set-once, ie,
+    // current values are -1?  Very few token filters should
+    // change offsets once set by the tokenizer... and
+    // tokenizer should call clearAtts before re-using
+    // OffsetAtt
+
     // TODO: check that these are valid!  IE, each should be
     // >= 0, and endOffset should be >= startOffset.
     // Problem is this could "break" existing
     // tokenizers/filters.
+
     this.startOffset = startOffset;
     this.endOffset = endOffset;
   }
@@ -59,6 +67,8 @@ public class OffsetAttributeImpl extends AttributeImpl implements OffsetAttribut
 
   @Override
   public void clear() {
+    // TODO: we could use -1 as default here?  Then we can
+    // assert in setOffset...
     startOffset = 0;
     endOffset = 0;
   }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java b/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
index 5d0eefa..d8fbd15 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
@@ -439,6 +439,8 @@ public abstract class BaseTokenStreamTestCase extends LuceneTestCase {
       try {
         checkAnalysisConsistency(random, a, useCharFilter, text);
       } catch (Throwable t) {
+        // TODO: really we should pass a random seed to
+        // checkAnalysisConsistency then print it here too:
         System.err.println("TEST FAIL: useCharFilter=" + useCharFilter + " text='" + escape(text) + "'");
         Rethrow.rethrow(t);
       }

