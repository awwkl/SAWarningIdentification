GitDiffStart: 5464cbb53ebc2ad15c471eddd97093e5c27868a1 | Wed Nov 7 02:24:35 2012 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index bea1749..7f7a4ff 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -29,6 +29,11 @@ Changes in backwards compatibility policy
   floating point value.  Scorer now extends DocsEnum so it has attributes().
   (Robert Muir)
 
+* LUCENE-4543: TFIDFSimilarity's index-time computeNorm is now final to
+  match the fact that its query-time norm usage requires a FIXED_8 encoding. 
+  Override lengthNorm and/or encode/decodeNormValue to change the specifics,
+  like Lucene 3.x. (Robert Muir)
+
 New Features
 
 * LUCENE-4226: New experimental StoredFieldsFormat (in lucene/codecs) that
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity.java
index faa9904..00be514 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity.java
@@ -46,13 +46,13 @@ public class DefaultSimilarity extends TFIDFSimilarity {
    *
    *  @lucene.experimental */
   @Override
-  public void computeNorm(FieldInvertState state, Norm norm) {
+  public float lengthNorm(FieldInvertState state) {
     final int numTerms;
     if (discountOverlaps)
       numTerms = state.getLength() - state.getNumOverlap();
     else
       numTerms = state.getLength();
-    norm.setByte(encodeNormValue(state.getBoost() * ((float) (1.0 / Math.sqrt(numTerms)))));
+   return state.getBoost() * ((float) (1.0 / Math.sqrt(numTerms)));
   }
 
   /** Implemented as <code>sqrt(freq)</code>. */
diff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.java
index eba562b..5e5ff7c 100644
--- a/lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.java
+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity.java
@@ -22,6 +22,8 @@ import java.io.IOException;
 
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.DocValues;
+import org.apache.lucene.index.FieldInvertState;
+import org.apache.lucene.index.Norm;
 import org.apache.lucene.search.CollectionStatistics;
 import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.IndexSearcher;
@@ -668,6 +670,23 @@ public abstract class TFIDFSimilarity extends Similarity {
    */
   public abstract float idf(long docFreq, long numDocs);
 
+  /**
+   * Compute an index-time normalization value for this field instance.
+   * <p>
+   * This value will be stored in a single byte lossy representation by 
+   * {@link #encodeNormValue(float)}.
+   * 
+   * @param state statistics of the current field (such as length, boost, etc)
+   * @return an index-time normalization value
+   */
+  public abstract float lengthNorm(FieldInvertState state);
+  
+  @Override
+  public final void computeNorm(FieldInvertState state, Norm norm) {
+    float normValue = lengthNorm(state);
+    norm.setByte(encodeNormValue(normValue));
+  }
+  
   /** Cache of decoded bytes. */
   private static final float[] NORM_TABLE = new float[256];
 
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java b/lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java
index cd69b64..8d4e166 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestCustomNorms.java
@@ -25,9 +25,14 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.DocValues.Source;
 import org.apache.lucene.index.DocValues.Type;
+import org.apache.lucene.search.CollectionStatistics;
+import org.apache.lucene.search.TermStatistics;
 import org.apache.lucene.search.similarities.DefaultSimilarity;
 import org.apache.lucene.search.similarities.PerFieldSimilarityWrapper;
 import org.apache.lucene.search.similarities.Similarity;
+import org.apache.lucene.search.similarities.Similarity.ExactSimScorer;
+import org.apache.lucene.search.similarities.Similarity.SimWeight;
+import org.apache.lucene.search.similarities.Similarity.SloppySimScorer;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
@@ -192,16 +197,31 @@ public class TestCustomNorms extends LuceneTestCase {
     }
   }
 
-  public static class FloatEncodingBoostSimilarity extends DefaultSimilarity {
+  public static class FloatEncodingBoostSimilarity extends Similarity {
 
     @Override
     public void computeNorm(FieldInvertState state, Norm norm) {
       float boost = state.getBoost();
       norm.setFloat(boost);
     }
+    
+    @Override
+    public SimWeight computeWeight(float queryBoost, CollectionStatistics collectionStats, TermStatistics... termStats) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public ExactSimScorer exactSimScorer(SimWeight weight, AtomicReaderContext context) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public SloppySimScorer sloppySimScorer(SimWeight weight, AtomicReaderContext context) throws IOException {
+      throw new UnsupportedOperationException();
+    }
   }
 
-  public static class RandomTypeSimilarity extends DefaultSimilarity {
+  public static class RandomTypeSimilarity extends Similarity {
 
     private final Random random;
     
@@ -237,29 +257,50 @@ public class TestCustomNorms extends LuceneTestCase {
       }
 
     }
-  }
-  
-  class IllegalCustomEncodingSimilarity extends DefaultSimilarity {
-    
-    public boolean useByte = false;
+
     @Override
-    public byte encodeNormValue(float f) {
-      return (byte) f;
+    public SimWeight computeWeight(float queryBoost, CollectionStatistics collectionStats, TermStatistics... termStats) {
+      throw new UnsupportedOperationException();
     }
-    
+
     @Override
-    public float decodeNormValue(byte b) {
-      return (float) b;
+    public ExactSimScorer exactSimScorer(SimWeight weight, AtomicReaderContext context) throws IOException {
+      throw new UnsupportedOperationException();
     }
 
     @Override
+    public SloppySimScorer sloppySimScorer(SimWeight weight, AtomicReaderContext context) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+  }
+  
+  class IllegalCustomEncodingSimilarity extends Similarity {
+    
+    public boolean useByte = false;
+
+    @Override
     public void computeNorm(FieldInvertState state, Norm norm) {
       if (useByte) {
-        norm.setByte(encodeNormValue((float) state.getLength()));
+        norm.setByte((byte)state.getLength());
       } else {
         norm.setFloat((float)state.getLength());
       }
     }
+
+    @Override
+    public SimWeight computeWeight(float queryBoost, CollectionStatistics collectionStats, TermStatistics... termStats) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public ExactSimScorer exactSimScorer(SimWeight weight, AtomicReaderContext context) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public SloppySimScorer sloppySimScorer(SimWeight weight, AtomicReaderContext context) throws IOException {
+      throw new UnsupportedOperationException();
+    }
   }
 
 }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestMaxTermFrequency.java b/lucene/core/src/test/org/apache/lucene/index/TestMaxTermFrequency.java
index 4f0f0c9..49bb053 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestMaxTermFrequency.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestMaxTermFrequency.java
@@ -109,8 +109,8 @@ public class TestMaxTermFrequency extends LuceneTestCase {
     }
 
     @Override
-    public void computeNorm(FieldInvertState state, Norm norm) {
-      norm.setByte(encodeNormValue((float) state.getMaxTermFrequency()));
+    public float lengthNorm(FieldInvertState state) {
+      return state.getMaxTermFrequency();
     }
   }
 }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestNorms.java b/lucene/core/src/test/org/apache/lucene/index/TestNorms.java
index 368f5c2..46d634b 100755
--- a/lucene/core/src/test/org/apache/lucene/index/TestNorms.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestNorms.java
@@ -26,6 +26,8 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.DocValues.Source;
 import org.apache.lucene.index.DocValues.Type;
+import org.apache.lucene.search.CollectionStatistics;
+import org.apache.lucene.search.TermStatistics;
 import org.apache.lucene.search.similarities.DefaultSimilarity;
 import org.apache.lucene.search.similarities.PerFieldSimilarityWrapper;
 import org.apache.lucene.search.similarities.Similarity;
@@ -57,8 +59,8 @@ public class TestNorms extends LuceneTestCase {
     }
 
     @Override
-    public void computeNorm(FieldInvertState state, Norm norm) {
-      norm.setByte(encodeNormValue((float) state.getLength()));
+    public float lengthNorm(FieldInvertState state) {
+      return state.getLength();
     }
   }
   
@@ -232,7 +234,7 @@ public class TestNorms extends LuceneTestCase {
   }
 
   
-  public static class ByteEncodingBoostSimilarity extends DefaultSimilarity {
+  public static class ByteEncodingBoostSimilarity extends Similarity {
 
     private boolean writeNorms;
 
@@ -247,5 +249,20 @@ public class TestNorms extends LuceneTestCase {
         norm.setByte((byte) (0xFF & boost));
       }
     }
+
+    @Override
+    public SimWeight computeWeight(float queryBoost, CollectionStatistics collectionStats, TermStatistics... termStats) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public ExactSimScorer exactSimScorer(SimWeight weight, AtomicReaderContext context) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public SloppySimScorer sloppySimScorer(SimWeight weight, AtomicReaderContext context) throws IOException {
+      throw new UnsupportedOperationException();
+    }
   } 
 }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestOmitTf.java b/lucene/core/src/test/org/apache/lucene/index/TestOmitTf.java
index efceb1e..a2aa57a 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestOmitTf.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestOmitTf.java
@@ -39,7 +39,7 @@ public class TestOmitTf extends LuceneTestCase {
   public static class SimpleSimilarity extends TFIDFSimilarity {
     public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }
     public float coord(int overlap, int maxOverlap) { return 1.0f; }
-    @Override public void computeNorm(FieldInvertState state, Norm norm) { norm.setByte(encodeNormValue(state.getBoost())); }
+    @Override public float lengthNorm(FieldInvertState state) { return state.getBoost(); }
     @Override public float tf(float freq) { return freq; }
     @Override public float sloppyFreq(int distance) { return 2.0f; }
     @Override public float idf(long docFreq, long numDocs) { return 1.0f; }
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount.java b/lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount.java
index 911e890..0de0987 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount.java
@@ -17,6 +17,7 @@ package org.apache.lucene.index;
  * limitations under the License.
  */
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashSet;
 
@@ -24,7 +25,10 @@ import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
+import org.apache.lucene.search.CollectionStatistics;
+import org.apache.lucene.search.TermStatistics;
 import org.apache.lucene.search.similarities.DefaultSimilarity;
+import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util._TestUtil;
@@ -91,11 +95,26 @@ public class TestUniqueTermCount extends LuceneTestCase {
   /**
    * Simple similarity that encodes maxTermFrequency directly as a byte
    */
-  class TestSimilarity extends DefaultSimilarity {
+  class TestSimilarity extends Similarity {
 
     @Override
     public void computeNorm(FieldInvertState state, Norm norm) {
       norm.setByte((byte) state.getUniqueTermCount());
     }
+
+    @Override
+    public SimWeight computeWeight(float queryBoost, CollectionStatistics collectionStats, TermStatistics... termStats) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public ExactSimScorer exactSimScorer(SimWeight weight, AtomicReaderContext context) throws IOException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public SloppySimScorer sloppySimScorer(SimWeight weight, AtomicReaderContext context) throws IOException {
+      throw new UnsupportedOperationException();
+    }
   }
 }
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java b/lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
index 0a29c6e..41fe6f5 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery.java
@@ -69,9 +69,9 @@ public class TestDisjunctionMaxQuery extends LuceneTestCase {
     }
     
     @Override
-    public void computeNorm(FieldInvertState state, Norm norm) {
+    public float lengthNorm(FieldInvertState state) {
       // Disable length norm
-      norm.setByte(encodeNormValue(state.getBoost()));
+      return state.getBoost();
     }
     
     @Override
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestSimilarity.java b/lucene/core/src/test/org/apache/lucene/search/TestSimilarity.java
index 9bca7b6..6f201db 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestSimilarity.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestSimilarity.java
@@ -42,7 +42,7 @@ public class TestSimilarity extends LuceneTestCase {
   public static class SimpleSimilarity extends DefaultSimilarity {
     public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }
     public float coord(int overlap, int maxOverlap) { return 1.0f; }
-    @Override public void computeNorm(FieldInvertState state, Norm norm) { norm.setByte(encodeNormValue(state.getBoost())); }
+    @Override public float lengthNorm(FieldInvertState state) { return state.getBoost(); }
     @Override public float tf(float freq) { return freq; }
     @Override public float sloppyFreq(int distance) { return 2.0f; }
     @Override public float idf(long docFreq, long numDocs) { return 1.0f; }
diff --git a/lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider.java b/lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider.java
index 4efee86..1a2be6e 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider.java
@@ -115,8 +115,8 @@ public class TestSimilarityProvider extends LuceneTestCase {
     }
 
     @Override
-    public void computeNorm(FieldInvertState state, Norm norm) {
-      norm.setByte(encodeNormValue(1f));
+    public float lengthNorm(FieldInvertState state) {
+      return 1f;
     }
 
     @Override
@@ -151,8 +151,8 @@ public class TestSimilarityProvider extends LuceneTestCase {
     }
     
     @Override
-    public void computeNorm(FieldInvertState state, Norm norm) {
-      norm.setByte(encodeNormValue(10f));
+    public float lengthNorm(FieldInvertState state) {
+      return 10f;
     }
 
     @Override
diff --git a/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java b/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
index f6cd702..5556a7f 100644
--- a/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
+++ b/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java
@@ -324,8 +324,8 @@ public class TestPayloadNearQuery extends LuceneTestCase {
     //Make everything else 1 so we see the effect of the payload
     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     @Override 
-    public void computeNorm(FieldInvertState state, Norm norm) {
-      norm.setByte(encodeNormValue(state.getBoost()));
+    public float lengthNorm(FieldInvertState state) {
+      return state.getBoost();
     }
 
     @Override 
diff --git a/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java b/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java
index abb5b98..2485063 100644
--- a/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java
+++ b/lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery.java
@@ -314,8 +314,8 @@ public class TestPayloadTermQuery extends LuceneTestCase {
     //Make everything else 1 so we see the effect of the payload
     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     @Override 
-    public void computeNorm(FieldInvertState state, Norm norm) {
-      norm.setByte(encodeNormValue(state.getBoost()));
+    public float lengthNorm(FieldInvertState state) {
+      return state.getBoost();
     }
 
     @Override
diff --git a/lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java b/lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java
index 3224416..cb15f09 100644
--- a/lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java
+++ b/lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity.java
@@ -108,7 +108,7 @@ public class SweetSpotSimilarity extends DefaultSimilarity {
    * discountOverlaps is true by default or true for this
    * specific field. */
   @Override
-  public void computeNorm(FieldInvertState state, Norm norm) {
+  public float lengthNorm(FieldInvertState state) {
     final int numTokens;
 
     if (discountOverlaps)
@@ -116,7 +116,7 @@ public class SweetSpotSimilarity extends DefaultSimilarity {
     else
       numTokens = state.getLength();
 
-    norm.setByte(encodeNormValue(state.getBoost() * computeLengthNorm(numTokens)));
+    return state.getBoost() * computeLengthNorm(numTokens);
   }
 
   /**

