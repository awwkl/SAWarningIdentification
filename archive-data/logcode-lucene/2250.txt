GitDiffStart: eb0ce24e8adf66bd9770a11d2618936f972aa8ad | Fri Dec 18 08:40:38 2015 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 84b14af..b544332 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -231,6 +231,8 @@ New Features
 * SOLR-4280: Allow specifying "spellcheck.maxResultsForSuggest" as a percentage of filter
   query results (Markus Jelsma via James Dyer)
 
+* SOLR-8434: Add a flag 'blockUnknown' to BasicAuthPlugin to block unauthenticated requests (noble)
+
 
 Bug Fixes
 ----------------------
diff --git a/solr/core/src/java/org/apache/solr/security/BasicAuthPlugin.java b/solr/core/src/java/org/apache/solr/security/BasicAuthPlugin.java
index e28ba76..73d2857 100644
--- a/solr/core/src/java/org/apache/solr/security/BasicAuthPlugin.java
+++ b/solr/core/src/java/org/apache/solr/security/BasicAuthPlugin.java
@@ -29,25 +29,24 @@ import java.io.UnsupportedEncodingException;
 import java.security.Principal;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.StringTokenizer;
 
+import com.google.common.collect.ImmutableSet;
 import org.apache.commons.codec.binary.Base64;
 import org.apache.http.Header;
-import org.apache.http.HttpException;
-import org.apache.http.HttpRequest;
-import org.apache.http.HttpRequestInterceptor;
 import org.apache.http.auth.BasicUserPrincipal;
-import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.message.BasicHeader;
-import org.apache.http.protocol.HttpContext;
-import org.apache.solr.client.solrj.impl.HttpClientConfigurer;
 import org.apache.solr.common.SolrException;
-import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.util.CommandOperation;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class BasicAuthPlugin extends AuthenticationPlugin implements ConfigEditablePlugin {
+  private static final Logger log = LoggerFactory.getLogger(BasicAuthPlugin.class);
   private AuthenticationProvider zkAuthentication;
   private final static ThreadLocal<Header> authHeader = new ThreadLocal<>();
+  private boolean blockUnknown = false;
 
   public boolean authenticate(String username, String pwd) {
     return zkAuthentication.authenticate(username, pwd);
@@ -55,11 +54,31 @@ public class BasicAuthPlugin extends AuthenticationPlugin implements ConfigEdita
 
   @Override
   public void init(Map<String, Object> pluginConfig) {
+    Object o = pluginConfig.get(BLOCK_UNKNOWN);
+    if (o != null) {
+      try {
+        blockUnknown = Boolean.parseBoolean(o.toString());
+      } catch (Exception e) {
+        log.error(e.getMessage());
+      }
+    }
     zkAuthentication = getAuthenticationProvider(pluginConfig);
   }
 
   @Override
   public Map<String, Object> edit(Map<String, Object> latestConf, List<CommandOperation> commands) {
+    for (CommandOperation command : commands) {
+      if (command.name.equals("set-property")) {
+        for (Map.Entry<String, Object> e : command.getDataMap().entrySet()) {
+          if (PROPS.contains(e.getKey())) {
+            latestConf.put(e.getKey(), e.getValue());
+          } else {
+            command.addError("Unknown property " + e.getKey());
+          }
+        }
+      }
+    }
+    if (!CommandOperation.captureErrors(commands).isEmpty()) return null;
     if (zkAuthentication instanceof ConfigEditablePlugin) {
       ConfigEditablePlugin editablePlugin = (ConfigEditablePlugin) zkAuthentication;
       return editablePlugin.edit(latestConf, commands);
@@ -120,8 +139,12 @@ public class BasicAuthPlugin extends AuthenticationPlugin implements ConfigEdita
         }
       }
     } else {
-      request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());
-      filterChain.doFilter(request, response);
+      if (blockUnknown) {
+        authenticationFailure(response, "require authentication");
+      } else {
+        request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());
+        filterChain.doFilter(request, response);
+      }
     }
   }
 
@@ -143,5 +166,12 @@ public class BasicAuthPlugin extends AuthenticationPlugin implements ConfigEdita
     Map<String, String> getPromptHeaders();
   }
 
+  public boolean getBlockUnknown(){
+    return blockUnknown;
+  }
+
+  public static final String BLOCK_UNKNOWN = "blockUnknown";
+  private static final Set<String> PROPS = ImmutableSet.of(BLOCK_UNKNOWN);
+
 
 }
diff --git a/solr/core/src/test/org/apache/solr/security/TestSha256AuthenticationProvider.java b/solr/core/src/test/org/apache/solr/security/TestSha256AuthenticationProvider.java
index 6f5ef0d..2415099 100644
--- a/solr/core/src/test/org/apache/solr/security/TestSha256AuthenticationProvider.java
+++ b/solr/core/src/test/org/apache/solr/security/TestSha256AuthenticationProvider.java
@@ -24,6 +24,8 @@ import java.util.Map;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.util.CommandOperation;
 
+import static java.util.Collections.singletonMap;
+
 public class TestSha256AuthenticationProvider extends SolrTestCaseJ4 {
   public void testAuthenticate(){
     Sha256AuthenticationProvider zkAuthenticationProvider = new Sha256AuthenticationProvider();
@@ -32,7 +34,7 @@ public class TestSha256AuthenticationProvider extends SolrTestCaseJ4 {
     String pwd = "My#$Password";
     String user = "noble";
     Map latestConf = new LinkedHashMap<>();
-    Map<String, Object> params = Collections.singletonMap(user, pwd);
+    Map<String, Object> params = singletonMap(user, pwd);
     Map<String, Object> result = zkAuthenticationProvider.edit(latestConf,
         Collections.singletonList(new CommandOperation("set-user",params )));
     zkAuthenticationProvider = new Sha256AuthenticationProvider();
@@ -43,4 +45,23 @@ public class TestSha256AuthenticationProvider extends SolrTestCaseJ4 {
     assertFalse(zkAuthenticationProvider.authenticate("unknownuser", "WrongPassword"));
 
   }
+
+  public void testBasicAuthCommands(){
+    BasicAuthPlugin basicAuthPlugin = new BasicAuthPlugin();
+    basicAuthPlugin.init(Collections.emptyMap());
+
+    Map latestConf = new LinkedHashMap<>();
+
+    CommandOperation blockUnknown = new CommandOperation("set-property", singletonMap("blockUnknown", true));
+    basicAuthPlugin.edit(latestConf, Collections.singletonList(blockUnknown));
+    assertEquals(Boolean.TRUE,  latestConf.get("blockUnknown"));
+    basicAuthPlugin.init(latestConf);
+    assertTrue(basicAuthPlugin.getBlockUnknown());
+    blockUnknown = new CommandOperation("set-property", singletonMap("blockUnknown", false));
+    basicAuthPlugin.edit(latestConf, Collections.singletonList(blockUnknown));
+    assertEquals(Boolean.FALSE,  latestConf.get("blockUnknown"));
+    basicAuthPlugin.init(latestConf);
+    assertFalse(basicAuthPlugin.getBlockUnknown());
+
+  }
 }

