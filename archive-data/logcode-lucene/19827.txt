GitDiffStart: 855ac03bfdd1bd906aa16c8001689815b7a81826 | Fri Jul 31 18:59:47 2009 +0000
diff --git a/src/java/org/apache/solr/handler/component/QueryComponent.java b/src/java/org/apache/solr/handler/component/QueryComponent.java
index 7476376..192439a 100644
--- a/src/java/org/apache/solr/handler/component/QueryComponent.java
+++ b/src/java/org/apache/solr/handler/component/QueryComponent.java
@@ -282,6 +282,7 @@ public class QueryComponent extends SearchComponent
         break;
       case SortField.CUSTOM:
         comparator = sortField.getFactory().newComparator (reader, fieldname);
+        // comparator = sortField.getComparatorSource().newComparator(fieldname,2,1,false);
         break;
       default:
         throw new RuntimeException ("unknown field type: "+sortField.getType());
diff --git a/src/java/org/apache/solr/schema/FloatField.java b/src/java/org/apache/solr/schema/FloatField.java
index d86d4dd..eeb0fd2 100644
--- a/src/java/org/apache/solr/schema/FloatField.java
+++ b/src/java/org/apache/solr/schema/FloatField.java
@@ -47,7 +47,27 @@ public class FloatField extends FieldType {
   }
 
   public void write(TextResponseWriter writer, String name, Fieldable f) throws IOException {
-    writer.writeFloat(name, f.stringValue());
+    String s = f.stringValue();
+
+    // these values may be from a legacy lucene index, which may
+    // not be properly formatted in some output formats, or may
+    // incorrectly have a zero length.
+
+    if (s.length()==0) {
+      // zero length value means someone mistakenly indexed the value
+      // instead of simply leaving it out.  Write a null value instead of a numeric.
+      writer.writeNull(name);
+      return;
+    }
+
+    try {
+      float fval = Float.parseFloat(s);
+      writer.writeFloat(name, fval);
+    } catch (NumberFormatException e){
+      // can't parse - write out the contents as a string so nothing is lost and
+      // clients don't get a parse error.
+      writer.writeStr(name, s, true);
+    }
   }
 
   @Override
diff --git a/src/java/org/apache/solr/schema/TrieField.java b/src/java/org/apache/solr/schema/TrieField.java
index 6e90312..c33abaa 100644
--- a/src/java/org/apache/solr/schema/TrieField.java
+++ b/src/java/org/apache/solr/schema/TrieField.java
@@ -205,6 +205,26 @@ public class TrieField extends FieldType {
     return query;
   }
 
+  @Override
+  public String toInternal(String val) {
+    return super.toInternal(val);
+  }
+
+  @Override
+  public String toExternal(Fieldable f) {
+    return super.toExternal(f);
+  }
+
+  @Override
+  public String indexedToReadable(String indexedForm) {
+    return super.indexedToReadable(indexedForm);
+  }
+
+  @Override
+  public String storedToIndexed(Fieldable f) {
+    return super.storedToIndexed(f);
+  }
+
   public enum TrieTypes {
     INTEGER,
     LONG,
diff --git a/src/java/org/apache/solr/search/function/BoostedQuery.java b/src/java/org/apache/solr/search/function/BoostedQuery.java
index 7bbdf0c..67328ab 100755
--- a/src/java/org/apache/solr/search/function/BoostedQuery.java
+++ b/src/java/org/apache/solr/search/function/BoostedQuery.java
@@ -20,6 +20,7 @@ package org.apache.solr.search.function;
 import org.apache.lucene.search.*;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.util.ToStringUtils;
+import org.apache.solr.search.SolrIndexReader;
 
 import java.io.IOException;
 import java.util.Set;
@@ -89,7 +90,24 @@ public class BoostedQuery extends Query {
     }
 
     public Explanation explain(IndexReader reader, int doc) throws IOException {
-      return scorer(reader).explain(doc);
+      SolrIndexReader topReader = (SolrIndexReader)reader;
+      SolrIndexReader[] subReaders = topReader.getLeafReaders();
+      int[] offsets = topReader.getLeafOffsets();
+      int readerPos = SolrIndexReader.readerIndex(doc, offsets);
+      int readerBase = offsets[readerPos];
+
+      Explanation subQueryExpl = qWeight.explain(reader,doc);
+      if (!subQueryExpl.isMatch()) {
+        return subQueryExpl;
+      }
+
+      DocValues vals = boostVal.getValues(subReaders[readerPos]);
+      float sc = subQueryExpl.getValue() * vals.floatVal(doc-readerBase);
+      Explanation res = new ComplexExplanation(
+        true, sc, BoostedQuery.this.toString() + ", product of:");
+      res.addDetail(subQueryExpl);
+      res.addDetail(vals.explain(doc-readerBase));
+      return res;
     }
   }
 
diff --git a/src/java/org/apache/solr/search/function/FunctionQuery.java b/src/java/org/apache/solr/search/function/FunctionQuery.java
index 5fd3f50..3e84f99 100644
--- a/src/java/org/apache/solr/search/function/FunctionQuery.java
+++ b/src/java/org/apache/solr/search/function/FunctionQuery.java
@@ -19,6 +19,8 @@ package org.apache.solr.search.function;
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.search.*;
+import org.apache.solr.search.SolrIndexReader;
+
 import java.io.IOException;
 import java.util.Set;
 
@@ -84,7 +86,12 @@ public class FunctionQuery extends Query {
     }
 
     public Explanation explain(IndexReader reader, int doc) throws IOException {
-      return scorer(reader).explain(doc);
+      SolrIndexReader topReader = (SolrIndexReader)reader;
+      SolrIndexReader[] subReaders = topReader.getLeafReaders();
+      int[] offsets = topReader.getLeafOffsets();
+      int readerPos = SolrIndexReader.readerIndex(doc, offsets);
+      int readerBase = offsets[readerPos];
+      return scorer(subReaders[readerPos]).explain(doc-readerBase);
     }
   }
 
diff --git a/src/test/org/apache/solr/search/TestQueryTypes.java b/src/test/org/apache/solr/search/TestQueryTypes.java
index 0fa19a2..54fa261 100755
--- a/src/test/org/apache/solr/search/TestQueryTypes.java
+++ b/src/test/org/apache/solr/search/TestQueryTypes.java
@@ -45,6 +45,7 @@ public class TestQueryTypes extends AbstractSolrTestCase {
     assertU(adoc("id","5", "v_f","3.14159"));
     assertU(adoc("id","6", "v_f","8983"));
     assertU(adoc("id","7", "v_f","1.5"));
+    assertU(adoc("id","8", "v_ti","5"));
     assertU(optimize());
 
 
@@ -84,6 +85,11 @@ public class TestQueryTypes extends AbstractSolrTestCase {
             ,"//result[@numFound='1']"
             );    
 
+    assertQ(
+            req("q","{!field f=v_ti}5")
+            ,"//result[@numFound='1']"
+            );
+
      assertQ("test multi term field query on text type",
             req("q","{!field f=v_t}Hello  DUDE")
             ,"//result[@numFound='1']"

