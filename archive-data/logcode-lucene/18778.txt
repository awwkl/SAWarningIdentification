GitDiffStart: f1dda28cb88af175682c3c0bd7278a3263f1fd5f | Tue Nov 24 05:27:00 2009 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index 02dc26b..e6eb875 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -91,7 +91,9 @@ Bug Fixes
   set when streaming updates, rather than using UTF-8 as the HTTP headers
   indicated, leading to an encoding mismatch. (hossman, yonik)
 
-didn't specify the character set creating OutputStreamWriter
+* SOLR-1587: A distributed search request with fl=score, didn't match 
+  the behavior of a non-distributed request since it only returned
+  the id,score fields instead of all fields in addition to score. (yonik)
 
 
 Other Changes
diff --git a/src/java/org/apache/solr/handler/component/QueryComponent.java b/src/java/org/apache/solr/handler/component/QueryComponent.java
index 1e077fd..dc32c2c 100644
--- a/src/java/org/apache/solr/handler/component/QueryComponent.java
+++ b/src/java/org/apache/solr/handler/component/QueryComponent.java
@@ -513,10 +513,15 @@ public class QueryComponent extends SearchComponent
       // we already have the field sort values
       sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);
 
-      // make sure that the id is returned for correlation
+      // make sure that the id is returned for correlation.
       String fl = sreq.params.get(CommonParams.FL);
       if (fl != null) {
-       sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());
+         fl = fl.trim();
+        // currently, "score" is synonymous with "*,score" so
+        // don't add "id" if the fl is empty or "score" or it would change the meaning.
+         if (fl.length()!=0 && !"score".equals(fl) && !"*".equals(fl)) {
+           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());
+         }
       }      
 
       ArrayList<String> ids = new ArrayList<String>(shardDocs.size());
diff --git a/src/test/org/apache/solr/TestDistributedSearch.java b/src/test/org/apache/solr/TestDistributedSearch.java
index 48ab513..d77f596 100755
--- a/src/test/org/apache/solr/TestDistributedSearch.java
+++ b/src/test/org/apache/solr/TestDistributedSearch.java
@@ -619,6 +619,7 @@ public class TestDistributedSearch extends AbstractSolrTestCase {
     query("q","*:*", "sort",i1+" desc");
     query("q","*:*", "sort",i1+" asc");
     query("q","*:*", "sort",i1+" desc", "fl","*,score");
+    query("q","*:*", "sort",tlong+" asc", "fl","score");  // test legacy behavior - "score"=="*,score"
     query("q","*:*", "sort",tlong+" desc");
     handle.put("maxScore", SKIPVAL);
     query("q","{!func}"+i1);// does not expect maxScore. So if it comes ,ignore it. JavaBinCodec.writeSolrDocumentList()
diff --git a/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest.java b/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest.java
index 17baea1..d1fc87a 100644
--- a/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest.java
+++ b/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest.java
@@ -41,7 +41,9 @@ public class JettyWebappTest extends TestCase
   @Override
   public void setUp() throws Exception 
   {
-    System.setProperty("solr.solr.home", "../../../example/solr");
+    System.setPrope
+
+    rty("solr.solr.home", "../../../example/solr");
     String path = "../../webapp/web";
 
     server = new Server(port);

