GitDiffStart: 2db80e7db1e3ff1b1672df9fedc60a150f350717 | Mon Feb 12 00:21:36 2007 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index fc541a0..674c428 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -80,6 +80,8 @@ New Features
     (in ms), using <autoCommit><maxTime>10000</maxTime></autoCommit>.
     (Ryan McKinley via klaas).
 
+10. SOLR-116: IndexInfoRequestHandler added. (Erik Hatcher)
+
 Changes in runtime behavior
  1. Highlighting using DisMax will only pick up terms from the main 
     user query, not boost or filter queries (klaas).
diff --git a/src/java/org/apache/solr/handler/IndexInfoRequestHandler.java b/src/java/org/apache/solr/handler/IndexInfoRequestHandler.java
new file mode 100644
index 0000000..8748357
--- /dev/null
+++ b/src/java/org/apache/solr/handler/IndexInfoRequestHandler.java
@@ -0,0 +1,101 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.handler;
+
+import org.apache.lucene.index.IndexReader;
+import org.apache.solr.core.SolrCore;
+import org.apache.solr.core.SolrException;
+import org.apache.solr.handler.RequestHandlerBase;
+import org.apache.solr.schema.IndexSchema;
+import org.apache.solr.schema.FieldType;
+import org.apache.solr.schema.SchemaField;
+import org.apache.solr.search.SolrIndexSearcher;
+import org.apache.solr.request.SolrQueryRequest;
+import org.apache.solr.request.SolrQueryResponse;
+
+import java.util.Collection;
+import java.util.Map;
+import java.util.HashMap;
+
+public class IndexInfoRequestHandler extends RequestHandlerBase {
+
+  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) {
+
+    try {
+      SolrIndexSearcher searcher = req.getSearcher();
+      IndexReader reader = searcher.getReader();
+      Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);
+      Map<String,Object> fields = new HashMap<String,Object>();
+      IndexSchema schema = req.getSchema();
+      for (String fieldName : fieldNames) {
+        Map<String,String> fieldInfo = new HashMap<String,String>();
+
+        FieldType fieldType = schema.getFieldTypeNoEx(fieldName);
+        if( fieldType != null ) {
+          fieldInfo.put("type", fieldType.getTypeName());
+        }
+        else {
+          // This can happen if you change the schema
+          fieldInfo.put("type", null ); // "[unknown]"? nothing?
+        }
+
+        fields.put(fieldName, fieldInfo);
+      }
+      rsp.add("fields", fields);
+
+      Map<String,Number> indexInfo = new HashMap<String,Number>();
+      indexInfo.put("numDocs", reader.numDocs());
+      indexInfo.put("maxDoc", reader.maxDoc());
+      indexInfo.put("version", reader.getVersion());
+      // indexInfo.put("age", );  // computed from SolrIndexSearcher.openedAt?
+
+      rsp.add("index", indexInfo);
+      
+    } catch (SolrException e) {
+      rsp.setException(e);
+      return;
+    } catch (Exception e) {
+      SolrException.log(SolrCore.log, e);
+      rsp.setException(e);
+      return;
+    }
+  }
+
+  //////////////////////// SolrInfoMBeans methods //////////////////////
+
+  @Override
+  public String getDescription() {
+    return "The structure Solr request handler";
+  }
+
+  @Override
+  public String getVersion() {
+    return "$Revision: 501512 $";
+  }
+
+  @Override
+  public String getSourceId() {
+    return "$Id: IndexInfoRequestHandler.java 487199 2006-12-14 13:03:40Z bdelacretaz $";
+  }
+
+  @Override
+  public String getSource() {
+    return "$URL: https://svn.apache.org/repos/asf/lucene/solr/trunk/src/java/org/apache/solr/request/IndexInfoRequestHandler.java $";
+  }
+}
+
diff --git a/src/java/org/apache/solr/request/IndexInfoRequestHandler.java b/src/java/org/apache/solr/request/IndexInfoRequestHandler.java
deleted file mode 100644
index faad653..0000000
--- a/src/java/org/apache/solr/request/IndexInfoRequestHandler.java
+++ /dev/null
@@ -1,112 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.solr.request;
-
-import org.apache.lucene.index.IndexReader;
-import org.apache.solr.core.SolrCore;
-import org.apache.solr.core.SolrException;
-import org.apache.solr.core.SolrInfoMBean;
-import org.apache.solr.util.NamedList;
-import org.apache.solr.util.SimpleOrderedMap;
-import org.apache.solr.schema.IndexSchema;
-import org.apache.solr.schema.FieldType;
-import org.apache.solr.search.SolrIndexSearcher;
-
-import java.net.URL;
-import java.util.Collection;
-import java.util.Map;
-import java.util.HashMap;
-
-public class IndexInfoRequestHandler implements SolrRequestHandler, SolrInfoMBean {
-  public void init(NamedList args) {
-
-  }
-
-  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {
-
-    try {
-      SolrIndexSearcher searcher = req.getSearcher();
-      IndexReader reader = searcher.getReader();
-      Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);
-      Map fields = new HashMap();
-      IndexSchema schema = req.getSchema();
-      for (String fieldName : fieldNames) {
-        Map fieldInfo = new HashMap();
-
-        FieldType fieldType = schema.getFieldTypeNoEx(fieldName);
-        fieldInfo.put("type", fieldType.getTypeName());
-
-        fields.put(fieldName, fieldInfo);
-      }
-      rsp.add("fields", fields);
-
-      Map indexInfo = new HashMap();
-      indexInfo.put("numDocs", reader.numDocs());
-      indexInfo.put("maxDoc", reader.maxDoc());
-      indexInfo.put("version", reader.getVersion());
-      // indexInfo.put("age", );  // computed from SolrIndexSearcher.openedAt?
-
-      rsp.add("index", indexInfo);
-
-      rsp.add("NOTICE","This interface is experimental and may be changing");
-    } catch (SolrException e) {
-      rsp.setException(e);
-      return;
-    } catch (Exception e) {
-      SolrException.log(SolrCore.log, e);
-      rsp.setException(e);
-      return;
-    }
-  }
-
-  //////////////////////// SolrInfoMBeans methods //////////////////////
-
-
-  public String getName() {
-    return IndexInfoRequestHandler.class.getName();
-  }
-
-  public String getVersion() {
-    return SolrCore.version;
-  }
-
-  public String getDescription() {
-    return "The structure Solr request handler";
-  }
-
-  public Category getCategory() {
-    return Category.QUERYHANDLER;
-  }
-
-  public String getSourceId() {
-    return "$Id: IndexInfoRequestHandler.java 487199 2006-12-14 13:03:40Z bdelacretaz $";
-  }
-
-  public String getSource() {
-    return "$URL: https://svn.apache.org/repos/asf/lucene/solr/trunk/src/java/org/apache/solr/request/IndexInfoRequestHandler.java $";
-  }
-
-  public URL[] getDocs() {
-    return null;
-  }
-
-  public NamedList getStatistics() {
-    return new SimpleOrderedMap();
-  }
-}
-

