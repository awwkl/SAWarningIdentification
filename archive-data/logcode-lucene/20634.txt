GitDiffStart: 23ab5e1869b5e5fa45f282335b7503404a202c39 | Thu Feb 5 19:38:52 2009 +0000
diff --git a/src/java/org/apache/solr/core/RunExecutableListener.java b/src/java/org/apache/solr/core/RunExecutableListener.java
index 2e5404d..01ac634 100644
--- a/src/java/org/apache/solr/core/RunExecutableListener.java
+++ b/src/java/org/apache/solr/core/RunExecutableListener.java
@@ -61,6 +61,14 @@ class RunExecutableListener extends AbstractSolrEventListener {
     if ("false".equals(args.get("wait")) || Boolean.FALSE.equals(args.get("wait"))) wait=false;
   }
 
+  /**
+   * External executable listener.
+   * 
+   * @param callback Unused (As of solr 1.4-dev)
+   * @return Error code indicating if the command has executed successfully. <br />
+   *  0 , indicates normal termination.<br />
+   *  non-zero , otherwise.
+   */
   protected int exec(String callback) {
     int ret = 0;
 
@@ -76,6 +84,7 @@ class RunExecutableListener extends AbstractSolrEventListener {
           ret = proc.waitFor();
         } catch (InterruptedException e) {
           SolrException.log(log,e);
+          ret = INVALID_PROCESS_RETURN_CODE;
         }
       }
 
@@ -86,6 +95,7 @@ class RunExecutableListener extends AbstractSolrEventListener {
     } catch (IOException e) {
       // don't throw exception, just log it...
       SolrException.log(log,e);
+      ret = INVALID_PROCESS_RETURN_CODE;
     }
 
     return ret;
@@ -103,4 +113,7 @@ class RunExecutableListener extends AbstractSolrEventListener {
     exec("newSearcher");
   }
 
+  /** Non-zero value for an invalid return code **/
+  private static int INVALID_PROCESS_RETURN_CODE = -1;
+
 }

