GitDiffStart: 4091d801c103609a69ff9d7607e92be378b99a49 | Mon Jan 30 14:13:07 2012 +0000
diff --git a/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java b/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
index 0ac1a62..8143b19 100644
--- a/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
+++ b/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
@@ -776,15 +776,6 @@ public class MemoryIndex {
       return fieldInfos;
     }
 
-    @Override
-    public int docFreq(String field, BytesRef term) {
-      Info info = getInfo(field);
-      int freq = 0;
-      if (info != null) freq = info.getPositions(term) != null ? 1 : 0;
-      if (DEBUG) System.err.println("MemoryIndexReader.docFreq: " + field + ":" + term + ", freq:" + freq);
-      return freq;
-    }
-
     private class MemoryFields extends Fields {
       @Override
       public FieldsEnum iterator() {
diff --git a/lucene/src/java/org/apache/lucene/index/AtomicReader.java b/lucene/src/java/org/apache/lucene/index/AtomicReader.java
index c25780c..40aba3a 100644
--- a/lucene/src/java/org/apache/lucene/index/AtomicReader.java
+++ b/lucene/src/java/org/apache/lucene/index/AtomicReader.java
@@ -83,19 +83,11 @@ public abstract class AtomicReader extends IndexReader {
    * Returns {@link Fields} for this reader.
    * This method may return null if the reader has no
    * postings.
-   *
-   * <p><b>NOTE</b>: if this is a multi reader ({@link
-   * #getSequentialSubReaders} is not null) then this
-   * method will throw UnsupportedOperationException.  If
-   * you really need a {@link Fields} for such a reader,
-   * use {@link MultiFields#getFields}.  However, for
-   * performance reasons, it's best to get all sub-readers
-   * using {@link ReaderUtil#gatherSubReaders} and iterate
-   * through them yourself. */
+   */
   public abstract Fields fields() throws IOException;
   
   @Override
-  public int docFreq(String field, BytesRef term) throws IOException {
+  public final int docFreq(String field, BytesRef term) throws IOException {
     final Fields fields = fields();
     if (fields == null) {
       return 0;
@@ -225,12 +217,7 @@ public abstract class AtomicReader extends IndexReader {
 
   /** Returns the number of unique terms (across all fields)
    *  in this reader.
-   *
-   *  @return number of unique terms or -1 if this count
-   *  cannot be easily determined (eg Multi*Readers).
-   *  Instead, you should call {@link
-   *  #getSequentialSubReaders} and ask each sub reader for
-   *  its unique term count. */
+   */
   public final long getUniqueTermCount() throws IOException {
     final Fields fields = fields();
     if (fields == null) {
@@ -243,15 +230,7 @@ public abstract class AtomicReader extends IndexReader {
    * Returns {@link DocValues} for this field.
    * This method may return null if the reader has no per-document
    * values stored.
-   *
-   * <p><b>NOTE</b>: if this is a multi reader ({@link
-   * #getSequentialSubReaders} is not null) then this
-   * method will throw UnsupportedOperationException.  If
-   * you really need {@link DocValues} for such a reader,
-   * use {@link MultiDocValues#getDocValues(IndexReader,String)}.  However, for
-   * performance reasons, it's best to get all sub-readers
-   * using {@link ReaderUtil#gatherSubReaders} and iterate
-   * through them yourself. */
+   */
   public abstract DocValues docValues(String field) throws IOException;
   
   public abstract DocValues normValues(String field) throws IOException;
diff --git a/lucene/src/java/org/apache/lucene/index/FilterIndexReader.java b/lucene/src/java/org/apache/lucene/index/FilterIndexReader.java
index 45908ca..3a55276 100644
--- a/lucene/src/java/org/apache/lucene/index/FilterIndexReader.java
+++ b/lucene/src/java/org/apache/lucene/index/FilterIndexReader.java
@@ -333,12 +333,6 @@ public class FilterIndexReader extends AtomicReader {
   }
 
   @Override
-  public int docFreq(String field, BytesRef t) throws IOException {
-    ensureOpen();
-    return in.docFreq(field, t);
-  }
-  
-  @Override
   protected void doClose() throws IOException {
     in.close();
   }
diff --git a/lucene/src/java/org/apache/lucene/index/ParallelReader.java b/lucene/src/java/org/apache/lucene/index/ParallelReader.java
index 6f99aca..515e537 100644
--- a/lucene/src/java/org/apache/lucene/index/ParallelReader.java
+++ b/lucene/src/java/org/apache/lucene/index/ParallelReader.java
@@ -261,13 +261,6 @@ public class ParallelReader extends AtomicReader {
     return reader==null ? false : reader.hasNorms(field);
   }
 
-  @Override
-  public int docFreq(String field, BytesRef term) throws IOException {
-    ensureOpen();
-    AtomicReader reader = fieldToReader.get(field);
-    return reader == null? 0 : reader.docFreq(field, term);
-  }
-
   // for testing
   AtomicReader[] getSubReaders() {
     return readers.toArray(new AtomicReader[readers.size()]);

