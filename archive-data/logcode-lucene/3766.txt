GitDiffStart: 866a0bbcb19f7e24dc913f5b22a99b71bd3aad6c | Mon Apr 13 03:55:12 2015 +0000
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java
index b7f1b28..db1cc2c 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight.java
@@ -26,10 +26,10 @@ import org.apache.lucene.index.IndexReaderContext;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermContext;
+import org.apache.lucene.index.Terms;
 import org.apache.lucene.search.ComplexExplanation;
 import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.TermStatistics;
 import org.apache.lucene.search.Weight;
@@ -46,8 +46,7 @@ public class SpanWeight extends Weight {
   protected final SpanQuery query;
   protected Similarity.SimWeight stats;
 
-  public SpanWeight(SpanQuery query, IndexSearcher searcher)
-    throws IOException {
+  public SpanWeight(SpanQuery query, IndexSearcher searcher) throws IOException {
     super(query);
     this.similarity = searcher.getSimilarity();
     this.query = query;
@@ -89,6 +88,10 @@ public class SpanWeight extends Weight {
     if (stats == null) {
       return null;
     }
+    Terms terms = context.reader().terms(query.getField());
+    if (terms != null && terms.hasPositions() == false) {
+      throw new IllegalStateException("field \"" + query.getField() + "\" was indexed without position data; cannot run SpanQuery (query=" + query + ")");
+    }
     Spans spans = query.getSpans(context, acceptDocs, termContexts);
     return (spans == null) ? null : new SpanScorer(spans, this, similarity.simScorer(stats, context));
   }
diff --git a/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanNearQuery.java b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanNearQuery.java
new file mode 100644
index 0000000..4ed7106
--- /dev/null
+++ b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanNearQuery.java
@@ -0,0 +1,82 @@
+package org.apache.lucene.search.spans;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.StringField;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.RandomIndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.QueryUtils;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.LuceneTestCase;
+
+/** Basic tests for SpanNearQuery */
+public class TestSpanNearQuery extends LuceneTestCase {
+  
+  public void testHashcodeEquals() {
+    SpanTermQuery q1 = new SpanTermQuery(new Term("field", "foo"));
+    SpanTermQuery q2 = new SpanTermQuery(new Term("field", "bar"));
+    SpanTermQuery q3 = new SpanTermQuery(new Term("field", "baz"));
+    
+    SpanNearQuery near1 = new SpanNearQuery(new SpanQuery[] { q1, q2 }, 10, true);
+    SpanNearQuery near2 = new SpanNearQuery(new SpanQuery[] { q2, q3 }, 10, true);
+    QueryUtils.check(near1);
+    QueryUtils.check(near2);
+    QueryUtils.checkUnequal(near1, near2);
+  }
+  
+  public void testDifferentField() throws Exception {
+    SpanTermQuery q1 = new SpanTermQuery(new Term("field1", "foo"));
+    SpanTermQuery q2 = new SpanTermQuery(new Term("field2", "bar"));
+    try {
+      new SpanNearQuery(new SpanQuery[] { q1, q2 }, 10, true);
+      fail("didn't get expected exception");
+    } catch (IllegalArgumentException expected) {
+      assertTrue(expected.getMessage().contains("must have same field"));
+    }
+  }
+  
+  public void testNoPositions() throws IOException {
+    Directory dir = newDirectory();
+    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);
+    Document doc = new Document();
+    doc.add(new StringField("foo", "bar", Field.Store.NO));
+    iw.addDocument(doc);
+    
+    IndexReader ir = iw.getReader();
+    iw.close();
+    
+    IndexSearcher is = new IndexSearcher(ir);
+    SpanTermQuery query = new SpanTermQuery(new Term("foo", "bar"));
+    SpanTermQuery query2 = new SpanTermQuery(new Term("foo", "baz"));
+
+    try {
+      is.search(new SpanNearQuery(new SpanQuery[] { query, query2 }, 10, true), 5);
+      fail("didn't get expected exception");
+    } catch (IllegalStateException expected) {
+      assertTrue(expected.getMessage().contains("was indexed without position data"));
+    }
+    ir.close();
+    dir.close();
+  }
+}
diff --git a/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanNotQuery.java b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanNotQuery.java
new file mode 100644
index 0000000..2f39a72
--- /dev/null
+++ b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanNotQuery.java
@@ -0,0 +1,82 @@
+package org.apache.lucene.search.spans;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.StringField;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.RandomIndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.QueryUtils;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.LuceneTestCase;
+
+/** Basic tests for SpanNotQuery */
+public class TestSpanNotQuery extends LuceneTestCase {
+  
+  public void testHashcodeEquals() {
+    SpanTermQuery q1 = new SpanTermQuery(new Term("field", "foo"));
+    SpanTermQuery q2 = new SpanTermQuery(new Term("field", "bar"));
+    SpanTermQuery q3 = new SpanTermQuery(new Term("field", "baz"));
+    
+    SpanNotQuery not1 = new SpanNotQuery(q1, q2);
+    SpanNotQuery not2 = new SpanNotQuery(q2, q3);
+    QueryUtils.check(not1);
+    QueryUtils.check(not2);
+    QueryUtils.checkUnequal(not1, not2);
+  }
+  
+  public void testDifferentField() throws Exception {
+    SpanTermQuery q1 = new SpanTermQuery(new Term("field1", "foo"));
+    SpanTermQuery q2 = new SpanTermQuery(new Term("field2", "bar"));
+    try {
+      new SpanNotQuery(q1, q2);
+      fail("didn't get expected exception");
+    } catch (IllegalArgumentException expected) {
+      assertTrue(expected.getMessage().contains("must have same field"));
+    }
+  }
+  
+  public void testNoPositions() throws IOException {
+    Directory dir = newDirectory();
+    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);
+    Document doc = new Document();
+    doc.add(new StringField("foo", "bar", Field.Store.NO));
+    iw.addDocument(doc);
+    
+    IndexReader ir = iw.getReader();
+    iw.close();
+    
+    IndexSearcher is = new IndexSearcher(ir);
+    SpanTermQuery query = new SpanTermQuery(new Term("foo", "bar"));
+    SpanTermQuery query2 = new SpanTermQuery(new Term("foo", "baz"));
+
+    try {
+      is.search(new SpanNotQuery(query, query2), 5);
+      fail("didn't get expected exception");
+    } catch (IllegalStateException expected) {
+      assertTrue(expected.getMessage().contains("was indexed without position data"));
+    }
+    ir.close();
+    dir.close();
+  }
+}
diff --git a/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanOrQuery.java b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanOrQuery.java
index 150700b..0d0822b 100644
--- a/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanOrQuery.java
+++ b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanOrQuery.java
@@ -41,4 +41,15 @@ public class TestSpanOrQuery extends LuceneTestCase {
     SpanOrQuery b = new SpanOrQuery();
     assertTrue("empty should equal", a.equals(b));
   }
+  
+  public void testDifferentField() throws Exception {
+    SpanTermQuery q1 = new SpanTermQuery(new Term("field1", "foo"));
+    SpanTermQuery q2 = new SpanTermQuery(new Term("field2", "bar"));
+    try {
+      new SpanOrQuery(q1, q2);
+      fail("didn't get expected exception");
+    } catch (IllegalArgumentException expected) {
+      assertTrue(expected.getMessage().contains("must have same field"));
+    }
+  }
 }
diff --git a/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence.java b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence.java
index 04c80d9..309efd3 100644
--- a/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence.java
+++ b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence.java
@@ -42,8 +42,22 @@ public class TestSpanSearchEquivalence extends SearchEquivalenceTestBase {
     assertSameSet(new TermQuery(t1), spanQuery(new SpanTermQuery(t1)));
   }
   
+  /** SpanOrQuery(A) = SpanTermQuery(A) */
+  public void testSpanOrVersusTerm() throws Exception {
+    Term t1 = randomTerm();
+    SpanQuery term = spanQuery(new SpanTermQuery(t1));
+    assertSameSet(spanQuery(new SpanOrQuery(term)), term);
+  }
+  
+  /** SpanOrQuery(A, A) = SpanTermQuery(A) */
+  public void testSpanOrDoubleVersusTerm() throws Exception {
+    Term t1 = randomTerm();
+    SpanQuery term = spanQuery(new SpanTermQuery(t1));
+    assertSameSet(spanQuery(new SpanOrQuery(term, term)), term);
+  }
+  
   /** SpanOrQuery(A, B) = (A B) */
-  public void testSpanOrVersusBoolean() throws Exception {
+  public void testSpanOrVersusBooleanTerm() throws Exception {
     Term t1 = randomTerm();
     Term t2 = randomTerm();
     BooleanQuery q1 = new BooleanQuery();
@@ -53,6 +67,27 @@ public class TestSpanSearchEquivalence extends SearchEquivalenceTestBase {
     assertSameSet(q1, q2);
   }
   
+  /** SpanOrQuery(SpanNearQuery[A B], SpanNearQuery[C D]) = (SpanNearQuery[A B], SpanNearQuery[C D]) */
+  public void testSpanOrVersusBooleanNear() throws Exception {
+    Term t1 = randomTerm();
+    Term t2 = randomTerm();
+    Term t3 = randomTerm();
+    Term t4 = randomTerm();
+    SpanQuery near1 = spanQuery(new SpanNearQuery(new SpanQuery[] { 
+                                               spanQuery(new SpanTermQuery(t1)), 
+                                               spanQuery(new SpanTermQuery(t2)) 
+                                             }, 10, random().nextBoolean()));
+    SpanQuery near2 = spanQuery(new SpanNearQuery(new SpanQuery[] { 
+                                               spanQuery(new SpanTermQuery(t3)), 
+                                               spanQuery(new SpanTermQuery(t4)) 
+                                             }, 10, random().nextBoolean()));
+    BooleanQuery q1 = new BooleanQuery();
+    q1.add(near1, Occur.SHOULD);
+    q1.add(near2, Occur.SHOULD);
+    SpanQuery q2 = spanQuery(new SpanOrQuery(near1, near2));
+    assertSameSet(q1, q2);
+  }
+  
   /** SpanNotQuery(A, B) ?? SpanTermQuery(A) */
   public void testSpanNotVersusSpanTerm() throws Exception {
     Term t1 = randomTerm();
diff --git a/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanTermQuery.java b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanTermQuery.java
index 13934ce..7bf5f5a 100644
--- a/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanTermQuery.java
+++ b/lucene/core/src/test/org/apache/lucene/search/spans/TestSpanTermQuery.java
@@ -17,8 +17,17 @@ package org.apache.lucene.search.spans;
  * limitations under the License.
  */
 
+import java.io.IOException;
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.StringField;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
+import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.QueryUtils;
+import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 
 /** Basic tests for SpanTermQuery */
@@ -31,4 +40,26 @@ public class TestSpanTermQuery extends LuceneTestCase {
     QueryUtils.check(q2);
     QueryUtils.checkUnequal(q1, q2);
   }
+  
+  public void testNoPositions() throws IOException {
+    Directory dir = newDirectory();
+    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);
+    Document doc = new Document();
+    doc.add(new StringField("foo", "bar", Field.Store.NO));
+    iw.addDocument(doc);
+    
+    IndexReader ir = iw.getReader();
+    iw.close();
+    
+    IndexSearcher is = new IndexSearcher(ir);
+    SpanTermQuery query = new SpanTermQuery(new Term("foo", "bar"));
+    try {
+      is.search(query, 5);
+      fail("didn't get expected exception");
+    } catch (IllegalStateException expected) {
+      assertTrue(expected.getMessage().contains("was indexed without position data"));
+    }
+    ir.close();
+    dir.close();
+  }
 }

