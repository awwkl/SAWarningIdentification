GitDiffStart: c3d2d45dcaa377cc18b716a614b74a30886784ef | Sat Mar 27 09:17:34 2010 +0000
diff --git a/lucene/contrib/xml-query-parser/src/test/com/apache/lucene/xmlparser/builders/NumericRangeFilterBuilderTestCase.java b/lucene/contrib/xml-query-parser/src/test/com/apache/lucene/xmlparser/builders/NumericRangeFilterBuilderTestCase.java
deleted file mode 100644
index 8acf922..0000000
--- a/lucene/contrib/xml-query-parser/src/test/com/apache/lucene/xmlparser/builders/NumericRangeFilterBuilderTestCase.java
+++ /dev/null
@@ -1,216 +0,0 @@
-package com.apache.lucene.xmlparser.builders;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-
-import junit.framework.TestCase;
-
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexWriter.MaxFieldLength;
-import org.apache.lucene.search.Filter;
-import org.apache.lucene.search.NumericRangeFilter;
-import org.apache.lucene.store.RAMDirectory;
-import org.apache.lucene.xmlparser.ParserException;
-import org.apache.lucene.xmlparser.builders.NumericRangeFilterBuilder;
-import org.w3c.dom.Document;
-import org.xml.sax.SAXException;
-
-public class NumericRangeFilterBuilderTestCase extends TestCase {
-
-	public void testGetFilterHandleNumericParseErrorStrict() throws Exception {
-		NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();
-		filterBuilder.setStrictMode(true);
-
-		String xml = "<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>";
-		Document doc = getDocumentFromString(xml);
-		try {
-			filterBuilder.getFilter(doc.getDocumentElement());
-		} catch (ParserException e) {
-			return;
-		}
-		fail("Expected to throw " + ParserException.class);
-	}
-
-	public void testGetFilterHandleNumericParseError() throws Exception {
-		NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();
-		filterBuilder.setStrictMode(false);
-
-		String xml = "<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>";
-		Document doc = getDocumentFromString(xml);
-		Filter filter = filterBuilder.getFilter(doc.getDocumentElement());
-
-		RAMDirectory ramDir = new RAMDirectory();
-		IndexWriter writer = new IndexWriter(ramDir, null, MaxFieldLength.UNLIMITED);
-		try
-		{
-			IndexReader reader = IndexReader.open(ramDir, true);
-			try
-			{
-				assertNull(filter.getDocIdSet(reader));
-			}
-			finally
-			{
-				reader.close();
-			}
-		}
-		finally
-		{
-			writer.commit();
-			writer.close();
-		}
-	}
-
-	public void testGetFilterInt() throws Exception {
-		NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();
-		filterBuilder.setStrictMode(true);
-
-		String xml = "<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>";
-		Document doc = getDocumentFromString(xml);
-		Filter filter = filterBuilder.getFilter(doc.getDocumentElement());
-		assertTrue(filter instanceof NumericRangeFilter<?>);
-		@SuppressWarnings("unchecked")
-		NumericRangeFilter<Integer> numRangeFilter = (NumericRangeFilter<Integer>) filter;
-		assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());
-		assertEquals(Integer.valueOf(10), numRangeFilter.getMax());
-		assertEquals("AGE", numRangeFilter.getField());
-		assertTrue(numRangeFilter.includesMin());
-		assertTrue(numRangeFilter.includesMax());
-
-		String xml2 = "<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>";
-		Document doc2 = getDocumentFromString(xml2);
-		Filter filter2 = filterBuilder.getFilter(doc2.getDocumentElement());
-		assertTrue(filter2 instanceof NumericRangeFilter<?>);
-		@SuppressWarnings("unchecked")
-		NumericRangeFilter<Integer> numRangeFilter2 = (NumericRangeFilter) filter2;
-		assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());
-		assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());
-		assertEquals("AGE", numRangeFilter2.getField());
-		assertTrue(numRangeFilter2.includesMin());
-		assertFalse(numRangeFilter2.includesMax());
-	}
-
-	public void testGetFilterLong() throws Exception {
-		NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();
-		filterBuilder.setStrictMode(true);
-
-		String xml = "<NumericRangeFilter fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000'/>";
-		Document doc = getDocumentFromString(xml);
-		Filter filter = filterBuilder.getFilter(doc.getDocumentElement());
-		assertTrue(filter instanceof NumericRangeFilter<?>);
-		@SuppressWarnings("unchecked")
-		NumericRangeFilter<Long> numRangeFilter = (NumericRangeFilter) filter;
-		assertEquals(Long.valueOf(-2321L), numRangeFilter.getMin());
-		assertEquals(Long.valueOf(60000000L), numRangeFilter.getMax());
-		assertEquals("AGE", numRangeFilter.getField());
-		assertTrue(numRangeFilter.includesMin());
-		assertTrue(numRangeFilter.includesMax());
-
-		String xml2 = "<NumericRangeFilter fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000' includeUpper='false'/>";
-		Document doc2 = getDocumentFromString(xml2);
-		Filter filter2 = filterBuilder.getFilter(doc2.getDocumentElement());
-		assertTrue(filter2 instanceof NumericRangeFilter<?>);
-		@SuppressWarnings("unchecked")
-		NumericRangeFilter<Long> numRangeFilter2 = (NumericRangeFilter) filter2;
-		assertEquals(Long.valueOf(-2321L), numRangeFilter2.getMin());
-		assertEquals(Long.valueOf(60000000L), numRangeFilter2.getMax());
-		assertEquals("AGE", numRangeFilter2.getField());
-		assertTrue(numRangeFilter2.includesMin());
-		assertFalse(numRangeFilter2.includesMax());
-	}
-
-	public void testGetFilterDouble() throws Exception {
-		NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();
-		filterBuilder.setStrictMode(true);
-
-		String xml = "<NumericRangeFilter fieldName='AGE' type='doubLe' lowerTerm='-23.21' upperTerm='60000.00023'/>";
-		Document doc = getDocumentFromString(xml);
-
-		Filter filter = filterBuilder.getFilter(doc.getDocumentElement());
-		assertTrue(filter instanceof NumericRangeFilter<?>);
-		@SuppressWarnings("unchecked")
-		NumericRangeFilter<Double> numRangeFilter = (NumericRangeFilter) filter;
-		assertEquals(Double.valueOf(-23.21d), numRangeFilter.getMin());
-		assertEquals(Double.valueOf(60000.00023d), numRangeFilter.getMax());
-		assertEquals("AGE", numRangeFilter.getField());
-		assertTrue(numRangeFilter.includesMin());
-		assertTrue(numRangeFilter.includesMax());
-
-		String xml2 = "<NumericRangeFilter fieldName='AGE' type='doubLe' lowerTerm='-23.21' upperTerm='60000.00023' includeUpper='false'/>";
-		Document doc2 = getDocumentFromString(xml2);
-		Filter filter2 = filterBuilder.getFilter(doc2.getDocumentElement());
-		assertTrue(filter2 instanceof NumericRangeFilter<?>);
-		@SuppressWarnings("unchecked")
-		NumericRangeFilter<Double> numRangeFilter2 = (NumericRangeFilter) filter2;
-		assertEquals(Double.valueOf(-23.21d), numRangeFilter2.getMin());
-		assertEquals(Double.valueOf(60000.00023d), numRangeFilter2.getMax());
-		assertEquals("AGE", numRangeFilter2.getField());
-		assertTrue(numRangeFilter2.includesMin());
-		assertFalse(numRangeFilter2.includesMax());
-	}
-
-	public void testGetFilterFloat() throws Exception {
-		NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();
-		filterBuilder.setStrictMode(true);
-
-		String xml = "<NumericRangeFilter fieldName='AGE' type='FLOAT' lowerTerm='-2.321432' upperTerm='32432.23'/>";
-		Document doc = getDocumentFromString(xml);
-
-		Filter filter = filterBuilder.getFilter(doc.getDocumentElement());
-		assertTrue(filter instanceof NumericRangeFilter<?>);
-		@SuppressWarnings("unchecked")
-		NumericRangeFilter<Float> numRangeFilter = (NumericRangeFilter) filter;
-		assertEquals(Float.valueOf(-2.321432f), numRangeFilter.getMin());
-		assertEquals(Float.valueOf(32432.23f), numRangeFilter.getMax());
-		assertEquals("AGE", numRangeFilter.getField());
-		assertTrue(numRangeFilter.includesMin());
-		assertTrue(numRangeFilter.includesMax());
-
-		String xml2 = "<NumericRangeFilter fieldName='AGE' type='FLOAT' lowerTerm='-2.321432' upperTerm='32432.23' includeUpper='false' precisionStep='2' />";
-		Document doc2 = getDocumentFromString(xml2);
-
-		Filter filter2 = filterBuilder.getFilter(doc2.getDocumentElement());
-		assertTrue(filter2 instanceof NumericRangeFilter<?>);
-		@SuppressWarnings("unchecked")
-		NumericRangeFilter<Float> numRangeFilter2 = (NumericRangeFilter) filter2;
-		assertEquals(Float.valueOf(-2.321432f), numRangeFilter2.getMin());
-		assertEquals(Float.valueOf(32432.23f), numRangeFilter2.getMax());
-		assertEquals("AGE", numRangeFilter2.getField());
-		assertTrue(numRangeFilter2.includesMin());
-		assertFalse(numRangeFilter2.includesMax());
-	}
-
-	private static Document getDocumentFromString(String str)
-			throws SAXException, IOException, ParserConfigurationException {
-		InputStream is = new ByteArrayInputStream(str.getBytes());
-		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-		factory.setNamespaceAware(true);
-		DocumentBuilder builder = factory.newDocumentBuilder();
-		Document doc = builder.parse(is);
-		is.close();
-		return doc;
-	}
-
-}
diff --git a/lucene/contrib/xml-query-parser/src/test/com/apache/lucene/xmlparser/builders/NumericRangeQueryBuilderTestCase.java b/lucene/contrib/xml-query-parser/src/test/com/apache/lucene/xmlparser/builders/NumericRangeQueryBuilderTestCase.java
deleted file mode 100644
index 1c9e81e..0000000
--- a/lucene/contrib/xml-query-parser/src/test/com/apache/lucene/xmlparser/builders/NumericRangeQueryBuilderTestCase.java
+++ /dev/null
@@ -1,178 +0,0 @@
-package com.apache.lucene.xmlparser.builders;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-
-import junit.framework.TestCase;
-
-import org.apache.lucene.search.NumericRangeQuery;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.xmlparser.ParserException;
-import org.apache.lucene.xmlparser.builders.NumericRangeQueryBuilder;
-import org.w3c.dom.Document;
-import org.xml.sax.SAXException;
-
-public class NumericRangeQueryBuilderTestCase extends TestCase {
-
-	public void testGetFilterHandleNumericParseErrorStrict() throws Exception {
-		NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();
-
-		String xml = "<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>";
-		Document doc = getDocumentFromString(xml);
-		try {
-			filterBuilder.getQuery(doc.getDocumentElement());
-		} catch (ParserException e) {
-			return;
-		}
-		fail("Expected to throw " + ParserException.class);
-	}
-
-	public void testGetFilterInt() throws Exception {
-		NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();
-
-		String xml = "<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>";
-		Document doc = getDocumentFromString(xml);
-		Query filter = filterBuilder.getQuery(doc.getDocumentElement());
-		assertTrue(filter instanceof NumericRangeQuery<?>);
-		@SuppressWarnings("unchecked")
-		NumericRangeQuery<Integer> numRangeFilter = (NumericRangeQuery<Integer>) filter;
-		assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());
-		assertEquals(Integer.valueOf(10), numRangeFilter.getMax());
-		assertEquals("AGE", numRangeFilter.getField());
-		assertTrue(numRangeFilter.includesMin());
-		assertTrue(numRangeFilter.includesMax());
-
-		String xml2 = "<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>";
-		Document doc2 = getDocumentFromString(xml2);
-		Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());
-		assertTrue(filter2 instanceof NumericRangeQuery<?>);
-		@SuppressWarnings("unchecked")
-		NumericRangeQuery<Integer> numRangeFilter2 = (NumericRangeQuery) filter2;
-		assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());
-		assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());
-		assertEquals("AGE", numRangeFilter2.getField());
-		assertTrue(numRangeFilter2.includesMin());
-		assertFalse(numRangeFilter2.includesMax());
-	}
-
-	public void testGetFilterLong() throws Exception {
-		NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();
-
-		String xml = "<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000'/>";
-		Document doc = getDocumentFromString(xml);
-		Query filter = filterBuilder.getQuery(doc.getDocumentElement());
-		assertTrue(filter instanceof NumericRangeQuery<?>);
-		@SuppressWarnings("unchecked")
-		NumericRangeQuery<Long> numRangeFilter = (NumericRangeQuery) filter;
-		assertEquals(Long.valueOf(-2321L), numRangeFilter.getMin());
-		assertEquals(Long.valueOf(60000000L), numRangeFilter.getMax());
-		assertEquals("AGE", numRangeFilter.getField());
-		assertTrue(numRangeFilter.includesMin());
-		assertTrue(numRangeFilter.includesMax());
-
-		String xml2 = "<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000' includeUpper='false'/>";
-		Document doc2 = getDocumentFromString(xml2);
-		Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());
-		assertTrue(filter2 instanceof NumericRangeQuery<?>);
-		@SuppressWarnings("unchecked")
-		NumericRangeQuery<Long> numRangeFilter2 = (NumericRangeQuery) filter2;
-		assertEquals(Long.valueOf(-2321L), numRangeFilter2.getMin());
-		assertEquals(Long.valueOf(60000000L), numRangeFilter2.getMax());
-		assertEquals("AGE", numRangeFilter2.getField());
-		assertTrue(numRangeFilter2.includesMin());
-		assertFalse(numRangeFilter2.includesMax());
-	}
-
-	public void testGetFilterDouble() throws Exception {
-		NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();
-
-		String xml = "<NumericRangeQuery fieldName='AGE' type='doubLe' lowerTerm='-23.21' upperTerm='60000.00023'/>";
-		Document doc = getDocumentFromString(xml);
-
-		Query filter = filterBuilder.getQuery(doc.getDocumentElement());
-		assertTrue(filter instanceof NumericRangeQuery<?>);
-		@SuppressWarnings("unchecked")
-		NumericRangeQuery<Double> numRangeFilter = (NumericRangeQuery) filter;
-		assertEquals(Double.valueOf(-23.21d), numRangeFilter.getMin());
-		assertEquals(Double.valueOf(60000.00023d), numRangeFilter.getMax());
-		assertEquals("AGE", numRangeFilter.getField());
-		assertTrue(numRangeFilter.includesMin());
-		assertTrue(numRangeFilter.includesMax());
-
-		String xml2 = "<NumericRangeQuery fieldName='AGE' type='doubLe' lowerTerm='-23.21' upperTerm='60000.00023' includeUpper='false'/>";
-		Document doc2 = getDocumentFromString(xml2);
-		Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());
-		assertTrue(filter2 instanceof NumericRangeQuery<?>);
-		@SuppressWarnings("unchecked")
-		NumericRangeQuery<Double> numRangeFilter2 = (NumericRangeQuery) filter2;
-		assertEquals(Double.valueOf(-23.21d), numRangeFilter2.getMin());
-		assertEquals(Double.valueOf(60000.00023d), numRangeFilter2.getMax());
-		assertEquals("AGE", numRangeFilter2.getField());
-		assertTrue(numRangeFilter2.includesMin());
-		assertFalse(numRangeFilter2.includesMax());
-	}
-
-	public void testGetFilterFloat() throws Exception {
-		NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();
-
-		String xml = "<NumericRangeQuery fieldName='AGE' type='FLOAT' lowerTerm='-2.321432' upperTerm='32432.23'/>";
-		Document doc = getDocumentFromString(xml);
-
-		Query filter = filterBuilder.getQuery(doc.getDocumentElement());
-		assertTrue(filter instanceof NumericRangeQuery<?>);
-		@SuppressWarnings("unchecked")
-		NumericRangeQuery<Float> numRangeFilter = (NumericRangeQuery) filter;
-		assertEquals(Float.valueOf(-2.321432f), numRangeFilter.getMin());
-		assertEquals(Float.valueOf(32432.23f), numRangeFilter.getMax());
-		assertEquals("AGE", numRangeFilter.getField());
-		assertTrue(numRangeFilter.includesMin());
-		assertTrue(numRangeFilter.includesMax());
-
-		String xml2 = "<NumericRangeQuery fieldName='AGE' type='FLOAT' lowerTerm='-2.321432' upperTerm='32432.23' includeUpper='false' precisionStep='2' />";
-		Document doc2 = getDocumentFromString(xml2);
-
-		Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());
-		assertTrue(filter2 instanceof NumericRangeQuery<?>);
-		@SuppressWarnings("unchecked")
-		NumericRangeQuery<Float> numRangeFilter2 = (NumericRangeQuery) filter2;
-		assertEquals(Float.valueOf(-2.321432f), numRangeFilter2.getMin());
-		assertEquals(Float.valueOf(32432.23f), numRangeFilter2.getMax());
-		assertEquals("AGE", numRangeFilter2.getField());
-		assertTrue(numRangeFilter2.includesMin());
-		assertFalse(numRangeFilter2.includesMax());
-	}
-
-	private static Document getDocumentFromString(String str)
-			throws SAXException, IOException, ParserConfigurationException {
-		InputStream is = new ByteArrayInputStream(str.getBytes());
-		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-		factory.setNamespaceAware(true);
-		DocumentBuilder builder = factory.newDocumentBuilder();
-		Document doc = builder.parse(is);
-		is.close();
-		return doc;
-	}
-
-}
diff --git a/lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser.java b/lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser.java
index eaa56f8..0dfd4b7 100644
--- a/lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser.java
+++ b/lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser.java
@@ -93,7 +93,7 @@ public class TestParser extends LuceneTestCase {
 		reader.close();
 		searcher.close();
 //		dir.close();
-		
+		super.tearDown();
 	}
 	public void testSimpleXML() throws ParserException, IOException
 	{
diff --git a/lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeFilterBuilder.java b/lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeFilterBuilder.java
new file mode 100644
index 0000000..5e7fe7b
--- /dev/null
+++ b/lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeFilterBuilder.java
@@ -0,0 +1,215 @@
+package org.apache.lucene.xmlparser.builders;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+
+import org.apache.lucene.util.LuceneTestCase;
+
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.IndexWriter.MaxFieldLength;
+import org.apache.lucene.search.Filter;
+import org.apache.lucene.search.NumericRangeFilter;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.xmlparser.ParserException;
+import org.w3c.dom.Document;
+import org.xml.sax.SAXException;
+
+public class TestNumericRangeFilterBuilder extends LuceneTestCase {
+
+	public void testGetFilterHandleNumericParseErrorStrict() throws Exception {
+		NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();
+		filterBuilder.setStrictMode(true);
+
+		String xml = "<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>";
+		Document doc = getDocumentFromString(xml);
+		try {
+			filterBuilder.getFilter(doc.getDocumentElement());
+		} catch (ParserException e) {
+			return;
+		}
+		fail("Expected to throw " + ParserException.class);
+	}
+
+	public void testGetFilterHandleNumericParseError() throws Exception {
+		NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();
+		filterBuilder.setStrictMode(false);
+
+		String xml = "<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>";
+		Document doc = getDocumentFromString(xml);
+		Filter filter = filterBuilder.getFilter(doc.getDocumentElement());
+
+		RAMDirectory ramDir = new RAMDirectory();
+		IndexWriter writer = new IndexWriter(ramDir, null, MaxFieldLength.UNLIMITED);
+		try
+		{
+			IndexReader reader = IndexReader.open(ramDir, true);
+			try
+			{
+				assertNull(filter.getDocIdSet(reader));
+			}
+			finally
+			{
+				reader.close();
+			}
+		}
+		finally
+		{
+			writer.commit();
+			writer.close();
+		}
+	}
+
+	public void testGetFilterInt() throws Exception {
+		NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();
+		filterBuilder.setStrictMode(true);
+
+		String xml = "<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>";
+		Document doc = getDocumentFromString(xml);
+		Filter filter = filterBuilder.getFilter(doc.getDocumentElement());
+		assertTrue(filter instanceof NumericRangeFilter<?>);
+		@SuppressWarnings("unchecked")
+		NumericRangeFilter<Integer> numRangeFilter = (NumericRangeFilter<Integer>) filter;
+		assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());
+		assertEquals(Integer.valueOf(10), numRangeFilter.getMax());
+		assertEquals("AGE", numRangeFilter.getField());
+		assertTrue(numRangeFilter.includesMin());
+		assertTrue(numRangeFilter.includesMax());
+
+		String xml2 = "<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>";
+		Document doc2 = getDocumentFromString(xml2);
+		Filter filter2 = filterBuilder.getFilter(doc2.getDocumentElement());
+		assertTrue(filter2 instanceof NumericRangeFilter<?>);
+		@SuppressWarnings("unchecked")
+		NumericRangeFilter<Integer> numRangeFilter2 = (NumericRangeFilter) filter2;
+		assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());
+		assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());
+		assertEquals("AGE", numRangeFilter2.getField());
+		assertTrue(numRangeFilter2.includesMin());
+		assertFalse(numRangeFilter2.includesMax());
+	}
+
+	public void testGetFilterLong() throws Exception {
+		NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();
+		filterBuilder.setStrictMode(true);
+
+		String xml = "<NumericRangeFilter fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000'/>";
+		Document doc = getDocumentFromString(xml);
+		Filter filter = filterBuilder.getFilter(doc.getDocumentElement());
+		assertTrue(filter instanceof NumericRangeFilter<?>);
+		@SuppressWarnings("unchecked")
+		NumericRangeFilter<Long> numRangeFilter = (NumericRangeFilter) filter;
+		assertEquals(Long.valueOf(-2321L), numRangeFilter.getMin());
+		assertEquals(Long.valueOf(60000000L), numRangeFilter.getMax());
+		assertEquals("AGE", numRangeFilter.getField());
+		assertTrue(numRangeFilter.includesMin());
+		assertTrue(numRangeFilter.includesMax());
+
+		String xml2 = "<NumericRangeFilter fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000' includeUpper='false'/>";
+		Document doc2 = getDocumentFromString(xml2);
+		Filter filter2 = filterBuilder.getFilter(doc2.getDocumentElement());
+		assertTrue(filter2 instanceof NumericRangeFilter<?>);
+		@SuppressWarnings("unchecked")
+		NumericRangeFilter<Long> numRangeFilter2 = (NumericRangeFilter) filter2;
+		assertEquals(Long.valueOf(-2321L), numRangeFilter2.getMin());
+		assertEquals(Long.valueOf(60000000L), numRangeFilter2.getMax());
+		assertEquals("AGE", numRangeFilter2.getField());
+		assertTrue(numRangeFilter2.includesMin());
+		assertFalse(numRangeFilter2.includesMax());
+	}
+
+	public void testGetFilterDouble() throws Exception {
+		NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();
+		filterBuilder.setStrictMode(true);
+
+		String xml = "<NumericRangeFilter fieldName='AGE' type='doubLe' lowerTerm='-23.21' upperTerm='60000.00023'/>";
+		Document doc = getDocumentFromString(xml);
+
+		Filter filter = filterBuilder.getFilter(doc.getDocumentElement());
+		assertTrue(filter instanceof NumericRangeFilter<?>);
+		@SuppressWarnings("unchecked")
+		NumericRangeFilter<Double> numRangeFilter = (NumericRangeFilter) filter;
+		assertEquals(Double.valueOf(-23.21d), numRangeFilter.getMin());
+		assertEquals(Double.valueOf(60000.00023d), numRangeFilter.getMax());
+		assertEquals("AGE", numRangeFilter.getField());
+		assertTrue(numRangeFilter.includesMin());
+		assertTrue(numRangeFilter.includesMax());
+
+		String xml2 = "<NumericRangeFilter fieldName='AGE' type='doubLe' lowerTerm='-23.21' upperTerm='60000.00023' includeUpper='false'/>";
+		Document doc2 = getDocumentFromString(xml2);
+		Filter filter2 = filterBuilder.getFilter(doc2.getDocumentElement());
+		assertTrue(filter2 instanceof NumericRangeFilter<?>);
+		@SuppressWarnings("unchecked")
+		NumericRangeFilter<Double> numRangeFilter2 = (NumericRangeFilter) filter2;
+		assertEquals(Double.valueOf(-23.21d), numRangeFilter2.getMin());
+		assertEquals(Double.valueOf(60000.00023d), numRangeFilter2.getMax());
+		assertEquals("AGE", numRangeFilter2.getField());
+		assertTrue(numRangeFilter2.includesMin());
+		assertFalse(numRangeFilter2.includesMax());
+	}
+
+	public void testGetFilterFloat() throws Exception {
+		NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();
+		filterBuilder.setStrictMode(true);
+
+		String xml = "<NumericRangeFilter fieldName='AGE' type='FLOAT' lowerTerm='-2.321432' upperTerm='32432.23'/>";
+		Document doc = getDocumentFromString(xml);
+
+		Filter filter = filterBuilder.getFilter(doc.getDocumentElement());
+		assertTrue(filter instanceof NumericRangeFilter<?>);
+		@SuppressWarnings("unchecked")
+		NumericRangeFilter<Float> numRangeFilter = (NumericRangeFilter) filter;
+		assertEquals(Float.valueOf(-2.321432f), numRangeFilter.getMin());
+		assertEquals(Float.valueOf(32432.23f), numRangeFilter.getMax());
+		assertEquals("AGE", numRangeFilter.getField());
+		assertTrue(numRangeFilter.includesMin());
+		assertTrue(numRangeFilter.includesMax());
+
+		String xml2 = "<NumericRangeFilter fieldName='AGE' type='FLOAT' lowerTerm='-2.321432' upperTerm='32432.23' includeUpper='false' precisionStep='2' />";
+		Document doc2 = getDocumentFromString(xml2);
+
+		Filter filter2 = filterBuilder.getFilter(doc2.getDocumentElement());
+		assertTrue(filter2 instanceof NumericRangeFilter<?>);
+		@SuppressWarnings("unchecked")
+		NumericRangeFilter<Float> numRangeFilter2 = (NumericRangeFilter) filter2;
+		assertEquals(Float.valueOf(-2.321432f), numRangeFilter2.getMin());
+		assertEquals(Float.valueOf(32432.23f), numRangeFilter2.getMax());
+		assertEquals("AGE", numRangeFilter2.getField());
+		assertTrue(numRangeFilter2.includesMin());
+		assertFalse(numRangeFilter2.includesMax());
+	}
+
+	private static Document getDocumentFromString(String str)
+			throws SAXException, IOException, ParserConfigurationException {
+		InputStream is = new ByteArrayInputStream(str.getBytes());
+		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+		factory.setNamespaceAware(true);
+		DocumentBuilder builder = factory.newDocumentBuilder();
+		Document doc = builder.parse(is);
+		is.close();
+		return doc;
+	}
+
+}
diff --git a/lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeQueryBuilder.java b/lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeQueryBuilder.java
new file mode 100644
index 0000000..cd3db1c
--- /dev/null
+++ b/lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeQueryBuilder.java
@@ -0,0 +1,177 @@
+package org.apache.lucene.xmlparser.builders;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+
+import org.apache.lucene.util.LuceneTestCase;
+
+import org.apache.lucene.search.NumericRangeQuery;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.xmlparser.ParserException;
+import org.w3c.dom.Document;
+import org.xml.sax.SAXException;
+
+public class TestNumericRangeQueryBuilder extends LuceneTestCase {
+
+	public void testGetFilterHandleNumericParseErrorStrict() throws Exception {
+		NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();
+
+		String xml = "<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='NaN'/>";
+		Document doc = getDocumentFromString(xml);
+		try {
+			filterBuilder.getQuery(doc.getDocumentElement());
+		} catch (ParserException e) {
+			return;
+		}
+		fail("Expected to throw " + ParserException.class);
+	}
+
+	public void testGetFilterInt() throws Exception {
+		NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();
+
+		String xml = "<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>";
+		Document doc = getDocumentFromString(xml);
+		Query filter = filterBuilder.getQuery(doc.getDocumentElement());
+		assertTrue(filter instanceof NumericRangeQuery<?>);
+		@SuppressWarnings("unchecked")
+		NumericRangeQuery<Integer> numRangeFilter = (NumericRangeQuery<Integer>) filter;
+		assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());
+		assertEquals(Integer.valueOf(10), numRangeFilter.getMax());
+		assertEquals("AGE", numRangeFilter.getField());
+		assertTrue(numRangeFilter.includesMin());
+		assertTrue(numRangeFilter.includesMax());
+
+		String xml2 = "<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>";
+		Document doc2 = getDocumentFromString(xml2);
+		Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());
+		assertTrue(filter2 instanceof NumericRangeQuery<?>);
+		@SuppressWarnings("unchecked")
+		NumericRangeQuery<Integer> numRangeFilter2 = (NumericRangeQuery) filter2;
+		assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());
+		assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());
+		assertEquals("AGE", numRangeFilter2.getField());
+		assertTrue(numRangeFilter2.includesMin());
+		assertFalse(numRangeFilter2.includesMax());
+	}
+
+	public void testGetFilterLong() throws Exception {
+		NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();
+
+		String xml = "<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000'/>";
+		Document doc = getDocumentFromString(xml);
+		Query filter = filterBuilder.getQuery(doc.getDocumentElement());
+		assertTrue(filter instanceof NumericRangeQuery<?>);
+		@SuppressWarnings("unchecked")
+		NumericRangeQuery<Long> numRangeFilter = (NumericRangeQuery) filter;
+		assertEquals(Long.valueOf(-2321L), numRangeFilter.getMin());
+		assertEquals(Long.valueOf(60000000L), numRangeFilter.getMax());
+		assertEquals("AGE", numRangeFilter.getField());
+		assertTrue(numRangeFilter.includesMin());
+		assertTrue(numRangeFilter.includesMax());
+
+		String xml2 = "<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000' includeUpper='false'/>";
+		Document doc2 = getDocumentFromString(xml2);
+		Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());
+		assertTrue(filter2 instanceof NumericRangeQuery<?>);
+		@SuppressWarnings("unchecked")
+		NumericRangeQuery<Long> numRangeFilter2 = (NumericRangeQuery) filter2;
+		assertEquals(Long.valueOf(-2321L), numRangeFilter2.getMin());
+		assertEquals(Long.valueOf(60000000L), numRangeFilter2.getMax());
+		assertEquals("AGE", numRangeFilter2.getField());
+		assertTrue(numRangeFilter2.includesMin());
+		assertFalse(numRangeFilter2.includesMax());
+	}
+
+	public void testGetFilterDouble() throws Exception {
+		NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();
+
+		String xml = "<NumericRangeQuery fieldName='AGE' type='doubLe' lowerTerm='-23.21' upperTerm='60000.00023'/>";
+		Document doc = getDocumentFromString(xml);
+
+		Query filter = filterBuilder.getQuery(doc.getDocumentElement());
+		assertTrue(filter instanceof NumericRangeQuery<?>);
+		@SuppressWarnings("unchecked")
+		NumericRangeQuery<Double> numRangeFilter = (NumericRangeQuery) filter;
+		assertEquals(Double.valueOf(-23.21d), numRangeFilter.getMin());
+		assertEquals(Double.valueOf(60000.00023d), numRangeFilter.getMax());
+		assertEquals("AGE", numRangeFilter.getField());
+		assertTrue(numRangeFilter.includesMin());
+		assertTrue(numRangeFilter.includesMax());
+
+		String xml2 = "<NumericRangeQuery fieldName='AGE' type='doubLe' lowerTerm='-23.21' upperTerm='60000.00023' includeUpper='false'/>";
+		Document doc2 = getDocumentFromString(xml2);
+		Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());
+		assertTrue(filter2 instanceof NumericRangeQuery<?>);
+		@SuppressWarnings("unchecked")
+		NumericRangeQuery<Double> numRangeFilter2 = (NumericRangeQuery) filter2;
+		assertEquals(Double.valueOf(-23.21d), numRangeFilter2.getMin());
+		assertEquals(Double.valueOf(60000.00023d), numRangeFilter2.getMax());
+		assertEquals("AGE", numRangeFilter2.getField());
+		assertTrue(numRangeFilter2.includesMin());
+		assertFalse(numRangeFilter2.includesMax());
+	}
+
+	public void testGetFilterFloat() throws Exception {
+		NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();
+
+		String xml = "<NumericRangeQuery fieldName='AGE' type='FLOAT' lowerTerm='-2.321432' upperTerm='32432.23'/>";
+		Document doc = getDocumentFromString(xml);
+
+		Query filter = filterBuilder.getQuery(doc.getDocumentElement());
+		assertTrue(filter instanceof NumericRangeQuery<?>);
+		@SuppressWarnings("unchecked")
+		NumericRangeQuery<Float> numRangeFilter = (NumericRangeQuery) filter;
+		assertEquals(Float.valueOf(-2.321432f), numRangeFilter.getMin());
+		assertEquals(Float.valueOf(32432.23f), numRangeFilter.getMax());
+		assertEquals("AGE", numRangeFilter.getField());
+		assertTrue(numRangeFilter.includesMin());
+		assertTrue(numRangeFilter.includesMax());
+
+		String xml2 = "<NumericRangeQuery fieldName='AGE' type='FLOAT' lowerTerm='-2.321432' upperTerm='32432.23' includeUpper='false' precisionStep='2' />";
+		Document doc2 = getDocumentFromString(xml2);
+
+		Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());
+		assertTrue(filter2 instanceof NumericRangeQuery<?>);
+		@SuppressWarnings("unchecked")
+		NumericRangeQuery<Float> numRangeFilter2 = (NumericRangeQuery) filter2;
+		assertEquals(Float.valueOf(-2.321432f), numRangeFilter2.getMin());
+		assertEquals(Float.valueOf(32432.23f), numRangeFilter2.getMax());
+		assertEquals("AGE", numRangeFilter2.getField());
+		assertTrue(numRangeFilter2.includesMin());
+		assertFalse(numRangeFilter2.includesMax());
+	}
+
+	private static Document getDocumentFromString(String str)
+			throws SAXException, IOException, ParserConfigurationException {
+		InputStream is = new ByteArrayInputStream(str.getBytes());
+		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+		factory.setNamespaceAware(true);
+		DocumentBuilder builder = factory.newDocumentBuilder();
+		Document doc = builder.parse(is);
+		is.close();
+		return doc;
+	}
+
+}

