GitDiffStart: 23aacd101fe681e2632c05fdfe52311fc8032784 | Sun Feb 14 16:44:46 2010 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index 1664a75..85c4059 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -235,6 +235,10 @@ Bug fixes
    reference to the Attribute/AttributeImpl classes which prevents
    unloading of custom attributes loaded by other classloaders
    (e.g. in Solr plugins).  (Uwe Schindler)
+ 
+ * LUCENE-1941: Fix Min/MaxPayloadFunction returns 0 when
+   only one payload is present.  (Erik Hatcher, Mike McCandless
+   via Uwe Schindler)
 
 API Changes
 
diff --git a/src/java/org/apache/lucene/search/payloads/MaxPayloadFunction.java b/src/java/org/apache/lucene/search/payloads/MaxPayloadFunction.java
index fae7b35..90891ae 100644
--- a/src/java/org/apache/lucene/search/payloads/MaxPayloadFunction.java
+++ b/src/java/org/apache/lucene/search/payloads/MaxPayloadFunction.java
@@ -27,7 +27,11 @@ package org.apache.lucene.search.payloads;
 public class MaxPayloadFunction extends PayloadFunction {
   @Override
   public float currentScore(int docId, String field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {
-    return Math.max(currentPayloadScore, currentScore);
+    if (numPayloadsSeen == 0) {
+      return currentPayloadScore;
+    } else {
+      return Math.max(currentPayloadScore, currentScore);
+    }
   }
 
   @Override
diff --git a/src/java/org/apache/lucene/search/payloads/MinPayloadFunction.java b/src/java/org/apache/lucene/search/payloads/MinPayloadFunction.java
index 9e5e9a2..edea850 100644
--- a/src/java/org/apache/lucene/search/payloads/MinPayloadFunction.java
+++ b/src/java/org/apache/lucene/search/payloads/MinPayloadFunction.java
@@ -23,9 +23,13 @@ package org.apache.lucene.search.payloads;
  **/
 public class MinPayloadFunction extends PayloadFunction {
 
-    @Override
-    public float currentScore(int docId, String field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {
-    return Math.min(currentPayloadScore, currentScore);
+  @Override
+  public float currentScore(int docId, String field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {
+    if (numPayloadsSeen == 0) {
+      return currentPayloadScore;
+    } else {
+      return Math.min(currentPayloadScore, currentScore);
+    }
   }
 
   @Override

