GitDiffStart: 9a4b4f69e8bc8d7ec493ef89cd2bb795f06594c5 | Mon Dec 21 17:01:57 2015 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index efabd28..5d2874a 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -146,6 +146,9 @@ Optimizations
 * LUCENE-6926: MUST_NOT clauses now use the match cost API to run the slow bits
   last whenever possible. (Adrien Grand)
 
+* LUCENE-6944: BooleanWeight no longer creates sub-scorers if BS1 is not
+  applicable. (Adrien Grand)
+
 Bug Fixes
 
 * LUCENE-6918: LRUQueryCache.onDocIdSetEviction is only called when at least
diff --git a/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java b/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
index eb03c6b..8edc253 100644
--- a/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
+++ b/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -189,6 +189,11 @@ public class BooleanQuery extends Query implements Iterable<BooleanClause> {
     return clauses;
   }
 
+  /** Return the collection of queries for the given {@link Occur}. */
+  Collection<Query> getClauses(Occur occur) {
+    return clauseSets.get(occur);
+  }
+
   /** Returns an iterator on the clauses in this query. It implements the {@link Iterable} interface to
    * make it possible to do:
    * <pre class="prettyprint">for (BooleanClause clause : booleanQuery) {}</pre>
diff --git a/lucene/core/src/java/org/apache/lucene/search/BooleanWeight.java b/lucene/core/src/java/org/apache/lucene/search/BooleanWeight.java
index a54e713..515307b 100644
--- a/lucene/core/src/java/org/apache/lucene/search/BooleanWeight.java
+++ b/lucene/core/src/java/org/apache/lucene/search/BooleanWeight.java
@@ -191,25 +191,27 @@ final class BooleanWeight extends Weight {
    *  cannot be used. */
   // pkg-private for forcing use of BooleanScorer in tests
   BulkScorer booleanScorer(LeafReaderContext context) throws IOException {
+    if (query.getClauses(Occur.MUST).isEmpty() == false
+        || query.getClauses(Occur.FILTER).isEmpty() == false) {
+      // TODO: there are some cases where BooleanScorer
+      // would handle conjunctions faster than
+      // BooleanScorer2...
+      return null;
+    } else if (query.getClauses(Occur.MUST_NOT).isEmpty() == false) {
+      // TODO: there are some cases where BooleanScorer could do this faster
+      return null;
+    }
+
     List<BulkScorer> optional = new ArrayList<BulkScorer>();
     Iterator<BooleanClause> cIter = query.iterator();
     for (Weight w  : weights) {
       BooleanClause c =  cIter.next();
+      if (c.getOccur() != Occur.SHOULD) {
+        throw new AssertionError();
+      }
       BulkScorer subScorer = w.bulkScorer(context);
-      
-      if (subScorer == null) {
-        if (c.isRequired()) {
-          return null;
-        }
-      } else if (c.isRequired()) {
-        // TODO: there are some cases where BooleanScorer
-        // would handle conjunctions faster than
-        // BooleanScorer2...
-        return null;
-      } else if (c.isProhibited()) {
-        // TODO: there are some cases where BooleanScorer could do this faster
-        return null;
-      } else {
+
+      if (subScorer != null) {
         optional.add(subScorer);
       }
     }

