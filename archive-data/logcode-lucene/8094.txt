GitDiffStart: bc94ec4dc1414ba60e7b903bdc24f15042d4f5db | Thu Aug 22 22:52:27 2013 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index c9154b2..239344d 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -100,6 +100,9 @@ New Features
   Additionally they work with sortMissingFirst, sortMissingLast, facet.missing, 
   exists() in function queries, etc.  (Robert Muir)
 
+* SOLR-5182: Add NoOpRegenerator, a regenerator for custom per-segment caches
+  where items are preserved across commits.  (Robert Muir)
+
 Bug Fixes
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/search/NoOpRegenerator.java b/solr/core/src/java/org/apache/solr/search/NoOpRegenerator.java
new file mode 100644
index 0000000..4dc5a54
--- /dev/null
+++ b/solr/core/src/java/org/apache/solr/search/NoOpRegenerator.java
@@ -0,0 +1,38 @@
+package org.apache.solr.search;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+/** 
+ * Cache regenerator that just populates the new cache
+ * with the old items.
+ * <p>
+ * This is useful for e.g. CachingWrapperFilters that are not
+ * invalidated by the creation of a new searcher.
+ */
+public class NoOpRegenerator implements CacheRegenerator {
+
+  @SuppressWarnings({"unchecked", "rawtypes"})
+  @Override
+  public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {
+    newCache.put(oldKey, oldVal);
+    return true;
+  }
+  
+}
diff --git a/solr/core/src/test-files/solr/collection1/conf/solrconfig-noopregen.xml b/solr/core/src/test-files/solr/collection1/conf/solrconfig-noopregen.xml
new file mode 100644
index 0000000..4537724
--- /dev/null
+++ b/solr/core/src/test-files/solr/collection1/conf/solrconfig-noopregen.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" ?>
+
+<!--
+ Licensed to the Apache Software Foundation (ASF) under one or more
+ contributor license agreements.  See the NOTICE file distributed with
+ this work for additional information regarding copyright ownership.
+ The ASF licenses this file to You under the Apache License, Version 2.0
+ (the "License"); you may not use this file except in compliance with
+ the License.  You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+
+<!-- a basic solrconfig that tests NoOpRegenerator -->
+<config>
+  <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>
+  <dataDir>${solr.data.dir:}</dataDir>
+  <xi:include href="solrconfig.snippet.randomindexconfig.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
+  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
+  <requestHandler name="standard" class="solr.StandardRequestHandler" />
+  <requestHandler name="/update" class="solr.UpdateRequestHandler" />
+  <query>
+    <cache name="myPerSegmentCache" 
+           class="solr.LRUCache"
+           size="3"
+           initialSize="0"
+           autowarmCount="100%"
+           regenerator="solr.NoOpRegenerator"/>
+  </query>
+</config>
diff --git a/solr/core/src/test/org/apache/solr/search/TestNoOpRegenerator.java b/solr/core/src/test/org/apache/solr/search/TestNoOpRegenerator.java
new file mode 100644
index 0000000..4b7b45b
--- /dev/null
+++ b/solr/core/src/test/org/apache/solr/search/TestNoOpRegenerator.java
@@ -0,0 +1,67 @@
+package org.apache.solr.search;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.solr.SolrTestCaseJ4;
+import org.apache.solr.util.RefCounted;
+import org.junit.BeforeClass;
+
+/** Tests that NoOpRegenerator does what it should */
+public class TestNoOpRegenerator extends SolrTestCaseJ4 {
+  
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    initCore("solrconfig-noopregen.xml", "schema-minimal.xml");
+  }
+  
+  @SuppressWarnings("unchecked")
+  public void testRegeneration() throws Exception {
+    assertU(adoc("id", "1"));
+    assertU(adoc("id", "2"));
+    assertU(commit());
+    
+    // add some items
+    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();
+    try {
+      SolrIndexSearcher searcher = ref.get();
+      assertEquals(2, searcher.maxDoc());
+      SolrCache<Object,Object> cache = searcher.getCache("myPerSegmentCache");
+      assertEquals(0, cache.size());
+      cache.put("key1", "value1");
+      cache.put("key2", "value2");
+      assertEquals(2, cache.size());
+    } finally {
+      ref.decref();
+    }
+    
+    // add a doc and commit: we should see our cached items still there
+    assertU(adoc("id", "3"));
+    assertU(commit());
+    ref = h.getCore().getSearcher();
+    try {
+      SolrIndexSearcher searcher = ref.get();
+      assertEquals(3, searcher.maxDoc());
+      SolrCache<Object,Object> cache = searcher.getCache("myPerSegmentCache");
+      assertEquals(2, cache.size());
+      assertEquals("value1", cache.get("key1"));
+      assertEquals("value2", cache.get("key2"));
+    } finally {
+      ref.decref();
+    }
+  }
+}

