GitDiffStart: a46dcb70e84c27f289f1896c7dd84101c022593f | Thu Mar 26 19:57:00 2015 +0000
diff --git a/solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java b/solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java
index 6b4ac8b..df979d7 100644
--- a/solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java
+++ b/solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java
@@ -564,6 +564,8 @@ public class UnInvertedField extends DocTermOrds {
   // called from FieldFacetProcessor
   // TODO: do a callback version that can be specialized!
   public void collectDocs(FacetFieldProcessorUIF processor) throws IOException {
+    if (processor.accs.length==1 && processor.accs[0] instanceof CountSlotAcc)
+
     use.incrementAndGet();
 
     DocSet docs = processor.fcontext.base;
diff --git a/solr/core/src/test/org/apache/solr/request/TestMacros.java b/solr/core/src/test/org/apache/solr/request/TestMacros.java
deleted file mode 100644
index 3f52a4f..0000000
--- a/solr/core/src/test/org/apache/solr/request/TestMacros.java
+++ /dev/null
@@ -1,91 +0,0 @@
-package org.apache.solr.request.macro;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-
-import org.apache.solr.SolrTestCaseJ4;
-import org.junit.BeforeClass;
-import org.junit.Test;
-
-
-public class TestMacros extends SolrTestCaseJ4 {
-
-  @BeforeClass
-  public static void beforeTests() throws Exception {
-    initCore("solrconfig-tlog.xml","schema_latest.xml");
-  }
-
-  @Test
-  public void testMacros() throws Exception {
-    assertU(add(doc("id", "1", "val_s", "aaa", "val_i","123")));
-    assertU(add(doc("id", "2", "val_s", "bbb", "val_i","456")));
-
-    assertU(commit());
-
-
-
-    assertJQ(req("fl","id", "q", "id:${id}", "id","1")
-        , "/response/docs==[{'id':'1'}]"
-    );
-
-    assertJQ(req("fl","id", "q", "${idquery}", "idquery","id:1")
-        , "/response/docs==[{'id':'1'}]"
-    );
-
-    assertJQ(req("fl","id", "q", "${fname}:${fval}", "fname","id", "fval","2")
-        , "/response/docs==[{'id':'2'}]"
-    );
-
-    // test macro expansion in keys...
-    assertJQ(req("fl","id", "q", "{!term f=$fieldparam v=$valueparam}", "field${p}","val_s", "value${p}", "aaa", "p","param", "echoParams","ALL")
-        , "/response/docs==[{'id':'1'}]"
-    );
-
-    // test disabling expansion
-    assertJQ(req("fl","id", "q", "id:\"${id}\"", "id","1", "expandMacros","false")
-        , "/response/docs==[]"
-    );
-
-    // test multiple levels in values
-    assertJQ(req("fl","id", "q", "${idquery}", "idquery","${a}${b}", "a","val${fieldpostfix}:", "b","${fieldval}", "fieldpostfix","_s", "fieldval","bbb")
-        , "/response/docs==[{'id':'2'}]"
-    );
-
-    // test defaults
-    assertJQ(req("fl","id", "q", "val_s:${val:aaa}")
-        , "/response/docs==[{'id':'1'}]"
-    );
-
-    // test defaults with value present
-    assertJQ(req("fl","id", "q", "val_s:${val:aaa}", "val","bbb")
-        , "/response/docs==[{'id':'2'}]"
-    );
-
-    // test zero length default value
-    assertJQ(req("fl","id", "q", "val_s:${missing:}aaa")
-        , "/response/docs==[{'id':'1'}]"
-    );
-
-    // test missing value
-    assertJQ(req("fl","id", "q", "val_s:${missing}aaa")
-        , "/response/docs==[{'id':'1'}]"
-    );
-
-  }
-
-}
diff --git a/solr/core/src/test/org/apache/solr/request/macro/TestMacros.java b/solr/core/src/test/org/apache/solr/request/macro/TestMacros.java
new file mode 100644
index 0000000..3f52a4f
--- /dev/null
+++ b/solr/core/src/test/org/apache/solr/request/macro/TestMacros.java
@@ -0,0 +1,91 @@
+package org.apache.solr.request.macro;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+import org.apache.solr.SolrTestCaseJ4;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+
+public class TestMacros extends SolrTestCaseJ4 {
+
+  @BeforeClass
+  public static void beforeTests() throws Exception {
+    initCore("solrconfig-tlog.xml","schema_latest.xml");
+  }
+
+  @Test
+  public void testMacros() throws Exception {
+    assertU(add(doc("id", "1", "val_s", "aaa", "val_i","123")));
+    assertU(add(doc("id", "2", "val_s", "bbb", "val_i","456")));
+
+    assertU(commit());
+
+
+
+    assertJQ(req("fl","id", "q", "id:${id}", "id","1")
+        , "/response/docs==[{'id':'1'}]"
+    );
+
+    assertJQ(req("fl","id", "q", "${idquery}", "idquery","id:1")
+        , "/response/docs==[{'id':'1'}]"
+    );
+
+    assertJQ(req("fl","id", "q", "${fname}:${fval}", "fname","id", "fval","2")
+        , "/response/docs==[{'id':'2'}]"
+    );
+
+    // test macro expansion in keys...
+    assertJQ(req("fl","id", "q", "{!term f=$fieldparam v=$valueparam}", "field${p}","val_s", "value${p}", "aaa", "p","param", "echoParams","ALL")
+        , "/response/docs==[{'id':'1'}]"
+    );
+
+    // test disabling expansion
+    assertJQ(req("fl","id", "q", "id:\"${id}\"", "id","1", "expandMacros","false")
+        , "/response/docs==[]"
+    );
+
+    // test multiple levels in values
+    assertJQ(req("fl","id", "q", "${idquery}", "idquery","${a}${b}", "a","val${fieldpostfix}:", "b","${fieldval}", "fieldpostfix","_s", "fieldval","bbb")
+        , "/response/docs==[{'id':'2'}]"
+    );
+
+    // test defaults
+    assertJQ(req("fl","id", "q", "val_s:${val:aaa}")
+        , "/response/docs==[{'id':'1'}]"
+    );
+
+    // test defaults with value present
+    assertJQ(req("fl","id", "q", "val_s:${val:aaa}", "val","bbb")
+        , "/response/docs==[{'id':'2'}]"
+    );
+
+    // test zero length default value
+    assertJQ(req("fl","id", "q", "val_s:${missing:}aaa")
+        , "/response/docs==[{'id':'1'}]"
+    );
+
+    // test missing value
+    assertJQ(req("fl","id", "q", "val_s:${missing}aaa")
+        , "/response/docs==[{'id':'1'}]"
+    );
+
+  }
+
+}

