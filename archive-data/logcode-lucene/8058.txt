GitDiffStart: ec07c84339dac45a28620688565274814a967f85 | Tue Sep 3 02:36:54 2013 +0000
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.java b/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.java
index e607f11..2bd8c91 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.java
@@ -61,8 +61,7 @@ public class BlockTermsWriter extends FieldsConsumer {
   public static final int VERSION_START = 0;
   public static final int VERSION_APPEND_ONLY = 1;
   public static final int VERSION_META_ARRAY = 2;
-  public static final int VERSION_CURRENT = VERSION_APPEND_ONLY;
-  //public static final int VERSION_CURRENT = VERSION_META_ARRAY;
+  public static final int VERSION_CURRENT = VERSION_META_ARRAY;
 
   /** Extension of terms file */
   static final String TERMS_EXTENSION = "tib";
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter.java b/lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter.java
index 1ab6f75..db16035 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter.java
@@ -63,8 +63,7 @@ public final class PulsingPostingsWriter extends PostingsWriterBase {
 
   final static int VERSION_META_ARRAY = 1;
 
-  //final static int VERSION_CURRENT = VERSION_META_ARRAY;
-  final static int VERSION_CURRENT = VERSION_START;
+  final static int VERSION_CURRENT = VERSION_META_ARRAY;
 
   private SegmentWriteState segmentState;
   private IndexOutput termsOut;
diff --git a/lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs.java b/lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs.java
index 9cf8010..20482a1 100644
--- a/lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs.java
+++ b/lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs.java
@@ -187,8 +187,8 @@ public class TempTermOutputs extends Outputs<TempTermOutputs.TempMetaData> {
   }
 
   // TODO: if we refactor a 'addSelf(TempMetaDat other)',
-  // we can gain about 5~7% for fuzzy queries, however on the other hand
-  // we seem to put much stress on FST Outputs decoding?
+  // we can gain about 5~7% for fuzzy queries, however this also 
+  // means we are putting too much stress on FST Outputs decoding?
   @Override
   public TempMetaData add(TempMetaData t1, TempMetaData t2) {
     //if (TEST) System.out.print("add("+t1+", "+t2+") = ");
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.java b/lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.java
index 8d825e6..b79d4f4 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.java
@@ -209,7 +209,7 @@ public class BlockTreeTermsWriter extends FieldsConsumer {
   public static final int TERMS_VERSION_META_ARRAY = 2;
 
   /** Current terms format. */
-  public static final int TERMS_VERSION_CURRENT = TERMS_VERSION_APPEND_ONLY;
+  public static final int TERMS_VERSION_CURRENT = TERMS_VERSION_META_ARRAY;
 
   /** Extension of terms index file */
   static final String TERMS_INDEX_EXTENSION = "tip";
@@ -225,7 +225,7 @@ public class BlockTreeTermsWriter extends FieldsConsumer {
   public static final int TERMS_INDEX_VERSION_META_ARRAY = 2;
 
   /** Current index format. */
-  public static final int TERMS_INDEX_VERSION_CURRENT = TERMS_INDEX_VERSION_APPEND_ONLY;
+  public static final int TERMS_INDEX_VERSION_CURRENT = TERMS_INDEX_VERSION_META_ARRAY;
 
   private final IndexOutput out;
   private final IndexOutput indexOut;
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/PostingsReaderBase.java b/lucene/core/src/java/org/apache/lucene/codecs/PostingsReaderBase.java
index 58c7a87..c591fa2 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/PostingsReaderBase.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/PostingsReaderBase.java
@@ -55,7 +55,9 @@ public abstract class PostingsReaderBase implements Closeable {
   /** Return a newly created empty TermState */
   public abstract BlockTermState newTermState() throws IOException;
 
-  /** Actually decode metadata for next term */
+  /** Actually decode metadata for next term 
+   *  @see PostingsWriterBase#encodeTerm 
+   */
   public abstract void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;
 
   /** Must fully consume state, since after this call that
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase.java b/lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase.java
index cf88fdd..e03ee73 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase.java
@@ -65,13 +65,17 @@ public abstract class PostingsWriterBase extends PostingsConsumer implements Clo
   public abstract void finishTerm(BlockTermState state) throws IOException;
 
   /**
-   * Encode metadata as long[] and byte[]. {@code absolute} controls 
-   * whether current term is delta encoded according to latest term.
+   * Encode metadata as long[] and byte[]. {@code absolute} controls whether 
+   * current term is delta encoded according to latest term. 
+   * Usually elements in {@code longs} are file pointers, so each one always 
+   * increases when a new term is consumed. {@code out} is used to write generic
+   * bytes, which are not monotonical.
    *
-   * NOTE: sometimes long[] might contain values that doesn't make sense,
-   * e.g. for Lucene41PostingsFormat, when singletonDocID != -1, docStartFP is not defined.
-   * Here postings side should always use the last docStartFP, to keep each element in 
-   * metadata long[] monotonic.
+   * NOTE: sometimes long[] might contain values that doesn't make sense, e.g. 
+   * the pointer to postings list may not be defined, if it is designed to inline 
+   * some postings data in term dictionary.  For this the postings side should 
+   * always use the last file pointer, so that each element in metadata long[] is 
+   * still monotonic.
    */
   public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;
 
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter.java
index f40ca9c..0ca8aa4 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter.java
@@ -67,8 +67,8 @@ public final class Lucene41PostingsWriter extends PostingsWriterBase {
   // Increment version to change it
   final static int VERSION_START = 0;
   final static int VERSION_META_ARRAY = 1;
-  final static int VERSION_CURRENT = VERSION_START;
-  //final static int VERSION_CURRENT = VERSION_META_ARRAY;
+  //final static int VERSION_CURRENT = VERSION_START;
+  final static int VERSION_CURRENT = VERSION_META_ARRAY;
 
   final IndexOutput docOut;
   final IndexOutput posOut;
@@ -519,7 +519,7 @@ public final class Lucene41PostingsWriter extends PostingsWriterBase {
       //   System.out.println("  no skip: docCount=" + docCount);
       // }
     }
-    if (state.totalTermFreq >= BLOCK_SIZE) {
+    if (VERSION_CURRENT >= VERSION_META_ARRAY || state.totalTermFreq >= BLOCK_SIZE) {
       state.payTermStartFP = payTermStartFP;
     } else {
       state.payTermStartFP = -1;
@@ -552,11 +552,7 @@ public final class Lucene41PostingsWriter extends PostingsWriterBase {
     if (fieldHasPositions) {
       longs[1] = state.posTermStartFP - lastState.posTermStartFP;
       if (fieldHasPayloads || fieldHasOffsets) {
-        if (state.payTermStartFP == -1) {
-          longs[2] = 0;
-        } else {
-          longs[2] = state.payTermStartFP - lastState.payTermStartFP;
-        }
+        longs[2] = state.payTermStartFP - lastState.payTermStartFP;
       }
     }
     if (state.singletonDocID != -1) {

