GitDiffStart: 47bff0322cd19b153bd3ee19972aa524fa9346b1 | Wed Nov 18 11:22:17 2009 +0000
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java
index 4dfa023..6ecf09a 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.java
@@ -80,7 +80,9 @@ public class DocBuilder {
 
   public VariableResolverImpl getVariableResolver() {
     try {
-      VariableResolverImpl resolver = new VariableResolverImpl();
+      VariableResolverImpl resolver = null;
+      if(dataImporter != null && dataImporter.getCore() != null) resolver =  new VariableResolverImpl(dataImporter.getCore().getResourceLoader().getCoreProperties());
+      else resolver = new VariableResolverImpl();
       Map<String, Object> indexerNamespace = new HashMap<String, Object>();
       if (persistedProperties.getProperty(LAST_INDEX_TIME) != null) {
         indexerNamespace.put(LAST_INDEX_TIME, persistedProperties.getProperty(LAST_INDEX_TIME));
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolverImpl.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolverImpl.java
index ac59916..b0675cc 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolverImpl.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolverImpl.java
@@ -18,6 +18,7 @@ package org.apache.solr.handler.dataimport;
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Collections;
 import java.util.regex.Pattern;
 
 /**
@@ -41,7 +42,14 @@ public class VariableResolverImpl extends VariableResolver {
 
   private final TemplateString templateString = new TemplateString();
 
+  private final Map defaults ;
+
   public VariableResolverImpl() {
+    defaults = Collections.emptyMap();
+  }
+
+  public VariableResolverImpl(Map defaults) {
+    this.defaults = defaults;
   }
 
   /**
@@ -100,23 +108,30 @@ public class VariableResolverImpl extends VariableResolver {
       for (int i = 0; i < parts.length; i++) {
         String thePart = parts[i];
         if (i == parts.length - 1) {
-          return namespace.get(thePart);
+          Object val = namespace.get(thePart);
+          return val == null ? getDefault(name): val ;
         }
         Object temp = namespace.get(thePart);
         if (temp == null) {
-          return namespace.get(mergeAll(parts, i));
+          Object val = namespace.get(mergeAll(parts, i));
+          return val == null ? getDefault(name): val ;
         } else {
           if (temp instanceof Map) {
             namespace = (Map) temp;
           } else {
-            return null;
+            return getDefault(name);
           }
         }
       }
     } finally {
-      CURRENT_VARIABLE_RESOLVER.set(null);
+      CURRENT_VARIABLE_RESOLVER.remove();
     }
-    return null;
+    return getDefault(name);
+  }
+
+  private Object getDefault(String name) {
+    Object val = defaults.get(name);
+    return val == null? System.getProperty(name) : val;
   }
 
   private String mergeAll(String[] parts, int i) {
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver.java
index 2f40bd5..779a3ca 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver.java
@@ -43,6 +43,21 @@ public class TestVariableResolver {
   }
 
   @Test
+  public void testDefaults(){
+    System.out.println(System.setProperty(TestVariableResolver.class.getName(),"hello"));
+    System.out.println("s.gP()"+ System.getProperty(TestVariableResolver.class.getName())); 
+
+    HashMap m = new HashMap();
+    m.put("hello","world");
+    VariableResolverImpl vri = new VariableResolverImpl(m);
+    Object val = vri.resolve(TestVariableResolver.class.getName());
+    System.out.println("val = " + val);
+    Assert.assertEquals("hello", val);
+    Assert.assertEquals("world",vri.resolve("hello"));
+
+  }
+
+  @Test
   public void testNestedNamespace() {
     VariableResolverImpl vri = new VariableResolverImpl();
     Map<String, Object> ns = new HashMap<String, Object>();

