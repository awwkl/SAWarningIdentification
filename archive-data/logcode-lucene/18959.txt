GitDiffStart: 4f4ffb9589231d338d209a4d0e685c60ca39e084 | Wed Oct 28 00:07:22 2009 +0000
diff --git a/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java b/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
index bdb8b18..513db60 100644
--- a/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
+++ b/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
@@ -149,8 +149,7 @@ public class ConcurrentMergeScheduler extends MergeScheduler {
   public void merge(IndexWriter writer)
     throws CorruptIndexException, IOException {
 
-    // TODO: enable this once we are on JRE 1.5
-    // assert !Thread.holdsLock(writer);
+    assert !Thread.holdsLock(writer);
 
     this.writer = writer;
 
diff --git a/src/java/org/apache/lucene/search/Sort.java b/src/java/org/apache/lucene/search/Sort.java
index d940cd3..a7b3d89 100644
--- a/src/java/org/apache/lucene/search/Sort.java
+++ b/src/java/org/apache/lucene/search/Sort.java
@@ -173,9 +173,6 @@ implements Serializable {
 
   /** Returns a hash code value for this object. */
   public int hashCode() {
-    // TODO in Java 1.5: switch to Arrays.hashCode().  The 
-    // Java 1.4 workaround below calculates the same hashCode
-    // as Java 1.5's new Arrays.hashCode()
-    return 0x45aaf665 + Arrays.asList(fields).hashCode();
+    return 0x45aaf665 + Arrays.hashCode(fields);
   }
 }
diff --git a/src/java/org/apache/lucene/search/function/CustomScoreQuery.java b/src/java/org/apache/lucene/search/function/CustomScoreQuery.java
index 3d522cd..5bfdb04 100755
--- a/src/java/org/apache/lucene/search/function/CustomScoreQuery.java
+++ b/src/java/org/apache/lucene/search/function/CustomScoreQuery.java
@@ -19,6 +19,7 @@ package org.apache.lucene.search.function;
 
 import java.io.IOException;
 import java.util.Set;
+import java.util.Arrays;
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.Term;
@@ -145,22 +146,14 @@ public class CustomScoreQuery extends Query {
         this.valSrcQueries.length != other.valSrcQueries.length) {
       return false;
     }
-    for (int i=0; i<valSrcQueries.length; i++) { //TODO simplify with Arrays.deepEquals() once moving to Java 1.5
-      if (!valSrcQueries[i].equals(other.valSrcQueries[i])) {
-        return false;
-      }
-    }
-    return true;
+    return Arrays.deepEquals(valSrcQueries, other.valSrcQueries);
   }
 
   /** Returns a hash code value for this object. */
   @Override
   public int hashCode() {
-    int valSrcHash = 0;
-    for (int i=0; i<valSrcQueries.length; i++) { //TODO simplify with Arrays.deepHashcode() once moving to Java 1.5
-      valSrcHash += valSrcQueries[i].hashCode();
-    }
-    return (getClass().hashCode() + subQuery.hashCode() + valSrcHash) ^ Float.floatToIntBits(getBoost());
+    return (getClass().hashCode() + subQuery.hashCode() + Arrays.deepHashCode(valSrcQueries))
+      ^ Float.floatToIntBits(getBoost());
   }  
   
   /**

