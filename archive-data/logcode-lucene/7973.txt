GitDiffStart: 91aaa597a897c8f43d5fa746986303219bcb842d | Fri Sep 13 18:22:18 2013 +0000
diff --git a/lucene/expressions/build.xml b/lucene/expressions/build.xml
index 616246f..8ddf918 100644
--- a/lucene/expressions/build.xml
+++ b/lucene/expressions/build.xml
@@ -113,9 +113,9 @@
       <!-- nuke timestamps in generated files -->
       <replaceregexp file="${grammar.path}/@{grammar}Parser.java" match=".*" replace="\/\/ ANTLR GENERATED CODE: DO NOT EDIT" encoding="UTF-8"/>
       <replaceregexp file="${grammar.path}/@{grammar}Lexer.java" match=".*" replace="\/\/ ANTLR GENERATED CODE: DO NOT EDIT" encoding="UTF-8"/>
-      <!-- remove tabs in antlr generated files (it does this for comments in finally blocks) -->
-      <replaceregexp file="${grammar.path}/@{grammar}Parser.java" match="\t" flags="g" replace="    " encoding="UTF-8"/>
-      <replaceregexp file="${grammar.path}/@{grammar}Lexer.java" match="\t" flags="g" replace="    " encoding="UTF-8"/>
+      <!-- remove tabs in antlr generated files -->
+      <replaceregexp file="${grammar.path}/@{grammar}Parser.java" match="\t" flags="g" replace="  " encoding="UTF-8"/>
+      <replaceregexp file="${grammar.path}/@{grammar}Lexer.java" match="\t" flags="g" replace="  " encoding="UTF-8"/>
       <!-- fix line endings -->
       <fixcrlf file="${grammar.path}/@{grammar}Parser.java"/>
       <fixcrlf file="${grammar.path}/@{grammar}Lexer.java"/>
diff --git a/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer.java b/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer.java
index 0521330..b747ff4 100644
--- a/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer.java
+++ b/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer.java
@@ -12,1822 +12,1822 @@ import java.util.ArrayList;
 
 @SuppressWarnings("all")
 class JavascriptLexer extends Lexer {
-    public static final int EOF=-1;
-    public static final int AT_ADD=4;
-    public static final int AT_BIT_AND=5;
-    public static final int AT_BIT_NOT=6;
-    public static final int AT_BIT_OR=7;
-    public static final int AT_BIT_SHL=8;
-    public static final int AT_BIT_SHR=9;
-    public static final int AT_BIT_SHU=10;
-    public static final int AT_BIT_XOR=11;
-    public static final int AT_BOOL_AND=12;
-    public static final int AT_BOOL_NOT=13;
-    public static final int AT_BOOL_OR=14;
-    public static final int AT_CALL=15;
-    public static final int AT_COLON=16;
-    public static final int AT_COMMA=17;
-    public static final int AT_COMP_EQ=18;
-    public static final int AT_COMP_GT=19;
-    public static final int AT_COMP_GTE=20;
-    public static final int AT_COMP_LT=21;
-    public static final int AT_COMP_LTE=22;
-    public static final int AT_COMP_NEQ=23;
-    public static final int AT_COND_QUE=24;
-    public static final int AT_DIVIDE=25;
-    public static final int AT_DOT=26;
-    public static final int AT_LPAREN=27;
-    public static final int AT_MODULO=28;
-    public static final int AT_MULTIPLY=29;
-    public static final int AT_NEGATE=30;
-    public static final int AT_RPAREN=31;
-    public static final int AT_SUBTRACT=32;
-    public static final int DECIMAL=33;
-    public static final int DECIMALDIGIT=34;
-    public static final int DECIMALINTEGER=35;
-    public static final int EXPONENT=36;
-    public static final int HEX=37;
-    public static final int HEXDIGIT=38;
-    public static final int ID=39;
-    public static final int OCTAL=40;
-    public static final int OCTALDIGIT=41;
-    public static final int WS=42;
-
-
-    @Override
-    public void displayRecognitionError(String[] tokenNames, RecognitionException re) {  
-        String message = " unexpected character '" + (char)re.c 
-                       + "' at position (" + re.charPositionInLine + ").";
-        ParseException parseException = new ParseException(message, re.charPositionInLine);
-        parseException.initCause(re);
-        throw new RuntimeException(parseException);
+  public static final int EOF=-1;
+  public static final int AT_ADD=4;
+  public static final int AT_BIT_AND=5;
+  public static final int AT_BIT_NOT=6;
+  public static final int AT_BIT_OR=7;
+  public static final int AT_BIT_SHL=8;
+  public static final int AT_BIT_SHR=9;
+  public static final int AT_BIT_SHU=10;
+  public static final int AT_BIT_XOR=11;
+  public static final int AT_BOOL_AND=12;
+  public static final int AT_BOOL_NOT=13;
+  public static final int AT_BOOL_OR=14;
+  public static final int AT_CALL=15;
+  public static final int AT_COLON=16;
+  public static final int AT_COMMA=17;
+  public static final int AT_COMP_EQ=18;
+  public static final int AT_COMP_GT=19;
+  public static final int AT_COMP_GTE=20;
+  public static final int AT_COMP_LT=21;
+  public static final int AT_COMP_LTE=22;
+  public static final int AT_COMP_NEQ=23;
+  public static final int AT_COND_QUE=24;
+  public static final int AT_DIVIDE=25;
+  public static final int AT_DOT=26;
+  public static final int AT_LPAREN=27;
+  public static final int AT_MODULO=28;
+  public static final int AT_MULTIPLY=29;
+  public static final int AT_NEGATE=30;
+  public static final int AT_RPAREN=31;
+  public static final int AT_SUBTRACT=32;
+  public static final int DECIMAL=33;
+  public static final int DECIMALDIGIT=34;
+  public static final int DECIMALINTEGER=35;
+  public static final int EXPONENT=36;
+  public static final int HEX=37;
+  public static final int HEXDIGIT=38;
+  public static final int ID=39;
+  public static final int OCTAL=40;
+  public static final int OCTALDIGIT=41;
+  public static final int WS=42;
+
+
+  @Override
+  public void displayRecognitionError(String[] tokenNames, RecognitionException re) {  
+      String message = " unexpected character '" + (char)re.c 
+                     + "' at position (" + re.charPositionInLine + ").";
+      ParseException parseException = new ParseException(message, re.charPositionInLine);
+      parseException.initCause(re);
+      throw new RuntimeException(parseException);
+  }
+
+
+
+  // delegates
+  // delegators
+  public Lexer[] getDelegates() {
+    return new Lexer[] {};
+  }
+
+  public JavascriptLexer() {} 
+  public JavascriptLexer(CharStream input) {
+    this(input, new RecognizerSharedState());
+  }
+  public JavascriptLexer(CharStream input, RecognizerSharedState state) {
+    super(input,state);
+  }
+  @Override public String getGrammarFileName() { return "src/java/org/apache/lucene/expressions/js/Javascript.g"; }
+
+  // $ANTLR start "AT_ADD"
+  public final void mAT_ADD() throws RecognitionException {
+    try {
+      int _type = AT_ADD;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:25:8: ( '+' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:25:10: '+'
+      {
+      match('+'); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
     }
-
-
-
-    // delegates
-    // delegators
-    public Lexer[] getDelegates() {
-        return new Lexer[] {};
+    finally {
+      // do for sure before leaving
     }
-
-    public JavascriptLexer() {} 
-    public JavascriptLexer(CharStream input) {
-        this(input, new RecognizerSharedState());
+  }
+  // $ANTLR end "AT_ADD"
+
+  // $ANTLR start "AT_BIT_AND"
+  public final void mAT_BIT_AND() throws RecognitionException {
+    try {
+      int _type = AT_BIT_AND;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:26:12: ( '&' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:26:14: '&'
+      {
+      match('&'); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
     }
-    public JavascriptLexer(CharStream input, RecognizerSharedState state) {
-        super(input,state);
+    finally {
+      // do for sure before leaving
     }
-    @Override public String getGrammarFileName() { return "src/java/org/apache/lucene/expressions/js/Javascript.g"; }
-
-    // $ANTLR start "AT_ADD"
-    public final void mAT_ADD() throws RecognitionException {
-        try {
-            int _type = AT_ADD;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:25:8: ( '+' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:25:10: '+'
-            {
-            match('+'); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+  }
+  // $ANTLR end "AT_BIT_AND"
+
+  // $ANTLR start "AT_BIT_NOT"
+  public final void mAT_BIT_NOT() throws RecognitionException {
+    try {
+      int _type = AT_BIT_NOT;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:27:12: ( '~' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:27:14: '~'
+      {
+      match('~'); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
     }
-    // $ANTLR end "AT_ADD"
-
-    // $ANTLR start "AT_BIT_AND"
-    public final void mAT_BIT_AND() throws RecognitionException {
-        try {
-            int _type = AT_BIT_AND;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:26:12: ( '&' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:26:14: '&'
-            {
-            match('&'); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+    finally {
+      // do for sure before leaving
     }
-    // $ANTLR end "AT_BIT_AND"
-
-    // $ANTLR start "AT_BIT_NOT"
-    public final void mAT_BIT_NOT() throws RecognitionException {
-        try {
-            int _type = AT_BIT_NOT;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:27:12: ( '~' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:27:14: '~'
-            {
-            match('~'); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+  }
+  // $ANTLR end "AT_BIT_NOT"
+
+  // $ANTLR start "AT_BIT_OR"
+  public final void mAT_BIT_OR() throws RecognitionException {
+    try {
+      int _type = AT_BIT_OR;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:28:11: ( '|' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:28:13: '|'
+      {
+      match('|'); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
     }
-    // $ANTLR end "AT_BIT_NOT"
-
-    // $ANTLR start "AT_BIT_OR"
-    public final void mAT_BIT_OR() throws RecognitionException {
-        try {
-            int _type = AT_BIT_OR;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:28:11: ( '|' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:28:13: '|'
-            {
-            match('|'); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+    finally {
+      // do for sure before leaving
     }
-    // $ANTLR end "AT_BIT_OR"
-
-    // $ANTLR start "AT_BIT_SHL"
-    public final void mAT_BIT_SHL() throws RecognitionException {
-        try {
-            int _type = AT_BIT_SHL;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:29:12: ( '<<' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:29:14: '<<'
-            {
-            match("<<"); 
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+  }
+  // $ANTLR end "AT_BIT_OR"
+
+  // $ANTLR start "AT_BIT_SHL"
+  public final void mAT_BIT_SHL() throws RecognitionException {
+    try {
+      int _type = AT_BIT_SHL;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:29:12: ( '<<' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:29:14: '<<'
+      {
+      match("<<"); 
+
+      }
+
+      state.type = _type;
+      state.channel = _channel;
     }
-    // $ANTLR end "AT_BIT_SHL"
-
-    // $ANTLR start "AT_BIT_SHR"
-    public final void mAT_BIT_SHR() throws RecognitionException {
-        try {
-            int _type = AT_BIT_SHR;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:30:12: ( '>>' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:30:14: '>>'
-            {
-            match(">>"); 
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+    finally {
+      // do for sure before leaving
     }
-    // $ANTLR end "AT_BIT_SHR"
-
-    // $ANTLR start "AT_BIT_SHU"
-    public final void mAT_BIT_SHU() throws RecognitionException {
-        try {
-            int _type = AT_BIT_SHU;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:31:12: ( '>>>' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:31:14: '>>>'
-            {
-            match(">>>"); 
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+  }
+  // $ANTLR end "AT_BIT_SHL"
+
+  // $ANTLR start "AT_BIT_SHR"
+  public final void mAT_BIT_SHR() throws RecognitionException {
+    try {
+      int _type = AT_BIT_SHR;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:30:12: ( '>>' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:30:14: '>>'
+      {
+      match(">>"); 
+
+      }
+
+      state.type = _type;
+      state.channel = _channel;
     }
-    // $ANTLR end "AT_BIT_SHU"
-
-    // $ANTLR start "AT_BIT_XOR"
-    public final void mAT_BIT_XOR() throws RecognitionException {
-        try {
-            int _type = AT_BIT_XOR;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:32:12: ( '^' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:32:14: '^'
-            {
-            match('^'); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+    finally {
+      // do for sure before leaving
     }
-    // $ANTLR end "AT_BIT_XOR"
-
-    // $ANTLR start "AT_BOOL_AND"
-    public final void mAT_BOOL_AND() throws RecognitionException {
-        try {
-            int _type = AT_BOOL_AND;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:33:13: ( '&&' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:33:15: '&&'
-            {
-            match("&&"); 
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+  }
+  // $ANTLR end "AT_BIT_SHR"
+
+  // $ANTLR start "AT_BIT_SHU"
+  public final void mAT_BIT_SHU() throws RecognitionException {
+    try {
+      int _type = AT_BIT_SHU;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:31:12: ( '>>>' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:31:14: '>>>'
+      {
+      match(">>>"); 
+
+      }
+
+      state.type = _type;
+      state.channel = _channel;
     }
-    // $ANTLR end "AT_BOOL_AND"
-
-    // $ANTLR start "AT_BOOL_NOT"
-    public final void mAT_BOOL_NOT() throws RecognitionException {
-        try {
-            int _type = AT_BOOL_NOT;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:34:13: ( '!' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:34:15: '!'
-            {
-            match('!'); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+    finally {
+      // do for sure before leaving
     }
-    // $ANTLR end "AT_BOOL_NOT"
-
-    // $ANTLR start "AT_BOOL_OR"
-    public final void mAT_BOOL_OR() throws RecognitionException {
-        try {
-            int _type = AT_BOOL_OR;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:35:12: ( '||' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:35:14: '||'
-            {
-            match("||"); 
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+  }
+  // $ANTLR end "AT_BIT_SHU"
+
+  // $ANTLR start "AT_BIT_XOR"
+  public final void mAT_BIT_XOR() throws RecognitionException {
+    try {
+      int _type = AT_BIT_XOR;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:32:12: ( '^' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:32:14: '^'
+      {
+      match('^'); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
     }
-    // $ANTLR end "AT_BOOL_OR"
-
-    // $ANTLR start "AT_COLON"
-    public final void mAT_COLON() throws RecognitionException {
-        try {
-            int _type = AT_COLON;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:36:10: ( ':' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:36:12: ':'
-            {
-            match(':'); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+    finally {
+      // do for sure before leaving
     }
-    // $ANTLR end "AT_COLON"
-
-    // $ANTLR start "AT_COMMA"
-    public final void mAT_COMMA() throws RecognitionException {
-        try {
-            int _type = AT_COMMA;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:37:10: ( ',' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:37:12: ','
-            {
-            match(','); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+  }
+  // $ANTLR end "AT_BIT_XOR"
+
+  // $ANTLR start "AT_BOOL_AND"
+  public final void mAT_BOOL_AND() throws RecognitionException {
+    try {
+      int _type = AT_BOOL_AND;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:33:13: ( '&&' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:33:15: '&&'
+      {
+      match("&&"); 
+
+      }
+
+      state.type = _type;
+      state.channel = _channel;
     }
-    // $ANTLR end "AT_COMMA"
-
-    // $ANTLR start "AT_COMP_EQ"
-    public final void mAT_COMP_EQ() throws RecognitionException {
-        try {
-            int _type = AT_COMP_EQ;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:38:12: ( '==' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:38:14: '=='
-            {
-            match("=="); 
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+    finally {
+      // do for sure before leaving
     }
-    // $ANTLR end "AT_COMP_EQ"
-
-    // $ANTLR start "AT_COMP_GT"
-    public final void mAT_COMP_GT() throws RecognitionException {
-        try {
-            int _type = AT_COMP_GT;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:39:12: ( '>' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:39:14: '>'
-            {
-            match('>'); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+  }
+  // $ANTLR end "AT_BOOL_AND"
+
+  // $ANTLR start "AT_BOOL_NOT"
+  public final void mAT_BOOL_NOT() throws RecognitionException {
+    try {
+      int _type = AT_BOOL_NOT;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:34:13: ( '!' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:34:15: '!'
+      {
+      match('!'); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
     }
-    // $ANTLR end "AT_COMP_GT"
-
-    // $ANTLR start "AT_COMP_GTE"
-    public final void mAT_COMP_GTE() throws RecognitionException {
-        try {
-            int _type = AT_COMP_GTE;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:40:13: ( '>=' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:40:15: '>='
-            {
-            match(">="); 
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+    finally {
+      // do for sure before leaving
     }
-    // $ANTLR end "AT_COMP_GTE"
-
-    // $ANTLR start "AT_COMP_LT"
-    public final void mAT_COMP_LT() throws RecognitionException {
-        try {
-            int _type = AT_COMP_LT;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:41:12: ( '<' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:41:14: '<'
-            {
-            match('<'); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+  }
+  // $ANTLR end "AT_BOOL_NOT"
+
+  // $ANTLR start "AT_BOOL_OR"
+  public final void mAT_BOOL_OR() throws RecognitionException {
+    try {
+      int _type = AT_BOOL_OR;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:35:12: ( '||' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:35:14: '||'
+      {
+      match("||"); 
+
+      }
+
+      state.type = _type;
+      state.channel = _channel;
     }
-    // $ANTLR end "AT_COMP_LT"
-
-    // $ANTLR start "AT_COMP_LTE"
-    public final void mAT_COMP_LTE() throws RecognitionException {
-        try {
-            int _type = AT_COMP_LTE;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:42:13: ( '<=' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:42:15: '<='
-            {
-            match("<="); 
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+    finally {
+      // do for sure before leaving
     }
-    // $ANTLR end "AT_COMP_LTE"
-
-    // $ANTLR start "AT_COMP_NEQ"
-    public final void mAT_COMP_NEQ() throws RecognitionException {
-        try {
-            int _type = AT_COMP_NEQ;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:43:13: ( '!=' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:43:15: '!='
-            {
-            match("!="); 
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+  }
+  // $ANTLR end "AT_BOOL_OR"
+
+  // $ANTLR start "AT_COLON"
+  public final void mAT_COLON() throws RecognitionException {
+    try {
+      int _type = AT_COLON;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:36:10: ( ':' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:36:12: ':'
+      {
+      match(':'); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
     }
-    // $ANTLR end "AT_COMP_NEQ"
-
-    // $ANTLR start "AT_COND_QUE"
-    public final void mAT_COND_QUE() throws RecognitionException {
-        try {
-            int _type = AT_COND_QUE;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:44:13: ( '?' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:44:15: '?'
-            {
-            match('?'); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+    finally {
+      // do for sure before leaving
     }
-    // $ANTLR end "AT_COND_QUE"
-
-    // $ANTLR start "AT_DIVIDE"
-    public final void mAT_DIVIDE() throws RecognitionException {
-        try {
-            int _type = AT_DIVIDE;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:45:11: ( '/' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:45:13: '/'
-            {
-            match('/'); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+  }
+  // $ANTLR end "AT_COLON"
+
+  // $ANTLR start "AT_COMMA"
+  public final void mAT_COMMA() throws RecognitionException {
+    try {
+      int _type = AT_COMMA;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:37:10: ( ',' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:37:12: ','
+      {
+      match(','); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
     }
-    // $ANTLR end "AT_DIVIDE"
-
-    // $ANTLR start "AT_DOT"
-    public final void mAT_DOT() throws RecognitionException {
-        try {
-            int _type = AT_DOT;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:46:8: ( '.' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:46:10: '.'
-            {
-            match('.'); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+    finally {
+      // do for sure before leaving
     }
-    // $ANTLR end "AT_DOT"
-
-    // $ANTLR start "AT_LPAREN"
-    public final void mAT_LPAREN() throws RecognitionException {
-        try {
-            int _type = AT_LPAREN;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:47:11: ( '(' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:47:13: '('
-            {
-            match('('); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+  }
+  // $ANTLR end "AT_COMMA"
+
+  // $ANTLR start "AT_COMP_EQ"
+  public final void mAT_COMP_EQ() throws RecognitionException {
+    try {
+      int _type = AT_COMP_EQ;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:38:12: ( '==' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:38:14: '=='
+      {
+      match("=="); 
+
+      }
+
+      state.type = _type;
+      state.channel = _channel;
     }
-    // $ANTLR end "AT_LPAREN"
-
-    // $ANTLR start "AT_MODULO"
-    public final void mAT_MODULO() throws RecognitionException {
-        try {
-            int _type = AT_MODULO;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:48:11: ( '%' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:48:13: '%'
-            {
-            match('%'); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+    finally {
+      // do for sure before leaving
     }
-    // $ANTLR end "AT_MODULO"
-
-    // $ANTLR start "AT_MULTIPLY"
-    public final void mAT_MULTIPLY() throws RecognitionException {
-        try {
-            int _type = AT_MULTIPLY;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:49:13: ( '*' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:49:15: '*'
-            {
-            match('*'); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+  }
+  // $ANTLR end "AT_COMP_EQ"
+
+  // $ANTLR start "AT_COMP_GT"
+  public final void mAT_COMP_GT() throws RecognitionException {
+    try {
+      int _type = AT_COMP_GT;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:39:12: ( '>' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:39:14: '>'
+      {
+      match('>'); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
     }
-    // $ANTLR end "AT_MULTIPLY"
-
-    // $ANTLR start "AT_RPAREN"
-    public final void mAT_RPAREN() throws RecognitionException {
-        try {
-            int _type = AT_RPAREN;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:50:11: ( ')' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:50:13: ')'
-            {
-            match(')'); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+    finally {
+      // do for sure before leaving
     }
-    // $ANTLR end "AT_RPAREN"
-
-    // $ANTLR start "AT_SUBTRACT"
-    public final void mAT_SUBTRACT() throws RecognitionException {
-        try {
-            int _type = AT_SUBTRACT;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:51:13: ( '-' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:51:15: '-'
-            {
-            match('-'); 
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
+  }
+  // $ANTLR end "AT_COMP_GT"
+
+  // $ANTLR start "AT_COMP_GTE"
+  public final void mAT_COMP_GTE() throws RecognitionException {
+    try {
+      int _type = AT_COMP_GTE;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:40:13: ( '>=' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:40:15: '>='
+      {
+      match(">="); 
+
+      }
+
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "AT_COMP_GTE"
+
+  // $ANTLR start "AT_COMP_LT"
+  public final void mAT_COMP_LT() throws RecognitionException {
+    try {
+      int _type = AT_COMP_LT;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:41:12: ( '<' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:41:14: '<'
+      {
+      match('<'); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "AT_COMP_LT"
+
+  // $ANTLR start "AT_COMP_LTE"
+  public final void mAT_COMP_LTE() throws RecognitionException {
+    try {
+      int _type = AT_COMP_LTE;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:42:13: ( '<=' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:42:15: '<='
+      {
+      match("<="); 
+
+      }
+
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "AT_COMP_LTE"
+
+  // $ANTLR start "AT_COMP_NEQ"
+  public final void mAT_COMP_NEQ() throws RecognitionException {
+    try {
+      int _type = AT_COMP_NEQ;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:43:13: ( '!=' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:43:15: '!='
+      {
+      match("!="); 
+
+      }
+
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "AT_COMP_NEQ"
+
+  // $ANTLR start "AT_COND_QUE"
+  public final void mAT_COND_QUE() throws RecognitionException {
+    try {
+      int _type = AT_COND_QUE;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:44:13: ( '?' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:44:15: '?'
+      {
+      match('?'); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "AT_COND_QUE"
+
+  // $ANTLR start "AT_DIVIDE"
+  public final void mAT_DIVIDE() throws RecognitionException {
+    try {
+      int _type = AT_DIVIDE;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:45:11: ( '/' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:45:13: '/'
+      {
+      match('/'); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
     }
-    // $ANTLR end "AT_SUBTRACT"
-
-    // $ANTLR start "ID"
-    public final void mID() throws RecognitionException {
-        try {
-            int _type = ID;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
-            {
-            if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {
+  }
+  // $ANTLR end "AT_DIVIDE"
+
+  // $ANTLR start "AT_DOT"
+  public final void mAT_DOT() throws RecognitionException {
+    try {
+      int _type = AT_DOT;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:46:8: ( '.' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:46:10: '.'
+      {
+      match('.'); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "AT_DOT"
+
+  // $ANTLR start "AT_LPAREN"
+  public final void mAT_LPAREN() throws RecognitionException {
+    try {
+      int _type = AT_LPAREN;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:47:11: ( '(' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:47:13: '('
+      {
+      match('('); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "AT_LPAREN"
+
+  // $ANTLR start "AT_MODULO"
+  public final void mAT_MODULO() throws RecognitionException {
+    try {
+      int _type = AT_MODULO;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:48:11: ( '%' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:48:13: '%'
+      {
+      match('%'); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "AT_MODULO"
+
+  // $ANTLR start "AT_MULTIPLY"
+  public final void mAT_MULTIPLY() throws RecognitionException {
+    try {
+      int _type = AT_MULTIPLY;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:49:13: ( '*' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:49:15: '*'
+      {
+      match('*'); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "AT_MULTIPLY"
+
+  // $ANTLR start "AT_RPAREN"
+  public final void mAT_RPAREN() throws RecognitionException {
+    try {
+      int _type = AT_RPAREN;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:50:11: ( ')' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:50:13: ')'
+      {
+      match(')'); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "AT_RPAREN"
+
+  // $ANTLR start "AT_SUBTRACT"
+  public final void mAT_SUBTRACT() throws RecognitionException {
+    try {
+      int _type = AT_SUBTRACT;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:51:13: ( '-' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:51:15: '-'
+      {
+      match('-'); 
+      }
+
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "AT_SUBTRACT"
+
+  // $ANTLR start "ID"
+  public final void mID() throws RecognitionException {
+    try {
+      int _type = ID;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:334:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:334:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
+      {
+      if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {
+        input.consume();
+      }
+      else {
+        MismatchedSetException mse = new MismatchedSetException(null,input);
+        recover(mse);
+        throw mse;
+      }
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:334:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
+      loop1:
+      while (true) {
+        int alt1=2;
+        int LA1_0 = input.LA(1);
+        if ( ((LA1_0 >= '0' && LA1_0 <= '9')||(LA1_0 >= 'A' && LA1_0 <= 'Z')||LA1_0=='_'||(LA1_0 >= 'a' && LA1_0 <= 'z')) ) {
+          alt1=1;
+        }
+
+        switch (alt1) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:
+          {
+          if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {
+            input.consume();
+          }
+          else {
+            MismatchedSetException mse = new MismatchedSetException(null,input);
+            recover(mse);
+            throw mse;
+          }
+          }
+          break;
+
+        default :
+          break loop1;
+        }
+      }
+
+      }
+
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "ID"
+
+  // $ANTLR start "WS"
+  public final void mWS() throws RecognitionException {
+    try {
+      int _type = WS;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:338:5: ( ( ' ' | '\\t' | '\\n' | '\\r' )+ )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:338:7: ( ' ' | '\\t' | '\\n' | '\\r' )+
+      {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:338:7: ( ' ' | '\\t' | '\\n' | '\\r' )+
+      int cnt2=0;
+      loop2:
+      while (true) {
+        int alt2=2;
+        int LA2_0 = input.LA(1);
+        if ( ((LA2_0 >= '\t' && LA2_0 <= '\n')||LA2_0=='\r'||LA2_0==' ') ) {
+          alt2=1;
+        }
+
+        switch (alt2) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:
+          {
+          if ( (input.LA(1) >= '\t' && input.LA(1) <= '\n')||input.LA(1)=='\r'||input.LA(1)==' ' ) {
+            input.consume();
+          }
+          else {
+            MismatchedSetException mse = new MismatchedSetException(null,input);
+            recover(mse);
+            throw mse;
+          }
+          }
+          break;
+
+        default :
+          if ( cnt2 >= 1 ) break loop2;
+          EarlyExitException eee = new EarlyExitException(2, input);
+          throw eee;
+        }
+        cnt2++;
+      }
+
+      skip();
+      }
+
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "WS"
+
+  // $ANTLR start "DECIMAL"
+  public final void mDECIMAL() throws RecognitionException {
+    try {
+      int _type = DECIMAL;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:342:5: ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? )
+      int alt8=3;
+      alt8 = dfa8.predict(input);
+      switch (alt8) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:342:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?
+          {
+          mDECIMALINTEGER(); 
+
+          mAT_DOT(); 
+
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:342:29: ( DECIMALDIGIT )*
+          loop3:
+          while (true) {
+            int alt3=2;
+            int LA3_0 = input.LA(1);
+            if ( ((LA3_0 >= '0' && LA3_0 <= '9')) ) {
+              alt3=1;
+            }
+
+            switch (alt3) {
+            case 1 :
+              // src/java/org/apache/lucene/expressions/js/Javascript.g:
+              {
+              if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
                 input.consume();
-            }
-            else {
+              }
+              else {
                 MismatchedSetException mse = new MismatchedSetException(null,input);
                 recover(mse);
                 throw mse;
-            }
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:334:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
-            loop1:
-            while (true) {
-                int alt1=2;
-                int LA1_0 = input.LA(1);
-                if ( ((LA1_0 >= '0' && LA1_0 <= '9')||(LA1_0 >= 'A' && LA1_0 <= 'Z')||LA1_0=='_'||(LA1_0 >= 'a' && LA1_0 <= 'z')) ) {
-                    alt1=1;
-                }
-
-                switch (alt1) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:
-                    {
-                    if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {
-                        input.consume();
-                    }
-                    else {
-                        MismatchedSetException mse = new MismatchedSetException(null,input);
-                        recover(mse);
-                        throw mse;
-                    }
-                    }
-                    break;
-
-                default :
-                    break loop1;
-                }
-            }
+              }
+              }
+              break;
+
+            default :
+              break loop3;
+            }
+          }
+
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:342:43: ( EXPONENT )?
+          int alt4=2;
+          int LA4_0 = input.LA(1);
+          if ( (LA4_0=='E'||LA4_0=='e') ) {
+            alt4=1;
+          }
+          switch (alt4) {
+            case 1 :
+              // src/java/org/apache/lucene/expressions/js/Javascript.g:342:43: EXPONENT
+              {
+              mEXPONENT(); 
 
-            }
+              }
+              break;
 
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
-    }
-    // $ANTLR end "ID"
-
-    // $ANTLR start "WS"
-    public final void mWS() throws RecognitionException {
-        try {
-            int _type = WS;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:338:5: ( ( ' ' | '\\t' | '\\n' | '\\r' )+ )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:338:7: ( ' ' | '\\t' | '\\n' | '\\r' )+
-            {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:338:7: ( ' ' | '\\t' | '\\n' | '\\r' )+
-            int cnt2=0;
-            loop2:
-            while (true) {
-                int alt2=2;
-                int LA2_0 = input.LA(1);
-                if ( ((LA2_0 >= '\t' && LA2_0 <= '\n')||LA2_0=='\r'||LA2_0==' ') ) {
-                    alt2=1;
-                }
-
-                switch (alt2) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:
-                    {
-                    if ( (input.LA(1) >= '\t' && input.LA(1) <= '\n')||input.LA(1)=='\r'||input.LA(1)==' ' ) {
-                        input.consume();
-                    }
-                    else {
-                        MismatchedSetException mse = new MismatchedSetException(null,input);
-                        recover(mse);
-                        throw mse;
-                    }
-                    }
-                    break;
-
-                default :
-                    if ( cnt2 >= 1 ) break loop2;
-                    EarlyExitException eee = new EarlyExitException(2, input);
-                    throw eee;
-                }
-                cnt2++;
-            }
+          }
 
-            skip();
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
-    }
-    // $ANTLR end "WS"
-
-    // $ANTLR start "DECIMAL"
-    public final void mDECIMAL() throws RecognitionException {
-        try {
-            int _type = DECIMAL;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:342:5: ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? )
-            int alt8=3;
-            alt8 = dfa8.predict(input);
-            switch (alt8) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:342:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?
-                    {
-                    mDECIMALINTEGER(); 
-
-                    mAT_DOT(); 
-
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:342:29: ( DECIMALDIGIT )*
-                    loop3:
-                    while (true) {
-                        int alt3=2;
-                        int LA3_0 = input.LA(1);
-                        if ( ((LA3_0 >= '0' && LA3_0 <= '9')) ) {
-                            alt3=1;
-                        }
-
-                        switch (alt3) {
-                        case 1 :
-                            // src/java/org/apache/lucene/expressions/js/Javascript.g:
-                            {
-                            if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
-                                input.consume();
-                            }
-                            else {
-                                MismatchedSetException mse = new MismatchedSetException(null,input);
-                                recover(mse);
-                                throw mse;
-                            }
-                            }
-                            break;
-
-                        default :
-                            break loop3;
-                        }
-                    }
-
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:342:43: ( EXPONENT )?
-                    int alt4=2;
-                    int LA4_0 = input.LA(1);
-                    if ( (LA4_0=='E'||LA4_0=='e') ) {
-                        alt4=1;
-                    }
-                    switch (alt4) {
-                        case 1 :
-                            // src/java/org/apache/lucene/expressions/js/Javascript.g:342:43: EXPONENT
-                            {
-                            mEXPONENT(); 
-
-                            }
-                            break;
-
-                    }
-
-                    }
-                    break;
-                case 2 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:343:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?
-                    {
-                    mAT_DOT(); 
-
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:343:14: ( DECIMALDIGIT )+
-                    int cnt5=0;
-                    loop5:
-                    while (true) {
-                        int alt5=2;
-                        int LA5_0 = input.LA(1);
-                        if ( ((LA5_0 >= '0' && LA5_0 <= '9')) ) {
-                            alt5=1;
-                        }
-
-                        switch (alt5) {
-                        case 1 :
-                            // src/java/org/apache/lucene/expressions/js/Javascript.g:
-                            {
-                            if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
-                                input.consume();
-                            }
-                            else {
-                                MismatchedSetException mse = new MismatchedSetException(null,input);
-                                recover(mse);
-                                throw mse;
-                            }
-                            }
-                            break;
-
-                        default :
-                            if ( cnt5 >= 1 ) break loop5;
-                            EarlyExitException eee = new EarlyExitException(5, input);
-                            throw eee;
-                        }
-                        cnt5++;
-                    }
-
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:343:28: ( EXPONENT )?
-                    int alt6=2;
-                    int LA6_0 = input.LA(1);
-                    if ( (LA6_0=='E'||LA6_0=='e') ) {
-                        alt6=1;
-                    }
-                    switch (alt6) {
-                        case 1 :
-                            // src/java/org/apache/lucene/expressions/js/Javascript.g:343:28: EXPONENT
-                            {
-                            mEXPONENT(); 
-
-                            }
-                            break;
-
-                    }
-
-                    }
-                    break;
-                case 3 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:344:7: DECIMALINTEGER ( EXPONENT )?
-                    {
-                    mDECIMALINTEGER(); 
-
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:344:22: ( EXPONENT )?
-                    int alt7=2;
-                    int LA7_0 = input.LA(1);
-                    if ( (LA7_0=='E'||LA7_0=='e') ) {
-                        alt7=1;
-                    }
-                    switch (alt7) {
-                        case 1 :
-                            // src/java/org/apache/lucene/expressions/js/Javascript.g:344:22: EXPONENT
-                            {
-                            mEXPONENT(); 
-
-                            }
-                            break;
-
-                    }
-
-                    }
-                    break;
+          }
+          break;
+        case 2 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:343:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?
+          {
+          mAT_DOT(); 
 
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:343:14: ( DECIMALDIGIT )+
+          int cnt5=0;
+          loop5:
+          while (true) {
+            int alt5=2;
+            int LA5_0 = input.LA(1);
+            if ( ((LA5_0 >= '0' && LA5_0 <= '9')) ) {
+              alt5=1;
             }
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
-    }
-    // $ANTLR end "DECIMAL"
-
-    // $ANTLR start "OCTAL"
-    public final void mOCTAL() throws RecognitionException {
-        try {
-            int _type = OCTAL;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:348:5: ( '0' ( OCTALDIGIT )+ )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: '0' ( OCTALDIGIT )+
-            {
-            match('0'); 
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:348:11: ( OCTALDIGIT )+
-            int cnt9=0;
-            loop9:
-            while (true) {
-                int alt9=2;
-                int LA9_0 = input.LA(1);
-                if ( ((LA9_0 >= '0' && LA9_0 <= '7')) ) {
-                    alt9=1;
-                }
-
-                switch (alt9) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:
-                    {
-                    if ( (input.LA(1) >= '0' && input.LA(1) <= '7') ) {
-                        input.consume();
-                    }
-                    else {
-                        MismatchedSetException mse = new MismatchedSetException(null,input);
-                        recover(mse);
-                        throw mse;
-                    }
-                    }
-                    break;
-
-                default :
-                    if ( cnt9 >= 1 ) break loop9;
-                    EarlyExitException eee = new EarlyExitException(9, input);
-                    throw eee;
-                }
-                cnt9++;
-            }
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
-    }
-    // $ANTLR end "OCTAL"
-
-    // $ANTLR start "HEX"
-    public final void mHEX() throws RecognitionException {
-        try {
-            int _type = HEX;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' ) ( HEXDIGIT )+
-            {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' )
-            int alt10=2;
-            int LA10_0 = input.LA(1);
-            if ( (LA10_0=='0') ) {
-                int LA10_1 = input.LA(2);
-                if ( (LA10_1=='x') ) {
-                    alt10=1;
-                }
-                else if ( (LA10_1=='X') ) {
-                    alt10=2;
-                }
-
-                else {
-                    int nvaeMark = input.mark();
-                    try {
-                        input.consume();
-                        NoViableAltException nvae =
-                            new NoViableAltException("", 10, 1, input);
-                        throw nvae;
-                    } finally {
-                        input.rewind(nvaeMark);
-                    }
-                }
 
-            }
+            switch (alt5) {
+            case 1 :
+              // src/java/org/apache/lucene/expressions/js/Javascript.g:
+              {
+              if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
+                input.consume();
+              }
+              else {
+                MismatchedSetException mse = new MismatchedSetException(null,input);
+                recover(mse);
+                throw mse;
+              }
+              }
+              break;
+
+            default :
+              if ( cnt5 >= 1 ) break loop5;
+              EarlyExitException eee = new EarlyExitException(5, input);
+              throw eee;
+            }
+            cnt5++;
+          }
+
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:343:28: ( EXPONENT )?
+          int alt6=2;
+          int LA6_0 = input.LA(1);
+          if ( (LA6_0=='E'||LA6_0=='e') ) {
+            alt6=1;
+          }
+          switch (alt6) {
+            case 1 :
+              // src/java/org/apache/lucene/expressions/js/Javascript.g:343:28: EXPONENT
+              {
+              mEXPONENT(); 
+
+              }
+              break;
+
+          }
+
+          }
+          break;
+        case 3 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:344:7: DECIMALINTEGER ( EXPONENT )?
+          {
+          mDECIMALINTEGER(); 
+
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:344:22: ( EXPONENT )?
+          int alt7=2;
+          int LA7_0 = input.LA(1);
+          if ( (LA7_0=='E'||LA7_0=='e') ) {
+            alt7=1;
+          }
+          switch (alt7) {
+            case 1 :
+              // src/java/org/apache/lucene/expressions/js/Javascript.g:344:22: EXPONENT
+              {
+              mEXPONENT(); 
 
-            else {
-                NoViableAltException nvae =
-                    new NoViableAltException("", 10, 0, input);
-                throw nvae;
-            }
+              }
+              break;
 
-            switch (alt10) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:352:8: '0x'
-                    {
-                    match("0x"); 
+          }
 
-                    }
-                    break;
-                case 2 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:352:13: '0X'
-                    {
-                    match("0X"); 
+          }
+          break;
 
-                    }
-                    break;
+      }
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "DECIMAL"
+
+  // $ANTLR start "OCTAL"
+  public final void mOCTAL() throws RecognitionException {
+    try {
+      int _type = OCTAL;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:348:5: ( '0' ( OCTALDIGIT )+ )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: '0' ( OCTALDIGIT )+
+      {
+      match('0'); 
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:348:11: ( OCTALDIGIT )+
+      int cnt9=0;
+      loop9:
+      while (true) {
+        int alt9=2;
+        int LA9_0 = input.LA(1);
+        if ( ((LA9_0 >= '0' && LA9_0 <= '7')) ) {
+          alt9=1;
+        }
+
+        switch (alt9) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:
+          {
+          if ( (input.LA(1) >= '0' && input.LA(1) <= '7') ) {
+            input.consume();
+          }
+          else {
+            MismatchedSetException mse = new MismatchedSetException(null,input);
+            recover(mse);
+            throw mse;
+          }
+          }
+          break;
+
+        default :
+          if ( cnt9 >= 1 ) break loop9;
+          EarlyExitException eee = new EarlyExitException(9, input);
+          throw eee;
+        }
+        cnt9++;
+      }
+
+      }
+
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "OCTAL"
+
+  // $ANTLR start "HEX"
+  public final void mHEX() throws RecognitionException {
+    try {
+      int _type = HEX;
+      int _channel = DEFAULT_TOKEN_CHANNEL;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:352:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' ) ( HEXDIGIT )+
+      {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:352:7: ( '0x' | '0X' )
+      int alt10=2;
+      int LA10_0 = input.LA(1);
+      if ( (LA10_0=='0') ) {
+        int LA10_1 = input.LA(2);
+        if ( (LA10_1=='x') ) {
+          alt10=1;
+        }
+        else if ( (LA10_1=='X') ) {
+          alt10=2;
+        }
+
+        else {
+          int nvaeMark = input.mark();
+          try {
+            input.consume();
+            NoViableAltException nvae =
+              new NoViableAltException("", 10, 1, input);
+            throw nvae;
+          } finally {
+            input.rewind(nvaeMark);
+          }
+        }
+
+      }
+
+      else {
+        NoViableAltException nvae =
+          new NoViableAltException("", 10, 0, input);
+        throw nvae;
+      }
+
+      switch (alt10) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:352:8: '0x'
+          {
+          match("0x"); 
+
+          }
+          break;
+        case 2 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:352:13: '0X'
+          {
+          match("0X"); 
+
+          }
+          break;
+
+      }
+
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:352:19: ( HEXDIGIT )+
+      int cnt11=0;
+      loop11:
+      while (true) {
+        int alt11=2;
+        int LA11_0 = input.LA(1);
+        if ( ((LA11_0 >= '0' && LA11_0 <= '9')||(LA11_0 >= 'A' && LA11_0 <= 'F')||(LA11_0 >= 'a' && LA11_0 <= 'f')) ) {
+          alt11=1;
+        }
+
+        switch (alt11) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:
+          {
+          if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {
+            input.consume();
+          }
+          else {
+            MismatchedSetException mse = new MismatchedSetException(null,input);
+            recover(mse);
+            throw mse;
+          }
+          }
+          break;
+
+        default :
+          if ( cnt11 >= 1 ) break loop11;
+          EarlyExitException eee = new EarlyExitException(11, input);
+          throw eee;
+        }
+        cnt11++;
+      }
+
+      }
+
+      state.type = _type;
+      state.channel = _channel;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "HEX"
+
+  // $ANTLR start "DECIMALINTEGER"
+  public final void mDECIMALINTEGER() throws RecognitionException {
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:358:5: ( '0' | '1' .. '9' ( DECIMALDIGIT )* )
+      int alt13=2;
+      int LA13_0 = input.LA(1);
+      if ( (LA13_0=='0') ) {
+        alt13=1;
+      }
+      else if ( ((LA13_0 >= '1' && LA13_0 <= '9')) ) {
+        alt13=2;
+      }
+
+      else {
+        NoViableAltException nvae =
+          new NoViableAltException("", 13, 0, input);
+        throw nvae;
+      }
+
+      switch (alt13) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:358:7: '0'
+          {
+          match('0'); 
+          }
+          break;
+        case 2 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:359:7: '1' .. '9' ( DECIMALDIGIT )*
+          {
+          matchRange('1','9'); 
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:359:16: ( DECIMALDIGIT )*
+          loop12:
+          while (true) {
+            int alt12=2;
+            int LA12_0 = input.LA(1);
+            if ( ((LA12_0 >= '0' && LA12_0 <= '9')) ) {
+              alt12=1;
+            }
+
+            switch (alt12) {
+            case 1 :
+              // src/java/org/apache/lucene/expressions/js/Javascript.g:
+              {
+              if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
+                input.consume();
+              }
+              else {
+                MismatchedSetException mse = new MismatchedSetException(null,input);
+                recover(mse);
+                throw mse;
+              }
+              }
+              break;
 
+            default :
+              break loop12;
             }
+          }
 
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:352:19: ( HEXDIGIT )+
-            int cnt11=0;
-            loop11:
-            while (true) {
-                int alt11=2;
-                int LA11_0 = input.LA(1);
-                if ( ((LA11_0 >= '0' && LA11_0 <= '9')||(LA11_0 >= 'A' && LA11_0 <= 'F')||(LA11_0 >= 'a' && LA11_0 <= 'f')) ) {
-                    alt11=1;
-                }
-
-                switch (alt11) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:
-                    {
-                    if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {
-                        input.consume();
-                    }
-                    else {
-                        MismatchedSetException mse = new MismatchedSetException(null,input);
-                        recover(mse);
-                        throw mse;
-                    }
-                    }
-                    break;
-
-                default :
-                    if ( cnt11 >= 1 ) break loop11;
-                    EarlyExitException eee = new EarlyExitException(11, input);
-                    throw eee;
-                }
-                cnt11++;
-            }
+          }
+          break;
 
-            }
+      }
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "DECIMALINTEGER"
+
+  // $ANTLR start "EXPONENT"
+  public final void mEXPONENT() throws RecognitionException {
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:364:5: ( ( 'e' | 'E' ) ( '+' | '-' )? ( DECIMALDIGIT )+ )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:364:7: ( 'e' | 'E' ) ( '+' | '-' )? ( DECIMALDIGIT )+
+      {
+      if ( input.LA(1)=='E'||input.LA(1)=='e' ) {
+        input.consume();
+      }
+      else {
+        MismatchedSetException mse = new MismatchedSetException(null,input);
+        recover(mse);
+        throw mse;
+      }
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:364:17: ( '+' | '-' )?
+      int alt14=2;
+      int LA14_0 = input.LA(1);
+      if ( (LA14_0=='+'||LA14_0=='-') ) {
+        alt14=1;
+      }
+      switch (alt14) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:
+          {
+          if ( input.LA(1)=='+'||input.LA(1)=='-' ) {
+            input.consume();
+          }
+          else {
+            MismatchedSetException mse = new MismatchedSetException(null,input);
+            recover(mse);
+            throw mse;
+          }
+          }
+          break;
+
+      }
+
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:364:28: ( DECIMALDIGIT )+
+      int cnt15=0;
+      loop15:
+      while (true) {
+        int alt15=2;
+        int LA15_0 = input.LA(1);
+        if ( ((LA15_0 >= '0' && LA15_0 <= '9')) ) {
+          alt15=1;
+        }
+
+        switch (alt15) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:
+          {
+          if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
+            input.consume();
+          }
+          else {
+            MismatchedSetException mse = new MismatchedSetException(null,input);
+            recover(mse);
+            throw mse;
+          }
+          }
+          break;
+
+        default :
+          if ( cnt15 >= 1 ) break loop15;
+          EarlyExitException eee = new EarlyExitException(15, input);
+          throw eee;
+        }
+        cnt15++;
+      }
+
+      }
 
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-            // do for sure before leaving
-        }
     }
-    // $ANTLR end "HEX"
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "EXPONENT"
+
+  // $ANTLR start "DECIMALDIGIT"
+  public final void mDECIMALDIGIT() throws RecognitionException {
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:369:5: ( '0' .. '9' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:
+      {
+      if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
+        input.consume();
+      }
+      else {
+        MismatchedSetException mse = new MismatchedSetException(null,input);
+        recover(mse);
+        throw mse;
+      }
+      }
 
-    // $ANTLR start "DECIMALINTEGER"
-    public final void mDECIMALINTEGER() throws RecognitionException {
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:358:5: ( '0' | '1' .. '9' ( DECIMALDIGIT )* )
-            int alt13=2;
-            int LA13_0 = input.LA(1);
-            if ( (LA13_0=='0') ) {
-                alt13=1;
-            }
-            else if ( ((LA13_0 >= '1' && LA13_0 <= '9')) ) {
-                alt13=2;
-            }
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "DECIMALDIGIT"
+
+  // $ANTLR start "HEXDIGIT"
+  public final void mHEXDIGIT() throws RecognitionException {
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:374:5: ( DECIMALDIGIT | 'a' .. 'f' | 'A' .. 'F' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:
+      {
+      if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {
+        input.consume();
+      }
+      else {
+        MismatchedSetException mse = new MismatchedSetException(null,input);
+        recover(mse);
+        throw mse;
+      }
+      }
 
-            else {
-                NoViableAltException nvae =
-                    new NoViableAltException("", 13, 0, input);
-                throw nvae;
-            }
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "HEXDIGIT"
+
+  // $ANTLR start "OCTALDIGIT"
+  public final void mOCTALDIGIT() throws RecognitionException {
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:381:5: ( '0' .. '7' )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:
+      {
+      if ( (input.LA(1) >= '0' && input.LA(1) <= '7') ) {
+        input.consume();
+      }
+      else {
+        MismatchedSetException mse = new MismatchedSetException(null,input);
+        recover(mse);
+        throw mse;
+      }
+      }
 
-            switch (alt13) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:358:7: '0'
-                    {
-                    match('0'); 
-                    }
-                    break;
-                case 2 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:359:7: '1' .. '9' ( DECIMALDIGIT )*
-                    {
-                    matchRange('1','9'); 
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:359:16: ( DECIMALDIGIT )*
-                    loop12:
-                    while (true) {
-                        int alt12=2;
-                        int LA12_0 = input.LA(1);
-                        if ( ((LA12_0 >= '0' && LA12_0 <= '9')) ) {
-                            alt12=1;
-                        }
-
-                        switch (alt12) {
-                        case 1 :
-                            // src/java/org/apache/lucene/expressions/js/Javascript.g:
-                            {
-                            if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
-                                input.consume();
-                            }
-                            else {
-                                MismatchedSetException mse = new MismatchedSetException(null,input);
-                                recover(mse);
-                                throw mse;
-                            }
-                            }
-                            break;
-
-                        default :
-                            break loop12;
-                        }
-                    }
-
-                    }
-                    break;
+    }
+    finally {
+      // do for sure before leaving
+    }
+  }
+  // $ANTLR end "OCTALDIGIT"
+
+  @Override
+  public void mTokens() throws RecognitionException {
+    // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | ID | WS | DECIMAL | OCTAL | HEX )
+    int alt16=32;
+    switch ( input.LA(1) ) {
+    case '+':
+      {
+      alt16=1;
+      }
+      break;
+    case '&':
+      {
+      int LA16_2 = input.LA(2);
+      if ( (LA16_2=='&') ) {
+        alt16=9;
+      }
+
+      else {
+        alt16=2;
+      }
+
+      }
+      break;
+    case '~':
+      {
+      alt16=3;
+      }
+      break;
+    case '|':
+      {
+      int LA16_4 = input.LA(2);
+      if ( (LA16_4=='|') ) {
+        alt16=11;
+      }
+
+      else {
+        alt16=4;
+      }
+
+      }
+      break;
+    case '<':
+      {
+      switch ( input.LA(2) ) {
+      case '<':
+        {
+        alt16=5;
+        }
+        break;
+      case '=':
+        {
+        alt16=18;
+        }
+        break;
+      default:
+        alt16=17;
+      }
+      }
+      break;
+    case '>':
+      {
+      switch ( input.LA(2) ) {
+      case '>':
+        {
+        int LA16_31 = input.LA(3);
+        if ( (LA16_31=='>') ) {
+          alt16=7;
+        }
+
+        else {
+          alt16=6;
+        }
+
+        }
+        break;
+      case '=':
+        {
+        alt16=16;
+        }
+        break;
+      default:
+        alt16=15;
+      }
+      }
+      break;
+    case '^':
+      {
+      alt16=8;
+      }
+      break;
+    case '!':
+      {
+      int LA16_8 = input.LA(2);
+      if ( (LA16_8=='=') ) {
+        alt16=19;
+      }
+
+      else {
+        alt16=10;
+      }
+
+      }
+      break;
+    case ':':
+      {
+      alt16=12;
+      }
+      break;
+    case ',':
+      {
+      alt16=13;
+      }
+      break;
+    case '=':
+      {
+      alt16=14;
+      }
+      break;
+    case '?':
+      {
+      alt16=20;
+      }
+      break;
+    case '/':
+      {
+      alt16=21;
+      }
+      break;
+    case '.':
+      {
+      int LA16_14 = input.LA(2);
+      if ( ((LA16_14 >= '0' && LA16_14 <= '9')) ) {
+        alt16=30;
+      }
+
+      else {
+        alt16=22;
+      }
+
+      }
+      break;
+    case '(':
+      {
+      alt16=23;
+      }
+      break;
+    case '%':
+      {
+      alt16=24;
+      }
+      break;
+    case '*':
+      {
+      alt16=25;
+      }
+      break;
+    case ')':
+      {
+      alt16=26;
+      }
+      break;
+    case '-':
+      {
+      alt16=27;
+      }
+      break;
+    case 'A':
+    case 'B':
+    case 'C':
+    case 'D':
+    case 'E':
+    case 'F':
+    case 'G':
+    case 'H':
+    case 'I':
+    case 'J':
+    case 'K':
+    case 'L':
+    case 'M':
+    case 'N':
+    case 'O':
+    case 'P':
+    case 'Q':
+    case 'R':
+    case 'S':
+    case 'T':
+    case 'U':
+    case 'V':
+    case 'W':
+    case 'X':
+    case 'Y':
+    case 'Z':
+    case '_':
+    case 'a':
+    case 'b':
+    case 'c':
+    case 'd':
+    case 'e':
+    case 'f':
+    case 'g':
+    case 'h':
+    case 'i':
+    case 'j':
+    case 'k':
+    case 'l':
+    case 'm':
+    case 'n':
+    case 'o':
+    case 'p':
+    case 'q':
+    case 'r':
+    case 's':
+    case 't':
+    case 'u':
+    case 'v':
+    case 'w':
+    case 'x':
+    case 'y':
+    case 'z':
+      {
+      alt16=28;
+      }
+      break;
+    case '\t':
+    case '\n':
+    case '\r':
+    case ' ':
+      {
+      alt16=29;
+      }
+      break;
+    case '0':
+      {
+      switch ( input.LA(2) ) {
+      case 'X':
+      case 'x':
+        {
+        alt16=32;
+        }
+        break;
+      case '0':
+      case '1':
+      case '2':
+      case '3':
+      case '4':
+      case '5':
+      case '6':
+      case '7':
+        {
+        alt16=31;
+        }
+        break;
+      default:
+        alt16=30;
+      }
+      }
+      break;
+    case '1':
+    case '2':
+    case '3':
+    case '4':
+    case '5':
+    case '6':
+    case '7':
+    case '8':
+    case '9':
+      {
+      alt16=30;
+      }
+      break;
+    default:
+      NoViableAltException nvae =
+        new NoViableAltException("", 16, 0, input);
+      throw nvae;
+    }
+    switch (alt16) {
+      case 1 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD
+        {
+        mAT_ADD(); 
 
-            }
         }
-        finally {
-            // do for sure before leaving
+        break;
+      case 2 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND
+        {
+        mAT_BIT_AND(); 
+
         }
-    }
-    // $ANTLR end "DECIMALINTEGER"
+        break;
+      case 3 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT
+        {
+        mAT_BIT_NOT(); 
 
-    // $ANTLR start "EXPONENT"
-    public final void mEXPONENT() throws RecognitionException {
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:364:5: ( ( 'e' | 'E' ) ( '+' | '-' )? ( DECIMALDIGIT )+ )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:364:7: ( 'e' | 'E' ) ( '+' | '-' )? ( DECIMALDIGIT )+
-            {
-            if ( input.LA(1)=='E'||input.LA(1)=='e' ) {
-                input.consume();
-            }
-            else {
-                MismatchedSetException mse = new MismatchedSetException(null,input);
-                recover(mse);
-                throw mse;
-            }
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:364:17: ( '+' | '-' )?
-            int alt14=2;
-            int LA14_0 = input.LA(1);
-            if ( (LA14_0=='+'||LA14_0=='-') ) {
-                alt14=1;
-            }
-            switch (alt14) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:
-                    {
-                    if ( input.LA(1)=='+'||input.LA(1)=='-' ) {
-                        input.consume();
-                    }
-                    else {
-                        MismatchedSetException mse = new MismatchedSetException(null,input);
-                        recover(mse);
-                        throw mse;
-                    }
-                    }
-                    break;
+        }
+        break;
+      case 4 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR
+        {
+        mAT_BIT_OR(); 
 
-            }
+        }
+        break;
+      case 5 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL
+        {
+        mAT_BIT_SHL(); 
 
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:364:28: ( DECIMALDIGIT )+
-            int cnt15=0;
-            loop15:
-            while (true) {
-                int alt15=2;
-                int LA15_0 = input.LA(1);
-                if ( ((LA15_0 >= '0' && LA15_0 <= '9')) ) {
-                    alt15=1;
-                }
-
-                switch (alt15) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:
-                    {
-                    if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
-                        input.consume();
-                    }
-                    else {
-                        MismatchedSetException mse = new MismatchedSetException(null,input);
-                        recover(mse);
-                        throw mse;
-                    }
-                    }
-                    break;
-
-                default :
-                    if ( cnt15 >= 1 ) break loop15;
-                    EarlyExitException eee = new EarlyExitException(15, input);
-                    throw eee;
-                }
-                cnt15++;
-            }
+        }
+        break;
+      case 6 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR
+        {
+        mAT_BIT_SHR(); 
 
-            }
+        }
+        break;
+      case 7 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU
+        {
+        mAT_BIT_SHU(); 
 
         }
-        finally {
-            // do for sure before leaving
+        break;
+      case 8 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR
+        {
+        mAT_BIT_XOR(); 
+
         }
-    }
-    // $ANTLR end "EXPONENT"
+        break;
+      case 9 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND
+        {
+        mAT_BOOL_AND(); 
 
-    // $ANTLR start "DECIMALDIGIT"
-    public final void mDECIMALDIGIT() throws RecognitionException {
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:369:5: ( '0' .. '9' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:
-            {
-            if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
-                input.consume();
-            }
-            else {
-                MismatchedSetException mse = new MismatchedSetException(null,input);
-                recover(mse);
-                throw mse;
-            }
-            }
+        }
+        break;
+      case 10 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT
+        {
+        mAT_BOOL_NOT(); 
 
         }
-        finally {
-            // do for sure before leaving
+        break;
+      case 11 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR
+        {
+        mAT_BOOL_OR(); 
+
         }
-    }
-    // $ANTLR end "DECIMALDIGIT"
+        break;
+      case 12 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON
+        {
+        mAT_COLON(); 
 
-    // $ANTLR start "HEXDIGIT"
-    public final void mHEXDIGIT() throws RecognitionException {
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:374:5: ( DECIMALDIGIT | 'a' .. 'f' | 'A' .. 'F' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:
-            {
-            if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {
-                input.consume();
-            }
-            else {
-                MismatchedSetException mse = new MismatchedSetException(null,input);
-                recover(mse);
-                throw mse;
-            }
-            }
+        }
+        break;
+      case 13 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA
+        {
+        mAT_COMMA(); 
 
         }
-        finally {
-            // do for sure before leaving
+        break;
+      case 14 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ
+        {
+        mAT_COMP_EQ(); 
+
         }
-    }
-    // $ANTLR end "HEXDIGIT"
+        break;
+      case 15 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT
+        {
+        mAT_COMP_GT(); 
 
-    // $ANTLR start "OCTALDIGIT"
-    public final void mOCTALDIGIT() throws RecognitionException {
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:381:5: ( '0' .. '7' )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:
-            {
-            if ( (input.LA(1) >= '0' && input.LA(1) <= '7') ) {
-                input.consume();
-            }
-            else {
-                MismatchedSetException mse = new MismatchedSetException(null,input);
-                recover(mse);
-                throw mse;
-            }
-            }
+        }
+        break;
+      case 16 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE
+        {
+        mAT_COMP_GTE(); 
 
         }
-        finally {
-            // do for sure before leaving
+        break;
+      case 17 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT
+        {
+        mAT_COMP_LT(); 
+
         }
-    }
-    // $ANTLR end "OCTALDIGIT"
+        break;
+      case 18 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE
+        {
+        mAT_COMP_LTE(); 
 
-    @Override
-    public void mTokens() throws RecognitionException {
-        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | ID | WS | DECIMAL | OCTAL | HEX )
-        int alt16=32;
-        switch ( input.LA(1) ) {
-        case '+':
-            {
-            alt16=1;
-            }
-            break;
-        case '&':
-            {
-            int LA16_2 = input.LA(2);
-            if ( (LA16_2=='&') ) {
-                alt16=9;
-            }
+        }
+        break;
+      case 19 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ
+        {
+        mAT_COMP_NEQ(); 
 
-            else {
-                alt16=2;
-            }
+        }
+        break;
+      case 20 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE
+        {
+        mAT_COND_QUE(); 
 
-            }
-            break;
-        case '~':
-            {
-            alt16=3;
-            }
-            break;
-        case '|':
-            {
-            int LA16_4 = input.LA(2);
-            if ( (LA16_4=='|') ) {
-                alt16=11;
-            }
+        }
+        break;
+      case 21 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE
+        {
+        mAT_DIVIDE(); 
 
-            else {
-                alt16=4;
-            }
+        }
+        break;
+      case 22 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT
+        {
+        mAT_DOT(); 
 
-            }
-            break;
-        case '<':
-            {
-            switch ( input.LA(2) ) {
-            case '<':
-                {
-                alt16=5;
-                }
-                break;
-            case '=':
-                {
-                alt16=18;
-                }
-                break;
-            default:
-                alt16=17;
-            }
-            }
-            break;
-        case '>':
-            {
-            switch ( input.LA(2) ) {
-            case '>':
-                {
-                int LA16_31 = input.LA(3);
-                if ( (LA16_31=='>') ) {
-                    alt16=7;
-                }
-
-                else {
-                    alt16=6;
-                }
-
-                }
-                break;
-            case '=':
-                {
-                alt16=16;
-                }
-                break;
-            default:
-                alt16=15;
-            }
-            }
-            break;
-        case '^':
-            {
-            alt16=8;
-            }
-            break;
-        case '!':
-            {
-            int LA16_8 = input.LA(2);
-            if ( (LA16_8=='=') ) {
-                alt16=19;
-            }
+        }
+        break;
+      case 23 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN
+        {
+        mAT_LPAREN(); 
 
-            else {
-                alt16=10;
-            }
+        }
+        break;
+      case 24 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO
+        {
+        mAT_MODULO(); 
 
-            }
-            break;
-        case ':':
-            {
-            alt16=12;
-            }
-            break;
-        case ',':
-            {
-            alt16=13;
-            }
-            break;
-        case '=':
-            {
-            alt16=14;
-            }
-            break;
-        case '?':
-            {
-            alt16=20;
-            }
-            break;
-        case '/':
-            {
-            alt16=21;
-            }
-            break;
-        case '.':
-            {
-            int LA16_14 = input.LA(2);
-            if ( ((LA16_14 >= '0' && LA16_14 <= '9')) ) {
-                alt16=30;
-            }
+        }
+        break;
+      case 25 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY
+        {
+        mAT_MULTIPLY(); 
 
-            else {
-                alt16=22;
-            }
+        }
+        break;
+      case 26 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN
+        {
+        mAT_RPAREN(); 
 
-            }
-            break;
-        case '(':
-            {
-            alt16=23;
-            }
-            break;
-        case '%':
-            {
-            alt16=24;
-            }
-            break;
-        case '*':
-            {
-            alt16=25;
-            }
-            break;
-        case ')':
-            {
-            alt16=26;
-            }
-            break;
-        case '-':
-            {
-            alt16=27;
-            }
-            break;
-        case 'A':
-        case 'B':
-        case 'C':
-        case 'D':
-        case 'E':
-        case 'F':
-        case 'G':
-        case 'H':
-        case 'I':
-        case 'J':
-        case 'K':
-        case 'L':
-        case 'M':
-        case 'N':
-        case 'O':
-        case 'P':
-        case 'Q':
-        case 'R':
-        case 'S':
-        case 'T':
-        case 'U':
-        case 'V':
-        case 'W':
-        case 'X':
-        case 'Y':
-        case 'Z':
-        case '_':
-        case 'a':
-        case 'b':
-        case 'c':
-        case 'd':
-        case 'e':
-        case 'f':
-        case 'g':
-        case 'h':
-        case 'i':
-        case 'j':
-        case 'k':
-        case 'l':
-        case 'm':
-        case 'n':
-        case 'o':
-        case 'p':
-        case 'q':
-        case 'r':
-        case 's':
-        case 't':
-        case 'u':
-        case 'v':
-        case 'w':
-        case 'x':
-        case 'y':
-        case 'z':
-            {
-            alt16=28;
-            }
-            break;
-        case '\t':
-        case '\n':
-        case '\r':
-        case ' ':
-            {
-            alt16=29;
-            }
-            break;
-        case '0':
-            {
-            switch ( input.LA(2) ) {
-            case 'X':
-            case 'x':
-                {
-                alt16=32;
-                }
-                break;
-            case '0':
-            case '1':
-            case '2':
-            case '3':
-            case '4':
-            case '5':
-            case '6':
-            case '7':
-                {
-                alt16=31;
-                }
-                break;
-            default:
-                alt16=30;
-            }
-            }
-            break;
-        case '1':
-        case '2':
-        case '3':
-        case '4':
-        case '5':
-        case '6':
-        case '7':
-        case '8':
-        case '9':
-            {
-            alt16=30;
-            }
-            break;
-        default:
-            NoViableAltException nvae =
-                new NoViableAltException("", 16, 0, input);
-            throw nvae;
         }
-        switch (alt16) {
-            case 1 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD
-                {
-                mAT_ADD(); 
-
-                }
-                break;
-            case 2 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND
-                {
-                mAT_BIT_AND(); 
-
-                }
-                break;
-            case 3 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT
-                {
-                mAT_BIT_NOT(); 
-
-                }
-                break;
-            case 4 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR
-                {
-                mAT_BIT_OR(); 
-
-                }
-                break;
-            case 5 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL
-                {
-                mAT_BIT_SHL(); 
-
-                }
-                break;
-            case 6 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR
-                {
-                mAT_BIT_SHR(); 
-
-                }
-                break;
-            case 7 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU
-                {
-                mAT_BIT_SHU(); 
-
-                }
-                break;
-            case 8 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR
-                {
-                mAT_BIT_XOR(); 
-
-                }
-                break;
-            case 9 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND
-                {
-                mAT_BOOL_AND(); 
-
-                }
-                break;
-            case 10 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT
-                {
-                mAT_BOOL_NOT(); 
-
-                }
-                break;
-            case 11 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR
-                {
-                mAT_BOOL_OR(); 
-
-                }
-                break;
-            case 12 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON
-                {
-                mAT_COLON(); 
-
-                }
-                break;
-            case 13 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA
-                {
-                mAT_COMMA(); 
-
-                }
-                break;
-            case 14 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ
-                {
-                mAT_COMP_EQ(); 
-
-                }
-                break;
-            case 15 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT
-                {
-                mAT_COMP_GT(); 
-
-                }
-                break;
-            case 16 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE
-                {
-                mAT_COMP_GTE(); 
-
-                }
-                break;
-            case 17 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT
-                {
-                mAT_COMP_LT(); 
-
-                }
-                break;
-            case 18 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE
-                {
-                mAT_COMP_LTE(); 
-
-                }
-                break;
-            case 19 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ
-                {
-                mAT_COMP_NEQ(); 
-
-                }
-                break;
-            case 20 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE
-                {
-                mAT_COND_QUE(); 
-
-                }
-                break;
-            case 21 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE
-                {
-                mAT_DIVIDE(); 
-
-                }
-                break;
-            case 22 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT
-                {
-                mAT_DOT(); 
-
-                }
-                break;
-            case 23 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN
-                {
-                mAT_LPAREN(); 
-
-                }
-                break;
-            case 24 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO
-                {
-                mAT_MODULO(); 
-
-                }
-                break;
-            case 25 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY
-                {
-                mAT_MULTIPLY(); 
-
-                }
-                break;
-            case 26 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN
-                {
-                mAT_RPAREN(); 
-
-                }
-                break;
-            case 27 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT
-                {
-                mAT_SUBTRACT(); 
-
-                }
-                break;
-            case 28 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: ID
-                {
-                mID(); 
-
-                }
-                break;
-            case 29 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:301: WS
-                {
-                mWS(); 
-
-                }
-                break;
-            case 30 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:304: DECIMAL
-                {
-                mDECIMAL(); 
-
-                }
-                break;
-            case 31 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:312: OCTAL
-                {
-                mOCTAL(); 
-
-                }
-                break;
-            case 32 :
-                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:318: HEX
-                {
-                mHEX(); 
-
-                }
-                break;
+        break;
+      case 27 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT
+        {
+        mAT_SUBTRACT(); 
 
         }
-    }
+        break;
+      case 28 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: ID
+        {
+        mID(); 
 
+        }
+        break;
+      case 29 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:301: WS
+        {
+        mWS(); 
 
-    protected DFA8 dfa8 = new DFA8(this);
-    static final String DFA8_eotS =
-        "\1\uffff\2\4\3\uffff\1\4";
-    static final String DFA8_eofS =
-        "\7\uffff";
-    static final String DFA8_minS =
-        "\3\56\3\uffff\1\56";
-    static final String DFA8_maxS =
-        "\1\71\1\56\1\71\3\uffff\1\71";
-    static final String DFA8_acceptS =
-        "\3\uffff\1\2\1\3\1\1\1\uffff";
-    static final String DFA8_specialS =
-        "\7\uffff}>";
-    static final String[] DFA8_transitionS = {
-            "\1\3\1\uffff\1\1\11\2",
-            "\1\5",
-            "\1\5\1\uffff\12\6",
-            "",
-            "",
-            "",
-            "\1\5\1\uffff\12\6"
-    };
-
-    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
-    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
-    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
-    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
-    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
-    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
-    static final short[][] DFA8_transition;
-
-    static {
-        int numStates = DFA8_transitionS.length;
-        DFA8_transition = new short[numStates][];
-        for (int i=0; i<numStates; i++) {
-            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
         }
-    }
+        break;
+      case 30 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:304: DECIMAL
+        {
+        mDECIMAL(); 
 
-    protected class DFA8 extends DFA {
+        }
+        break;
+      case 31 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:312: OCTAL
+        {
+        mOCTAL(); 
 
-        public DFA8(BaseRecognizer recognizer) {
-            this.recognizer = recognizer;
-            this.decisionNumber = 8;
-            this.eot = DFA8_eot;
-            this.eof = DFA8_eof;
-            this.min = DFA8_min;
-            this.max = DFA8_max;
-            this.accept = DFA8_accept;
-            this.special = DFA8_special;
-            this.transition = DFA8_transition;
         }
-        @Override
-        public String getDescription() {
-            return "341:1: DECIMAL : ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? );";
+        break;
+      case 32 :
+        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:318: HEX
+        {
+        mHEX(); 
+
         }
+        break;
+
+    }
+  }
+
+
+  protected DFA8 dfa8 = new DFA8(this);
+  static final String DFA8_eotS =
+    "\1\uffff\2\4\3\uffff\1\4";
+  static final String DFA8_eofS =
+    "\7\uffff";
+  static final String DFA8_minS =
+    "\3\56\3\uffff\1\56";
+  static final String DFA8_maxS =
+    "\1\71\1\56\1\71\3\uffff\1\71";
+  static final String DFA8_acceptS =
+    "\3\uffff\1\2\1\3\1\1\1\uffff";
+  static final String DFA8_specialS =
+    "\7\uffff}>";
+  static final String[] DFA8_transitionS = {
+      "\1\3\1\uffff\1\1\11\2",
+      "\1\5",
+      "\1\5\1\uffff\12\6",
+      "",
+      "",
+      "",
+      "\1\5\1\uffff\12\6"
+  };
+
+  static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
+  static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
+  static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
+  static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
+  static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
+  static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
+  static final short[][] DFA8_transition;
+
+  static {
+    int numStates = DFA8_transitionS.length;
+    DFA8_transition = new short[numStates][];
+    for (int i=0; i<numStates; i++) {
+      DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
+    }
+  }
+
+  protected class DFA8 extends DFA {
+
+    public DFA8(BaseRecognizer recognizer) {
+      this.recognizer = recognizer;
+      this.decisionNumber = 8;
+      this.eot = DFA8_eot;
+      this.eof = DFA8_eof;
+      this.min = DFA8_min;
+      this.max = DFA8_max;
+      this.accept = DFA8_accept;
+      this.special = DFA8_special;
+      this.transition = DFA8_transition;
+    }
+    @Override
+    public String getDescription() {
+      return "341:1: DECIMAL : ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? );";
     }
+  }
 
 }
diff --git a/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser.java b/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser.java
index 6adba47..df38a4a 100644
--- a/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser.java
+++ b/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser.java
@@ -15,1949 +15,1949 @@ import org.antlr.runtime.tree.*;
 
 @SuppressWarnings("all")
 class JavascriptParser extends Parser {
-    public static final String[] tokenNames = new String[] {
-        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AT_ADD", "AT_BIT_AND", "AT_BIT_NOT", 
-        "AT_BIT_OR", "AT_BIT_SHL", "AT_BIT_SHR", "AT_BIT_SHU", "AT_BIT_XOR", "AT_BOOL_AND", 
-        "AT_BOOL_NOT", "AT_BOOL_OR", "AT_CALL", "AT_COLON", "AT_COMMA", "AT_COMP_EQ", 
-        "AT_COMP_GT", "AT_COMP_GTE", "AT_COMP_LT", "AT_COMP_LTE", "AT_COMP_NEQ", 
-        "AT_COND_QUE", "AT_DIVIDE", "AT_DOT", "AT_LPAREN", "AT_MODULO", "AT_MULTIPLY", 
-        "AT_NEGATE", "AT_RPAREN", "AT_SUBTRACT", "DECIMAL", "DECIMALDIGIT", "DECIMALINTEGER", 
-        "EXPONENT", "HEX", "HEXDIGIT", "ID", "OCTAL", "OCTALDIGIT", "WS"
-    };
-    public static final int EOF=-1;
-    public static final int AT_ADD=4;
-    public static final int AT_BIT_AND=5;
-    public static final int AT_BIT_NOT=6;
-    public static final int AT_BIT_OR=7;
-    public static final int AT_BIT_SHL=8;
-    public static final int AT_BIT_SHR=9;
-    public static final int AT_BIT_SHU=10;
-    public static final int AT_BIT_XOR=11;
-    public static final int AT_BOOL_AND=12;
-    public static final int AT_BOOL_NOT=13;
-    public static final int AT_BOOL_OR=14;
-    public static final int AT_CALL=15;
-    public static final int AT_COLON=16;
-    public static final int AT_COMMA=17;
-    public static final int AT_COMP_EQ=18;
-    public static final int AT_COMP_GT=19;
-    public static final int AT_COMP_GTE=20;
-    public static final int AT_COMP_LT=21;
-    public static final int AT_COMP_LTE=22;
-    public static final int AT_COMP_NEQ=23;
-    public static final int AT_COND_QUE=24;
-    public static final int AT_DIVIDE=25;
-    public static final int AT_DOT=26;
-    public static final int AT_LPAREN=27;
-    public static final int AT_MODULO=28;
-    public static final int AT_MULTIPLY=29;
-    public static final int AT_NEGATE=30;
-    public static final int AT_RPAREN=31;
-    public static final int AT_SUBTRACT=32;
-    public static final int DECIMAL=33;
-    public static final int DECIMALDIGIT=34;
-    public static final int DECIMALINTEGER=35;
-    public static final int EXPONENT=36;
-    public static final int HEX=37;
-    public static final int HEXDIGIT=38;
-    public static final int ID=39;
-    public static final int OCTAL=40;
-    public static final int OCTALDIGIT=41;
-    public static final int WS=42;
-
-    // delegates
-    public Parser[] getDelegates() {
-        return new Parser[] {};
-    }
+  public static final String[] tokenNames = new String[] {
+    "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AT_ADD", "AT_BIT_AND", "AT_BIT_NOT", 
+    "AT_BIT_OR", "AT_BIT_SHL", "AT_BIT_SHR", "AT_BIT_SHU", "AT_BIT_XOR", "AT_BOOL_AND", 
+    "AT_BOOL_NOT", "AT_BOOL_OR", "AT_CALL", "AT_COLON", "AT_COMMA", "AT_COMP_EQ", 
+    "AT_COMP_GT", "AT_COMP_GTE", "AT_COMP_LT", "AT_COMP_LTE", "AT_COMP_NEQ", 
+    "AT_COND_QUE", "AT_DIVIDE", "AT_DOT", "AT_LPAREN", "AT_MODULO", "AT_MULTIPLY", 
+    "AT_NEGATE", "AT_RPAREN", "AT_SUBTRACT", "DECIMAL", "DECIMALDIGIT", "DECIMALINTEGER", 
+    "EXPONENT", "HEX", "HEXDIGIT", "ID", "OCTAL", "OCTALDIGIT", "WS"
+  };
+  public static final int EOF=-1;
+  public static final int AT_ADD=4;
+  public static final int AT_BIT_AND=5;
+  public static final int AT_BIT_NOT=6;
+  public static final int AT_BIT_OR=7;
+  public static final int AT_BIT_SHL=8;
+  public static final int AT_BIT_SHR=9;
+  public static final int AT_BIT_SHU=10;
+  public static final int AT_BIT_XOR=11;
+  public static final int AT_BOOL_AND=12;
+  public static final int AT_BOOL_NOT=13;
+  public static final int AT_BOOL_OR=14;
+  public static final int AT_CALL=15;
+  public static final int AT_COLON=16;
+  public static final int AT_COMMA=17;
+  public static final int AT_COMP_EQ=18;
+  public static final int AT_COMP_GT=19;
+  public static final int AT_COMP_GTE=20;
+  public static final int AT_COMP_LT=21;
+  public static final int AT_COMP_LTE=22;
+  public static final int AT_COMP_NEQ=23;
+  public static final int AT_COND_QUE=24;
+  public static final int AT_DIVIDE=25;
+  public static final int AT_DOT=26;
+  public static final int AT_LPAREN=27;
+  public static final int AT_MODULO=28;
+  public static final int AT_MULTIPLY=29;
+  public static final int AT_NEGATE=30;
+  public static final int AT_RPAREN=31;
+  public static final int AT_SUBTRACT=32;
+  public static final int DECIMAL=33;
+  public static final int DECIMALDIGIT=34;
+  public static final int DECIMALINTEGER=35;
+  public static final int EXPONENT=36;
+  public static final int HEX=37;
+  public static final int HEXDIGIT=38;
+  public static final int ID=39;
+  public static final int OCTAL=40;
+  public static final int OCTALDIGIT=41;
+  public static final int WS=42;
+
+  // delegates
+  public Parser[] getDelegates() {
+    return new Parser[] {};
+  }
+
+  // delegators
+
+
+  public JavascriptParser(TokenStream input) {
+    this(input, new RecognizerSharedState());
+  }
+  public JavascriptParser(TokenStream input, RecognizerSharedState state) {
+    super(input, state);
+  }
+
+  protected TreeAdaptor adaptor = new CommonTreeAdaptor();
+
+  public void setTreeAdaptor(TreeAdaptor adaptor) {
+    this.adaptor = adaptor;
+  }
+  public TreeAdaptor getTreeAdaptor() {
+    return adaptor;
+  }
+  @Override public String[] getTokenNames() { return JavascriptParser.tokenNames; }
+  @Override public String getGrammarFileName() { return "src/java/org/apache/lucene/expressions/js/Javascript.g"; }
+
+
+
+  @Override
+  public void displayRecognitionError(String[] tokenNames, RecognitionException re) {
+      String message;
+
+      if (re.token == null) {
+          message = " unknown error (missing token).";
+      }
+      else if (re instanceof UnwantedTokenException) {
+          message = " extraneous " + getReadableTokenString(re.token)
+                  +  " at position (" + re.charPositionInLine + ").";
+      }
+      else if (re instanceof MissingTokenException) {
+          message = " missing " + getReadableTokenString(re.token)
+                  +  " at position (" + re.charPositionInLine + ").";
+      }
+      else if (re instanceof NoViableAltException) {
+          switch (re.token.getType()) {
+          case EOF:
+              message = " unexpected end of expression.";
+              break;
+          default:
+              message = " invalid sequence of tokens near " + getReadableTokenString(re.token)
+                      +  " at position (" + re.charPositionInLine + ").";
+              break;
+          }
+      }
+      else {
+          message = " unexpected token " + getReadableTokenString(re.token) 
+                  +  " at position (" + re.charPositionInLine + ").";
+      }
+      ParseException parseException = new ParseException(message, re.charPositionInLine);
+      parseException.initCause(re);
+      throw new RuntimeException(parseException);
+  }
+
+  public static String getReadableTokenString(Token token) {
+      if (token == null) {
+          return "unknown token";
+      }
+
+      switch (token.getType()) {
+      case AT_LPAREN:
+          return "open parenthesis '('";
+      case AT_RPAREN:
+          return "close parenthesis ')'";
+      case AT_COMP_LT:
+          return "less than '<'";
+      case AT_COMP_LTE:
+          return "less than or equal '<='";
+      case AT_COMP_GT:
+          return "greater than '>'";
+      case AT_COMP_GTE:
+          return "greater than or equal '>='";
+      case AT_COMP_EQ:
+          return "equal '=='";
+      case AT_NEGATE:
+          return "negate '!='";
+      case AT_BOOL_NOT:
+          return "boolean not '!'";
+      case AT_BOOL_AND:
+          return "boolean and '&&'";
+      case AT_BOOL_OR:
+          return "boolean or '||'";
+      case AT_COND_QUE:
+          return "conditional '?'";
+      case AT_ADD:
+          return "addition '+'";
+      case AT_SUBTRACT:
+          return "subtraction '-'";
+      case AT_MULTIPLY:
+          return "multiplication '*'";
+      case AT_DIVIDE:
+          return "division '/'";
+      case AT_MODULO:
+          return "modulo '%'";
+      case AT_BIT_SHL:
+          return "bit shift left '<<'";
+      case AT_BIT_SHR:
+          return "bit shift right '>>'";
+      case AT_BIT_SHU:
+          return "unsigned bit shift right '>>>'";
+      case AT_BIT_AND:
+          return "bitwise and '&'";
+      case AT_BIT_OR:
+          return "bitwise or '|'";
+      case AT_BIT_XOR:
+          return "bitwise xor '^'";
+      case AT_BIT_NOT:
+          return "bitwise not '~'";
+      case ID:
+          return "identifier '" + token.getText() + "'";
+      case DECIMAL:
+          return "decimal '" + token.getText() + "'";
+      case OCTAL:
+          return "octal '" + token.getText() + "'";
+      case HEX:
+          return "hex '" + token.getText() + "'";
+      case EOF:
+          return "end of expression";
+      default:
+          return "'" + token.getText() + "'";
+      }
+  }
+
+
+
+  public static class expression_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
 
-    // delegators
 
+  // $ANTLR start "expression"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:250:1: expression : conditional EOF !;
+  public final JavascriptParser.expression_return expression() throws RecognitionException {
+    JavascriptParser.expression_return retval = new JavascriptParser.expression_return();
+    retval.start = input.LT(1);
 
-    public JavascriptParser(TokenStream input) {
-        this(input, new RecognizerSharedState());
-    }
-    public JavascriptParser(TokenStream input, RecognizerSharedState state) {
-        super(input, state);
-    }
+    CommonTree root_0 = null;
 
-    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
+    Token EOF2=null;
+    ParserRuleReturnScope conditional1 =null;
 
-    public void setTreeAdaptor(TreeAdaptor adaptor) {
-        this.adaptor = adaptor;
-    }
-    public TreeAdaptor getTreeAdaptor() {
-        return adaptor;
-    }
-    @Override public String[] getTokenNames() { return JavascriptParser.tokenNames; }
-    @Override public String getGrammarFileName() { return "src/java/org/apache/lucene/expressions/js/Javascript.g"; }
+    CommonTree EOF2_tree=null;
 
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:251:5: ( conditional EOF !)
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:251:7: conditional EOF !
+      {
+      root_0 = (CommonTree)adaptor.nil();
 
 
-    @Override
-    public void displayRecognitionError(String[] tokenNames, RecognitionException re) {
-        String message;
+      pushFollow(FOLLOW_conditional_in_expression737);
+      conditional1=conditional();
+      state._fsp--;
 
-        if (re.token == null) {
-            message = " unknown error (missing token).";
-        }
-        else if (re instanceof UnwantedTokenException) {
-            message = " extraneous " + getReadableTokenString(re.token)
-                    +  " at position (" + re.charPositionInLine + ").";
-        }
-        else if (re instanceof MissingTokenException) {
-            message = " missing " + getReadableTokenString(re.token)
-                    +  " at position (" + re.charPositionInLine + ").";
-        }
-        else if (re instanceof NoViableAltException) {
-            switch (re.token.getType()) {
-            case EOF:
-                message = " unexpected end of expression.";
-                break;
-            default:
-                message = " invalid sequence of tokens near " + getReadableTokenString(re.token)
-                        +  " at position (" + re.charPositionInLine + ").";
-                break;
-            }
-        }
-        else {
-            message = " unexpected token " + getReadableTokenString(re.token) 
-                    +  " at position (" + re.charPositionInLine + ").";
-        }
-        ParseException parseException = new ParseException(message, re.charPositionInLine);
-        parseException.initCause(re);
-        throw new RuntimeException(parseException);
-    }
+      adaptor.addChild(root_0, conditional1.getTree());
 
-    public static String getReadableTokenString(Token token) {
-        if (token == null) {
-            return "unknown token";
-        }
+      EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_expression739); 
+      }
 
-        switch (token.getType()) {
-        case AT_LPAREN:
-            return "open parenthesis '('";
-        case AT_RPAREN:
-            return "close parenthesis ')'";
-        case AT_COMP_LT:
-            return "less than '<'";
-        case AT_COMP_LTE:
-            return "less than or equal '<='";
-        case AT_COMP_GT:
-            return "greater than '>'";
-        case AT_COMP_GTE:
-            return "greater than or equal '>='";
-        case AT_COMP_EQ:
-            return "equal '=='";
-        case AT_NEGATE:
-            return "negate '!='";
-        case AT_BOOL_NOT:
-            return "boolean not '!'";
-        case AT_BOOL_AND:
-            return "boolean and '&&'";
-        case AT_BOOL_OR:
-            return "boolean or '||'";
-        case AT_COND_QUE:
-            return "conditional '?'";
-        case AT_ADD:
-            return "addition '+'";
-        case AT_SUBTRACT:
-            return "subtraction '-'";
-        case AT_MULTIPLY:
-            return "multiplication '*'";
-        case AT_DIVIDE:
-            return "division '/'";
-        case AT_MODULO:
-            return "modulo '%'";
-        case AT_BIT_SHL:
-            return "bit shift left '<<'";
-        case AT_BIT_SHR:
-            return "bit shift right '>>'";
-        case AT_BIT_SHU:
-            return "unsigned bit shift right '>>>'";
-        case AT_BIT_AND:
-            return "bitwise and '&'";
-        case AT_BIT_OR:
-            return "bitwise or '|'";
-        case AT_BIT_XOR:
-            return "bitwise xor '^'";
-        case AT_BIT_NOT:
-            return "bitwise not '~'";
-        case ID:
-            return "identifier '" + token.getText() + "'";
-        case DECIMAL:
-            return "decimal '" + token.getText() + "'";
-        case OCTAL:
-            return "octal '" + token.getText() + "'";
-        case HEX:
-            return "hex '" + token.getText() + "'";
-        case EOF:
-            return "end of expression";
-        default:
-            return "'" + token.getText() + "'";
-        }
+      retval.stop = input.LT(-1);
+
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+
+    }
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+    }
+    finally {
+      // do for sure before leaving
     }
+    return retval;
+  }
+  // $ANTLR end "expression"
 
 
+  public static class conditional_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
 
-    public static class expression_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
 
+  // $ANTLR start "conditional"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:254:1: conditional : logical_or ( AT_COND_QUE ^ conditional AT_COLON ! conditional )? ;
+  public final JavascriptParser.conditional_return conditional() throws RecognitionException {
+    JavascriptParser.conditional_return retval = new JavascriptParser.conditional_return();
+    retval.start = input.LT(1);
 
-    // $ANTLR start "expression"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:250:1: expression : conditional EOF !;
-    public final JavascriptParser.expression_return expression() throws RecognitionException {
-        JavascriptParser.expression_return retval = new JavascriptParser.expression_return();
-        retval.start = input.LT(1);
+    CommonTree root_0 = null;
 
-        CommonTree root_0 = null;
+    Token AT_COND_QUE4=null;
+    Token AT_COLON6=null;
+    ParserRuleReturnScope logical_or3 =null;
+    ParserRuleReturnScope conditional5 =null;
+    ParserRuleReturnScope conditional7 =null;
 
-        Token EOF2=null;
-        ParserRuleReturnScope conditional1 =null;
+    CommonTree AT_COND_QUE4_tree=null;
+    CommonTree AT_COLON6_tree=null;
 
-        CommonTree EOF2_tree=null;
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:255:5: ( logical_or ( AT_COND_QUE ^ conditional AT_COLON ! conditional )? )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:255:7: logical_or ( AT_COND_QUE ^ conditional AT_COLON ! conditional )?
+      {
+      root_0 = (CommonTree)adaptor.nil();
 
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:251:5: ( conditional EOF !)
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:251:7: conditional EOF !
-            {
-            root_0 = (CommonTree)adaptor.nil();
 
+      pushFollow(FOLLOW_logical_or_in_conditional757);
+      logical_or3=logical_or();
+      state._fsp--;
 
-            pushFollow(FOLLOW_conditional_in_expression737);
-            conditional1=conditional();
-            state._fsp--;
+      adaptor.addChild(root_0, logical_or3.getTree());
 
-            adaptor.addChild(root_0, conditional1.getTree());
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:255:18: ( AT_COND_QUE ^ conditional AT_COLON ! conditional )?
+      int alt1=2;
+      int LA1_0 = input.LA(1);
+      if ( (LA1_0==AT_COND_QUE) ) {
+        alt1=1;
+      }
+      switch (alt1) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:255:19: AT_COND_QUE ^ conditional AT_COLON ! conditional
+          {
+          AT_COND_QUE4=(Token)match(input,AT_COND_QUE,FOLLOW_AT_COND_QUE_in_conditional760); 
+          AT_COND_QUE4_tree = (CommonTree)adaptor.create(AT_COND_QUE4);
+          root_0 = (CommonTree)adaptor.becomeRoot(AT_COND_QUE4_tree, root_0);
 
-            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_expression739); 
-            }
+          pushFollow(FOLLOW_conditional_in_conditional763);
+          conditional5=conditional();
+          state._fsp--;
 
-            retval.stop = input.LT(-1);
+          adaptor.addChild(root_0, conditional5.getTree());
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+          AT_COLON6=(Token)match(input,AT_COLON,FOLLOW_AT_COLON_in_conditional765); 
+          pushFollow(FOLLOW_conditional_in_conditional768);
+          conditional7=conditional();
+          state._fsp--;
 
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-        }
-        finally {
-            // do for sure before leaving
-        }
-        return retval;
-    }
-    // $ANTLR end "expression"
+          adaptor.addChild(root_0, conditional7.getTree());
 
+          }
+          break;
 
-    public static class conditional_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
+      }
 
+      }
 
-    // $ANTLR start "conditional"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:254:1: conditional : logical_or ( AT_COND_QUE ^ conditional AT_COLON ! conditional )? ;
-    public final JavascriptParser.conditional_return conditional() throws RecognitionException {
-        JavascriptParser.conditional_return retval = new JavascriptParser.conditional_return();
-        retval.start = input.LT(1);
+      retval.stop = input.LT(-1);
 
-        CommonTree root_0 = null;
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
-        Token AT_COND_QUE4=null;
-        Token AT_COLON6=null;
-        ParserRuleReturnScope logical_or3 =null;
-        ParserRuleReturnScope conditional5 =null;
-        ParserRuleReturnScope conditional7 =null;
+    }
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+    }
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "conditional"
 
-        CommonTree AT_COND_QUE4_tree=null;
-        CommonTree AT_COLON6_tree=null;
 
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:255:5: ( logical_or ( AT_COND_QUE ^ conditional AT_COLON ! conditional )? )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:255:7: logical_or ( AT_COND_QUE ^ conditional AT_COLON ! conditional )?
-            {
-            root_0 = (CommonTree)adaptor.nil();
+  public static class logical_or_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
 
 
-            pushFollow(FOLLOW_logical_or_in_conditional757);
-            logical_or3=logical_or();
-            state._fsp--;
+  // $ANTLR start "logical_or"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:258:1: logical_or : logical_and ( AT_BOOL_OR ^ logical_and )* ;
+  public final JavascriptParser.logical_or_return logical_or() throws RecognitionException {
+    JavascriptParser.logical_or_return retval = new JavascriptParser.logical_or_return();
+    retval.start = input.LT(1);
 
-            adaptor.addChild(root_0, logical_or3.getTree());
+    CommonTree root_0 = null;
 
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:255:18: ( AT_COND_QUE ^ conditional AT_COLON ! conditional )?
-            int alt1=2;
-            int LA1_0 = input.LA(1);
-            if ( (LA1_0==AT_COND_QUE) ) {
-                alt1=1;
-            }
-            switch (alt1) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:255:19: AT_COND_QUE ^ conditional AT_COLON ! conditional
-                    {
-                    AT_COND_QUE4=(Token)match(input,AT_COND_QUE,FOLLOW_AT_COND_QUE_in_conditional760); 
-                    AT_COND_QUE4_tree = (CommonTree)adaptor.create(AT_COND_QUE4);
-                    root_0 = (CommonTree)adaptor.becomeRoot(AT_COND_QUE4_tree, root_0);
+    Token AT_BOOL_OR9=null;
+    ParserRuleReturnScope logical_and8 =null;
+    ParserRuleReturnScope logical_and10 =null;
 
-                    pushFollow(FOLLOW_conditional_in_conditional763);
-                    conditional5=conditional();
-                    state._fsp--;
+    CommonTree AT_BOOL_OR9_tree=null;
 
-                    adaptor.addChild(root_0, conditional5.getTree());
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:259:5: ( logical_and ( AT_BOOL_OR ^ logical_and )* )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:259:7: logical_and ( AT_BOOL_OR ^ logical_and )*
+      {
+      root_0 = (CommonTree)adaptor.nil();
 
-                    AT_COLON6=(Token)match(input,AT_COLON,FOLLOW_AT_COLON_in_conditional765); 
-                    pushFollow(FOLLOW_conditional_in_conditional768);
-                    conditional7=conditional();
-                    state._fsp--;
 
-                    adaptor.addChild(root_0, conditional7.getTree());
+      pushFollow(FOLLOW_logical_and_in_logical_or787);
+      logical_and8=logical_and();
+      state._fsp--;
 
-                    }
-                    break;
+      adaptor.addChild(root_0, logical_and8.getTree());
 
-            }
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:259:19: ( AT_BOOL_OR ^ logical_and )*
+      loop2:
+      while (true) {
+        int alt2=2;
+        int LA2_0 = input.LA(1);
+        if ( (LA2_0==AT_BOOL_OR) ) {
+          alt2=1;
+        }
 
-            }
+        switch (alt2) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:259:20: AT_BOOL_OR ^ logical_and
+          {
+          AT_BOOL_OR9=(Token)match(input,AT_BOOL_OR,FOLLOW_AT_BOOL_OR_in_logical_or790); 
+          AT_BOOL_OR9_tree = (CommonTree)adaptor.create(AT_BOOL_OR9);
+          root_0 = (CommonTree)adaptor.becomeRoot(AT_BOOL_OR9_tree, root_0);
 
-            retval.stop = input.LT(-1);
+          pushFollow(FOLLOW_logical_and_in_logical_or793);
+          logical_and10=logical_and();
+          state._fsp--;
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+          adaptor.addChild(root_0, logical_and10.getTree());
 
+          }
+          break;
+
+        default :
+          break loop2;
         }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-        }
-        finally {
-            // do for sure before leaving
-        }
-        return retval;
-    }
-    // $ANTLR end "conditional"
+      }
 
+      }
 
-    public static class logical_or_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
+      retval.stop = input.LT(-1);
 
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
-    // $ANTLR start "logical_or"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:258:1: logical_or : logical_and ( AT_BOOL_OR ^ logical_and )* ;
-    public final JavascriptParser.logical_or_return logical_or() throws RecognitionException {
-        JavascriptParser.logical_or_return retval = new JavascriptParser.logical_or_return();
-        retval.start = input.LT(1);
+    }
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+    }
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "logical_or"
 
-        CommonTree root_0 = null;
 
-        Token AT_BOOL_OR9=null;
-        ParserRuleReturnScope logical_and8 =null;
-        ParserRuleReturnScope logical_and10 =null;
+  public static class logical_and_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
 
-        CommonTree AT_BOOL_OR9_tree=null;
 
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:259:5: ( logical_and ( AT_BOOL_OR ^ logical_and )* )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:259:7: logical_and ( AT_BOOL_OR ^ logical_and )*
-            {
-            root_0 = (CommonTree)adaptor.nil();
+  // $ANTLR start "logical_and"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:262:1: logical_and : bitwise_or ( AT_BOOL_AND ^ bitwise_or )* ;
+  public final JavascriptParser.logical_and_return logical_and() throws RecognitionException {
+    JavascriptParser.logical_and_return retval = new JavascriptParser.logical_and_return();
+    retval.start = input.LT(1);
 
+    CommonTree root_0 = null;
 
-            pushFollow(FOLLOW_logical_and_in_logical_or787);
-            logical_and8=logical_and();
-            state._fsp--;
+    Token AT_BOOL_AND12=null;
+    ParserRuleReturnScope bitwise_or11 =null;
+    ParserRuleReturnScope bitwise_or13 =null;
 
-            adaptor.addChild(root_0, logical_and8.getTree());
+    CommonTree AT_BOOL_AND12_tree=null;
 
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:259:19: ( AT_BOOL_OR ^ logical_and )*
-            loop2:
-            while (true) {
-                int alt2=2;
-                int LA2_0 = input.LA(1);
-                if ( (LA2_0==AT_BOOL_OR) ) {
-                    alt2=1;
-                }
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:263:5: ( bitwise_or ( AT_BOOL_AND ^ bitwise_or )* )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:263:7: bitwise_or ( AT_BOOL_AND ^ bitwise_or )*
+      {
+      root_0 = (CommonTree)adaptor.nil();
 
-                switch (alt2) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:259:20: AT_BOOL_OR ^ logical_and
-                    {
-                    AT_BOOL_OR9=(Token)match(input,AT_BOOL_OR,FOLLOW_AT_BOOL_OR_in_logical_or790); 
-                    AT_BOOL_OR9_tree = (CommonTree)adaptor.create(AT_BOOL_OR9);
-                    root_0 = (CommonTree)adaptor.becomeRoot(AT_BOOL_OR9_tree, root_0);
 
-                    pushFollow(FOLLOW_logical_and_in_logical_or793);
-                    logical_and10=logical_and();
-                    state._fsp--;
+      pushFollow(FOLLOW_bitwise_or_in_logical_and812);
+      bitwise_or11=bitwise_or();
+      state._fsp--;
 
-                    adaptor.addChild(root_0, logical_and10.getTree());
+      adaptor.addChild(root_0, bitwise_or11.getTree());
 
-                    }
-                    break;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:263:18: ( AT_BOOL_AND ^ bitwise_or )*
+      loop3:
+      while (true) {
+        int alt3=2;
+        int LA3_0 = input.LA(1);
+        if ( (LA3_0==AT_BOOL_AND) ) {
+          alt3=1;
+        }
 
-                default :
-                    break loop2;
-                }
-            }
+        switch (alt3) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:263:19: AT_BOOL_AND ^ bitwise_or
+          {
+          AT_BOOL_AND12=(Token)match(input,AT_BOOL_AND,FOLLOW_AT_BOOL_AND_in_logical_and815); 
+          AT_BOOL_AND12_tree = (CommonTree)adaptor.create(AT_BOOL_AND12);
+          root_0 = (CommonTree)adaptor.becomeRoot(AT_BOOL_AND12_tree, root_0);
 
-            }
+          pushFollow(FOLLOW_bitwise_or_in_logical_and818);
+          bitwise_or13=bitwise_or();
+          state._fsp--;
 
-            retval.stop = input.LT(-1);
+          adaptor.addChild(root_0, bitwise_or13.getTree());
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+          }
+          break;
 
+        default :
+          break loop3;
         }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-        }
-        finally {
-            // do for sure before leaving
-        }
-        return retval;
-    }
-    // $ANTLR end "logical_or"
+      }
 
+      }
 
-    public static class logical_and_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
+      retval.stop = input.LT(-1);
 
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
-    // $ANTLR start "logical_and"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:262:1: logical_and : bitwise_or ( AT_BOOL_AND ^ bitwise_or )* ;
-    public final JavascriptParser.logical_and_return logical_and() throws RecognitionException {
-        JavascriptParser.logical_and_return retval = new JavascriptParser.logical_and_return();
-        retval.start = input.LT(1);
+    }
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+    }
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "logical_and"
 
-        CommonTree root_0 = null;
 
-        Token AT_BOOL_AND12=null;
-        ParserRuleReturnScope bitwise_or11 =null;
-        ParserRuleReturnScope bitwise_or13 =null;
+  public static class bitwise_or_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
 
-        CommonTree AT_BOOL_AND12_tree=null;
 
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:263:5: ( bitwise_or ( AT_BOOL_AND ^ bitwise_or )* )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:263:7: bitwise_or ( AT_BOOL_AND ^ bitwise_or )*
-            {
-            root_0 = (CommonTree)adaptor.nil();
+  // $ANTLR start "bitwise_or"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:266:1: bitwise_or : bitwise_xor ( AT_BIT_OR ^ bitwise_xor )* ;
+  public final JavascriptParser.bitwise_or_return bitwise_or() throws RecognitionException {
+    JavascriptParser.bitwise_or_return retval = new JavascriptParser.bitwise_or_return();
+    retval.start = input.LT(1);
 
+    CommonTree root_0 = null;
 
-            pushFollow(FOLLOW_bitwise_or_in_logical_and812);
-            bitwise_or11=bitwise_or();
-            state._fsp--;
+    Token AT_BIT_OR15=null;
+    ParserRuleReturnScope bitwise_xor14 =null;
+    ParserRuleReturnScope bitwise_xor16 =null;
 
-            adaptor.addChild(root_0, bitwise_or11.getTree());
+    CommonTree AT_BIT_OR15_tree=null;
 
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:263:18: ( AT_BOOL_AND ^ bitwise_or )*
-            loop3:
-            while (true) {
-                int alt3=2;
-                int LA3_0 = input.LA(1);
-                if ( (LA3_0==AT_BOOL_AND) ) {
-                    alt3=1;
-                }
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:267:5: ( bitwise_xor ( AT_BIT_OR ^ bitwise_xor )* )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:267:7: bitwise_xor ( AT_BIT_OR ^ bitwise_xor )*
+      {
+      root_0 = (CommonTree)adaptor.nil();
 
-                switch (alt3) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:263:19: AT_BOOL_AND ^ bitwise_or
-                    {
-                    AT_BOOL_AND12=(Token)match(input,AT_BOOL_AND,FOLLOW_AT_BOOL_AND_in_logical_and815); 
-                    AT_BOOL_AND12_tree = (CommonTree)adaptor.create(AT_BOOL_AND12);
-                    root_0 = (CommonTree)adaptor.becomeRoot(AT_BOOL_AND12_tree, root_0);
 
-                    pushFollow(FOLLOW_bitwise_or_in_logical_and818);
-                    bitwise_or13=bitwise_or();
-                    state._fsp--;
+      pushFollow(FOLLOW_bitwise_xor_in_bitwise_or837);
+      bitwise_xor14=bitwise_xor();
+      state._fsp--;
 
-                    adaptor.addChild(root_0, bitwise_or13.getTree());
+      adaptor.addChild(root_0, bitwise_xor14.getTree());
 
-                    }
-                    break;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:267:19: ( AT_BIT_OR ^ bitwise_xor )*
+      loop4:
+      while (true) {
+        int alt4=2;
+        int LA4_0 = input.LA(1);
+        if ( (LA4_0==AT_BIT_OR) ) {
+          alt4=1;
+        }
 
-                default :
-                    break loop3;
-                }
-            }
+        switch (alt4) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:267:20: AT_BIT_OR ^ bitwise_xor
+          {
+          AT_BIT_OR15=(Token)match(input,AT_BIT_OR,FOLLOW_AT_BIT_OR_in_bitwise_or840); 
+          AT_BIT_OR15_tree = (CommonTree)adaptor.create(AT_BIT_OR15);
+          root_0 = (CommonTree)adaptor.becomeRoot(AT_BIT_OR15_tree, root_0);
 
-            }
+          pushFollow(FOLLOW_bitwise_xor_in_bitwise_or843);
+          bitwise_xor16=bitwise_xor();
+          state._fsp--;
 
-            retval.stop = input.LT(-1);
+          adaptor.addChild(root_0, bitwise_xor16.getTree());
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+          }
+          break;
 
+        default :
+          break loop4;
         }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-        }
-        finally {
-            // do for sure before leaving
-        }
-        return retval;
-    }
-    // $ANTLR end "logical_and"
+      }
 
+      }
 
-    public static class bitwise_or_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
+      retval.stop = input.LT(-1);
 
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
-    // $ANTLR start "bitwise_or"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:266:1: bitwise_or : bitwise_xor ( AT_BIT_OR ^ bitwise_xor )* ;
-    public final JavascriptParser.bitwise_or_return bitwise_or() throws RecognitionException {
-        JavascriptParser.bitwise_or_return retval = new JavascriptParser.bitwise_or_return();
-        retval.start = input.LT(1);
+    }
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+    }
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "bitwise_or"
 
-        CommonTree root_0 = null;
 
-        Token AT_BIT_OR15=null;
-        ParserRuleReturnScope bitwise_xor14 =null;
-        ParserRuleReturnScope bitwise_xor16 =null;
+  public static class bitwise_xor_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
 
-        CommonTree AT_BIT_OR15_tree=null;
 
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:267:5: ( bitwise_xor ( AT_BIT_OR ^ bitwise_xor )* )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:267:7: bitwise_xor ( AT_BIT_OR ^ bitwise_xor )*
-            {
-            root_0 = (CommonTree)adaptor.nil();
+  // $ANTLR start "bitwise_xor"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:270:1: bitwise_xor : bitwise_and ( AT_BIT_XOR ^ bitwise_and )* ;
+  public final JavascriptParser.bitwise_xor_return bitwise_xor() throws RecognitionException {
+    JavascriptParser.bitwise_xor_return retval = new JavascriptParser.bitwise_xor_return();
+    retval.start = input.LT(1);
 
+    CommonTree root_0 = null;
 
-            pushFollow(FOLLOW_bitwise_xor_in_bitwise_or837);
-            bitwise_xor14=bitwise_xor();
-            state._fsp--;
+    Token AT_BIT_XOR18=null;
+    ParserRuleReturnScope bitwise_and17 =null;
+    ParserRuleReturnScope bitwise_and19 =null;
 
-            adaptor.addChild(root_0, bitwise_xor14.getTree());
+    CommonTree AT_BIT_XOR18_tree=null;
 
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:267:19: ( AT_BIT_OR ^ bitwise_xor )*
-            loop4:
-            while (true) {
-                int alt4=2;
-                int LA4_0 = input.LA(1);
-                if ( (LA4_0==AT_BIT_OR) ) {
-                    alt4=1;
-                }
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:271:5: ( bitwise_and ( AT_BIT_XOR ^ bitwise_and )* )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:271:7: bitwise_and ( AT_BIT_XOR ^ bitwise_and )*
+      {
+      root_0 = (CommonTree)adaptor.nil();
 
-                switch (alt4) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:267:20: AT_BIT_OR ^ bitwise_xor
-                    {
-                    AT_BIT_OR15=(Token)match(input,AT_BIT_OR,FOLLOW_AT_BIT_OR_in_bitwise_or840); 
-                    AT_BIT_OR15_tree = (CommonTree)adaptor.create(AT_BIT_OR15);
-                    root_0 = (CommonTree)adaptor.becomeRoot(AT_BIT_OR15_tree, root_0);
 
-                    pushFollow(FOLLOW_bitwise_xor_in_bitwise_or843);
-                    bitwise_xor16=bitwise_xor();
-                    state._fsp--;
+      pushFollow(FOLLOW_bitwise_and_in_bitwise_xor862);
+      bitwise_and17=bitwise_and();
+      state._fsp--;
 
-                    adaptor.addChild(root_0, bitwise_xor16.getTree());
+      adaptor.addChild(root_0, bitwise_and17.getTree());
 
-                    }
-                    break;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:271:19: ( AT_BIT_XOR ^ bitwise_and )*
+      loop5:
+      while (true) {
+        int alt5=2;
+        int LA5_0 = input.LA(1);
+        if ( (LA5_0==AT_BIT_XOR) ) {
+          alt5=1;
+        }
 
-                default :
-                    break loop4;
-                }
-            }
+        switch (alt5) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:271:20: AT_BIT_XOR ^ bitwise_and
+          {
+          AT_BIT_XOR18=(Token)match(input,AT_BIT_XOR,FOLLOW_AT_BIT_XOR_in_bitwise_xor865); 
+          AT_BIT_XOR18_tree = (CommonTree)adaptor.create(AT_BIT_XOR18);
+          root_0 = (CommonTree)adaptor.becomeRoot(AT_BIT_XOR18_tree, root_0);
 
-            }
+          pushFollow(FOLLOW_bitwise_and_in_bitwise_xor868);
+          bitwise_and19=bitwise_and();
+          state._fsp--;
 
-            retval.stop = input.LT(-1);
+          adaptor.addChild(root_0, bitwise_and19.getTree());
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+          }
+          break;
 
+        default :
+          break loop5;
         }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-        }
-        finally {
-            // do for sure before leaving
-        }
-        return retval;
-    }
-    // $ANTLR end "bitwise_or"
+      }
 
+      }
 
-    public static class bitwise_xor_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
+      retval.stop = input.LT(-1);
 
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
-    // $ANTLR start "bitwise_xor"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:270:1: bitwise_xor : bitwise_and ( AT_BIT_XOR ^ bitwise_and )* ;
-    public final JavascriptParser.bitwise_xor_return bitwise_xor() throws RecognitionException {
-        JavascriptParser.bitwise_xor_return retval = new JavascriptParser.bitwise_xor_return();
-        retval.start = input.LT(1);
+    }
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+    }
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "bitwise_xor"
 
-        CommonTree root_0 = null;
 
-        Token AT_BIT_XOR18=null;
-        ParserRuleReturnScope bitwise_and17 =null;
-        ParserRuleReturnScope bitwise_and19 =null;
+  public static class bitwise_and_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
 
-        CommonTree AT_BIT_XOR18_tree=null;
 
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:5: ( bitwise_and ( AT_BIT_XOR ^ bitwise_and )* )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:7: bitwise_and ( AT_BIT_XOR ^ bitwise_and )*
-            {
-            root_0 = (CommonTree)adaptor.nil();
+  // $ANTLR start "bitwise_and"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:274:1: bitwise_and : equality ( AT_BIT_AND ^ equality )* ;
+  public final JavascriptParser.bitwise_and_return bitwise_and() throws RecognitionException {
+    JavascriptParser.bitwise_and_return retval = new JavascriptParser.bitwise_and_return();
+    retval.start = input.LT(1);
 
+    CommonTree root_0 = null;
 
-            pushFollow(FOLLOW_bitwise_and_in_bitwise_xor862);
-            bitwise_and17=bitwise_and();
-            state._fsp--;
+    Token AT_BIT_AND21=null;
+    ParserRuleReturnScope equality20 =null;
+    ParserRuleReturnScope equality22 =null;
 
-            adaptor.addChild(root_0, bitwise_and17.getTree());
+    CommonTree AT_BIT_AND21_tree=null;
 
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:19: ( AT_BIT_XOR ^ bitwise_and )*
-            loop5:
-            while (true) {
-                int alt5=2;
-                int LA5_0 = input.LA(1);
-                if ( (LA5_0==AT_BIT_XOR) ) {
-                    alt5=1;
-                }
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:275:5: ( equality ( AT_BIT_AND ^ equality )* )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:275:8: equality ( AT_BIT_AND ^ equality )*
+      {
+      root_0 = (CommonTree)adaptor.nil();
 
-                switch (alt5) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:271:20: AT_BIT_XOR ^ bitwise_and
-                    {
-                    AT_BIT_XOR18=(Token)match(input,AT_BIT_XOR,FOLLOW_AT_BIT_XOR_in_bitwise_xor865); 
-                    AT_BIT_XOR18_tree = (CommonTree)adaptor.create(AT_BIT_XOR18);
-                    root_0 = (CommonTree)adaptor.becomeRoot(AT_BIT_XOR18_tree, root_0);
 
-                    pushFollow(FOLLOW_bitwise_and_in_bitwise_xor868);
-                    bitwise_and19=bitwise_and();
-                    state._fsp--;
+      pushFollow(FOLLOW_equality_in_bitwise_and888);
+      equality20=equality();
+      state._fsp--;
 
-                    adaptor.addChild(root_0, bitwise_and19.getTree());
+      adaptor.addChild(root_0, equality20.getTree());
 
-                    }
-                    break;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:275:17: ( AT_BIT_AND ^ equality )*
+      loop6:
+      while (true) {
+        int alt6=2;
+        int LA6_0 = input.LA(1);
+        if ( (LA6_0==AT_BIT_AND) ) {
+          alt6=1;
+        }
 
-                default :
-                    break loop5;
-                }
-            }
+        switch (alt6) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:275:18: AT_BIT_AND ^ equality
+          {
+          AT_BIT_AND21=(Token)match(input,AT_BIT_AND,FOLLOW_AT_BIT_AND_in_bitwise_and891); 
+          AT_BIT_AND21_tree = (CommonTree)adaptor.create(AT_BIT_AND21);
+          root_0 = (CommonTree)adaptor.becomeRoot(AT_BIT_AND21_tree, root_0);
 
-            }
+          pushFollow(FOLLOW_equality_in_bitwise_and894);
+          equality22=equality();
+          state._fsp--;
 
-            retval.stop = input.LT(-1);
+          adaptor.addChild(root_0, equality22.getTree());
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+          }
+          break;
 
+        default :
+          break loop6;
         }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-        }
-        finally {
-            // do for sure before leaving
-        }
-        return retval;
-    }
-    // $ANTLR end "bitwise_xor"
+      }
 
+      }
 
-    public static class bitwise_and_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
+      retval.stop = input.LT(-1);
 
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
-    // $ANTLR start "bitwise_and"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:274:1: bitwise_and : equality ( AT_BIT_AND ^ equality )* ;
-    public final JavascriptParser.bitwise_and_return bitwise_and() throws RecognitionException {
-        JavascriptParser.bitwise_and_return retval = new JavascriptParser.bitwise_and_return();
-        retval.start = input.LT(1);
+    }
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+    }
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "bitwise_and"
 
-        CommonTree root_0 = null;
 
-        Token AT_BIT_AND21=null;
-        ParserRuleReturnScope equality20 =null;
-        ParserRuleReturnScope equality22 =null;
+  public static class equality_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
 
-        CommonTree AT_BIT_AND21_tree=null;
 
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:275:5: ( equality ( AT_BIT_AND ^ equality )* )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:275:8: equality ( AT_BIT_AND ^ equality )*
-            {
-            root_0 = (CommonTree)adaptor.nil();
+  // $ANTLR start "equality"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:278:1: equality : relational ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )* ;
+  public final JavascriptParser.equality_return equality() throws RecognitionException {
+    JavascriptParser.equality_return retval = new JavascriptParser.equality_return();
+    retval.start = input.LT(1);
 
+    CommonTree root_0 = null;
 
-            pushFollow(FOLLOW_equality_in_bitwise_and888);
-            equality20=equality();
-            state._fsp--;
+    Token set24=null;
+    ParserRuleReturnScope relational23 =null;
+    ParserRuleReturnScope relational25 =null;
 
-            adaptor.addChild(root_0, equality20.getTree());
+    CommonTree set24_tree=null;
 
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:275:17: ( AT_BIT_AND ^ equality )*
-            loop6:
-            while (true) {
-                int alt6=2;
-                int LA6_0 = input.LA(1);
-                if ( (LA6_0==AT_BIT_AND) ) {
-                    alt6=1;
-                }
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:279:5: ( relational ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )* )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:279:7: relational ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )*
+      {
+      root_0 = (CommonTree)adaptor.nil();
 
-                switch (alt6) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:275:18: AT_BIT_AND ^ equality
-                    {
-                    AT_BIT_AND21=(Token)match(input,AT_BIT_AND,FOLLOW_AT_BIT_AND_in_bitwise_and891); 
-                    AT_BIT_AND21_tree = (CommonTree)adaptor.create(AT_BIT_AND21);
-                    root_0 = (CommonTree)adaptor.becomeRoot(AT_BIT_AND21_tree, root_0);
 
-                    pushFollow(FOLLOW_equality_in_bitwise_and894);
-                    equality22=equality();
-                    state._fsp--;
+      pushFollow(FOLLOW_relational_in_equality913);
+      relational23=relational();
+      state._fsp--;
 
-                    adaptor.addChild(root_0, equality22.getTree());
+      adaptor.addChild(root_0, relational23.getTree());
 
-                    }
-                    break;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:279:18: ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )*
+      loop7:
+      while (true) {
+        int alt7=2;
+        int LA7_0 = input.LA(1);
+        if ( (LA7_0==AT_COMP_EQ||LA7_0==AT_COMP_NEQ) ) {
+          alt7=1;
+        }
 
-                default :
-                    break loop6;
-                }
-            }
+        switch (alt7) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:279:19: ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational
+          {
+          set24=input.LT(1);
+          set24=input.LT(1);
+          if ( input.LA(1)==AT_COMP_EQ||input.LA(1)==AT_COMP_NEQ ) {
+            input.consume();
+            root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set24), root_0);
+            state.errorRecovery=false;
+          }
+          else {
+            MismatchedSetException mse = new MismatchedSetException(null,input);
+            throw mse;
+          }
+          pushFollow(FOLLOW_relational_in_equality925);
+          relational25=relational();
+          state._fsp--;
+
+          adaptor.addChild(root_0, relational25.getTree());
+
+          }
+          break;
+
+        default :
+          break loop7;
+        }
+      }
 
-            }
+      }
 
-            retval.stop = input.LT(-1);
+      retval.stop = input.LT(-1);
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-        }
-        finally {
-            // do for sure before leaving
-        }
-        return retval;
     }
-    // $ANTLR end "bitwise_and"
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+    }
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "equality"
 
 
-    public static class equality_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
+  public static class relational_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
 
 
-    // $ANTLR start "equality"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:278:1: equality : relational ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )* ;
-    public final JavascriptParser.equality_return equality() throws RecognitionException {
-        JavascriptParser.equality_return retval = new JavascriptParser.equality_return();
-        retval.start = input.LT(1);
+  // $ANTLR start "relational"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:282:1: relational : shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )* ;
+  public final JavascriptParser.relational_return relational() throws RecognitionException {
+    JavascriptParser.relational_return retval = new JavascriptParser.relational_return();
+    retval.start = input.LT(1);
 
-        CommonTree root_0 = null;
+    CommonTree root_0 = null;
 
-        Token set24=null;
-        ParserRuleReturnScope relational23 =null;
-        ParserRuleReturnScope relational25 =null;
+    Token set27=null;
+    ParserRuleReturnScope shift26 =null;
+    ParserRuleReturnScope shift28 =null;
 
-        CommonTree set24_tree=null;
+    CommonTree set27_tree=null;
 
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:279:5: ( relational ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )* )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:279:7: relational ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )*
-            {
-            root_0 = (CommonTree)adaptor.nil();
-
-
-            pushFollow(FOLLOW_relational_in_equality913);
-            relational23=relational();
-            state._fsp--;
-
-            adaptor.addChild(root_0, relational23.getTree());
-
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:279:18: ( ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational )*
-            loop7:
-            while (true) {
-                int alt7=2;
-                int LA7_0 = input.LA(1);
-                if ( (LA7_0==AT_COMP_EQ||LA7_0==AT_COMP_NEQ) ) {
-                    alt7=1;
-                }
-
-                switch (alt7) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:279:19: ( AT_COMP_EQ | AT_COMP_NEQ ) ^ relational
-                    {
-                    set24=input.LT(1);
-                    set24=input.LT(1);
-                    if ( input.LA(1)==AT_COMP_EQ||input.LA(1)==AT_COMP_NEQ ) {
-                        input.consume();
-                        root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set24), root_0);
-                        state.errorRecovery=false;
-                    }
-                    else {
-                        MismatchedSetException mse = new MismatchedSetException(null,input);
-                        throw mse;
-                    }
-                    pushFollow(FOLLOW_relational_in_equality925);
-                    relational25=relational();
-                    state._fsp--;
-
-                    adaptor.addChild(root_0, relational25.getTree());
-
-                    }
-                    break;
-
-                default :
-                    break loop7;
-                }
-            }
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:283:5: ( shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )* )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:283:7: shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )*
+      {
+      root_0 = (CommonTree)adaptor.nil();
 
-            }
 
-            retval.stop = input.LT(-1);
+      pushFollow(FOLLOW_shift_in_relational944);
+      shift26=shift();
+      state._fsp--;
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+      adaptor.addChild(root_0, shift26.getTree());
 
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:283:13: ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )*
+      loop8:
+      while (true) {
+        int alt8=2;
+        int LA8_0 = input.LA(1);
+        if ( ((LA8_0 >= AT_COMP_GT && LA8_0 <= AT_COMP_LTE)) ) {
+          alt8=1;
         }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-        }
-        finally {
-            // do for sure before leaving
+
+        switch (alt8) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:283:14: ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift
+          {
+          set27=input.LT(1);
+          set27=input.LT(1);
+          if ( (input.LA(1) >= AT_COMP_GT && input.LA(1) <= AT_COMP_LTE) ) {
+            input.consume();
+            root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set27), root_0);
+            state.errorRecovery=false;
+          }
+          else {
+            MismatchedSetException mse = new MismatchedSetException(null,input);
+            throw mse;
+          }
+          pushFollow(FOLLOW_shift_in_relational964);
+          shift28=shift();
+          state._fsp--;
+
+          adaptor.addChild(root_0, shift28.getTree());
+
+          }
+          break;
+
+        default :
+          break loop8;
         }
-        return retval;
+      }
+
+      }
+
+      retval.stop = input.LT(-1);
+
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+
+    }
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
     }
-    // $ANTLR end "equality"
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "relational"
 
 
-    public static class relational_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
+  public static class shift_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
 
 
-    // $ANTLR start "relational"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:282:1: relational : shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )* ;
-    public final JavascriptParser.relational_return relational() throws RecognitionException {
-        JavascriptParser.relational_return retval = new JavascriptParser.relational_return();
-        retval.start = input.LT(1);
+  // $ANTLR start "shift"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:286:1: shift : additive ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )* ;
+  public final JavascriptParser.shift_return shift() throws RecognitionException {
+    JavascriptParser.shift_return retval = new JavascriptParser.shift_return();
+    retval.start = input.LT(1);
 
-        CommonTree root_0 = null;
+    CommonTree root_0 = null;
 
-        Token set27=null;
-        ParserRuleReturnScope shift26 =null;
-        ParserRuleReturnScope shift28 =null;
+    Token set30=null;
+    ParserRuleReturnScope additive29 =null;
+    ParserRuleReturnScope additive31 =null;
 
-        CommonTree set27_tree=null;
+    CommonTree set30_tree=null;
 
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:283:5: ( shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )* )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:283:7: shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )*
-            {
-            root_0 = (CommonTree)adaptor.nil();
-
-
-            pushFollow(FOLLOW_shift_in_relational944);
-            shift26=shift();
-            state._fsp--;
-
-            adaptor.addChild(root_0, shift26.getTree());
-
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:283:13: ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )*
-            loop8:
-            while (true) {
-                int alt8=2;
-                int LA8_0 = input.LA(1);
-                if ( ((LA8_0 >= AT_COMP_GT && LA8_0 <= AT_COMP_LTE)) ) {
-                    alt8=1;
-                }
-
-                switch (alt8) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:283:14: ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift
-                    {
-                    set27=input.LT(1);
-                    set27=input.LT(1);
-                    if ( (input.LA(1) >= AT_COMP_GT && input.LA(1) <= AT_COMP_LTE) ) {
-                        input.consume();
-                        root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set27), root_0);
-                        state.errorRecovery=false;
-                    }
-                    else {
-                        MismatchedSetException mse = new MismatchedSetException(null,input);
-                        throw mse;
-                    }
-                    pushFollow(FOLLOW_shift_in_relational964);
-                    shift28=shift();
-                    state._fsp--;
-
-                    adaptor.addChild(root_0, shift28.getTree());
-
-                    }
-                    break;
-
-                default :
-                    break loop8;
-                }
-            }
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:287:5: ( additive ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )* )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:287:7: additive ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )*
+      {
+      root_0 = (CommonTree)adaptor.nil();
 
-            }
 
-            retval.stop = input.LT(-1);
+      pushFollow(FOLLOW_additive_in_shift983);
+      additive29=additive();
+      state._fsp--;
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+      adaptor.addChild(root_0, additive29.getTree());
 
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:287:16: ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )*
+      loop9:
+      while (true) {
+        int alt9=2;
+        int LA9_0 = input.LA(1);
+        if ( ((LA9_0 >= AT_BIT_SHL && LA9_0 <= AT_BIT_SHU)) ) {
+          alt9=1;
         }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-        }
-        finally {
-            // do for sure before leaving
+
+        switch (alt9) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:287:17: ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive
+          {
+          set30=input.LT(1);
+          set30=input.LT(1);
+          if ( (input.LA(1) >= AT_BIT_SHL && input.LA(1) <= AT_BIT_SHU) ) {
+            input.consume();
+            root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set30), root_0);
+            state.errorRecovery=false;
+          }
+          else {
+            MismatchedSetException mse = new MismatchedSetException(null,input);
+            throw mse;
+          }
+          pushFollow(FOLLOW_additive_in_shift999);
+          additive31=additive();
+          state._fsp--;
+
+          adaptor.addChild(root_0, additive31.getTree());
+
+          }
+          break;
+
+        default :
+          break loop9;
         }
-        return retval;
+      }
+
+      }
+
+      retval.stop = input.LT(-1);
+
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+
+    }
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
     }
-    // $ANTLR end "relational"
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "shift"
 
 
-    public static class shift_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
+  public static class additive_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
 
 
-    // $ANTLR start "shift"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:286:1: shift : additive ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )* ;
-    public final JavascriptParser.shift_return shift() throws RecognitionException {
-        JavascriptParser.shift_return retval = new JavascriptParser.shift_return();
-        retval.start = input.LT(1);
+  // $ANTLR start "additive"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:290:1: additive : multiplicative ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )* ;
+  public final JavascriptParser.additive_return additive() throws RecognitionException {
+    JavascriptParser.additive_return retval = new JavascriptParser.additive_return();
+    retval.start = input.LT(1);
 
-        CommonTree root_0 = null;
+    CommonTree root_0 = null;
 
-        Token set30=null;
-        ParserRuleReturnScope additive29 =null;
-        ParserRuleReturnScope additive31 =null;
+    Token set33=null;
+    ParserRuleReturnScope multiplicative32 =null;
+    ParserRuleReturnScope multiplicative34 =null;
 
-        CommonTree set30_tree=null;
+    CommonTree set33_tree=null;
 
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:287:5: ( additive ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )* )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:287:7: additive ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )*
-            {
-            root_0 = (CommonTree)adaptor.nil();
-
-
-            pushFollow(FOLLOW_additive_in_shift983);
-            additive29=additive();
-            state._fsp--;
-
-            adaptor.addChild(root_0, additive29.getTree());
-
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:287:16: ( ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive )*
-            loop9:
-            while (true) {
-                int alt9=2;
-                int LA9_0 = input.LA(1);
-                if ( ((LA9_0 >= AT_BIT_SHL && LA9_0 <= AT_BIT_SHU)) ) {
-                    alt9=1;
-                }
-
-                switch (alt9) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:287:17: ( AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU ) ^ additive
-                    {
-                    set30=input.LT(1);
-                    set30=input.LT(1);
-                    if ( (input.LA(1) >= AT_BIT_SHL && input.LA(1) <= AT_BIT_SHU) ) {
-                        input.consume();
-                        root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set30), root_0);
-                        state.errorRecovery=false;
-                    }
-                    else {
-                        MismatchedSetException mse = new MismatchedSetException(null,input);
-                        throw mse;
-                    }
-                    pushFollow(FOLLOW_additive_in_shift999);
-                    additive31=additive();
-                    state._fsp--;
-
-                    adaptor.addChild(root_0, additive31.getTree());
-
-                    }
-                    break;
-
-                default :
-                    break loop9;
-                }
-            }
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:291:5: ( multiplicative ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )* )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:291:7: multiplicative ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )*
+      {
+      root_0 = (CommonTree)adaptor.nil();
 
-            }
 
-            retval.stop = input.LT(-1);
+      pushFollow(FOLLOW_multiplicative_in_additive1018);
+      multiplicative32=multiplicative();
+      state._fsp--;
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+      adaptor.addChild(root_0, multiplicative32.getTree());
 
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:291:22: ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )*
+      loop10:
+      while (true) {
+        int alt10=2;
+        int LA10_0 = input.LA(1);
+        if ( (LA10_0==AT_ADD||LA10_0==AT_SUBTRACT) ) {
+          alt10=1;
         }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-        }
-        finally {
-            // do for sure before leaving
-        }
-        return retval;
-    }
-    // $ANTLR end "shift"
 
+        switch (alt10) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:291:23: ( AT_ADD | AT_SUBTRACT ) ^ multiplicative
+          {
+          set33=input.LT(1);
+          set33=input.LT(1);
+          if ( input.LA(1)==AT_ADD||input.LA(1)==AT_SUBTRACT ) {
+            input.consume();
+            root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set33), root_0);
+            state.errorRecovery=false;
+          }
+          else {
+            MismatchedSetException mse = new MismatchedSetException(null,input);
+            throw mse;
+          }
+          pushFollow(FOLLOW_multiplicative_in_additive1030);
+          multiplicative34=multiplicative();
+          state._fsp--;
+
+          adaptor.addChild(root_0, multiplicative34.getTree());
+
+          }
+          break;
+
+        default :
+          break loop10;
+        }
+      }
 
-    public static class additive_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
+      }
 
+      retval.stop = input.LT(-1);
 
-    // $ANTLR start "additive"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:290:1: additive : multiplicative ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )* ;
-    public final JavascriptParser.additive_return additive() throws RecognitionException {
-        JavascriptParser.additive_return retval = new JavascriptParser.additive_return();
-        retval.start = input.LT(1);
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
-        CommonTree root_0 = null;
+    }
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+    }
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "additive"
 
-        Token set33=null;
-        ParserRuleReturnScope multiplicative32 =null;
-        ParserRuleReturnScope multiplicative34 =null;
 
-        CommonTree set33_tree=null;
+  public static class multiplicative_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
 
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:291:5: ( multiplicative ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )* )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:291:7: multiplicative ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )*
-            {
-            root_0 = (CommonTree)adaptor.nil();
-
-
-            pushFollow(FOLLOW_multiplicative_in_additive1018);
-            multiplicative32=multiplicative();
-            state._fsp--;
-
-            adaptor.addChild(root_0, multiplicative32.getTree());
-
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:291:22: ( ( AT_ADD | AT_SUBTRACT ) ^ multiplicative )*
-            loop10:
-            while (true) {
-                int alt10=2;
-                int LA10_0 = input.LA(1);
-                if ( (LA10_0==AT_ADD||LA10_0==AT_SUBTRACT) ) {
-                    alt10=1;
-                }
-
-                switch (alt10) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:291:23: ( AT_ADD | AT_SUBTRACT ) ^ multiplicative
-                    {
-                    set33=input.LT(1);
-                    set33=input.LT(1);
-                    if ( input.LA(1)==AT_ADD||input.LA(1)==AT_SUBTRACT ) {
-                        input.consume();
-                        root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set33), root_0);
-                        state.errorRecovery=false;
-                    }
-                    else {
-                        MismatchedSetException mse = new MismatchedSetException(null,input);
-                        throw mse;
-                    }
-                    pushFollow(FOLLOW_multiplicative_in_additive1030);
-                    multiplicative34=multiplicative();
-                    state._fsp--;
-
-                    adaptor.addChild(root_0, multiplicative34.getTree());
-
-                    }
-                    break;
-
-                default :
-                    break loop10;
-                }
-            }
 
-            }
+  // $ANTLR start "multiplicative"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:294:1: multiplicative : unary ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )* ;
+  public final JavascriptParser.multiplicative_return multiplicative() throws RecognitionException {
+    JavascriptParser.multiplicative_return retval = new JavascriptParser.multiplicative_return();
+    retval.start = input.LT(1);
 
-            retval.stop = input.LT(-1);
+    CommonTree root_0 = null;
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+    Token set36=null;
+    ParserRuleReturnScope unary35 =null;
+    ParserRuleReturnScope unary37 =null;
 
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-        }
-        finally {
-            // do for sure before leaving
-        }
-        return retval;
-    }
-    // $ANTLR end "additive"
+    CommonTree set36_tree=null;
 
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:295:5: ( unary ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )* )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:295:7: unary ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )*
+      {
+      root_0 = (CommonTree)adaptor.nil();
 
-    public static class multiplicative_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
 
+      pushFollow(FOLLOW_unary_in_multiplicative1049);
+      unary35=unary();
+      state._fsp--;
 
-    // $ANTLR start "multiplicative"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:294:1: multiplicative : unary ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )* ;
-    public final JavascriptParser.multiplicative_return multiplicative() throws RecognitionException {
-        JavascriptParser.multiplicative_return retval = new JavascriptParser.multiplicative_return();
-        retval.start = input.LT(1);
+      adaptor.addChild(root_0, unary35.getTree());
 
-        CommonTree root_0 = null;
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:295:13: ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )*
+      loop11:
+      while (true) {
+        int alt11=2;
+        int LA11_0 = input.LA(1);
+        if ( (LA11_0==AT_DIVIDE||(LA11_0 >= AT_MODULO && LA11_0 <= AT_MULTIPLY)) ) {
+          alt11=1;
+        }
 
-        Token set36=null;
-        ParserRuleReturnScope unary35 =null;
-        ParserRuleReturnScope unary37 =null;
+        switch (alt11) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:295:14: ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary
+          {
+          set36=input.LT(1);
+          set36=input.LT(1);
+          if ( input.LA(1)==AT_DIVIDE||(input.LA(1) >= AT_MODULO && input.LA(1) <= AT_MULTIPLY) ) {
+            input.consume();
+            root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set36), root_0);
+            state.errorRecovery=false;
+          }
+          else {
+            MismatchedSetException mse = new MismatchedSetException(null,input);
+            throw mse;
+          }
+          pushFollow(FOLLOW_unary_in_multiplicative1065);
+          unary37=unary();
+          state._fsp--;
+
+          adaptor.addChild(root_0, unary37.getTree());
+
+          }
+          break;
+
+        default :
+          break loop11;
+        }
+      }
 
-        CommonTree set36_tree=null;
+      }
 
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:295:5: ( unary ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )* )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:295:7: unary ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )*
-            {
-            root_0 = (CommonTree)adaptor.nil();
-
-
-            pushFollow(FOLLOW_unary_in_multiplicative1049);
-            unary35=unary();
-            state._fsp--;
-
-            adaptor.addChild(root_0, unary35.getTree());
-
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:295:13: ( ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary )*
-            loop11:
-            while (true) {
-                int alt11=2;
-                int LA11_0 = input.LA(1);
-                if ( (LA11_0==AT_DIVIDE||(LA11_0 >= AT_MODULO && LA11_0 <= AT_MULTIPLY)) ) {
-                    alt11=1;
-                }
-
-                switch (alt11) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:295:14: ( AT_MULTIPLY | AT_DIVIDE | AT_MODULO ) ^ unary
-                    {
-                    set36=input.LT(1);
-                    set36=input.LT(1);
-                    if ( input.LA(1)==AT_DIVIDE||(input.LA(1) >= AT_MODULO && input.LA(1) <= AT_MULTIPLY) ) {
-                        input.consume();
-                        root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set36), root_0);
-                        state.errorRecovery=false;
-                    }
-                    else {
-                        MismatchedSetException mse = new MismatchedSetException(null,input);
-                        throw mse;
-                    }
-                    pushFollow(FOLLOW_unary_in_multiplicative1065);
-                    unary37=unary();
-                    state._fsp--;
-
-                    adaptor.addChild(root_0, unary37.getTree());
-
-                    }
-                    break;
-
-                default :
-                    break loop11;
-                }
-            }
+      retval.stop = input.LT(-1);
 
-            }
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
-            retval.stop = input.LT(-1);
+    }
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+    }
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "multiplicative"
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
+  public static class unary_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
+
+
+  // $ANTLR start "unary"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:298:1: unary : ( postfix | AT_ADD ! unary | unary_operator ^ unary );
+  public final JavascriptParser.unary_return unary() throws RecognitionException {
+    JavascriptParser.unary_return retval = new JavascriptParser.unary_return();
+    retval.start = input.LT(1);
+
+    CommonTree root_0 = null;
+
+    Token AT_ADD39=null;
+    ParserRuleReturnScope postfix38 =null;
+    ParserRuleReturnScope unary40 =null;
+    ParserRuleReturnScope unary_operator41 =null;
+    ParserRuleReturnScope unary42 =null;
+
+    CommonTree AT_ADD39_tree=null;
+
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )
+      int alt12=3;
+      switch ( input.LA(1) ) {
+      case AT_LPAREN:
+      case DECIMAL:
+      case HEX:
+      case ID:
+      case OCTAL:
+        {
+        alt12=1;
         }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+        break;
+      case AT_ADD:
+        {
+        alt12=2;
         }
-        finally {
-            // do for sure before leaving
+        break;
+      case AT_BIT_NOT:
+      case AT_BOOL_NOT:
+      case AT_SUBTRACT:
+        {
+        alt12=3;
         }
-        return retval;
-    }
-    // $ANTLR end "multiplicative"
-
-
-    public static class unary_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
-
-
-    // $ANTLR start "unary"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:298:1: unary : ( postfix | AT_ADD ! unary | unary_operator ^ unary );
-    public final JavascriptParser.unary_return unary() throws RecognitionException {
-        JavascriptParser.unary_return retval = new JavascriptParser.unary_return();
-        retval.start = input.LT(1);
-
-        CommonTree root_0 = null;
-
-        Token AT_ADD39=null;
-        ParserRuleReturnScope postfix38 =null;
-        ParserRuleReturnScope unary40 =null;
-        ParserRuleReturnScope unary_operator41 =null;
-        ParserRuleReturnScope unary42 =null;
-
-        CommonTree AT_ADD39_tree=null;
-
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )
-            int alt12=3;
-            switch ( input.LA(1) ) {
-            case AT_LPAREN:
-            case DECIMAL:
-            case HEX:
-            case ID:
-            case OCTAL:
-                {
-                alt12=1;
-                }
-                break;
-            case AT_ADD:
-                {
-                alt12=2;
-                }
-                break;
-            case AT_BIT_NOT:
-            case AT_BOOL_NOT:
-            case AT_SUBTRACT:
-                {
-                alt12=3;
-                }
-                break;
-            default:
-                NoViableAltException nvae =
-                    new NoViableAltException("", 12, 0, input);
-                throw nvae;
-            }
-            switch (alt12) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix
-                    {
-                    root_0 = (CommonTree)adaptor.nil();
+        break;
+      default:
+        NoViableAltException nvae =
+          new NoViableAltException("", 12, 0, input);
+        throw nvae;
+      }
+      switch (alt12) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix
+          {
+          root_0 = (CommonTree)adaptor.nil();
 
 
-                    pushFollow(FOLLOW_postfix_in_unary1084);
-                    postfix38=postfix();
-                    state._fsp--;
+          pushFollow(FOLLOW_postfix_in_unary1084);
+          postfix38=postfix();
+          state._fsp--;
 
-                    adaptor.addChild(root_0, postfix38.getTree());
+          adaptor.addChild(root_0, postfix38.getTree());
 
-                    }
-                    break;
-                case 2 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary
-                    {
-                    root_0 = (CommonTree)adaptor.nil();
+          }
+          break;
+        case 2 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary
+          {
+          root_0 = (CommonTree)adaptor.nil();
 
 
-                    AT_ADD39=(Token)match(input,AT_ADD,FOLLOW_AT_ADD_in_unary1092); 
-                    pushFollow(FOLLOW_unary_in_unary1095);
-                    unary40=unary();
-                    state._fsp--;
+          AT_ADD39=(Token)match(input,AT_ADD,FOLLOW_AT_ADD_in_unary1092); 
+          pushFollow(FOLLOW_unary_in_unary1095);
+          unary40=unary();
+          state._fsp--;
 
-                    adaptor.addChild(root_0, unary40.getTree());
+          adaptor.addChild(root_0, unary40.getTree());
 
-                    }
-                    break;
-                case 3 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary
-                    {
-                    root_0 = (CommonTree)adaptor.nil();
+          }
+          break;
+        case 3 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary
+          {
+          root_0 = (CommonTree)adaptor.nil();
 
 
-                    pushFollow(FOLLOW_unary_operator_in_unary1103);
-                    unary_operator41=unary_operator();
-                    state._fsp--;
+          pushFollow(FOLLOW_unary_operator_in_unary1103);
+          unary_operator41=unary_operator();
+          state._fsp--;
 
-                    root_0 = (CommonTree)adaptor.becomeRoot(unary_operator41.getTree(), root_0);
-                    pushFollow(FOLLOW_unary_in_unary1106);
-                    unary42=unary();
-                    state._fsp--;
+          root_0 = (CommonTree)adaptor.becomeRoot(unary_operator41.getTree(), root_0);
+          pushFollow(FOLLOW_unary_in_unary1106);
+          unary42=unary();
+          state._fsp--;
 
-                    adaptor.addChild(root_0, unary42.getTree());
+          adaptor.addChild(root_0, unary42.getTree());
 
-                    }
-                    break;
+          }
+          break;
 
-            }
-            retval.stop = input.LT(-1);
+      }
+      retval.stop = input.LT(-1);
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
+    }
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+    }
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "unary"
+
+
+  public static class unary_operator_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
+
+
+  // $ANTLR start "unary_operator"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:304:1: unary_operator : ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT );
+  public final JavascriptParser.unary_operator_return unary_operator() throws RecognitionException {
+    JavascriptParser.unary_operator_return retval = new JavascriptParser.unary_operator_return();
+    retval.start = input.LT(1);
+
+    CommonTree root_0 = null;
+
+    Token AT_SUBTRACT43=null;
+    Token AT_BIT_NOT44=null;
+    Token AT_BOOL_NOT45=null;
+
+    CommonTree AT_SUBTRACT43_tree=null;
+    CommonTree AT_BIT_NOT44_tree=null;
+    CommonTree AT_BOOL_NOT45_tree=null;
+    RewriteRuleTokenStream stream_AT_SUBTRACT=new RewriteRuleTokenStream(adaptor,"token AT_SUBTRACT");
+
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )
+      int alt13=3;
+      switch ( input.LA(1) ) {
+      case AT_SUBTRACT:
+        {
+        alt13=1;
         }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+        break;
+      case AT_BIT_NOT:
+        {
+        alt13=2;
         }
-        finally {
-            // do for sure before leaving
+        break;
+      case AT_BOOL_NOT:
+        {
+        alt13=3;
         }
-        return retval;
-    }
-    // $ANTLR end "unary"
-
-
-    public static class unary_operator_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
-
-
-    // $ANTLR start "unary_operator"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:304:1: unary_operator : ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT );
-    public final JavascriptParser.unary_operator_return unary_operator() throws RecognitionException {
-        JavascriptParser.unary_operator_return retval = new JavascriptParser.unary_operator_return();
-        retval.start = input.LT(1);
-
-        CommonTree root_0 = null;
-
-        Token AT_SUBTRACT43=null;
-        Token AT_BIT_NOT44=null;
-        Token AT_BOOL_NOT45=null;
-
-        CommonTree AT_SUBTRACT43_tree=null;
-        CommonTree AT_BIT_NOT44_tree=null;
-        CommonTree AT_BOOL_NOT45_tree=null;
-        RewriteRuleTokenStream stream_AT_SUBTRACT=new RewriteRuleTokenStream(adaptor,"token AT_SUBTRACT");
-
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )
-            int alt13=3;
-            switch ( input.LA(1) ) {
-            case AT_SUBTRACT:
-                {
-                alt13=1;
-                }
-                break;
-            case AT_BIT_NOT:
-                {
-                alt13=2;
-                }
-                break;
-            case AT_BOOL_NOT:
-                {
-                alt13=3;
-                }
-                break;
-            default:
-                NoViableAltException nvae =
-                    new NoViableAltException("", 13, 0, input);
-                throw nvae;
-            }
-            switch (alt13) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT
-                    {
-                    AT_SUBTRACT43=(Token)match(input,AT_SUBTRACT,FOLLOW_AT_SUBTRACT_in_unary_operator1123);  
-                    stream_AT_SUBTRACT.add(AT_SUBTRACT43);
-
-                    // AST REWRITE
-                    // elements: 
-                    // token labels: 
-                    // rule labels: retval
-                    // token list labels: 
-                    // rule list labels: 
-                    // wildcard labels: 
-                    retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
-
-                    root_0 = (CommonTree)adaptor.nil();
-                    // 305:19: -> AT_NEGATE
-                    {
-                        adaptor.addChild(root_0, (CommonTree)adaptor.create(AT_NEGATE, "AT_NEGATE"));
-                    }
-
-
-                    retval.tree = root_0;
-
-                    }
-                    break;
-                case 2 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT
-                    {
-                    root_0 = (CommonTree)adaptor.nil();
-
-
-                    AT_BIT_NOT44=(Token)match(input,AT_BIT_NOT,FOLLOW_AT_BIT_NOT_in_unary_operator1135); 
-                    AT_BIT_NOT44_tree = (CommonTree)adaptor.create(AT_BIT_NOT44);
-                    adaptor.addChild(root_0, AT_BIT_NOT44_tree);
-
-                    }
-                    break;
-                case 3 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT
-                    {
-                    root_0 = (CommonTree)adaptor.nil();
-
-
-                    AT_BOOL_NOT45=(Token)match(input,AT_BOOL_NOT,FOLLOW_AT_BOOL_NOT_in_unary_operator1143); 
-                    AT_BOOL_NOT45_tree = (CommonTree)adaptor.create(AT_BOOL_NOT45);
-                    adaptor.addChild(root_0, AT_BOOL_NOT45_tree);
-
-                    }
-                    break;
+        break;
+      default:
+        NoViableAltException nvae =
+          new NoViableAltException("", 13, 0, input);
+        throw nvae;
+      }
+      switch (alt13) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT
+          {
+          AT_SUBTRACT43=(Token)match(input,AT_SUBTRACT,FOLLOW_AT_SUBTRACT_in_unary_operator1123);  
+          stream_AT_SUBTRACT.add(AT_SUBTRACT43);
+
+          // AST REWRITE
+          // elements: 
+          // token labels: 
+          // rule labels: retval
+          // token list labels: 
+          // rule list labels: 
+          // wildcard labels: 
+          retval.tree = root_0;
+          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
+
+          root_0 = (CommonTree)adaptor.nil();
+          // 305:19: -> AT_NEGATE
+          {
+            adaptor.addChild(root_0, (CommonTree)adaptor.create(AT_NEGATE, "AT_NEGATE"));
+          }
+
+
+          retval.tree = root_0;
+
+          }
+          break;
+        case 2 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT
+          {
+          root_0 = (CommonTree)adaptor.nil();
+
+
+          AT_BIT_NOT44=(Token)match(input,AT_BIT_NOT,FOLLOW_AT_BIT_NOT_in_unary_operator1135); 
+          AT_BIT_NOT44_tree = (CommonTree)adaptor.create(AT_BIT_NOT44);
+          adaptor.addChild(root_0, AT_BIT_NOT44_tree);
+
+          }
+          break;
+        case 3 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT
+          {
+          root_0 = (CommonTree)adaptor.nil();
+
+
+          AT_BOOL_NOT45=(Token)match(input,AT_BOOL_NOT,FOLLOW_AT_BOOL_NOT_in_unary_operator1143); 
+          AT_BOOL_NOT45_tree = (CommonTree)adaptor.create(AT_BOOL_NOT45);
+          adaptor.addChild(root_0, AT_BOOL_NOT45_tree);
+
+          }
+          break;
+
+      }
+      retval.stop = input.LT(-1);
+
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
-            }
-            retval.stop = input.LT(-1);
+    }
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+    }
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "unary_operator"
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
+  public static class postfix_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
+
+
+  // $ANTLR start "postfix"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) );
+  public final JavascriptParser.postfix_return postfix() throws RecognitionException {
+    JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();
+    retval.start = input.LT(1);
+
+    CommonTree root_0 = null;
+
+    Token ID47=null;
+    ParserRuleReturnScope primary46 =null;
+    ParserRuleReturnScope arguments48 =null;
+
+    CommonTree ID47_tree=null;
+    RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
+    RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
+
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) )
+      int alt14=2;
+      int LA14_0 = input.LA(1);
+      if ( (LA14_0==ID) ) {
+        int LA14_1 = input.LA(2);
+        if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {
+          alt14=1;
         }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+        else if ( (LA14_1==AT_LPAREN) ) {
+          alt14=2;
         }
-        finally {
-            // do for sure before leaving
+
+        else {
+          int nvaeMark = input.mark();
+          try {
+            input.consume();
+            NoViableAltException nvae =
+              new NoViableAltException("", 14, 1, input);
+            throw nvae;
+          } finally {
+            input.rewind(nvaeMark);
+          }
         }
-        return retval;
-    }
-    // $ANTLR end "unary_operator"
-
-
-    public static class postfix_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
-
-
-    // $ANTLR start "postfix"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) );
-    public final JavascriptParser.postfix_return postfix() throws RecognitionException {
-        JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();
-        retval.start = input.LT(1);
-
-        CommonTree root_0 = null;
-
-        Token ID47=null;
-        ParserRuleReturnScope primary46 =null;
-        ParserRuleReturnScope arguments48 =null;
-
-        CommonTree ID47_tree=null;
-        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
-        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
-
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) )
-            int alt14=2;
-            int LA14_0 = input.LA(1);
-            if ( (LA14_0==ID) ) {
-                int LA14_1 = input.LA(2);
-                if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {
-                    alt14=1;
-                }
-                else if ( (LA14_1==AT_LPAREN) ) {
-                    alt14=2;
-                }
-
-                else {
-                    int nvaeMark = input.mark();
-                    try {
-                        input.consume();
-                        NoViableAltException nvae =
-                            new NoViableAltException("", 14, 1, input);
-                        throw nvae;
-                    } finally {
-                        input.rewind(nvaeMark);
-                    }
-                }
 
+      }
+      else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {
+        alt14=1;
+      }
+
+      else {
+        NoViableAltException nvae =
+          new NoViableAltException("", 14, 0, input);
+        throw nvae;
+      }
+
+      switch (alt14) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary
+          {
+          root_0 = (CommonTree)adaptor.nil();
+
+
+          pushFollow(FOLLOW_primary_in_postfix1160);
+          primary46=primary();
+          state._fsp--;
+
+          adaptor.addChild(root_0, primary46.getTree());
+
+          }
+          break;
+        case 2 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: ID arguments
+          {
+          ID47=(Token)match(input,ID,FOLLOW_ID_in_postfix1168);  
+          stream_ID.add(ID47);
+
+          pushFollow(FOLLOW_arguments_in_postfix1170);
+          arguments48=arguments();
+          state._fsp--;
+
+          stream_arguments.add(arguments48.getTree());
+          // AST REWRITE
+          // elements: ID, arguments
+          // token labels: 
+          // rule labels: retval
+          // token list labels: 
+          // rule list labels: 
+          // wildcard labels: 
+          retval.tree = root_0;
+          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
+
+          root_0 = (CommonTree)adaptor.nil();
+          // 312:20: -> ^( AT_CALL ID ( arguments )? )
+          {
+            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:23: ^( AT_CALL ID ( arguments )? )
+            {
+            CommonTree root_1 = (CommonTree)adaptor.nil();
+            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, "AT_CALL"), root_1);
+            adaptor.addChild(root_1, stream_ID.nextNode());
+            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:36: ( arguments )?
+            if ( stream_arguments.hasNext() ) {
+              adaptor.addChild(root_1, stream_arguments.nextTree());
             }
-            else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {
-                alt14=1;
-            }
+            stream_arguments.reset();
 
-            else {
-                NoViableAltException nvae =
-                    new NoViableAltException("", 14, 0, input);
-                throw nvae;
+            adaptor.addChild(root_0, root_1);
             }
 
-            switch (alt14) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary
-                    {
-                    root_0 = (CommonTree)adaptor.nil();
-
-
-                    pushFollow(FOLLOW_primary_in_postfix1160);
-                    primary46=primary();
-                    state._fsp--;
-
-                    adaptor.addChild(root_0, primary46.getTree());
-
-                    }
-                    break;
-                case 2 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: ID arguments
-                    {
-                    ID47=(Token)match(input,ID,FOLLOW_ID_in_postfix1168);  
-                    stream_ID.add(ID47);
-
-                    pushFollow(FOLLOW_arguments_in_postfix1170);
-                    arguments48=arguments();
-                    state._fsp--;
-
-                    stream_arguments.add(arguments48.getTree());
-                    // AST REWRITE
-                    // elements: ID, arguments
-                    // token labels: 
-                    // rule labels: retval
-                    // token list labels: 
-                    // rule list labels: 
-                    // wildcard labels: 
-                    retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
-
-                    root_0 = (CommonTree)adaptor.nil();
-                    // 312:20: -> ^( AT_CALL ID ( arguments )? )
-                    {
-                        // src/java/org/apache/lucene/expressions/js/Javascript.g:312:23: ^( AT_CALL ID ( arguments )? )
-                        {
-                        CommonTree root_1 = (CommonTree)adaptor.nil();
-                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, "AT_CALL"), root_1);
-                        adaptor.addChild(root_1, stream_ID.nextNode());
-                        // src/java/org/apache/lucene/expressions/js/Javascript.g:312:36: ( arguments )?
-                        if ( stream_arguments.hasNext() ) {
-                            adaptor.addChild(root_1, stream_arguments.nextTree());
-                        }
-                        stream_arguments.reset();
-
-                        adaptor.addChild(root_0, root_1);
-                        }
-
-                    }
-
-
-                    retval.tree = root_0;
-
-                    }
-                    break;
+          }
 
-            }
-            retval.stop = input.LT(-1);
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+          retval.tree = root_0;
 
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-        }
-        finally {
-            // do for sure before leaving
-        }
-        return retval;
-    }
-    // $ANTLR end "postfix"
-
-
-    public static class primary_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
-
-
-    // $ANTLR start "primary"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:315:1: primary : ( ID | numeric | AT_LPAREN ! conditional AT_RPAREN !);
-    public final JavascriptParser.primary_return primary() throws RecognitionException {
-        JavascriptParser.primary_return retval = new JavascriptParser.primary_return();
-        retval.start = input.LT(1);
-
-        CommonTree root_0 = null;
-
-        Token ID49=null;
-        Token AT_LPAREN51=null;
-        Token AT_RPAREN53=null;
-        ParserRuleReturnScope numeric50 =null;
-        ParserRuleReturnScope conditional52 =null;
-
-        CommonTree ID49_tree=null;
-        CommonTree AT_LPAREN51_tree=null;
-        CommonTree AT_RPAREN53_tree=null;
-
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:316:5: ( ID | numeric | AT_LPAREN ! conditional AT_RPAREN !)
-            int alt15=3;
-            switch ( input.LA(1) ) {
-            case ID:
-                {
-                alt15=1;
-                }
-                break;
-            case DECIMAL:
-            case HEX:
-            case OCTAL:
-                {
-                alt15=2;
-                }
-                break;
-            case AT_LPAREN:
-                {
-                alt15=3;
-                }
-                break;
-            default:
-                NoViableAltException nvae =
-                    new NoViableAltException("", 15, 0, input);
-                throw nvae;
-            }
-            switch (alt15) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:316:7: ID
-                    {
-                    root_0 = (CommonTree)adaptor.nil();
+          }
+          break;
 
+      }
+      retval.stop = input.LT(-1);
 
-                    ID49=(Token)match(input,ID,FOLLOW_ID_in_primary1198); 
-                    ID49_tree = (CommonTree)adaptor.create(ID49);
-                    adaptor.addChild(root_0, ID49_tree);
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
-                    }
-                    break;
-                case 2 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:317:7: numeric
-                    {
-                    root_0 = (CommonTree)adaptor.nil();
+    }
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+    }
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "postfix"
 
 
-                    pushFollow(FOLLOW_numeric_in_primary1206);
-                    numeric50=numeric();
-                    state._fsp--;
+  public static class primary_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
+
+
+  // $ANTLR start "primary"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:315:1: primary : ( ID | numeric | AT_LPAREN ! conditional AT_RPAREN !);
+  public final JavascriptParser.primary_return primary() throws RecognitionException {
+    JavascriptParser.primary_return retval = new JavascriptParser.primary_return();
+    retval.start = input.LT(1);
+
+    CommonTree root_0 = null;
+
+    Token ID49=null;
+    Token AT_LPAREN51=null;
+    Token AT_RPAREN53=null;
+    ParserRuleReturnScope numeric50 =null;
+    ParserRuleReturnScope conditional52 =null;
+
+    CommonTree ID49_tree=null;
+    CommonTree AT_LPAREN51_tree=null;
+    CommonTree AT_RPAREN53_tree=null;
+
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:316:5: ( ID | numeric | AT_LPAREN ! conditional AT_RPAREN !)
+      int alt15=3;
+      switch ( input.LA(1) ) {
+      case ID:
+        {
+        alt15=1;
+        }
+        break;
+      case DECIMAL:
+      case HEX:
+      case OCTAL:
+        {
+        alt15=2;
+        }
+        break;
+      case AT_LPAREN:
+        {
+        alt15=3;
+        }
+        break;
+      default:
+        NoViableAltException nvae =
+          new NoViableAltException("", 15, 0, input);
+        throw nvae;
+      }
+      switch (alt15) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:316:7: ID
+          {
+          root_0 = (CommonTree)adaptor.nil();
 
-                    adaptor.addChild(root_0, numeric50.getTree());
 
-                    }
-                    break;
-                case 3 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:318:7: AT_LPAREN ! conditional AT_RPAREN !
-                    {
-                    root_0 = (CommonTree)adaptor.nil();
+          ID49=(Token)match(input,ID,FOLLOW_ID_in_primary1198); 
+          ID49_tree = (CommonTree)adaptor.create(ID49);
+          adaptor.addChild(root_0, ID49_tree);
 
+          }
+          break;
+        case 2 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:317:7: numeric
+          {
+          root_0 = (CommonTree)adaptor.nil();
 
-                    AT_LPAREN51=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_primary1214); 
-                    pushFollow(FOLLOW_conditional_in_primary1217);
-                    conditional52=conditional();
-                    state._fsp--;
 
-                    adaptor.addChild(root_0, conditional52.getTree());
+          pushFollow(FOLLOW_numeric_in_primary1206);
+          numeric50=numeric();
+          state._fsp--;
 
-                    AT_RPAREN53=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_primary1219); 
-                    }
-                    break;
+          adaptor.addChild(root_0, numeric50.getTree());
 
-            }
-            retval.stop = input.LT(-1);
+          }
+          break;
+        case 3 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:318:7: AT_LPAREN ! conditional AT_RPAREN !
+          {
+          root_0 = (CommonTree)adaptor.nil();
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-        }
-        finally {
-            // do for sure before leaving
-        }
-        return retval;
-    }
-    // $ANTLR end "primary"
+          AT_LPAREN51=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_primary1214); 
+          pushFollow(FOLLOW_conditional_in_primary1217);
+          conditional52=conditional();
+          state._fsp--;
 
+          adaptor.addChild(root_0, conditional52.getTree());
 
-    public static class arguments_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
+          AT_RPAREN53=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_primary1219); 
+          }
+          break;
 
+      }
+      retval.stop = input.LT(-1);
 
-    // $ANTLR start "arguments"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;
-    public final JavascriptParser.arguments_return arguments() throws RecognitionException {
-        JavascriptParser.arguments_return retval = new JavascriptParser.arguments_return();
-        retval.start = input.LT(1);
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
-        CommonTree root_0 = null;
+    }
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+    }
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "primary"
 
-        Token AT_LPAREN54=null;
-        Token AT_COMMA56=null;
-        Token AT_RPAREN58=null;
-        ParserRuleReturnScope conditional55 =null;
-        ParserRuleReturnScope conditional57 =null;
 
-        CommonTree AT_LPAREN54_tree=null;
-        CommonTree AT_COMMA56_tree=null;
-        CommonTree AT_RPAREN58_tree=null;
+  public static class arguments_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
+
+
+  // $ANTLR start "arguments"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;
+  public final JavascriptParser.arguments_return arguments() throws RecognitionException {
+    JavascriptParser.arguments_return retval = new JavascriptParser.arguments_return();
+    retval.start = input.LT(1);
+
+    CommonTree root_0 = null;
+
+    Token AT_LPAREN54=null;
+    Token AT_COMMA56=null;
+    Token AT_RPAREN58=null;
+    ParserRuleReturnScope conditional55 =null;
+    ParserRuleReturnScope conditional57 =null;
+
+    CommonTree AT_LPAREN54_tree=null;
+    CommonTree AT_COMMA56_tree=null;
+    CommonTree AT_RPAREN58_tree=null;
+
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !
+      {
+      root_0 = (CommonTree)adaptor.nil();
+
+
+      AT_LPAREN54=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_arguments1237); 
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?
+      int alt17=2;
+      int LA17_0 = input.LA(1);
+      if ( (LA17_0==AT_ADD||LA17_0==AT_BIT_NOT||LA17_0==AT_BOOL_NOT||LA17_0==AT_LPAREN||(LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL)||LA17_0==HEX||(LA17_0 >= ID && LA17_0 <= OCTAL)) ) {
+        alt17=1;
+      }
+      switch (alt17) {
+        case 1 :
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*
+          {
+          pushFollow(FOLLOW_conditional_in_arguments1241);
+          conditional55=conditional();
+          state._fsp--;
+
+          adaptor.addChild(root_0, conditional55.getTree());
+
+          // src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*
+          loop16:
+          while (true) {
+            int alt16=2;
+            int LA16_0 = input.LA(1);
+            if ( (LA16_0==AT_COMMA) ) {
+              alt16=1;
+            }
 
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !
-            {
-            root_0 = (CommonTree)adaptor.nil();
+            switch (alt16) {
+            case 1 :
+              // src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional
+              {
+              AT_COMMA56=(Token)match(input,AT_COMMA,FOLLOW_AT_COMMA_in_arguments1244); 
+              pushFollow(FOLLOW_conditional_in_arguments1247);
+              conditional57=conditional();
+              state._fsp--;
 
+              adaptor.addChild(root_0, conditional57.getTree());
 
-            AT_LPAREN54=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_arguments1237); 
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?
-            int alt17=2;
-            int LA17_0 = input.LA(1);
-            if ( (LA17_0==AT_ADD||LA17_0==AT_BIT_NOT||LA17_0==AT_BOOL_NOT||LA17_0==AT_LPAREN||(LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL)||LA17_0==HEX||(LA17_0 >= ID && LA17_0 <= OCTAL)) ) {
-                alt17=1;
-            }
-            switch (alt17) {
-                case 1 :
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*
-                    {
-                    pushFollow(FOLLOW_conditional_in_arguments1241);
-                    conditional55=conditional();
-                    state._fsp--;
-
-                    adaptor.addChild(root_0, conditional55.getTree());
-
-                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*
-                    loop16:
-                    while (true) {
-                        int alt16=2;
-                        int LA16_0 = input.LA(1);
-                        if ( (LA16_0==AT_COMMA) ) {
-                            alt16=1;
-                        }
-
-                        switch (alt16) {
-                        case 1 :
-                            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional
-                            {
-                            AT_COMMA56=(Token)match(input,AT_COMMA,FOLLOW_AT_COMMA_in_arguments1244); 
-                            pushFollow(FOLLOW_conditional_in_arguments1247);
-                            conditional57=conditional();
-                            state._fsp--;
-
-                            adaptor.addChild(root_0, conditional57.getTree());
-
-                            }
-                            break;
-
-                        default :
-                            break loop16;
-                        }
-                    }
-
-                    }
-                    break;
+              }
+              break;
 
+            default :
+              break loop16;
             }
+          }
 
-            AT_RPAREN58=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_arguments1253); 
-            }
+          }
+          break;
 
-            retval.stop = input.LT(-1);
+      }
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+      AT_RPAREN58=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_arguments1253); 
+      }
 
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-        }
-        finally {
-            // do for sure before leaving
-        }
-        return retval;
+      retval.stop = input.LT(-1);
+
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+
+    }
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
     }
-    // $ANTLR end "arguments"
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "arguments"
 
 
-    public static class numeric_return extends ParserRuleReturnScope {
-        CommonTree tree;
-        @Override
-        public CommonTree getTree() { return tree; }
-    };
+  public static class numeric_return extends ParserRuleReturnScope {
+    CommonTree tree;
+    @Override
+    public CommonTree getTree() { return tree; }
+  };
 
 
-    // $ANTLR start "numeric"
-    // src/java/org/apache/lucene/expressions/js/Javascript.g:325:1: numeric : ( HEX | OCTAL | DECIMAL );
-    public final JavascriptParser.numeric_return numeric() throws RecognitionException {
-        JavascriptParser.numeric_return retval = new JavascriptParser.numeric_return();
-        retval.start = input.LT(1);
+  // $ANTLR start "numeric"
+  // src/java/org/apache/lucene/expressions/js/Javascript.g:325:1: numeric : ( HEX | OCTAL | DECIMAL );
+  public final JavascriptParser.numeric_return numeric() throws RecognitionException {
+    JavascriptParser.numeric_return retval = new JavascriptParser.numeric_return();
+    retval.start = input.LT(1);
 
-        CommonTree root_0 = null;
+    CommonTree root_0 = null;
 
-        Token set59=null;
+    Token set59=null;
 
-        CommonTree set59_tree=null;
+    CommonTree set59_tree=null;
 
-        try {
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:326:5: ( HEX | OCTAL | DECIMAL )
-            // src/java/org/apache/lucene/expressions/js/Javascript.g:
-            {
-            root_0 = (CommonTree)adaptor.nil();
+    try {
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:326:5: ( HEX | OCTAL | DECIMAL )
+      // src/java/org/apache/lucene/expressions/js/Javascript.g:
+      {
+      root_0 = (CommonTree)adaptor.nil();
 
 
-            set59=input.LT(1);
-            if ( input.LA(1)==DECIMAL||input.LA(1)==HEX||input.LA(1)==OCTAL ) {
-                input.consume();
-                adaptor.addChild(root_0, (CommonTree)adaptor.create(set59));
-                state.errorRecovery=false;
-            }
-            else {
-                MismatchedSetException mse = new MismatchedSetException(null,input);
-                throw mse;
-            }
-            }
+      set59=input.LT(1);
+      if ( input.LA(1)==DECIMAL||input.LA(1)==HEX||input.LA(1)==OCTAL ) {
+        input.consume();
+        adaptor.addChild(root_0, (CommonTree)adaptor.create(set59));
+        state.errorRecovery=false;
+      }
+      else {
+        MismatchedSetException mse = new MismatchedSetException(null,input);
+        throw mse;
+      }
+      }
 
-            retval.stop = input.LT(-1);
+      retval.stop = input.LT(-1);
 
-            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
+      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
+      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-        }
-        finally {
-            // do for sure before leaving
-        }
-        return retval;
     }
-    // $ANTLR end "numeric"
-
-    // Delegated rules
-
-
-
-    public static final BitSet FOLLOW_conditional_in_expression737 = new BitSet(new long[]{0x0000000000000000L});
-    public static final BitSet FOLLOW_EOF_in_expression739 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_logical_or_in_conditional757 = new BitSet(new long[]{0x0000000001000002L});
-    public static final BitSet FOLLOW_AT_COND_QUE_in_conditional760 = new BitSet(new long[]{0x000001A308002050L});
-    public static final BitSet FOLLOW_conditional_in_conditional763 = new BitSet(new long[]{0x0000000000010000L});
-    public static final BitSet FOLLOW_AT_COLON_in_conditional765 = new BitSet(new long[]{0x000001A308002050L});
-    public static final BitSet FOLLOW_conditional_in_conditional768 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_logical_and_in_logical_or787 = new BitSet(new long[]{0x0000000000004002L});
-    public static final BitSet FOLLOW_AT_BOOL_OR_in_logical_or790 = new BitSet(new long[]{0x000001A308002050L});
-    public static final BitSet FOLLOW_logical_and_in_logical_or793 = new BitSet(new long[]{0x0000000000004002L});
-    public static final BitSet FOLLOW_bitwise_or_in_logical_and812 = new BitSet(new long[]{0x0000000000001002L});
-    public static final BitSet FOLLOW_AT_BOOL_AND_in_logical_and815 = new BitSet(new long[]{0x000001A308002050L});
-    public static final BitSet FOLLOW_bitwise_or_in_logical_and818 = new BitSet(new long[]{0x0000000000001002L});
-    public static final BitSet FOLLOW_bitwise_xor_in_bitwise_or837 = new BitSet(new long[]{0x0000000000000082L});
-    public static final BitSet FOLLOW_AT_BIT_OR_in_bitwise_or840 = new BitSet(new long[]{0x000001A308002050L});
-    public static final BitSet FOLLOW_bitwise_xor_in_bitwise_or843 = new BitSet(new long[]{0x0000000000000082L});
-    public static final BitSet FOLLOW_bitwise_and_in_bitwise_xor862 = new BitSet(new long[]{0x0000000000000802L});
-    public static final BitSet FOLLOW_AT_BIT_XOR_in_bitwise_xor865 = new BitSet(new long[]{0x000001A308002050L});
-    public static final BitSet FOLLOW_bitwise_and_in_bitwise_xor868 = new BitSet(new long[]{0x0000000000000802L});
-    public static final BitSet FOLLOW_equality_in_bitwise_and888 = new BitSet(new long[]{0x0000000000000022L});
-    public static final BitSet FOLLOW_AT_BIT_AND_in_bitwise_and891 = new BitSet(new long[]{0x000001A308002050L});
-    public static final BitSet FOLLOW_equality_in_bitwise_and894 = new BitSet(new long[]{0x0000000000000022L});
-    public static final BitSet FOLLOW_relational_in_equality913 = new BitSet(new long[]{0x0000000000840002L});
-    public static final BitSet FOLLOW_set_in_equality916 = new BitSet(new long[]{0x000001A308002050L});
-    public static final BitSet FOLLOW_relational_in_equality925 = new BitSet(new long[]{0x0000000000840002L});
-    public static final BitSet FOLLOW_shift_in_relational944 = new BitSet(new long[]{0x0000000000780002L});
-    public static final BitSet FOLLOW_set_in_relational947 = new BitSet(new long[]{0x000001A308002050L});
-    public static final BitSet FOLLOW_shift_in_relational964 = new BitSet(new long[]{0x0000000000780002L});
-    public static final BitSet FOLLOW_additive_in_shift983 = new BitSet(new long[]{0x0000000000000702L});
-    public static final BitSet FOLLOW_set_in_shift986 = new BitSet(new long[]{0x000001A308002050L});
-    public static final BitSet FOLLOW_additive_in_shift999 = new BitSet(new long[]{0x0000000000000702L});
-    public static final BitSet FOLLOW_multiplicative_in_additive1018 = new BitSet(new long[]{0x0000000100000012L});
-    public static final BitSet FOLLOW_set_in_additive1021 = new BitSet(new long[]{0x000001A308002050L});
-    public static final BitSet FOLLOW_multiplicative_in_additive1030 = new BitSet(new long[]{0x0000000100000012L});
-    public static final BitSet FOLLOW_unary_in_multiplicative1049 = new BitSet(new long[]{0x0000000032000002L});
-    public static final BitSet FOLLOW_set_in_multiplicative1052 = new BitSet(new long[]{0x000001A308002050L});
-    public static final BitSet FOLLOW_unary_in_multiplicative1065 = new BitSet(new long[]{0x0000000032000002L});
-    public static final BitSet FOLLOW_postfix_in_unary1084 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_AT_ADD_in_unary1092 = new BitSet(new long[]{0x000001A308002050L});
-    public static final BitSet FOLLOW_unary_in_unary1095 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_unary_operator_in_unary1103 = new BitSet(new long[]{0x000001A308002050L});
-    public static final BitSet FOLLOW_unary_in_unary1106 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_AT_SUBTRACT_in_unary_operator1123 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_AT_BIT_NOT_in_unary_operator1135 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_AT_BOOL_NOT_in_unary_operator1143 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_primary_in_postfix1160 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_ID_in_postfix1168 = new BitSet(new long[]{0x0000000008000000L});
-    public static final BitSet FOLLOW_arguments_in_postfix1170 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_ID_in_primary1198 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_numeric_in_primary1206 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_AT_LPAREN_in_primary1214 = new BitSet(new long[]{0x000001A308002050L});
-    public static final BitSet FOLLOW_conditional_in_primary1217 = new BitSet(new long[]{0x0000000080000000L});
-    public static final BitSet FOLLOW_AT_RPAREN_in_primary1219 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_AT_LPAREN_in_arguments1237 = new BitSet(new long[]{0x000001A388002050L});
-    public static final BitSet FOLLOW_conditional_in_arguments1241 = new BitSet(new long[]{0x0000000080020000L});
-    public static final BitSet FOLLOW_AT_COMMA_in_arguments1244 = new BitSet(new long[]{0x000001A308002050L});
-    public static final BitSet FOLLOW_conditional_in_arguments1247 = new BitSet(new long[]{0x0000000080020000L});
-    public static final BitSet FOLLOW_AT_RPAREN_in_arguments1253 = new BitSet(new long[]{0x0000000000000002L});
+    catch (RecognitionException re) {
+      reportError(re);
+      recover(input,re);
+      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
+    }
+    finally {
+      // do for sure before leaving
+    }
+    return retval;
+  }
+  // $ANTLR end "numeric"
+
+  // Delegated rules
+
+
+
+  public static final BitSet FOLLOW_conditional_in_expression737 = new BitSet(new long[]{0x0000000000000000L});
+  public static final BitSet FOLLOW_EOF_in_expression739 = new BitSet(new long[]{0x0000000000000002L});
+  public static final BitSet FOLLOW_logical_or_in_conditional757 = new BitSet(new long[]{0x0000000001000002L});
+  public static final BitSet FOLLOW_AT_COND_QUE_in_conditional760 = new BitSet(new long[]{0x000001A308002050L});
+  public static final BitSet FOLLOW_conditional_in_conditional763 = new BitSet(new long[]{0x0000000000010000L});
+  public static final BitSet FOLLOW_AT_COLON_in_conditional765 = new BitSet(new long[]{0x000001A308002050L});
+  public static final BitSet FOLLOW_conditional_in_conditional768 = new BitSet(new long[]{0x0000000000000002L});
+  public static final BitSet FOLLOW_logical_and_in_logical_or787 = new BitSet(new long[]{0x0000000000004002L});
+  public static final BitSet FOLLOW_AT_BOOL_OR_in_logical_or790 = new BitSet(new long[]{0x000001A308002050L});
+  public static final BitSet FOLLOW_logical_and_in_logical_or793 = new BitSet(new long[]{0x0000000000004002L});
+  public static final BitSet FOLLOW_bitwise_or_in_logical_and812 = new BitSet(new long[]{0x0000000000001002L});
+  public static final BitSet FOLLOW_AT_BOOL_AND_in_logical_and815 = new BitSet(new long[]{0x000001A308002050L});
+  public static final BitSet FOLLOW_bitwise_or_in_logical_and818 = new BitSet(new long[]{0x0000000000001002L});
+  public static final BitSet FOLLOW_bitwise_xor_in_bitwise_or837 = new BitSet(new long[]{0x0000000000000082L});
+  public static final BitSet FOLLOW_AT_BIT_OR_in_bitwise_or840 = new BitSet(new long[]{0x000001A308002050L});
+  public static final BitSet FOLLOW_bitwise_xor_in_bitwise_or843 = new BitSet(new long[]{0x0000000000000082L});
+  public static final BitSet FOLLOW_bitwise_and_in_bitwise_xor862 = new BitSet(new long[]{0x0000000000000802L});
+  public static final BitSet FOLLOW_AT_BIT_XOR_in_bitwise_xor865 = new BitSet(new long[]{0x000001A308002050L});
+  public static final BitSet FOLLOW_bitwise_and_in_bitwise_xor868 = new BitSet(new long[]{0x0000000000000802L});
+  public static final BitSet FOLLOW_equality_in_bitwise_and888 = new BitSet(new long[]{0x0000000000000022L});
+  public static final BitSet FOLLOW_AT_BIT_AND_in_bitwise_and891 = new BitSet(new long[]{0x000001A308002050L});
+  public static final BitSet FOLLOW_equality_in_bitwise_and894 = new BitSet(new long[]{0x0000000000000022L});
+  public static final BitSet FOLLOW_relational_in_equality913 = new BitSet(new long[]{0x0000000000840002L});
+  public static final BitSet FOLLOW_set_in_equality916 = new BitSet(new long[]{0x000001A308002050L});
+  public static final BitSet FOLLOW_relational_in_equality925 = new BitSet(new long[]{0x0000000000840002L});
+  public static final BitSet FOLLOW_shift_in_relational944 = new BitSet(new long[]{0x0000000000780002L});
+  public static final BitSet FOLLOW_set_in_relational947 = new BitSet(new long[]{0x000001A308002050L});
+  public static final BitSet FOLLOW_shift_in_relational964 = new BitSet(new long[]{0x0000000000780002L});
+  public static final BitSet FOLLOW_additive_in_shift983 = new BitSet(new long[]{0x0000000000000702L});
+  public static final BitSet FOLLOW_set_in_shift986 = new BitSet(new long[]{0x000001A308002050L});
+  public static final BitSet FOLLOW_additive_in_shift999 = new BitSet(new long[]{0x0000000000000702L});
+  public static final BitSet FOLLOW_multiplicative_in_additive1018 = new BitSet(new long[]{0x0000000100000012L});
+  public static final BitSet FOLLOW_set_in_additive1021 = new BitSet(new long[]{0x000001A308002050L});
+  public static final BitSet FOLLOW_multiplicative_in_additive1030 = new BitSet(new long[]{0x0000000100000012L});
+  public static final BitSet FOLLOW_unary_in_multiplicative1049 = new BitSet(new long[]{0x0000000032000002L});
+  public static final BitSet FOLLOW_set_in_multiplicative1052 = new BitSet(new long[]{0x000001A308002050L});
+  public static final BitSet FOLLOW_unary_in_multiplicative1065 = new BitSet(new long[]{0x0000000032000002L});
+  public static final BitSet FOLLOW_postfix_in_unary1084 = new BitSet(new long[]{0x0000000000000002L});
+  public static final BitSet FOLLOW_AT_ADD_in_unary1092 = new BitSet(new long[]{0x000001A308002050L});
+  public static final BitSet FOLLOW_unary_in_unary1095 = new BitSet(new long[]{0x0000000000000002L});
+  public static final BitSet FOLLOW_unary_operator_in_unary1103 = new BitSet(new long[]{0x000001A308002050L});
+  public static final BitSet FOLLOW_unary_in_unary1106 = new BitSet(new long[]{0x0000000000000002L});
+  public static final BitSet FOLLOW_AT_SUBTRACT_in_unary_operator1123 = new BitSet(new long[]{0x0000000000000002L});
+  public static final BitSet FOLLOW_AT_BIT_NOT_in_unary_operator1135 = new BitSet(new long[]{0x0000000000000002L});
+  public static final BitSet FOLLOW_AT_BOOL_NOT_in_unary_operator1143 = new BitSet(new long[]{0x0000000000000002L});
+  public static final BitSet FOLLOW_primary_in_postfix1160 = new BitSet(new long[]{0x0000000000000002L});
+  public static final BitSet FOLLOW_ID_in_postfix1168 = new BitSet(new long[]{0x0000000008000000L});
+  public static final BitSet FOLLOW_arguments_in_postfix1170 = new BitSet(new long[]{0x0000000000000002L});
+  public static final BitSet FOLLOW_ID_in_primary1198 = new BitSet(new long[]{0x0000000000000002L});
+  public static final BitSet FOLLOW_numeric_in_primary1206 = new BitSet(new long[]{0x0000000000000002L});
+  public static final BitSet FOLLOW_AT_LPAREN_in_primary1214 = new BitSet(new long[]{0x000001A308002050L});
+  public static final BitSet FOLLOW_conditional_in_primary1217 = new BitSet(new long[]{0x0000000080000000L});
+  public static final BitSet FOLLOW_AT_RPAREN_in_primary1219 = new BitSet(new long[]{0x0000000000000002L});
+  public static final BitSet FOLLOW_AT_LPAREN_in_arguments1237 = new BitSet(new long[]{0x000001A388002050L});
+  public static final BitSet FOLLOW_conditional_in_arguments1241 = new BitSet(new long[]{0x0000000080020000L});
+  public static final BitSet FOLLOW_AT_COMMA_in_arguments1244 = new BitSet(new long[]{0x000001A308002050L});
+  public static final BitSet FOLLOW_conditional_in_arguments1247 = new BitSet(new long[]{0x0000000080020000L});
+  public static final BitSet FOLLOW_AT_RPAREN_in_arguments1253 = new BitSet(new long[]{0x0000000000000002L});
 }

