GitDiffStart: f4128bd21a3a04a790c3b9ac339eefaee1826e5a | Sun Dec 11 11:08:57 2011 +0000
diff --git a/lucene/src/java/org/apache/lucene/index/FieldReaderException.java b/lucene/src/java/org/apache/lucene/index/FieldReaderException.java
deleted file mode 100755
index 07736e9..0000000
--- a/lucene/src/java/org/apache/lucene/index/FieldReaderException.java
+++ /dev/null
@@ -1,79 +0,0 @@
-package org.apache.lucene.index;
-/**
- * Copyright 2004 The Apache Software Foundation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- *
- *
- **/
-public class FieldReaderException extends RuntimeException{
-  /**
-   * Constructs a new runtime exception with <code>null</code> as its
-   * detail message.  The cause is not initialized, and may subsequently be
-   * initialized by a call to {@link #initCause}.
-   */
-  public FieldReaderException() {
-  }
-
-  /**
-   * Constructs a new runtime exception with the specified cause and a
-   * detail message of <tt>(cause==null &#63; null : cause.toString())</tt>
-   * (which typically contains the class and detail message of
-   * <tt>cause</tt>).  
-   * <p>
-   * This constructor is useful for runtime exceptions
-   * that are little more than wrappers for other throwables.
-   *
-   * @param cause the cause (which is saved for later retrieval by the
-   *              {@link #getCause()} method).  (A <tt>null</tt> value is
-   *              permitted, and indicates that the cause is nonexistent or
-   *              unknown.)
-   * @since 1.4
-   */
-  public FieldReaderException(Throwable cause) {
-    super(cause);
-  }
-
-  /**
-   * Constructs a new runtime exception with the specified detail message.
-   * The cause is not initialized, and may subsequently be initialized by a
-   * call to {@link #initCause}.
-   *
-   * @param message the detail message. The detail message is saved for
-   *                later retrieval by the {@link #getMessage()} method.
-   */
-  public FieldReaderException(String message) {
-    super(message);
-  }
-
-  /**
-   * Constructs a new runtime exception with the specified detail message and
-   * cause.  <p>Note that the detail message associated with
-   * <code>cause</code> is <i>not</i> automatically incorporated in
-   * this runtime exception's detail message.
-   *
-   * @param message the detail message (which is saved for later retrieval
-   *                by the {@link #getMessage()} method).
-   * @param cause   the cause (which is saved for later retrieval by the
-   *                {@link #getCause()} method).  (A <tt>null</tt> value is
-   *                permitted, and indicates that the cause is nonexistent or
-   *                unknown.)
-   * @since 1.4
-   */
-  public FieldReaderException(String message, Throwable cause) {
-    super(message, cause);
-  }
-}
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40StoredFieldsReader.java b/lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40StoredFieldsReader.java
index 265deef..ce56b08 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40StoredFieldsReader.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40StoredFieldsReader.java
@@ -22,7 +22,6 @@ import java.io.IOException;
 import org.apache.lucene.index.CorruptIndexException;
 import org.apache.lucene.index.FieldInfo;
 import org.apache.lucene.index.FieldInfos;
-import org.apache.lucene.index.FieldReaderException;
 import org.apache.lucene.index.IndexFileNames;
 import org.apache.lucene.index.IndexFormatTooNewException;
 import org.apache.lucene.index.IndexFormatTooOldException;
@@ -225,7 +224,7 @@ public final class Lucene40StoredFieldsReader extends StoredFieldsReader impleme
           visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));
           return;
         default:
-          throw new FieldReaderException("Invalid numeric type: " + Integer.toHexString(numeric));
+          throw new CorruptIndexException("Invalid numeric type: " + Integer.toHexString(numeric));
       }
     } else { 
       final int length = fieldsStream.readVInt();
@@ -252,7 +251,7 @@ public final class Lucene40StoredFieldsReader extends StoredFieldsReader impleme
           fieldsStream.readLong();
           return;
         default: 
-          throw new FieldReaderException("Invalid numeric type: " + Integer.toHexString(numeric));
+          throw new CorruptIndexException("Invalid numeric type: " + Integer.toHexString(numeric));
       }
     } else {
       final int length = fieldsStream.readVInt();

