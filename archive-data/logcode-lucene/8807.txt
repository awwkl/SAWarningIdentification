GitDiffStart: dacc7f0166083fc39c01aeeb2412fec824c49658 | Wed Apr 24 21:43:57 2013 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index b6731cb..4a240c5 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -55,7 +55,9 @@ Optimizations
   a common divisor. In particular, this improves the compression ratio of dates
   without time when they are encoded as milliseconds since Epoch. Also support
   TABLE compressed numerics in the Disk codec.  (Robert Muir, Adrien Grand)
-  
+
+* LUCENE-4951: DrillSideways uses the new Scorer.cost() method to make
+  better decisions about which scorer to use internally.  (Mike McCandless)
   
 New Features
 
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery.java b/lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery.java
index a3f3de0..5ddf0b8 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysQuery.java
@@ -129,7 +129,7 @@ class DrillSidewaysQuery extends Query {
           dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];
           for(int i=0;i<drillDownTerms[dim].length;i++) {
             if (termsEnum.seekExact(drillDownTerms[dim][i].bytes(), false)) {
-              dims[dim].freq = Math.max(dims[dim].freq, termsEnum.docFreq());
+              dims[dim].maxFreq = Math.max(dims[dim].maxFreq, termsEnum.docFreq());
               dims[dim].docsEnums[i] = termsEnum.docs(null, null);
             }
           }
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysScorer.java b/lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysScorer.java
index 23e47b0..8cd744e 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysScorer.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysScorer.java
@@ -76,7 +76,7 @@ class DrillSidewaysScorer extends Scorer {
     assert baseScorer != null;
 
     // Position all scorers to their first matching doc:
-    int baseDocID = baseScorer.nextDoc();
+    baseScorer.nextDoc();
 
     for(DocsEnumsAndFreq dim : dims) {
       for(DocsEnum docsEnum : dim.docsEnums) {
@@ -90,18 +90,21 @@ class DrillSidewaysScorer extends Scorer {
 
     DocsEnum[][] docsEnums = new DocsEnum[numDims][];
     Collector[] sidewaysCollectors = new Collector[numDims];
-    int maxFreq = 0;
+    long drillDownCost = 0;
     for(int dim=0;dim<numDims;dim++) {
       docsEnums[dim] = dims[dim].docsEnums;
       sidewaysCollectors[dim] = dims[dim].sidewaysCollector;
-      maxFreq = Math.max(maxFreq, dims[dim].freq);
+      for(DocsEnum de : dims[dim].docsEnums) {
+        if (de != null) {
+          drillDownCost += de.cost();
+        }
+      }
     }
 
-    // TODO: if we add cost API to Scorer, switch to that!
-    int estBaseHitCount = context.reader().maxDoc() / (1+baseDocID);
+    long baseQueryCost = baseScorer.cost();
 
     /*
-    System.out.println("\nbaseDocID=" + baseDocID + " est=" + estBaseHitCount);
+    System.out.println("\nbaseDocID=" + baseScorer.docID() + " est=" + estBaseHitCount);
     System.out.println("  maxDoc=" + context.reader().maxDoc());
     System.out.println("  maxFreq=" + maxFreq);
     System.out.println("  dims[0].freq=" + dims[0].freq);
@@ -110,10 +113,10 @@ class DrillSidewaysScorer extends Scorer {
     }
     */
 
-    if (estBaseHitCount < maxFreq/10) {
+    if (baseQueryCost < drillDownCost/10) {
       //System.out.println("baseAdvance");
       doBaseAdvanceScoring(collector, docsEnums, sidewaysCollectors);
-    } else if (numDims > 1 && (dims[1].freq < estBaseHitCount/10)) {
+    } else if (numDims > 1 && (dims[1].maxFreq < baseQueryCost/10)) {
       //System.out.println("drillDownAdvance");
       doDrillDownAdvanceScoring(collector, docsEnums, sidewaysCollectors);
     } else {
@@ -630,13 +633,13 @@ class DrillSidewaysScorer extends Scorer {
   static class DocsEnumsAndFreq implements Comparable<DocsEnumsAndFreq> {
     DocsEnum[] docsEnums;
     // Max docFreq for all docsEnums for this dim:
-    int freq;
+    int maxFreq;
     Collector sidewaysCollector;
     String dim;
 
     @Override
     public int compareTo(DocsEnumsAndFreq other) {
-      return freq - other.freq;
+      return maxFreq - other.maxFreq;
     }
   }
 }

