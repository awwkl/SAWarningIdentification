GitDiffStart: f24810bdf1e8b1949970ce743373794e0b1ffc96 | Wed Mar 9 21:15:58 2016 +0000
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/util/SolrIdentifierValidator.java b/solr/solrj/src/java/org/apache/solr/client/solrj/util/SolrIdentifierValidator.java
index 57f9909..9473a28 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/util/SolrIdentifierValidator.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/util/SolrIdentifierValidator.java
@@ -19,6 +19,8 @@ package org.apache.solr.client.solrj.util;
 import java.util.Locale;
 import java.util.regex.Pattern;
 
+import org.apache.solr.common.SolrException;
+
 /**
  * Ensures that provided identifiers align with Solr's recommendations/requirements for choosing
  * collection, core, etc identifiers.
@@ -34,7 +36,7 @@ public class SolrIdentifierValidator {
 
   public static String validateName(IdentifierType type, String name) {
     if (!validateIdentifier(name))
-      throw new IllegalArgumentException(getIdentifierMessage(type, name));
+      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, getIdentifierMessage(type, name));
     return name;
   }
 
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCollectionAdminRequest.java b/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCollectionAdminRequest.java
index 5d5c315..c21e523 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCollectionAdminRequest.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCollectionAdminRequest.java
@@ -20,6 +20,7 @@ import org.apache.lucene.util.LuceneTestCase;
 import org.apache.solr.client.solrj.request.CollectionAdminRequest.Create;
 import org.apache.solr.client.solrj.request.CollectionAdminRequest.CreateAlias;
 import org.apache.solr.client.solrj.request.CollectionAdminRequest.CreateShard;
+import org.apache.solr.common.SolrException;
 import org.junit.Test;
 
 /**
@@ -33,7 +34,7 @@ public class TestCollectionAdminRequest extends LuceneTestCase {
     try {
       createRequest.setCollectionName("invalid$collection@name");
       fail();
-    } catch (IllegalArgumentException e) {
+    } catch (SolrException e) {
       final String exceptionMessage = e.getMessage();
       assertTrue(exceptionMessage.contains("Invalid collection"));
       assertTrue(exceptionMessage.contains("invalid$collection@name"));
@@ -47,7 +48,7 @@ public class TestCollectionAdminRequest extends LuceneTestCase {
     try {
       createRequest.setShards("invalid$shard@name");
       fail();
-    } catch (IllegalArgumentException e) {
+    } catch (SolrException e) {
       final String exceptionMessage = e.getMessage();
       assertTrue(exceptionMessage.contains("Invalid shard"));
       assertTrue(exceptionMessage.contains("invalid$shard@name"));
@@ -61,7 +62,7 @@ public class TestCollectionAdminRequest extends LuceneTestCase {
     try {
       createAliasRequest.setAliasName("invalid$alias@name");
       fail();
-    } catch (IllegalArgumentException e) {
+    } catch (SolrException e) {
       final String exceptionMessage = e.getMessage();
       assertTrue(exceptionMessage.contains("Invalid alias"));
       assertTrue(exceptionMessage.contains("invalid$alias@name"));
@@ -75,7 +76,7 @@ public class TestCollectionAdminRequest extends LuceneTestCase {
     try {
       createShardRequest.setShardName("invalid$shard@name");
       fail();
-    } catch (IllegalArgumentException e) {
+    } catch (SolrException e) {
       final String exceptionMessage = e.getMessage();
       assertTrue(exceptionMessage.contains("Invalid shard"));
       assertTrue(exceptionMessage.contains("invalid$shard@name"));
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin.java b/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin.java
index f3c3d55..ef4dad7 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin.java
@@ -16,12 +16,11 @@
  */
 package org.apache.solr.client.solrj.request;
 
-import static org.hamcrest.CoreMatchers.notNullValue;
-import static org.hamcrest.core.Is.is;
-
 import java.io.File;
 import java.lang.invoke.MethodHandles;
 
+import com.carrotsearch.randomizedtesting.annotations.ThreadLeakFilters;
+import com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule;
 import org.apache.commons.io.FileUtils;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.solr.SolrIgnoredThreadsFilter;
@@ -43,8 +42,8 @@ import org.junit.rules.TestRule;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.carrotsearch.randomizedtesting.annotations.ThreadLeakFilters;
-import com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule;
+import static org.hamcrest.CoreMatchers.notNullValue;
+import static org.hamcrest.core.Is.is;
 
 @ThreadLeakFilters(defaultFilters = true, filters = {SolrIgnoredThreadsFilter.class})
 public class TestCoreAdmin extends AbstractEmbeddedSolrServerTestCase {
@@ -167,7 +166,7 @@ public class TestCoreAdmin extends AbstractEmbeddedSolrServerTestCase {
     try {
       createRequest.setCoreName("invalid$core@name");
       fail();
-    } catch (IllegalArgumentException e) {
+    } catch (SolrException e) {
       final String exceptionMessage = e.getMessage();
       assertTrue(exceptionMessage.contains("Invalid core"));
       assertTrue(exceptionMessage.contains("invalid$core@name"));
@@ -180,7 +179,7 @@ public class TestCoreAdmin extends AbstractEmbeddedSolrServerTestCase {
     try {
       CoreAdminRequest.renameCore("validExistingCoreName", "invalid$core@name", null);
       fail();
-    } catch (IllegalArgumentException e) {
+    } catch (SolrException e) {
       final String exceptionMessage = e.getMessage();
       assertTrue(e.getMessage(), exceptionMessage.contains("Invalid core"));
       assertTrue(exceptionMessage.contains("invalid$core@name"));

