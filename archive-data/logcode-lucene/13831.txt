GitDiffStart: cdc68d0921d859dbcf5c5125c36d978a933ac742 | Mon Jan 30 16:38:50 2012 +0000
diff --git a/lucene/src/java/org/apache/lucene/index/SegmentCoreReaders.java b/lucene/src/java/org/apache/lucene/index/SegmentCoreReaders.java
index 657981e..8e68157 100644
--- a/lucene/src/java/org/apache/lucene/index/SegmentCoreReaders.java
+++ b/lucene/src/java/org/apache/lucene/index/SegmentCoreReaders.java
@@ -48,16 +48,13 @@ final class SegmentCoreReaders {
   // SegmentReaders:
   private final AtomicInteger ref = new AtomicInteger(1);
   
-  final String segment;
   final FieldInfos fieldInfos;
   
   final FieldsProducer fields;
   final PerDocProducer perDocProducer;
   final PerDocProducer norms;
 
-  final Directory dir;
-  final Directory cfsDir;
-  final IOContext context;
+  private final Directory cfsDir;
   final int termsIndexDivisor;
   
   private final SegmentReader owner;
@@ -90,22 +87,17 @@ final class SegmentCoreReaders {
       throw new IllegalArgumentException("indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)");
     }
     
-    segment = si.name;
     final Codec codec = si.getCodec();
-    this.context = context;
-    this.dir = dir;
     
     boolean success = false;
     
     try {
-      Directory dir0 = dir;
       if (si.getUseCompoundFile()) {
-        cfsReader = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(segment, "", IndexFileNames.COMPOUND_FILE_EXTENSION), context, false);
-        dir0 = cfsReader;
+        cfsDir = cfsReader = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(si.name, "", IndexFileNames.COMPOUND_FILE_EXTENSION), context, false);
       } else {
         cfsReader = null;
+        cfsDir = dir;
       }
-      cfsDir = dir0;
       si.loadFieldInfos(cfsDir, false); // prevent opening the CFS to load fieldInfos
       fieldInfos = si.getFieldInfos();
       
diff --git a/lucene/src/java/org/apache/lucene/index/SegmentReader.java b/lucene/src/java/org/apache/lucene/index/SegmentReader.java
index 02ad845..e97447c 100644
--- a/lucene/src/java/org/apache/lucene/index/SegmentReader.java
+++ b/lucene/src/java/org/apache/lucene/index/SegmentReader.java
@@ -183,7 +183,7 @@ public final class SegmentReader extends IndexReader {
   public String toString() {
     // SegmentInfo.toString takes dir and number of
     // *pending* deletions; so we reverse compute that here:
-    return si.toString(core.dir, si.docCount - numDocs - si.getDelCount());
+    return si.toString(si.dir, si.docCount - numDocs - si.getDelCount());
   }
   
   @Override
@@ -196,7 +196,7 @@ public final class SegmentReader extends IndexReader {
    * Return the name of the segment this reader is reading.
    */
   public String getSegmentName() {
-    return core.segment;
+    return si.name;
   }
   
   /**
@@ -212,7 +212,7 @@ public final class SegmentReader extends IndexReader {
     // Don't ensureOpen here -- in certain cases, when a
     // cloned/reopened reader needs to commit, it may call
     // this method on the closed original reader
-    return core.dir;
+    return si.dir;
   }
 
   // This is necessary so that cloned SegmentReaders (which

