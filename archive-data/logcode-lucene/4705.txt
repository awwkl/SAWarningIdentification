GitDiffStart: d4f03f72aeea5c17b77fef0740ba7aad7ce9f6cf | Sat Dec 20 06:18:37 2014 +0000
diff --git a/solr/core/src/test-files/solr/collection1/conf/solrconfig-searcher-listeners1.xml b/solr/core/src/test-files/solr/collection1/conf/solrconfig-searcher-listeners1.xml
index 24fe6c9..4a5bb7d 100644
--- a/solr/core/src/test-files/solr/collection1/conf/solrconfig-searcher-listeners1.xml
+++ b/solr/core/src/test-files/solr/collection1/conf/solrconfig-searcher-listeners1.xml
@@ -42,6 +42,8 @@
   <requestHandler name="standard" class="solr.StandardRequestHandler"/>
   
   <searchComponent name="mock" class="org.apache.solr.search.TestIndexSearcher$MockSearchComponent"/>
+  
+  <query><useColdSearcher>false</useColdSearcher></query>
 
 </config>
 
diff --git a/solr/core/src/test/org/apache/solr/search/TestIndexSearcher.java b/solr/core/src/test/org/apache/solr/search/TestIndexSearcher.java
index 068f44f..8479fd3 100644
--- a/solr/core/src/test/org/apache/solr/search/TestIndexSearcher.java
+++ b/solr/core/src/test/org/apache/solr/search/TestIndexSearcher.java
@@ -19,7 +19,9 @@ package org.apache.solr.search;
 import java.io.IOException;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apache.lucene.index.IndexReader;
@@ -206,6 +208,7 @@ public class TestIndexSearcher extends SolrTestCaseJ4 {
     // reset counters
     MockSearcherListener.numberOfTimesCalled = new AtomicInteger();
     MockSearcherListener.numberOfTimesCalledFirstSearcher = new AtomicInteger();
+    MockSearcherListener.latch = new CountDownLatch(numTimesCalled);
     
     try {
       CoreDescriptor newCd = new CoreDescriptor(cores, "core1", cd.getInstanceDir(), "config", "solrconfig-searcher-listeners1.xml");
@@ -216,6 +219,10 @@ public class TestIndexSearcher extends SolrTestCaseJ4 {
       assertNotNull(newCore.getSearchComponent("mock"));
       assertEquals(MockSearchComponent.class, newCore.getSearchComponent("mock").getClass());
       
+      if (numTimesCalled > 0) {
+        MockSearcherListener.latch.await(10, TimeUnit.SECONDS);
+      }
+      
       assertEquals(numTimesCalled, MockSearcherListener.numberOfTimesCalled.get());
       assertEquals(numTimesCalledFirstSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());
       
@@ -274,6 +281,7 @@ public class TestIndexSearcher extends SolrTestCaseJ4 {
     
     static AtomicInteger numberOfTimesCalled;
     static AtomicInteger numberOfTimesCalledFirstSearcher;
+    static CountDownLatch latch;
 
     @Override
     public void init(NamedList args) {}
@@ -291,7 +299,7 @@ public class TestIndexSearcher extends SolrTestCaseJ4 {
       if (currentSearcher == null) {
         numberOfTimesCalledFirstSearcher.incrementAndGet();
       }
+      latch.countDown();
     }
-    
   }
 }

