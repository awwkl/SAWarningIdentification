GitDiffStart: 8dfe073760c5f97a980390ae5daad3a881fd7730 | Mon Oct 20 17:19:29 2008 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index 9b51789..9494cfa 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -34,6 +34,8 @@ New features
     static methods.  (Shalin Shekhar Mangar via Mike McCandless)
 
 
+ 3. LUCENE-1406: Added Arabic analyzer.  (Robert Muir via Grant Ingersoll)
+
 Optimizations
 
 Documentation
diff --git a/NOTICE.txt b/NOTICE.txt
index 92fd344..c826ff5 100644
--- a/NOTICE.txt
+++ b/NOTICE.txt
@@ -9,3 +9,8 @@ The snowball stemmers in
 were developed by Martin Porter and Richard Boulton.
 The full snowball package is available from
   http://snowball.tartarus.org/
+
+The Arabic stemmer (contrib/analyzer) comes with a default
+stopword list that is BSD-licensed created by Jacques Savoy.  The file
+resides in contrib/analyzers/src/java/org/apache/lucene/analysis/ar/stopwords.txt
+See http://members.unine.ch/jacques.savoy/clef/index.html.
\ No newline at end of file
diff --git a/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer.java b/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer.java
new file mode 100644
index 0000000..e0606f8
--- /dev/null
+++ b/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer.java
@@ -0,0 +1,124 @@
+package org.apache.lucene.analysis.ar;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.util.HashSet;
+import java.util.Hashtable;
+import java.util.Set;
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.StopFilter;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.WordlistLoader;
+
+/**
+ * Analyzer for Arabic. 
+ * <p>
+ * This analyzer implements light-stemming as specified by:
+ * <i>
+ * Improving Stemming for Arabic Information Retrieval: 
+ *      Light Stemming and Co-occurrence Analysis
+ * </i>    
+ * http://ciir.cs.umass.edu/pubfiles/ir-249.pdf
+ * <p>
+ * The analysis package contains three primary components:
+ * <ul>
+ *  <li>{@link ArabicNormalizationFilter}: Arabic orthographic normalization.
+ *  <li>{@link ArabicStemFilter}: Arabic light stemming
+ *  <li>Arabic stop words file: a set of default Arabic stop words.
+ * </ul>
+ * 
+ */
+public final class ArabicAnalyzer extends Analyzer {
+
+  /**
+   * File containing default Arabic stopwords.
+   * 
+   * Default stopword list is from http://members.unine.ch/jacques.savoy/clef/index.html
+   * The stopword list is BSD-Licensed.
+   */
+  public final static String DEFAULT_STOPWORD_FILE = "stopwords.txt";
+
+  /**
+   * Contains the stopwords used with the StopFilter.
+   */
+  private Set stoptable = new HashSet();
+  /**
+   * The comment character in the stopwords file.  All lines prefixed with this will be ignored  
+   */
+  public static final String STOPWORDS_COMMENT = "#";
+
+  /**
+   * Builds an analyzer with the default stop words: {@link #DEFAULT_STOPWORD_FILE}.
+   */
+  public ArabicAnalyzer() {
+    try {
+      InputStream stream = ArabicAnalyzer.class.getResourceAsStream(DEFAULT_STOPWORD_FILE);
+      InputStreamReader reader = new InputStreamReader(stream, "UTF-8");
+      stoptable = WordlistLoader.getWordSet(reader, STOPWORDS_COMMENT);
+      reader.close();
+      stream.close();
+    } catch (IOException e) {
+      // TODO: throw IOException
+      throw new RuntimeException(e);
+    }
+  }
+
+  /**
+   * Builds an analyzer with the given stop words.
+   */
+  public ArabicAnalyzer( String[] stopwords ) {
+    stoptable = StopFilter.makeStopSet( stopwords );
+  }
+
+  /**
+   * Builds an analyzer with the given stop words.
+   */
+  public ArabicAnalyzer( Hashtable stopwords ) {
+    stoptable = new HashSet(stopwords.keySet());
+  }
+
+  /**
+   * Builds an analyzer with the given stop words.  Lines can be commented out using {@link #STOPWORDS_COMMENT}
+   */
+  public ArabicAnalyzer( File stopwords ) throws IOException {
+    stoptable = WordlistLoader.getWordSet( stopwords, STOPWORDS_COMMENT);
+  }
+
+
+  /**
+   * Creates a TokenStream which tokenizes all the text in the provided Reader.
+   *
+   * @return  A TokenStream build from a StandardTokenizer filtered with
+   * 			StandardFilter, StopFilter, ArabicNormalizationFilter and ArabicStemFilter.
+   */
+  public final TokenStream tokenStream(String fieldName, Reader reader) {
+    TokenStream result = new ArabicLetterTokenizer( reader );
+    result = new StopFilter( result, stoptable );
+    result = new ArabicNormalizationFilter( result );
+    result = new ArabicStemFilter( result );
+
+    return result;
+  }
+}
+
diff --git a/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicLetterTokenizer.java b/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicLetterTokenizer.java
new file mode 100644
index 0000000..d414ef1
--- /dev/null
+++ b/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicLetterTokenizer.java
@@ -0,0 +1,43 @@
+package org.apache.lucene.analysis.ar;
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.Reader;
+
+import org.apache.lucene.analysis.LetterTokenizer;
+
+/**
+ * The problem with the standard Letter tokenizer is that it fails on diacritics.
+ * Handling similar to this is necessary for Indic Scripts, Hebrew, Thaana, etc.
+ * 
+ *
+ */
+public class ArabicLetterTokenizer extends LetterTokenizer {
+
+  public ArabicLetterTokenizer(Reader in) {
+    super(in);
+  }
+
+  /** 
+   * Allows for Letter category or NonspacingMark category
+   * @see org.apache.lucene.analysis.LetterTokenizer#isTokenChar(char)
+   */
+  protected boolean isTokenChar(char c) {
+    return super.isTokenChar(c) || Character.getType(c) == Character.NON_SPACING_MARK;
+  }
+
+}
diff --git a/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicNormalizationFilter.java b/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicNormalizationFilter.java
new file mode 100644
index 0000000..90b504f
--- /dev/null
+++ b/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicNormalizationFilter.java
@@ -0,0 +1,53 @@
+package org.apache.lucene.analysis.ar;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.analysis.Token;
+import org.apache.lucene.analysis.TokenFilter;
+import org.apache.lucene.analysis.TokenStream;
+
+/**
+ * A TokenFilter that applies {@link ArabicNormalizer} to normalize the orthography.
+ * 
+ */
+
+public class ArabicNormalizationFilter extends TokenFilter {
+
+  protected ArabicNormalizer normalizer = null;
+
+  protected ArabicNormalizationFilter(TokenStream input) {
+    super(input);
+    normalizer = new ArabicNormalizer();
+  }
+
+
+
+  public Token next(Token reusableToken) throws IOException {
+    if ((reusableToken = input.next(reusableToken)) == null) {
+      return null;
+    } else {
+      int oldlen = reusableToken.termLength();
+      int newlen = normalizer.normalize(reusableToken.termBuffer(), oldlen);
+      if (oldlen != newlen)
+        reusableToken.setTermLength(newlen);
+      return reusableToken;
+    }
+  }
+}
diff --git a/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicNormalizer.java b/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicNormalizer.java
new file mode 100644
index 0000000..6693c03
--- /dev/null
+++ b/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicNormalizer.java
@@ -0,0 +1,102 @@
+package org.apache.lucene.analysis.ar;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ *  Normalizer for Arabic.
+ *  <p>
+ *  Normalization is done in-place for efficiency, operating on a termbuffer.
+ *  <p>
+ *  Normalization is defined as:
+ *  <ul>
+ *  <li> Normalization of hamza with alef seat to a bare alef.
+ *  <li> Normalization of teh marbuta to heh
+ *  <li> Normalization of dotless yeh (alef maksura) to yeh.
+ *  <li> Removal of Arabic diacritics (the harakat)
+ *  <li> Removal of tatweel (stretching character).
+ * </ul>
+ *
+ */
+public class ArabicNormalizer {
+  public static final char ALEF = '\u0627';
+  public static final char ALEF_MADDA = '\u0622';
+  public static final char ALEF_HAMZA_ABOVE = '\u0623';
+  public static final char ALEF_HAMZA_BELOW = '\u0625';
+
+  public static final char YEH = '\u064A';
+  public static final char DOTLESS_YEH = '\u0649';
+
+  public static final char TEH_MARBUTA = '\u0629';
+  public static final char HEH = '\u0647';
+
+  public static final char TATWEEL = '\u0640';
+
+  public static final char FATHATAN = '\u064B';
+  public static final char DAMMATAN = '\u064C';
+  public static final char KASRATAN = '\u064D';
+  public static final char FATHA = '\u064E';
+  public static final char DAMMA = '\u064F';
+  public static final char KASRA = '\u0650';
+  public static final char SHADDA = '\u0651';
+  public static final char SUKUN = '\u0652';
+
+  /**
+   * Normalize an input buffer of Arabic text
+   * 
+   * @param s input buffer
+   * @param len length of input buffer
+   * @return length of input buffer after normalization
+   */
+  public int normalize(char s[], int len) {
+ 
+    for (int i = 0; i < len; i++) {
+      if (s[i] == ALEF_MADDA || s[i] == ALEF_HAMZA_ABOVE || s[i] == ALEF_HAMZA_BELOW)
+        s[i] = ALEF;
+
+      if (s[i] == DOTLESS_YEH)
+        s[i] = YEH;
+
+      if (s[i] == TEH_MARBUTA)
+        s[i] = HEH;
+
+      if (s[i] == TATWEEL || s[i] == KASRATAN || s[i] == DAMMATAN || s[i] == FATHATAN ||
+          s[i] == FATHA || s[i] == DAMMA || s[i] == KASRA || s[i] == SHADDA || s[i] == SUKUN) {
+        len = delete(s, i, len);
+        i--;
+      }
+    }
+
+    return len;
+  }
+
+  /**
+   * Delete a character in-place
+   * 
+   * @param s Input Buffer
+   * @param pos Position of character to delete
+   * @param len length of input buffer
+   * @return length of input buffer after deletion
+   */
+  protected int delete(char s[], int pos, int len) {
+    if (pos < len) 
+      System.arraycopy(s, pos + 1, s, pos, len - pos - 1);
+
+    return len - 1;
+  }
+
+}
diff --git a/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicStemFilter.java b/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicStemFilter.java
new file mode 100644
index 0000000..dd615d7
--- /dev/null
+++ b/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicStemFilter.java
@@ -0,0 +1,61 @@
+package org.apache.lucene.analysis.ar;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.apache.lucene.analysis.Token;
+import org.apache.lucene.analysis.TokenFilter;
+import org.apache.lucene.analysis.TokenStream;
+
+/**
+ * A TokenFilter that applies {@link ArabicStemmer} to stem Arabic words..
+ * 
+ */
+
+public class ArabicStemFilter extends TokenFilter {
+
+  protected ArabicStemmer stemmer = null;
+
+  protected ArabicStemFilter(TokenStream input) {
+    super(input);
+    stemmer = new ArabicStemmer();
+  }
+
+
+
+  /**
+   * @return  Returns the next token in the stream, or null at EOS
+   */
+  public Token next(Token reusableToken) throws IOException {
+    /**
+     * The actual token in the input stream.
+     */
+
+
+    if ((reusableToken = input.next(reusableToken)) == null) {
+      return null;
+    } else {
+      int oldlen = reusableToken.termLength();
+      int newlen = stemmer.stem(reusableToken.termBuffer(), oldlen);
+      if (oldlen != newlen)
+        reusableToken.setTermLength(newlen);
+      return reusableToken;
+    }
+  }
+}
diff --git a/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicStemmer.java b/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicStemmer.java
new file mode 100644
index 0000000..3e84a75
--- /dev/null
+++ b/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/ArabicStemmer.java
@@ -0,0 +1,177 @@
+package org.apache.lucene.analysis.ar;
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ *  Stemmer for Arabic.
+ *  <p>
+ *  Stemming  is done in-place for efficiency, operating on a termbuffer.
+ *  <p>
+ *  Stemming is defined as:
+ *  <ul>
+ *  <li> Removal of attached definite article, conjunction, and prepositions.
+ *  <li> Stemming of common suffixes.
+ * </ul>
+ *
+ */
+public class ArabicStemmer {
+  public static final char ALEF = '\u0627';
+  public static final char BEH = '\u0628';
+  public static final char TEH_MARBUTA = '\u0629';
+  public static final char TEH = '\u062A';
+  public static final char FEH = '\u0641';
+  public static final char KAF = '\u0643';
+  public static final char LAM = '\u0644';
+  public static final char NOON = '\u0646';
+  public static final char HEH = '\u0647';
+  public static final char WAW = '\u0648';
+  public static final char YEH = '\u064A';
+  
+  public static final char prefixes[][] = {
+      ("" + ALEF + LAM).toCharArray(), 
+      ("" + WAW + ALEF + LAM).toCharArray(), 
+      ("" + BEH + ALEF + LAM).toCharArray(),
+      ("" + KAF + ALEF + LAM).toCharArray(),
+      ("" + FEH + ALEF + LAM).toCharArray(),
+      ("" + WAW).toCharArray(),
+  };
+  
+  public static final char suffixes[][] = {
+    ("" + HEH + ALEF).toCharArray(), 
+    ("" + ALEF + NOON).toCharArray(), 
+    ("" + ALEF + TEH).toCharArray(), 
+    ("" + WAW + NOON).toCharArray(), 
+    ("" + YEH + NOON).toCharArray(), 
+    ("" + YEH + HEH).toCharArray(),
+    ("" + YEH + TEH_MARBUTA).toCharArray(),
+    ("" + HEH).toCharArray(),
+    ("" + TEH_MARBUTA).toCharArray(),
+    ("" + YEH).toCharArray(),
+};
+  
+  /**
+   * Stem an input buffer of Arabic text.
+   * 
+   * @param s input buffer
+   * @param len length of input buffer
+   * @return length of input buffer after normalization
+   */
+  public int stem(char s[], int len) {
+    len = stemPrefix(s, len);
+    len = stemSuffix(s, len);
+    
+    return len;
+  }
+  
+  /**
+   * Stem a prefix off an Arabic word.
+   * @param s input buffer
+   * @param len length of input buffer
+   * @return new length of input buffer after stemming.
+   */
+  public int stemPrefix(char s[], int len) {
+    for (int i = 0; i < prefixes.length; i++) 
+      if (startsWith(s, len, prefixes[i]))
+        return deleteN(s, 0, len, prefixes[i].length);
+    return len;
+  }
+
+  /**
+   * Stem suffix(es) off an Arabic word.
+   * @param s input buffer
+   * @param len length of input buffer
+   * @return new length of input buffer after stemming
+   */
+  public int stemSuffix(char s[], int len) {
+    for (int i = 0; i < suffixes.length; i++) 
+      if (endsWith(s, len, suffixes[i]))
+        len = deleteN(s, len - suffixes[i].length, len, suffixes[i].length);
+    return len;
+  }
+  
+  /**
+   * Returns true if the prefix matches and can be stemmed
+   * @param s input buffer
+   * @param len length of input buffer
+   * @param prefix prefix to check
+   * @return true if the prefix matches and can be stemmed
+   */
+  boolean startsWith(char s[], int len, char prefix[]) {
+    if (prefix.length == 1 && len < 4) { // wa- prefix requires at least 3 characters
+      return false;
+    } else if (len < prefix.length + 2) { // other prefixes require only 2.
+      return false;
+    } else {
+      for (int i = 0; i < prefix.length; i++)
+        if (s[i] != prefix[i])
+          return false;
+        
+      return true;
+    }
+  }
+  
+  /**
+   * Returns true if the suffix matches and can be stemmed
+   * @param s input buffer
+   * @param len length of input buffer
+   * @param suffix suffix to check
+   * @return true if the suffix matches and can be stemmed
+   */
+  boolean endsWith(char s[], int len, char suffix[]) {
+    if (len < suffix.length + 2) { // all suffixes require at least 2 characters after stemming
+      return false;
+    } else {
+      for (int i = 0; i < suffix.length; i++)
+        if (s[len - suffix.length + i] != suffix[i])
+          return false;
+        
+      return true;
+    }
+  }
+  
+  
+  /**
+   * Delete n characters in-place
+   * 
+   * @param s Input Buffer
+   * @param pos Position of character to delete
+   * @param len Length of input buffer
+   * @param nChars number of characters to delete
+   * @return length of input buffer after deletion
+   */
+  protected int deleteN(char s[], int pos, int len, int nChars) {
+    for (int i = 0; i < nChars; i++)
+      len = delete(s, pos, len);
+    return len;
+  }
+  
+  /**
+   * Delete a character in-place
+   * 
+   * @param s Input Buffer
+   * @param pos Position of character to delete
+   * @param len length of input buffer
+   * @return length of input buffer after deletion
+   */
+  protected int delete(char s[], int pos, int len) {
+    if (pos < len) 
+      System.arraycopy(s, pos + 1, s, pos, len - pos - 1);
+    
+    return len - 1;
+  }
+  
+}
diff --git a/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/package.html b/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/package.html
new file mode 100644
index 0000000..0a8f496
--- /dev/null
+++ b/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/package.html
@@ -0,0 +1,5 @@
+<html><head></head>
+<body>
+Analyzer for Arabic.
+</body>
+</html>
diff --git a/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/stopwords.txt b/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/stopwords.txt
new file mode 100644
index 0000000..4bb557b
--- /dev/null
+++ b/contrib/analyzers/src/java/org/apache/lucene/analysis/ar/stopwords.txt
@@ -0,0 +1,350 @@
+# This file was created by Jacques Savoy and is distributed under the BSD license.
+# See http://members.unine.ch/jacques.savoy/clef/index.html.
+# Also see http://www.opensource.org/licenses/bsd-license.html
+ب
+ا
+أ
+?
+عشر
+عبد
+عدد
+عدة
+عشرة
+عد?
+عا?
+عا?ا
+عر?ات
+ع?
+ع?د
+ع?ا?
+ع?د?ا
+ع??
+ع??
+ع???
+ع???ا
+ع???ة
+ز?ارة
+سبت?بر
+سارا????
+س?ة
+س?ر?ا
+س??ات
+تشر??
+ت?
+ت??ز
+ضد
+بعد
+بعض
+اعادة
+اع??
+اع??ت
+حزب
+حز?را?
+بسبب
+اسرائ??
+حس??
+حت?
+ات?ا?
+صرب
+اذا
+احد
+اثر
+غزة
+برس
+باس?
+اجت?اع
+غدا
+شخصا
+صباح
+اطار
+اربعة
+بغداد
+اخر?
+بار?س
+راب??
+شر?
+با?
+اب?
+اج?
+غ?ر
+حر?ة
+رئ?س
+جد?دة
+اط?ا?
+بش??
+بط??ة
+صح??ة
+حا??ا
+ب?
+ب?
+ث?
+ا?
+ا?
+ا?
+ا?
+ب?ا
+ج?ة
+ص?ر
+ح?ث
+ا?د
+ا?ا
+ا?ا
+ا?عس?ر?ة
+ا?عرا?
+ا?عاص?ة
+ا?عرب?ة
+ا?عرا??
+ا?عرا??ة
+ا?عا?
+ا?عا??
+ا?ع?ا?ات
+ا?ع??
+ا?س
+ا?سع?د?ة
+ا?ساعة
+ا?سبت
+ا?ساب?
+ر?س?ا
+ا?س?طة
+ا?س?طات
+ا?س?ا?
+ا?تعا??
+ا?تحر?ر
+ا?ت?
+ا?ت?
+ا?ت?بر
+د?رة
+ا?ثر
+ا?ار
+ا?ضا
+ا?جزائر
+ح?اس
+ا?اسرائ???
+ا?اسرائ???ة
+ا?اسب?ع
+ا?اس?حة
+ا?اس?ا??ة
+ذ?رت
+ا?اتحاد
+ا?ات?ا?
+ث?اثة
+ا?حرب
+ا?احد
+ا?ذات?
+ا?شرطة
+ا?اربعاء
+ا?غرب?ة
+ا?خارج?ة
+ا?ارد?
+ا?شر?
+ا?را?
+ا?حد?د
+ا?رئ?س
+ا?اخ?رة
+ا?ثا??
+ا?ثا??ة
+ا?اث???
+ش?ا?
+ب?ا?
+د?ش?
+ا?ذ?
+ا?ذ?
+ا?ا?
+ا?ا?
+ا?ا?
+خ?ا?
+ا?ش?خ
+ا?ج?ش
+ا?د?ر
+ا?ض?ة
+ا?ج?عة
+ب?ر?ز
+ا?ا?سط
+ا?ر?س?
+ا?ب?س?ة
+ا?ر?س?ة
+ب?ر?ت
+ا?ا?تخابات
+ا?ب?اد
+ا?د?اع
+ا?ث?ثاء
+ا?ا?باء
+ا?ث?اثاء
+ا?ا?ر?ب?
+ح?ا??
+ا?ذ??
+ا?د??
+ا?ح??
+ا?ا??
+ا?ا??
+ا?ا??
+ا?د??ة
+ا?خ??ج
+ا?خ??س
+ا?ا??ر??
+ا?ا??ر??ة
+ا?د???
+ا?ا???
+ا?د???ة
+ا?ح???ة
+ب??
+ذ??
+د??
+د??
+ح??
+ح??
+ا??
+ا??
+ا??
+ا??
+ض??
+ج??ب
+د??ة
+ا??ا
+ج??ع
+ا??زراء
+ا??تحدث
+ا??تحدة
+د??ار
+ا??ار
+ا??ضع
+ا??دس
+ا??حت?ة
+ا??صدر
+ا??باراة
+ا??صر?
+ا??اض?
+ا??صر?ة
+ا??رح?ة
+ا??د?
+ا??ج?ة
+ا??ج?س
+ا??ر?س?
+ا??ر?س?ة
+ا??ا?رة
+ا??د??ة
+ا??ا??ا
+ا??ط??ة
+ا??ج??عة
+ا???
+ا???سط???
+ا???سط???ة
+ا???سط?????
+ا???ت
+ا???رر
+ا???ات
+ا???ائ?
+ا???ب?
+ا???ط?ة
+ا???ا?ات
+ا???ا?ضات
+ا????
+ا????
+ا????
+ا????
+ا????ت
+?
+?
+?
+?6
+?د
+?ا
+?ا
+?ع
+?زارة
+?ز?ر
+?ساء
+?ت?
+?رة
+?صر
+?ذا
+?از
+?أس
+?اسر
+?رار
+?صدر
+?احد
+?طاع
+?صادر
+?باراة
+?بار?
+?اضا?
+?اضا?ت
+?را?س
+?اش?ط?
+?ا?
+?ب?
+?ا?
+?ا?
+?د?
+?ح?
+?ذ?
+?ا?
+?ح?د
+?ا?د
+?ذ?ر
+?ج?س
+?ر?سا
+?ر?ست??ر
+?ا?ت
+?ا?ضح
+?ب?ا?
+?ا??
+?د??ة
+?ج??عة
+?ا???
+??
+??
+??
+??
+??
+??
+??
+??
+??
+??ة
+??ا
+??ا
+??ذ
+??د
+??ا
+??س?
+??س??
+??ت?
+??اء
+??رة
+??طة
+??ات
+??اب?
+??د?
+??ا?
+??ا?
+??ا?
+??ط?ة
+??ظ?ة
+??ا?ة
+??ا?ة
+??ا?ت
+??ا?ت
+??ا??
+???
+???
+???
+???
+???
+???
+???
+???
+???
+???
+???ا
+???ا
+???ار
+???ا?ة
+????
+????
+????ت??
+?????
+?????
+?????
+?????ر?
diff --git a/contrib/analyzers/src/test/org/apache/lucene/analysis/ar/TestArabicNormalizationFilter.java b/contrib/analyzers/src/test/org/apache/lucene/analysis/ar/TestArabicNormalizationFilter.java
new file mode 100644
index 0000000..bbebe97
--- /dev/null
+++ b/contrib/analyzers/src/test/org/apache/lucene/analysis/ar/TestArabicNormalizationFilter.java
@@ -0,0 +1,106 @@
+package org.apache.lucene.analysis.ar;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.StringReader;
+
+import junit.framework.TestCase;
+
+import org.apache.lucene.analysis.Token;
+import org.apache.lucene.analysis.WhitespaceTokenizer;
+import org.apache.lucene.analysis.standard.StandardTokenizer;
+
+/**
+ * Test the Arabic Normalization Filter
+ *
+ */
+public class TestArabicNormalizationFilter extends TestCase {
+
+  public void testAlifMadda() throws IOException {
+    check("آج?", "اج?");
+  }
+  
+  public void testAlifHamzaAbove() throws IOException {
+    check("أح?د", "اح?د");
+  }
+  
+  public void testAlifHamzaBelow() throws IOException {
+    check("إعاذ", "اعاذ");
+  }
+  
+  public void testAlifMaksura() throws IOException {
+    check("ب??", "ب??");
+  }
+
+  public void testTehMarbuta() throws IOException {
+    check("?اط?ة", "?اط??");
+  }
+  
+  public void testTatweel() throws IOException {
+    check("ر?بر?????ت", "ر?برت");
+  }
+  
+  public void testFatha() throws IOException {
+    check("??ب?ا", "?ب?ا");
+  }
+  
+  public void testKasra() throws IOException {
+    check("ع???", "ع??");
+  }
+  
+  public void testDamma() throws IOException {
+    check("ب??ات", "ب?ات");
+  }
+  
+  public void testFathatan() throws IOException {
+    check("??دا?", "??دا");
+  }
+  
+  public void testKasratan() throws IOException {
+    check("??د?", "??د");
+  }
+  
+  public void testDammatan() throws IOException {
+    check("??د?", "??د");
+  }  
+  
+  public void testSukun() throws IOException {
+    check("???س??", "??س??");
+  }
+  
+  public void testShaddah() throws IOException {
+    check("?ت???", "?ت??");
+  }  
+  
+  private void check(final String input, final String expected) throws IOException {
+    ArabicLetterTokenizer tokenStream = new ArabicLetterTokenizer(new StringReader(input));
+    ArabicNormalizationFilter filter = new ArabicNormalizationFilter(tokenStream);
+    final Token reusableToken = new Token();
+    Token nextToken = filter.next(reusableToken);
+    if (nextToken == null)
+      fail();
+    assertEquals(expected, nextToken.term());
+    filter.close();
+  }
+
+}
diff --git a/contrib/analyzers/src/test/org/apache/lucene/analysis/ar/TestArabicStemFilter.java b/contrib/analyzers/src/test/org/apache/lucene/analysis/ar/TestArabicStemFilter.java
new file mode 100644
index 0000000..01dc544
--- /dev/null
+++ b/contrib/analyzers/src/test/org/apache/lucene/analysis/ar/TestArabicStemFilter.java
@@ -0,0 +1,129 @@
+package org.apache.lucene.analysis.ar;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.StringReader;
+
+import junit.framework.TestCase;
+
+import org.apache.lucene.analysis.Token;
+import org.apache.lucene.analysis.standard.StandardTokenizer;
+
+/**
+ * Test the Arabic Normalization Filter
+ *
+ */
+public class TestArabicStemFilter extends TestCase {
+  
+  public void testAlPrefix() throws IOException {
+    check("ا?حس?", "حس?");
+  }    
+
+  public void testWalPrefix() throws IOException {
+    check("?ا?حس?", "حس?");
+  }    
+  
+  public void testBalPrefix() throws IOException {
+    check("با?حس?", "حس?");
+  }    
+  
+  public void testKalPrefix() throws IOException {
+    check("?ا?حس?", "حس?");
+  }    
+  
+  public void testFalPrefix() throws IOException {
+    check("?ا?حس?", "حس?");
+  }    
+
+  public void testWaPrefix() throws IOException {
+    check("?حس?", "حس?");
+  } 
+  
+  public void testAhSuffix() throws IOException {
+    check("ز?ج?ا", "ز?ج");
+  } 
+  
+  public void testAnSuffix() throws IOException {
+    check("سا?دا?", "سا?د");
+  } 
+  
+  public void testAtSuffix() throws IOException {
+    check("سا?دات", "سا?د");
+  } 
+  
+  public void testWnSuffix() throws IOException {
+    check("سا?د??", "سا?د");
+  } 
+  
+  public void testYnSuffix() throws IOException {
+    check("سا?د??", "سا?د");
+  } 
+  
+  public void testYhSuffix() throws IOException {
+    check("سا?د??", "سا?د");
+  } 
+
+  public void testYpSuffix() throws IOException {
+    check("سا?د?ة", "سا?د");
+  } 
+  
+  public void testHSuffix() throws IOException {
+    check("سا?د?", "سا?د");
+  } 
+  
+  public void testPSuffix() throws IOException {
+    check("سا?دة", "سا?د");
+  }
+  
+  public void testYSuffix() throws IOException {
+    check("سا?د?", "سا?د");
+  }
+  
+  public void testComboPrefSuf() throws IOException {
+    check("?سا?د??", "سا?د");
+  }
+  
+  public void testComboSuf() throws IOException {
+    check("سا?د?ات", "سا?د");
+  }
+  
+  public void testShouldntStem() throws IOException {
+    check("ا??", "ا??");
+  }
+
+  public void testNonArabic() throws IOException {
+    check("English", "English");
+  }
+
+  private void check(final String input, final String expected) throws IOException {
+    ArabicLetterTokenizer tokenStream  = new ArabicLetterTokenizer(new StringReader(input));
+    ArabicStemFilter filter = new ArabicStemFilter(tokenStream);
+    final Token reusableToken = new Token();
+    Token nextToken = filter.next(reusableToken);
+    if (nextToken == null)
+      fail();
+    assertEquals(expected, nextToken.term());
+    filter.close();
+  }
+
+}
diff --git a/src/java/org/apache/lucene/analysis/WordlistLoader.java b/src/java/org/apache/lucene/analysis/WordlistLoader.java
index 6a5f9d6..ca77050 100644
--- a/src/java/org/apache/lucene/analysis/WordlistLoader.java
+++ b/src/java/org/apache/lucene/analysis/WordlistLoader.java
@@ -57,6 +57,31 @@ public class WordlistLoader {
   }
 
   /**
+   * Loads a text file and adds every non-comment line as an entry to a HashSet (omitting
+   * leading and trailing whitespace). Every line of the file should contain only
+   * one word. The words need to be in lowercase if you make use of an
+   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).
+   *
+   * @param wordfile File containing the wordlist
+   * @param comment The comment string to ignore
+   * @return A HashSet with the file's words
+   */
+  public static HashSet getWordSet(File wordfile, String comment) throws IOException {
+    HashSet result = new HashSet();
+    FileReader reader = null;
+    try {
+      reader = new FileReader(wordfile);
+      result = getWordSet(reader, comment);
+    }
+    finally {
+      if (reader != null)
+        reader.close();
+    }
+    return result;
+  }
+
+
+  /**
    * Reads lines from a Reader and adds every line as an entry to a HashSet (omitting
    * leading and trailing whitespace). Every line of the Reader should contain only
    * one word. The words need to be in lowercase if you make use of an
@@ -87,6 +112,41 @@ public class WordlistLoader {
   }
 
   /**
+   * Reads lines from a Reader and adds every non-comment line as an entry to a HashSet (omitting
+   * leading and trailing whitespace). Every line of the Reader should contain only
+   * one word. The words need to be in lowercase if you make use of an
+   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).
+   *
+   * @param reader Reader containing the wordlist
+   * @param comment The string representing a comment.
+   * @return A HashSet with the reader's words
+   */
+  public static HashSet getWordSet(Reader reader, String comment) throws IOException {
+    HashSet result = new HashSet();
+    BufferedReader br = null;
+    try {
+      if (reader instanceof BufferedReader) {
+        br = (BufferedReader) reader;
+      } else {
+        br = new BufferedReader(reader);
+      }
+      String word = null;
+      while ((word = br.readLine()) != null) {
+        if (word.startsWith(comment) == false){
+          result.add(word.trim());
+        }
+      }
+    }
+    finally {
+      if (br != null)
+        br.close();
+    }
+    return result;
+  }
+
+
+
+  /**
    * Reads a stem dictionary. Each line contains:
    * <pre>word<b>\t</b>stem</pre>
    * (i.e. two tab seperated words)
diff --git a/src/test/org/apache/lucene/index/TestWordlistLoader.java b/src/test/org/apache/lucene/index/TestWordlistLoader.java
index a59f38b..3ebfa9c 100644
--- a/src/test/org/apache/lucene/index/TestWordlistLoader.java
+++ b/src/test/org/apache/lucene/index/TestWordlistLoader.java
@@ -35,7 +35,16 @@ public class TestWordlistLoader extends LuceneTestCase {
     HashSet wordSet2 = WordlistLoader.getWordSet(new BufferedReader(new StringReader(s)));
     checkSet(wordSet2);
   }
-  
+
+  public void testComments() throws Exception {
+    String s = "ONE\n  two \nthree\n#comment";
+    HashSet wordSet1 = WordlistLoader.getWordSet(new StringReader(s), "#");
+    checkSet(wordSet1);
+    assertFalse(wordSet1.contains("#comment"));
+    assertFalse(wordSet1.contains("comment"));
+  }
+
+
   private void checkSet(HashSet wordset) {
     assertEquals(3, wordset.size());
     assertTrue(wordset.contains("ONE"));		// case is not modified

