GitDiffStart: 26ea856e1be46720b0d8c4766480d80ed6e31b66 | Sat Jun 5 15:53:30 2010 +0000
diff --git a/lucene/src/java/org/apache/lucene/index/MultiTermsEnum.java b/lucene/src/java/org/apache/lucene/index/MultiTermsEnum.java
index 59e6491..41f6c2d 100644
--- a/lucene/src/java/org/apache/lucene/index/MultiTermsEnum.java
+++ b/lucene/src/java/org/apache/lucene/index/MultiTermsEnum.java
@@ -143,7 +143,7 @@ public final class MultiTermsEnum extends TermsEnum {
       final SeekStatus status = currentSubs[i].terms.seek(term, useCache);
       if (status == SeekStatus.FOUND) {
         top[numTop++] = currentSubs[i];
-        currentSubs[i].current = term;
+        current = currentSubs[i].current = currentSubs[i].terms.term();
       } else if (status == SeekStatus.NOT_FOUND) {
         currentSubs[i].current = currentSubs[i].terms.term();
         assert currentSubs[i].current != null;
@@ -155,7 +155,6 @@ public final class MultiTermsEnum extends TermsEnum {
 
     if (numTop > 0) {
       // at least one sub had exact match to the requested term
-      current = term;
       return SeekStatus.FOUND;
     } else if (queue.size() > 0) {
       // no sub had exact match, but at least one sub found
@@ -258,26 +257,26 @@ public final class MultiTermsEnum extends TermsEnum {
         // just pull the skipDocs from the sub reader, rather
         // than making the inefficient
         // Slice(Multi(sub-readers)):
-        final MultiBits.SubResult sub = multiSkipDocs.getMatchingSub(top[i].subSlice);
+        final MultiBits.SubResult sub = multiSkipDocs.getMatchingSub(entry.subSlice);
         if (sub.matches) {
           b = sub.result;
         } else {
           // custom case: requested skip docs is foreign:
           // must slice it on every access
-          b = new BitsSlice(skipDocs, top[i].subSlice);
+          b = new BitsSlice(skipDocs, entry.subSlice);
         }
       } else if (skipDocs != null) {
-        b = new BitsSlice(skipDocs, top[i].subSlice);
+        b = new BitsSlice(skipDocs, entry.subSlice);
       } else {
         // no deletions
         b = null;
       }
 
       final DocsEnum subDocsEnum = entry.terms.docs(b, entry.reuseDocs);
-
       if (subDocsEnum != null) {
         entry.reuseDocs = subDocs[upto].docsEnum = subDocsEnum;
         subDocs[upto].slice = entry.subSlice;
+
         upto++;
       }
     }
@@ -373,6 +372,7 @@ public final class MultiTermsEnum extends TermsEnum {
     public void reset(TermsEnum terms, BytesRef term) {
       this.terms = terms;
       current = term;
+      // TODO: can we not null these?
       reuseDocs = null;
       reusePostings = null;
     }
diff --git a/lucene/src/java/org/apache/lucene/util/MultiBits.java b/lucene/src/java/org/apache/lucene/util/MultiBits.java
index 5639e49..c316988 100644
--- a/lucene/src/java/org/apache/lucene/util/MultiBits.java
+++ b/lucene/src/java/org/apache/lucene/util/MultiBits.java
@@ -60,18 +60,35 @@ public final class MultiBits implements Bits {
       return bits.get(doc-starts[reader]);
     }
   }
+  
+  @Override
+  public String toString() {
+    StringBuilder b = new StringBuilder();
+    b.append(subs.length + " subs: ");
+    for(int i=0;i<subs.length;i++) {
+      if (i != 0) {
+        b.append("; ");
+      }
+      if (subs[i] == null) {
+        b.append("s=" + starts[i] + " l=null");
+      } else {
+        b.append("s=" + starts[i] + " l=" + subs[i].length() + " b=" + subs[i]);
+      }
+    }
+    b.append(" end=" + starts[subs.length]);
+    return b.toString();
+  }
 
   public final static class SubResult {
     public boolean matches;
     public Bits result;
   }
 
-  private final SubResult subResult = new SubResult();
-
   public SubResult getMatchingSub(ReaderUtil.Slice slice) {
     int reader = ReaderUtil.subIndex(slice.start, starts);
     assert reader != -1;
     assert reader < subs.length: "slice=" + slice + " starts[-1]=" + starts[starts.length-1];
+    final SubResult subResult = new SubResult();
     if (starts[reader] == slice.start && starts[1+reader] == slice.start+slice.length) {
       subResult.matches = true;
       subResult.result = subs[reader];
diff --git a/lucene/src/java/org/apache/lucene/util/ReaderUtil.java b/lucene/src/java/org/apache/lucene/util/ReaderUtil.java
index f6ecfbb..f6e677b 100644
--- a/lucene/src/java/org/apache/lucene/util/ReaderUtil.java
+++ b/lucene/src/java/org/apache/lucene/util/ReaderUtil.java
@@ -43,7 +43,7 @@ public class ReaderUtil {
     }
 
     public String toString() {
-      return "slice start=" + start + " length=" + length;
+      return "slice start=" + start + " length=" + length + " readerIndex=" + readerIndex;
     }
   }
 
@@ -129,7 +129,7 @@ public class ReaderUtil {
       docStarts[i] = maxDoc;
       maxDoc += subReaders[i].maxDoc();
     }
-    return subReaders[ReaderUtil.subIndex(doc, docStarts)];
+    return subReaders[subIndex(doc, docStarts)];
   }
   
   /**
diff --git a/lucene/src/test/org/apache/lucene/index/TestMultiFields.java b/lucene/src/test/org/apache/lucene/index/TestMultiFields.java
new file mode 100644
index 0000000..5c670dc
--- /dev/null
+++ b/lucene/src/test/org/apache/lucene/index/TestMultiFields.java
@@ -0,0 +1,118 @@
+package org.apache.lucene.index;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.store.*;
+import org.apache.lucene.util.*;
+import org.apache.lucene.document.*;
+import org.apache.lucene.analysis.*;
+import java.util.*;
+
+public class TestMultiFields extends LuceneTestCase {
+
+  public void testRandom() throws Exception {
+
+    for(int iter=0;iter<2*_TestUtil.getRandomMultiplier();iter++) {
+      Directory dir = new MockRAMDirectory();
+      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(NoMergePolicy.COMPOUND_FILES));
+
+      Random r = new Random();
+
+      Map<BytesRef,List<Integer>> docs = new HashMap<BytesRef,List<Integer>>();
+      Set<Integer> deleted = new HashSet<Integer>();
+      List<BytesRef> terms = new ArrayList<BytesRef>();
+
+      int numDocs = r.nextInt(100*_TestUtil.getRandomMultiplier());
+      Document doc = new Document();
+      Field f = new Field("field", "", Field.Store.NO, Field.Index.NOT_ANALYZED);
+      doc.add(f);
+      Field id = new Field("id", "", Field.Store.NO, Field.Index.NOT_ANALYZED);
+      doc.add(id);
+
+      boolean onlyUniqueTerms = r.nextBoolean();
+
+      for(int i=0;i<numDocs;i++) {
+
+        if (!onlyUniqueTerms && r.nextBoolean() && terms.size() > 0) {
+          // re-use existing term
+          BytesRef term = terms.get(r.nextInt(terms.size()));
+          docs.get(term).add(i);
+          f.setValue(term.utf8ToString());
+        } else {
+          String s = _TestUtil.randomUnicodeString(r, 10);
+          BytesRef term = new BytesRef(s);
+          if (!docs.containsKey(term)) {
+            docs.put(term, new ArrayList<Integer>());
+          }
+          docs.get(term).add(i);
+          terms.add(term);
+          f.setValue(s);
+        }
+        id.setValue(""+i);
+        w.addDocument(doc);
+        if (r.nextInt(4) == 1) {
+          w.commit();
+        }
+        if (i > 0 && r.nextInt(20) == 1) {
+          int delID = r.nextInt(i);
+          deleted.add(delID);
+          w.deleteDocuments(new Term("id", ""+delID));
+        }
+      }
+
+      IndexReader reader = w.getReader();
+      w.close();
+
+      Bits delDocs = MultiFields.getDeletedDocs(reader);
+      for(int delDoc : deleted) {
+        assertTrue(delDocs.get(delDoc));
+      }
+      Terms terms2 = MultiFields.getTerms(reader, "field");
+
+      for(int i=0;i<100;i++) {
+        BytesRef term = terms.get(r.nextInt(terms.size()));
+        
+        DocsEnum docsEnum = terms2.docs(delDocs, term, null);
+        int count = 0;
+        for(int docID : docs.get(term)) {
+          if (!deleted.contains(docID)) {
+            assertEquals(docID, docsEnum.nextDoc());
+            count++;
+          }
+        }
+        //System.out.println("c=" + count + " t=" + term);
+        assertEquals(docsEnum.NO_MORE_DOCS, docsEnum.nextDoc());
+      }
+
+      reader.close();
+      dir.close();
+    }
+  }
+
+  private void verify(IndexReader r, String term, List<Integer> expected) throws Exception {
+    DocsEnum docs = MultiFields.getTermDocsEnum(r,
+                                                MultiFields.getDeletedDocs(r),
+                                                "field",
+                                                new BytesRef(term));
+
+    for(int docID : expected) {
+      assertEquals(docID, docs.nextDoc());
+    }
+    assertEquals(docs.NO_MORE_DOCS, docs.nextDoc());
+  }
+}

