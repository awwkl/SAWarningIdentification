GitDiffStart: eb1f8e2409c56a915bf8b88c19b7f6f66823a7f9 | Tue Feb 23 06:12:33 2016 +0530
diff --git a/solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner.java b/solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner.java
index f3f5b41..51d9848 100644
--- a/solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner.java
+++ b/solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner.java
@@ -189,20 +189,18 @@ public class ReplicaAssigner {
 
     for (; shardPermutations.hasNext(); ) {
       int[] p = shardPermutations.next();
-      for (int i = 0; i < p.length; i++) {
-        List<Position> positions = new ArrayList<>();
-        for (int pos : p) {
-          for (int j = 0; j < shardVsReplicaCount.get(shardNames.get(pos)); j++) {
-            positions.add(new Position(shardNames.get(pos), j));
-          }
-        }
-        Collections.sort(positions);
-        for (Iterator<int[]> it = permutations(rules.size()); it.hasNext(); ) {
-          int[] permutation = it.next();
-          Map<Position, String> result = tryAPermutationOfRules(permutation, positions, fuzzyPhase);
-          if (result != null) return result;
+      List<Position> positions = new ArrayList<>();
+      for (int pos : p) {
+        for (int j = 0; j < shardVsReplicaCount.get(shardNames.get(pos)); j++) {
+          positions.add(new Position(shardNames.get(pos), j));
         }
       }
+      Collections.sort(positions);
+      for (Iterator<int[]> it = permutations(rules.size()); it.hasNext(); ) {
+        int[] permutation = it.next();
+        Map<Position, String> result = tryAPermutationOfRules(permutation, positions, fuzzyPhase);
+        if (result != null) return result;
+      }
     }
 
     return null;

