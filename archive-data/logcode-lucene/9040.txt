GitDiffStart: 55478afcb7c0feed879179851c51f65838ee761b | Fri Mar 22 22:41:55 2013 +0000
diff --git a/lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.java b/lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.java
index 48d2601..1252c7e 100644
--- a/lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.java
+++ b/lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.java
@@ -265,14 +265,12 @@ public class TestRandomChains extends BaseTokenStreamTestCase {
     tokenfilters = new ArrayList<Constructor<? extends TokenFilter>>();
     charfilters = new ArrayList<Constructor<? extends CharFilter>>();
     for (final Class<?> c : analysisClasses) {
-      // TODO: Fix below code to use c.isAnnotationPresent(). It was changed
-      // to the null check to work around a bug in JDK 8 b78 (see LUCENE-4808).
       final int modifiers = c.getModifiers();
       if (
         // don't waste time with abstract classes or deprecated known-buggy ones
         Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)
         || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()
-        || c.getAnnotation(Deprecated.class) != null
+        || c.isAnnotationPresent(Deprecated.class)
         || !(Tokenizer.class.isAssignableFrom(c) || TokenFilter.class.isAssignableFrom(c) || CharFilter.class.isAssignableFrom(c))
       ) {
         continue;
@@ -280,7 +278,7 @@ public class TestRandomChains extends BaseTokenStreamTestCase {
       
       for (final Constructor<?> ctor : c.getConstructors()) {
         // don't test synthetic or deprecated ctors, they likely have known bugs:
-        if (ctor.isSynthetic() || ctor.getAnnotation(Deprecated.class) != null || brokenConstructors.get(ctor) == ALWAYS) {
+        if (ctor.isSynthetic() || ctor.isAnnotationPresent(Deprecated.class) || brokenConstructors.get(ctor) == ALWAYS) {
           continue;
         }
         if (Tokenizer.class.isAssignableFrom(c)) {
diff --git a/lucene/core/src/test/org/apache/lucene/util/TestVersion.java b/lucene/core/src/test/org/apache/lucene/util/TestVersion.java
index d123898..89ccf7c 100644
--- a/lucene/core/src/test/org/apache/lucene/util/TestVersion.java
+++ b/lucene/core/src/test/org/apache/lucene/util/TestVersion.java
@@ -40,12 +40,11 @@ public class TestVersion extends LuceneTestCase {
       if (i + 1 == values.length) {
         assertSame("Last constant must be LUCENE_CURRENT", Version.LUCENE_CURRENT, values[i]);
       }
-      // TODO: Use isAnnotationPresent once bug in Java 8 is fixed (LUCENE-4808)
-      final Deprecated ann = Version.class.getField(values[i].name()).getAnnotation(Deprecated.class);
+      final boolean dep = Version.class.getField(values[i].name()).isAnnotationPresent(Deprecated.class);
       if (i + 2 != values.length) {
-        assertNotNull(values[i].name() + " should be deprecated", ann);
+        assertTrue(values[i].name() + " should be deprecated", dep);
       } else {
-        assertNull(values[i].name() + " should not be deprecated", ann);
+        assertFalse(values[i].name() + " should not be deprecated", dep);
       }
     }
   }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java b/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java
index 7ae72338..fddb550 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java
@@ -131,9 +131,7 @@ final class TestRuleSetupAndRestoreClassEnv extends AbstractBeforeAfterRule {
 
     Class<?> targetClass = RandomizedContext.current().getTargetClass();
     avoidCodecs = new HashSet<String>();
-    // TODO: Fix below code to use c.isAnnotationPresent(). It was changed
-    // to the null check to work around a bug in JDK 8 b78 (see LUCENE-4808).
-    if (targetClass.getAnnotation(SuppressCodecs.class) != null) {
+    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {
       SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);
       avoidCodecs.addAll(Arrays.asList(a.value()));
     }
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.java b/solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.java
index ca84edb..b772ea0 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.java
@@ -114,9 +114,7 @@ public class DocumentObjectBinder {
     }
 
     for (AccessibleObject member : members) {
-      // TODO: Fix below code to use c.isAnnotationPresent(). It was changed
-      // to the null check to work around a bug in JDK 8 b78 (see LUCENE-4808).
-      if (member.getAnnotation(Field.class) != null) {
+      if (member.isAnnotationPresent(Field.class)) {
         member.setAccessible(true);
         fields.add(new DocField(member));
       }

