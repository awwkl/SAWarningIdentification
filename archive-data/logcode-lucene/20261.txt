GitDiffStart: 202a3311b71c2a196d1d59347f2d5450dbe21999 | Fri May 15 12:44:11 2009 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index 6a1d680..e0d048c 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -367,6 +367,9 @@ Bug Fixes
 
 45. SOLR-1078: Fixes to WordDelimiterFilter to avoid splitting or dropping
     international non-letter characters such as non spacing marks. (yonik)
+    
+46. SOLR-825: Enables highlighting for range/wildcard/fuzzy/prefix queries if using hl.usePhraseHighlighter=true
+    and hl.highlightMultiTerm=true.  (Mark Miller)
 
 
 Other Changes
diff --git a/src/common/org/apache/solr/common/params/HighlightParams.java b/src/common/org/apache/solr/common/params/HighlightParams.java
index 8435bf1..81e0119 100644
--- a/src/common/org/apache/solr/common/params/HighlightParams.java
+++ b/src/common/org/apache/solr/common/params/HighlightParams.java
@@ -35,6 +35,7 @@ public interface HighlightParams {
   public static final String ALTERNATE_FIELD_LENGTH = HIGHLIGHT+".maxAlternateFieldLength";
   
   public static final String USE_PHRASE_HIGHLIGHTER = HIGHLIGHT+".usePhraseHighlighter";
+  public static final String HIGHLIGHT_MULTI_TERM = HIGHLIGHT+".highlightMultiTerm";
 
   public static final String MERGE_CONTIGUOUS_FRAGMENTS = HIGHLIGHT + ".mergeContiguous";
   // Formatter
diff --git a/src/java/org/apache/solr/handler/component/HighlightComponent.java b/src/java/org/apache/solr/handler/component/HighlightComponent.java
index c2e206f..d1f68db 100644
--- a/src/java/org/apache/solr/handler/component/HighlightComponent.java
+++ b/src/java/org/apache/solr/handler/component/HighlightComponent.java
@@ -79,11 +79,16 @@ public class HighlightComponent extends SearchComponent
         }
       }
       
+      if(highlightQuery != null) {
+        boolean rewrite = !(Boolean.valueOf(req.getParams().get(HighlightParams.USE_PHRASE_HIGHLIGHTER)) && Boolean.valueOf(req.getParams().get(HighlightParams.HIGHLIGHT_MULTI_TERM)));
+        highlightQuery = rewrite ?  highlightQuery.rewrite(req.getSearcher().getReader()) : highlightQuery;
+      }
+      
       // No highlighting if there is no query -- consider q.alt="*:*
       if( highlightQuery != null ) {
         NamedList sumData = highlighter.doHighlighting(
                 rb.getResults().docList,
-                highlightQuery.rewrite(req.getSearcher().getReader()),
+                highlightQuery,
                 req, defaultHighlightFields );
         
         if(sumData != null) {
diff --git a/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java b/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java
index 84ac602..d64b2ee 100644
--- a/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java
+++ b/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java
@@ -131,11 +131,16 @@ public class DefaultSolrHighlighter extends SolrHighlighter
    */
   private SpanScorer getSpanQueryScorer(Query query, String fieldName, CachingTokenFilter tokenStream, SolrQueryRequest request) throws IOException {
     boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);
+    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM);
+    if(highlightMultiTerm == null) {
+      highlightMultiTerm = false;
+    }
+
     if (reqFieldMatch) {
-      return new SpanScorer(query, fieldName, tokenStream);
+      return new SpanScorer(query, fieldName, tokenStream, highlightMultiTerm);
     }
     else {
-      return new SpanScorer(query, null, tokenStream);
+      return new SpanScorer(query, null, tokenStream, highlightMultiTerm);
     }
   }
 
diff --git a/src/java/org/apache/solr/search/SolrQueryParser.java b/src/java/org/apache/solr/search/SolrQueryParser.java
index 26cd3d7..72718eb 100644
--- a/src/java/org/apache/solr/search/SolrQueryParser.java
+++ b/src/java/org/apache/solr/search/SolrQueryParser.java
@@ -142,14 +142,18 @@ public class SolrQueryParser extends QueryParser {
     // TODO: throw exception if field type doesn't support prefixes?
     // (sortable numeric types don't do prefixes, but can do range queries)
     Term t = new Term(field, termStr);
-    return new ConstantScorePrefixQuery(t);
+    PrefixQuery prefixQuery = new PrefixQuery(t);
+    prefixQuery.setConstantScoreRewrite(true);
+    return prefixQuery;
   }
 
   protected Query getWildcardQuery(String field, String termStr) throws ParseException {
     Query q = super.getWildcardQuery(field, termStr);
     if (q instanceof WildcardQuery) {
       // use a constant score query to avoid overflowing clauses
-      return new ConstantScoreQuery(new WildcardFilter(((WildcardQuery)q).getTerm()));
+      WildcardQuery wildcardQuery = new WildcardQuery(((WildcardQuery)q).getTerm());
+      wildcardQuery.setConstantScoreRewrite(true);
+      return  wildcardQuery; 
     }
     return q;
   }
diff --git a/src/test/org/apache/solr/highlight/HighlighterTest.java b/src/test/org/apache/solr/highlight/HighlighterTest.java
index c3997c4..97a5b30 100755
--- a/src/test/org/apache/solr/highlight/HighlighterTest.java
+++ b/src/test/org/apache/solr/highlight/HighlighterTest.java
@@ -672,4 +672,50 @@ public class HighlighterTest extends AbstractSolrTestCase {
     assertEquals("Expected to highlight on field \"foo_s\"", "foo_s",
         highlightFieldNames.get(0));
   }
+
+  public void testDefaultFieldPrefixWildcardHighlight() {
+
+    // do summarization using re-analysis of the field
+    HashMap<String,String> args = new HashMap<String,String>();
+    args.put("hl", "true");
+    args.put("df", "t_text");
+    args.put("hl.fl", "");
+    args.put("hl.usePhraseHighlighter", "true");
+    args.put("hl.highlightMultiTerm", "true");
+    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(
+      "standard", 0, 200, args);
+    
+    assertU(adoc("t_text", "a long day's night", "id", "1"));
+    assertU(commit());
+    assertU(optimize());
+    assertQ("Basic summarization",
+            sumLRF.makeRequest("lon*"),
+            "//lst[@name='highlighting']/lst[@name='1']",
+            "//lst[@name='1']/arr[@name='t_text']/str"
+            );
+
+  }
+
+  public void testDefaultFieldNonPrefixWildcardHighlight() {
+
+    // do summarization using re-analysis of the field
+    HashMap<String,String> args = new HashMap<String,String>();
+    args.put("hl", "true");
+    args.put("df", "t_text");
+    args.put("hl.fl", "");
+    args.put("hl.usePhraseHighlighter", "true");
+    args.put("hl.highlightMultiTerm", "true");
+    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(
+      "standard", 0, 200, args);
+    
+    assertU(adoc("t_text", "a long day's night", "id", "1"));
+    assertU(commit());
+    assertU(optimize());
+    assertQ("Basic summarization",
+            sumLRF.makeRequest("l*g"),
+            "//lst[@name='highlighting']/lst[@name='1']",
+            "//lst[@name='1']/arr[@name='t_text']/str"
+            );
+
+  }
 }

