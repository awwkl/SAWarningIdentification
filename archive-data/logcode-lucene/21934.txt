GitDiffStart: be28a247ec528dfdb0d8f922b38f60ffcdf4d1da | Wed Jan 9 15:14:09 2008 +0000
diff --git a/client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser.java b/client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser.java
index dc8b64b..f17c214 100644
--- a/client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser.java
+++ b/client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser.java
@@ -313,10 +313,10 @@ public class XMLResponseParser implements ResponseParser
       String n = parser.getAttributeLocalName( i );
       String v = parser.getAttributeValue( i );
       if( "numFound".equals( n ) ) {
-        docs.setNumFound( Integer.parseInt( v ) );
+        docs.setNumFound( Long.parseLong( v ) );
       }
       else if( "start".equals( n ) ) {
-        docs.setStart( Integer.parseInt( v ) );
+        docs.setStart( Long.parseLong( v ) );
       }
       else if( "maxScore".equals( n ) ) {
         docs.setMaxScore( Float.parseFloat( v ) );
diff --git a/client/java/solrj/src/org/apache/solr/client/solrj/response/FacetField.java b/client/java/solrj/src/org/apache/solr/client/solrj/response/FacetField.java
index c784afc..42ec2ab 100644
--- a/client/java/solrj/src/org/apache/solr/client/solrj/response/FacetField.java
+++ b/client/java/solrj/src/org/apache/solr/client/solrj/response/FacetField.java
@@ -35,11 +35,11 @@ import org.apache.solr.client.solrj.util.ClientUtils;
    public static class Count implements Serializable 
    {
      private String _name = null;
-     private int _count = 0;
+     private long _count = 0;
      // hang onto the FacetField for breadcrumb creation convenience
      private FacetField _ff = null;
      
-     public Count( FacetField ff, String n, int c )
+     public Count( FacetField ff, String n, long c )
      {
        _name = n;
        _count = c;
@@ -55,11 +55,11 @@ import org.apache.solr.client.solrj.util.ClientUtils;
        _name = n;
      }
 
-     public int getCount() {
+     public long getCount() {
        return _count;
      }
      
-     public void setCount( int c )
+     public void setCount( long c )
      {
        _count = c;
      }
@@ -95,7 +95,7 @@ import org.apache.solr.client.solrj.util.ClientUtils;
    /**
     * Insert at the end of the list
     */
-   public void add( String name, int cnt )
+   public void add( String name, long cnt )
    {
      if( _values == null ) {
        _values = new ArrayList<Count>( 30 );
@@ -106,7 +106,7 @@ import org.apache.solr.client.solrj.util.ClientUtils;
    /**
     * Insert at the beginning of the list.
     */
-   public void insert( String name, int cnt )
+   public void insert( String name, long cnt )
    {
      if( _values == null ) {
        _values = new ArrayList<Count>( 30 );
@@ -127,7 +127,7 @@ import org.apache.solr.client.solrj.util.ClientUtils;
      return _values == null ? 0 : _values.size();
    }
 
-   public FacetField getLimitingFields(int max) 
+   public FacetField getLimitingFields(long max) 
    {
      FacetField ff = new FacetField( _name );
      if( _values != null ) {
diff --git a/client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse.java b/client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse.java
index 8471d29..d754e29 100644
--- a/client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse.java
+++ b/client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse.java
@@ -135,16 +135,17 @@ public class QueryResponse extends SolrResponseBase
     }
     
     // Parse the facet info into fields
-    NamedList<NamedList<Integer>> ff = (NamedList<NamedList<Integer>>) info.get( "facet_fields" );
+    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>
+    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( "facet_fields" );
     if( ff != null ) {
       _facetFields = new ArrayList<FacetField>( ff.size() );
       _limitingFacets = new ArrayList<FacetField>( ff.size() );
       
-      int minsize = _results.getNumFound();
-      for( Map.Entry<String,NamedList<Integer>> facet : ff ) {
+      long minsize = _results.getNumFound();
+      for( Map.Entry<String,NamedList<Number>> facet : ff ) {
         FacetField f = new FacetField( facet.getKey() );
-        for( Map.Entry<String, Integer> entry : facet.getValue() ) {
-          f.add( entry.getKey(), entry.getValue() );
+        for( Map.Entry<String, Number> entry : facet.getValue() ) {
+          f.add( entry.getKey(), entry.getValue().longValue() );
         }
         
         _facetFields.add( f );
diff --git a/src/java/org/apache/solr/common/SolrDocumentList.java b/src/java/org/apache/solr/common/SolrDocumentList.java
index 2f05029..715518f 100644
--- a/src/java/org/apache/solr/common/SolrDocumentList.java
+++ b/src/java/org/apache/solr/common/SolrDocumentList.java
@@ -29,8 +29,8 @@ import java.util.ArrayList;
  */
 public class SolrDocumentList extends ArrayList<SolrDocument>
 { 
-  private int numFound = 0;
-  private int start = 0;
+  private long numFound = 0;
+  private long start = 0;
   private Float maxScore = null;
   
   public Float getMaxScore() {
@@ -41,19 +41,19 @@ public class SolrDocumentList extends ArrayList<SolrDocument>
     this.maxScore = maxScore;
   }
   
-  public int getNumFound() {
+  public long getNumFound() {
     return numFound;
   }
   
-  public void setNumFound(int numFound) {
+  public void setNumFound(long numFound) {
     this.numFound = numFound;
   }
   
-  public int getStart() {
+  public long getStart() {
     return start;
   }
   
-  public void setStart(int start) {
+  public void setStart(long start) {
     this.start = start;
   }
 }
diff --git a/src/java/org/apache/solr/request/JSONResponseWriter.java b/src/java/org/apache/solr/request/JSONResponseWriter.java
index 5097e68..b015630 100644
--- a/src/java/org/apache/solr/request/JSONResponseWriter.java
+++ b/src/java/org/apache/solr/request/JSONResponseWriter.java
@@ -516,10 +516,10 @@ class JSONWriter extends TextResponseWriter {
     writeMapOpener(includeScore ? 4 : 3);
     incLevel();
     writeKey("numFound",false);
-    writeInt(null,docs.getNumFound());
+    writeLong(null,docs.getNumFound());
     writeMapSeparator();
     writeKey("start",false);
-    writeInt(null,docs.getStart());
+    writeLong(null,docs.getStart());
 
     if (includeScore) {
       writeMapSeparator();
diff --git a/src/java/org/apache/solr/request/XMLWriter.java b/src/java/org/apache/solr/request/XMLWriter.java
index e3ef1aa..ecd18c1 100644
--- a/src/java/org/apache/solr/request/XMLWriter.java
+++ b/src/java/org/apache/solr/request/XMLWriter.java
@@ -375,8 +375,8 @@ final public class XMLWriter {
   private static interface DocumentListInfo {
     Float getMaxScore();
     int getCount();
-    int getNumFound();
-    int getStart();
+    long getNumFound();
+    long getStart();
     void writeDocs( boolean includeScore, Set<String> fields ) throws IOException;
   }
 
@@ -398,8 +398,8 @@ final public class XMLWriter {
     
     writer.write("<result");
     writeAttr("name",name);
-    writeAttr("numFound",Integer.toString(docs.getNumFound()));  // TODO: change to long
-    writeAttr("start",Integer.toString(docs.getStart()));        // TODO: change to long
+    writeAttr("numFound",Long.toString(docs.getNumFound()));  // TODO: change to long
+    writeAttr("start",Long.toString(docs.getStart()));        // TODO: change to long
     if (includeScore && docs.getMaxScore()!=null) {
       writeAttr("maxScore",Float.toString(docs.getMaxScore()));
     }
@@ -430,11 +430,11 @@ final public class XMLWriter {
         return docs.getMaxScore();
       }
 
-      public int getNumFound() {
+      public long getNumFound() {
         return docs.getNumFound();
       }
 
-      public int getStart() {
+      public long getStart() {
         return docs.getStart();
       }
 
@@ -458,11 +458,11 @@ final public class XMLWriter {
         return ids.maxScore();
       }
 
-      public int getNumFound() {
+      public long getNumFound() {
         return ids.matches();
       }
 
-      public int getStart() {
+      public long getStart() {
         return ids.offset();
       }
 

