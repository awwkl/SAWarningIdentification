GitDiffStart: 1c1c2a57cd7e3f4e638b1ef5dfae644a6cec8426 | Thu Jan 8 11:06:37 2015 +0000
diff --git a/solr/core/src/java/org/apache/solr/handler/BlobHandler.java b/solr/core/src/java/org/apache/solr/handler/BlobHandler.java
index b8e0f91..e5dfe6b 100644
--- a/solr/core/src/java/org/apache/solr/handler/BlobHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/BlobHandler.java
@@ -86,10 +86,12 @@ public class BlobHandler extends RequestHandlerBase  implements PluginInfoInitia
       }
       String err = SolrConfigHandler.validateName(blobName);
       if(err!=null){
+        log.warn("no blob name");
         rsp.add("error", err);
         return;
       }
       if(req.getContentStreams() == null )  {
+        log.warn("no content stream");
         rsp.add("error","No stream");
         return;
       }
@@ -109,6 +111,7 @@ public class BlobHandler extends RequestHandlerBase  implements PluginInfoInitia
               "q", "md5:" + md5,
               "fl", "id,size,version,timestamp,blobName")),
               rsp);
+          log.warn("duplicate entry for blob :"+blobName);
           return;
         }
 
@@ -123,7 +126,8 @@ public class BlobHandler extends RequestHandlerBase  implements PluginInfoInitia
         }
         version++;
         String id = blobName+"/"+version;
-        indexMap(req, makeMap(
+        log.info(MessageFormat.format("New blob inserting {0} ,size {1}, md5 {2}",id, payload.limit(),md5));
+        indexMap(req, rsp, makeMap(
             "id", id,
             "md5", md5,
             "blobName", blobName,
@@ -131,6 +135,8 @@ public class BlobHandler extends RequestHandlerBase  implements PluginInfoInitia
             "timestamp", new Date(),
             "size", payload.limit(),
             "blob", payload));
+        log.info(" Successfully Added and committed a blob with id {} and size {} ",id, payload.limit());
+
         break;
       }
 
@@ -188,24 +194,25 @@ public class BlobHandler extends RequestHandlerBase  implements PluginInfoInitia
 
         req.forward(null,
             new MapSolrParams((Map) makeMap(
-                "q", MessageFormat.format(q,blobName,version),
+                "q", MessageFormat.format(q, blobName, version),
                 "fl", "id,size,version,timestamp,blobName,md5",
                 "sort", "version desc"))
-            ,rsp);
+            , rsp);
       }
     }
   }
 
-  public static void indexMap(SolrQueryRequest req, Map<String, Object> doc) throws IOException {
+  public static void indexMap(SolrQueryRequest req, SolrQueryResponse rsp, Map<String, Object> doc) throws IOException {
     SolrInputDocument solrDoc = new SolrInputDocument();
     for (Map.Entry<String, Object> e : doc.entrySet()) solrDoc.addField(e.getKey(),e.getValue());
     UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(req.getParams().get(UpdateParams.UPDATE_CHAIN));
-    UpdateRequestProcessor processor = processorChain.createProcessor(req,null);
+    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);
     AddUpdateCommand cmd = new AddUpdateCommand(req);
     cmd.solrDoc = solrDoc;
+    log.info("Adding doc "+doc);
     processor.processAdd(cmd);
-    processorChain.createProcessor(req,null).processCommit(new CommitUpdateCommand(req,false));
-
+    log.info("committing doc"+doc);
+    processor.processCommit(new CommitUpdateCommand(req, false));
   }
 
   @Override
diff --git a/solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java b/solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java
index 7e85b7b..b7d91d0 100644
--- a/solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java
+++ b/solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java
@@ -46,6 +46,7 @@ import java.io.IOException;
 import java.io.StringReader;
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
+import java.text.MessageFormat;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
@@ -128,8 +129,9 @@ public class TestBlobHandler extends AbstractFullDistribZkTestBase {
     String url;
     Map map = null;
     List l;
-
-    for(int i=0;i<100;i++) {//10secs
+    long start = System.currentTimeMillis();
+    int i=0;
+    for(;i<150;i++) {//10secs
       url = baseUrl + "/.system/blob/test";
       map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);
       String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList("response", "numFound")));
@@ -143,7 +145,8 @@ public class TestBlobHandler extends AbstractFullDistribZkTestBase {
       assertEquals("" + bytes.limit(), String.valueOf(map.get("size")));
       return;
     }
-    fail("Could not successfully add blob " + getAsString(map));
+    fail(MessageFormat.format("Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}",
+        i,count, System.currentTimeMillis()-start,  getAsString(map)));
   }
 
   public static String getAsString(Map map) {

