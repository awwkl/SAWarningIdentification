GitDiffStart: 106d6b92ef61d83aa66004a6158d736e6c88893f | Mon Jun 15 21:34:41 2015 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 0173c45..c15f4d3 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -132,6 +132,11 @@ Bug fixes
 * LUCENE-6560: BKDPointInBBoxQuery now handles "dateline crossing"
   correctly (Nick Knize, Mike McCandless)
 
+* LUCENE-6564: Change PrintStreamInfoStream to use thread safe Java 8
+  ISO-8601 date formatting (in Lucene 5.x use Java 7 FileTime#toString
+  as workaround); fix output of tests to use same format.  (Uwe Schindler,
+  Ramkumar Aiyengar)
+
 Changes in Runtime Behavior
 
 * LUCENE-6501: The subreader structure in ParallelCompositeReader
diff --git a/lucene/core/src/java/org/apache/lucene/util/PrintStreamInfoStream.java b/lucene/core/src/java/org/apache/lucene/util/PrintStreamInfoStream.java
index cc03d43..c197d97 100644
--- a/lucene/core/src/java/org/apache/lucene/util/PrintStreamInfoStream.java
+++ b/lucene/core/src/java/org/apache/lucene/util/PrintStreamInfoStream.java
@@ -19,10 +19,7 @@ package org.apache.lucene.util;
 
 import java.io.IOException;
 import java.io.PrintStream;
-import java.text.DateFormat;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Locale;
+import java.time.Instant;
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
@@ -36,8 +33,6 @@ public class PrintStreamInfoStream extends InfoStream {
   private static final AtomicInteger MESSAGE_ID = new AtomicInteger();
   protected final int messageID;
 
-  private static final DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS", Locale.ROOT);
-  
   protected final PrintStream stream;
   
   public PrintStreamInfoStream(PrintStream stream) {
@@ -51,7 +46,7 @@ public class PrintStreamInfoStream extends InfoStream {
   
   @Override
   public void message(String component, String message) {
-    stream.println(component + " " + messageID + " [" + dateFormat.format(new Date()) + "; " + Thread.currentThread().getName() + "]: " + message);    
+    stream.println(component + " " + messageID + " [" + getTimestamp() + "; " + Thread.currentThread().getName() + "]: " + message);    
   }
 
   @Override
@@ -70,4 +65,9 @@ public class PrintStreamInfoStream extends InfoStream {
   public boolean isSystemStream() {
     return stream == System.out || stream == System.err;
   }
+  
+  /** Returns the current time as string for insertion into log messages. */
+  protected String getTimestamp() {
+    return Instant.now().toString();
+  }  
 }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java b/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java
index 03f5afb..7b9a9bc 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java
@@ -19,11 +19,9 @@ package org.apache.lucene.util;
 
 import java.io.PrintStream;
 import java.util.Arrays;
-import java.util.Date;
 import java.util.HashSet;
 import java.util.Locale;
 import java.util.Random;
-import java.util.Set;
 import java.util.TimeZone;
 
 import org.apache.lucene.codecs.Codec;
@@ -99,7 +97,7 @@ final class TestRuleSetupAndRestoreClassEnv extends AbstractBeforeAfterRule {
       } else {
         name = Thread.currentThread().getName();
       }
-      stream.println(component + " " + messageID + " [" + new Date() + "; " + name + "]: " + message);    
+      stream.println(component + " " + messageID + " [" + getTimestamp() + "; " + name + "]: " + message);    
     }
   }
 

