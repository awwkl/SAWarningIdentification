GitDiffStart: 7bd8188ba606fb446ed900e2a2d928c86a192779 | Mon Jun 14 00:16:06 2004 +0000
diff --git a/src/java/org/apache/lucene/index/FilterIndexReader.java b/src/java/org/apache/lucene/index/FilterIndexReader.java
index 32ea1d1..61c5de8 100644
--- a/src/java/org/apache/lucene/index/FilterIndexReader.java
+++ b/src/java/org/apache/lucene/index/FilterIndexReader.java
@@ -39,7 +39,7 @@ public class FilterIndexReader extends IndexReader {
     public FilterTermDocs(TermDocs in) { this.in = in; }
 
     public void seek(Term term) throws IOException { in.seek(term); }
-    public void seek(TermEnum enum) throws IOException { in.seek(enum); }
+    public void seek(TermEnum termEnum) throws IOException { in.seek(termEnum); }
     public int doc() { return in.doc(); }
     public int freq() { return in.freq(); }
     public boolean next() throws IOException { return in.next(); }
diff --git a/src/java/org/apache/lucene/index/SegmentTermDocs.java b/src/java/org/apache/lucene/index/SegmentTermDocs.java
index eba5bcb..a66213c 100644
--- a/src/java/org/apache/lucene/index/SegmentTermDocs.java
+++ b/src/java/org/apache/lucene/index/SegmentTermDocs.java
@@ -52,14 +52,14 @@ class SegmentTermDocs implements TermDocs {
     seek(ti);
   }
 
-  public void seek(TermEnum enum) throws IOException {
+  public void seek(TermEnum termEnum) throws IOException {
     TermInfo ti;
     
-    // use comparison of fieldinfos to verify that enum belongs to the same segment as this SegmentTermDocs
-    if (enum instanceof SegmentTermEnum && ((SegmentTermEnum) enum).fieldInfos == parent.fieldInfos)          // optimized case
-      ti = ((SegmentTermEnum) enum).termInfo();
+    // use comparison of fieldinfos to verify that termEnum belongs to the same segment as this SegmentTermDocs
+    if (termEnum instanceof SegmentTermEnum && ((SegmentTermEnum) termEnum).fieldInfos == parent.fieldInfos)          // optimized case
+      ti = ((SegmentTermEnum) termEnum).termInfo();
     else                                          // punt case
-      ti = parent.tis.get(enum.term());
+      ti = parent.tis.get(termEnum.term());
       
     seek(ti);
   }
diff --git a/src/java/org/apache/lucene/index/TermInfosReader.java b/src/java/org/apache/lucene/index/TermInfosReader.java
index 07dd778..3f7fc2e 100644
--- a/src/java/org/apache/lucene/index/TermInfosReader.java
+++ b/src/java/org/apache/lucene/index/TermInfosReader.java
@@ -60,12 +60,12 @@ final class TermInfosReader {
   }
 
   private SegmentTermEnum getEnum() {
-    SegmentTermEnum enum = (SegmentTermEnum)enumerators.get();
-    if (enum == null) {
-      enum = terms();
-      enumerators.set(enum);
+    SegmentTermEnum termEnum = (SegmentTermEnum)enumerators.get();
+    if (termEnum == null) {
+      termEnum = terms();
+      enumerators.set(termEnum);
     }
-    return enum;
+    return termEnum;
   }
 
   Term[] indexTerms = null;
diff --git a/src/test/org/apache/lucene/index/TestFilterIndexReader.java b/src/test/org/apache/lucene/index/TestFilterIndexReader.java
index ccc4cb2..aff30ce 100644
--- a/src/test/org/apache/lucene/index/TestFilterIndexReader.java
+++ b/src/test/org/apache/lucene/index/TestFilterIndexReader.java
@@ -43,9 +43,9 @@ public class TestFilterIndexReader extends TestCase {
 
      /** Filter that only permits terms containing 'e'.*/
     private static class TestTermEnum extends FilterTermEnum {
-      public TestTermEnum(TermEnum enum)
+      public TestTermEnum(TermEnum termEnum)
         throws IOException {
-        super(enum);
+        super(termEnum);
       }
 
       /** Scan for terms containing the letter 'e'.*/
diff --git a/src/test/org/apache/lucene/index/TestSegmentTermEnum.java b/src/test/org/apache/lucene/index/TestSegmentTermEnum.java
index 5df527b..1985d3b 100644
--- a/src/test/org/apache/lucene/index/TestSegmentTermEnum.java
+++ b/src/test/org/apache/lucene/index/TestSegmentTermEnum.java
@@ -63,36 +63,36 @@ public class TestSegmentTermEnum extends TestCase
       throws IOException
   {
       IndexReader reader = IndexReader.open(dir);
-      TermEnum enum = null;
+      TermEnum termEnum = null;
 
     // create enumeration of all terms
-    enum = reader.terms();
+    termEnum = reader.terms();
     // go to the first term (aaa)
-    enum.next();
+    termEnum.next();
     // assert that term is 'aaa'
-    assertEquals("aaa", enum.term().text());
-    assertEquals(200, enum.docFreq());
+    assertEquals("aaa", termEnum.term().text());
+    assertEquals(200, termEnum.docFreq());
     // go to the second term (bbb)
-    enum.next();
+    termEnum.next();
     // assert that term is 'bbb'
-    assertEquals("bbb", enum.term().text());
-    assertEquals(100, enum.docFreq());
+    assertEquals("bbb", termEnum.term().text());
+    assertEquals(100, termEnum.docFreq());
 
-    enum.close();
+    termEnum.close();
 
 
     // create enumeration of terms after term 'aaa', including 'aaa'
-    enum = reader.terms(new Term("content", "aaa"));
+    termEnum = reader.terms(new Term("content", "aaa"));
     // assert that term is 'aaa'
-    assertEquals("aaa", enum.term().text());
-    assertEquals(200, enum.docFreq());
+    assertEquals("aaa", termEnum.term().text());
+    assertEquals(200, termEnum.docFreq());
     // go to term 'bbb'
-    enum.next();
+    termEnum.next();
     // assert that term is 'bbb'
-    assertEquals("bbb", enum.term().text());
-    assertEquals(100, enum.docFreq());
+    assertEquals("bbb", termEnum.term().text());
+    assertEquals(100, termEnum.docFreq());
 
-    enum.close();
+    termEnum.close();
   }
 
   private void addDoc(IndexWriter writer, String value)
diff --git a/src/test/org/apache/lucene/index/store/FSDirectoryTestCase.java b/src/test/org/apache/lucene/index/store/FSDirectoryTestCase.java
new file mode 100644
index 0000000..04572e8
--- /dev/null
+++ b/src/test/org/apache/lucene/index/store/FSDirectoryTestCase.java
@@ -0,0 +1,21 @@
+package org.apache.lucene.index.store;
+
+import junit.framework.TestCase;
+import org.apache.lucene.store.FSDirectory;
+import java.io.IOException;
+
+abstract public class FSDirectoryTestCase extends TestCase {
+  private FSDirectory directory;
+
+  protected final FSDirectory getDirectory() throws IOException {
+    return getDirectory(false);
+  }
+
+  protected final FSDirectory getDirectory(boolean create) throws IOException {
+    if (directory == null) {
+      directory = FSDirectory.getDirectory(System.getProperty("test.index.dir"), create);
+    }
+
+    return directory;
+  }
+}

