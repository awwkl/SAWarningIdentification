GitDiffStart: 4f13f01a59d4e33c4b735b336ac0d5d29c5f4c17 | Thu Aug 14 21:04:05 2008 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index 8aeb99b..422e258 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -534,6 +534,8 @@ Bug Fixes
 
 48. SOLR-606: Fixed spell check collation offset issue. (Stefan Oestreicher , Geoffrey Young, gsingers)
 
+49. SOLR-589: Improved handling of badly formated query strings (Sean Timm via Otis Gospodnetic)
+
 Other Changes
  1. SOLR-135: Moved common classes to org.apache.solr.common and altered the
     build scripts to make two jars: apache-solr-1.3.jar and 
diff --git a/src/java/org/apache/solr/search/DisMaxQParserPlugin.java b/src/java/org/apache/solr/search/DisMaxQParserPlugin.java
index eab4292..abb6b50 100755
--- a/src/java/org/apache/solr/search/DisMaxQParserPlugin.java
+++ b/src/java/org/apache/solr/search/DisMaxQParserPlugin.java
@@ -142,6 +142,7 @@ class DismaxQParser extends QParser {
     else {
       // There is a valid query string
       userQuery = U.partialEscape(U.stripUnbalancedQuotes(userQuery)).toString();
+      userQuery = U.stripIllegalOperators(userQuery).toString();
 
       String minShouldMatch = solrParams.get(DMP.MM, "100%");
       Query dis = up.parse(userQuery);
diff --git a/src/java/org/apache/solr/util/SolrPluginUtils.java b/src/java/org/apache/solr/util/SolrPluginUtils.java
index 081fa16..c0b5b0b 100644
--- a/src/java/org/apache/solr/util/SolrPluginUtils.java
+++ b/src/java/org/apache/solr/util/SolrPluginUtils.java
@@ -41,6 +41,7 @@ import java.io.IOException;
 import java.util.*;
 import java.util.logging.Level;
 import java.util.regex.Pattern;
+import java.util.regex.Matcher;
     
 /**
  * <p>Utilities that may be of use to RequestHandlers.</p>
@@ -673,6 +674,23 @@ public class SolrPluginUtils {
     return sb;
   }
 
+  // Pattern to detect dangling operator(s) at end of query
+  // \s+[-+\s]+$
+  private final static Pattern DANGLING_OP_PATTERN = Pattern.compile( "\\s+[-+\\s]+$" );
+  // Pattern to detect consecutive + and/or - operators
+  // \s+[+-](?:\s*[+-]+)+
+  private final static Pattern CONSECUTIVE_OP_PATTERN = Pattern.compile( "\\s+[+-](?:\\s*[+-]+)+" );    
+
+  /**
+   * Strips operators that are used illegally, otherwise reuturns it's
+   * input.  Some examples of illegal user queries are: "chocolate +-
+   * chip", "chocolate - - chip", and "chocolate chip -".
+   */
+  public static CharSequence stripIllegalOperators(CharSequence s) {
+    String temp = CONSECUTIVE_OP_PATTERN.matcher( s ).replaceAll( " " );
+    return DANGLING_OP_PATTERN.matcher( temp ).replaceAll( "" );
+  }
+
   /**
    * Returns it's input if there is an even (ie: balanced) number of
    * '"' characters -- otherwise returns a String in which all '"'
diff --git a/src/test/org/apache/solr/util/SolrPluginUtilsTest.java b/src/test/org/apache/solr/util/SolrPluginUtilsTest.java
index e9900cf..4bbc2fd 100644
--- a/src/test/org/apache/solr/util/SolrPluginUtilsTest.java
+++ b/src/test/org/apache/solr/util/SolrPluginUtilsTest.java
@@ -66,6 +66,24 @@ public class SolrPluginUtilsTest extends AbstractSolrTestCase {
         
   }
 
+  public void testStripIllegalOperators() {
+
+    assertEquals("",stripOp(""));
+    assertEquals("foo",stripOp("foo"));
+    assertEquals("foo -bar",stripOp("foo -bar"));
+    assertEquals("foo +bar",stripOp("foo +bar"));
+    assertEquals("foo + bar",stripOp("foo + bar"));
+    assertEquals("foo+ bar",stripOp("foo+ bar"));
+    assertEquals("foo+ bar",stripOp("foo+ bar"));
+    assertEquals("foo+",stripOp("foo+"));
+    assertEquals("foo bar",stripOp("foo bar -"));
+    assertEquals("foo bar ",stripOp("foo bar - + ++"));
+    assertEquals("foo bar",stripOp("foo --bar"));
+    assertEquals("foo bar ",stripOp("foo -------------------------------------------------------------------------------------------------------------------------bar --"));
+    assertEquals("foo bar ",stripOp("foo --bar -----------------------------------------------------------------------------------------------------------------------"));
+
+  }
+
   public void testParseFieldBoosts() throws Exception {
 
     Map<String,Float> e1 = new HashMap<String,Float>();
@@ -316,6 +334,11 @@ public class SolrPluginUtilsTest extends AbstractSolrTestCase {
   }
    
   /** macro */
+  public String stripOp(CharSequence s) {
+    return SolrPluginUtils.stripIllegalOperators(s).toString();
+  }
+   
+  /** macro */
   public int calcMSM(int clauses, String spec) {
     return SolrPluginUtils.calculateMinShouldMatch(clauses, spec);
   }

