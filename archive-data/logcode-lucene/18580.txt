GitDiffStart: 709c7f8b98f1266bd38beb8df0f8863083c85387 | Thu Dec 24 19:56:40 2009 +0000
diff --git a/src/java/org/apache/solr/schema/PointType.java b/src/java/org/apache/solr/schema/PointType.java
index bb74a04..e7cf85b 100644
--- a/src/java/org/apache/solr/schema/PointType.java
+++ b/src/java/org/apache/solr/schema/PointType.java
@@ -258,15 +258,12 @@ public class PointType extends CoordinateFieldType {
 
       if (dimension != that.dimension) return false;
       if (!field.equals(that.field)) return false;
-      if (!subType.equals(that.subType)) return false;
-
       return true;
     }
 
     @Override
     public int hashCode() {
       int result = field.hashCode();
-      result = 31 * result + subType.hashCode();
       result = 31 * result + dimension;
       return result;
     }
diff --git a/src/java/org/apache/solr/schema/SchemaField.java b/src/java/org/apache/solr/schema/SchemaField.java
index 3e3d1e2..8acd41e 100644
--- a/src/java/org/apache/solr/schema/SchemaField.java
+++ b/src/java/org/apache/solr/schema/SchemaField.java
@@ -209,6 +209,16 @@ public final class SchemaField extends FieldProperties {
   public String getDefaultValue() {
     return defaultValue;
   }
+
+  @Override
+  public int hashCode() {
+    return name.hashCode();
+  }
+
+  @Override
+  public boolean equals(Object obj) {
+    return(obj instanceof SchemaField) && name.equals(((SchemaField)obj).name);
+  }
 }
 
 
diff --git a/src/test/org/apache/solr/schema/PolyFieldTest.java b/src/test/org/apache/solr/schema/PolyFieldTest.java
index 4bedcaf..b67c2b3 100644
--- a/src/test/org/apache/solr/schema/PolyFieldTest.java
+++ b/src/test/org/apache/solr/schema/PolyFieldTest.java
@@ -27,6 +27,7 @@ import org.apache.lucene.index.IndexReader;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.util.AbstractSolrTestCase;
 import org.apache.solr.common.SolrException;
+import org.apache.solr.search.function.ValueSource;
 
 import java.util.Map;
 import java.util.Random;
@@ -118,6 +119,14 @@ public class PolyFieldTest extends AbstractSolrTestCase {
     } catch (Exception e) {
       //
     }
+
+    //
+    SchemaField s1 = schema.getField("test_p");
+    SchemaField s2 = schema.getField("test_p");
+    ValueSource v1 = s1.getType().getValueSource(s1,null);
+    ValueSource v2 = s2.getType().getValueSource(s2,null);
+    assertEquals(v1,v2);
+    assertEquals(v1.hashCode(),v2.hashCode());
   }
 
   public void testSearching() throws Exception {
@@ -125,11 +134,7 @@ public class PolyFieldTest extends AbstractSolrTestCase {
       assertU(adoc("id", "" + i, "home", i + "," + (i * 100), "homed", (i * 1000) + "," + (i * 10000)));
     }
     assertU(commit());
-    IndexReader reader = h.getCore().getSearcher().get().getReader();
-    /*for (int i = 0; i < 50; i++){
-      Document doc = reader.document(i);
-      System.out.println("Doc: " + doc.get("homed_0___double"));
-    }*/
+
     assertQ(req("fl", "*,score", "q", "*:*"), "//*[@numFound='50']");
     assertQ(req("fl", "*,score", "q", "home:1,100"),
             "//*[@numFound='1']",
diff --git a/src/test/test-files/solr/conf/schema.xml b/src/test/test-files/solr/conf/schema.xml
index e352422..ff0408c 100644
--- a/src/test/test-files/solr/conf/schema.xml
+++ b/src/test/test-files/solr/conf/schema.xml
@@ -520,6 +520,8 @@
    <dynamicField name="tv_mv_*"  type="text" indexed="true"  stored="true" multiValued="true"
       termVectors="true" termPositions="true" termOffsets="true"/>
 
+   <dynamicField name="*_p"  type="xyd" indexed="true"  stored="true" multiValued="false"/> 
+
    <!-- special fields for dynamic copyField test -->
    <dynamicField name="dynamic_*" type="string" indexed="true" stored="true"/>
    <dynamicField name="*_dynamic" type="string" indexed="true" stored="true"/>

