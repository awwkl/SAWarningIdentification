GitDiffStart: 2d7f82678188688091cfa962b6e8992cb15f7d86 | Tue Dec 14 15:41:38 2010 +0000
diff --git a/solr/src/test/org/apache/solr/BaseDistributedSearchTestCase.java b/solr/src/test/org/apache/solr/BaseDistributedSearchTestCase.java
index 056f349..945d54d 100644
--- a/solr/src/test/org/apache/solr/BaseDistributedSearchTestCase.java
+++ b/solr/src/test/org/apache/solr/BaseDistributedSearchTestCase.java
@@ -37,7 +37,7 @@ import org.slf4j.LoggerFactory;
  * @since solr 1.5
  */
 public abstract class BaseDistributedSearchTestCase extends SolrTestCaseJ4 {
-  public static Random r = new Random(0);
+  public static Random r = random;
 
   protected int shardCount = 4;
   /**
@@ -581,7 +581,7 @@ public abstract class BaseDistributedSearchTestCase extends SolrTestCaseJ4 {
   }
 
   public static abstract class RandVal {
-    public static Random r = new Random();
+    public static Random r = random;
     public static Set uniqueValues = new HashSet();
 
     public abstract Object val();
diff --git a/solr/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest.java b/solr/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest.java
index 8c7bcfb..fc11474 100644
--- a/solr/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest.java
+++ b/solr/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest.java
@@ -56,7 +56,7 @@ public class JettyWebappTest extends LuceneTestCase
 
     server = new Server(port);
     // insecure: only use for tests!!!!
-    server.setSessionIdManager(new HashSessionIdManager(new Random()));
+    server.setSessionIdManager(new HashSessionIdManager(new Random(random.nextLong())));
     new WebAppContext(server, path, context );
 
     SocketConnector connector = new SocketConnector();
diff --git a/solr/src/test/org/apache/solr/common/util/TestHash.java b/solr/src/test/org/apache/solr/common/util/TestHash.java
index 6cae6aa..8c225fc 100755
--- a/solr/src/test/org/apache/solr/common/util/TestHash.java
+++ b/solr/src/test/org/apache/solr/common/util/TestHash.java
@@ -73,7 +73,7 @@ public class TestHash extends LuceneTestCase {
 
 
   public void testHash() {
-    Random r = new Random(0);
+    Random r = random;
     int[] utf32 = new int[20];
     tstEquiv(utf32,0);
 
diff --git a/solr/src/test/org/apache/solr/common/util/TestNamedListCodec.java b/solr/src/test/org/apache/solr/common/util/TestNamedListCodec.java
index 0d95d9c..70b31a0 100755
--- a/solr/src/test/org/apache/solr/common/util/TestNamedListCodec.java
+++ b/solr/src/test/org/apache/solr/common/util/TestNamedListCodec.java
@@ -199,7 +199,7 @@ public class TestNamedListCodec  extends LuceneTestCase {
     return lst;
   }
 
-  Random r = new Random();
+  Random r = random;
 
   public Object makeRandom(int lev) {
     switch (r.nextInt(10)) {
@@ -231,7 +231,7 @@ public class TestNamedListCodec  extends LuceneTestCase {
 
 
   public void testRandom() throws Exception {
-    Random r = new Random(0);
+    // Random r = random;
     // let's keep it deterministic since just the wrong
     // random stuff could cause failure because of an OOM (too big)
 
diff --git a/solr/src/test/org/apache/solr/search/TestDocSet.java b/solr/src/test/org/apache/solr/search/TestDocSet.java
index f37b34f..e52aecb 100644
--- a/solr/src/test/org/apache/solr/search/TestDocSet.java
+++ b/solr/src/test/org/apache/solr/search/TestDocSet.java
@@ -35,7 +35,7 @@ import org.apache.lucene.search.DocIdSetIterator;
  * @version $Id$
  */
 public class TestDocSet extends LuceneTestCase {
-  Random rand = new Random();
+  Random rand = random;
   float loadfactor;
 
   public OpenBitSet getRandomSet(int sz, int bitsToSet) {
diff --git a/solr/src/test/org/apache/solr/search/TestFastLRUCache.java b/solr/src/test/org/apache/solr/search/TestFastLRUCache.java
index 6c42eac..0ff414b 100644
--- a/solr/src/test/org/apache/solr/search/TestFastLRUCache.java
+++ b/solr/src/test/org/apache/solr/search/TestFastLRUCache.java
@@ -260,7 +260,7 @@ public class TestFastLRUCache extends LuceneTestCase {
     int lowerWaterMark = cacheSize;
     int upperWaterMark = (int)(lowerWaterMark * 1.1);
 
-    Random r = new Random(0);
+    Random r = random;
     ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);
     boolean getSize=false;
     int minSize=0,maxSize=0;
@@ -310,9 +310,8 @@ public class TestFastLRUCache extends LuceneTestCase {
   }
 
   void fillCache(SolrCache sc, int cacheSize, int maxKey) {
-    Random r = new Random(0);
     for (int i=0; i<cacheSize; i++) {
-      Integer kv = r.nextInt(maxKey);
+      Integer kv = random.nextInt(maxKey);
       sc.put(kv,kv);
     }
   }
@@ -333,7 +332,7 @@ public class TestFastLRUCache extends LuceneTestCase {
     Thread[] threads = new Thread[nThreads];
     final AtomicInteger puts = new AtomicInteger(0);
     for (int i=0; i<threads.length; i++) {
-      final int seed=i;
+      final int seed=random.nextInt();
       threads[i] = new Thread() {
           public void run() {
             int ret = useCache(sc, numGets/nThreads, maxKey, seed);
diff --git a/solr/src/test/org/apache/solr/search/TestSearchPerf.java b/solr/src/test/org/apache/solr/search/TestSearchPerf.java
index 0f55adb..ef3470c 100755
--- a/solr/src/test/org/apache/solr/search/TestSearchPerf.java
+++ b/solr/src/test/org/apache/solr/search/TestSearchPerf.java
@@ -50,7 +50,7 @@ public class TestSearchPerf extends AbstractSolrTestCase {
     return String.format("%08d", tnum);
   }
 
-  Random r = new Random(0);
+  Random r = new Random(0);  // specific seed for reproducible perf testing
   int nDocs;
   void createIndex(int nDocs) {
     this.nDocs = nDocs;
diff --git a/solr/src/test/org/apache/solr/search/TestSort.java b/solr/src/test/org/apache/solr/search/TestSort.java
index cb32ce5..2306974 100755
--- a/solr/src/test/org/apache/solr/search/TestSort.java
+++ b/solr/src/test/org/apache/solr/search/TestSort.java
@@ -36,7 +36,7 @@ public class TestSort extends AbstractSolrTestCase {
   public String getSchemaFile() { return null; }
   public String getSolrConfigFile() { return null; }
 
-  Random r = new Random();
+  Random r = random;
 
   int ndocs = 77;
   int iter = 50;
diff --git a/solr/src/test/org/apache/solr/search/function/TestFunctionQuery.java b/solr/src/test/org/apache/solr/search/function/TestFunctionQuery.java
index 2b548a1..7bd85a3 100755
--- a/solr/src/test/org/apache/solr/search/function/TestFunctionQuery.java
+++ b/solr/src/test/org/apache/solr/search/function/TestFunctionQuery.java
@@ -220,7 +220,7 @@ public class TestFunctionQuery extends SolrTestCaseJ4 {
     assertTrue(orig != FileFloatSource.onlyForTesting);
 
 
-    Random r = new Random();
+    Random r = random;
     for (int i=0; i<10; i++) {   // do more iterations for a thorough test
       int len = r.nextInt(ids.length+1);
       boolean sorted = r.nextBoolean();
diff --git a/solr/src/test/org/apache/solr/util/TestNumberUtils.java b/solr/src/test/org/apache/solr/util/TestNumberUtils.java
index 8eb8df4..0e6c915 100644
--- a/solr/src/test/org/apache/solr/util/TestNumberUtils.java
+++ b/solr/src/test/org/apache/solr/util/TestNumberUtils.java
@@ -34,7 +34,7 @@ public class TestNumberUtils extends LuceneTestCase {
     return str+"]";
   }
 
-  static Random rng = new Random();
+  static Random rng = random;
 
   static int[] special = {0,10,100,1000,10000,Integer.MAX_VALUE, Integer.MIN_VALUE};
   static int getSpecial() {

