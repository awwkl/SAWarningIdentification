GitDiffStart: b1f1f5df0b260f47028567c5471b11eab24696a5 | Sun Jun 14 20:26:12 2015 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 2bcc730..4eaf785 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -148,9 +148,6 @@ Build
 * LUCENE-6518: Don't report false thread leaks from IBM J9
   ClassCache Reaper in test framework. (Dawid Weiss)
 
-* LUCENE-6564: Add milliseconds to timestamp in InfoStream output for tests
-  (Ramkumar Aiyengar)
-
 ======================= Lucene 5.2.1 =======================
 
 Bug Fixes
diff --git a/lucene/core/src/java/org/apache/lucene/util/PrintStreamInfoStream.java b/lucene/core/src/java/org/apache/lucene/util/PrintStreamInfoStream.java
index c3fd897..cc03d43 100644
--- a/lucene/core/src/java/org/apache/lucene/util/PrintStreamInfoStream.java
+++ b/lucene/core/src/java/org/apache/lucene/util/PrintStreamInfoStream.java
@@ -36,7 +36,7 @@ public class PrintStreamInfoStream extends InfoStream {
   private static final AtomicInteger MESSAGE_ID = new AtomicInteger();
   protected final int messageID;
 
-  protected static final DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS", Locale.ROOT);
+  private static final DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS", Locale.ROOT);
   
   protected final PrintStream stream;
   
diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java b/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java
index c96a592..03f5afb 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.java
@@ -23,6 +23,7 @@ import java.util.Date;
 import java.util.HashSet;
 import java.util.Locale;
 import java.util.Random;
+import java.util.Set;
 import java.util.TimeZone;
 
 import org.apache.lucene.codecs.Codec;
@@ -98,7 +99,7 @@ final class TestRuleSetupAndRestoreClassEnv extends AbstractBeforeAfterRule {
       } else {
         name = Thread.currentThread().getName();
       }
-      stream.println(component + " " + messageID + " [" + dateFormat.format(new Date()) + "; " + name + "]: " + message);
+      stream.println(component + " " + messageID + " [" + new Date() + "; " + name + "]: " + message);    
     }
   }
 

