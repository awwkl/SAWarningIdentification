GitDiffStart: 3018576b67648f3f7f827103a881ef3477c70a18 | Wed Jan 28 11:55:57 2015 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 7614e14..a54ce9f 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -85,6 +85,10 @@ New Features
 * SOLR-6449: Add first class support for Real Time Get in Solrj.
   (Anurag Sharma, Steve Davids via shalin)
 
+* SOLR-6954: SolrClient now implements Closeable, and shutdown() has been
+  deprecated in favour of close(). (Mark Miller, Tomás Fernández Löbbe, Alan
+  Woodward)
+
 Other Changes
 ----------------------
 
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.java
index 3302268..cabd7a0 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.java
@@ -17,16 +17,6 @@ package org.apache.solr.handler.dataimport;
  * limitations under the License.
  */
 
-import static org.apache.solr.handler.dataimport.DataImportHandlerException.SEVERE;
-import static org.apache.solr.handler.dataimport.DataImportHandlerException.wrapAndThrow;
-
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-
 import org.apache.http.client.HttpClient;
 import org.apache.solr.client.solrj.SolrClient;
 import org.apache.solr.client.solrj.SolrQuery;
@@ -41,6 +31,17 @@ import org.apache.solr.common.params.CommonParams;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import static org.apache.solr.handler.dataimport.DataImportHandlerException.SEVERE;
+import static org.apache.solr.handler.dataimport.DataImportHandlerException.wrapAndThrow;
+
 /**
  * <p>
  * An implementation of {@link EntityProcessor} which fetches values from a
@@ -75,7 +76,9 @@ public class SolrEntityProcessor extends EntityProcessorBase {
   @Override
   public void destroy() {
     try {
-      solrClient.shutdown();
+      solrClient.close();
+    } catch (IOException e) {
+
     } finally {
       HttpClientUtil.close(((HttpSolrClient) solrClient).getHttpClient());
     }
diff --git a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java
index d26b284..ec4e2f7 100644
--- a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java
+++ b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java
@@ -68,8 +68,7 @@ public class TestContentStreamDataSource extends AbstractDataImportHandlerTestCa
     params.set("command", "full-import");
     params.set("clean", "false");
     req.setParams(params);
-    HttpSolrClient solrClient = new HttpSolrClient(buildUrl(jetty.getLocalPort(), "/solr/collection1"));
-    try {
+    try (HttpSolrClient solrClient = new HttpSolrClient(buildUrl(jetty.getLocalPort(), "/solr/collection1"))) {
       solrClient.request(req);
       ModifiableSolrParams qparams = new ModifiableSolrParams();
       qparams.add("q", "*:*");
@@ -78,9 +77,7 @@ public class TestContentStreamDataSource extends AbstractDataImportHandlerTestCa
       assertEquals(2, results.getNumFound());
       SolrDocument doc = results.get(0);
       assertEquals("1", doc.getFieldValue("id"));
-      assertEquals("Hello C1", ((List)doc.getFieldValue("desc")).get(0));
-    } finally {
-      solrClient.shutdown();
+      assertEquals("Hello C1", ((List) doc.getFieldValue("desc")).get(0));
     }
   }
 
@@ -91,22 +88,22 @@ public class TestContentStreamDataSource extends AbstractDataImportHandlerTestCa
         "clean", "false", UpdateParams.COMMIT, "false", 
         UpdateParams.COMMIT_WITHIN, "1000");
     req.setParams(params);
-    HttpSolrClient solrServer = new HttpSolrClient(buildUrl(jetty.getLocalPort(), "/solr/collection1"));
-    solrServer.request(req);
-    Thread.sleep(100);
-    ModifiableSolrParams queryAll = params("q", "*");
-    QueryResponse qres = solrServer.query(queryAll);
-    SolrDocumentList results = qres.getResults();
-    assertEquals(0, results.getNumFound());
-    Thread.sleep(1000);
-    for (int i = 0; i < 10; i++) {
-      qres = solrServer.query(queryAll);
-      results = qres.getResults();
-      if (2 == results.getNumFound()) {
-        solrServer.shutdown();
-        return;
+    try (HttpSolrClient solrServer = new HttpSolrClient(buildUrl(jetty.getLocalPort(), "/solr/collection1"))) {
+      solrServer.request(req);
+      Thread.sleep(100);
+      ModifiableSolrParams queryAll = params("q", "*");
+      QueryResponse qres = solrServer.query(queryAll);
+      SolrDocumentList results = qres.getResults();
+      assertEquals(0, results.getNumFound());
+      Thread.sleep(1000);
+      for (int i = 0; i < 10; i++) {
+        qres = solrServer.query(queryAll);
+        results = qres.getResults();
+        if (2 == results.getNumFound()) {
+          return;
+        }
+        Thread.sleep(500);
       }
-      Thread.sleep(500);
     }
     fail("Commit should have occured but it did not");
   }
diff --git a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
index dd193c1..fdb2d3c 100644
--- a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
+++ b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
@@ -280,15 +280,12 @@ public class TestSolrEntityProcessorEndToEnd extends AbstractDataImportHandlerTe
       }
       sidl.add(sd);
     }
-    
-    HttpSolrClient solrServer = new HttpSolrClient(getSourceUrl());
-    try {
+
+    try (HttpSolrClient solrServer = new HttpSolrClient(getSourceUrl())) {
       solrServer.setConnectionTimeout(15000);
       solrServer.setSoTimeout(30000);
       solrServer.add(sidl);
       solrServer.commit(true, true);
-    } finally {
-      solrServer.shutdown();
     }
   }
   
diff --git a/solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/BatchWriter.java b/solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/BatchWriter.java
index 34701d5..dba832c 100644
--- a/solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/BatchWriter.java
+++ b/solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/BatchWriter.java
@@ -16,6 +16,15 @@
  */
 package org.apache.solr.hadoop;
 
+import org.apache.hadoop.mapreduce.TaskAttemptContext;
+import org.apache.hadoop.mapreduce.TaskID;
+import org.apache.solr.client.solrj.SolrServerException;
+import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;
+import org.apache.solr.client.solrj.response.UpdateResponse;
+import org.apache.solr.common.SolrInputDocument;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -26,15 +35,6 @@ import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import org.apache.hadoop.mapreduce.TaskAttemptContext;
-import org.apache.hadoop.mapreduce.TaskID;
-import org.apache.solr.client.solrj.SolrServerException;
-import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;
-import org.apache.solr.client.solrj.response.UpdateResponse;
-import org.apache.solr.common.SolrInputDocument;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 /**
  * Enables adding batches of documents to an EmbeddedSolrServer.
  */
@@ -209,7 +209,7 @@ class BatchWriter {
     context.setStatus("Committing Solr Phase 2");
     solr.commit(true, false);
     context.setStatus("Shutting down Solr");
-    solr.shutdown();
+    solr.close();
   }
 
   /**
diff --git a/solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/GoLive.java b/solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/GoLive.java
index b7d26eb..1b337b3 100644
--- a/solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/GoLive.java
+++ b/solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/GoLive.java
@@ -16,6 +16,15 @@
  */
 package org.apache.solr.hadoop;
 
+import org.apache.hadoop.fs.FileStatus;
+import org.apache.solr.client.solrj.SolrServerException;
+import org.apache.solr.client.solrj.impl.CloudSolrClient;
+import org.apache.solr.client.solrj.impl.HttpSolrClient;
+import org.apache.solr.client.solrj.request.CoreAdminRequest;
+import org.apache.solr.hadoop.MapReduceIndexerTool.Options;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.HashSet;
@@ -31,15 +40,6 @@ import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
-import org.apache.hadoop.fs.FileStatus;
-import org.apache.solr.client.solrj.SolrServerException;
-import org.apache.solr.client.solrj.impl.CloudSolrClient;
-import org.apache.solr.client.solrj.impl.HttpSolrClient;
-import org.apache.solr.client.solrj.request.CoreAdminRequest;
-import org.apache.solr.hadoop.MapReduceIndexerTool.Options;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 /**
  * The optional (parallel) GoLive phase merges the output shards of the previous
  * phase into a set of live customer facing Solr servers, typically a SolrCloud.
@@ -91,23 +91,14 @@ class GoLive {
             public Request call() {
               Request req = new Request();
               LOG.info("Live merge " + dir.getPath() + " into " + mergeUrl);
-              final HttpSolrClient server = new HttpSolrClient(mergeUrl);
-              try {
+              try (final HttpSolrClient client = new HttpSolrClient(mergeUrl)) {
                 CoreAdminRequest.MergeIndexes mergeRequest = new CoreAdminRequest.MergeIndexes();
                 mergeRequest.setCoreName(name);
                 mergeRequest.setIndexDirs(Arrays.asList(dir.getPath().toString() + "/data/index"));
-                try {
-                  mergeRequest.process(server);
-                  req.success = true;
-                } catch (SolrServerException e) {
-                  req.e = e;
-                  return req;
-                } catch (IOException e) {
-                  req.e = e;
-                  return req;
-                }
-              } finally {
-                server.shutdown();
+                mergeRequest.process(client);
+                req.success = true;
+              } catch (SolrServerException | IOException e) {
+                req.e = e;
               }
               return req;
             }
@@ -149,17 +140,17 @@ class GoLive {
       try {
         LOG.info("Committing live merge...");
         if (options.zkHost != null) {
-          CloudSolrClient server = new CloudSolrClient(options.zkHost);
-          server.setDefaultCollection(options.collection);
-          server.commit();
-          server.shutdown();
+          try (CloudSolrClient server = new CloudSolrClient(options.zkHost)) {
+            server.setDefaultCollection(options.collection);
+            server.commit();
+          }
         } else {
           for (List<String> urls : options.shardUrls) {
             for (String url : urls) {
               // TODO: we should do these concurrently
-              HttpSolrClient server = new HttpSolrClient(url);
-              server.commit();
-              server.shutdown();
+              try (HttpSolrClient server = new HttpSolrClient(url)) {
+                server.commit();
+              }
             }
           }
         }
diff --git a/solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest.java b/solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest.java
index 3823d7c..c642c11 100644
--- a/solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest.java
+++ b/solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest.java
@@ -16,23 +16,13 @@
  */
 package org.apache.solr.hadoop;
 
-import java.io.File;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.io.OutputStreamWriter;
-import java.io.UnsupportedEncodingException;
-import java.io.Writer;
-import java.lang.reflect.Array;
-import java.net.URI;
-import java.nio.charset.StandardCharsets;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
+import com.carrotsearch.randomizedtesting.annotations.ThreadLeakAction;
+import com.carrotsearch.randomizedtesting.annotations.ThreadLeakAction.Action;
+import com.carrotsearch.randomizedtesting.annotations.ThreadLeakLingering;
+import com.carrotsearch.randomizedtesting.annotations.ThreadLeakScope;
+import com.carrotsearch.randomizedtesting.annotations.ThreadLeakScope.Scope;
+import com.carrotsearch.randomizedtesting.annotations.ThreadLeakZombies;
+import com.carrotsearch.randomizedtesting.annotations.ThreadLeakZombies.Consequence;
 import org.apache.commons.io.FileUtils;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
@@ -47,9 +37,9 @@ import org.apache.lucene.util.Constants;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.apache.solr.SolrTestCaseJ4.SuppressSSL;
+import org.apache.solr.client.solrj.SolrClient;
 import org.apache.solr.client.solrj.SolrQuery;
 import org.apache.solr.client.solrj.SolrQuery.ORDER;
-import org.apache.solr.client.solrj.SolrClient;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
 import org.apache.solr.client.solrj.impl.HttpSolrClient;
@@ -75,13 +65,22 @@ import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import com.carrotsearch.randomizedtesting.annotations.ThreadLeakAction;
-import com.carrotsearch.randomizedtesting.annotations.ThreadLeakAction.Action;
-import com.carrotsearch.randomizedtesting.annotations.ThreadLeakLingering;
-import com.carrotsearch.randomizedtesting.annotations.ThreadLeakScope;
-import com.carrotsearch.randomizedtesting.annotations.ThreadLeakScope.Scope;
-import com.carrotsearch.randomizedtesting.annotations.ThreadLeakZombies;
-import com.carrotsearch.randomizedtesting.annotations.ThreadLeakZombies.Consequence;
+import java.io.File;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.OutputStreamWriter;
+import java.io.UnsupportedEncodingException;
+import java.io.Writer;
+import java.lang.reflect.Array;
+import java.net.URI;
+import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 
 @ThreadLeakAction({Action.WARN})
 @ThreadLeakLingering(linger = 0)
@@ -370,143 +369,144 @@ public class MorphlineGoLiveMiniMRTest extends AbstractFullDistribZkTestBase {
     MapReduceIndexerTool tool;
     int res;
     QueryResponse results;
-    HttpSolrClient server = new HttpSolrClient(cloudJettys.get(0).url);
     String[] args = new String[]{};
-
-    args = new String[] {
-        "--solr-home-dir=" + MINIMR_CONF_DIR.getAbsolutePath(),
-        "--output-dir=" + outDir.toString(),
-        "--log4j=" + getFile("log4j.properties").getAbsolutePath(),
-        "--mappers=3",
-        random().nextBoolean() ? "--input-list=" + INPATH.toString() : dataDir.toString(),  
-        "--go-live-threads", Integer.toString(random().nextInt(15) + 1),
-        "--verbose",
-        "--go-live"
-    };
-    args = prependInitialArgs(args);
     List<String> argList = new ArrayList<>();
-    getShardUrlArgs(argList);
-    args = concat(args, argList.toArray(new String[0]));
-    
-    if (true) {
-      tool = new MapReduceIndexerTool();
-      res = ToolRunner.run(jobConf, tool, args);
-      assertEquals(0, res);
-      assertTrue(tool.job.isComplete());
-      assertTrue(tool.job.isSuccessful());
-      results = server.query(new SolrQuery("*:*"));
-      assertEquals(20, results.getResults().getNumFound());
-    }    
-    
-    fs.delete(inDir, true);   
-    fs.delete(outDir, true);  
-    fs.delete(dataDir, true); 
-    assertTrue(fs.mkdirs(inDir));
-    INPATH = upAvroFile(fs, inDir, DATADIR, dataDir, inputAvroFile2);
 
-    args = new String[] {
-        "--solr-home-dir=" + MINIMR_CONF_DIR.getAbsolutePath(),
-        "--output-dir=" + outDir.toString(),
-        "--mappers=3",
-        "--verbose",
-        "--go-live",
-        random().nextBoolean() ? "--input-list=" + INPATH.toString() : dataDir.toString(), 
-        "--go-live-threads", Integer.toString(random().nextInt(15) + 1)
-    };
-    args = prependInitialArgs(args);
-    argList = new ArrayList<>();
-    getShardUrlArgs(argList);
-    args = concat(args, argList.toArray(new String[0]));
-    
-    if (true) {
-      tool = new MapReduceIndexerTool();
-      res = ToolRunner.run(jobConf, tool, args);
-      assertEquals(0, res);
-      assertTrue(tool.job.isComplete());
-      assertTrue(tool.job.isSuccessful());      
-      results = server.query(new SolrQuery("*:*"));
-      
-      assertEquals(22, results.getResults().getNumFound());
-    }    
-    
-    // try using zookeeper
-    String collection = "collection1";
-    if (random().nextBoolean()) {
-      // sometimes, use an alias
-      createAlias("updatealias", "collection1");
-      collection = "updatealias";
-    }
-    
-    fs.delete(inDir, true);   
-    fs.delete(outDir, true);  
-    fs.delete(dataDir, true);    
-    INPATH = upAvroFile(fs, inDir, DATADIR, dataDir, inputAvroFile3);
+    try (HttpSolrClient server = new HttpSolrClient(cloudJettys.get(0).url)) {
 
-    cloudClient.deleteByQuery("*:*");
-    cloudClient.commit();
-    assertEquals(0, cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound());      
+      args = new String[]{
+          "--solr-home-dir=" + MINIMR_CONF_DIR.getAbsolutePath(),
+          "--output-dir=" + outDir.toString(),
+          "--log4j=" + getFile("log4j.properties").getAbsolutePath(),
+          "--mappers=3",
+          random().nextBoolean() ? "--input-list=" + INPATH.toString() : dataDir.toString(),
+          "--go-live-threads", Integer.toString(random().nextInt(15) + 1),
+          "--verbose",
+          "--go-live"
+      };
+      args = prependInitialArgs(args);
+      getShardUrlArgs(argList);
+      args = concat(args, argList.toArray(new String[0]));
 
-    args = new String[] {
-        "--output-dir=" + outDir.toString(),
-        "--mappers=3",
-        "--reducers=12",
-        "--fanout=2",
-        "--verbose",
-        "--go-live",
-        random().nextBoolean() ? "--input-list=" + INPATH.toString() : dataDir.toString(), 
-        "--zk-host", zkServer.getZkAddress(), 
-        "--collection", collection
-    };
-    args = prependInitialArgs(args);
+      if (true) {
+        tool = new MapReduceIndexerTool();
+        res = ToolRunner.run(jobConf, tool, args);
+        assertEquals(0, res);
+        assertTrue(tool.job.isComplete());
+        assertTrue(tool.job.isSuccessful());
+        results = server.query(new SolrQuery("*:*"));
+        assertEquals(20, results.getResults().getNumFound());
+      }
 
-    if (true) {
-      tool = new MapReduceIndexerTool();
-      res = ToolRunner.run(jobConf, tool, args);
-      assertEquals(0, res);
-      assertTrue(tool.job.isComplete());
-      assertTrue(tool.job.isSuccessful());
-      
-      SolrDocumentList resultDocs = executeSolrQuery(cloudClient, "*:*");      
-      assertEquals(RECORD_COUNT, resultDocs.getNumFound());
-      assertEquals(RECORD_COUNT, resultDocs.size());
-      
-      // perform updates
-      for (int i = 0; i < RECORD_COUNT; i++) {
+      fs.delete(inDir, true);
+      fs.delete(outDir, true);
+      fs.delete(dataDir, true);
+      assertTrue(fs.mkdirs(inDir));
+      INPATH = upAvroFile(fs, inDir, DATADIR, dataDir, inputAvroFile2);
+
+      args = new String[]{
+          "--solr-home-dir=" + MINIMR_CONF_DIR.getAbsolutePath(),
+          "--output-dir=" + outDir.toString(),
+          "--mappers=3",
+          "--verbose",
+          "--go-live",
+          random().nextBoolean() ? "--input-list=" + INPATH.toString() : dataDir.toString(),
+          "--go-live-threads", Integer.toString(random().nextInt(15) + 1)
+      };
+      args = prependInitialArgs(args);
+
+      getShardUrlArgs(argList);
+      args = concat(args, argList.toArray(new String[0]));
+
+      if (true) {
+        tool = new MapReduceIndexerTool();
+        res = ToolRunner.run(jobConf, tool, args);
+        assertEquals(0, res);
+        assertTrue(tool.job.isComplete());
+        assertTrue(tool.job.isSuccessful());
+        results = server.query(new SolrQuery("*:*"));
+
+        assertEquals(22, results.getResults().getNumFound());
+      }
+
+      // try using zookeeper
+      String collection = "collection1";
+      if (random().nextBoolean()) {
+        // sometimes, use an alias
+        createAlias("updatealias", "collection1");
+        collection = "updatealias";
+      }
+
+      fs.delete(inDir, true);
+      fs.delete(outDir, true);
+      fs.delete(dataDir, true);
+      INPATH = upAvroFile(fs, inDir, DATADIR, dataDir, inputAvroFile3);
+
+      cloudClient.deleteByQuery("*:*");
+      cloudClient.commit();
+      assertEquals(0, cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound());
+
+      args = new String[]{
+          "--output-dir=" + outDir.toString(),
+          "--mappers=3",
+          "--reducers=12",
+          "--fanout=2",
+          "--verbose",
+          "--go-live",
+          random().nextBoolean() ? "--input-list=" + INPATH.toString() : dataDir.toString(),
+          "--zk-host", zkServer.getZkAddress(),
+          "--collection", collection
+      };
+      args = prependInitialArgs(args);
+
+      if (true) {
+        tool = new MapReduceIndexerTool();
+        res = ToolRunner.run(jobConf, tool, args);
+        assertEquals(0, res);
+        assertTrue(tool.job.isComplete());
+        assertTrue(tool.job.isSuccessful());
+
+        SolrDocumentList resultDocs = executeSolrQuery(cloudClient, "*:*");
+        assertEquals(RECORD_COUNT, resultDocs.getNumFound());
+        assertEquals(RECORD_COUNT, resultDocs.size());
+
+        // perform updates
+        for (int i = 0; i < RECORD_COUNT; i++) {
           SolrDocument doc = resultDocs.get(i);
           SolrInputDocument update = new SolrInputDocument();
           for (Map.Entry<String, Object> entry : doc.entrySet()) {
-              update.setField(entry.getKey(), entry.getValue());
+            update.setField(entry.getKey(), entry.getValue());
           }
           update.setField("user_screen_name", "Nadja" + i);
           update.removeField("_version_");
           cloudClient.add(update);
-      }
-      cloudClient.commit();
-      
-      // verify updates
-      SolrDocumentList resultDocs2 = executeSolrQuery(cloudClient, "*:*");   
-      assertEquals(RECORD_COUNT, resultDocs2.getNumFound());
-      assertEquals(RECORD_COUNT, resultDocs2.size());
-      for (int i = 0; i < RECORD_COUNT; i++) {
+        }
+        cloudClient.commit();
+
+        // verify updates
+        SolrDocumentList resultDocs2 = executeSolrQuery(cloudClient, "*:*");
+        assertEquals(RECORD_COUNT, resultDocs2.getNumFound());
+        assertEquals(RECORD_COUNT, resultDocs2.size());
+        for (int i = 0; i < RECORD_COUNT; i++) {
           SolrDocument doc = resultDocs.get(i);
           SolrDocument doc2 = resultDocs2.get(i);
           assertEquals(doc.getFirstValue("id"), doc2.getFirstValue("id"));
           assertEquals("Nadja" + i, doc2.getFirstValue("user_screen_name"));
           assertEquals(doc.getFirstValue("text"), doc2.getFirstValue("text"));
-          
+
           // perform delete
-          cloudClient.deleteById((String)doc.getFirstValue("id"));
+          cloudClient.deleteById((String) doc.getFirstValue("id"));
+        }
+        cloudClient.commit();
+
+        // verify deletes
+        assertEquals(0, executeSolrQuery(cloudClient, "*:*").size());
       }
+
+      cloudClient.deleteByQuery("*:*");
       cloudClient.commit();
-      
-      // verify deletes
-      assertEquals(0, executeSolrQuery(cloudClient, "*:*").size());
-    }    
-    
-    cloudClient.deleteByQuery("*:*");
-    cloudClient.commit();
-    assertEquals(0, cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound());      
-    server.shutdown();
+      assertEquals(0, cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound());
+    }
     
     // try using zookeeper with replication
     String replicatedCollection = "replicated_collection";
@@ -693,25 +693,24 @@ public class MorphlineGoLiveMiniMRTest extends AbstractFullDistribZkTestBase {
   }
 
   private void checkConsistency(String replicatedCollection)
-      throws SolrServerException {
+      throws Exception {
     Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()
         .getSlices(replicatedCollection);
     for (Slice slice : slices) {
       Collection<Replica> replicas = slice.getReplicas();
       long found = -1;
       for (Replica replica : replicas) {
-        HttpSolrClient client = new HttpSolrClient(
-            new ZkCoreNodeProps(replica).getCoreUrl());
-        SolrQuery query = new SolrQuery("*:*");
-        query.set("distrib", false);
-        QueryResponse replicaResults = client.query(query);
-        long count = replicaResults.getResults().getNumFound();
-        if (found != -1) {
-          assertEquals(slice.getName() + " is inconsistent "
-              + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);
+        try (HttpSolrClient client = new HttpSolrClient(new ZkCoreNodeProps(replica).getCoreUrl())) {
+          SolrQuery query = new SolrQuery("*:*");
+          query.set("distrib", false);
+          QueryResponse replicaResults = client.query(query);
+          long count = replicaResults.getResults().getNumFound();
+          if (found != -1) {
+            assertEquals(slice.getName() + " is inconsistent "
+                + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);
+          }
+          found = count;
         }
-        found = count;
-        client.shutdown();
       }
     }
   }
diff --git a/solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/UtilsForTests.java b/solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/UtilsForTests.java
index 17f3ae9..bc5148f 100644
--- a/solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/UtilsForTests.java
+++ b/solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/UtilsForTests.java
@@ -16,11 +16,6 @@
  */
 package org.apache.solr.hadoop;
 
-import static org.junit.Assert.assertEquals;
-
-import java.io.File;
-import java.io.IOException;
-
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
@@ -29,6 +24,11 @@ import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;
 import org.apache.solr.client.solrj.response.QueryResponse;
 
+import java.io.File;
+import java.io.IOException;
+
+import static org.junit.Assert.assertEquals;
+
 
 public class UtilsForTests {
   
@@ -40,17 +40,13 @@ public class UtilsForTests {
     for (FileStatus dir : fs.listStatus(outDir)) { // for each shard
       if (dir.getPath().getName().startsWith("part") && dir.isDirectory()) {
         actualShards++;
-        EmbeddedSolrServer solr = SolrRecordWriter.createEmbeddedSolrServer(
-            new Path(solrHomeDir.getAbsolutePath()), fs, dir.getPath());
-        
-        try {
+        try (EmbeddedSolrServer solr
+                 = SolrRecordWriter.createEmbeddedSolrServer(new Path(solrHomeDir.getAbsolutePath()), fs, dir.getPath())) {
           SolrQuery query = new SolrQuery();
           query.setQuery("*:*");
           QueryResponse resp = solr.query(query);
           long numDocs = resp.getResults().getNumFound();
           actualDocs += numDocs;
-        } finally {
-          solr.shutdown();
         }
       }
     }
diff --git a/solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrClientDocumentLoader.java b/solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrClientDocumentLoader.java
index d9c8cc3..c52863f 100644
--- a/solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrClientDocumentLoader.java
+++ b/solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrClientDocumentLoader.java
@@ -105,9 +105,9 @@ public class SolrClientDocumentLoader implements DocumentLoader {
   }
 
   @Override
-  public void shutdown() {
+  public void shutdown() throws IOException {
     LOGGER.trace("shutdown");
-    client.shutdown();
+    client.close();
   }
 
   @Override
diff --git a/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase.java b/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase.java
index 8a64a42..6c10597 100644
--- a/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase.java
+++ b/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase.java
@@ -139,7 +139,7 @@ public class AbstractSolrMorphlineTestBase extends SolrTestCaseJ4 {
   @After
   public void tearDown() throws Exception {
     collector = null;
-    solrClient.shutdown();
+    solrClient.close();
     solrClient = null;
     super.tearDown();
   }
diff --git a/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/EmbeddedTestSolrServer.java b/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/EmbeddedTestSolrServer.java
index 3bd5390..9599511 100644
--- a/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/EmbeddedTestSolrServer.java
+++ b/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/EmbeddedTestSolrServer.java
@@ -34,7 +34,7 @@ public class EmbeddedTestSolrServer extends EmbeddedSolrServer {
   }
 
   @Override
-  public void shutdown() {
+  public void close() {
     ; // NOP
   }
 
diff --git a/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAvroTest.java b/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAvroTest.java
index 6b539e6..7fe1759 100644
--- a/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAvroTest.java
+++ b/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAvroTest.java
@@ -132,7 +132,7 @@ public class SolrMorphlineZkAvroTest extends AbstractSolrMorphlineZkTestBase {
     
     Notifications.notifyRollbackTransaction(morphline);
     Notifications.notifyShutdown(morphline);
-    cloudClient.shutdown();
+    cloudClient.close();
   }
   
   private void assertTweetEquals(GenericData.Record expected, Record actual, int i) {
diff --git a/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkTest.java b/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkTest.java
index c3a2a13..feb2d6a 100644
--- a/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkTest.java
+++ b/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkTest.java
@@ -27,7 +27,6 @@ import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.apache.solr.client.solrj.SolrQuery;
 import org.apache.solr.client.solrj.response.QueryResponse;
 import org.apache.solr.common.SolrDocument;
-import org.junit.BeforeClass;
 import org.junit.Test;
 import org.kitesdk.morphline.api.Record;
 import org.kitesdk.morphline.base.Fields;
@@ -93,7 +92,7 @@ public class SolrMorphlineZkTest extends AbstractSolrMorphlineZkTestBase {
     
     Notifications.notifyRollbackTransaction(morphline);
     Notifications.notifyShutdown(morphline);
-    cloudClient.shutdown();
+    cloudClient.close();
   }
 
 }
diff --git a/solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java b/solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java
index e43a579..3cf40e2 100644
--- a/solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java
+++ b/solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java
@@ -213,9 +213,15 @@ public class EmbeddedSolrServer extends SolrClient
    * Shutdown all cores within the EmbeddedSolrServer instance
    */
   @Override
+  @Deprecated
   public void shutdown() {
     coreContainer.shutdown();
   }
+
+  @Override
+  public void close() throws IOException {
+    shutdown();
+  }
   
   /**
    * Getter method for the CoreContainer
diff --git a/solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread.java b/solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread.java
index a046fb6..830fa96 100644
--- a/solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread.java
+++ b/solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread.java
@@ -113,9 +113,8 @@ public class LeaderInitiatedRecoveryThread extends Thread {
       } else {
         log.info("Asking core={} coreNodeName={} on " + recoveryUrl + " to recover", coreNeedingRecovery, replicaCoreNodeName);
       }
-      
-      HttpSolrClient client = new HttpSolrClient(recoveryUrl);
-      try {
+
+      try (HttpSolrClient client = new HttpSolrClient(recoveryUrl)) {
         client.setSoTimeout(60000);
         client.setConnectionTimeout(15000);
         try {
@@ -139,8 +138,6 @@ public class LeaderInitiatedRecoveryThread extends Thread {
             continueTrying = false;
           }                                                
         }
-      } finally {
-        client.shutdown();
       }
       
       // wait a few seconds
diff --git a/solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread.java b/solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread.java
index 133ebc9..2582f13 100644
--- a/solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread.java
+++ b/solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread.java
@@ -17,20 +17,8 @@ package org.apache.solr.cloud;
  * limitations under the License.
  */
 
-import java.io.Closeable;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeMap;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.TimeUnit;
-
+import com.google.common.cache.Cache;
+import com.google.common.cache.CacheBuilder;
 import org.apache.solr.client.solrj.impl.HttpSolrClient;
 import org.apache.solr.client.solrj.request.CoreAdminRequest.Create;
 import org.apache.solr.common.SolrException;
@@ -45,8 +33,19 @@ import org.apache.solr.update.UpdateShardHandler;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.cache.Cache;
-import com.google.common.cache.CacheBuilder;
+import java.io.Closeable;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.TimeUnit;
 
 
 // TODO: how to tmp exclude nodes?
@@ -422,12 +421,11 @@ public class OverseerAutoReplicaFailoverThread implements Runnable, Closeable {
   private boolean createSolrCore(final String collection,
       final String createUrl, final String dataDir, final String ulogDir,
       final String coreNodeName, final String coreName) {
-    HttpSolrClient server = null;
-    try {
+
+    try (HttpSolrClient client = new HttpSolrClient(createUrl)) {
       log.debug("create url={}", createUrl);
-      server = new HttpSolrClient(createUrl);
-      server.setConnectionTimeout(30000);
-      server.setSoTimeout(60000);
+      client.setConnectionTimeout(30000);
+      client.setSoTimeout(60000);
       Create createCmd = new Create();
       createCmd.setCollection(collection);
       createCmd.setCoreNodeName(coreNodeName);
@@ -436,14 +434,10 @@ public class OverseerAutoReplicaFailoverThread implements Runnable, Closeable {
       createCmd.setCoreName(coreName);
       createCmd.setDataDir(dataDir);
       createCmd.setUlogDir(ulogDir);
-      server.request(createCmd);
+      client.request(createCmd);
     } catch (Exception e) {
       SolrException.log(log, "Exception trying to create new replica on " + createUrl, e);
       return false;
-    } finally {
-      if (server != null) {
-        server.shutdown();
-      }
     }
     return true;
   }
diff --git a/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java b/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
index 0e30430..42cb504 100644
--- a/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
+++ b/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
@@ -1801,19 +1801,14 @@ public class OverseerCollectionProcessor implements Runnable, Closeable {
 
 
   static UpdateResponse softCommit(String url) throws SolrServerException, IOException {
-    HttpSolrClient client = null;
-    try {
-      client = new HttpSolrClient(url);
+
+    try (HttpSolrClient client = new HttpSolrClient(url)) {
       client.setConnectionTimeout(30000);
       client.setSoTimeout(120000);
       UpdateRequest ureq = new UpdateRequest();
       ureq.setParams(new ModifiableSolrParams());
       ureq.setAction(AbstractUpdateRequest.ACTION.COMMIT, false, true, true);
       return ureq.process(client);
-    } finally {
-      if (client != null) {
-        client.shutdown();
-      }
     }
   }
   
diff --git a/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java b/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java
index 6d1fc83..f340ba3 100644
--- a/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java
+++ b/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java
@@ -200,17 +200,14 @@ public class RecoveryStrategy extends Thread implements ClosableThread {
 
   private void commitOnLeader(String leaderUrl) throws SolrServerException,
       IOException {
-    HttpSolrClient server = new HttpSolrClient(leaderUrl);
-    try {
-      server.setConnectionTimeout(30000);
+    try (HttpSolrClient client = new HttpSolrClient(leaderUrl)) {
+      client.setConnectionTimeout(30000);
       UpdateRequest ureq = new UpdateRequest();
       ureq.setParams(new ModifiableSolrParams());
       ureq.getParams().set(DistributedUpdateProcessor.COMMIT_END_POINT, true);
       ureq.getParams().set(UpdateParams.OPEN_SEARCHER, false);
       ureq.setAction(AbstractUpdateRequest.ACTION.COMMIT, false, true).process(
-          server);
-    } finally {
-      server.shutdown();
+          client);
     }
   }
 
@@ -594,9 +591,9 @@ public class RecoveryStrategy extends Thread implements ClosableThread {
   
   private void sendPrepRecoveryCmd(String leaderBaseUrl, String leaderCoreName, Slice slice)
       throws SolrServerException, IOException, InterruptedException, ExecutionException {
-    HttpSolrClient server = new HttpSolrClient(leaderBaseUrl);
-    try {
-      server.setConnectionTimeout(30000);
+
+    try (HttpSolrClient client = new HttpSolrClient(leaderBaseUrl)) {
+      client.setConnectionTimeout(30000);
       WaitForState prepCmd = new WaitForState();
       prepCmd.setCoreName(leaderCoreName);
       prepCmd.setNodeName(zkController.getNodeName());
@@ -607,14 +604,12 @@ public class RecoveryStrategy extends Thread implements ClosableThread {
       if (!Slice.CONSTRUCTION.equals(slice.getState()) && !Slice.RECOVERY.equals(slice.getState())) {
         prepCmd.setOnlyIfLeaderActive(true);
       }
-      HttpUriRequestResponse mrr = server.httpUriRequest(prepCmd);
+      HttpUriRequestResponse mrr = client.httpUriRequest(prepCmd);
       prevSendPreRecoveryHttpUriRequest = mrr.httpUriRequest;
       
       log.info("Sending prep recovery command to {}; {}", leaderBaseUrl, prepCmd.toString());
       
       mrr.future.get();
-    } finally {
-      server.shutdown();
     }
   }
 
diff --git a/solr/core/src/java/org/apache/solr/cloud/SyncStrategy.java b/solr/core/src/java/org/apache/solr/cloud/SyncStrategy.java
index c52f812..1ec4859 100644
--- a/solr/core/src/java/org/apache/solr/cloud/SyncStrategy.java
+++ b/solr/core/src/java/org/apache/solr/cloud/SyncStrategy.java
@@ -267,8 +267,8 @@ public class SyncStrategy {
         recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);
         recoverRequestCmd.setCoreName(coreName);
         
-        HttpSolrClient client = new HttpSolrClient(baseUrl, SyncStrategy.this.client);
-        try {
+        ;
+        try (HttpSolrClient client = new HttpSolrClient(baseUrl, SyncStrategy.this.client)) {
           client.setConnectionTimeout(30000);
           client.setSoTimeout(120000);
           client.request(recoverRequestCmd);
@@ -277,8 +277,6 @@ public class SyncStrategy {
           if (t instanceof Error) {
             throw (Error) t;
           }
-        } finally {
-          client.shutdown();
         }
       }
     };
diff --git a/solr/core/src/java/org/apache/solr/cloud/ZkController.java b/solr/core/src/java/org/apache/solr/cloud/ZkController.java
index 4821527..f7b30e1 100644
--- a/solr/core/src/java/org/apache/solr/cloud/ZkController.java
+++ b/solr/core/src/java/org/apache/solr/cloud/ZkController.java
@@ -50,7 +50,6 @@ import org.apache.solr.core.CloseHook;
 import org.apache.solr.core.CoreContainer;
 import org.apache.solr.core.CoreDescriptor;
 import org.apache.solr.core.SolrCore;
-import org.apache.solr.core.SolrResourceLoader;
 import org.apache.solr.handler.component.ShardHandler;
 import org.apache.solr.update.UpdateLog;
 import org.apache.solr.update.UpdateShardHandler;
@@ -1632,9 +1631,7 @@ public final class ZkController {
         log.info("Replica "+myCoreNodeName+
             " NOT in leader-initiated recovery, need to wait for leader to see down state.");
             
-        HttpSolrClient client = null;
-        client = new HttpSolrClient(leaderBaseUrl);
-        try {
+        try (HttpSolrClient client = new HttpSolrClient(leaderBaseUrl)) {
           client.setConnectionTimeout(15000);
           client.setSoTimeout(120000);
           WaitForState prepCmd = new WaitForState();
@@ -1685,8 +1682,8 @@ public final class ZkController {
               }
             }
           }
-        } finally {
-          client.shutdown();
+        } catch (IOException e) {
+          SolrException.log(log, "Error closing HttpSolrClient", e);
         }
       }
     }
diff --git a/solr/core/src/java/org/apache/solr/handler/SnapPuller.java b/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
index 4271c56..f167ca7 100644
--- a/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
+++ b/solr/core/src/java/org/apache/solr/handler/SnapPuller.java
@@ -16,25 +16,43 @@
  */
 package org.apache.solr.handler;
 
-import static org.apache.solr.handler.ReplicationHandler.ALIAS;
-import static org.apache.solr.handler.ReplicationHandler.CHECKSUM;
-import static org.apache.solr.handler.ReplicationHandler.CMD_DETAILS;
-import static org.apache.solr.handler.ReplicationHandler.CMD_GET_FILE;
-import static org.apache.solr.handler.ReplicationHandler.CMD_GET_FILE_LIST;
-import static org.apache.solr.handler.ReplicationHandler.CMD_INDEX_VERSION;
-import static org.apache.solr.handler.ReplicationHandler.COMMAND;
-import static org.apache.solr.handler.ReplicationHandler.COMPRESSION;
-import static org.apache.solr.handler.ReplicationHandler.CONF_FILES;
-import static org.apache.solr.handler.ReplicationHandler.CONF_FILE_SHORT;
-import static org.apache.solr.handler.ReplicationHandler.EXTERNAL;
-import static org.apache.solr.handler.ReplicationHandler.FILE;
-import static org.apache.solr.handler.ReplicationHandler.FILE_STREAM;
-import static org.apache.solr.handler.ReplicationHandler.GENERATION;
-import static org.apache.solr.handler.ReplicationHandler.INTERNAL;
-import static org.apache.solr.handler.ReplicationHandler.MASTER_URL;
-import static org.apache.solr.handler.ReplicationHandler.NAME;
-import static org.apache.solr.handler.ReplicationHandler.OFFSET;
-import static org.apache.solr.handler.ReplicationHandler.SIZE;
+import org.apache.commons.io.IOUtils;
+import org.apache.http.client.HttpClient;
+import org.apache.lucene.index.IndexCommit;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.SegmentCommitInfo;
+import org.apache.lucene.index.SegmentInfos;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.IOContext;
+import org.apache.lucene.store.IndexInput;
+import org.apache.lucene.store.IndexOutput;
+import org.apache.solr.client.solrj.SolrServerException;
+import org.apache.solr.client.solrj.impl.HttpClientUtil;
+import org.apache.solr.client.solrj.impl.HttpSolrClient;
+import org.apache.solr.client.solrj.request.QueryRequest;
+import org.apache.solr.common.SolrException;
+import org.apache.solr.common.SolrException.ErrorCode;
+import org.apache.solr.common.params.CommonParams;
+import org.apache.solr.common.params.ModifiableSolrParams;
+import org.apache.solr.common.util.ExecutorUtil;
+import org.apache.solr.common.util.FastInputStream;
+import org.apache.solr.common.util.NamedList;
+import org.apache.solr.core.DirectoryFactory;
+import org.apache.solr.core.DirectoryFactory.DirContext;
+import org.apache.solr.core.IndexDeletionPolicyWrapper;
+import org.apache.solr.core.SolrCore;
+import org.apache.solr.handler.ReplicationHandler.FileInfo;
+import org.apache.solr.request.LocalSolrQueryRequest;
+import org.apache.solr.request.SolrQueryRequest;
+import org.apache.solr.search.SolrIndexSearcher;
+import org.apache.solr.update.CommitUpdateCommand;
+import org.apache.solr.util.DefaultSolrThreadFactory;
+import org.apache.solr.util.FileUtils;
+import org.apache.solr.util.PropertiesInputStream;
+import org.apache.solr.util.PropertiesOutputStream;
+import org.apache.solr.util.RefCounted;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -76,43 +94,25 @@ import java.util.zip.Adler32;
 import java.util.zip.Checksum;
 import java.util.zip.InflaterInputStream;
 
-import org.apache.commons.io.IOUtils;
-import org.apache.http.client.HttpClient;
-import org.apache.lucene.index.IndexCommit;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.SegmentCommitInfo;
-import org.apache.lucene.index.SegmentInfos;
-import org.apache.lucene.store.Directory;
-import org.apache.lucene.store.IOContext;
-import org.apache.lucene.store.IndexInput;
-import org.apache.lucene.store.IndexOutput;
-import org.apache.solr.client.solrj.SolrServerException;
-import org.apache.solr.client.solrj.impl.HttpClientUtil;
-import org.apache.solr.client.solrj.impl.HttpSolrClient;
-import org.apache.solr.client.solrj.request.QueryRequest;
-import org.apache.solr.common.SolrException;
-import org.apache.solr.common.SolrException.ErrorCode;
-import org.apache.solr.common.params.CommonParams;
-import org.apache.solr.common.params.ModifiableSolrParams;
-import org.apache.solr.common.util.ExecutorUtil;
-import org.apache.solr.common.util.FastInputStream;
-import org.apache.solr.common.util.NamedList;
-import org.apache.solr.core.DirectoryFactory;
-import org.apache.solr.core.DirectoryFactory.DirContext;
-import org.apache.solr.core.IndexDeletionPolicyWrapper;
-import org.apache.solr.core.SolrCore;
-import org.apache.solr.handler.ReplicationHandler.FileInfo;
-import org.apache.solr.request.LocalSolrQueryRequest;
-import org.apache.solr.request.SolrQueryRequest;
-import org.apache.solr.search.SolrIndexSearcher;
-import org.apache.solr.update.CommitUpdateCommand;
-import org.apache.solr.util.DefaultSolrThreadFactory;
-import org.apache.solr.util.FileUtils;
-import org.apache.solr.util.PropertiesInputStream;
-import org.apache.solr.util.PropertiesOutputStream;
-import org.apache.solr.util.RefCounted;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import static org.apache.solr.handler.ReplicationHandler.ALIAS;
+import static org.apache.solr.handler.ReplicationHandler.CHECKSUM;
+import static org.apache.solr.handler.ReplicationHandler.CMD_DETAILS;
+import static org.apache.solr.handler.ReplicationHandler.CMD_GET_FILE;
+import static org.apache.solr.handler.ReplicationHandler.CMD_GET_FILE_LIST;
+import static org.apache.solr.handler.ReplicationHandler.CMD_INDEX_VERSION;
+import static org.apache.solr.handler.ReplicationHandler.COMMAND;
+import static org.apache.solr.handler.ReplicationHandler.COMPRESSION;
+import static org.apache.solr.handler.ReplicationHandler.CONF_FILES;
+import static org.apache.solr.handler.ReplicationHandler.CONF_FILE_SHORT;
+import static org.apache.solr.handler.ReplicationHandler.EXTERNAL;
+import static org.apache.solr.handler.ReplicationHandler.FILE;
+import static org.apache.solr.handler.ReplicationHandler.FILE_STREAM;
+import static org.apache.solr.handler.ReplicationHandler.GENERATION;
+import static org.apache.solr.handler.ReplicationHandler.INTERNAL;
+import static org.apache.solr.handler.ReplicationHandler.MASTER_URL;
+import static org.apache.solr.handler.ReplicationHandler.NAME;
+import static org.apache.solr.handler.ReplicationHandler.OFFSET;
+import static org.apache.solr.handler.ReplicationHandler.SIZE;
 
 /**
  * <p/> Provides functionality of downloading changed index files as well as config files and a timer for scheduling fetches from the
@@ -246,19 +246,16 @@ public class SnapPuller {
     params.set(CommonParams.WT, "javabin");
     params.set(CommonParams.QT, "/replication");
     QueryRequest req = new QueryRequest(params);
-    HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient); //XXX modify to use shardhandler
-    NamedList rsp;
-    try {
+
+    // TODO modify to use shardhandler
+    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {
       client.setSoTimeout(60000);
       client.setConnectionTimeout(15000);
       
-      rsp = client.request(req);
+      return client.request(req);
     } catch (SolrServerException e) {
       throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);
-    } finally {
-      client.shutdown();
     }
-    return rsp;
   }
 
   /**
@@ -271,8 +268,9 @@ public class SnapPuller {
     params.set(CommonParams.WT, "javabin");
     params.set(CommonParams.QT, "/replication");
     QueryRequest req = new QueryRequest(params);
-    HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient);  //XXX modify to use shardhandler
-    try {
+
+    // TODO modify to use shardhandler
+    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {
       client.setSoTimeout(60000);
       client.setConnectionTimeout(15000);
       NamedList response = client.request(req);
@@ -291,8 +289,6 @@ public class SnapPuller {
 
     } catch (SolrServerException e) {
       throw new IOException(e);
-    } finally {
-      client.shutdown();
     }
   }
 
@@ -1398,8 +1394,8 @@ public class SnapPuller {
       NamedList response;
       InputStream is = null;
 
-      HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null);  //XXX use shardhandler
-      try {
+      // TODO use shardhandler
+      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {
         client.setSoTimeout(60000);
         client.setConnectionTimeout(15000);
         QueryRequest req = new QueryRequest(params);
@@ -1413,8 +1409,6 @@ public class SnapPuller {
         //close stream on error
         IOUtils.closeQuietly(is);
         throw new IOException("Could not download file '" + fileName + "'", e);
-      } finally {
-        client.shutdown();
       }
     }
   }
@@ -1508,17 +1502,14 @@ public class SnapPuller {
     params.set(COMMAND, CMD_DETAILS);
     params.set("slave", false);
     params.set(CommonParams.QT, "/replication");
-    HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient); //XXX use shardhandler
-    NamedList rsp;
-    try {
+
+    // TODO use shardhandler
+    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {
       client.setSoTimeout(60000);
       client.setConnectionTimeout(15000);
       QueryRequest request = new QueryRequest(params);
-      rsp = client.request(request);
-    } finally {
-      client.shutdown();
+      return client.request(request);
     }
-    return rsp;
   }
 
   static Integer readInterval(String interval) {
diff --git a/solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler.java b/solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler.java
index c3b5898..e82c6a6 100644
--- a/solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler.java
@@ -17,66 +17,7 @@ package org.apache.solr.handler.admin;
  * limitations under the License.
  */
 
-import static org.apache.solr.cloud.Overseer.QUEUE_OPERATION;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.ASYNC;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.COLL_CONF;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.CREATE_NODE_SET;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.SHARD_UNIQUE;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.CREATE_NODE_SET_SHUFFLE;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.NUM_SLICES;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.ONLY_ACTIVE_NODES;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.ONLY_IF_DOWN;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.REPLICATION_FACTOR;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.REQUESTID;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.ROUTER;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.SHARDS_PROP;
-import static org.apache.solr.common.cloud.ZkNodeProps.makeMap;
-import static org.apache.solr.common.cloud.ZkStateReader.ACTIVE;
-import static org.apache.solr.common.cloud.ZkStateReader.COLLECTION_PROP;
-import static org.apache.solr.common.cloud.ZkStateReader.CORE_NAME_PROP;
-import static org.apache.solr.common.cloud.ZkStateReader.ELECTION_NODE_PROP;
-import static org.apache.solr.common.cloud.ZkStateReader.LEADER_PROP;
-import static org.apache.solr.common.cloud.ZkStateReader.REJOIN_AT_HEAD_PROP;
-import static org.apache.solr.common.cloud.ZkStateReader.SHARD_ID_PROP;
-import static org.apache.solr.common.cloud.ZkStateReader.PROPERTY_PROP;
-import static org.apache.solr.common.cloud.ZkStateReader.PROPERTY_VALUE_PROP;
-import static org.apache.solr.common.cloud.ZkStateReader.MAX_SHARDS_PER_NODE;
-import static org.apache.solr.common.cloud.ZkStateReader.AUTO_ADD_REPLICAS;
-import static org.apache.solr.common.cloud.ZkStateReader.REPLICA_PROP;
-import static org.apache.solr.common.cloud.ZkStateReader.MAX_AT_ONCE_PROP;
-import static org.apache.solr.common.cloud.ZkStateReader.MAX_WAIT_SECONDS_PROP;
-import static org.apache.solr.common.cloud.ZkStateReader.NODE_NAME_PROP;
-import static org.apache.solr.common.cloud.ZkStateReader.STATE_PROP;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.ADDROLE;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.ADDREPLICAPROP;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.BALANCESHARDUNIQUE;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.CLUSTERPROP;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.CREATE;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.CREATEALIAS;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.CREATESHARD;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.DELETE;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.DELETEALIAS;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.DELETEREPLICA;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.DELETEREPLICAPROP;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.DELETESHARD;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.MIGRATE;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.OVERSEERSTATUS;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.REBALANCELEADERS;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.RELOAD;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.REMOVEROLE;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction.SPLITSHARD;
-
-import java.io.IOException;
-import java.nio.charset.StandardCharsets;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.TimeUnit;
-
+import com.google.common.collect.ImmutableSet;
 import org.apache.commons.lang.StringUtils;
 import org.apache.solr.client.solrj.SolrResponse;
 import org.apache.solr.client.solrj.SolrServerException;
@@ -118,7 +59,65 @@ import org.apache.zookeeper.KeeperException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.collect.ImmutableSet;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.solr.cloud.Overseer.QUEUE_OPERATION;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.ASYNC;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.COLL_CONF;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.CREATE_NODE_SET;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.CREATE_NODE_SET_SHUFFLE;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.NUM_SLICES;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.ONLY_ACTIVE_NODES;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.ONLY_IF_DOWN;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.REPLICATION_FACTOR;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.REQUESTID;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.ROUTER;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.SHARDS_PROP;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.SHARD_UNIQUE;
+import static org.apache.solr.common.cloud.ZkNodeProps.makeMap;
+import static org.apache.solr.common.cloud.ZkStateReader.ACTIVE;
+import static org.apache.solr.common.cloud.ZkStateReader.AUTO_ADD_REPLICAS;
+import static org.apache.solr.common.cloud.ZkStateReader.COLLECTION_PROP;
+import static org.apache.solr.common.cloud.ZkStateReader.CORE_NAME_PROP;
+import static org.apache.solr.common.cloud.ZkStateReader.ELECTION_NODE_PROP;
+import static org.apache.solr.common.cloud.ZkStateReader.LEADER_PROP;
+import static org.apache.solr.common.cloud.ZkStateReader.MAX_AT_ONCE_PROP;
+import static org.apache.solr.common.cloud.ZkStateReader.MAX_SHARDS_PER_NODE;
+import static org.apache.solr.common.cloud.ZkStateReader.MAX_WAIT_SECONDS_PROP;
+import static org.apache.solr.common.cloud.ZkStateReader.NODE_NAME_PROP;
+import static org.apache.solr.common.cloud.ZkStateReader.PROPERTY_PROP;
+import static org.apache.solr.common.cloud.ZkStateReader.PROPERTY_VALUE_PROP;
+import static org.apache.solr.common.cloud.ZkStateReader.REJOIN_AT_HEAD_PROP;
+import static org.apache.solr.common.cloud.ZkStateReader.REPLICA_PROP;
+import static org.apache.solr.common.cloud.ZkStateReader.SHARD_ID_PROP;
+import static org.apache.solr.common.cloud.ZkStateReader.STATE_PROP;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.ADDREPLICAPROP;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.ADDROLE;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.BALANCESHARDUNIQUE;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.CLUSTERPROP;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.CREATE;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.CREATEALIAS;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.CREATESHARD;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.DELETE;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.DELETEALIAS;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.DELETEREPLICA;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.DELETEREPLICAPROP;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.DELETESHARD;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.MIGRATE;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.OVERSEERSTATUS;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.REBALANCELEADERS;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.RELOAD;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.REMOVEROLE;
+import static org.apache.solr.common.params.CollectionParams.CollectionAction.SPLITSHARD;
 
 public class CollectionsHandler extends RequestHandlerBase {
   protected static Logger log = LoggerFactory.getLogger(CollectionsHandler.class);
@@ -773,17 +772,15 @@ public class CollectionsHandler extends RequestHandlerBase {
     ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);
     ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);
     
-    HttpSolrClient server = new HttpSolrClient(nodeProps.getBaseUrl());
-    try {
-      server.setConnectionTimeout(15000);
-      server.setSoTimeout(60000);
+    ;
+    try (HttpSolrClient client = new HttpSolrClient(nodeProps.getBaseUrl())) {
+      client.setConnectionTimeout(15000);
+      client.setSoTimeout(60000);
       RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();
       reqSyncShard.setCollection(collection);
       reqSyncShard.setShard(shard);
       reqSyncShard.setCoreName(nodeProps.getCoreName());
-      server.request(reqSyncShard);
-    } finally {
-      server.shutdown();
+      client.request(reqSyncShard);
     }
   }
   
diff --git a/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java b/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
index c0ce99d..88d548a 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
@@ -152,11 +152,8 @@ public class HttpShardHandler extends ShardHandler {
           if (urls.size() <= 1) {
             String url = urls.get(0);
             srsp.setShardAddress(url);
-            SolrClient client = new HttpSolrClient(url, httpClient);
-            try {
+            try (SolrClient client = new HttpSolrClient(url, httpClient)) {
               ssr.nl = client.request(req);
-            } finally {
-              client.shutdown();
             }
           } else {
             LBHttpSolrClient.Rsp rsp = httpShardHandlerFactory.makeLoadBalancedRequest(req, urls);
diff --git a/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java b/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java
index 5ac7699..cc2d139 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java
@@ -16,18 +16,6 @@ package org.apache.solr.handler.component;
  * limitations under the License.
  */
 
-import java.io.IOException;
-import java.util.Collections;
-import java.util.List;
-import java.util.Random;
-import java.util.concurrent.ArrayBlockingQueue;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.CompletionService;
-import java.util.concurrent.ExecutorCompletionService;
-import java.util.concurrent.SynchronousQueue;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
-
 import org.apache.commons.lang.StringUtils;
 import org.apache.http.client.HttpClient;
 import org.apache.http.impl.client.DefaultHttpClient;
@@ -47,6 +35,18 @@ import org.apache.solr.util.DefaultSolrThreadFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.IOException;
+import java.util.Collections;
+import java.util.List;
+import java.util.Random;
+import java.util.concurrent.ArrayBlockingQueue;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.CompletionService;
+import java.util.concurrent.ExecutorCompletionService;
+import java.util.concurrent.SynchronousQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
 
 public class HttpShardHandlerFactory extends ShardHandlerFactory implements org.apache.solr.util.plugin.PluginInfoInitialized {
   protected static Logger log = LoggerFactory.getLogger(HttpShardHandlerFactory.class);
@@ -208,7 +208,7 @@ public class HttpShardHandlerFactory extends ShardHandlerFactory implements org.
       } finally {
         
         if (loadbalancer != null) {
-          loadbalancer.shutdown();
+          loadbalancer.close();
         }
       }
     }
diff --git a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java
index f63041e..60c165c 100644
--- a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java
+++ b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java
@@ -19,12 +19,13 @@ package org.apache.solr.schema;
 import org.apache.commons.io.IOUtils;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.util.CharFilterFactory;
+import org.apache.lucene.analysis.util.ResourceLoaderAware;
 import org.apache.lucene.analysis.util.TokenFilterFactory;
 import org.apache.lucene.analysis.util.TokenizerFactory;
 import org.apache.solr.analysis.TokenizerChain;
+import org.apache.solr.client.solrj.SolrClient;
 import org.apache.solr.client.solrj.SolrRequest;
 import org.apache.solr.client.solrj.SolrResponse;
-import org.apache.solr.client.solrj.SolrClient;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.impl.HttpSolrClient;
 import org.apache.solr.cloud.ZkController;
@@ -47,7 +48,6 @@ import org.apache.solr.core.SolrResourceLoader;
 import org.apache.solr.rest.schema.FieldTypeXmlAdapter;
 import org.apache.solr.util.DefaultSolrThreadFactory;
 import org.apache.solr.util.FileUtils;
-import org.apache.lucene.analysis.util.ResourceLoaderAware;
 import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.data.Stat;
@@ -58,7 +58,6 @@ import org.xml.sax.InputSource;
 import javax.xml.xpath.XPath;
 import javax.xml.xpath.XPathConstants;
 import javax.xml.xpath.XPathExpressionException;
-
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -80,9 +79,6 @@ import java.util.concurrent.Executors;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 
-import static java.util.Collections.singletonList;
-import static java.util.Collections.singletonMap;
-
 /** Solr-managed schema - non-user-editable, but can be mutable via internal and external REST API requests. */
 public final class ManagedIndexSchema extends IndexSchema {
 
@@ -331,9 +327,8 @@ public final class ManagedIndexSchema extends IndexSchema {
 
     @Override
     public Integer call() throws Exception {
-      HttpSolrClient solr = new HttpSolrClient(coreUrl);
       int remoteVersion = -1;
-      try {
+      try (HttpSolrClient solr = new HttpSolrClient(coreUrl)) {
         // eventually, this loop will get killed by the ExecutorService's timeout
         while (remoteVersion == -1 || remoteVersion < expectedZkVersion) {
           try {
@@ -358,10 +353,7 @@ public final class ManagedIndexSchema extends IndexSchema {
             }
           }
         }
-      } finally {
-        solr.shutdown();
       }
-
       return remoteVersion;
     }
 
diff --git a/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java b/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
index a60d271..8f556e1 100644
--- a/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
+++ b/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
@@ -252,14 +252,11 @@ public class SolrCmdDistributor {
   private void submit(final Req req, boolean isCommit) {
     if (req.synchronous) {
       blockAndDoRetries();
-      
-      HttpSolrClient client = new HttpSolrClient(req.node.getUrl(), clients.getHttpClient());
-      try {
+
+      try (HttpSolrClient client = new HttpSolrClient(req.node.getUrl(), clients.getHttpClient())) {
         client.request(req.uReq);
       } catch (Exception e) {
         throw new SolrException(ErrorCode.SERVER_ERROR, "Failed synchronous update on shard " + req.node + " update: " + req.uReq , e);
-      } finally {
-        client.shutdown();
       }
       
       return;
diff --git a/solr/core/src/java/org/apache/solr/update/StreamingSolrClients.java b/solr/core/src/java/org/apache/solr/update/StreamingSolrClients.java
index 381d7cb..935de07 100644
--- a/solr/core/src/java/org/apache/solr/update/StreamingSolrClients.java
+++ b/solr/core/src/java/org/apache/solr/update/StreamingSolrClients.java
@@ -106,7 +106,7 @@ public class StreamingSolrClients {
   
   public synchronized void shutdown() {
     for (ConcurrentUpdateSolrClient client : solrClients.values()) {
-      client.shutdown();
+      client.close();
     }
   }
   
diff --git a/solr/core/src/java/org/apache/solr/util/SolrCLI.java b/solr/core/src/java/org/apache/solr/util/SolrCLI.java
index e02b97a..a1be0d0 100644
--- a/solr/core/src/java/org/apache/solr/util/SolrCLI.java
+++ b/solr/core/src/java/org/apache/solr/util/SolrCLI.java
@@ -113,10 +113,8 @@ public class SolrCLI {
       
       log.debug("Connecting to Solr cluster: " + zkHost);
       int exitStatus = 0;
-      CloudSolrClient cloudSolrClient = null;
-      try {
-        cloudSolrClient = new CloudSolrClient(zkHost);
-        
+      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {
+
         String collection = cli.getOptionValue("collection");
         if (collection != null)
           cloudSolrClient.setDefaultCollection(collection);
@@ -132,12 +130,6 @@ public class SolrCLI {
         } else {
           throw exc;
         }
-      } finally {
-        if (cloudSolrClient != null) {
-          try {
-            cloudSolrClient.shutdown();
-          } catch (Exception ignore) {}
-        }
       }
       
       return exitStatus;
@@ -973,12 +965,13 @@ public class SolrCLI {
             replicaStatus = ZkStateReader.DOWN;
           } else {
             // query this replica directly to get doc count and assess health
-            HttpSolrClient solr = new HttpSolrClient(coreUrl);
-            String solrUrl = solr.getBaseURL();
             q = new SolrQuery("*:*");
             q.setRows(0);
             q.set("distrib", "false");
-            try {
+            try (HttpSolrClient solr = new HttpSolrClient(coreUrl)) {
+
+              String solrUrl = solr.getBaseURL();
+
               qr = solr.query(q);
               numDocs = qr.getResults().getNumFound();
 
@@ -993,15 +986,13 @@ public class SolrCLI {
               // if we get here, we can trust the state
               replicaStatus = replicaCoreProps.getState();
             } catch (Exception exc) {
-              log.error("ERROR: " + exc + " when trying to reach: " + solrUrl);
+              log.error("ERROR: " + exc + " when trying to reach: " + coreUrl);
 
               if (checkCommunicationError(exc)) {
                 replicaStatus = "down";
               } else {
                 replicaStatus = "error: "+exc;
               }
-            } finally {
-              solr.shutdown();
             }
           }
 
@@ -1161,9 +1152,8 @@ public class SolrCLI {
       }
 
       int toolExitStatus = 0;
-      CloudSolrClient cloudSolrServer = null;
-      try {
-        cloudSolrServer = new CloudSolrClient(zkHost);
+
+      try (CloudSolrClient cloudSolrServer = new CloudSolrClient(zkHost)) {
         System.out.println("Connecting to ZooKeeper at " + zkHost);
         cloudSolrServer.connect();
         toolExitStatus = runCloudTool(cloudSolrServer, cli);
@@ -1176,12 +1166,6 @@ public class SolrCLI {
         } else {
           throw exc;
         }
-      } finally {
-        if (cloudSolrServer != null) {
-          try {
-            cloudSolrServer.shutdown();
-          } catch (Exception ignore) {}
-        }
       }
 
       return toolExitStatus;
@@ -1600,12 +1584,10 @@ public class SolrCLI {
       String zkHost = getZkHost(cli);
 
       int toolExitStatus = 0;
-      CloudSolrClient cloudSolrServer = null;
-      try {
-        cloudSolrServer = new CloudSolrClient(zkHost);
+      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {
         System.out.println("Connecting to ZooKeeper at " + zkHost);
-        cloudSolrServer.connect();
-        toolExitStatus = deleteCollection(cloudSolrServer, cli);
+        cloudSolrClient.connect();
+        toolExitStatus = deleteCollection(cloudSolrClient, cli);
       } catch (Exception exc) {
         // since this is a CLI, spare the user the stacktrace
         String excMsg = exc.getMessage();
@@ -1615,12 +1597,6 @@ public class SolrCLI {
         } else {
           throw exc;
         }
-      } finally {
-        if (cloudSolrServer != null) {
-          try {
-            cloudSolrServer.shutdown();
-          } catch (Exception ignore) {}
-        }
       }
 
       return toolExitStatus;
diff --git a/solr/core/src/test/org/apache/solr/TestTolerantSearch.java b/solr/core/src/test/org/apache/solr/TestTolerantSearch.java
index 354df28..4e3581e 100644
--- a/solr/core/src/test/org/apache/solr/TestTolerantSearch.java
+++ b/solr/core/src/test/org/apache/solr/TestTolerantSearch.java
@@ -69,17 +69,13 @@ public class TestTolerantSearch extends SolrJettyTestBase {
     shard2 = urlCollection2.replaceAll("https?://", "");
     
     //create second core
-    HttpSolrClient nodeClient = new HttpSolrClient(url);
-    try {
+    try (HttpSolrClient nodeClient = new HttpSolrClient(url)) {
       CoreAdminRequest.Create req = new CoreAdminRequest.Create();
       req.setCoreName("collection2");
       req.setConfigSet("collection1");
       nodeClient.request(req);
     }
-    finally {
-      nodeClient.shutdown();
-    }
-    
+
     SolrInputDocument doc = new SolrInputDocument();
     doc.setField("id", "1");
     doc.setField("subject", "batman");
@@ -103,8 +99,8 @@ public class TestTolerantSearch extends SolrJettyTestBase {
   
   @AfterClass
   public static void destroyThings() throws Exception {
-    collection1.shutdown();
-    collection2.shutdown();
+    collection1.close();
+    collection2.close();
     collection1 = null;
     collection2 = null;
     jetty.stop();
diff --git a/solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest.java b/solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest.java
index fed79f7..e0eb3e7 100644
--- a/solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest.java
@@ -17,10 +17,6 @@ package org.apache.solr.cloud;
  * limitations under the License.
  */
 
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-
 import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.apache.solr.client.solrj.SolrClient;
 import org.apache.solr.client.solrj.SolrQuery;
@@ -43,6 +39,10 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.junit.Test;
 
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * Test sync phase that occurs when Leader goes down and a new Leader is
  * elected.
@@ -134,61 +134,55 @@ public class AliasIntegrationTest extends AbstractFullDistribZkTestBase {
     query.set("collection", "testalias");
     JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));
     int port = jetty.getLocalPort();
-    HttpSolrClient client = new HttpSolrClient(buildUrl(port) + "/testalias");
-    res = client.query(query);
-    assertEquals(3, res.getResults().getNumFound());
-    client.shutdown();
-    client = null;
-    
+    try (HttpSolrClient client = new HttpSolrClient(buildUrl(port) + "/testalias")) {
+      res = client.query(query);
+      assertEquals(3, res.getResults().getNumFound());
+    }
+
     // now without collections param
     query = new SolrQuery("*:*");
     jetty = jettys.get(random().nextInt(jettys.size()));
     port = jetty.getLocalPort();
-    client = new HttpSolrClient(buildUrl(port) + "/testalias");
-    res = client.query(query);
-    assertEquals(3, res.getResults().getNumFound());
-    client.shutdown();
-    client = null;
-    
+    try (HttpSolrClient client = new HttpSolrClient(buildUrl(port) + "/testalias")) {
+      res = client.query(query);
+      assertEquals(3, res.getResults().getNumFound());
+    }
     // create alias, collection2 first because it's not on every node
     createAlias("testalias", "collection2,collection1");
     
     // search with new cloud client
-    CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());
-    cloudSolrClient.setParallelUpdates(random().nextBoolean());
-    query = new SolrQuery("*:*");
-    query.set("collection", "testalias");
-    res = cloudSolrClient.query(query);
-    assertEquals(5, res.getResults().getNumFound());
-    
-    // Try with setDefaultCollection
-    query = new SolrQuery("*:*");
-    cloudSolrClient.setDefaultCollection("testalias");
-    res = cloudSolrClient.query(query);
-    cloudSolrClient.shutdown();
-    assertEquals(5, res.getResults().getNumFound());
-    
+    try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean())) {
+      cloudSolrClient.setParallelUpdates(random().nextBoolean());
+      query = new SolrQuery("*:*");
+      query.set("collection", "testalias");
+      res = cloudSolrClient.query(query);
+      assertEquals(5, res.getResults().getNumFound());
+
+      // Try with setDefaultCollection
+      query = new SolrQuery("*:*");
+      cloudSolrClient.setDefaultCollection("testalias");
+      res = cloudSolrClient.query(query);
+      assertEquals(5, res.getResults().getNumFound());
+    }
+
     // search for alias with random non cloud client
     query = new SolrQuery("*:*");
     query.set("collection", "testalias");
     jetty = jettys.get(random().nextInt(jettys.size()));
     port = jetty.getLocalPort();
-    client = new HttpSolrClient(buildUrl(port) + "/testalias");
-    res = client.query(query);
-    assertEquals(5, res.getResults().getNumFound());
-    client.shutdown();
-    client = null;
-    
+    try (HttpSolrClient client = new HttpSolrClient(buildUrl(port) + "/testalias")) {
+      res = client.query(query);
+      assertEquals(5, res.getResults().getNumFound());
+    }
     // now without collections param
     query = new SolrQuery("*:*");
     jetty = jettys.get(random().nextInt(jettys.size()));
     port = jetty.getLocalPort();
-    client = new HttpSolrClient(buildUrl(port) + "/testalias");
-    res = client.query(query);
-    assertEquals(5, res.getResults().getNumFound());
-    client.shutdown();
-    client = null;
-    
+    try (HttpSolrClient client = new HttpSolrClient(buildUrl(port) + "/testalias")) {
+      res = client.query(query);
+      assertEquals(5, res.getResults().getNumFound());
+    }
+
     // update alias
     createAlias("testalias", "collection2");
     //checkForAlias("testalias", "collection2");
@@ -211,31 +205,23 @@ public class AliasIntegrationTest extends AbstractFullDistribZkTestBase {
     // try a std client
     // search 1 and 2, but have no collections param
     query = new SolrQuery("*:*");
-    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + "/testalias");
-    try {
+    try (HttpSolrClient client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + "/testalias")) {
       res = client.query(query);
       assertEquals(5, res.getResults().getNumFound());
-    } finally {
-      client.shutdown();
-      client = null;
     }
-    
+
     createAlias("testalias", "collection2");
     
     // a second alias
     createAlias("testalias2", "collection2");
-    
-    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + "/testalias");
-    try {
+
+    try (HttpSolrClient client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + "/testalias")) {
       SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,
           "humpty dumpy4 sat on a walls");
       client.add(doc8);
       client.commit();
       res = client.query(query);
       assertEquals(3, res.getResults().getNumFound());
-    } finally {
-      client.shutdown();
-      client = null;
     }
     
     createAlias("testalias", "collection2,collection1");
@@ -261,9 +247,8 @@ public class AliasIntegrationTest extends AbstractFullDistribZkTestBase {
 
   private void createAlias(String alias, String collections)
       throws SolrServerException, IOException {
-    SolrClient client = createNewSolrClient("",
-        getBaseUrl((HttpSolrClient) clients.get(0)));
-    try {
+
+    try (SolrClient client = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)))) {
       if (random().nextBoolean()) {
         ModifiableSolrParams params = new ModifiableSolrParams();
         params.set("collections", collections);
@@ -278,28 +263,25 @@ public class AliasIntegrationTest extends AbstractFullDistribZkTestBase {
         request.setAliasedCollections(collections);
         request.process(client);
       }
-    } finally {
-      client.shutdown();
     }
   }
   
   private void deleteAlias(String alias) throws SolrServerException,
       IOException {
-    SolrClient client = createNewSolrClient("",
-        getBaseUrl((HttpSolrClient) clients.get(0)));
-    if (random().nextBoolean()) {
-      ModifiableSolrParams params = new ModifiableSolrParams();
-      params.set("name", alias);
-      params.set("action", CollectionAction.DELETEALIAS.toString());
-      QueryRequest request = new QueryRequest(params);
-      request.setPath("/admin/collections");
-      client.request(request);
-    } else {
-      DeleteAlias request = new DeleteAlias();
-      request.setAliasName(alias);
-      request.process(client);
+    try (SolrClient client = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)))) {
+      if (random().nextBoolean()) {
+        ModifiableSolrParams params = new ModifiableSolrParams();
+        params.set("name", alias);
+        params.set("action", CollectionAction.DELETEALIAS.toString());
+        QueryRequest request = new QueryRequest(params);
+        request.setPath("/admin/collections");
+        client.request(request);
+      } else {
+        DeleteAlias request = new DeleteAlias();
+        request.setAliasName(alias);
+        request.process(client);
+      }
     }
-    client.shutdown();
   }
   
   protected void indexDoc(List<CloudJettyRunner> skipServers, Object... fields) throws IOException,
diff --git a/solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest.java b/solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest.java
index 7e7b4ad..fa5689d 100644
--- a/solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest.java
@@ -112,14 +112,9 @@ public class AsyncMigrateRouteKeyTest extends MigrateRouteKeyTest {
         .getBaseURL();
     baseUrl = baseUrl.substring(0, baseUrl.length() - "collection1".length());
 
-    HttpSolrClient baseServer = null;
-
-    try {
-      baseServer = new HttpSolrClient(baseUrl);
+    try (HttpSolrClient baseServer = new HttpSolrClient(baseUrl)) {
       baseServer.setConnectionTimeout(15000);
       return baseServer.request(request);
-    } finally {
-      baseServer.shutdown();
     }
   }
 }
diff --git a/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test.java b/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test.java
index 6aa4713..829b044 100644
--- a/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test.java
+++ b/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test.java
@@ -148,11 +148,9 @@ public class BasicDistributedZk2Test extends AbstractFullDistribZkTestBase {
     
   }
   
-  private void testNodeWithoutCollectionForwarding() throws Exception,
-      SolrServerException, IOException {
-    try {
-      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));
-      HttpSolrClient client = new HttpSolrClient(baseUrl);
+  private void testNodeWithoutCollectionForwarding() throws Exception {
+    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));
+    try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {
       client.setConnectionTimeout(30000);
       Create createCmd = new Create();
       createCmd.setRoles("none");
@@ -161,7 +159,6 @@ public class BasicDistributedZk2Test extends AbstractFullDistribZkTestBase {
       createCmd.setNumShards(1);
       createCmd.setDataDir(getDataDir(createTempDir(ONE_NODE_COLLECTION).toFile().getAbsolutePath()));
       client.request(createCmd);
-      client.shutdown();
     } catch (Exception e) {
       e.printStackTrace();
       fail(e.getMessage());
@@ -174,8 +171,8 @@ public class BasicDistributedZk2Test extends AbstractFullDistribZkTestBase {
     
     int docs = 2;
     for (SolrClient client : clients) {
-      final String baseUrl = getBaseUrl((HttpSolrClient) client);
-      addAndQueryDocs(baseUrl, docs);
+      final String clientUrl = getBaseUrl((HttpSolrClient) client);
+      addAndQueryDocs(clientUrl, docs);
       docs += 2;
     }
   }
@@ -183,36 +180,39 @@ public class BasicDistributedZk2Test extends AbstractFullDistribZkTestBase {
   // 2 docs added every call
   private void addAndQueryDocs(final String baseUrl, int docs)
       throws Exception {
-    HttpSolrClient qclient = new HttpSolrClient(baseUrl + "/onenodecollection" + "core");
-    
-    // it might take a moment for the proxy node to see us in their cloud state
-    waitForNon403or404or503(qclient);
-    
-    // add a doc
-    SolrInputDocument doc = new SolrInputDocument();
-    doc.addField("id", docs);
-    qclient.add(doc);
-    qclient.commit();
-    
+
     SolrQuery query = new SolrQuery("*:*");
-    QueryResponse results = qclient.query(query);
-    assertEquals(docs - 1, results.getResults().getNumFound());
-    qclient.shutdown();
-    
-    qclient = new HttpSolrClient(baseUrl + "/onenodecollection");
-    results = qclient.query(query);
-    assertEquals(docs - 1, results.getResults().getNumFound());
-    
-    doc = new SolrInputDocument();
-    doc.addField("id", docs + 1);
-    qclient.add(doc);
-    qclient.commit();
-    
-    query = new SolrQuery("*:*");
-    query.set("rows", 0);
-    results = qclient.query(query);
-    assertEquals(docs, results.getResults().getNumFound());
-    qclient.shutdown();
+
+    try (HttpSolrClient qclient = new HttpSolrClient(baseUrl + "/onenodecollection" + "core")) {
+
+      // it might take a moment for the proxy node to see us in their cloud state
+      waitForNon403or404or503(qclient);
+
+      // add a doc
+      SolrInputDocument doc = new SolrInputDocument();
+      doc.addField("id", docs);
+      qclient.add(doc);
+      qclient.commit();
+
+
+      QueryResponse results = qclient.query(query);
+      assertEquals(docs - 1, results.getResults().getNumFound());
+    }
+    
+    try (HttpSolrClient qclient = new HttpSolrClient(baseUrl + "/onenodecollection")) {
+      QueryResponse results = qclient.query(query);
+      assertEquals(docs - 1, results.getResults().getNumFound());
+
+      SolrInputDocument doc = new SolrInputDocument();
+      doc.addField("id", docs + 1);
+      qclient.add(doc);
+      qclient.commit();
+
+      query = new SolrQuery("*:*");
+      query.set("rows", 0);
+      results = qclient.query(query);
+      assertEquals(docs, results.getResults().getNumFound());
+    }
   }
   
   private long testUpdateAndDelete() throws Exception {
diff --git a/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java b/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
index 97ecca8..2713351 100644
--- a/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
@@ -18,6 +18,7 @@ package org.apache.solr.cloud;
  */
 
 import org.apache.commons.lang.StringUtils;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.apache.solr.JSONTestUtil;
 import org.apache.solr.SolrTestCaseJ4.SuppressSSL;
@@ -378,14 +379,11 @@ public class BasicDistributedZkTest extends AbstractFullDistribZkTestBase {
     createCmd.setSchemaName("nonexistent_schema.xml");
     
     String url = getBaseUrl(clients.get(0));
-    final HttpSolrClient client = new HttpSolrClient(url);
-    try {
+    try (final HttpSolrClient client = new HttpSolrClient(url)) {
       client.request(createCmd);
       fail("Expected SolrCore create to fail");
     } catch (Exception e) {
       
-    } finally {
-      client.shutdown();
     }
     
     long timeout = System.currentTimeMillis() + 15000;
@@ -506,20 +504,20 @@ public class BasicDistributedZkTest extends AbstractFullDistribZkTestBase {
   private void testStopAndStartCoresInOneInstance() throws Exception {
     SolrClient client = clients.get(0);
     String url3 = getBaseUrl(client);
-    final HttpSolrClient httpSolrClient = new HttpSolrClient(url3);
-    httpSolrClient.setConnectionTimeout(15000);
-    httpSolrClient.setSoTimeout(60000);
-    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,
-        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),
-        new DefaultSolrThreadFactory("testExecutor"));
-    int cnt = 3;
-    
-    // create the cores
-    createCores(httpSolrClient, executor, "multiunload2", 1, cnt);
-    
-    executor.shutdown();
-    executor.awaitTermination(120, TimeUnit.SECONDS);
-    httpSolrClient.shutdown();
+    try (final HttpSolrClient httpSolrClient = new HttpSolrClient(url3)) {
+      httpSolrClient.setConnectionTimeout(15000);
+      httpSolrClient.setSoTimeout(60000);
+      ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,
+          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),
+          new DefaultSolrThreadFactory("testExecutor"));
+      int cnt = 3;
+
+      // create the cores
+      createCores(httpSolrClient, executor, "multiunload2", 1, cnt);
+
+      executor.shutdown();
+      executor.awaitTermination(120, TimeUnit.SECONDS);
+    }
     
     ChaosMonkey.stop(cloudJettys.get(0).jetty);
     printLayout();
@@ -603,9 +601,9 @@ public class BasicDistributedZkTest extends AbstractFullDistribZkTestBase {
           ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().length()
               - DEFAULT_COLLECTION.length() - 1);
       
-      SolrClient aClient = createNewSolrClient("", baseUrl);
-      res.setResponse(aClient.request(request));
-      aClient.shutdown();
+      try (SolrClient aClient = createNewSolrClient("", baseUrl)) {
+        res.setResponse(aClient.request(request));
+      }
     } else {
       res.setResponse(client.request(request));
     }
@@ -728,21 +726,20 @@ public class BasicDistributedZkTest extends AbstractFullDistribZkTestBase {
 
   private Long getNumCommits(HttpSolrClient sourceClient) throws
       SolrServerException, IOException {
-    HttpSolrClient client = new HttpSolrClient(sourceClient.getBaseURL());
-    client.setConnectionTimeout(15000);
-    client.setSoTimeout(60000);
-    ModifiableSolrParams params = new ModifiableSolrParams();
-    params.set("qt", "/admin/mbeans?key=updateHandler&stats=true");
-    // use generic request to avoid extra processing of queries
-    QueryRequest req = new QueryRequest(params);
-    NamedList<Object> resp = client.request(req);
-    NamedList mbeans = (NamedList) resp.get("solr-mbeans");
-    NamedList uhandlerCat = (NamedList) mbeans.get("UPDATEHANDLER");
-    NamedList uhandler = (NamedList) uhandlerCat.get("updateHandler");
-    NamedList stats = (NamedList) uhandler.get("stats");
-    Long commits = (Long) stats.get("commits");
-    client.shutdown();
-    return commits;
+    try (HttpSolrClient client = new HttpSolrClient(sourceClient.getBaseURL())) {
+      client.setConnectionTimeout(15000);
+      client.setSoTimeout(60000);
+      ModifiableSolrParams params = new ModifiableSolrParams();
+      params.set("qt", "/admin/mbeans?key=updateHandler&stats=true");
+      // use generic request to avoid extra processing of queries
+      QueryRequest req = new QueryRequest(params);
+      NamedList<Object> resp = client.request(req);
+      NamedList mbeans = (NamedList) resp.get("solr-mbeans");
+      NamedList uhandlerCat = (NamedList) mbeans.get("UPDATEHANDLER");
+      NamedList uhandler = (NamedList) uhandlerCat.get("updateHandler");
+      NamedList stats = (NamedList) uhandler.get("stats");
+      return (Long) stats.get("commits");
+    }
   }
 
   private void testANewCollectionInOneInstanceWithManualShardAssignement() throws Exception {
@@ -820,32 +817,30 @@ public class BasicDistributedZkTest extends AbstractFullDistribZkTestBase {
     ZkCoreNodeProps props = new ZkCoreNodeProps(getCommonCloudSolrClient().getZkStateReader().getClusterState().getLeader(oneInstanceCollection2, "slice1"));
     
     // now test that unloading a core gets us a new leader
-    HttpSolrClient unloadClient = new HttpSolrClient(baseUrl);
-    unloadClient.setConnectionTimeout(15000);
-    unloadClient.setSoTimeout(60000);
-    Unload unloadCmd = new Unload(true);
-    unloadCmd.setCoreName(props.getCoreName());
-    
-    String leader = props.getCoreUrl();
-    
-    unloadClient.request(unloadCmd);
-    unloadClient.shutdown();
-    
-    int tries = 50;
-    while (leader.equals(zkStateReader.getLeaderUrl(oneInstanceCollection2, "slice1", 10000))) {
-      Thread.sleep(100);
-      if (tries-- == 0) {
-        fail("Leader never changed");
+    try (HttpSolrClient unloadClient = new HttpSolrClient(baseUrl)) {
+      unloadClient.setConnectionTimeout(15000);
+      unloadClient.setSoTimeout(60000);
+      Unload unloadCmd = new Unload(true);
+      unloadCmd.setCoreName(props.getCoreName());
+
+      String leader = props.getCoreUrl();
+
+      unloadClient.request(unloadCmd);
+
+      int tries = 50;
+      while (leader.equals(zkStateReader.getLeaderUrl(oneInstanceCollection2, "slice1", 10000))) {
+        Thread.sleep(100);
+        if (tries-- == 0) {
+          fail("Leader never changed");
+        }
       }
     }
 
-    for (SolrClient aClient : collectionClients) {
-      aClient.shutdown();
-    }
+    IOUtils.close(collectionClients);
 
   }
 
-  private void testSearchByCollectionName() throws SolrServerException {
+  private void testSearchByCollectionName() throws SolrServerException, IOException {
     log.info("### STARTING testSearchByCollectionName");
     SolrClient client = clients.get(0);
     final String baseUrl = ((HttpSolrClient) client).getBaseURL().substring(
@@ -855,11 +850,11 @@ public class BasicDistributedZkTest extends AbstractFullDistribZkTestBase {
     
     // the cores each have different names, but if we add the collection name to the url
     // we should get mapped to the right core
-    SolrClient client1 = createNewSolrClient(oneInstanceCollection, baseUrl);
-    SolrQuery query = new SolrQuery("*:*");
-    long oneDocs = client1.query(query).getResults().getNumFound();
-    assertEquals(3, oneDocs);
-    client1.shutdown();
+    try (SolrClient client1 = createNewSolrClient(oneInstanceCollection, baseUrl)) {
+      SolrQuery query = new SolrQuery("*:*");
+      long oneDocs = client1.query(query).getResults().getNumFound();
+      assertEquals(3, oneDocs);
+    }
   }
   
   private void testUpdateByCollectionName() throws SolrServerException, IOException {
@@ -873,9 +868,9 @@ public class BasicDistributedZkTest extends AbstractFullDistribZkTestBase {
     // the cores each have different names, but if we add the collection name to the url
     // we should get mapped to the right core
     // test hitting an update url
-    SolrClient client1 = createNewSolrClient(oneInstanceCollection, baseUrl);
-    client1.commit();
-    client1.shutdown();
+    try (SolrClient client1 = createNewSolrClient(oneInstanceCollection, baseUrl)) {
+      client1.commit();
+    }
   }
 
   private void testANewCollectionInOneInstance() throws Exception {
@@ -929,9 +924,8 @@ public class BasicDistributedZkTest extends AbstractFullDistribZkTestBase {
 //    System.out.println("All Docs:" + allDocs);
     
     assertEquals(3, allDocs);
-    for(SolrClient newCollectionClient:collectionClients) {
-      newCollectionClient.shutdown();
-    }
+    IOUtils.close(collectionClients);
+
   }
 
   private void createCollection(String collection,
@@ -945,9 +939,7 @@ public class BasicDistributedZkTest extends AbstractFullDistribZkTestBase {
     Callable call = new Callable() {
       @Override
       public Object call() {
-        HttpSolrClient client = null;
-        try {
-          client = new HttpSolrClient(baseUrl);
+        try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {
           client.setConnectionTimeout(15000);
           Create createCmd = new Create();
           createCmd.setRoles("none");
@@ -970,10 +962,6 @@ public class BasicDistributedZkTest extends AbstractFullDistribZkTestBase {
         } catch (Exception e) {
           e.printStackTrace();
           //fail
-        } finally {
-          if (client != null) {
-            client.shutdown();
-          }
         }
         return null;
       }
@@ -1082,9 +1070,8 @@ public class BasicDistributedZkTest extends AbstractFullDistribZkTestBase {
       Callable call = new Callable() {
         @Override
         public Object call() {
-          HttpSolrClient client = null;
-          try {
-            client = new HttpSolrClient(baseUrl);
+
+          try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {
             client.setConnectionTimeout(15000);
             client.setSoTimeout(60000);
             Create createCmd = new Create();
@@ -1094,10 +1081,6 @@ public class BasicDistributedZkTest extends AbstractFullDistribZkTestBase {
           } catch (Exception e) {
             e.printStackTrace();
             //fails
-          } finally {
-            if (client != null) {
-              client.shutdown();
-            }
           }
           return null;
         }
@@ -1160,13 +1143,11 @@ public class BasicDistributedZkTest extends AbstractFullDistribZkTestBase {
   public void distribTearDown() throws Exception {
     super.distribTearDown();
     if (commondCloudSolrClient != null) {
-      commondCloudSolrClient.shutdown();
+      commondCloudSolrClient.close();
     }
     if (otherCollectionClients != null) {
       for (List<SolrClient> clientList : otherCollectionClients.values()) {
-        for (SolrClient client : clientList) {
-          client.shutdown();
-        }
+        IOUtils.close(clientList);
       }
     }
     otherCollectionClients = null;
diff --git a/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java b/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java
index 2f52099..75f1d36 100644
--- a/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest.java
@@ -250,13 +250,11 @@ public class ChaosMonkeyNothingIsSafeTest extends AbstractFullDistribZkTestBase
         zkServer.run();
       }
       
-      CloudSolrClient client = createCloudClient("collection1");
-      try {
+
+      try (CloudSolrClient client = createCloudClient("collection1")) {
           createCollection(null, "testcollection",
               1, 1, 1, client, null, "conf1");
 
-      } finally {
-        client.shutdown();
       }
       List<Integer> numShardsNumReplicas = new ArrayList<>(2);
       numShardsNumReplicas.add(1);
diff --git a/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest.java b/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest.java
index 412fe3d..5df3dcb 100644
--- a/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest.java
@@ -17,10 +17,6 @@ package org.apache.solr.cloud;
  * limitations under the License.
  */
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.TimeUnit;
-
 import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.apache.solr.client.solrj.SolrQuery;
 import org.apache.solr.client.solrj.SolrServerException;
@@ -32,6 +28,10 @@ import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+
 @Slow
 public class ChaosMonkeySafeLeaderTest extends AbstractFullDistribZkTestBase {
   
@@ -168,14 +168,10 @@ public class ChaosMonkeySafeLeaderTest extends AbstractFullDistribZkTestBase {
       zkServer = new ZkTestServer(zkServer.getZkDir(), zkServer.getPort());
       zkServer.run();
     }
-    
-    CloudSolrClient client = createCloudClient("collection1");
-    try {
-        createCollection(null, "testcollection",
-            1, 1, 1, client, null, "conf1");
 
-    } finally {
-      client.shutdown();
+    try (CloudSolrClient client = createCloudClient("collection1")) {
+        createCollection(null, "testcollection", 1, 1, 1, client, null, "conf1");
+
     }
     List<Integer> numShardsNumReplicas = new ArrayList<>(2);
     numShardsNumReplicas.add(1);
diff --git a/solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest.java b/solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest.java
index e6371c4..26889c7 100644
--- a/solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest.java
@@ -57,8 +57,7 @@ public class CollectionsAPIAsyncDistributedZkTest extends AbstractFullDistribZkT
   @Test
   @ShardsFixed(num = 1)
   public void testSolrJAPICalls() throws Exception {
-    SolrClient client = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)));
-    try {
+    try (SolrClient client = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)))) {
       Create createCollectionRequest = new Create();
       createCollectionRequest.setCollectionName("testasynccollectioncreation");
       createCollectionRequest.setNumShards(1);
@@ -100,8 +99,6 @@ public class CollectionsAPIAsyncDistributedZkTest extends AbstractFullDistribZkT
       state = getRequestStateAfterCompletion("1004", MAX_TIMEOUT_SECONDS * 2, client);
   
       assertEquals("Shard split did not complete. Last recorded state: " + state, "completed", state);
-    } finally {
-      client.shutdown();
     }
 
     if (DEBUG) {
diff --git a/solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest.java b/solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest.java
index 8a0b02a..9b30edd 100644
--- a/solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest.java
@@ -278,20 +278,12 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
     String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));
     // now try to remove a collection when a couple of its nodes are down
     if (secondConfigSet) {
-      SolrClient client = createNewSolrClient("", baseUrl);
-      try {
-        createCollection(null, "halfdeletedcollection2", 3, 3, 6, client, null,
-            "conf2");
-      } finally {
-        client.shutdown();
+      try (SolrClient client = createNewSolrClient("", baseUrl)) {
+        createCollection(null, "halfdeletedcollection2", 3, 3, 6, client, null, "conf2");
       }
     } else {
-      SolrClient client = createNewSolrClient("", baseUrl);
-      try {
-        createCollection(null, "halfdeletedcollection2", 3, 3, 6,
-          client, null);
-      } finally {
-        client.shutdown();
+      try (SolrClient client = createNewSolrClient("", baseUrl)) {
+        createCollection(null, "halfdeletedcollection2", 3, 3, 6, client, null);
       }
     }
     
@@ -333,11 +325,8 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
 
   private NamedList<Object> makeRequest(String baseUrl, SolrRequest request)
       throws SolrServerException, IOException {
-    SolrClient client = createNewSolrClient("", baseUrl);
-    try {
+    try (SolrClient client = createNewSolrClient("", baseUrl)) {
       return client.request(request);
-    } finally {
-      client.shutdown();
     }
   }
 
@@ -632,7 +621,7 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
               numShards, replicationFactor, maxShardsPerNode, client, null);
         }
       } finally {
-        if (client != null) client.shutdown();
+        if (client != null) client.close();
       }
     }
     
@@ -644,11 +633,10 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
       
       String url = getUrlFromZk(collection);
 
-      HttpSolrClient collectionClient = new HttpSolrClient(url);
-      
-      // poll for a second - it can take a moment before we are ready to serve
-      waitForNon403or404or503(collectionClient);
-      collectionClient.shutdown();
+      try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {
+        // poll for a second - it can take a moment before we are ready to serve
+        waitForNon403or404or503(collectionClient);
+      }
     }
     
     // sometimes we restart one of the jetty nodes
@@ -664,11 +652,10 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
         
         String url = getUrlFromZk(collection);
         
-        HttpSolrClient collectionClient = new HttpSolrClient(url);
-        
-        // poll for a second - it can take a moment before we are ready to serve
-        waitForNon403or404or503(collectionClient);
-        collectionClient.shutdown();
+        try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {
+          // poll for a second - it can take a moment before we are ready to serve
+          waitForNon403or404or503(collectionClient);
+        }
       }
     }
 
@@ -711,29 +698,27 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
     
     String url = getUrlFromZk(collectionName);
 
-    HttpSolrClient collectionClient = new HttpSolrClient(url);
-    
-    
-    // lets try and use the solrj client to index a couple documents
-    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,
-        "humpty dumpy sat on a wall");
-    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,
-        "humpty dumpy3 sat on a walls");
-    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,
-        "humpty dumpy2 sat on a walled");
+    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {
 
-    collectionClient.add(doc1);
-    
-    collectionClient.add(doc2);
+      // lets try and use the solrj client to index a couple documents
+      SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,
+          "humpty dumpy sat on a wall");
+      SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,
+          "humpty dumpy3 sat on a walls");
+      SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,
+          "humpty dumpy2 sat on a walled");
+
+      collectionClient.add(doc1);
+
+      collectionClient.add(doc2);
+
+      collectionClient.add(doc3);
+
+      collectionClient.commit();
+
+      assertEquals(3, collectionClient.query(new SolrQuery("*:*")).getResults().getNumFound());
+    }
 
-    collectionClient.add(doc3);
-    
-    collectionClient.commit();
-    
-    assertEquals(3, collectionClient.query(new SolrQuery("*:*")).getResults().getNumFound());
-    collectionClient.shutdown();
-    collectionClient = null;
-    
     // lets try a collection reload
     
     // get core open times
@@ -810,13 +795,11 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
     
     url = getUrlFromZk(collectionName);
     
-    collectionClient = new HttpSolrClient(url);
-    
-    // poll for a second - it can take a moment before we are ready to serve
-    waitForNon403or404or503(collectionClient);
-    collectionClient.shutdown();
-    collectionClient = null;
-    
+    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {
+      // poll for a second - it can take a moment before we are ready to serve
+      waitForNon403or404or503(collectionClient);
+    }
+
     for (int j = 0; j < cnt; j++) {
       waitForRecoveriesToFinish(collectionName, zkStateReader, false);
     }
@@ -827,8 +810,7 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
     int replicationFactor = 2;
     int maxShardsPerNode = 1;
     collectionInfos = new HashMap<>();
-    CloudSolrClient client = createCloudClient("awholynewcollection_" + cnt);
-    try {
+    try (CloudSolrClient client = createCloudClient("awholynewcollection_" + cnt)) {
       exp = false;
       try {
         createCollection(collectionInfos, "awholynewcollection_" + cnt,
@@ -837,8 +819,6 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
         exp = true;
       }
       assertTrue("expected exception", exp);
-    } finally {
-      client.shutdown();
     }
 
     
@@ -860,19 +840,17 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
     numShards = createNodeList.size() * maxShardsPerNode;
     replicationFactor = 1;
     collectionInfos = new HashMap<>();
-    client = createCloudClient("awholynewcollection_" + (cnt+1));
-    try {
+
+    try (SolrClient client = createCloudClient("awholynewcollection_" + (cnt+1))) {
       CollectionAdminResponse res = createCollection(collectionInfos, "awholynewcollection_" + (cnt+1), numShards, replicationFactor, maxShardsPerNode, client, StrUtils.join(createNodeList, ','), "conf1");
       assertTrue(res.isSuccess());
-    } finally {
-      client.shutdown();
     }
     checkForCollection(collectionInfos.keySet().iterator().next(), collectionInfos.entrySet().iterator().next().getValue(), createNodeList);
     
     checkNoTwoShardsUseTheSameIndexDir();
     if(disableLegacy) {
       setClusterProp(client1, ZkStateReader.LEGACY_CLOUD, null);
-      client1.shutdown();
+      client1.close();
     }
   }
   
@@ -895,17 +873,9 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
           int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;
           int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrClient()
               .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;
-          
-          CloudSolrClient client = null;
-          try {
-            if (i == 0) {
-              client = createCloudClient(null);
-            } else if (i == 1) {
-              client = createCloudClient(collectionName);
-            } else  {
-              client = createCloudClient(null);
-            }
-            
+
+          try (CloudSolrClient client = createCloudClient(i == 1 ? collectionName : null)) {
+
             createCollection(collectionInfos, collectionName,
                 numShards, replicationFactor, maxShardsPerNode, client, null,
                 "conf1");
@@ -917,8 +887,6 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
           } catch (SolrServerException | IOException e) {
             e.printStackTrace();
             throw new RuntimeException(e);
-          } finally {
-            if (client != null) client.shutdown();
           }
         }
       }
@@ -1004,12 +972,9 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
         while (shardIt.hasNext()) {
           Entry<String,Replica> shardEntry = shardIt.next();
           ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());
-          HttpSolrClient server = new HttpSolrClient(coreProps.getBaseUrl());
           CoreAdminResponse mcr;
-          try {
+          try (HttpSolrClient server = new HttpSolrClient(coreProps.getBaseUrl())) {
             mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);
-          } finally {
-            server.shutdown();
           }
           long before = mcr.getStartTime(coreProps.getCoreName()).getTime();
           urlToTime.put(coreProps.getCoreUrl(), before);
@@ -1120,8 +1085,7 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
 
   private void addReplicaTest() throws Exception {
     String collectionName = "addReplicaColl";
-    CloudSolrClient client = createCloudClient(null);
-    try {
+    try (CloudSolrClient client = createCloudClient(null)) {
       createCollection(collectionName, client, 2, 2);
       String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());
       ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());
@@ -1163,9 +1127,6 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
 
       assertNotNull(newReplica);
 
-
-    } finally {
-      client.shutdown();
     }
 
   }
@@ -1207,12 +1168,10 @@ public class CollectionsAPIDistributedZkTest extends AbstractFullDistribZkTestBa
   }
 
   private void clusterPropTest() throws Exception {
-    CloudSolrClient client = createCloudClient(null);
-
-    assertTrue("cluster property not set", setClusterProp(client, ZkStateReader.LEGACY_CLOUD, "false"));
-    assertTrue("cluster property not unset ", setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null));
-
-    client.shutdown();
+    try (CloudSolrClient client = createCloudClient(null)) {
+      assertTrue("cluster property not set", setClusterProp(client, ZkStateReader.LEGACY_CLOUD, "false"));
+      assertTrue("cluster property not unset ", setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null));
+    }
   }
 
   public static boolean setClusterProp(CloudSolrClient client, String name , String val) throws SolrServerException, IOException, InterruptedException {
diff --git a/solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests.java b/solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests.java
index 29eb7f9..89a3a08 100644
--- a/solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests.java
+++ b/solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests.java
@@ -257,9 +257,8 @@ public class CollectionsAPISolrJTests extends AbstractFullDistribZkTestBase {
 
     Replica replica1 = testCollection.getReplica("core_node1");
 
-    HttpSolrClient solrServer = new HttpSolrClient(replica1.getStr("base_url"));
-    try {
-      CoreAdminResponse status = CoreAdminRequest.getStatus(replica1.getStr("core"), solrServer);
+    try (HttpSolrClient client = new HttpSolrClient(replica1.getStr("base_url"))) {
+      CoreAdminResponse status = CoreAdminRequest.getStatus(replica1.getStr("core"), client);
       NamedList<Object> coreStatus = status.getCoreStatus(replica1.getStr("core"));
       String dataDirStr = (String) coreStatus.get("dataDir");
       String instanceDirStr = (String) coreStatus.get("instanceDir");
@@ -267,9 +266,6 @@ public class CollectionsAPISolrJTests extends AbstractFullDistribZkTestBase {
           new File(instanceDirStr).getAbsolutePath(), instanceDir.getAbsolutePath());
       assertEquals("Data dir does not match param given in property.dataDir syntax",
           new File(dataDirStr).getAbsolutePath(), dataDir.getAbsolutePath());
-
-    } finally {
-      solrServer.shutdown();
     }
 
     CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();
diff --git a/solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest.java b/solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest.java
index d624d79..fa3e212 100644
--- a/solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest.java
@@ -17,27 +17,6 @@ package org.apache.solr.cloud;
  * limitations under the License.
  */
 
-import static org.apache.solr.cloud.OverseerCollectionProcessor.NUM_SLICES;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.ROUTER;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.SHARDS_PROP;
-import static org.apache.solr.common.cloud.ZkStateReader.MAX_SHARDS_PER_NODE;
-import static org.apache.solr.common.cloud.ZkStateReader.REPLICATION_FACTOR;
-import static org.apache.solr.common.params.ShardParams._ROUTE_;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-import java.util.concurrent.CompletionService;
-import java.util.concurrent.ExecutorCompletionService;
-import java.util.concurrent.Future;
-import java.util.concurrent.SynchronousQueue;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
-
 import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.apache.lucene.util.TestUtil;
 import org.apache.solr.SolrTestCaseJ4.SuppressSSL;
@@ -63,6 +42,27 @@ import org.apache.solr.util.DefaultSolrThreadFactory;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+import java.util.concurrent.CompletionService;
+import java.util.concurrent.ExecutorCompletionService;
+import java.util.concurrent.Future;
+import java.util.concurrent.SynchronousQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.solr.cloud.OverseerCollectionProcessor.NUM_SLICES;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.ROUTER;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.SHARDS_PROP;
+import static org.apache.solr.common.cloud.ZkStateReader.MAX_SHARDS_PER_NODE;
+import static org.apache.solr.common.cloud.ZkStateReader.REPLICATION_FACTOR;
+import static org.apache.solr.common.params.ShardParams._ROUTE_;
+
 /**
  * Tests the Custom Sharding API.
  */
@@ -183,7 +183,7 @@ public class CustomCollectionTest extends AbstractFullDistribZkTestBase {
 
         createCollection(collectionInfos, COLL_PREFIX + i,props,client);
       } finally {
-        if (client != null) client.shutdown();
+        if (client != null) client.close();
       }
     }
 
@@ -195,11 +195,10 @@ public class CustomCollectionTest extends AbstractFullDistribZkTestBase {
 
       String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collection);
 
-      HttpSolrClient collectionClient = new HttpSolrClient(url);
-
-      // poll for a second - it can take a moment before we are ready to serve
-      waitForNon403or404or503(collectionClient);
-      collectionClient.shutdown();
+      try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {
+        // poll for a second - it can take a moment before we are ready to serve
+        waitForNon403or404or503(collectionClient);
+      }
     }
     ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();
     for (int j = 0; j < cnt; j++) {
@@ -224,8 +223,7 @@ public class CustomCollectionTest extends AbstractFullDistribZkTestBase {
     String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);
 
     String shard_fld = "shard_s";
-    HttpSolrClient collectionClient = new HttpSolrClient(url);
-    try {
+    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {
 
       // lets try and use the solrj client to index a couple documents
   
@@ -272,9 +270,9 @@ public class CustomCollectionTest extends AbstractFullDistribZkTestBase {
       params.set("shard", "x");
       SolrRequest request = new QueryRequest(params);
       request.setPath("/admin/collections");
-      SolrClient server = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)));
-      server.request(request);
-      server.shutdown();
+      try (SolrClient server = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)))) {
+        server.request(request);
+      }
       waitForCollection(zkStateReader,collectionName,4);
       //wait for all the replicas to become active
       int attempts = 0;
@@ -300,11 +298,8 @@ public class CustomCollectionTest extends AbstractFullDistribZkTestBase {
       replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;
       int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()
           .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;
-  
-  
-      CloudSolrClient client = null;
-      try {
-        client = createCloudClient(null);
+
+      try (CloudSolrClient client = createCloudClient(null)) {
         Map<String, Object> props = ZkNodeProps.makeMap(
             "router.name", ImplicitDocRouter.NAME,
             REPLICATION_FACTOR, replicationFactor,
@@ -314,8 +309,6 @@ public class CustomCollectionTest extends AbstractFullDistribZkTestBase {
   
         collectionName = COLL_PREFIX + "withShardField";
         createCollection(collectionInfos, collectionName,props,client);
-      } finally {
-        if (client != null) client.shutdown();
       }
   
       List<Integer> list = collectionInfos.get(collectionName);
@@ -323,20 +316,14 @@ public class CustomCollectionTest extends AbstractFullDistribZkTestBase {
   
   
       url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);
-    } finally {
-      collectionClient.shutdown();
     }
-    collectionClient = new HttpSolrClient(url);
-    try {
-      // poll for a second - it can take a moment before we are ready to serve
+
+    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {
+         // poll for a second - it can take a moment before we are ready to serve
       waitForNon403or404or503(collectionClient);
-    } finally {
-      collectionClient.shutdown();
     }
 
-
-      collectionClient = new HttpSolrClient(url);
-      try {
+    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {
       // lets try and use the solrj client to index a couple documents
   
       collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,
@@ -354,8 +341,6 @@ public class CustomCollectionTest extends AbstractFullDistribZkTestBase {
       assertEquals(0, collectionClient.query(new SolrQuery("*:*").setParam(_ROUTE_,"b")).getResults().getNumFound());
       //TODO debug the following case
       assertEquals(3, collectionClient.query(new SolrQuery("*:*").setParam(_ROUTE_, "a")).getResults().getNumFound());
-    } finally {
-      collectionClient.shutdown();
     }
   }
 
@@ -367,10 +352,8 @@ public class CustomCollectionTest extends AbstractFullDistribZkTestBase {
         .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;
 
     HashMap<String, List<Integer>> collectionInfos = new HashMap<>();
-    CloudSolrClient client = null;
     String shard_fld = "shard_s";
-    try {
-      client = createCloudClient(null);
+    try (CloudSolrClient client = createCloudClient(null)) {
       Map<String, Object> props = ZkNodeProps.makeMap(
           REPLICATION_FACTOR, replicationFactor,
           MAX_SHARDS_PER_NODE, maxShardsPerNode,
@@ -378,8 +361,6 @@ public class CustomCollectionTest extends AbstractFullDistribZkTestBase {
           "router.field", shard_fld);
 
       createCollection(collectionInfos, collectionName,props,client);
-    } finally {
-      if (client != null) client.shutdown();
     }
 
     List<Integer> list = collectionInfos.get(collectionName);
@@ -388,18 +369,13 @@ public class CustomCollectionTest extends AbstractFullDistribZkTestBase {
 
     String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);
 
-    HttpSolrClient collectionClient = new HttpSolrClient(url);
-    try {
+    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {
       // poll for a second - it can take a moment before we are ready to serve
       waitForNon403or404or503(collectionClient);
-      collectionClient.shutdown();
-    } finally {
-      collectionClient.shutdown();
     }
 
 
-    collectionClient = new HttpSolrClient(url);
-    try {
+    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {
       // lets try and use the solrj client to index a couple documents
   
       collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,
@@ -423,17 +399,13 @@ public class CustomCollectionTest extends AbstractFullDistribZkTestBase {
       collectionClient.add (getDoc( id,100,shard_fld, "b!doc1"));
       collectionClient.commit();
       assertEquals(1, collectionClient.query(new SolrQuery("*:*").setParam(_ROUTE_, "b!")).getResults().getNumFound());
-    } finally {
-      collectionClient.shutdown();
     }
   }
 
   private void testCreateShardRepFactor() throws Exception  {
     String collectionName = "testCreateShardRepFactor";
     HashMap<String, List<Integer>> collectionInfos = new HashMap<>();
-    CloudSolrClient client = null;
-    try {
-      client = createCloudClient(null);
+    try (CloudSolrClient client = createCloudClient(null)) {
       Map<String, Object> props = ZkNodeProps.makeMap(
           REPLICATION_FACTOR, 1,
           MAX_SHARDS_PER_NODE, 5,
@@ -442,8 +414,6 @@ public class CustomCollectionTest extends AbstractFullDistribZkTestBase {
           "router.name", "implicit");
 
       createCollection(collectionInfos, collectionName, props, client);
-    } finally {
-      if (client != null) client.shutdown();
     }
     ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();
     waitForRecoveriesToFinish(collectionName, zkStateReader, false);
@@ -454,9 +424,10 @@ public class CustomCollectionTest extends AbstractFullDistribZkTestBase {
     params.set("shard", "x");
     SolrRequest request = new QueryRequest(params);
     request.setPath("/admin/collections");
-    SolrClient server = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)));
-    server.request(request);
-    server.shutdown();
+
+    try (SolrClient server = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)))) {
+      server.request(request);
+    }
 
     waitForRecoveriesToFinish(collectionName, zkStateReader, false);
 
diff --git a/solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest.java b/solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest.java
index 49b18ad..3ad3d99 100644
--- a/solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/DeleteInactiveReplicaTest.java
@@ -42,109 +42,107 @@ public class DeleteInactiveReplicaTest extends DeleteReplicaTest{
 
   @Test
   public void deleteInactiveReplicaTest() throws Exception {
-    CloudSolrClient client = createCloudClient(null);
-
-    String collectionName = "delDeadColl";
-
-    setClusterProp(client, ZkStateReader.LEGACY_CLOUD, "false");
-    
-    createCollection(collectionName, client);
-    
-    waitForRecoveriesToFinish(collectionName, false);
-
-    Thread.sleep(3000);
-
-    boolean stopped = false;
-    JettySolrRunner stoppedJetty = null;
-    StringBuilder sb = new StringBuilder();
-    Replica replica1 = null;
-    Slice shard1 = null;
-    long timeout = System.currentTimeMillis() + 3000;
-    DocCollection testcoll = null;
-    while(!stopped && System.currentTimeMillis()<timeout ) {
-      testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);
-      for (JettySolrRunner jetty : jettys)
-        sb.append(jetty.getBaseUrl()).append(",");
-
-      for (Slice slice : testcoll.getActiveSlices()) {
-        for (Replica replica : slice.getReplicas())
-          for (JettySolrRunner jetty : jettys) {
-            URL baseUrl = null;
-            try {
-              baseUrl = jetty.getBaseUrl();
-            } catch (Exception e) {
-              continue;
+    try (CloudSolrClient client = createCloudClient(null)) {
+
+      String collectionName = "delDeadColl";
+
+      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, "false");
+
+      createCollection(collectionName, client);
+
+      waitForRecoveriesToFinish(collectionName, false);
+
+      Thread.sleep(3000);
+
+      boolean stopped = false;
+      JettySolrRunner stoppedJetty = null;
+      StringBuilder sb = new StringBuilder();
+      Replica replica1 = null;
+      Slice shard1 = null;
+      long timeout = System.currentTimeMillis() + 3000;
+      DocCollection testcoll = null;
+      while (!stopped && System.currentTimeMillis() < timeout) {
+        testcoll = client.getZkStateReader().getClusterState().getCollection(collectionName);
+        for (JettySolrRunner jetty : jettys)
+          sb.append(jetty.getBaseUrl()).append(",");
+
+        for (Slice slice : testcoll.getActiveSlices()) {
+          for (Replica replica : slice.getReplicas())
+            for (JettySolrRunner jetty : jettys) {
+              URL baseUrl = null;
+              try {
+                baseUrl = jetty.getBaseUrl();
+              } catch (Exception e) {
+                continue;
+              }
+              if (baseUrl.toString().startsWith(
+                  replica.getStr(ZkStateReader.BASE_URL_PROP))) {
+                stoppedJetty = jetty;
+                ChaosMonkey.stop(jetty);
+                replica1 = replica;
+                shard1 = slice;
+                stopped = true;
+                break;
+              }
             }
-            if (baseUrl.toString().startsWith(
-                replica.getStr(ZkStateReader.BASE_URL_PROP))) {
-              stoppedJetty = jetty;
-              ChaosMonkey.stop(jetty);
-              replica1 = replica;
-              shard1 = slice;
-              stopped = true;
-              break;
-            }
-          }
+        }
+        Thread.sleep(100);
       }
-      Thread.sleep(100);
-    }
 
 
-    if (!stopped) {
-      fail("Could not find jetty to stop in collection " + testcoll
-          + " jettys: " + sb);
-    }
-    
-    long endAt = System.currentTimeMillis() + 3000;
-    boolean success = false;
-    while (System.currentTimeMillis() < endAt) {
-      testcoll = client.getZkStateReader()
-          .getClusterState().getCollection(collectionName);
-      if (!"active".equals(testcoll.getSlice(shard1.getName())
-          .getReplica(replica1.getName()).getStr(Slice.STATE))) {
-        success = true;
+      if (!stopped) {
+        fail("Could not find jetty to stop in collection " + testcoll
+            + " jettys: " + sb);
       }
-      if (success) break;
-      Thread.sleep(100);
-    }
 
-    log.info("removed_replicas {}/{} ", shard1.getName(), replica1.getName());
-    removeAndWaitForReplicaGone(collectionName, client, replica1,
-        shard1.getName());
-    ChaosMonkey.start(stoppedJetty);
-    log.info("restarted jetty");
+      long endAt = System.currentTimeMillis() + 3000;
+      boolean success = false;
+      while (System.currentTimeMillis() < endAt) {
+        testcoll = client.getZkStateReader()
+            .getClusterState().getCollection(collectionName);
+        if (!"active".equals(testcoll.getSlice(shard1.getName())
+            .getReplica(replica1.getName()).getStr(Slice.STATE))) {
+          success = true;
+        }
+        if (success) break;
+        Thread.sleep(100);
+      }
 
-    Map m = makeMap("qt", "/admin/cores", "action", "status");
+      log.info("removed_replicas {}/{} ", shard1.getName(), replica1.getName());
+      removeAndWaitForReplicaGone(collectionName, client, replica1,
+          shard1.getName());
+      ChaosMonkey.start(stoppedJetty);
+      log.info("restarted jetty");
 
-    SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP));
-    NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));
-    assertNull("The core is up and running again",
-        ((NamedList) resp.get("status")).get(replica1.getStr("core")));
-    queryClient.shutdown();
-    queryClient = null;
+      Map m = makeMap("qt", "/admin/cores", "action", "status");
 
+      try (SolrClient queryClient = new HttpSolrClient(replica1.getStr(ZkStateReader.BASE_URL_PROP))) {
+        NamedList<Object> resp = queryClient.request(new QueryRequest(new MapSolrParams(m)));
+        assertNull("The core is up and running again",
+            ((NamedList) resp.get("status")).get(replica1.getStr("core")));
+      }
 
-    Exception exp = null;
+      Exception exp = null;
 
-    try {
+      try {
 
-      m = makeMap(
-          "action", CoreAdminParams.CoreAdminAction.CREATE.toString(),
-          ZkStateReader.COLLECTION_PROP, collectionName,
-          ZkStateReader.SHARD_ID_PROP, "shard2",
-          CoreAdminParams.NAME, "testcore");
+        m = makeMap(
+            "action", CoreAdminParams.CoreAdminAction.CREATE.toString(),
+            ZkStateReader.COLLECTION_PROP, collectionName,
+            ZkStateReader.SHARD_ID_PROP, "shard2",
+            CoreAdminParams.NAME, "testcore");
 
-      QueryRequest request = new QueryRequest(new MapSolrParams(m));
-      request.setPath("/admin/cores");
-      NamedList<Object> rsp = client.request(request);
-    } catch (Exception e) {
-      exp = e;
-      log.info("error_expected",e);
-    }
-    assertNotNull( "Exception expected", exp);
-    setClusterProp(client,ZkStateReader.LEGACY_CLOUD,null);
-    client.shutdown();
+        QueryRequest request = new QueryRequest(new MapSolrParams(m));
+        request.setPath("/admin/cores");
+        NamedList<Object> rsp = client.request(request);
+      } catch (Exception e) {
+        exp = e;
+        log.info("error_expected", e);
+      }
+      assertNotNull("Exception expected", exp);
+      setClusterProp(client, ZkStateReader.LEGACY_CLOUD, null);
 
+    }
 
   }
 }
diff --git a/solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest.java b/solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest.java
index 0515c76..401cbc6 100644
--- a/solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest.java
@@ -63,7 +63,7 @@ public class DeleteLastCustomShardedReplicaTest extends AbstractFullDistribZkTes
   @Override
   public void distribTearDown() throws Exception {
     super.distribTearDown();
-    client.shutdown();
+    client.close();
   }
 
   protected String getSolrXml() {
diff --git a/solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest.java b/solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest.java
index c128c72..9fb53c3 100644
--- a/solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest.java
@@ -66,7 +66,7 @@ public class DeleteReplicaTest extends AbstractFullDistribZkTestBase {
   @Override
   public void distribTearDown() throws Exception {
     super.distribTearDown();
-    client.shutdown();
+    client.close();
   }
 
   protected String getSolrXml() {
@@ -82,8 +82,7 @@ public class DeleteReplicaTest extends AbstractFullDistribZkTestBase {
   @ShardsFixed(num = 4)
   public void deleteLiveReplicaTest() throws Exception {
     String collectionName = "delLiveColl";
-    CloudSolrClient client = createCloudClient(null);
-    try {
+    try (CloudSolrClient client = createCloudClient(null)) {
       createCollection(collectionName, client);
       
       waitForRecoveriesToFinish(collectionName, false);
@@ -111,14 +110,11 @@ public class DeleteReplicaTest extends AbstractFullDistribZkTestBase {
 
       if (replica1 == null) fail("no active replicas found");
 
-      HttpSolrClient replica1Client = new HttpSolrClient(replica1.getStr("base_url"));
       String dataDir = null;
-      try {
+      try (HttpSolrClient replica1Client = new HttpSolrClient(replica1.getStr("base_url"))) {
         CoreAdminResponse status = CoreAdminRequest.getStatus(replica1.getStr("core"), replica1Client);
         NamedList<Object> coreStatus = status.getCoreStatus(replica1.getStr("core"));
         dataDir = (String) coreStatus.get("dataDir");
-      } finally {
-        replica1Client.shutdown();
       }
       try {
         // Should not be able to delete a replica that is up if onlyIfDown=true.
@@ -135,8 +131,6 @@ public class DeleteReplicaTest extends AbstractFullDistribZkTestBase {
 
       removeAndWaitForReplicaGone(collectionName, client, replica1, shard1.getName());
       assertFalse("dataDir for " + replica1.getName() + " should have been deleted by deleteReplica API", new File(dataDir).exists());
-    } finally {
-      client.shutdown();
     }
   }
 
diff --git a/solr/core/src/test/org/apache/solr/cloud/DeleteShardTest.java b/solr/core/src/test/org/apache/solr/cloud/DeleteShardTest.java
index 823efa7..fd5ccc7 100644
--- a/solr/core/src/test/org/apache/solr/cloud/DeleteShardTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/DeleteShardTest.java
@@ -128,13 +128,10 @@ public class DeleteShardTest extends AbstractFullDistribZkTestBase {
         .getBaseURL();
     baseUrl = baseUrl.substring(0, baseUrl.length() - "collection1".length());
 
-    HttpSolrClient baseServer = new HttpSolrClient(baseUrl);
-    try {
+    try (HttpSolrClient baseServer = new HttpSolrClient(baseUrl)) {
       baseServer.setConnectionTimeout(15000);
       baseServer.setSoTimeout(60000);
       baseServer.request(request);
-    } finally {
-      baseServer.shutdown();
     }
   }
 
diff --git a/solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java b/solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java
index 0e16f39..6a7debc 100644
--- a/solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java
@@ -16,22 +16,24 @@
  */
 package org.apache.solr.cloud;
 
+import com.carrotsearch.randomizedtesting.annotations.Seed;
 import org.apache.lucene.util.LuceneTestCase.Slow;
-import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.SentinelIntSet;
+import org.apache.lucene.util.TestUtil;
 import org.apache.solr.CursorPagingTest;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.request.LukeRequest;
 import org.apache.solr.client.solrj.response.QueryResponse;
-import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.common.SolrDocument;
 import org.apache.solr.common.SolrDocumentList;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.SolrException.ErrorCode;
-import org.apache.solr.common.util.NamedList;
-import org.apache.solr.common.params.SolrParams;
+import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.common.params.CommonParams;
 import org.apache.solr.common.params.GroupParams;
+import org.apache.solr.common.params.SolrParams;
+import org.apache.solr.common.util.NamedList;
+import org.apache.solr.search.CursorMark;
 import static org.apache.solr.common.params.CursorMarkParams.CURSOR_MARK_PARAM;
 import static org.apache.solr.common.params.CursorMarkParams.CURSOR_MARK_NEXT;
 import static org.apache.solr.common.params.CursorMarkParams.CURSOR_MARK_START;
@@ -42,9 +44,9 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
-import java.util.List;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.List;
 import java.util.Map;
 
 /**
diff --git a/solr/core/src/test/org/apache/solr/cloud/ExternalCollectionsTest.java b/solr/core/src/test/org/apache/solr/cloud/ExternalCollectionsTest.java
index 3952d26..cb1240a 100644
--- a/solr/core/src/test/org/apache/solr/cloud/ExternalCollectionsTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/ExternalCollectionsTest.java
@@ -24,8 +24,6 @@ import org.apache.solr.common.cloud.DocCollection;
 import org.apache.solr.common.cloud.ZkStateReader;
 import org.apache.solr.common.params.CollectionParams;
 import org.apache.solr.common.params.ModifiableSolrParams;
-import org.apache.solr.handler.BlobHandler;
-import org.apache.solr.handler.TestBlobHandler;
 import org.apache.zookeeper.data.Stat;
 import org.junit.Test;
 
@@ -43,7 +41,7 @@ public class ExternalCollectionsTest extends AbstractFullDistribZkTestBase {
   @Override
   public void distribTearDown() throws Exception {
     super.distribTearDown();
-    client.shutdown();
+    client.close();
   }
 
   protected String getSolrXml() {
diff --git a/solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest.java b/solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest.java
index 22deeeb..968fbd8 100644
--- a/solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest.java
@@ -430,12 +430,11 @@ public class FullSolrCloudDistribCmdsTest extends AbstractFullDistribZkTestBase
   }
   
   private long testConcurrentIndexing(long docId) throws Exception {
-    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(
-        ((HttpSolrClient) clients.get(0)).getBaseURL(), 10, 2);
     QueryResponse results = query(cloudClient);
     long beforeCount = results.getResults().getNumFound();
     int cnt = TEST_NIGHTLY ? 2933 : 313;
-    try {
+    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(
+        ((HttpSolrClient) clients.get(0)).getBaseURL(), 10, 2)) {
       concurrentClient.setConnectionTimeout(120000);
       for (int i = 0; i < cnt; i++) {
         index_specific(concurrentClient, id, docId++, "text_t", "some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc");
@@ -446,8 +445,6 @@ public class FullSolrCloudDistribCmdsTest extends AbstractFullDistribZkTestBase
 
       checkShardConsistency();
       assertDocCounts(VERBOSE);
-    } finally {
-      concurrentClient.shutdown();
     }
     results = query(cloudClient);
     assertEquals(beforeCount + cnt, results.getResults().getNumFound());
diff --git a/solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java b/solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java
index 46c28d2..17c9c59 100644
--- a/solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java
@@ -362,23 +362,17 @@ public class HttpPartitionTest extends AbstractFullDistribZkTestBase {
     log.info("Sending doc 2 to old leader "+leader.getName());
     try {
       leaderSolr.add(doc);
-      leaderSolr.shutdown();
+      leaderSolr.close();
 
       // if the add worked, then the doc must exist on the new leader
-      HttpSolrClient newLeaderSolr = getHttpSolrClient(currentLeader, testCollectionName);
-      try {
+      try (HttpSolrClient newLeaderSolr = getHttpSolrClient(currentLeader, testCollectionName)) {
         assertDocExists(newLeaderSolr, testCollectionName, "2");
-      } finally {
-        newLeaderSolr.shutdown();
       }
 
     } catch (SolrException exc) {
       // this is ok provided the doc doesn't exist on the current leader
-      leaderSolr = getHttpSolrClient(currentLeader, testCollectionName);
-      try {
-        leaderSolr.add(doc); // this should work
-      } finally {
-        leaderSolr.shutdown();
+      try (HttpSolrClient client = getHttpSolrClient(currentLeader, testCollectionName)) {
+        client.add(doc); // this should work
       }
     }
 
@@ -425,12 +419,12 @@ public class HttpPartitionTest extends AbstractFullDistribZkTestBase {
   protected void assertDocsExistInAllReplicas(List<Replica> notLeaders,
       String testCollectionName, int firstDocId, int lastDocId)
       throws Exception {
-    Replica leader = 
+    Replica leader =
         cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, "shard1", 10000);
     HttpSolrClient leaderSolr = getHttpSolrClient(leader, testCollectionName);
     List<HttpSolrClient> replicas =
         new ArrayList<HttpSolrClient>(notLeaders.size());
-    
+
     for (Replica r : notLeaders) {
       replicas.add(getHttpSolrClient(r, testCollectionName));
     }
@@ -444,10 +438,10 @@ public class HttpPartitionTest extends AbstractFullDistribZkTestBase {
       }
     } finally {
       if (leaderSolr != null) {
-        leaderSolr.shutdown();
+        leaderSolr.close();
       }
       for (HttpSolrClient replicaSolr : replicas) {
-        replicaSolr.shutdown();
+        replicaSolr.close();
       }
     }
   }
diff --git a/solr/core/src/test/org/apache/solr/cloud/LeaderFailoverAfterPartitionTest.java b/solr/core/src/test/org/apache/solr/cloud/LeaderFailoverAfterPartitionTest.java
index 4a83b48..317b9dd 100644
--- a/solr/core/src/test/org/apache/solr/cloud/LeaderFailoverAfterPartitionTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/LeaderFailoverAfterPartitionTest.java
@@ -17,11 +17,6 @@ package org.apache.solr.cloud;
  * limitations under the License.
  */
 
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.concurrent.TimeUnit;
-
 import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.apache.solr.SolrTestCaseJ4.SuppressSSL;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
@@ -30,6 +25,11 @@ import org.apache.solr.client.solrj.request.CollectionAdminRequest;
 import org.apache.solr.common.cloud.Replica;
 import org.junit.Test;
 
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.TimeUnit;
+
 /**
  * Tests leader-initiated recovery scenarios after a leader node fails
  * and one of the replicas is out-of-sync.
@@ -113,17 +113,12 @@ public class LeaderFailoverAfterPartitionTest extends HttpPartitionTest {
     // doc should be on leader and 1 replica
     sendDoc(5);
     
-    HttpSolrClient server = getHttpSolrClient(leader, testCollectionName);
-    try {
+    try (HttpSolrClient server = getHttpSolrClient(leader, testCollectionName)) {
       assertDocExists(server, testCollectionName, "5");
-    } finally {
-      server.shutdown();
     }
-    try {
-      server = getHttpSolrClient(notLeaders.get(1), testCollectionName);
+
+    try (HttpSolrClient server = getHttpSolrClient(notLeaders.get(1), testCollectionName)) {
       assertDocExists(server, testCollectionName, "5");
-    } finally {
-      server.shutdown();
     }
   
     Thread.sleep(sleepMsBeforeHealPartition);
diff --git a/solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest.java b/solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest.java
index 5f9d529..2c530de 100644
--- a/solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest.java
@@ -83,11 +83,8 @@ public class LeaderInitiatedRecoveryOnCommitTest extends BasicDistributedZkTest
 
     // let's find the leader of shard2 and ask him to commit
     Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, "shard2");
-    HttpSolrClient server = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr("base_url"), shard2Leader.getStr("core")));
-    try {
+    try (HttpSolrClient server = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr("base_url"), shard2Leader.getStr("core")))) {
       server.commit();
-    } finally {
-      server.shutdown();
     }
 
     Thread.sleep(sleepMsBeforeHealPartition);
@@ -129,9 +126,9 @@ public class LeaderInitiatedRecoveryOnCommitTest extends BasicDistributedZkTest
     leaderProxy.close();
 
     Replica replica = notLeaders.get(0);
-    HttpSolrClient client = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(replica.getStr("base_url"), replica.getStr("core")));
-    client.commit();
-    client.shutdown();
+    try (HttpSolrClient client = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(replica.getStr("base_url"), replica.getStr("core")))) {
+      client.commit();
+    }
 
     Thread.sleep(sleepMsBeforeHealPartition);
 
diff --git a/solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.java b/solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.java
index 1fc35b5..969f605 100644
--- a/solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest.java
@@ -119,26 +119,23 @@ public class MigrateRouteKeyTest extends BasicDistributedZkTest {
         .getBaseURL();
     baseUrl = baseUrl.substring(0, baseUrl.length() - "collection1".length());
 
-    HttpSolrClient baseClient = new HttpSolrClient(baseUrl);
-    baseClient.setConnectionTimeout(15000);
-    baseClient.setSoTimeout(60000 * 5);
-    baseClient.request(request);
-    baseClient.shutdown();
+    try (HttpSolrClient baseClient = new HttpSolrClient(baseUrl)) {
+      baseClient.setConnectionTimeout(15000);
+      baseClient.setSoTimeout(60000 * 5);
+      baseClient.request(request);
+    }
   }
 
   private void createCollection(String targetCollection) throws Exception {
     HashMap<String, List<Integer>> collectionInfos = new HashMap<>();
-    CloudSolrClient client = null;
-    try {
-      client = createCloudClient(null);
+
+    try (CloudSolrClient client = createCloudClient(null)) {
       Map<String, Object> props = ZkNodeProps.makeMap(
           REPLICATION_FACTOR, 1,
           MAX_SHARDS_PER_NODE, 5,
           NUM_SLICES, 1);
 
       createCollection(collectionInfos, targetCollection, props, client);
-    } finally {
-      if (client != null) client.shutdown();
     }
 
     List<Integer> list = collectionInfos.get(targetCollection);
@@ -176,42 +173,42 @@ public class MigrateRouteKeyTest extends BasicDistributedZkTest {
     indexer.start();
 
     String url = CustomCollectionTest.getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), targetCollection);
-    HttpSolrClient collectionClient = new HttpSolrClient(url);
 
-    SolrQuery solrQuery = new SolrQuery("*:*");
-    assertEquals("DocCount on target collection does not match", 0, collectionClient.query(solrQuery).getResults().getNumFound());
+    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {
 
-    invokeMigrateApi(AbstractDistribZkTestBase.DEFAULT_COLLECTION, splitKey + "/" + BIT_SEP + "!", targetCollection);
-    long finishTime = System.currentTimeMillis();
+      SolrQuery solrQuery = new SolrQuery("*:*");
+      assertEquals("DocCount on target collection does not match", 0, collectionClient.query(solrQuery).getResults().getNumFound());
 
-    indexer.join();
-    splitKeyCount[0] += indexer.getSplitKeyCount();
+      invokeMigrateApi(AbstractDistribZkTestBase.DEFAULT_COLLECTION, splitKey + "/" + BIT_SEP + "!", targetCollection);
+      long finishTime = System.currentTimeMillis();
 
-    try {
-      cloudClient.deleteById("a/" + BIT_SEP + "!104");
-      splitKeyCount[0]--;
-    } catch (Exception e) {
-      log.warn("Error deleting document a/" + BIT_SEP + "!104", e);
+      indexer.join();
+      splitKeyCount[0] += indexer.getSplitKeyCount();
+
+      try {
+        cloudClient.deleteById("a/" + BIT_SEP + "!104");
+        splitKeyCount[0]--;
+      } catch (Exception e) {
+        log.warn("Error deleting document a/" + BIT_SEP + "!104", e);
+      }
+      cloudClient.commit();
+      collectionClient.commit();
+
+      solrQuery = new SolrQuery("*:*").setRows(1000);
+      QueryResponse response = collectionClient.query(solrQuery);
+      log.info("Response from target collection: " + response);
+      assertEquals("DocCount on target collection does not match", splitKeyCount[0], response.getResults().getNumFound());
+
+      getCommonCloudSolrClient().getZkStateReader().updateClusterState(true);
+      ClusterState state = getCommonCloudSolrClient().getZkStateReader().getClusterState();
+      Slice slice = state.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);
+      assertNotNull("Routing rule map is null", slice.getRoutingRules());
+      assertFalse("Routing rule map is empty", slice.getRoutingRules().isEmpty());
+      assertNotNull("No routing rule exists for route key: " + splitKey, slice.getRoutingRules().get(splitKey + "!"));
+
+      boolean ruleRemoved = waitForRuleToExpire(splitKey, finishTime);
+      assertTrue("Routing rule was not expired", ruleRemoved);
     }
-    cloudClient.commit();
-    collectionClient.commit();
-
-    solrQuery = new SolrQuery("*:*").setRows(1000);
-    QueryResponse response = collectionClient.query(solrQuery);
-    log.info("Response from target collection: " + response);
-    assertEquals("DocCount on target collection does not match", splitKeyCount[0], response.getResults().getNumFound());
-    collectionClient.shutdown();
-    collectionClient = null;
-
-    getCommonCloudSolrClient().getZkStateReader().updateClusterState(true);
-    ClusterState state = getCommonCloudSolrClient().getZkStateReader().getClusterState();
-    Slice slice = state.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);
-    assertNotNull("Routing rule map is null", slice.getRoutingRules());
-    assertFalse("Routing rule map is empty", slice.getRoutingRules().isEmpty());
-    assertNotNull("No routing rule exists for route key: " + splitKey, slice.getRoutingRules().get(splitKey + "!"));
-
-    boolean ruleRemoved = waitForRuleToExpire(splitKey, finishTime);
-    assertTrue("Routing rule was not expired", ruleRemoved);
   }
 
   static class Indexer extends Thread {
diff --git a/solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest.java b/solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest.java
index 757afbf..d2b9ac4 100644
--- a/solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest.java
@@ -74,8 +74,7 @@ public class MultiThreadedOCPTest extends AbstractFullDistribZkTestBase {
   }
 
   private void testParallelCollectionAPICalls() throws IOException, SolrServerException {
-    SolrClient client = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)));
-    try {
+    try (SolrClient client = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)))) {
       for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {
         Create createCollectionRequest = new Create();
         createCollectionRequest.setCollectionName("ocptest" + i);
@@ -108,14 +107,11 @@ public class MultiThreadedOCPTest extends AbstractFullDistribZkTestBase {
         String state = getRequestStateAfterCompletion(i + "", REQUEST_STATUS_TIMEOUT, client);
         assertTrue("Task " + i + " did not complete, final state: " + state,state.equals("completed"));
       }
-    } finally {
-      client.shutdown();
     }
   }
 
   private void testTaskExclusivity() throws IOException, SolrServerException {
-    SolrClient client = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)));
-    try {
+    try (SolrClient client = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)))) {
       Create createCollectionRequest = new Create();
       createCollectionRequest.setCollectionName("ocptest_shardsplit");
       createCollectionRequest.setNumShards(4);
@@ -166,14 +162,11 @@ public class MultiThreadedOCPTest extends AbstractFullDistribZkTestBase {
         String state = getRequestStateAfterCompletion(i + "", REQUEST_STATUS_TIMEOUT, client);
         assertTrue("Task " + i + " did not complete, final state: " + state,state.equals("completed"));
       }
-    } finally {
-      client.shutdown();
     }
   }
 
   private void testDeduplicationOfSubmittedTasks() throws IOException, SolrServerException {
-    SolrClient client = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)));
-    try {
+    try (SolrClient client = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)))) {
       Create createCollectionRequest = new Create();
       createCollectionRequest.setCollectionName("ocptest_shardsplit2");
       createCollectionRequest.setNumShards(4);
@@ -208,8 +201,6 @@ public class MultiThreadedOCPTest extends AbstractFullDistribZkTestBase {
         String state = getRequestStateAfterCompletion(i + "", REQUEST_STATUS_TIMEOUT, client);
         assertTrue("Task " + i + " did not complete, final state: " + state,state.equals("completed"));
       }
-    } finally {
-      client.shutdown();
     }
   }
 
@@ -230,8 +221,7 @@ public class MultiThreadedOCPTest extends AbstractFullDistribZkTestBase {
       }
     };
     indexThread.start();
-    SolrClient client = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)));
-    try {
+    try (SolrClient client = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)))) {
 
       SplitShard splitShardRequest = new SplitShard();
       splitShardRequest.setCollectionName("collection1");
@@ -266,8 +256,6 @@ public class MultiThreadedOCPTest extends AbstractFullDistribZkTestBase {
         indexThread.join();
       } catch (InterruptedException e) {
         log.warn("Indexing thread interrupted.");
-      } finally {
-        client.shutdown();
       }
     }
   }
diff --git a/solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest.java b/solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest.java
index 345ae49..49b7b60 100644
--- a/solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest.java
@@ -18,20 +18,6 @@ package org.apache.solr.cloud;
  */
 
 
-import static org.apache.solr.cloud.OverseerCollectionProcessor.NUM_SLICES;
-import static org.apache.solr.common.cloud.ZkStateReader.REPLICATION_FACTOR;
-import static org.apache.solr.common.cloud.ZkStateReader.MAX_SHARDS_PER_NODE;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.getSortedOverseerNodeNames;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.getLeaderNode;
-import static org.apache.solr.common.cloud.ZkNodeProps.makeMap;
-
-import java.io.IOException;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.solr.SolrTestCaseJ4.SuppressSSL;
 import org.apache.solr.client.solrj.SolrRequest;
@@ -49,6 +35,20 @@ import org.apache.zookeeper.data.Stat;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
+import java.io.IOException;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+
+import static org.apache.solr.cloud.OverseerCollectionProcessor.NUM_SLICES;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.getLeaderNode;
+import static org.apache.solr.cloud.OverseerCollectionProcessor.getSortedOverseerNodeNames;
+import static org.apache.solr.common.cloud.ZkNodeProps.makeMap;
+import static org.apache.solr.common.cloud.ZkStateReader.MAX_SHARDS_PER_NODE;
+import static org.apache.solr.common.cloud.ZkStateReader.REPLICATION_FACTOR;
+
 @LuceneTestCase.Slow
 @SuppressSSL     // See SOLR-5776
 public class OverseerRolesTest  extends AbstractFullDistribZkTestBase{
@@ -70,7 +70,7 @@ public class OverseerRolesTest  extends AbstractFullDistribZkTestBase{
   @Override
   public void distribTearDown() throws Exception {
     super.distribTearDown();
-    client.shutdown();
+    client.close();
   }
 
   protected String getSolrXml() {
diff --git a/solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest.java b/solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest.java
index 419e4ce..941baf6 100644
--- a/solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest.java
@@ -38,6 +38,7 @@ public class OverseerStatusTest extends BasicDistributedZkTest {
 
   @Test
   public void test() throws Exception {
+
     waitForThingsToLevelOut(15);
 
     // find existing command counts because collection may be created by base test class too
diff --git a/solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest.java b/solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest.java
index d344a33..c583a1a 100644
--- a/solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest.java
@@ -67,7 +67,7 @@ public class RemoteQueryErrorTest extends AbstractFullDistribZkTestBase {
       } catch(Exception ex) {
         fail("Expected a SolrException to occur, instead received: " + ex.getClass());
       } finally {
-        solrClient.shutdown();
+        solrClient.close();
       }
     }
   }
diff --git a/solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java b/solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java
index f6e1748..25b6c6e 100644
--- a/solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java
@@ -17,12 +17,6 @@ package org.apache.solr.cloud;
  * limitations under the License.
  */
 
-import java.io.File;
-import java.net.ServerSocket;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Locale;
-
 import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.apache.solr.SolrTestCaseJ4.SuppressSSL;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
@@ -36,6 +30,12 @@ import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.File;
+import java.net.ServerSocket;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
+
 //@AwaitsFix(bugUrl = "https://issues.apache.org/jira/browse/SOLR-6157")
 
 /**
@@ -173,20 +173,16 @@ public class ReplicationFactorTest extends AbstractFullDistribZkTestBase {
   
   @SuppressWarnings("rawtypes")
   protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {
-    HttpSolrClient solrServer = null;
-    try {
-      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);
-      String url = zkProps.getBaseUrl() + "/" + collection;
-      solrServer = new HttpSolrClient(url);
-            
+
+    ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);
+    String url = zkProps.getBaseUrl() + "/" + collection;
+
+    try (HttpSolrClient solrServer = new HttpSolrClient(url)) {
       NamedList resp = solrServer.request(up);
       NamedList hdr = (NamedList) resp.get("responseHeader");
       Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);
       assertTrue("Expected rf="+expectedRf+" for batch but got "+
         batchRf+"; clusterState: "+printClusterStateInfo(), batchRf == expectedRf);      
-    } finally {
-      if (solrServer != null)
-        solrServer.shutdown();
     }
   }
     
diff --git a/solr/core/src/test/org/apache/solr/cloud/ShardSplitTest.java b/solr/core/src/test/org/apache/solr/cloud/ShardSplitTest.java
index d092e13..2fd38e7 100644
--- a/solr/core/src/test/org/apache/solr/cloud/ShardSplitTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/ShardSplitTest.java
@@ -73,6 +73,7 @@ public class ShardSplitTest extends BasicDistributedZkTest {
 
   @Test
   public void test() throws Exception {
+
     waitForThingsToLevelOut(15);
 
     if (usually()) {
@@ -231,10 +232,8 @@ public class ShardSplitTest extends BasicDistributedZkTest {
         .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;
 
     HashMap<String, List<Integer>> collectionInfos = new HashMap<>();
-    CloudSolrClient client = null;
     String shard_fld = "shard_s";
-    try {
-      client = createCloudClient(null);
+    try (CloudSolrClient client = createCloudClient(null)) {
       Map<String, Object> props = ZkNodeProps.makeMap(
           REPLICATION_FACTOR, replicationFactor,
           MAX_SHARDS_PER_NODE, maxShardsPerNode,
@@ -242,8 +241,6 @@ public class ShardSplitTest extends BasicDistributedZkTest {
           "router.field", shard_fld);
 
       createCollection(collectionInfos, collectionName,props,client);
-    } finally {
-      if (client != null) client.shutdown();
     }
 
     List<Integer> list = collectionInfos.get(collectionName);
@@ -253,52 +250,52 @@ public class ShardSplitTest extends BasicDistributedZkTest {
 
     String url = CustomCollectionTest.getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);
 
-    HttpSolrClient collectionClient = new HttpSolrClient(url);
+    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {
 
-    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();
-    final DocRouter router = clusterState.getCollection(collectionName).getRouter();
-    Slice shard1 = clusterState.getSlice(collectionName, SHARD1);
-    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();
-    final List<DocRouter.Range> ranges = router.partitionRange(2, shard1Range);
-    final int[] docCounts = new int[ranges.size()];
+      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();
+      final DocRouter router = clusterState.getCollection(collectionName).getRouter();
+      Slice shard1 = clusterState.getSlice(collectionName, SHARD1);
+      DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();
+      final List<DocRouter.Range> ranges = router.partitionRange(2, shard1Range);
+      final int[] docCounts = new int[ranges.size()];
 
-    for (int i = 100; i <= 200; i++) {
-      String shardKey = "" + (char)('a' + (i % 26)); // See comment in ShardRoutingTest for hash distribution
+      for (int i = 100; i <= 200; i++) {
+        String shardKey = "" + (char) ('a' + (i % 26)); // See comment in ShardRoutingTest for hash distribution
 
-      collectionClient.add(getDoc(id, i, "n_ti", i, shard_fld, shardKey));
-      int idx = getHashRangeIdx(router, ranges, shardKey);
-      if (idx != -1)  {
-        docCounts[idx]++;
+        collectionClient.add(getDoc(id, i, "n_ti", i, shard_fld, shardKey));
+        int idx = getHashRangeIdx(router, ranges, shardKey);
+        if (idx != -1) {
+          docCounts[idx]++;
+        }
       }
-    }
 
-    for (int i = 0; i < docCounts.length; i++) {
-      int docCount = docCounts[i];
-      log.info("Shard {} docCount = {}", "shard1_" + i, docCount);
-    }
+      for (int i = 0; i < docCounts.length; i++) {
+        int docCount = docCounts[i];
+        log.info("Shard {} docCount = {}", "shard1_" + i, docCount);
+      }
 
-    collectionClient.commit();
+      collectionClient.commit();
 
-    for (int i = 0; i < 3; i++) {
-      try {
-        splitShard(collectionName, SHARD1, null, null);
-        break;
-      } catch (HttpSolrClient.RemoteSolrException e) {
-        if (e.code() != 500) {
-          throw e;
-        }
-        log.error("SPLITSHARD failed. " + (i < 2 ? " Retring split" : ""), e);
-        if (i == 2) {
-          fail("SPLITSHARD was not successful even after three tries");
+      for (int i = 0; i < 3; i++) {
+        try {
+          splitShard(collectionName, SHARD1, null, null);
+          break;
+        } catch (HttpSolrClient.RemoteSolrException e) {
+          if (e.code() != 500) {
+            throw e;
+          }
+          log.error("SPLITSHARD failed. " + (i < 2 ? " Retring split" : ""), e);
+          if (i == 2) {
+            fail("SPLITSHARD was not successful even after three tries");
+          }
         }
       }
-    }
 
-    waitForRecoveriesToFinish(collectionName, false);
+      waitForRecoveriesToFinish(collectionName, false);
 
-    assertEquals(docCounts[0], collectionClient.query(new SolrQuery("*:*").setParam("shards", "shard1_0")).getResults().getNumFound());
-    assertEquals(docCounts[1], collectionClient.query(new SolrQuery("*:*").setParam("shards", "shard1_1")).getResults().getNumFound());
-    collectionClient.shutdown();
+      assertEquals(docCounts[0], collectionClient.query(new SolrQuery("*:*").setParam("shards", "shard1_0")).getResults().getNumFound());
+      assertEquals(docCounts[1], collectionClient.query(new SolrQuery("*:*").setParam("shards", "shard1_1")).getResults().getNumFound());
+    }
   }
 
   private void splitByRouteKeyTest() throws Exception {
@@ -310,17 +307,14 @@ public class ShardSplitTest extends BasicDistributedZkTest {
         .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;
 
     HashMap<String, List<Integer>> collectionInfos = new HashMap<>();
-    CloudSolrClient client = null;
-    try {
-      client = createCloudClient(null);
+
+    try (CloudSolrClient client = createCloudClient(null)) {
       Map<String, Object> props = ZkNodeProps.makeMap(
           REPLICATION_FACTOR, replicationFactor,
           MAX_SHARDS_PER_NODE, maxShardsPerNode,
           NUM_SLICES, numShards);
 
       createCollection(collectionInfos, collectionName,props,client);
-    } finally {
-      if (client != null) client.shutdown();
     }
 
     List<Integer> list = collectionInfos.get(collectionName);
@@ -330,66 +324,66 @@ public class ShardSplitTest extends BasicDistributedZkTest {
 
     String url = CustomCollectionTest.getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);
 
-    HttpSolrClient collectionClient = new HttpSolrClient(url);
+    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {
 
-    String splitKey = "b!";
+      String splitKey = "b!";
 
-    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();
-    final DocRouter router = clusterState.getCollection(collectionName).getRouter();
-    Slice shard1 = clusterState.getSlice(collectionName, SHARD1);
-    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();
-    final List<DocRouter.Range> ranges = ((CompositeIdRouter) router).partitionRangeByKey(splitKey, shard1Range);
-    final int[] docCounts = new int[ranges.size()];
+      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();
+      final DocRouter router = clusterState.getCollection(collectionName).getRouter();
+      Slice shard1 = clusterState.getSlice(collectionName, SHARD1);
+      DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();
+      final List<DocRouter.Range> ranges = ((CompositeIdRouter) router).partitionRangeByKey(splitKey, shard1Range);
+      final int[] docCounts = new int[ranges.size()];
 
-    int uniqIdentifier = (1<<12);
-    int splitKeyDocCount = 0;
-    for (int i = 100; i <= 200; i++) {
-      String shardKey = "" + (char)('a' + (i % 26)); // See comment in ShardRoutingTest for hash distribution
+      int uniqIdentifier = (1 << 12);
+      int splitKeyDocCount = 0;
+      for (int i = 100; i <= 200; i++) {
+        String shardKey = "" + (char) ('a' + (i % 26)); // See comment in ShardRoutingTest for hash distribution
 
-      String idStr = shardKey + "!" + i;
-      collectionClient.add(getDoc(id, idStr, "n_ti", (shardKey + "!").equals(splitKey) ? uniqIdentifier : i));
-      int idx = getHashRangeIdx(router, ranges, idStr);
-      if (idx != -1)  {
-        docCounts[idx]++;
+        String idStr = shardKey + "!" + i;
+        collectionClient.add(getDoc(id, idStr, "n_ti", (shardKey + "!").equals(splitKey) ? uniqIdentifier : i));
+        int idx = getHashRangeIdx(router, ranges, idStr);
+        if (idx != -1) {
+          docCounts[idx]++;
+        }
+        if (splitKey.equals(shardKey + "!"))
+          splitKeyDocCount++;
       }
-      if (splitKey.equals(shardKey + "!"))
-        splitKeyDocCount++;
-    }
 
-    for (int i = 0; i < docCounts.length; i++) {
-      int docCount = docCounts[i];
-      log.info("Shard {} docCount = {}", "shard1_" + i, docCount);
-    }
-    log.info("Route key doc count = {}", splitKeyDocCount);
+      for (int i = 0; i < docCounts.length; i++) {
+        int docCount = docCounts[i];
+        log.info("Shard {} docCount = {}", "shard1_" + i, docCount);
+      }
+      log.info("Route key doc count = {}", splitKeyDocCount);
 
-    collectionClient.commit();
+      collectionClient.commit();
 
-    for (int i = 0; i < 3; i++) {
-      try {
-        splitShard(collectionName, null, null, splitKey);
-        break;
-      } catch (HttpSolrClient.RemoteSolrException e) {
-        if (e.code() != 500) {
-          throw e;
-        }
-        log.error("SPLITSHARD failed. " + (i < 2 ? " Retring split" : ""), e);
-        if (i == 2) {
-          fail("SPLITSHARD was not successful even after three tries");
+      for (int i = 0; i < 3; i++) {
+        try {
+          splitShard(collectionName, null, null, splitKey);
+          break;
+        } catch (HttpSolrClient.RemoteSolrException e) {
+          if (e.code() != 500) {
+            throw e;
+          }
+          log.error("SPLITSHARD failed. " + (i < 2 ? " Retring split" : ""), e);
+          if (i == 2) {
+            fail("SPLITSHARD was not successful even after three tries");
+          }
         }
       }
-    }
 
-    waitForRecoveriesToFinish(collectionName, false);
-    SolrQuery solrQuery = new SolrQuery("*:*");
-    assertEquals("DocCount on shard1_0 does not match", docCounts[0], collectionClient.query(solrQuery.setParam("shards", "shard1_0")).getResults().getNumFound());
-    assertEquals("DocCount on shard1_1 does not match", docCounts[1], collectionClient.query(solrQuery.setParam("shards", "shard1_1")).getResults().getNumFound());
-    assertEquals("DocCount on shard1_2 does not match", docCounts[2], collectionClient.query(solrQuery.setParam("shards", "shard1_2")).getResults().getNumFound());
-
-    solrQuery = new SolrQuery("n_ti:" + uniqIdentifier);
-    assertEquals("shard1_0 must have 0 docs for route key: " + splitKey, 0, collectionClient.query(solrQuery.setParam("shards", "shard1_0")).getResults().getNumFound());
-    assertEquals("Wrong number of docs on shard1_1 for route key: " + splitKey, splitKeyDocCount, collectionClient.query(solrQuery.setParam("shards", "shard1_1")).getResults().getNumFound());
-    assertEquals("shard1_2 must have 0 docs for route key: " + splitKey, 0, collectionClient.query(solrQuery.setParam("shards", "shard1_2")).getResults().getNumFound());
-    collectionClient.shutdown();
+      waitForRecoveriesToFinish(collectionName, false);
+      SolrQuery solrQuery = new SolrQuery("*:*");
+      assertEquals("DocCount on shard1_0 does not match", docCounts[0], collectionClient.query(solrQuery.setParam("shards", "shard1_0")).getResults().getNumFound());
+      assertEquals("DocCount on shard1_1 does not match", docCounts[1], collectionClient.query(solrQuery.setParam("shards", "shard1_1")).getResults().getNumFound());
+      assertEquals("DocCount on shard1_2 does not match", docCounts[2], collectionClient.query(solrQuery.setParam("shards", "shard1_2")).getResults().getNumFound());
+
+      solrQuery = new SolrQuery("n_ti:" + uniqIdentifier);
+      assertEquals("shard1_0 must have 0 docs for route key: " + splitKey, 0, collectionClient.query(solrQuery.setParam("shards", "shard1_0")).getResults().getNumFound());
+      assertEquals("Wrong number of docs on shard1_1 for route key: " + splitKey, splitKeyDocCount, collectionClient.query(solrQuery.setParam("shards", "shard1_1")).getResults().getNumFound());
+      assertEquals("shard1_2 must have 0 docs for route key: " + splitKey, 0, collectionClient.query(solrQuery.setParam("shards", "shard1_2")).getResults().getNumFound());
+    }
   }
 
   protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {
@@ -426,23 +420,17 @@ public class ShardSplitTest extends BasicDistributedZkTest {
     query.set("distrib", false);
 
     ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);
-    HttpSolrClient shard1_0Client = new HttpSolrClient(shard1_0.getCoreUrl());
     QueryResponse response;
-    try {
+    try (HttpSolrClient shard1_0Client = new HttpSolrClient(shard1_0.getCoreUrl())) {
       response = shard1_0Client.query(query);
-    } finally {
-      shard1_0Client.shutdown();
     }
     long shard10Count = response.getResults().getNumFound();
 
     ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(
         AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);
-    HttpSolrClient shard1_1Client = new HttpSolrClient(shard1_1.getCoreUrl());
     QueryResponse response2;
-    try {
+    try (HttpSolrClient shard1_1Client = new HttpSolrClient(shard1_1.getCoreUrl())) {
       response2 = shard1_1Client.query(query);
-    } finally {
-      shard1_1Client.shutdown();
     }
     long shard11Count = response2.getResults().getNumFound();
 
@@ -452,7 +440,7 @@ public class ShardSplitTest extends BasicDistributedZkTest {
     assertEquals("Wrong doc count on shard1_1. See SOLR-5309", docCounts[1], shard11Count);
   }
 
-  protected void checkSubShardConsistency(String shard) throws SolrServerException {
+  protected void checkSubShardConsistency(String shard) throws SolrServerException, IOException {
     SolrQuery query = new SolrQuery("*:*").setRows(1000).setFields("id", "_version_");
     query.set("distrib", false);
 
@@ -462,12 +450,9 @@ public class ShardSplitTest extends BasicDistributedZkTest {
     int c = 0;
     for (Replica replica : slice.getReplicas()) {
       String coreUrl = new ZkCoreNodeProps(replica).getCoreUrl();
-      HttpSolrClient client = new HttpSolrClient(coreUrl);
       QueryResponse response;
-      try {
+      try (HttpSolrClient client = new HttpSolrClient(coreUrl)) {
         response = client.query(query);
-      } finally {
-        client.shutdown();
       }
       numFound[c++] = response.getResults().getNumFound();
       log.info("Shard: " + shard + " Replica: {} has {} docs", coreUrl, String.valueOf(response.getResults().getNumFound()));
@@ -505,13 +490,10 @@ public class ShardSplitTest extends BasicDistributedZkTest {
         .getBaseURL();
     baseUrl = baseUrl.substring(0, baseUrl.length() - "collection1".length());
 
-    HttpSolrClient baseServer = new HttpSolrClient(baseUrl);
-    try {
+    try (HttpSolrClient baseServer = new HttpSolrClient(baseUrl)) {
       baseServer.setConnectionTimeout(30000);
       baseServer.setSoTimeout(60000 * 5);
       baseServer.request(request);
-    } finally {
-      baseServer.shutdown();
     }
   }
 
diff --git a/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java b/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java
index 5df99cd..fedec65 100644
--- a/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java
@@ -128,13 +128,12 @@ public class SyncSliceTest extends AbstractFullDistribZkTestBase {
         .getBaseURL();
     baseUrl = baseUrl.substring(0, baseUrl.length() - "collection1".length());
     
-    HttpSolrClient baseClient = new HttpSolrClient(baseUrl);
-    // we only set the connect timeout, not so timeout
-    baseClient.setConnectionTimeout(30000);
-    baseClient.request(request);
-    baseClient.shutdown();
-    baseClient = null;
-    
+    try (HttpSolrClient baseClient = new HttpSolrClient(baseUrl)) {
+      // we only set the connect timeout, not so timeout
+      baseClient.setConnectionTimeout(30000);
+      baseClient.request(request);
+    }
+
     waitForThingsToLevelOut(15);
     
     checkShardConsistency(false, true);
diff --git a/solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI.java b/solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI.java
index 4672811..0de7e76 100644
--- a/solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI.java
+++ b/solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI.java
@@ -35,8 +35,6 @@ import org.apache.solr.common.util.NamedList;
 import org.apache.zookeeper.KeeperException;
 import org.junit.Test;
 
-import static org.apache.solr.cloud.OverseerCollectionProcessor.SHARD_UNIQUE;
-
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -44,6 +42,8 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 
+import static org.apache.solr.cloud.OverseerCollectionProcessor.SHARD_UNIQUE;
+
 public class TestCollectionAPI extends ReplicaPropertiesBase {
 
   public static final String COLLECTION_NAME = "testcollection";
@@ -62,13 +62,9 @@ public class TestCollectionAPI extends ReplicaPropertiesBase {
   @Test
   @ShardsFixed(num = 2)
   public void test() throws Exception {
-    CloudSolrClient client = createCloudClient(null);
-    try {
+    try (CloudSolrClient client = createCloudClient(null)) {
       createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, "conf1");
       createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, "conf1");
-    } finally {
-      //remove collections
-      client.shutdown();
     }
 
     waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);
@@ -87,8 +83,8 @@ public class TestCollectionAPI extends ReplicaPropertiesBase {
   }
 
   private void clusterStatusWithCollectionAndShard() throws IOException, SolrServerException {
-    CloudSolrClient client = createCloudClient(null);
-    try {
+
+    try (CloudSolrClient client = createCloudClient(null)) {
       ModifiableSolrParams params = new ModifiableSolrParams();
       params.set("action", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());
       params.set("collection", COLLECTION_NAME);
@@ -109,16 +105,12 @@ public class TestCollectionAPI extends ReplicaPropertiesBase {
       Map<String, Object> selectedShardStatus = (Map<String, Object>) shardStatus.get(SHARD1);
       assertNotNull(selectedShardStatus);
 
-    } finally {
-      //remove collections
-      client.shutdown();
     }
   }
 
 
   private void listCollection() throws IOException, SolrServerException {
-    CloudSolrClient client = createCloudClient(null);
-    try {
+    try (CloudSolrClient client = createCloudClient(null)) {
       ModifiableSolrParams params = new ModifiableSolrParams();
       params.set("action", CollectionParams.CollectionAction.LIST.toString());
       SolrRequest request = new QueryRequest(params);
@@ -130,17 +122,13 @@ public class TestCollectionAPI extends ReplicaPropertiesBase {
       assertTrue(DEFAULT_COLLECTION + " was not found in list", collections.contains(DEFAULT_COLLECTION));
       assertTrue(COLLECTION_NAME + " was not found in list", collections.contains(COLLECTION_NAME));
       assertTrue(COLLECTION_NAME1 + " was not found in list", collections.contains(COLLECTION_NAME1));
-    } finally {
-      //remove collections
-      client.shutdown();
     }
 
-
   }
 
   private void clusterStatusNoCollection() throws Exception {
-    CloudSolrClient client = createCloudClient(null);
-    try {
+
+    try (CloudSolrClient client = createCloudClient(null)) {
       ModifiableSolrParams params = new ModifiableSolrParams();
       params.set("action", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());
       SolrRequest request = new QueryRequest(params);
@@ -157,16 +145,12 @@ public class TestCollectionAPI extends ReplicaPropertiesBase {
       List<String> liveNodes = (List<String>) cluster.get("live_nodes");
       assertNotNull("Live nodes should not be null", liveNodes);
       assertFalse(liveNodes.isEmpty());
-    } finally {
-      //remove collections
-      client.shutdown();
     }
 
   }
 
   private void clusterStatusWithCollection() throws IOException, SolrServerException {
-    CloudSolrClient client = createCloudClient(null);
-    try {
+    try (CloudSolrClient client = createCloudClient(null)) {
       ModifiableSolrParams params = new ModifiableSolrParams();
       params.set("action", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());
       params.set("collection", COLLECTION_NAME);
@@ -180,15 +164,11 @@ public class TestCollectionAPI extends ReplicaPropertiesBase {
       assertNotNull("Collections should not be null in cluster state", collections);
       assertNotNull(collections.get(COLLECTION_NAME));
       assertEquals(1, collections.size());
-    } finally {
-      //remove collections
-      client.shutdown();
     }
   }
 
   private void clusterStatusWithRouteKey() throws IOException, SolrServerException {
-    CloudSolrClient client = createCloudClient(DEFAULT_COLLECTION);
-    try {
+    try (CloudSolrClient client = createCloudClient(DEFAULT_COLLECTION)) {
       SolrInputDocument doc = new SolrInputDocument();
       doc.addField("id", "a!123"); // goes to shard2. see ShardRoutingTest for details
       client.add(doc);
@@ -213,15 +193,11 @@ public class TestCollectionAPI extends ReplicaPropertiesBase {
       assertEquals(1, shardStatus.size());
       Map<String, Object> selectedShardStatus = (Map<String, Object>) shardStatus.get(SHARD2);
       assertNotNull(selectedShardStatus);
-    } finally {
-      //remove collections
-      client.shutdown();
     }
   }
 
   private void clusterStatusAliasTest() throws Exception  {
-    CloudSolrClient client = createCloudClient(null);
-    try {
+    try (CloudSolrClient client = createCloudClient(null)) {
       ModifiableSolrParams params = new ModifiableSolrParams();
       params.set("action", CollectionParams.CollectionAction.CREATEALIAS.toString());
       params.set("name", "myalias");
@@ -251,14 +227,11 @@ public class TestCollectionAPI extends ReplicaPropertiesBase {
       Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);
       List<String> collAlias = (List<String>) collection.get("aliases");
       assertEquals("Aliases not found", Lists.newArrayList("myalias"), collAlias);
-    } finally {
-      client.shutdown();
     }
   }
 
   private void clusterStatusRolesTest() throws Exception  {
-    CloudSolrClient client = createCloudClient(null);
-    try {
+    try (CloudSolrClient client = createCloudClient(null)) {
       client.connect();
       Replica replica = client.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);
 
@@ -285,14 +258,11 @@ public class TestCollectionAPI extends ReplicaPropertiesBase {
       assertNotNull(overseer);
       assertEquals(1, overseer.size());
       assertTrue(overseer.contains(replica.getNodeName()));
-    } finally {
-      client.shutdown();
     }
   }
 
   private void replicaPropTest() throws Exception {
-    CloudSolrClient client = createCloudClient(null);
-    try {
+    try (CloudSolrClient client = createCloudClient(null)) {
       client.connect();
       Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();
       List<String> sliceList = new ArrayList<>(slices.keySet());
@@ -568,8 +538,6 @@ public class TestCollectionAPI extends ReplicaPropertiesBase {
       verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, "property.node_name");
       verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, "property.base_url");
 
-    } finally {
-      client.shutdown();
     }
   }
 
diff --git a/solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL.java b/solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL.java
index 2790658..07bf05a 100644
--- a/solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL.java
+++ b/solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL.java
@@ -17,19 +17,18 @@ package org.apache.solr.cloud;
  * limitations under the License.
  */
 
-import java.io.File;
-import java.util.List;
-
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
 import org.apache.solr.client.solrj.impl.HttpSolrClient;
 import org.apache.solr.client.solrj.request.CoreAdminRequest;
 import org.apache.solr.common.params.CoreAdminParams.CoreAdminAction;
-
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
+import java.io.File;
+import java.util.List;
+
 /**
  * Tests SSL (if test framework selects it) with MiniSolrCloudCluster.
  * {@link TestMiniSolrCloudCluster} does not inherit from {@link SolrTestCaseJ4}
@@ -77,13 +76,10 @@ public class TestMiniSolrCloudClusterSSL extends SolrTestCaseJ4 {
   private void sendRequestToEachServer() throws Exception {
     List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();
     for (JettySolrRunner jetty : jettys) {
-      HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString());
-      try {
+      try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString())) {
         CoreAdminRequest req = new CoreAdminRequest();
         req.setAction( CoreAdminAction.STATUS );
         client.request(req);
-      } finally {
-        client.shutdown();
       }
     }
   }
diff --git a/solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders.java b/solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders.java
index dff071d..9e23a6b 100644
--- a/solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders.java
+++ b/solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders.java
@@ -51,13 +51,11 @@ public class TestRebalanceLeaders extends AbstractFullDistribZkTestBase {
 
   Map<String, Replica> expected = new HashMap<>();
 
-
   @Test
   @ShardsFixed(num = 4)
   public void test() throws Exception {
-    CloudSolrClient client = createCloudClient(null);
     reps = random().nextInt(9) + 1; // make sure and do at least one.
-    try {
+    try (CloudSolrClient client = createCloudClient(null)) {
       // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.
       // shards, replicationfactor, maxreplicaspernode
       int shards = random().nextInt(7);
@@ -65,9 +63,6 @@ public class TestRebalanceLeaders extends AbstractFullDistribZkTestBase {
       int rFactor = random().nextInt(4);
       if (rFactor < 2) rFactor = 2;
       createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, "conf1");
-    } finally {
-      //remove collections
-      client.shutdown();
     }
 
     waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);
diff --git a/solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties.java b/solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties.java
index 767f0dc..236ba48 100644
--- a/solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties.java
+++ b/solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties.java
@@ -18,11 +18,6 @@ package org.apache.solr.cloud;
  */
 
 
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
 import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.apache.solr.client.solrj.SolrRequest;
 import org.apache.solr.client.solrj.SolrServerException;
@@ -38,6 +33,11 @@ import org.apache.solr.common.util.NamedList;
 import org.apache.zookeeper.KeeperException;
 import org.junit.Test;
 
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
 @Slow
 public class TestReplicaProperties extends ReplicaPropertiesBase {
 
@@ -51,8 +51,8 @@ public class TestReplicaProperties extends ReplicaPropertiesBase {
   @Test
   @ShardsFixed(num = 4)
   public void test() throws Exception {
-    CloudSolrClient client = createCloudClient(null);
-    try {
+
+    try (CloudSolrClient client = createCloudClient(null)) {
       // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.
       // shards, replicationfactor, maxreplicaspernode
       int shards = random().nextInt(7);
@@ -60,9 +60,6 @@ public class TestReplicaProperties extends ReplicaPropertiesBase {
       int rFactor = random().nextInt(4);
       if (rFactor < 2) rFactor = 2;
       createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, "conf1");
-    } finally {
-      //remove collections
-      client.shutdown();
     }
 
     waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);
@@ -74,8 +71,8 @@ public class TestReplicaProperties extends ReplicaPropertiesBase {
   }
 
   private void listCollection() throws IOException, SolrServerException {
-    CloudSolrClient client = createCloudClient(null);
-    try {
+
+    try (CloudSolrClient client = createCloudClient(null)) {
       ModifiableSolrParams params = new ModifiableSolrParams();
       params.set("action", CollectionParams.CollectionAction.LIST.toString());
       SolrRequest request = new QueryRequest(params);
@@ -86,16 +83,13 @@ public class TestReplicaProperties extends ReplicaPropertiesBase {
       assertTrue("control_collection was not found in list", collections.contains("control_collection"));
       assertTrue(DEFAULT_COLLECTION + " was not found in list", collections.contains(DEFAULT_COLLECTION));
       assertTrue(COLLECTION_NAME + " was not found in list", collections.contains(COLLECTION_NAME));
-    } finally {
-      //remove collections
-      client.shutdown();
     }
   }
 
 
   private void clusterAssignPropertyTest() throws Exception {
-    CloudSolrClient client = createCloudClient(null);
-    try {
+
+    try (CloudSolrClient client = createCloudClient(null)) {
       client.connect();
       try {
         doPropertyAction(client,
@@ -192,8 +186,6 @@ public class TestReplicaProperties extends ReplicaPropertiesBase {
 
       verifyLeaderAssignment(client, COLLECTION_NAME);
 
-    } finally {
-      client.shutdown();
     }
   }
 
diff --git a/solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI.java b/solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI.java
index 639bc78..2d23617 100644
--- a/solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI.java
+++ b/solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI.java
@@ -196,10 +196,10 @@ public class TestRequestStatusCollectionAPI extends BasicDistributedZkTest {
         .getBaseURL();
     baseUrl = baseUrl.substring(0, baseUrl.length() - "collection1".length());
 
-    HttpSolrClient baseServer = new HttpSolrClient(baseUrl);
-    baseServer.setConnectionTimeout(15000);
-    NamedList<Object> resp = baseServer.request(request);
-    baseServer.shutdown();
-    return resp;
+    try (HttpSolrClient baseServer = new HttpSolrClient(baseUrl)) {
+      baseServer.setConnectionTimeout(15000);
+      return baseServer.request(request);
+    }
+
   }
 }
diff --git a/solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest.java b/solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest.java
index f0ecb02..3e9097e 100644
--- a/solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest.java
@@ -29,6 +29,7 @@ import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.common.cloud.ZkCoreNodeProps;
 import org.apache.solr.common.cloud.ZkStateReader;
 import org.apache.solr.common.params.ModifiableSolrParams;
+import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.update.DirectUpdateHandler2;
 import org.apache.solr.util.DefaultSolrThreadFactory;
 import org.junit.Test;
@@ -82,51 +83,51 @@ public class UnloadDistributedZkTest extends BasicDistributedZkTest {
     
     SolrClient client = clients.get(0);
     String url1 = getBaseUrl(client);
-    HttpSolrClient adminClient = new HttpSolrClient(url1);
-    adminClient.setConnectionTimeout(15000);
-    adminClient.setSoTimeout(60000);
-    adminClient.request(createCmd);
-    
-    createCmd = new Create();
-    createCmd.setCoreName("test_unload_shard_and_collection_2");
-    collection = "test_unload_shard_and_collection";
-    createCmd.setCollection(collection);
-    coreDataDir = createTempDir().toFile().getAbsolutePath();
-    createCmd.setDataDir(getDataDir(coreDataDir));
-    
-    adminClient.request(createCmd);
-    
-    // does not mean they are active and up yet :*
-    waitForRecoveriesToFinish(collection, false);
 
-    // now unload one of the two
-    Unload unloadCmd = new Unload(false);
-    unloadCmd.setCoreName("test_unload_shard_and_collection_2");
-    adminClient.request(unloadCmd);
-    
-    // there should be only one shard
-    int slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collection).size();
-    long timeoutAt = System.currentTimeMillis() + 45000;
-    while (slices != 1) {
-      if (System.currentTimeMillis() > timeoutAt) {
-        printLayout();
-        fail("Expected to find only one slice in " + collection);
+    try (HttpSolrClient adminClient = new HttpSolrClient(url1)) {
+      adminClient.setConnectionTimeout(15000);
+      adminClient.setSoTimeout(60000);
+      adminClient.request(createCmd);
+
+      createCmd = new Create();
+      createCmd.setCoreName("test_unload_shard_and_collection_2");
+      collection = "test_unload_shard_and_collection";
+      createCmd.setCollection(collection);
+      coreDataDir = createTempDir().toFile().getAbsolutePath();
+      createCmd.setDataDir(getDataDir(coreDataDir));
+
+      adminClient.request(createCmd);
+
+      // does not mean they are active and up yet :*
+      waitForRecoveriesToFinish(collection, false);
+
+      // now unload one of the two
+      Unload unloadCmd = new Unload(false);
+      unloadCmd.setCoreName("test_unload_shard_and_collection_2");
+      adminClient.request(unloadCmd);
+
+      // there should be only one shard
+      int slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collection).size();
+      long timeoutAt = System.currentTimeMillis() + 45000;
+      while (slices != 1) {
+        if (System.currentTimeMillis() > timeoutAt) {
+          printLayout();
+          fail("Expected to find only one slice in " + collection);
+        }
+
+        Thread.sleep(1000);
+        slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collection).size();
       }
-      
-      Thread.sleep(1000);
-      slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collection).size();
+
+      // now unload one of the other
+      unloadCmd = new Unload(false);
+      unloadCmd.setCoreName("test_unload_shard_and_collection_1");
+      adminClient.request(unloadCmd);
     }
-    
-    // now unload one of the other
-    unloadCmd = new Unload(false);
-    unloadCmd.setCoreName("test_unload_shard_and_collection_1");
-    adminClient.request(unloadCmd);
-    adminClient.shutdown();
-    adminClient = null;
-    
+
     //printLayout();
     // the collection should be gone
-    timeoutAt = System.currentTimeMillis() + 30000;
+    long timeoutAt = System.currentTimeMillis() + 30000;
     while (getCommonCloudSolrClient().getZkStateReader().getClusterState().hasCollection(collection)) {
       if (System.currentTimeMillis() > timeoutAt) {
         printLayout();
@@ -143,24 +144,23 @@ public class UnloadDistributedZkTest extends BasicDistributedZkTest {
    */
   private void testCoreUnloadAndLeaders() throws Exception {
     File tmpDir = createTempDir().toFile();
-    
+
+    String core1DataDir = tmpDir.getAbsolutePath() + File.separator + System.currentTimeMillis() + "unloadcollection1" + "_1n";
+
     // create a new collection collection
     SolrClient client = clients.get(0);
     String url1 = getBaseUrl(client);
-    HttpSolrClient adminClient = new HttpSolrClient(url1);
-    adminClient.setConnectionTimeout(15000);
-    adminClient.setSoTimeout(60000);
-    
-    Create createCmd = new Create();
-    createCmd.setCoreName("unloadcollection1");
-    createCmd.setCollection("unloadcollection");
-    createCmd.setNumShards(1);
-    String core1DataDir = tmpDir.getAbsolutePath() + File.separator + System.currentTimeMillis() + "unloadcollection1" + "_1n";
-    createCmd.setDataDir(getDataDir(core1DataDir));
-    adminClient.request(createCmd);
-    adminClient.shutdown();
-    adminClient = null;
-    
+    try (HttpSolrClient adminClient = new HttpSolrClient(url1)) {
+      adminClient.setConnectionTimeout(15000);
+      adminClient.setSoTimeout(60000);
+
+      Create createCmd = new Create();
+      createCmd.setCoreName("unloadcollection1");
+      createCmd.setCollection("unloadcollection");
+      createCmd.setNumShards(1);
+      createCmd.setDataDir(getDataDir(core1DataDir));
+      adminClient.request(createCmd);
+    }
     ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();
     
     zkStateReader.updateClusterState(true);
@@ -170,17 +170,15 @@ public class UnloadDistributedZkTest extends BasicDistributedZkTest {
     
     client = clients.get(1);
     String url2 = getBaseUrl(client);
-    adminClient = new HttpSolrClient(url2);
-    
-    createCmd = new Create();
-    createCmd.setCoreName("unloadcollection2");
-    createCmd.setCollection("unloadcollection");
-    String core2dataDir = tmpDir.getAbsolutePath() + File.separator + System.currentTimeMillis() + "unloadcollection1" + "_2n";
-    createCmd.setDataDir(getDataDir(core2dataDir));
-    adminClient.request(createCmd);
-    adminClient.shutdown();
-    adminClient = null;
-    
+    try (HttpSolrClient adminClient = new HttpSolrClient(url2)) {
+
+      Create createCmd = new Create();
+      createCmd.setCoreName("unloadcollection2");
+      createCmd.setCollection("unloadcollection");
+      String core2dataDir = tmpDir.getAbsolutePath() + File.separator + System.currentTimeMillis() + "unloadcollection1" + "_2n";
+      createCmd.setDataDir(getDataDir(core2dataDir));
+      adminClient.request(createCmd);
+    }
     zkStateReader.updateClusterState(true);
     slices = zkStateReader.getClusterState().getCollection("unloadcollection").getSlices().size();
     assertEquals(1, slices);
@@ -190,73 +188,64 @@ public class UnloadDistributedZkTest extends BasicDistributedZkTest {
     ZkCoreNodeProps leaderProps = getLeaderUrlFromZk("unloadcollection", "shard1");
     
     Random random = random();
-    HttpSolrClient collectionClient;
     if (random.nextBoolean()) {
-      collectionClient = new HttpSolrClient(leaderProps.getCoreUrl());
-      // lets try and use the solrj client to index and retrieve a couple
-      // documents
-      SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,
-          "humpty dumpy sat on a wall");
-      SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,
-          "humpty dumpy3 sat on a walls");
-      SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,
-          "humpty dumpy2 sat on a walled");
-      collectionClient.add(doc1);
-      collectionClient.add(doc2);
-      collectionClient.add(doc3);
-      collectionClient.commit();
-      collectionClient.shutdown();
-      collectionClient = null;
+      try (HttpSolrClient collectionClient = new HttpSolrClient(leaderProps.getCoreUrl())) {
+        // lets try and use the solrj client to index and retrieve a couple
+        // documents
+        SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,
+            "humpty dumpy sat on a wall");
+        SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,
+            "humpty dumpy3 sat on a walls");
+        SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,
+            "humpty dumpy2 sat on a walled");
+        collectionClient.add(doc1);
+        collectionClient.add(doc2);
+        collectionClient.add(doc3);
+        collectionClient.commit();
+      }
     }
 
     // create another replica for our collection
     client = clients.get(2);
     String url3 = getBaseUrl(client);
-    adminClient = new HttpSolrClient(url3);
-    
-    createCmd = new Create();
-    createCmd.setCoreName("unloadcollection3");
-    createCmd.setCollection("unloadcollection");
-    String core3dataDir = tmpDir.getAbsolutePath() + File.separator + System.currentTimeMillis() + "unloadcollection" + "_3n";
-    createCmd.setDataDir(getDataDir(core3dataDir));
-    adminClient.request(createCmd);
-    adminClient.shutdown();
-    adminClient = null;
-    
+    try (HttpSolrClient adminClient = new HttpSolrClient(url3)) {
+      Create createCmd = new Create();
+      createCmd.setCoreName("unloadcollection3");
+      createCmd.setCollection("unloadcollection");
+      String core3dataDir = tmpDir.getAbsolutePath() + File.separator + System.currentTimeMillis() + "unloadcollection" + "_3n";
+      createCmd.setDataDir(getDataDir(core3dataDir));
+      adminClient.request(createCmd);
+    }
     
     waitForRecoveriesToFinish("unloadcollection", zkStateReader, false);
     
     // so that we start with some versions when we reload...
     DirectUpdateHandler2.commitOnClose = false;
     
-    HttpSolrClient addClient = new HttpSolrClient(url3 + "/unloadcollection3");
-    addClient.setConnectionTimeout(30000);
-
-    // add a few docs
-    for (int x = 20; x < 100; x++) {
-      SolrInputDocument doc1 = getDoc(id, x, i1, -600, tlong, 600, t1,
-          "humpty dumpy sat on a wall");
-      addClient.add(doc1);
-    }
-    addClient.shutdown();
-    addClient = null;
+    try (HttpSolrClient addClient = new HttpSolrClient(url3 + "/unloadcollection3")) {
+      addClient.setConnectionTimeout(30000);
 
+      // add a few docs
+      for (int x = 20; x < 100; x++) {
+        SolrInputDocument doc1 = getDoc(id, x, i1, -600, tlong, 600, t1,
+            "humpty dumpy sat on a wall");
+        addClient.add(doc1);
+      }
+    }
     // don't commit so they remain in the tran log
     //collectionClient.commit();
     
     // unload the leader
-    collectionClient = new HttpSolrClient(leaderProps.getBaseUrl());
-    collectionClient.setConnectionTimeout(15000);
-    collectionClient.setSoTimeout(30000);
-    
-    Unload unloadCmd = new Unload(false);
-    unloadCmd.setCoreName(leaderProps.getCoreName());
-    ModifiableSolrParams p = (ModifiableSolrParams) unloadCmd.getParams();
+    try (HttpSolrClient collectionClient = new HttpSolrClient(leaderProps.getBaseUrl())) {
+      collectionClient.setConnectionTimeout(15000);
+      collectionClient.setSoTimeout(30000);
 
-    collectionClient.request(unloadCmd);
-    collectionClient.shutdown();
-    collectionClient = null;
+      Unload unloadCmd = new Unload(false);
+      unloadCmd.setCoreName(leaderProps.getCoreName());
+      ModifiableSolrParams p = (ModifiableSolrParams) unloadCmd.getParams();
 
+      collectionClient.request(unloadCmd);
+    }
 //    Thread.currentThread().sleep(500);
 //    printLayout();
     
@@ -271,51 +260,45 @@ public class UnloadDistributedZkTest extends BasicDistributedZkTest {
     // ensure there is a leader
     zkStateReader.getLeaderRetry("unloadcollection", "shard1", 15000);
     
-    addClient = new HttpSolrClient(url2 + "/unloadcollection2");
-    addClient.setConnectionTimeout(30000);
-    addClient.setSoTimeout(90000);
-    
-    // add a few docs while the leader is down
-    for (int x = 101; x < 200; x++) {
-      SolrInputDocument doc1 = getDoc(id, x, i1, -600, tlong, 600, t1,
-          "humpty dumpy sat on a wall");
-      addClient.add(doc1);
+    try (HttpSolrClient addClient = new HttpSolrClient(url2 + "/unloadcollection2")) {
+      addClient.setConnectionTimeout(30000);
+      addClient.setSoTimeout(90000);
+
+      // add a few docs while the leader is down
+      for (int x = 101; x < 200; x++) {
+        SolrInputDocument doc1 = getDoc(id, x, i1, -600, tlong, 600, t1,
+            "humpty dumpy sat on a wall");
+        addClient.add(doc1);
+      }
     }
-    addClient.shutdown();
-    addClient = null;
-    
     
     // create another replica for our collection
     client = clients.get(3);
     String url4 = getBaseUrl(client);
-    adminClient = new HttpSolrClient(url4);
-    adminClient.setConnectionTimeout(15000);
-    adminClient.setSoTimeout(30000);
-    
-    createCmd = new Create();
-    createCmd.setCoreName("unloadcollection4");
-    createCmd.setCollection("unloadcollection");
-    String core4dataDir = tmpDir.getAbsolutePath() + File.separator + System.currentTimeMillis() + "unloadcollection" + "_4n";
-    createCmd.setDataDir(getDataDir(core4dataDir));
-    adminClient.request(createCmd);
-    adminClient.shutdown();
-    adminClient = null;
-    
+    try (HttpSolrClient adminClient = new HttpSolrClient(url4)) {
+      adminClient.setConnectionTimeout(15000);
+      adminClient.setSoTimeout(30000);
+
+      Create createCmd = new Create();
+      createCmd.setCoreName("unloadcollection4");
+      createCmd.setCollection("unloadcollection");
+      String core4dataDir = tmpDir.getAbsolutePath() + File.separator + System.currentTimeMillis() + "unloadcollection" + "_4n";
+      createCmd.setDataDir(getDataDir(core4dataDir));
+      adminClient.request(createCmd);
+    }
     waitForRecoveriesToFinish("unloadcollection", zkStateReader, false);
     
     // unload the leader again
     leaderProps = getLeaderUrlFromZk("unloadcollection", "shard1");
-    collectionClient = new HttpSolrClient(leaderProps.getBaseUrl());
-    collectionClient.setConnectionTimeout(15000);
-    collectionClient.setSoTimeout(30000);
-    
-    unloadCmd = new Unload(false);
-    unloadCmd.setCoreName(leaderProps.getCoreName());
-    p = (ModifiableSolrParams) unloadCmd.getParams();
-    collectionClient.request(unloadCmd);
-    collectionClient.shutdown();
-    collectionClient = null;
-    
+    try (HttpSolrClient collectionClient = new HttpSolrClient(leaderProps.getBaseUrl())) {
+      collectionClient.setConnectionTimeout(15000);
+      collectionClient.setSoTimeout(30000);
+
+      Unload unloadCmd = new Unload(false);
+      unloadCmd.setCoreName(leaderProps.getCoreName());
+      SolrParams p = (ModifiableSolrParams) unloadCmd.getParams();
+      collectionClient.request(unloadCmd);
+    }
     tries = 50;
     while (leaderProps.getCoreUrl().equals(zkStateReader.getLeaderUrl("unloadcollection", "shard1", 15000))) {
       Thread.sleep(100);
@@ -331,88 +314,90 @@ public class UnloadDistributedZkTest extends BasicDistributedZkTest {
     DirectUpdateHandler2.commitOnClose = true;
     
     // bring the downed leader back as replica
-    adminClient = new HttpSolrClient(leaderProps.getBaseUrl());
-    adminClient.setConnectionTimeout(15000);
-    adminClient.setSoTimeout(30000);
-    
-    createCmd = new Create();
-    createCmd.setCoreName(leaderProps.getCoreName());
-    createCmd.setCollection("unloadcollection");
-    createCmd.setDataDir(getDataDir(core1DataDir));
-    adminClient.request(createCmd);
-    adminClient.shutdown();
-    adminClient = null;
+    try (HttpSolrClient adminClient = new HttpSolrClient(leaderProps.getBaseUrl())) {
+      adminClient.setConnectionTimeout(15000);
+      adminClient.setSoTimeout(30000);
 
+      Create createCmd = new Create();
+      createCmd.setCoreName(leaderProps.getCoreName());
+      createCmd.setCollection("unloadcollection");
+      createCmd.setDataDir(getDataDir(core1DataDir));
+      adminClient.request(createCmd);
+    }
     waitForRecoveriesToFinish("unloadcollection", zkStateReader, false);
-    
-    adminClient = new HttpSolrClient(url2 + "/unloadcollection");
-    adminClient.setConnectionTimeout(15000);
-    adminClient.setSoTimeout(30000);
-    adminClient.commit();
-    SolrQuery q = new SolrQuery("*:*");
-    q.set("distrib", false);
-    long found1 = adminClient.query(q).getResults().getNumFound();
-    adminClient.shutdown();
-    adminClient = new HttpSolrClient(url3 + "/unloadcollection");
-    adminClient.setConnectionTimeout(15000);
-    adminClient.setSoTimeout(30000);
-    adminClient.commit();
-    q = new SolrQuery("*:*");
-    q.set("distrib", false);
-    long found3 = adminClient.query(q).getResults().getNumFound();
-    adminClient.shutdown();
-    adminClient = new HttpSolrClient(url4 + "/unloadcollection");
-    adminClient.setConnectionTimeout(15000);
-    adminClient.setSoTimeout(30000);
-    adminClient.commit();
-    q = new SolrQuery("*:*");
-    q.set("distrib", false);
-    long found4 = adminClient.query(q).getResults().getNumFound();
-    
-    // all 3 shards should now have the same number of docs
-    assertEquals(found1, found3);
-    assertEquals(found3, found4);
-    adminClient.shutdown();
+
+    long found1, found3;
+    
+    try (HttpSolrClient adminClient = new HttpSolrClient(url2 + "/unloadcollection")) {
+      adminClient.setConnectionTimeout(15000);
+      adminClient.setSoTimeout(30000);
+      adminClient.commit();
+      SolrQuery q = new SolrQuery("*:*");
+      q.set("distrib", false);
+      found1 = adminClient.query(q).getResults().getNumFound();
+    }
+    try (HttpSolrClient adminClient = new HttpSolrClient(url3 + "/unloadcollection")) {
+      adminClient.setConnectionTimeout(15000);
+      adminClient.setSoTimeout(30000);
+      adminClient.commit();
+      SolrQuery q = new SolrQuery("*:*");
+      q.set("distrib", false);
+      found3 = adminClient.query(q).getResults().getNumFound();
+    }
+
+    try (HttpSolrClient adminClient = new HttpSolrClient(url4 + "/unloadcollection")) {
+      adminClient.setConnectionTimeout(15000);
+      adminClient.setSoTimeout(30000);
+      adminClient.commit();
+      SolrQuery q = new SolrQuery("*:*");
+      q.set("distrib", false);
+      long found4 = adminClient.query(q).getResults().getNumFound();
+
+      // all 3 shards should now have the same number of docs
+      assertEquals(found1, found3);
+      assertEquals(found3, found4);
+    }
     
   }
   
   private void testUnloadLotsOfCores() throws Exception {
     SolrClient client = clients.get(2);
     String url3 = getBaseUrl(client);
-    final HttpSolrClient adminClient = new HttpSolrClient(url3);
-    adminClient.setConnectionTimeout(15000);
-    adminClient.setSoTimeout(60000);
-    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,
-        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),
-        new DefaultSolrThreadFactory("testExecutor"));
-    int cnt = atLeast(3);
-    
-    // create the cores
-    createCores(adminClient, executor, "multiunload", 2, cnt);
-    
-    executor.shutdown();
-    executor.awaitTermination(120, TimeUnit.SECONDS);
-    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,
-        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),
-        new DefaultSolrThreadFactory("testExecutor"));
-    for (int j = 0; j < cnt; j++) {
-      final int freezeJ = j;
-      executor.execute(new Runnable() {
-        @Override
-        public void run() {
-          Unload unloadCmd = new Unload(true);
-          unloadCmd.setCoreName("multiunload" + freezeJ);
-          try {
-            adminClient.request(unloadCmd);
-          } catch (SolrServerException | IOException e) {
-            throw new RuntimeException(e);
+    try (final HttpSolrClient adminClient = new HttpSolrClient(url3)) {
+      adminClient.setConnectionTimeout(15000);
+      adminClient.setSoTimeout(60000);
+      ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,
+          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),
+          new DefaultSolrThreadFactory("testExecutor"));
+      int cnt = atLeast(3);
+
+      // create the cores
+      createCores(adminClient, executor, "multiunload", 2, cnt);
+
+      executor.shutdown();
+      executor.awaitTermination(120, TimeUnit.SECONDS);
+      executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,
+          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),
+          new DefaultSolrThreadFactory("testExecutor"));
+      for (int j = 0; j < cnt; j++) {
+        final int freezeJ = j;
+        executor.execute(new Runnable() {
+          @Override
+          public void run() {
+            Unload unloadCmd = new Unload(true);
+            unloadCmd.setCoreName("multiunload" + freezeJ);
+            try {
+              adminClient.request(unloadCmd);
+            } catch (SolrServerException | IOException e) {
+              throw new RuntimeException(e);
+            }
           }
-        }
-      });
-      Thread.sleep(random().nextInt(50));
+        });
+        Thread.sleep(random().nextInt(50));
+      }
+      executor.shutdown();
+      executor.awaitTermination(120, TimeUnit.SECONDS);
     }
-    executor.shutdown();
-    executor.awaitTermination(120, TimeUnit.SECONDS);
-    adminClient.shutdown();
   }
+
 }
diff --git a/solr/core/src/test/org/apache/solr/cloud/hdfs/HdfsWriteToMultipleCollectionsTest.java b/solr/core/src/test/org/apache/solr/cloud/hdfs/HdfsWriteToMultipleCollectionsTest.java
index b0126a2..0aedc11 100644
--- a/solr/core/src/test/org/apache/solr/cloud/hdfs/HdfsWriteToMultipleCollectionsTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/hdfs/HdfsWriteToMultipleCollectionsTest.java
@@ -22,6 +22,7 @@ import com.carrotsearch.randomizedtesting.annotations.ThreadLeakScope.Scope;
 import org.apache.hadoop.hdfs.MiniDFSCluster;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.store.NRTCachingDirectory;
+import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase.Nightly;
 import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.apache.solr.client.solrj.SolrQuery;
@@ -117,10 +118,8 @@ public class HdfsWriteToMultipleCollectionsTest extends BasicDistributedZkTest {
       client.commit();
       collectionsCount += client.query(new SolrQuery("*:*")).getResults().getNumFound();
     }
-    
-    for (CloudSolrClient client : cloudClients) {
-      client.shutdown();
-    }
+
+    IOUtils.close(cloudClients);
 
     assertEquals(addCnt, collectionsCount);
     
diff --git a/solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest.java b/solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest.java
index 23fcd5a..59dc8f7 100644
--- a/solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest.java
@@ -17,14 +17,8 @@
 
 package org.apache.solr.cloud.hdfs;
 
-import java.io.IOException;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Timer;
-import java.util.TimerTask;
-
+import com.carrotsearch.randomizedtesting.annotations.ThreadLeakScope;
+import com.carrotsearch.randomizedtesting.annotations.ThreadLeakScope.Scope;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
@@ -32,8 +26,8 @@ import org.apache.hadoop.hdfs.MiniDFSCluster;
 import org.apache.hadoop.hdfs.server.namenode.NameNodeAdapter;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.LuceneTestCase.Slow;
-import org.apache.solr.client.solrj.SolrQuery;
 import org.apache.solr.client.solrj.SolrClient;
+import org.apache.solr.client.solrj.SolrQuery;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.impl.HttpSolrClient;
 import org.apache.solr.client.solrj.request.QueryRequest;
@@ -45,11 +39,16 @@ import org.apache.solr.common.util.NamedList;
 import org.apache.zookeeper.KeeperException;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
-
-import com.carrotsearch.randomizedtesting.annotations.ThreadLeakScope;
-import com.carrotsearch.randomizedtesting.annotations.ThreadLeakScope.Scope;
 import org.junit.Test;
 
+import java.io.IOException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Timer;
+import java.util.TimerTask;
+
 @Slow
 @ThreadLeakScope(Scope.NONE) // hdfs client currently leaks thread(s)
 public class StressHdfsTest extends BasicDistributedZkTest {
@@ -164,8 +163,7 @@ public class StressHdfsTest extends BasicDistributedZkTest {
     
     int i = 0;
     for (SolrClient client : clients) {
-      HttpSolrClient c = new HttpSolrClient(getBaseUrl(client) + "/" + DELETE_DATA_DIR_COLLECTION);
-      try {
+      try (HttpSolrClient c = new HttpSolrClient(getBaseUrl(client) + "/" + DELETE_DATA_DIR_COLLECTION)) {
         int docCnt = random().nextInt(1000) + 1;
         for (int j = 0; j < docCnt; j++) {
           c.add(getDoc("id", i++, "txt_t", "just some random text for a doc"));
@@ -183,8 +181,6 @@ public class StressHdfsTest extends BasicDistributedZkTest {
         NamedList<Object> coreInfo = (NamedList<Object>) response.get("core");
         String dataDir = (String) ((NamedList<Object>) coreInfo.get("directory")).get("data");
         dataDirs.add(dataDir);
-      } finally {
-        c.shutdown();
       }
     }
     
diff --git a/solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest.java b/solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest.java
index d787390..1d748e5 100644
--- a/solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest.java
+++ b/solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest.java
@@ -18,8 +18,8 @@
 package org.apache.solr.core;
 
 import org.apache.commons.io.FileUtils;
+import org.apache.lucene.util.IOUtils;
 import org.apache.solr.SolrTestCaseJ4;
-import org.apache.solr.client.solrj.SolrClient;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
 import org.apache.solr.client.solrj.impl.HttpSolrClient;
 import org.apache.solr.client.solrj.request.UpdateRequest;
@@ -93,12 +93,8 @@ public class OpenCloseCoreStressTest extends SolrTestCaseJ4 {
   @After
   public void tearDownServer() throws Exception {
     if (jetty != null) jetty.stop();
-    for(SolrClient client: indexingClients) {
-      client.shutdown();
-    }
-    for(SolrClient client: queryingClients) {
-      client.shutdown();
-    }
+    IOUtils.close(indexingClients);
+    IOUtils.close(queryingClients);
     indexingClients.clear();
     queryingClients.clear();
   }
diff --git a/solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java b/solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java
index 4d14b17..f273333 100644
--- a/solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java
+++ b/solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java
@@ -59,8 +59,8 @@ public class TestBlobHandler extends AbstractFullDistribZkTestBase {
 
   @Test
   public void doBlobHandlerTest() throws Exception {
-    SolrClient client = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)));
-    try {
+
+    try (SolrClient client = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)))) {
       CollectionAdminResponse response1;
       CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();
       createCollectionRequest.setCollectionName(".system");
@@ -99,8 +99,6 @@ public class TestBlobHandler extends AbstractFullDistribZkTestBase {
 
       compareInputAndOutput(baseUrl+"/.system/blob/test?wt=filestream", bytarr2);
       compareInputAndOutput(baseUrl+"/.system/blob/test/1?wt=filestream", bytarr);
-    } finally {
-      client.shutdown();
     }
   }
 
diff --git a/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java b/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
index d1c2405..22a96c2 100644
--- a/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
+++ b/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
@@ -138,8 +138,8 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     slave.tearDown();
     masterJetty = slaveJetty = null;
     master = slave = null;
-    masterClient.shutdown();
-    slaveClient.shutdown();
+    masterClient.close();
+    slaveClient.close();
     masterClient = slaveClient = null;
   }
 
@@ -269,15 +269,12 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     params.set("qt","/admin/cores");
     QueryRequest req = new QueryRequest(params);
 
-    HttpSolrClient adminClient = adminClient(s);
-    try {
+    try (HttpSolrClient adminClient = adminClient(s)) {
       NamedList<Object> res = adminClient.request(req);
       assertNotNull("null response from server", res);
       return res;
     }
-    finally {
-      adminClient.shutdown();
-    }
+
   }
 
   private HttpSolrClient adminClient(SolrClient client) {
@@ -350,7 +347,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
       try { 
         if (repeater != null) repeater.tearDown();
       } catch (Exception e) { /* :NOOP: */ }
-      if (repeaterClient != null) repeaterClient.shutdown();
+      if (repeaterClient != null) repeaterClient.close();
     }
   }
 
@@ -500,7 +497,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     masterJetty.stop();
 
     masterJetty = createJetty(master);
-    masterClient.shutdown();
+    masterClient.close();
     masterClient = createNewSolrClient(masterJetty.getLocalPort());
 
     slave.setTestPort(masterJetty.getLocalPort());
@@ -519,7 +516,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     assertFalse(slaveXsltDir.exists());
 
     slaveJetty = createJetty(slave);
-    slaveClient.shutdown();
+    slaveClient.close();
     slaveClient = createNewSolrClient(slaveJetty.getLocalPort());
 
     //add a doc with new field and commit on master to trigger snappull from slave.
@@ -596,7 +593,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     slave.copyConfigFile(CONF_DIR + "solrconfig-slave1.xml", "solrconfig.xml");
     slaveJetty.stop();
     slaveJetty = createJetty(slave);
-    slaveClient.shutdown();
+    slaveClient.close();
     slaveClient = createNewSolrClient(slaveJetty.getLocalPort());
 
     masterClient.deleteByQuery("*:*");
@@ -732,14 +729,14 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
       slave.copyConfigFile(CONF_DIR +slaveSchema, "schema.xml");
       slaveJetty.stop();
       slaveJetty = createJetty(slave);
-      slaveClient.shutdown();
+      slaveClient.close();
       slaveClient = createNewSolrClient(slaveJetty.getLocalPort());
 
       master.copyConfigFile(CONF_DIR + "solrconfig-master3.xml",
           "solrconfig.xml");
       masterJetty.stop();
       masterJetty = createJetty(master);
-      masterClient.shutdown();
+      masterClient.close();
       masterClient = createNewSolrClient(masterJetty.getLocalPort());
       
       masterClient.deleteByQuery("*:*");
@@ -854,7 +851,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     slave.copyConfigFile(CONF_DIR + "solrconfig-slave1.xml", "solrconfig.xml");
     slaveJetty.stop();
     slaveJetty = createJetty(slave);
-    slaveClient.shutdown();
+    slaveClient.close();
     slaveClient = createNewSolrClient(slaveJetty.getLocalPort());
 
     try {
@@ -864,7 +861,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
           "solrconfig.xml");
       repeaterJetty = createJetty(repeater);
       if (repeaterClient != null) {
-        repeaterClient.shutdown();
+        repeaterClient.close();
       }
       repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());
       
@@ -916,7 +913,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
         repeaterJetty = null;
       }
       if (repeaterClient != null) {
-        repeaterClient.shutdown();
+        repeaterClient.close();
       }
     }
     
@@ -1000,7 +997,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     masterJetty.stop();
 
     masterJetty = createJetty(master);
-    masterClient.shutdown();
+    masterClient.close();
     masterClient = createNewSolrClient(masterJetty.getLocalPort());
     
     for (int i = 0; i < nDocs; i++)
@@ -1018,7 +1015,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
 
     //start slave
     slaveJetty = createJetty(slave);
-    slaveClient.shutdown();
+    slaveClient.close();
     slaveClient = createNewSolrClient(slaveJetty.getLocalPort());
 
     //get docs from slave and check if number is equal to master
@@ -1052,7 +1049,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
       masterJetty.stop();
       
       masterJetty = createJetty(master);
-      masterClient.shutdown();
+      masterClient.close();
       masterClient = createNewSolrClient(masterJetty.getLocalPort());
       
       for (int i = 0; i < nDocs; i++)
@@ -1078,7 +1075,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
       
       // start slave
       slaveJetty = createJetty(slave);
-      slaveClient.shutdown();
+      slaveClient.close();
       slaveClient = createNewSolrClient(slaveJetty.getLocalPort());
       
       // get docs from slave and check if number is equal to master
@@ -1112,7 +1109,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     masterJetty.stop();
 
     masterJetty = createJetty(master);
-    masterClient.shutdown();
+    masterClient.close();
     masterClient = createNewSolrClient(masterJetty.getLocalPort());
 
     masterClient.deleteByQuery("*:*");
@@ -1130,7 +1127,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
 
     //start slave
     slaveJetty = createJetty(slave);
-    slaveClient.shutdown();
+    slaveClient.close();
     slaveClient = createNewSolrClient(slaveJetty.getLocalPort());
     
     //get docs from slave and check if number is equal to master
@@ -1211,7 +1208,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     masterJetty.stop();
 
     masterJetty = createJetty(master);
-    masterClient.shutdown();
+    masterClient.close();
     masterClient = createNewSolrClient(masterJetty.getLocalPort());
 
     slave.setTestPort(masterJetty.getLocalPort());
@@ -1219,7 +1216,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
 
     slaveJetty.stop();
     slaveJetty = createJetty(slave);
-    slaveClient.shutdown();
+    slaveClient.close();
     slaveClient = createNewSolrClient(slaveJetty.getLocalPort());
 
     slaveClient.deleteByQuery("*:*");
@@ -1272,7 +1269,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     master.copyConfigFile(CONF_DIR + "solrconfig-master-throttled.xml", "solrconfig.xml");
     useFactory(null);
     masterJetty = createJetty(master);
-    masterClient.shutdown();
+    masterClient.close();
     masterClient = createNewSolrClient(masterJetty.getLocalPort());
 
     //index docs
@@ -1284,7 +1281,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
 
     //Check Index Size
     String dataDir = master.getDataDir();
-    masterClient.shutdown();
+    masterClient.close();
     masterJetty.stop();
 
     Directory dir = FSDirectory.open(Paths.get(dataDir, "index"));
@@ -1305,7 +1302,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     slave.setTestPort(masterJetty.getLocalPort());
     slave.copyConfigFile(CONF_DIR + "solrconfig-slave1.xml", "solrconfig.xml");
     slaveJetty = createJetty(slave);
-    slaveClient.shutdown();
+    slaveClient.close();
     slaveClient = createNewSolrClient(slaveJetty.getLocalPort());
 
     long startTime = System.nanoTime();
@@ -1403,8 +1400,7 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
     final long sleepInterval = 200;
     long timeSlept = 0;
 
-    HttpSolrClient adminClient = adminClient(client);
-    try {
+    try (HttpSolrClient adminClient = adminClient(client)) {
       SolrParams p = params("action", "status", "core", "collection1");
       while (timeSlept < timeout) {
         QueryRequest req = new QueryRequest(p);
@@ -1434,9 +1430,6 @@ public class TestReplicationHandler extends SolrTestCaseJ4 {
       fail("timed out waiting for collection1 startAt time to exceed: " + min);
       return min; // compilation neccessity
     }
-    finally {
-      adminClient.shutdown();
-    }
   }
   
   private static String buildUrl(int port) {
diff --git a/solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.java b/solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.java
index ff23652..beb7f7b 100644
--- a/solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.java
+++ b/solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.java
@@ -108,7 +108,7 @@ public class TestReplicationHandlerBackup extends SolrJettyTestBase {
   @After
   public void tearDown() throws Exception {
     super.tearDown();
-    masterClient.shutdown();
+    masterClient.close();
     masterClient  = null;
     masterJetty.stop();
     master.tearDown();
diff --git a/solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest.java b/solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest.java
index af97a84..58d7b76 100644
--- a/solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest.java
+++ b/solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest.java
@@ -201,41 +201,31 @@ public class CoreAdminHandlerTest extends SolrTestCaseJ4 {
     File corex = new File(solrHomeDirectory, "corex");
     FileUtils.write(new File(corex, "core.properties"), "", Charsets.UTF_8.toString());
     JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), "/solr", 0);
-    HttpSolrClient client = null;
-    try {
-      runner.start();
-      client = new HttpSolrClient("http://localhost:" + runner.getLocalPort() + "/solr/corex");
+    runner.start();
+
+    try (HttpSolrClient client = new HttpSolrClient("http://localhost:" + runner.getLocalPort() + "/solr/corex")) {
       client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);
       client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);
       SolrInputDocument doc = new SolrInputDocument();
       doc.addField("id", "123");
       client.add(doc);
       client.commit();
-      client.shutdown();
+    }
 
-      client = new HttpSolrClient("http://localhost:" + runner.getLocalPort() + "/solr");
+    try (HttpSolrClient client = new HttpSolrClient("http://localhost:" + runner.getLocalPort() + "/solr")) {
       client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);
       client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);
       CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);
       req.setDeleteInstanceDir(true);
       req.setCoreName("corex");
       req.process(client);
-      client.shutdown();
+    }
 
-      runner.stop();
+    runner.stop();
+
+    assertFalse("Instance directory exists after core unload with deleteInstanceDir=true : " + corex,
+        corex.exists());
 
-      assertFalse("Instance directory exists after core unload with deleteInstanceDir=true : " + corex,
-          corex.exists());
-    } catch (Exception e) {
-      log.error("Exception testing core unload with deleteInstanceDir=true", e);
-    } finally {
-      if (client != null) {
-        client.shutdown();
-      }
-      if (!runner.isStopped())  {
-        runner.stop();
-      }
-    }
   }
 
   @Test
diff --git a/solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest.java b/solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest.java
index 9efacc2..ef9be3d 100644
--- a/solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest.java
+++ b/solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest.java
@@ -75,17 +75,13 @@ public class DistributedDebugComponentTest extends SolrJettyTestBase {
     shard2 = urlCollection2.replaceAll("https?://", "");
     
     //create second core
-    HttpSolrClient nodeClient = new HttpSolrClient(url);
-    try {
+    try (HttpSolrClient nodeClient = new HttpSolrClient(url)) {
       CoreAdminRequest.Create req = new CoreAdminRequest.Create();
       req.setCoreName("collection2");
       req.setConfigSet("collection1");
       nodeClient.request(req);
     }
-    finally {
-      nodeClient.shutdown();
-    }
-    
+
     SolrInputDocument doc = new SolrInputDocument();
     doc.setField("id", "1");
     doc.setField("text", "batman");
@@ -101,8 +97,8 @@ public class DistributedDebugComponentTest extends SolrJettyTestBase {
   
   @AfterClass
   public static void destroyThings() throws Exception {
-    collection1.shutdown();
-    collection2.shutdown();
+    collection1.close();
+    collection2.close();
     collection1 = null;
     collection2 = null;
     jetty.stop();
diff --git a/solr/core/src/test/org/apache/solr/schema/TestBinaryField.java b/solr/core/src/test/org/apache/solr/schema/TestBinaryField.java
index d43163d..4e85d2d 100644
--- a/solr/core/src/test/org/apache/solr/schema/TestBinaryField.java
+++ b/solr/core/src/test/org/apache/solr/schema/TestBinaryField.java
@@ -76,90 +76,91 @@ public class TestBinaryField extends SolrJettyTestBase {
 
 
   public void testSimple() throws Exception {
-    SolrClient client = getSolrClient();
-    byte[] buf = new byte[10];
-    for (int i = 0; i < 10; i++) {
-      buf[i] = (byte) i;
-    }
-    SolrInputDocument doc = null;
-    doc = new SolrInputDocument();
-    doc.addField("id", 1);
-    doc.addField("data", ByteBuffer.wrap(buf, 2, 5));
-    client.add(doc);
-
-    doc = new SolrInputDocument();
-    doc.addField("id", 2);
-    doc.addField("data", ByteBuffer.wrap(buf, 4, 3));
-    client.add(doc);
-
-    doc = new SolrInputDocument();
-    doc.addField("id", 3);
-    doc.addField("data", buf);
-    client.add(doc);
-
-    client.commit();
-
-    QueryResponse resp = client.query(new SolrQuery("*:*"));
-    client.shutdown();
-    SolrDocumentList res = resp.getResults();
-    List<Bean> beans = resp.getBeans(Bean.class);
-    assertEquals(3, res.size());
-    assertEquals(3, beans.size());
-    for (SolrDocument d : res) {
-      Integer id = (Integer) d.getFieldValue("id");
-      byte[] data = (byte[]) d.getFieldValue("data");
-      if (id == 1) {
-        assertEquals(5, data.length);
-        for (int i = 0; i < data.length; i++) {
-          byte b = data[i];
-          assertEquals((byte)(i + 2), b);
-        }
-
-      } else if (id == 2) {
-        assertEquals(3, data.length);
-        for (int i = 0; i < data.length; i++) {
-          byte b = data[i];
-          assertEquals((byte)(i + 4), b);
-        }
-
-
-      } else if (id == 3) {
-        assertEquals(10, data.length);
-        for (int i = 0; i < data.length; i++) {
-          byte b = data[i];
-          assertEquals((byte)i, b);
-        }
-
+    try (SolrClient client = getSolrClient()) {
+      byte[] buf = new byte[10];
+      for (int i = 0; i < 10; i++) {
+        buf[i] = (byte) i;
       }
+      SolrInputDocument doc = null;
+      doc = new SolrInputDocument();
+      doc.addField("id", 1);
+      doc.addField("data", ByteBuffer.wrap(buf, 2, 5));
+      client.add(doc);
+
+      doc = new SolrInputDocument();
+      doc.addField("id", 2);
+      doc.addField("data", ByteBuffer.wrap(buf, 4, 3));
+      client.add(doc);
+
+      doc = new SolrInputDocument();
+      doc.addField("id", 3);
+      doc.addField("data", buf);
+      client.add(doc);
+
+      client.commit();
+
+      QueryResponse resp = client.query(new SolrQuery("*:*"));
+      SolrDocumentList res = resp.getResults();
+      List<Bean> beans = resp.getBeans(Bean.class);
+      assertEquals(3, res.size());
+      assertEquals(3, beans.size());
+      for (SolrDocument d : res) {
+
+        Integer id = (Integer) d.getFieldValue("id");
+        byte[] data = (byte[]) d.getFieldValue("data");
+        if (id == 1) {
+          assertEquals(5, data.length);
+          for (int i = 0; i < data.length; i++) {
+            byte b = data[i];
+            assertEquals((byte) (i + 2), b);
+          }
+
+        } else if (id == 2) {
+          assertEquals(3, data.length);
+          for (int i = 0; i < data.length; i++) {
+            byte b = data[i];
+            assertEquals((byte) (i + 4), b);
+          }
+
+
+        } else if (id == 3) {
+          assertEquals(10, data.length);
+          for (int i = 0; i < data.length; i++) {
+            byte b = data[i];
+            assertEquals((byte) i, b);
+          }
 
-    }
-    for (Bean d : beans) {
-      Integer id = d.id;
-      byte[] data = d.data;
-      if (id == 1) {
-        assertEquals(5, data.length);
-        for (int i = 0; i < data.length; i++) {
-          byte b = data[i];
-          assertEquals((byte)(i + 2), b);
-        }
-
-      } else if (id == 2) {
-        assertEquals(3, data.length);
-        for (int i = 0; i < data.length; i++) {
-          byte b = data[i];
-          assertEquals((byte)(i + 4), b);
         }
 
+      }
+      for (Bean d : beans) {
+        Integer id = d.id;
+        byte[] data = d.data;
+        if (id == 1) {
+          assertEquals(5, data.length);
+          for (int i = 0; i < data.length; i++) {
+            byte b = data[i];
+            assertEquals((byte) (i + 2), b);
+          }
+
+        } else if (id == 2) {
+          assertEquals(3, data.length);
+          for (int i = 0; i < data.length; i++) {
+            byte b = data[i];
+            assertEquals((byte) (i + 4), b);
+          }
+
+
+        } else if (id == 3) {
+          assertEquals(10, data.length);
+          for (int i = 0; i < data.length; i++) {
+            byte b = data[i];
+            assertEquals((byte) i, b);
+          }
 
-      } else if (id == 3) {
-        assertEquals(10, data.length);
-        for (int i = 0; i < data.length; i++) {
-          byte b = data[i];
-          assertEquals((byte)i, b);
         }
 
       }
-
     }
 
   }
diff --git a/solr/core/src/test/org/apache/solr/search/TestSolrJ.java b/solr/core/src/test/org/apache/solr/search/TestSolrJ.java
index 4aca50f..de98974 100644
--- a/solr/core/src/test/org/apache/solr/search/TestSolrJ.java
+++ b/solr/core/src/test/org/apache/solr/search/TestSolrJ.java
@@ -163,25 +163,22 @@ public class TestSolrJ extends SolrTestCaseJ4 {
 
 
   public void doCommitPerf() throws Exception {
-    HttpSolrClient client = new HttpSolrClient("http://127.0.0.1:8983/solr");
 
-    long start = System.currentTimeMillis();
+    try (HttpSolrClient client = new HttpSolrClient("http://127.0.0.1:8983/solr")) {
 
-    for (int i=0; i<10000; i++) {
-      SolrInputDocument doc = new SolrInputDocument();
-      doc.addField("id", Integer.toString(i % 13));
-      client.add(doc);
-      client.commit(true, true, true);
-    }
+      long start = System.currentTimeMillis();
 
-    long end = System.currentTimeMillis();
+      for (int i = 0; i < 10000; i++) {
+        SolrInputDocument doc = new SolrInputDocument();
+        doc.addField("id", Integer.toString(i % 13));
+        client.add(doc);
+        client.commit(true, true, true);
+      }
 
-    client.shutdown();
+      long end = System.currentTimeMillis();
+      System.out.println("TIME: " + (end-start));
+    }
 
-    System.out.println("TIME: " + (end-start));
   }
 
-
-
-
 }
diff --git a/solr/core/src/test/org/apache/solr/update/MockStreamingSolrClients.java b/solr/core/src/test/org/apache/solr/update/MockStreamingSolrClients.java
index 264b7c2..8ebc83e 100644
--- a/solr/core/src/test/org/apache/solr/update/MockStreamingSolrClients.java
+++ b/solr/core/src/test/org/apache/solr/update/MockStreamingSolrClients.java
@@ -85,9 +85,11 @@ public class MockStreamingSolrClients extends StreamingSolrClients {
       return solrClient.request(request);
     }
 
+    @Override
+    public void shutdown() { }
 
     @Override
-    public void shutdown() {}
+    public void close() {}
     
   }
 }
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient.java b/solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient.java
index 2ec00cd..e5d0ad3 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient.java
@@ -35,6 +35,7 @@ import org.apache.solr.common.params.ModifiableSolrParams;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.NamedList;
 
+import java.io.Closeable;
 import java.io.IOException;
 import java.io.Serializable;
 import java.util.ArrayList;
@@ -47,7 +48,7 @@ import java.util.List;
  *
  * @since 5.0, replaced {@code SolrServer}
  */
-public abstract class SolrClient implements Serializable {
+public abstract class SolrClient implements Serializable, Closeable {
 
   private static final long serialVersionUID = 1L;
   private DocumentObjectBinder binder;
@@ -403,6 +404,13 @@ public abstract class SolrClient implements Serializable {
    * Release allocated resources.
    *
    * @since solr 4.0
+   * @deprecated Use close() instead.
    */
+  @Deprecated
   public abstract void shutdown();
+
+  //@SuppressWarnings("deprecation")
+  public void close() throws IOException {
+    shutdown();
+  }
 }
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java
index bd83e6d..b04e898 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java
@@ -1032,6 +1032,12 @@ public class CloudSolrClient extends SolrClient {
   }
 
   @Override
+  public void close() throws IOException {
+    shutdown();
+  }
+
+  @Override
+  @Deprecated
   public void shutdown() {
     if (zkStateReader != null) {
       synchronized(this) {
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient.java b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient.java
index e6b3aca..5e65021 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient.java
@@ -424,6 +424,12 @@ public class ConcurrentUpdateSolrClient extends SolrClient {
   }
 
   @Override
+  public void close() {
+    shutdown();
+  }
+
+  @Override
+  @Deprecated
   public void shutdown() {
     client.shutdown();
     if (shutdownExecutor) {
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.java b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.java
index 4dc55f7..989a232 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.java
@@ -752,6 +752,12 @@ public class HttpSolrClient extends SolrClient {
    * Close the {@link ClientConnectionManager} from the internal client.
    */
   @Override
+  public void close() throws IOException {
+    shutdown();
+  }
+
+  @Override
+  @Deprecated
   public void shutdown() {
     if (httpClient != null && internalClient) {
       HttpClientUtil.close(httpClient);
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient.java b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient.java
index e48e43e..ba42d90 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient.java
@@ -469,6 +469,12 @@ public class LBHttpSolrClient extends SolrClient {
   }
 
   @Override
+  public void close() {
+    shutdown();
+  }
+
+  @Override
+  @Deprecated
   public void shutdown() {
     if (aliveCheckExecutor != null) {
       aliveCheckExecutor.shutdownNow();
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase.java b/solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase.java
index b100177..d231a94 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase.java
@@ -118,7 +118,7 @@ public abstract class LargeVolumeTestBase extends SolrJettyTestBase
           log.info("Caught benign exception during commit: " + e.getMessage());
         }
         if (!(client instanceof EmbeddedSolrServer)) {
-          client.shutdown();
+          client.close();
         }
 
       } catch (Exception e) {
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java b/solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
index 76e66af..9dacb4b 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
@@ -213,13 +213,13 @@ abstract public class SolrExampleTests extends SolrExampleTestsBase
     if (jetty != null) {
       // check system wide system handler + "/admin/info/system"
       String url = jetty.getBaseUrl().toString();
-      HttpSolrClient adminClient = new HttpSolrClient(url);
-      SolrQuery q = new SolrQuery();
-      q.set("qt", "/admin/info/system");
-      QueryResponse rsp = adminClient.query(q);
-      assertNotNull(rsp.getResponse().get("mode"));
-      assertNotNull(rsp.getResponse().get("lucene"));
-      adminClient.shutdown();
+      try (HttpSolrClient adminClient = new HttpSolrClient(url)) {
+        SolrQuery q = new SolrQuery();
+        q.set("qt", "/admin/info/system");
+        QueryResponse rsp = adminClient.query(q);
+        assertNotNull(rsp.getResponse().get("mode"));
+        assertNotNull(rsp.getResponse().get("lucene"));
+      }
     }
   }
 
@@ -547,7 +547,7 @@ abstract public class SolrExampleTests extends SolrExampleTestsBase
     if (!(client instanceof EmbeddedSolrServer)) {
       /* Do not close in case of using EmbeddedSolrServer,
        * as that would close the CoreContainer */
-      client.shutdown();
+      client.close();
     }
   }
   
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient.java b/solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient.java
index b3e671b..444adf6 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient.java
@@ -105,16 +105,13 @@ public class TestLBHttpSolrClient extends SolrTestCaseJ4 {
       doc.addField("name", solrInstance.name);
       docs.add(doc);
     }
-    HttpSolrClient client = new HttpSolrClient(solrInstance.getUrl(), httpClient);
     SolrResponseBase resp;
-    try {
+    try (HttpSolrClient client = new HttpSolrClient(solrInstance.getUrl(), httpClient)) {
       resp = client.add(docs);
       assertEquals(0, resp.getStatus());
       resp = client.commit();
-    } finally {
-      client.shutdown();
+      assertEquals(0, resp.getStatus());
     }
-    assertEquals(0, resp.getStatus());
   }
 
   @Override
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest.java b/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest.java
index efe07e3..88a608b 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest.java
@@ -76,30 +76,30 @@ public class SolrExampleStreamingTest extends SolrExampleTests {
   public void testWaitOptions() throws Exception {
     // SOLR-3903
     final List<Throwable> failures = new ArrayList<>();
-    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient
+    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient
       (jetty.getBaseUrl().toString() + "/collection1", 2, 2) {
         @Override
         public void handleError(Throwable ex) {
           failures.add(ex);
         }
-      };
-      
-    int docId = 42;
-    for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {
-      for (boolean waitSearch : Arrays.asList(true, false)) {
-        for (boolean waitFlush : Arrays.asList(true, false)) {
-          UpdateRequest updateRequest = new UpdateRequest();
-          SolrInputDocument document = new SolrInputDocument();
-          document.addField("id", docId++ );
-          updateRequest.add(document);
-          updateRequest.setAction(action, waitSearch, waitFlush);
-          concurrentClient.request(updateRequest);
+      }) {
+
+      int docId = 42;
+      for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {
+        for (boolean waitSearch : Arrays.asList(true, false)) {
+          for (boolean waitFlush : Arrays.asList(true, false)) {
+            UpdateRequest updateRequest = new UpdateRequest();
+            SolrInputDocument document = new SolrInputDocument();
+            document.addField("id", docId++);
+            updateRequest.add(document);
+            updateRequest.setAction(action, waitSearch, waitFlush);
+            concurrentClient.request(updateRequest);
+          }
         }
       }
+      concurrentClient.commit();
+      concurrentClient.blockUntilFinished();
     }
-    concurrentClient.commit();
-    concurrentClient.blockUntilFinished();
-    concurrentClient.shutdown();
 
     if (0 != failures.size()) {
       assertEquals(failures.size() + " Unexpected Exception, starting with...", 
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer.java b/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer.java
index 5d17d78..a9a5e97 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer.java
@@ -17,12 +17,8 @@ package org.apache.solr.client.solrj.embedded;
  * limitations under the License.
  */
 
-import java.io.File;
-import java.util.ArrayList;
-import java.util.List;
-
+import com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule;
 import junit.framework.Assert;
-
 import org.apache.solr.core.SolrCore;
 import org.junit.Rule;
 import org.junit.rules.RuleChain;
@@ -30,7 +26,10 @@ import org.junit.rules.TestRule;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule;
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
 
 public class TestEmbeddedSolrServer extends AbstractEmbeddedSolrServerTestCase {
 
@@ -55,9 +54,9 @@ public class TestEmbeddedSolrServer extends AbstractEmbeddedSolrServerTestCase {
     Assert.assertEquals(cores, ((EmbeddedSolrServer)getSolrCore1()).getCoreContainer());
   }
   
-  public void testShutdown() {
+  public void testClose() throws IOException {
     
-    EmbeddedSolrServer solrServer = (EmbeddedSolrServer)getSolrCore0();
+    EmbeddedSolrServer solrServer = (EmbeddedSolrServer) getSolrCore0();
     
     Assert.assertEquals(3, cores.getCores().size());
     List<SolrCore> solrCores = new ArrayList<>();
@@ -66,7 +65,7 @@ public class TestEmbeddedSolrServer extends AbstractEmbeddedSolrServerTestCase {
       solrCores.add(solrCore);
     }
     
-    solrServer.shutdown();
+    solrServer.close();
     
     Assert.assertEquals(0, cores.getCores().size());
     
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest.java b/solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest.java
index 09a1218..34dbfa2 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest.java
@@ -20,7 +20,6 @@ package org.apache.solr.client.solrj.impl;
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
-import org.apache.http.client.HttpClient;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.solr.SolrJettyTestBase;
@@ -44,7 +43,6 @@ import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.Socket;
@@ -160,17 +158,16 @@ public class BasicHttpSolrClientTest extends SolrJettyTestBase {
   
   @Test
   public void testTimeout() throws Exception {
-    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() +
-                                               "/slow/foo");
+
     SolrQuery q = new SolrQuery("*:*");
-    client.setSoTimeout(2000);
-    try {
+    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/slow/foo")) {
+      client.setSoTimeout(2000);
       QueryResponse response = client.query(q, METHOD.GET);
       fail("No exception thrown.");
     } catch (SolrServerException e) {
       assertTrue(e.getMessage().contains("Timeout"));
     }
-    client.shutdown();
+
   }
   
   /**
@@ -183,9 +180,7 @@ public class BasicHttpSolrClientTest extends SolrJettyTestBase {
     assertEquals(status + " didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way",
                  ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));
 
-    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() +
-                                               "/debug/foo");
-    try {
+    try ( HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/debug/foo")) {
       DebugServlet.setErrorCode(status);
       try {
         SolrQuery q = new SolrQuery("foo");
@@ -196,262 +191,275 @@ public class BasicHttpSolrClientTest extends SolrJettyTestBase {
         assertEquals("Unexpected exception status code", status, e.code());
       }
     } finally {
-      client.shutdown();
       DebugServlet.clear();
     }
   }
 
   @Test
-  public void testQuery(){
-    DebugServlet.clear();
-    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/debug/foo");
-    SolrQuery q = new SolrQuery("foo");
-    q.setParam("a", "\u1234");
-    try {
-      client.query(q, METHOD.GET);
-    } catch (Throwable t) {}
-    
-    //default method
-    assertEquals("get", DebugServlet.lastMethod);
-    //agent
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    //default wt
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
-    assertEquals("javabin", DebugServlet.parameters.get(CommonParams.WT)[0]);
-    //default version
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
-    assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
-    //agent
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    //keepalive
-    assertEquals("keep-alive", DebugServlet.headers.get("Connection"));
-    //content-type
-    assertEquals(null, DebugServlet.headers.get("Content-Type"));
-    //param encoding
-    assertEquals(1, DebugServlet.parameters.get("a").length);
-    assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
-
-    //POST
+  public void testQuery() throws IOException {
     DebugServlet.clear();
-    try {
-      client.query(q, METHOD.POST);
-    } catch (Throwable t) {}
-    assertEquals("post", DebugServlet.lastMethod);
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
-    assertEquals("javabin", DebugServlet.parameters.get(CommonParams.WT)[0]);
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
-    assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
-    assertEquals(1, DebugServlet.parameters.get("a").length);
-    assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    assertEquals("keep-alive", DebugServlet.headers.get("Connection"));
-    assertEquals("application/x-www-form-urlencoded; charset=UTF-8", DebugServlet.headers.get("Content-Type"));
-
-    //PUT
-    DebugServlet.clear();
-    try {
-      client.query(q, METHOD.PUT);
-    } catch (Throwable t) {}
-    assertEquals("put", DebugServlet.lastMethod);
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
-    assertEquals("javabin", DebugServlet.parameters.get(CommonParams.WT)[0]);
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
-    assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
-    assertEquals(1, DebugServlet.parameters.get("a").length);
-    assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    assertEquals("keep-alive", DebugServlet.headers.get("Connection"));
-    assertEquals("application/x-www-form-urlencoded; charset=UTF-8", DebugServlet.headers.get("Content-Type"));
-
-    //XML/GET
-    client.setParser(new XMLResponseParser());
-    DebugServlet.clear();
-    try {
-      client.query(q, METHOD.GET);
-    } catch (Throwable t) {}
-    assertEquals("get", DebugServlet.lastMethod);
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
-    assertEquals("xml", DebugServlet.parameters.get(CommonParams.WT)[0]);
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
-    assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
-    assertEquals(1, DebugServlet.parameters.get("a").length);
-    assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    assertEquals("keep-alive", DebugServlet.headers.get("Connection"));
-
-    //XML/POST
-    client.setParser(new XMLResponseParser());
-    DebugServlet.clear();
-    try {
-      client.query(q, METHOD.POST);
-    } catch (Throwable t) {}
-    assertEquals("post", DebugServlet.lastMethod);
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
-    assertEquals("xml", DebugServlet.parameters.get(CommonParams.WT)[0]);
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
-    assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
-    assertEquals(1, DebugServlet.parameters.get("a").length);
-    assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    assertEquals("keep-alive", DebugServlet.headers.get("Connection"));
-    assertEquals("application/x-www-form-urlencoded; charset=UTF-8", DebugServlet.headers.get("Content-Type"));
-
-    client.setParser(new XMLResponseParser());
-    DebugServlet.clear();
-    try {
-      client.query(q, METHOD.PUT);
-    } catch (Throwable t) {}
-    assertEquals("put", DebugServlet.lastMethod);
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
-    assertEquals("xml", DebugServlet.parameters.get(CommonParams.WT)[0]);
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
-    assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
-    assertEquals(1, DebugServlet.parameters.get("a").length);
-    assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    assertEquals("keep-alive", DebugServlet.headers.get("Connection"));
-    assertEquals("application/x-www-form-urlencoded; charset=UTF-8", DebugServlet.headers.get("Content-Type"));
-    client.shutdown();
+    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/debug/foo")) {
+      SolrQuery q = new SolrQuery("foo");
+      q.setParam("a", "\u1234");
+      try {
+        client.query(q, METHOD.GET);
+      } catch (Throwable t) {
+      }
+
+      //default method
+      assertEquals("get", DebugServlet.lastMethod);
+      //agent
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      //default wt
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
+      assertEquals("javabin", DebugServlet.parameters.get(CommonParams.WT)[0]);
+      //default version
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
+      assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
+      //agent
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      //keepalive
+      assertEquals("keep-alive", DebugServlet.headers.get("Connection"));
+      //content-type
+      assertEquals(null, DebugServlet.headers.get("Content-Type"));
+      //param encoding
+      assertEquals(1, DebugServlet.parameters.get("a").length);
+      assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
+
+      //POST
+      DebugServlet.clear();
+      try {
+        client.query(q, METHOD.POST);
+      } catch (Throwable t) {
+      }
+      assertEquals("post", DebugServlet.lastMethod);
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
+      assertEquals("javabin", DebugServlet.parameters.get(CommonParams.WT)[0]);
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
+      assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
+      assertEquals(1, DebugServlet.parameters.get("a").length);
+      assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      assertEquals("keep-alive", DebugServlet.headers.get("Connection"));
+      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", DebugServlet.headers.get("Content-Type"));
+
+      //PUT
+      DebugServlet.clear();
+      try {
+        client.query(q, METHOD.PUT);
+      } catch (Throwable t) {
+      }
+      assertEquals("put", DebugServlet.lastMethod);
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
+      assertEquals("javabin", DebugServlet.parameters.get(CommonParams.WT)[0]);
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
+      assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
+      assertEquals(1, DebugServlet.parameters.get("a").length);
+      assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      assertEquals("keep-alive", DebugServlet.headers.get("Connection"));
+      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", DebugServlet.headers.get("Content-Type"));
+
+      //XML/GET
+      client.setParser(new XMLResponseParser());
+      DebugServlet.clear();
+      try {
+        client.query(q, METHOD.GET);
+      } catch (Throwable t) {
+      }
+      assertEquals("get", DebugServlet.lastMethod);
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
+      assertEquals("xml", DebugServlet.parameters.get(CommonParams.WT)[0]);
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
+      assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
+      assertEquals(1, DebugServlet.parameters.get("a").length);
+      assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      assertEquals("keep-alive", DebugServlet.headers.get("Connection"));
+
+      //XML/POST
+      client.setParser(new XMLResponseParser());
+      DebugServlet.clear();
+      try {
+        client.query(q, METHOD.POST);
+      } catch (Throwable t) {
+      }
+      assertEquals("post", DebugServlet.lastMethod);
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
+      assertEquals("xml", DebugServlet.parameters.get(CommonParams.WT)[0]);
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
+      assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
+      assertEquals(1, DebugServlet.parameters.get("a").length);
+      assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      assertEquals("keep-alive", DebugServlet.headers.get("Connection"));
+      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", DebugServlet.headers.get("Content-Type"));
+
+      client.setParser(new XMLResponseParser());
+      DebugServlet.clear();
+      try {
+        client.query(q, METHOD.PUT);
+      } catch (Throwable t) {
+      }
+      assertEquals("put", DebugServlet.lastMethod);
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
+      assertEquals("xml", DebugServlet.parameters.get(CommonParams.WT)[0]);
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
+      assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
+      assertEquals(1, DebugServlet.parameters.get("a").length);
+      assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      assertEquals("keep-alive", DebugServlet.headers.get("Connection"));
+      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", DebugServlet.headers.get("Content-Type"));
+    }
+
   }
 
   @Test
-  public void testDelete(){
+  public void testDelete() throws IOException {
     DebugServlet.clear();
-    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/debug/foo");
-    try {
-      client.deleteById("id");
-    } catch (Throwable t) {}
-    
-    //default method
-    assertEquals("post", DebugServlet.lastMethod);
-    //agent
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    //default wt
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
-    assertEquals("javabin", DebugServlet.parameters.get(CommonParams.WT)[0]);
-    //default version
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
-    assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
-    //agent
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    //keepalive
-    assertEquals("keep-alive", DebugServlet.headers.get("Connection"));
-
-    //XML
-    client.setParser(new XMLResponseParser());
-    try {
-      client.deleteByQuery("*:*");
-    } catch (Throwable t) {}
-    
-    assertEquals("post", DebugServlet.lastMethod);
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
-    assertEquals("xml", DebugServlet.parameters.get(CommonParams.WT)[0]);
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
-    assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    assertEquals("keep-alive", DebugServlet.headers.get("Connection"));
-    client.shutdown();
+    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/debug/foo")) {
+      try {
+        client.deleteById("id");
+      } catch (Throwable t) {
+      }
+
+      //default method
+      assertEquals("post", DebugServlet.lastMethod);
+      //agent
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      //default wt
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
+      assertEquals("javabin", DebugServlet.parameters.get(CommonParams.WT)[0]);
+      //default version
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
+      assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
+      //agent
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      //keepalive
+      assertEquals("keep-alive", DebugServlet.headers.get("Connection"));
+
+      //XML
+      client.setParser(new XMLResponseParser());
+      try {
+        client.deleteByQuery("*:*");
+      } catch (Throwable t) {
+      }
+
+      assertEquals("post", DebugServlet.lastMethod);
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
+      assertEquals("xml", DebugServlet.parameters.get(CommonParams.WT)[0]);
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
+      assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      assertEquals("keep-alive", DebugServlet.headers.get("Connection"));
+    }
+
   }
   
   @Test
-  public void testUpdate(){
+  public void testUpdate() throws IOException {
     DebugServlet.clear();
-    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/debug/foo");
-    UpdateRequest req = new UpdateRequest();
-    req.add(new SolrInputDocument());
-    req.setParam("a", "\u1234");
-    try {
-      client.request(req);
-    } catch (Throwable t) {}
-    
-    //default method
-    assertEquals("post", DebugServlet.lastMethod);
-    //agent
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    //default wt
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
-    assertEquals("javabin", DebugServlet.parameters.get(CommonParams.WT)[0]);
-    //default version
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
-    assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
-    //content type
-    assertEquals("application/xml; charset=UTF-8", DebugServlet.headers.get("Content-Type"));
-    //parameter encoding
-    assertEquals(1, DebugServlet.parameters.get("a").length);
-    assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
-
-    //XML response
-    client.setParser(new XMLResponseParser());
-    try {
-      client.request(req);
-    } catch (Throwable t) {}
-    assertEquals("post", DebugServlet.lastMethod);
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
-    assertEquals("xml", DebugServlet.parameters.get(CommonParams.WT)[0]);
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
-    assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
-    assertEquals("application/xml; charset=UTF-8", DebugServlet.headers.get("Content-Type"));
-    assertEquals(1, DebugServlet.parameters.get("a").length);
-    assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
-    
-    //javabin request
-    client.setParser(new BinaryResponseParser());
-    client.setRequestWriter(new BinaryRequestWriter());
-    DebugServlet.clear();
-    try {
-      client.request(req);
-    } catch (Throwable t) {}
-    assertEquals("post", DebugServlet.lastMethod);
-    assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
-    assertEquals("javabin", DebugServlet.parameters.get(CommonParams.WT)[0]);
-    assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
-    assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
-    assertEquals("application/javabin", DebugServlet.headers.get("Content-Type"));
-    assertEquals(1, DebugServlet.parameters.get("a").length);
-    assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
-    client.shutdown();
+    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/debug/foo")) {
+      UpdateRequest req = new UpdateRequest();
+      req.add(new SolrInputDocument());
+      req.setParam("a", "\u1234");
+      try {
+        client.request(req);
+      } catch (Throwable t) {
+      }
+
+      //default method
+      assertEquals("post", DebugServlet.lastMethod);
+      //agent
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      //default wt
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
+      assertEquals("javabin", DebugServlet.parameters.get(CommonParams.WT)[0]);
+      //default version
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
+      assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
+      //content type
+      assertEquals("application/xml; charset=UTF-8", DebugServlet.headers.get("Content-Type"));
+      //parameter encoding
+      assertEquals(1, DebugServlet.parameters.get("a").length);
+      assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
+
+      //XML response
+      client.setParser(new XMLResponseParser());
+      try {
+        client.request(req);
+      } catch (Throwable t) {
+      }
+      assertEquals("post", DebugServlet.lastMethod);
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
+      assertEquals("xml", DebugServlet.parameters.get(CommonParams.WT)[0]);
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
+      assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
+      assertEquals("application/xml; charset=UTF-8", DebugServlet.headers.get("Content-Type"));
+      assertEquals(1, DebugServlet.parameters.get("a").length);
+      assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
+
+      //javabin request
+      client.setParser(new BinaryResponseParser());
+      client.setRequestWriter(new BinaryRequestWriter());
+      DebugServlet.clear();
+      try {
+        client.request(req);
+      } catch (Throwable t) {
+      }
+      assertEquals("post", DebugServlet.lastMethod);
+      assertEquals("Solr[" + HttpSolrClient.class.getName() + "] 1.0", DebugServlet.headers.get("User-Agent"));
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.WT).length);
+      assertEquals("javabin", DebugServlet.parameters.get(CommonParams.WT)[0]);
+      assertEquals(1, DebugServlet.parameters.get(CommonParams.VERSION).length);
+      assertEquals(client.getParser().getVersion(), DebugServlet.parameters.get(CommonParams.VERSION)[0]);
+      assertEquals("application/javabin", DebugServlet.headers.get("Content-Type"));
+      assertEquals(1, DebugServlet.parameters.get("a").length);
+      assertEquals("\u1234", DebugServlet.parameters.get("a")[0]);
+    }
+
   }
   
   @Test
   public void testRedirect() throws Exception {
-    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/redirect/foo");
-    SolrQuery q = new SolrQuery("*:*");
-    // default = false
-    try {
-      QueryResponse response = client.query(q);
-      fail("Should have thrown an exception.");
-    } catch (SolrServerException e) {
-      assertTrue(e.getMessage().contains("redirect"));
-    }
-    client.setFollowRedirects(true);
-    try {
-      QueryResponse response = client.query(q);
-    } catch (Throwable t) {
-      fail("Exception was thrown:" + t);
-    }
-    //And back again:
-    client.setFollowRedirects(false);
-    try {
-      QueryResponse response = client.query(q);
-      fail("Should have thrown an exception.");
-    } catch (SolrServerException e) {
-      assertTrue(e.getMessage().contains("redirect"));
+    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/redirect/foo")) {
+      SolrQuery q = new SolrQuery("*:*");
+      // default = false
+      try {
+        QueryResponse response = client.query(q);
+        fail("Should have thrown an exception.");
+      } catch (SolrServerException e) {
+        assertTrue(e.getMessage().contains("redirect"));
+      }
+      client.setFollowRedirects(true);
+      try {
+        QueryResponse response = client.query(q);
+      } catch (Throwable t) {
+        fail("Exception was thrown:" + t);
+      }
+      //And back again:
+      client.setFollowRedirects(false);
+      try {
+        QueryResponse response = client.query(q);
+        fail("Should have thrown an exception.");
+      } catch (SolrServerException e) {
+        assertTrue(e.getMessage().contains("redirect"));
+      }
     }
-    client.shutdown();
+
   }
   
   @Test
   public void testCompression() throws Exception {
-    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/debug/foo");
-    try {
+    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/debug/foo")) {
       SolrQuery q = new SolrQuery("*:*");
       
       // verify request header gets set
@@ -470,8 +478,6 @@ public class BasicHttpSolrClientTest extends SolrJettyTestBase {
         client.query(q);
       } catch (Throwable t) {}
       assertNull(DebugServlet.headers.get("Accept-Encoding"));
-    } finally {
-      client.shutdown();
     }
     
     // verify server compresses output
@@ -494,36 +500,29 @@ public class BasicHttpSolrClientTest extends SolrJettyTestBase {
     }
     
     // verify compressed response can be handled
-    client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/collection1");
-    try {
+    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/collection1")) {
       client.setAllowCompression(true);
       SolrQuery q = new SolrQuery("foo");
       QueryResponse response = client.query(q);
       assertEquals(0, response.getStatus());
-    } finally {
-      client.shutdown();
     }
   }
   
   @Test
   public void testSetParametersExternalClient() throws IOException{
-    
-    CloseableHttpClient httpClient = HttpClientUtil.createClient(null);
-    HttpSolrClient solrClient = new HttpSolrClient(jetty.getBaseUrl().toString(),
-        httpClient);
-    try {
-    try {
-      solrClient.setMaxTotalConnections(1);
-      fail("Operation should not succeed.");
-    } catch (UnsupportedOperationException e) {}
-    try {
-      solrClient.setDefaultMaxConnectionsPerHost(1);
-      fail("Operation should not succeed.");
-    } catch (UnsupportedOperationException e) {}
 
-    } finally {
-      solrClient.shutdown();
-      httpClient.close();
+    try (CloseableHttpClient httpClient = HttpClientUtil.createClient(null);
+         HttpSolrClient solrClient = new HttpSolrClient(jetty.getBaseUrl().toString(), httpClient)) {
+
+      try {
+        solrClient.setMaxTotalConnections(1);
+        fail("Operation should not succeed.");
+      } catch (UnsupportedOperationException e) {}
+      try {
+        solrClient.setDefaultMaxConnectionsPerHost(1);
+        fail("Operation should not succeed.");
+      } catch (UnsupportedOperationException e) {}
+
     }
   }
 
@@ -614,9 +613,8 @@ public class BasicHttpSolrClientTest extends SolrJettyTestBase {
 
   @Test
   public void testQueryString() throws Exception {
-    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() +
-                                               "/debug/foo");
-    try {
+
+    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/debug/foo")) {
       // test without request query params
       DebugServlet.clear();
       client.setQueryParams(setOf("serverOnly"));
@@ -664,8 +662,6 @@ public class BasicHttpSolrClientTest extends SolrJettyTestBase {
       // so it passes the verification step.
       req.setQueryParams(setOf("requestOnly", "both", "neither"));
       verifyServletState(client, req);
-    } finally {
-      client.shutdown();
     }
   }
 }
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest.java b/solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest.java
index 47d769c..6b0ea23 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest.java
@@ -4,6 +4,7 @@ import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.TestUtil;
 import org.junit.Test;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.LinkedHashSet;
@@ -35,7 +36,7 @@ public class CloudSolrClientMultiConstructorTest extends LuceneTestCase {
   Collection<String> hosts;
 
   @Test
-  public void testWithChroot() {
+  public void testWithChroot() throws IOException {
     boolean setOrList = random().nextBoolean();
     int numOfZKServers = TestUtil.nextInt(random(), 1, 5);
     boolean withChroot = random().nextBoolean();
@@ -43,7 +44,6 @@ public class CloudSolrClientMultiConstructorTest extends LuceneTestCase {
     final String chroot = "/mychroot";
 
     StringBuilder sb = new StringBuilder();
-    CloudSolrClient client;
 
     if(setOrList) {
       /*
@@ -62,15 +62,16 @@ public class CloudSolrClientMultiConstructorTest extends LuceneTestCase {
       if(i<numOfZKServers -1) sb.append(",");
     }
 
-    if(withChroot) {
+    String clientChroot = null;
+    if (withChroot) {
       sb.append(chroot);
-      client = new CloudSolrClient(hosts, "/mychroot");
-    } else {
-      client = new CloudSolrClient(hosts, null);
+      clientChroot = "/mychroot";
+    }
+
+    try (CloudSolrClient client = new CloudSolrClient(hosts, clientChroot)) {
+      assertEquals(sb.toString(), client.getZkHost());
     }
 
-    assertEquals(sb.toString(), client.getZkHost());
-    client.shutdown();
   }
   
   @Test(expected = IllegalArgumentException.class)
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java b/solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java
index 7a92830..fb31ff6 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java
@@ -20,9 +20,9 @@ package org.apache.solr.client.solrj.impl;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.lucene.util.LuceneTestCase.Slow;
+import org.apache.solr.client.solrj.SolrClient;
 import org.apache.solr.client.solrj.SolrQuery;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.request.AbstractUpdateRequest;
@@ -53,7 +53,6 @@ import org.slf4j.LoggerFactory;
 
 import java.io.File;
 import java.io.IOException;
-import java.net.MalformedURLException;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -123,8 +122,7 @@ public class CloudSolrClientTest extends AbstractFullDistribZkTestBase {
     String collectionName = "overwriteCollection";
     createCollection(collectionName, controlClientCloud, 1, 1);
     waitForRecoveriesToFinish(collectionName, false);
-    CloudSolrClient cloudClient = createCloudClient(collectionName);
-    try {
+    try (CloudSolrClient cloudClient = createCloudClient(collectionName)) {
       SolrInputDocument doc1 = new SolrInputDocument();
       doc1.addField(id, "0");
       doc1.addField("a_t", "hello1");
@@ -158,8 +156,6 @@ public class CloudSolrClientTest extends AbstractFullDistribZkTestBase {
       resp = cloudClient.query(new SolrQuery("*:*"));
 
       assertEquals("There should be 3 documents because there should be two id=1 docs due to overwrite=false", 3, resp.getResults().getNumFound());
-    } finally {
-      cloudClient.shutdown();
     }
   }
 
@@ -213,13 +209,10 @@ public class CloudSolrClientTest extends AbstractFullDistribZkTestBase {
       params.add("q", "id:" + id);
       params.add("distrib", "false");
       QueryRequest queryRequest = new QueryRequest(params);
-      HttpSolrClient solrClient = new HttpSolrClient(url);
-      try {
+      try (HttpSolrClient solrClient = new HttpSolrClient(url)) {
         QueryResponse queryResponse = queryRequest.process(solrClient);
         SolrDocumentList docList = queryResponse.getResults();
         assertTrue(docList.getNumFound() == 1);
-      } finally {
-        solrClient.shutdown();
       }
     }
     
@@ -238,10 +231,7 @@ public class CloudSolrClientTest extends AbstractFullDistribZkTestBase {
     assertTrue(docs.getNumFound() == 0);
     
     // Test Multi-Threaded routed updates for UpdateRequest
-    
-    CloudSolrClient threadedClient = null;
-    try {
-      threadedClient = new CloudSolrClient(zkServer.getZkAddress());
+    try (CloudSolrClient threadedClient = new CloudSolrClient(zkServer.getZkAddress())) {
       threadedClient.setParallelUpdates(true);
       threadedClient.setDefaultCollection(collectionName);
       response = threadedClient.request(request);
@@ -260,17 +250,12 @@ public class CloudSolrClientTest extends AbstractFullDistribZkTestBase {
         params.add("q", "id:" + id);
         params.add("distrib", "false");
         QueryRequest queryRequest = new QueryRequest(params);
-        HttpSolrClient solrClient = new HttpSolrClient(url);
-        try {
+        try (HttpSolrClient solrClient = new HttpSolrClient(url)) {
           QueryResponse queryResponse = queryRequest.process(solrClient);
           SolrDocumentList docList = queryResponse.getResults();
           assertTrue(docList.getNumFound() == 1);
-        } finally {
-          solrClient.shutdown();
         }
       }
-    } finally {
-      threadedClient.shutdown();
     }
 
     // Test that queries with _route_ params are routed by the client
@@ -361,14 +346,14 @@ public class CloudSolrClientTest extends AbstractFullDistribZkTestBase {
 
     controlClient.commit();
     cloudClient.commit();
-    cloudClient.shutdown();
+    cloudClient.close();
   }
 
   private Long getNumRequests(String baseUrl, String collectionName) throws
       SolrServerException, IOException {
-    HttpSolrClient client = new HttpSolrClient(baseUrl + "/"+ collectionName);
+
     NamedList<Object> resp;
-    try {
+    try (HttpSolrClient client = new HttpSolrClient(baseUrl + "/"+ collectionName)) {
       client.setConnectionTimeout(15000);
       client.setSoTimeout(60000);
       ModifiableSolrParams params = new ModifiableSolrParams();
@@ -379,8 +364,6 @@ public class CloudSolrClientTest extends AbstractFullDistribZkTestBase {
       // use generic request to avoid extra processing of queries
       QueryRequest req = new QueryRequest(params);
       resp = client.request(req);
-    } finally {
-      client.shutdown();
     }
     return (Long) resp.findRecursive("solr-mbeans", "QUERYHANDLER",
         "standard", "stats", "requests");
@@ -393,37 +376,38 @@ public class CloudSolrClientTest extends AbstractFullDistribZkTestBase {
   }
 
   private void stateVersionParamTest() throws Exception {
-    CloudSolrClient client = createCloudClient(null);
-    try {
+
+    try (CloudSolrClient client = createCloudClient(null)) {
       String collectionName = "checkStateVerCol";
       createCollection(collectionName, client, 2, 2);
       waitForRecoveriesToFinish(collectionName, false);
       DocCollection coll = client.getZkStateReader().getClusterState().getCollection(collectionName);
       Replica r = coll.getSlices().iterator().next().getReplicas().iterator().next();
 
-      HttpSolrClient solrClient = new HttpSolrClient(r.getStr(ZkStateReader.BASE_URL_PROP) + "/"+collectionName);
+      SolrQuery q = new SolrQuery().setQuery("*:*");
+      HttpSolrClient.RemoteSolrException sse = null;
 
+      try (HttpSolrClient solrClient = new HttpSolrClient(r.getStr(ZkStateReader.BASE_URL_PROP) + "/"+collectionName)) {
 
-      SolrQuery q = new SolrQuery().setQuery("*:*");
+        log.info("should work query, result {}", solrClient.query(q));
+        //no problem
+        q.setParam(CloudSolrClient.STATE_VERSION, collectionName + ":" + coll.getZNodeVersion());
+        log.info("2nd query , result {}", solrClient.query(q));
+        //no error yet good
 
-      log.info("should work query, result {}", solrClient.query(q));
-      //no problem
-      q.setParam(CloudSolrClient.STATE_VERSION, collectionName + ":" + coll.getZNodeVersion());
-      log.info("2nd query , result {}", solrClient.query(q));
-      //no error yet good
+        q.setParam(CloudSolrClient.STATE_VERSION, collectionName + ":" + (coll.getZNodeVersion() - 1)); //an older version expect error
 
-      q.setParam(CloudSolrClient.STATE_VERSION, collectionName+":"+ (coll.getZNodeVersion() -1)); //an older version expect error
+        try {
+          solrClient.query(q);
+          log.info("expected query error");
+        } catch (HttpSolrClient.RemoteSolrException e) {
+          sse = e;
+        }
+
+        assertNotNull(sse);
+        assertEquals(" Error code should be ", sse.code(), SolrException.ErrorCode.INVALID_STATE.code);
 
-      HttpSolrClient.RemoteSolrException sse = null;
-      try {
-        solrClient.query(q);
-        log.info("expected query error");
-      } catch (HttpSolrClient.RemoteSolrException e) {
-        sse = e;
       }
-      solrClient.shutdown();
-      assertNotNull(sse);
-      assertEquals(" Error code should be ", sse.code(), SolrException.ErrorCode.INVALID_STATE.code);
 
       //now send the request to another node that does n ot serve the collection
 
@@ -443,68 +427,56 @@ public class CloudSolrClientTest extends AbstractFullDistribZkTestBase {
       }
       log.info("thenode which does not serve this collection{} ",theNode);
       assertNotNull(theNode);
-      solrClient = new HttpSolrClient(theNode + "/"+collectionName);
 
-      q.setParam(CloudSolrClient.STATE_VERSION, collectionName+":"+coll.getZNodeVersion());
+      try (SolrClient solrClient = new HttpSolrClient(theNode + "/"+collectionName)) {
 
-      try {
-        solrClient.query(q);
-        log.info("error was expected");
-      } catch (HttpSolrClient.RemoteSolrException e) {
-        sse = e;
+        q.setParam(CloudSolrClient.STATE_VERSION, collectionName + ":" + coll.getZNodeVersion());
+        try {
+          solrClient.query(q);
+          log.info("error was expected");
+        } catch (HttpSolrClient.RemoteSolrException e) {
+          sse = e;
+        }
+        assertNotNull(sse);
+        assertEquals(" Error code should be ", sse.code(), SolrException.ErrorCode.INVALID_STATE.code);
       }
-      solrClient.shutdown();
-      assertNotNull(sse);
-      assertEquals(" Error code should be ",  sse.code() , SolrException.ErrorCode.INVALID_STATE.code);
-    } finally {
-      client.shutdown();
     }
 
   }
 
-  public void testShutdown() throws MalformedURLException {
-    CloudSolrClient client = new CloudSolrClient("[ff01::114]:33332");
-    try {
+  public void testShutdown() throws IOException {
+    try (CloudSolrClient client = new CloudSolrClient("[ff01::114]:33332")) {
       client.setZkConnectTimeout(100);
       client.connect();
       fail("Expected exception");
     } catch (SolrException e) {
       assertTrue(e.getCause() instanceof TimeoutException);
-    } finally {
-      client.shutdown();
     }
   }
 
-  public void testWrongZkChrootTest() throws MalformedURLException {
-    CloudSolrClient client = null;
-    try {
-      client = new CloudSolrClient(zkServer.getZkAddress() + "/xyz/foo");
+  public void testWrongZkChrootTest() throws IOException {
+    try (CloudSolrClient client = new CloudSolrClient(zkServer.getZkAddress() + "/xyz/foo")) {
       client.setDefaultCollection(DEFAULT_COLLECTION);
       client.setZkClientTimeout(1000 * 60);
       client.connect();
       fail("Expected exception");
     } catch(SolrException e) {
       assertTrue(e.getCause() instanceof KeeperException);
-    } finally {
-      client.shutdown();
     }
     // see SOLR-6146 - this test will fail by virtue of the zkClient tracking performed
     // in the afterClass method of the base class
   }
 
   public void customHttpClientTest() throws IOException {
-    CloudSolrClient solrClient = null;
+
     ModifiableSolrParams params = new ModifiableSolrParams();
     params.set(HttpClientUtil.PROP_SO_TIMEOUT, 1000);
-    CloseableHttpClient client = null;
 
-    try {
-      client = HttpClientUtil.createClient(params);
-      solrClient = new CloudSolrClient(zkServer.getZkAddress(), client);
+    try (CloseableHttpClient client = HttpClientUtil.createClient(params);
+         CloudSolrClient solrClient = new CloudSolrClient(zkServer.getZkAddress(), client)) {
+
       assertTrue(solrClient.getLbClient().getHttpClient() == client);
-    } finally {
-      solrClient.shutdown();
-      client.close();
+
     }
   }
 }
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/impl/ExternalHttpClientTest.java b/solr/solrj/src/test/org/apache/solr/client/solrj/impl/ExternalHttpClientTest.java
index 99f7394..4a918f0 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/impl/ExternalHttpClientTest.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/impl/ExternalHttpClientTest.java
@@ -25,7 +25,6 @@ import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.client.solrj.SolrQuery;
 import org.apache.solr.client.solrj.SolrRequest;
 import org.apache.solr.client.solrj.SolrServerException;
-import org.apache.solr.client.solrj.response.QueryResponse;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
@@ -53,25 +52,21 @@ public class ExternalHttpClientTest extends SolrJettyTestBase {
    */
   @Test
   public void testTimeoutWithExternalClient() throws Exception {
+
     HttpClientBuilder builder = HttpClientBuilder.create();
     RequestConfig config = RequestConfig.custom().setSocketTimeout(2000).build();
     builder.setDefaultRequestConfig(config);
-    HttpSolrClient solrClient = null;
-    try (CloseableHttpClient httpClient = builder.build()) {
-      solrClient = new HttpSolrClient(jetty.getBaseUrl().toString() +
-          "/slow/foo", httpClient);
+
+    try (CloseableHttpClient httpClient = builder.build();
+         HttpSolrClient solrClient = new HttpSolrClient(jetty.getBaseUrl().toString() + "/slow/foo", httpClient)) {
 
       SolrQuery q = new SolrQuery("*:*");
       try {
-        QueryResponse response = solrClient.query(q, SolrRequest.METHOD.GET);
+        solrClient.query(q, SolrRequest.METHOD.GET);
         fail("No exception thrown.");
       } catch (SolrServerException e) {
         assertTrue(e.getMessage().contains("Timeout"));
       }
-    } finally {
-      if (solrClient != null) {
-        solrClient.shutdown();
-      }
     }
   }
 }
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest.java b/solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest.java
index 5fc6aa3..8d546f0 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest.java
@@ -3,16 +3,16 @@
  */
 package org.apache.solr.client.solrj.impl;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-import java.io.IOException;
-
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.solr.client.solrj.ResponseParser;
 import org.apache.solr.common.params.ModifiableSolrParams;
 import org.junit.Test;
 
+import java.io.IOException;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -42,26 +42,18 @@ public class LBHttpSolrClientTest {
    */
   @Test
   public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws IOException {
-    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());
-    LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, (ResponseParser) null);
-    HttpSolrClient httpSolrClient = testClient.makeSolrClient("http://127.0.0.1:8080");
-    try {
+
+    try (CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());
+         LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, (ResponseParser) null);
+         HttpSolrClient httpSolrClient = testClient.makeSolrClient("http://127.0.0.1:8080")) {
       assertNull("Generated server should have null parser.", httpSolrClient.getParser());
-    } finally {
-      httpSolrClient.shutdown();
-      testClient.shutdown();
-      httpClient.close();
     }
-    try {
-      ResponseParser parser = new BinaryResponseParser();
-      httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());
-      testClient = new LBHttpSolrClient(httpClient, parser);
-      httpSolrClient = testClient.makeSolrClient("http://127.0.0.1:8080");
+
+    ResponseParser parser = new BinaryResponseParser();
+    try (CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());
+         LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, parser);
+         HttpSolrClient httpSolrClient = testClient.makeSolrClient("http://127.0.0.1:8080")) {
       assertEquals("Invalid parser passed to generated server.", parser, httpSolrClient.getParser());
-    } finally {
-      httpSolrClient.shutdown();
-      testClient.shutdown();
-      httpClient.close();
     }
   }
   
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin.java b/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin.java
index c381483..ac71b99 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin.java
@@ -95,45 +95,46 @@ public class TestCoreAdmin extends AbstractEmbeddedSolrServerTestCase {
   @Test
   public void testCustomUlogDir() throws Exception {
     
-    SolrClient client = getSolrAdmin();
-    
-    File dataDir = createTempDir("data").toFile();
-    
-    File newCoreInstanceDir = createTempDir("instance").toFile();
-    
-    File instanceDir = new File(cores.getSolrHome());
-    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,
-        "newcore"));
+    try (SolrClient client = getSolrAdmin()) {
 
-    CoreAdminRequest.Create req = new CoreAdminRequest.Create();
-    req.setCoreName("newcore");
-    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + "newcore");
-    req.setDataDir(dataDir.getAbsolutePath());
-    req.setUlogDir(new File(dataDir, "ulog").getAbsolutePath());
-    req.setConfigSet("shared");
-
-    // These should be the inverse of defaults.
-    req.setIsLoadOnStartup(false);
-    req.setIsTransient(true);
-    req.process(client);
-
-    // Show that the newly-created core has values for load on startup and transient different than defaults due to the
-    // above.
-    File logDir;
-    try (SolrCore coreProveIt = cores.getCore("collection1");
-         SolrCore core = cores.getCore("newcore")) {
-
-      assertTrue(core.getCoreDescriptor().isTransient());
-      assertFalse(coreProveIt.getCoreDescriptor().isTransient());
-
-      assertFalse(core.getCoreDescriptor().isLoadOnStartup());
-      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());
-
-      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());
-    }
+      File dataDir = createTempDir("data").toFile();
+
+      File newCoreInstanceDir = createTempDir("instance").toFile();
+
+      File instanceDir = new File(cores.getSolrHome());
+      FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,
+          "newcore"));
 
-    assertEquals(new File(dataDir, "ulog" + File.separator + "tlog").getAbsolutePath(), logDir.getAbsolutePath());
-    client.shutdown();
+      CoreAdminRequest.Create req = new CoreAdminRequest.Create();
+      req.setCoreName("newcore");
+      req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + "newcore");
+      req.setDataDir(dataDir.getAbsolutePath());
+      req.setUlogDir(new File(dataDir, "ulog").getAbsolutePath());
+      req.setConfigSet("shared");
+
+      // These should be the inverse of defaults.
+      req.setIsLoadOnStartup(false);
+      req.setIsTransient(true);
+      req.process(client);
+
+      // Show that the newly-created core has values for load on startup and transient different than defaults due to the
+      // above.
+      File logDir;
+      try (SolrCore coreProveIt = cores.getCore("collection1");
+           SolrCore core = cores.getCore("newcore")) {
+
+        assertTrue(core.getCoreDescriptor().isTransient());
+        assertFalse(coreProveIt.getCoreDescriptor().isTransient());
+
+        assertFalse(core.getCoreDescriptor().isLoadOnStartup());
+        assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());
+
+        logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());
+      }
+
+      assertEquals(new File(dataDir, "ulog" + File.separator + "tlog").getAbsolutePath(), logDir.getAbsolutePath());
+
+    }
     
   }
   
diff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest.java b/solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest.java
index 3f2b216..93ce201 100644
--- a/solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest.java
+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest.java
@@ -73,15 +73,16 @@ public class NoOpResponseParserTest extends SolrJettyTestBase {
    */
   @Test
   public void testQueryParse() throws Exception {
-    HttpSolrClient client = (HttpSolrClient) createNewSolrClient();
-    SolrQuery query = new SolrQuery("id:1234");
-    QueryRequest req = new QueryRequest(query);
-    client.setParser(new NoOpResponseParser());
-    NamedList<Object> resp = client.request(req);
-    String responseString = (String) resp.get("response");
 
-    assertResponse(responseString);
-    client.shutdown();
+    try (HttpSolrClient client = (HttpSolrClient) createNewSolrClient()) {
+      SolrQuery query = new SolrQuery("id:1234");
+      QueryRequest req = new QueryRequest(query);
+      client.setParser(new NoOpResponseParser());
+      NamedList<Object> resp = client.request(req);
+      String responseString = (String) resp.get("response");
+      assertResponse(responseString);
+    }
+
   }
 
   private void assertResponse(String responseString) throws IOException {
diff --git a/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java b/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
index 5ecd218..f8751db 100644
--- a/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
+++ b/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
@@ -368,9 +368,9 @@ public abstract class BaseDistributedSearchTestCase extends SolrTestCaseJ4 {
 
   protected void destroyServers() throws Exception {
     if (controlJetty != null) controlJetty.stop();
-    if (controlClient != null)  ((HttpSolrClient) controlClient).shutdown();
+    if (controlClient != null)  controlClient.close();
     for (JettySolrRunner jetty : jettys) jetty.stop();
-    for (SolrClient client : clients) ((HttpSolrClient) client).shutdown();
+    for (SolrClient client : clients) client.close();
     clients.clear();
     jettys.clear();
   }
diff --git a/solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java b/solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java
index b7bcd2c..d91c38f 100644
--- a/solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java
+++ b/solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java
@@ -99,7 +99,7 @@ abstract public class SolrJettyTestBase extends SolrTestCaseJ4
       jetty.stop();
       jetty = null;
     }
-    if (client != null) client.shutdown();
+    if (client != null) client.close();
     client = null;
   }
 
diff --git a/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java b/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
index 93ae02b..1174737 100644
--- a/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
+++ b/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
@@ -1532,16 +1532,16 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
       super.printLayout();
     }
     if (commondCloudSolrClient != null) {
-      commondCloudSolrClient.shutdown();
+      commondCloudSolrClient.close();
     }
     if (controlClient != null) {
-      ((HttpSolrClient) controlClient).shutdown();
+      controlClient.close();
     }
     if (cloudClient != null) {
-      cloudClient.shutdown();
+      cloudClient.close();
     }
     if (controlClientCloud != null) {
-      controlClientCloud.shutdown();
+      controlClientCloud.close();
     }
     super.distribTearDown();
 
@@ -1624,11 +1624,8 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
     CollectionAdminResponse res = new CollectionAdminResponse();
     if (client == null) {
       final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));
-      SolrClient adminClient = createNewSolrClient("", baseUrl);
-      try {
+      try (SolrClient adminClient = createNewSolrClient("", baseUrl)) {
         res.setResponse(adminClient.request(request));
-      } finally {
-        if (adminClient != null) adminClient.shutdown();
       }
     } else {
       res.setResponse(client.request(request));
@@ -1855,16 +1852,11 @@ public abstract class AbstractFullDistribZkTestBase extends AbstractDistribZkTes
         .getBaseURL();
     baseUrl = baseUrl.substring(0, baseUrl.length() - "collection1".length());
 
-    HttpSolrClient baseClient = new HttpSolrClient(baseUrl);
-    NamedList r;
-    try {
+    try (HttpSolrClient baseClient = new HttpSolrClient(baseUrl)) {
       baseClient.setConnectionTimeout(15000);
       baseClient.setSoTimeout(60000 * 5);
-      r = baseClient.request(request);
-    } finally {
-      baseClient.shutdown();
+      return baseClient.request(request);
     }
-    return r;
   }
 
   protected void createCollection(String collName,
diff --git a/solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster.java b/solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster.java
index 5c689fc..6e87aea 100644
--- a/solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster.java
+++ b/solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster.java
@@ -17,14 +17,6 @@ package org.apache.solr.cloud;
  * limitations under the License.
  */
 
-import java.io.File;
-import java.io.IOException;
-import java.util.Collections;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.SortedMap;
-
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
 import org.apache.solr.client.solrj.embedded.SSLConfig;
@@ -40,6 +32,14 @@ import org.eclipse.jetty.servlet.ServletHolder;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.File;
+import java.io.IOException;
+import java.util.Collections;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.SortedMap;
+
 public class MiniSolrCloudCluster {
   
   private static Logger log = LoggerFactory.getLogger(MiniSolrCloudCluster.class);
@@ -196,7 +196,7 @@ public class MiniSolrCloudCluster {
    */
   public void shutdown() throws Exception {
     try {
-      solrClient.shutdown();
+      solrClient.close();
       for (int i = jettys.size() - 1; i >= 0; --i) {
         stopJettySolrRunner(i);
       }

