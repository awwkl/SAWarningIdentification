GitDiffStart: dd538e63128dd62c5c2bbd349ef95ffaec9ce4db | Thu Nov 15 02:03:49 2007 +0000
diff --git a/src/java/org/apache/solr/handler/SpellCheckerRequestHandler.java b/src/java/org/apache/solr/handler/SpellCheckerRequestHandler.java
index 6efcde5..fb9c4a1 100644
--- a/src/java/org/apache/solr/handler/SpellCheckerRequestHandler.java
+++ b/src/java/org/apache/solr/handler/SpellCheckerRequestHandler.java
@@ -33,7 +33,7 @@ import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.common.util.SimpleOrderedMap;
 import org.apache.solr.core.SolrCore;
-import org.apache.solr.util.HiFrequencyDictionary;
+import org.apache.solr.util.HighFrequencyDictionary;
 
 import java.io.File;
 import java.io.IOException;
@@ -305,7 +305,7 @@ public class SpellCheckerRequestHandler extends RequestHandlerBase {
       throw new RuntimeException("'Extended results' must be a valid boolean", e);
     }
 
-   // when searching for more popular, a non null index-reader and
+    // when searching for more popular, a non null index-reader and
     // restricted-field are required
     if (onlyMorePopular || extendedResults) {
       indexReader = req.getSearcher().getReader();
@@ -314,6 +314,8 @@ public class SpellCheckerRequestHandler extends RequestHandlerBase {
 
     if (extendedResults) {
 
+      rsp.add("numDocs", indexReader.numDocs());
+
       SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();
       String[] wordz = words.split(" ");
       for (String word : wordz)
@@ -371,7 +373,7 @@ public class SpellCheckerRequestHandler extends RequestHandlerBase {
     }
 
     IndexReader indexReader = req.getSearcher().getReader();
-    Dictionary dictionary = new HiFrequencyDictionary(indexReader, termSourceField, threshold);
+    Dictionary dictionary = new HighFrequencyDictionary(indexReader, termSourceField, threshold);
     spellChecker.clearIndex();
     spellChecker.indexDictionary(dictionary);
     reopen();
diff --git a/src/java/org/apache/solr/util/HiFrequencyDictionary.java b/src/java/org/apache/solr/util/HiFrequencyDictionary.java
deleted file mode 100644
index e473d67..0000000
--- a/src/java/org/apache/solr/util/HiFrequencyDictionary.java
+++ /dev/null
@@ -1,140 +0,0 @@
-package org.apache.solr.util;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.Iterator;
-
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.index.TermEnum;
-import org.apache.lucene.search.spell.Dictionary;
-
-/**
- * Hi Frequency Dictionary: terms taken from the given field
- * of a Lucene index, which appear in a number of documents
- * above a given threshold.
- *
- * When using IndexReader.terms(Term) the code must not call next() on TermEnum
- * as the first call to TermEnum, see: http://issues.apache.org/jira/browse/LUCENE-6
- *
- * Threshold is a value in [0..1] representing the minimum
- * number of documents (of the total) where a term should appear.
- *
- * @author Mike Krimerman
- *
- * Based on LuceneDictionary, by
- * @author Nicolas Maisonneuve
- * @author Christian Mallwitz
- */
-public class HiFrequencyDictionary implements Dictionary {
-  private IndexReader reader;
-  private String field;
-  private float thresh;
-
-  public HiFrequencyDictionary(IndexReader reader, String field, float thresh) {
-    this.reader = reader;
-    this.field = field.intern();
-    this.thresh = thresh;
-  }
-
-  public final Iterator getWordsIterator() {
-    return new HiFrequencyIterator();
-  }
-
-
-  final class HiFrequencyIterator implements Iterator {
-    private TermEnum termEnum;
-    private Term actualTerm;
-    private boolean hasNextCalled;
-    private int minNumDocs;
-
-    HiFrequencyIterator() {
-      try {
-        termEnum = reader.terms(new Term(field, ""));
-        minNumDocs = (int)(thresh * (float)reader.numDocs());
-      } catch (IOException e) {
-        throw new RuntimeException(e);
-      }
-    }
-
-    private boolean isFrequent(Term term) {
-      try {
-        return reader.docFreq(term) >= minNumDocs;
-      } catch (IOException e) {
-        throw new RuntimeException(e);
-      }
-    }
-
-    public Object next() {
-      if (!hasNextCalled) {
-        hasNext();
-      }
-      hasNextCalled = false;
-
-      try {
-        termEnum.next();
-      } catch (IOException e) {
-        throw new RuntimeException(e);
-      }
-
-      return (actualTerm != null) ? actualTerm.text() : null;
-    }
-
-    public boolean hasNext() {
-      if (hasNextCalled) {
-        return actualTerm != null;
-      }
-      hasNextCalled = true;
-
-      do {
-        actualTerm = termEnum.term();
-
-        // if there are no words return false
-        if (actualTerm == null) {
-          return false;
-        }
-
-        String currentField = actualTerm.field();
-
-        // if the next word doesn't have the same field return false
-        if (currentField != field) {
-          actualTerm = null;
-          return false;
-        }
-
-        // got a valid term, does it pass the threshold?
-        if (isFrequent(actualTerm)) {
-          return true;
-        }
-
-        // term not up to threshold
-        try {
-          termEnum.next();
-        } catch (IOException e) {
-          throw new RuntimeException(e);
-        }
-
-      } while (true);
-    }
-
-    public void remove() {
-      throw new UnsupportedOperationException();
-    }
-  }
-}
diff --git a/src/java/org/apache/solr/util/HighFrequencyDictionary.java b/src/java/org/apache/solr/util/HighFrequencyDictionary.java
new file mode 100644
index 0000000..838fc5c
--- /dev/null
+++ b/src/java/org/apache/solr/util/HighFrequencyDictionary.java
@@ -0,0 +1,140 @@
+package org.apache.solr.util;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Iterator;
+
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.index.TermEnum;
+import org.apache.lucene.search.spell.Dictionary;
+
+/**
+ * Hi Frequency Dictionary: terms taken from the given field
+ * of a Lucene index, which appear in a number of documents
+ * above a given threshold.
+ *
+ * When using IndexReader.terms(Term) the code must not call next() on TermEnum
+ * as the first call to TermEnum, see: http://issues.apache.org/jira/browse/LUCENE-6
+ *
+ * Threshold is a value in [0..1] representing the minimum
+ * number of documents (of the total) where a term should appear.
+ *
+ * @author Mike Krimerman
+ *
+ * Based on LuceneDictionary, by
+ * @author Nicolas Maisonneuve
+ * @author Christian Mallwitz
+ */
+public class HighFrequencyDictionary implements Dictionary {
+  private IndexReader reader;
+  private String field;
+  private float thresh;
+
+  public HighFrequencyDictionary(IndexReader reader, String field, float thresh) {
+    this.reader = reader;
+    this.field = field.intern();
+    this.thresh = thresh;
+  }
+
+  public final Iterator getWordsIterator() {
+    return new HighFrequencyIterator();
+  }
+
+
+  final class HighFrequencyIterator implements Iterator {
+    private TermEnum termEnum;
+    private Term actualTerm;
+    private boolean hasNextCalled;
+    private int minNumDocs;
+
+    HighFrequencyIterator() {
+      try {
+        termEnum = reader.terms(new Term(field, ""));
+        minNumDocs = (int)(thresh * (float)reader.numDocs());
+      } catch (IOException e) {
+        throw new RuntimeException(e);
+      }
+    }
+
+    private boolean isFrequent(Term term) {
+      try {
+        return reader.docFreq(term) >= minNumDocs;
+      } catch (IOException e) {
+        throw new RuntimeException(e);
+      }
+    }
+
+    public Object next() {
+      if (!hasNextCalled) {
+        hasNext();
+      }
+      hasNextCalled = false;
+
+      try {
+        termEnum.next();
+      } catch (IOException e) {
+        throw new RuntimeException(e);
+      }
+
+      return (actualTerm != null) ? actualTerm.text() : null;
+    }
+
+    public boolean hasNext() {
+      if (hasNextCalled) {
+        return actualTerm != null;
+      }
+      hasNextCalled = true;
+
+      do {
+        actualTerm = termEnum.term();
+
+        // if there are no words return false
+        if (actualTerm == null) {
+          return false;
+        }
+
+        String currentField = actualTerm.field();
+
+        // if the next word doesn't have the same field return false
+        if (currentField != field) {
+          actualTerm = null;
+          return false;
+        }
+
+        // got a valid term, does it pass the threshold?
+        if (isFrequent(actualTerm)) {
+          return true;
+        }
+
+        // term not up to threshold
+        try {
+          termEnum.next();
+        } catch (IOException e) {
+          throw new RuntimeException(e);
+        }
+
+      } while (true);
+    }
+
+    public void remove() {
+      throw new UnsupportedOperationException();
+    }
+  }
+}
diff --git a/src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest.java b/src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest.java
index cf53e68..3fc793c 100644
--- a/src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest.java
+++ b/src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest.java
@@ -228,6 +228,7 @@ public class SpellCheckerRequestHandlerTest
     
     assertQ("Failed to spell check",
             req("cat")
+            ,"//int[@name='numDocs'][.=10]"
             ,"//lst[@name='cat']"
             ,"//lst[@name='cat']/int[@name='frequency'][.>0]"
             ,"//lst[@name='cat']/lst[@name='suggestions' and count(lst)=0]"
@@ -256,6 +257,7 @@ public class SpellCheckerRequestHandlerTest
     lrf.args.put("sp.query.accuracy",".2");
     assertQ("Failed to spell check",
             req("cat")
+            ,"//int[@name='numDocs'][.=10]"
             ,"//lst[@name='cat']"
             ,"//lst[@name='cat']/int[@name='frequency'][.>0]"
             ,"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cart']/int[@name='frequency'][.>0]"
@@ -277,6 +279,7 @@ public class SpellCheckerRequestHandlerTest
     /* The following is the generated XML response for the next query with three words:
       <response>
         <responseHeader><status>0</status><QTime>0</QTime></responseHeader>
+        <int name="numDocs">10</int>
         <lst name="result">
           <lst name="cat">
             <int name="frequency">1</int>
@@ -351,6 +354,7 @@ public class SpellCheckerRequestHandlerTest
     
     assertQ("Failed to spell check",
             req("coat")
+            ,"//int[@name='numDocs'][.=10]"
             ,"//lst[@name='coat']"
             ,"//lst[@name='coat']/int[@name='frequency'][.=0]"
             ,"//lst[@name='coat']/lst[@name='suggestions' and count(lst)=0]"
@@ -383,6 +387,7 @@ public class SpellCheckerRequestHandlerTest
     lrf.args.put("sp.query.accuracy",".2");
     assertQ("Failed to spell check",
         req("cet cert corp")
+        ,"//int[@name='numDocs'][.=10]"
         ,"//lst[@name='cet']"
         ,"//lst[@name='cet']/int[@name='frequency'][.=0]"
         ,"//lst[@name='cet']/lst[@name='suggestions']/lst[1]"

