GitDiffStart: 40f8ad057ad0fcd929ab3024027a4f2675e60fb2 | Mon Aug 4 13:18:19 2008 +0000
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java
index 7bdfbe5..7bb886c 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java
@@ -333,8 +333,8 @@ public class EntityProcessorBase extends EntityProcessor {
    * If the where clause is present the cache is sql Vs Map of key Vs List of
    * Rows. Only used by cache implementations.
    *
-   * @param query
-   * @return
+   * @param query the query string for which cached data is to be returned
+   * @return the cached row corresponding to the given query after all variables have been resolved 
    */
   protected Map<String, Object> getIdCacheData(String query) {
     Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause
@@ -373,13 +373,14 @@ public class EntityProcessorBase extends EntityProcessor {
   }
 
   /**
+   * <p>
    * Get all the rows from the the datasource for the given query. Only used by
    * cache implementations.
-   * <p/>
+   * </p>
    * This <b>must</b> be implemented by sub-classes which intend to provide a
    * cached implementation
    *
-   * @return
+   * @return the list of all rows fetched from the datasource.
    */
   protected List<Map<String, Object>> getAllNonCachedRows() {
     return Collections.EMPTY_LIST;
@@ -389,7 +390,8 @@ public class EntityProcessorBase extends EntityProcessor {
    * If where clause is not present the cache is a Map of query vs List of Rows.
    * Only used by cache implementations.
    *
-   * @return
+   * @param query string for which cached row is to be returned
+   * @return the cached row corresponding to the given query
    */
   protected Map<String, Object> getSimplCacheData(String query) {
     List<Map<String, Object>> rows = simpleCache.get(query);
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/Evaluator.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/Evaluator.java
index c7f7727..374f5d0 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/Evaluator.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/Evaluator.java
@@ -41,9 +41,10 @@ public abstract class Evaluator {
   /**
    * Return a String after processing an expression and a VariableResolver
    *
-   * @param resolver
-   * @param expression
-   * @return
+   * @see org.apache.solr.handler.dataimport.VariableResolver
+   * @param resolver the VariableResolver instance to be used for evaluation
+   * @param expression string to be evaluated
+   * @return the value of the given expression evaluated using the resolver
    */
   public abstract String evaluate(VariableResolver resolver, String expression);
 }
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag.java
index fbf51ae..b6a68a2 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag.java
@@ -46,7 +46,8 @@ public class EvaluatorBag {
    * of single-quotes by two single-quotes and similarily for double-quotes
    * </p>
    *
-   * @return
+   * @return an <code>Evaluator</code> instance capable of SQL-escaping
+   *         expressions.
    */
   public static Evaluator getSqlEscapingEvaluator() {
     return new Evaluator() {
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter.java
index 916dbb4..f1ea9e2 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter.java
@@ -240,7 +240,7 @@ public abstract class SolrWriter {
    * preserved.
    * </p>
    *
-   * @param date
+   * @param date the Date instance to be persisted
    */
   public void persistIndexStartTime(Date date) {
     this.persistStartTime(date);
@@ -254,7 +254,7 @@ public abstract class SolrWriter {
    * </p>
    *
    * @param d . The Document warapper object
-   * @return
+   * @return a boolean value denoting success (true) or failure (false)
    */
   public abstract boolean upload(SolrDoc d);
 
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString.java
index c232b5f..b4944ba 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString.java
@@ -62,9 +62,9 @@ public class TemplateString {
    * Returns a string with all variables replaced by the known values. An
    * unknown variable is replaced by an empty string.
    *
-   * @param string
-   * @param resolver
-   * @return
+   * @param string the String to be resolved
+   * @param resolver the VariableResolver instance to be used for evaluation
+   * @return the string with all variables replaced
    */
   public String replaceTokens(String string, VariableResolver resolver) {
     TemplateString ts = cache.get(string);
@@ -104,7 +104,7 @@ public class TemplateString {
   /**
    * Returns the variables in the given string.
    *
-   * @param the templatized string
+   * @param s the templatized string
    * @return the list of variables (strings) in the given templatized string.
    */
   public static List<String> getVariables(String s) {
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolver.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolver.java
index 412df6a..2ce6955 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolver.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolver.java
@@ -38,8 +38,8 @@ public abstract class VariableResolver {
   /**
    * Resolves a given value with a name
    *
-   * @param name
-   * @return
+   * @param name the String to be resolved
+   * @return an Object which is the result of evaluation of given name
    */
   public abstract Object resolve(String name);
 

