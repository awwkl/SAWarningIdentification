GitDiffStart: 3ae880e7df70a039bc7e98c61fab149630067566 | Tue Dec 28 18:54:06 2010 +0000
diff --git a/solr/src/java/org/apache/solr/core/SolrResourceLoader.java b/solr/src/java/org/apache/solr/core/SolrResourceLoader.java
index 39d6a95..3d8dfda 100644
--- a/solr/src/java/org/apache/solr/core/SolrResourceLoader.java
+++ b/solr/src/java/org/apache/solr/core/SolrResourceLoader.java
@@ -278,6 +278,8 @@ public class SolrResourceLoader implements ResourceLoader
       }
       // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)
       is = classLoader.getResourceAsStream(resource);
+      if (is == null)
+        is = classLoader.getResourceAsStream(getConfigDir() + resource);
     } catch (Exception e) {
       throw new RuntimeException("Error opening " + resource, e);
     }
diff --git a/solr/src/test/org/apache/solr/client/solrj/response/QueryResponseTest.java b/solr/src/test/org/apache/solr/client/solrj/response/QueryResponseTest.java
index 06c00bf..06fa809 100644
--- a/solr/src/test/org/apache/solr/client/solrj/response/QueryResponseTest.java
+++ b/solr/src/test/org/apache/solr/client/solrj/response/QueryResponseTest.java
@@ -18,12 +18,16 @@
 package org.apache.solr.client.solrj.response;
 
 import java.io.FileReader;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
 
 import junit.framework.Assert;
 
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.solr.client.solrj.impl.XMLResponseParser;
 import org.apache.solr.common.util.NamedList;
+import org.apache.solr.core.SolrResourceLoader;
 import org.junit.Test;
 
 /**
@@ -35,8 +39,9 @@ public class QueryResponseTest extends LuceneTestCase {
   @Test
   public void testDateFacets() throws Exception   {
     XMLResponseParser parser = new XMLResponseParser();
-    FileReader in = new FileReader("sampleDateFacetResponse.xml");
-    assertTrue("in is null and it shouldn't be", in != null);
+    InputStream is = new SolrResourceLoader(null, null).openResource("sampleDateFacetResponse.xml");
+    assertNotNull(is);
+    Reader in = new InputStreamReader(is, "UTF-8");
     NamedList<Object> response = parser.processResponse(in);
     in.close();
     
diff --git a/solr/src/test/org/apache/solr/common/util/ContentStreamTest.java b/solr/src/test/org/apache/solr/common/util/ContentStreamTest.java
index d3d1bcb..5aa7138 100755
--- a/solr/src/test/org/apache/solr/common/util/ContentStreamTest.java
+++ b/solr/src/test/org/apache/solr/common/util/ContentStreamTest.java
@@ -20,6 +20,7 @@ package org.apache.solr.common.util;
 import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.FileInputStream;
+import java.io.FileOutputStream;
 import java.io.FileReader;
 import java.io.IOException;
 import java.io.InputStream;
@@ -29,6 +30,7 @@ import java.net.URL;
 import org.apache.commons.io.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.solr.common.util.ContentStreamBase;
+import org.apache.solr.core.SolrResourceLoader;
 
 /**
  */
@@ -45,8 +47,12 @@ public class ContentStreamTest extends LuceneTestCase
 
   public void testFileStream() throws IOException 
   {
-    File file = new File( "README" );
-    assertTrue( file.exists() ); // "make sure you are running from: solr\src\test\test-files"
+    InputStream is = new SolrResourceLoader(null, null).openResource( "README" );
+    assertNotNull( is );
+    File file = new File(TEMP_DIR, "README");
+    FileOutputStream os = new FileOutputStream(file);
+    IOUtils.copy(is, os);
+    os.close();
     
     ContentStreamBase stream = new ContentStreamBase.FileStream( file );
     assertEquals( file.length(), stream.getSize().intValue() );
diff --git a/solr/src/test/org/apache/solr/schema/TestBinaryField.java b/solr/src/test/org/apache/solr/schema/TestBinaryField.java
index 1b675d3..7fab9f0 100644
--- a/solr/src/test/org/apache/solr/schema/TestBinaryField.java
+++ b/solr/src/test/org/apache/solr/schema/TestBinaryField.java
@@ -25,10 +25,13 @@ import org.apache.solr.client.solrj.response.QueryResponse;
 import org.apache.solr.common.SolrDocument;
 import org.apache.solr.common.SolrDocumentList;
 import org.apache.solr.common.SolrInputDocument;
+import org.apache.solr.core.SolrResourceLoader;
 import org.apache.commons.io.FileUtils;
+import org.apache.commons.io.IOUtils;
 
 import java.nio.ByteBuffer;
 import java.io.File;
+import java.io.FileOutputStream;
 import java.util.List;
 
 public class TestBinaryField extends LuceneTestCase {
@@ -53,12 +56,17 @@ public class TestBinaryField extends LuceneTestCase {
     dataDir.mkdirs();
     confDir.mkdirs();
 
+    SolrResourceLoader loader = new SolrResourceLoader(null, null);
     File f = new File(confDir, "solrconfig.xml");
-    String fname = "." + File.separator + "solr" + File.separator + "conf" + File.separator + "solrconfig-slave1.xml";
-    FileUtils.copyFile(new File(fname), f);
+    String fname = "solr/conf/solrconfig-slave1.xml";
+    FileOutputStream out = new FileOutputStream(f);
+    IOUtils.copy(loader.openResource(fname), out);
+    out.close();
     f = new File(confDir, "schema.xml");
-    fname = "." + File.separator + "solr" + File.separator + "conf" + File.separator + "schema-binaryfield.xml";
-    FileUtils.copyFile(new File(fname), f);
+    fname = "solr/conf/schema-binaryfield.xml";
+    out = new FileOutputStream(f);
+    IOUtils.copy(loader.openResource(fname), out);
+    out.close();
     System.setProperty("solr.solr.home", homeDir.getAbsolutePath());
     System.setProperty("solr.data.dir", dataDir.getAbsolutePath());
     System.setProperty("solr.test.sys.prop1", "propone");
diff --git a/solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest.java b/solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest.java
index 450df39..1230e78 100644
--- a/solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest.java
+++ b/solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest.java
@@ -65,8 +65,7 @@ public class FileBasedSpellCheckerTest extends SolrTestCaseJ4 {
     spellchecker.add("classname", FileBasedSpellChecker.class.getName());
 
     spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, "external");
-    File spelling = new File("spellings.txt");
-    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());
+    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, "spellings.txt");
     spellchecker.add(IndexBasedSpellChecker.FIELD, "teststop");
     spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, "UTF-8");
     File indexDir = new File(TEMP_DIR, "spellingIdx" + new Date().getTime());
@@ -102,8 +101,7 @@ public class FileBasedSpellCheckerTest extends SolrTestCaseJ4 {
     NamedList spellchecker = new NamedList();
     spellchecker.add("classname", FileBasedSpellChecker.class.getName());
     spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, "external");
-    File spelling = new File("spellings.txt");
-    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());
+    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, "spellings.txt");
     spellchecker.add(IndexBasedSpellChecker.FIELD, "teststop");
     spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, "UTF-8");
     File indexDir = new File(TEMP_DIR, "spellingIdx" + new Date().getTime());
@@ -149,8 +147,7 @@ public class FileBasedSpellCheckerTest extends SolrTestCaseJ4 {
     spellchecker.add("classname", FileBasedSpellChecker.class.getName());
 
     spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, "external");
-    File spelling = new File("spellings.txt");
-    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());
+    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, "spellings.txt");
     spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, "UTF-8");
     spellchecker.add(IndexBasedSpellChecker.FIELD, "teststop");
     spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, "teststop");

