GitDiffStart: d6fd85f4c03a0dfb31a71c6ee40d82b9c541ccbb | Wed Dec 7 19:06:49 2011 +0000
diff --git a/lucene/src/java/org/apache/lucene/index/CheckIndex.java b/lucene/src/java/org/apache/lucene/index/CheckIndex.java
index c106311..7300af8 100644
--- a/lucene/src/java/org/apache/lucene/index/CheckIndex.java
+++ b/lucene/src/java/org/apache/lucene/index/CheckIndex.java
@@ -1140,7 +1140,7 @@ public class CheckIndex {
           final Source values = docValues.getDirectSource();
           final int maxDoc = reader.maxDoc();
           for (int i = 0; i < maxDoc; i++) {
-            switch (fieldInfo.docValues) {
+            switch (fieldInfo.getDocValuesType()) {
             case BYTES_FIXED_SORTED:
             case BYTES_VAR_SORTED:
             case BYTES_FIXED_DEREF:
@@ -1162,7 +1162,7 @@ public class CheckIndex {
               break;
             default:
               throw new IllegalArgumentException("Field: " + fieldInfo.name
-                  + " - no such DocValues type: " + fieldInfo.docValues);
+                          + " - no such DocValues type: " + fieldInfo.getDocValuesType());
             }
           }
         }
diff --git a/lucene/src/java/org/apache/lucene/index/DocFieldProcessor.java b/lucene/src/java/org/apache/lucene/index/DocFieldProcessor.java
index 12e1524..e0bad01 100644
--- a/lucene/src/java/org/apache/lucene/index/DocFieldProcessor.java
+++ b/lucene/src/java/org/apache/lucene/index/DocFieldProcessor.java
@@ -26,11 +26,12 @@ import java.util.Map;
 
 import org.apache.lucene.index.DocumentsWriterPerThread.DocState;
 import org.apache.lucene.index.codecs.Codec;
-import org.apache.lucene.index.codecs.DocValuesFormat;
 import org.apache.lucene.index.codecs.DocValuesConsumer;
+import org.apache.lucene.index.codecs.DocValuesFormat;
 import org.apache.lucene.index.codecs.FieldInfosWriter;
 import org.apache.lucene.index.codecs.PerDocConsumer;
 import org.apache.lucene.index.values.PerDocFieldValues;
+import org.apache.lucene.index.values.ValueType;
 import org.apache.lucene.store.IOContext;
 import org.apache.lucene.util.ArrayUtil;
 import org.apache.lucene.util.IOUtils;
@@ -224,7 +225,7 @@ final class DocFieldProcessor extends DocConsumer {
         // needs to be more "pluggable" such that if I want
         // to have a new "thing" my Fields can do, I can
         // easily add it
-        FieldInfo fi = fieldInfos.addOrUpdate(fieldName, field.fieldType(), false, field.docValuesType());
+        FieldInfo fi = fieldInfos.addOrUpdate(fieldName, field.fieldType());
 
         fp = new DocFieldProcessorPerField(this, fi);
         fp.next = fieldHash[hashPos];
@@ -235,7 +236,7 @@ final class DocFieldProcessor extends DocConsumer {
           rehash();
         }
       } else {
-        fieldInfos.addOrUpdate(fp.fieldInfo.name, field.fieldType(), false, field.docValuesType());
+        fieldInfos.addOrUpdate(fp.fieldInfo.name, field.fieldType());
       }
 
       if (thisFieldGen != fp.lastGen) {
@@ -261,7 +262,7 @@ final class DocFieldProcessor extends DocConsumer {
       }
       final PerDocFieldValues docValues = field.docValues();
       if (docValues != null) {
-        docValuesConsumer(docState, fp.fieldInfo).add(docState.docID, docValues);
+        docValuesConsumer(field.docValuesType(), docState, fp.fieldInfo).add(docState.docID, docValues);
       }
     }
 
@@ -310,7 +311,7 @@ final class DocFieldProcessor extends DocConsumer {
   final private Map<String, DocValuesConsumerAndDocID> docValues = new HashMap<String, DocValuesConsumerAndDocID>();
   final private Map<Integer, PerDocConsumer> perDocConsumers = new HashMap<Integer, PerDocConsumer>();
 
-  DocValuesConsumer docValuesConsumer(DocState docState, FieldInfo fieldInfo) 
+  DocValuesConsumer docValuesConsumer(ValueType valueType, DocState docState, FieldInfo fieldInfo) 
       throws IOException {
     DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);
     if (docValuesConsumerAndDocID != null) {
@@ -329,17 +330,9 @@ final class DocFieldProcessor extends DocConsumer {
       perDocConsumer = dvFormat.docsConsumer(perDocWriteState);
       perDocConsumers.put(0, perDocConsumer);
     }
-    boolean success = false;
-    DocValuesConsumer docValuesConsumer = null;
-    try {
-      docValuesConsumer = perDocConsumer.addValuesField(fieldInfo);
-      fieldInfo.commitDocValues();
-      success = true;
-    } finally {
-      if (!success) {
-        fieldInfo.revertUncommitted();
-      }
-    }
+
+    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);
+    fieldInfo.setDocValuesType(valueType);
 
     docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);
     docValuesConsumerAndDocID.docID = docState.docID;
diff --git a/lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java b/lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java
index 15a3b84..fb8ea4f 100644
--- a/lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java
+++ b/lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java
@@ -244,7 +244,6 @@ public class DocumentsWriterPerThread {
           // mark document as deleted
           deleteDocID(docState.docID);
           numDocsInRAM++;
-          fieldInfos.revertUncommitted();
         } else {
           abort();
         }
@@ -308,7 +307,6 @@ public class DocumentsWriterPerThread {
               // Incr here because finishDocument will not
               // be called (because an exc is being thrown):
               numDocsInRAM++;
-              fieldInfos.revertUncommitted();
             } else {
               abort();
             }
diff --git a/lucene/src/java/org/apache/lucene/index/FieldInfo.java b/lucene/src/java/org/apache/lucene/index/FieldInfo.java
index d6ae0d2..8b324f0 100644
--- a/lucene/src/java/org/apache/lucene/index/FieldInfo.java
+++ b/lucene/src/java/org/apache/lucene/index/FieldInfo.java
@@ -25,7 +25,7 @@ public final class FieldInfo {
   public final int number;
 
   public boolean isIndexed;
-  ValueType docValues;
+  private ValueType docValues;
 
 
   // true if term vector for this field should be stored
@@ -118,13 +118,14 @@ public final class FieldInfo {
     }
     assert this.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !this.storePayloads;
   }
-  void setDocValues(ValueType v) {
+
+  void setDocValuesType(ValueType v) {
     if (docValues == null) {
       docValues = v;
     }
   }
   
-  public void resetDocValues(ValueType v) {
+  public void resetDocValuesType(ValueType v) {
     if (docValues != null) {
       docValues = v;
     }
@@ -134,42 +135,13 @@ public final class FieldInfo {
     return docValues != null;
   }
 
-  public ValueType getDocValues() {
+  public ValueType getDocValuesType() {
     return docValues;
   }
-  
-  private boolean vectorsCommitted;
-  private boolean docValuesCommitted;
- 
-  /**
-   * Reverts all uncommitted changes on this {@link FieldInfo}
-   * @see #commitVectors()
-   */
-  void revertUncommitted() {
-    if (storeTermVector && !vectorsCommitted) {
-      storeOffsetWithTermVector = false;
-      storePositionWithTermVector = false;
-      storeTermVector = false;  
-    }
-    
-    if (docValues != null && !docValuesCommitted) {
-      docValues = null;
-    }
-  }
 
-  /**
-   * Commits term vector modifications. Changes to term-vectors must be
-   * explicitly committed once the necessary files are created. If those changes
-   * are not committed subsequent {@link #revertUncommitted()} will reset the
-   * all term-vector flags before the next document.
-   */
-  void commitVectors() {
-    assert storeTermVector;
-    vectorsCommitted = true;
-  }
-  
-  void commitDocValues() {
-    assert hasDocValues();
-    docValuesCommitted = true;
+  public void setStoreTermVectors(boolean withPositions, boolean withOffsets) {
+    storeTermVector = true;
+    storePositionWithTermVector |= withPositions;
+    storeOffsetWithTermVector |= withOffsets;
   }
 }
diff --git a/lucene/src/java/org/apache/lucene/index/FieldInfos.java b/lucene/src/java/org/apache/lucene/index/FieldInfos.java
index 8e12ef5..125717f 100644
--- a/lucene/src/java/org/apache/lucene/index/FieldInfos.java
+++ b/lucene/src/java/org/apache/lucene/index/FieldInfos.java
@@ -304,10 +304,20 @@ public final class FieldInfos implements Iterable<FieldInfo> {
                                storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);
   }
 
-  synchronized public FieldInfo addOrUpdate(String name, IndexableFieldType fieldType, boolean scorePayloads, ValueType docValues) {
-    return addOrUpdateInternal(name, -1, fieldType.indexed(), fieldType.storeTermVectors(),
-        fieldType.storeTermVectorPositions(), fieldType.storeTermVectorOffsets(), fieldType.omitNorms(), scorePayloads,
-        fieldType.indexOptions(), docValues);
+  // NOTE: this method does not carry over termVector
+  // booleans nor docValuesType; the indexer chain
+  // (TermVectorsConsumerPerField, DocFieldProcessor) must
+  // set these fields when they succeed in consuming
+  // the document:
+  public FieldInfo addOrUpdate(String name, IndexableFieldType fieldType) {
+    // TODO: really, indexer shouldn't even call this
+    // method (it's only called from DocFieldProcessor);
+    // rather, each component in the chain should update
+    // what it "owns".  EG fieldType.indexOptions() should
+    // be updated by maybe FreqProxTermsWriterPerField:
+    return addOrUpdateInternal(name, -1, fieldType.indexed(), false, false, false,
+                               fieldType.omitNorms(), false,
+                               fieldType.indexOptions(), null);
   }
 
   synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,
@@ -322,7 +332,7 @@ public final class FieldInfos implements Iterable<FieldInfo> {
       fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);
     } else {
       fi.update(isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions);
-      fi.setDocValues(docValues);
+      fi.setDocValuesType(docValues);
     }
     version++;
     return fi;
@@ -333,7 +343,7 @@ public final class FieldInfos implements Iterable<FieldInfo> {
     return addOrUpdateInternal(fi.name, fi.number, fi.isIndexed, fi.storeTermVector,
                fi.storePositionWithTermVector, fi.storeOffsetWithTermVector,
                fi.omitNorms, fi.storePayloads,
-               fi.indexOptions, fi.docValues);
+               fi.indexOptions, fi.getDocValuesType());
   }
   
   /*
@@ -429,16 +439,6 @@ public final class FieldInfos implements Iterable<FieldInfo> {
     return version;
   }
   
-  /**
-   * Reverts all uncommitted changes 
-   * @see FieldInfo#revertUncommitted()
-   */
-  void revertUncommitted() {
-    for (FieldInfo fieldInfo : this) {
-      fieldInfo.revertUncommitted();
-    }
-  }
-  
   final FieldInfos asReadOnly() {
     if (isReadOnly()) {
       return this;
diff --git a/lucene/src/java/org/apache/lucene/index/SegmentMerger.java b/lucene/src/java/org/apache/lucene/index/SegmentMerger.java
index cce03d8..6ec8a5e 100644
--- a/lucene/src/java/org/apache/lucene/index/SegmentMerger.java
+++ b/lucene/src/java/org/apache/lucene/index/SegmentMerger.java
@@ -235,7 +235,7 @@ final class SegmentMerger {
         for (String dvName : dvNames) {
           FieldInfo merged = mergeState.fieldInfos.fieldInfo(dvName);
           IndexDocValues docValues = reader.docValues(dvName);
-          merged.setDocValues(docValues.type());
+          merged.setDocValuesType(docValues.type());
           TypePromoter previous = docValuesTypes.get(merged);
           docValuesTypes.put(merged, mergeDocValuesType(previous, docValues));
         }
@@ -247,12 +247,12 @@ final class SegmentMerger {
       FieldInfo fi = e.getKey();
       TypePromoter promoter = e.getValue();
       if (promoter == null) {
-        fi.resetDocValues(null);
+        fi.resetDocValuesType(null);
       } else {
         assert promoter != TypePromoter.getIdentityPromoter();
-        if (fi.getDocValues() != promoter.type()) {
+        if (fi.getDocValuesType() != promoter.type()) {
           // reset the type if we got promoted
-          fi.resetDocValues(promoter.type());
+          fi.resetDocValuesType(promoter.type());
         }
       }
     }
diff --git a/lucene/src/java/org/apache/lucene/index/TermVectorsConsumerPerField.java b/lucene/src/java/org/apache/lucene/index/TermVectorsConsumerPerField.java
index 2e83733..a38b7db 100644
--- a/lucene/src/java/org/apache/lucene/index/TermVectorsConsumerPerField.java
+++ b/lucene/src/java/org/apache/lucene/index/TermVectorsConsumerPerField.java
@@ -113,7 +113,6 @@ final class TermVectorsConsumerPerField extends TermsHashConsumerPerField {
     // of a given field in the doc.  At this point we flush
     // our hash into the DocWriter.
 
-    assert fieldInfo.storeTermVector;
     assert termsWriter.vectorFieldsInOrder(fieldInfo);
 
     TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;
@@ -150,8 +149,9 @@ final class TermVectorsConsumerPerField extends TermsHashConsumerPerField {
     }
 
     termsHashPerField.reset();
+
     // commit the termVectors once successful success - FI will otherwise reset them
-    fieldInfo.commitVectors();
+    fieldInfo.setStoreTermVectors(doVectorPositions, doVectorOffsets);
   }
 
   void shrinkHash() {
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase.java b/lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase.java
index 6dc8b3a..ccd9b64 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase.java
@@ -74,7 +74,7 @@ public abstract class DocValuesReaderBase extends PerDocValues {
           final String id = DocValuesWriterBase.docValuesId(segment,
               fieldInfo.number);
           values.put(field,
-              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), context));
+              loadDocValues(docCount, dir, id, fieldInfo.getDocValuesType(), context));
         }
       }
       success = true;
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/DocValuesWriterBase.java b/lucene/src/java/org/apache/lucene/index/codecs/DocValuesWriterBase.java
index e238f4c..ad57ac4 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/DocValuesWriterBase.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/DocValuesWriterBase.java
@@ -23,6 +23,7 @@ import java.util.Comparator;
 import org.apache.lucene.index.FieldInfo;
 import org.apache.lucene.index.PerDocWriteState;
 import org.apache.lucene.index.codecs.lucene40.values.Writer;
+import org.apache.lucene.index.values.ValueType;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.IOContext;
 import org.apache.lucene.util.BytesRef;
@@ -52,8 +53,8 @@ public abstract class DocValuesWriterBase extends PerDocConsumer {
   }
 
   @Override
-  public DocValuesConsumer addValuesField(FieldInfo field) throws IOException {
-    return Writer.create(field.getDocValues(),
+  public DocValuesConsumer addValuesField(ValueType valueType, FieldInfo field) throws IOException {
+    return Writer.create(valueType,
         docValuesId(segmentName, field.number), 
         getDirectory(), getComparator(), bytesUsed, context);
   }
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/PerDocConsumer.java b/lucene/src/java/org/apache/lucene/index/codecs/PerDocConsumer.java
index dd6f50e..60cacd8 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/PerDocConsumer.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/PerDocConsumer.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import org.apache.lucene.index.FieldInfo;
 import org.apache.lucene.index.MergeState;
 import org.apache.lucene.index.values.IndexDocValues;
+import org.apache.lucene.index.values.ValueType;
 
 /**
  * Abstract API that consumes per document values. Concrete implementations of
@@ -34,7 +35,7 @@ import org.apache.lucene.index.values.IndexDocValues;
  */
 public abstract class PerDocConsumer implements Closeable{
   /** Adds a new DocValuesField */
-  public abstract DocValuesConsumer addValuesField(FieldInfo field)
+  public abstract DocValuesConsumer addValuesField(ValueType type, FieldInfo field)
       throws IOException;
 
   /**
@@ -56,7 +57,7 @@ public abstract class PerDocConsumer implements Closeable{
             docValues[i] = perDocValues[i].docValues(fieldInfo.name);
           }
         }
-        final DocValuesConsumer docValuesConsumer = addValuesField(fieldInfo);
+        final DocValuesConsumer docValuesConsumer = addValuesField(fieldInfo.getDocValuesType(), fieldInfo);
         assert docValuesConsumer != null;
         docValuesConsumer.merge(mergeState, docValues);
       }
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40FieldInfosWriter.java b/lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40FieldInfosWriter.java
index 1fe1685..c809fd0 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40FieldInfosWriter.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40FieldInfosWriter.java
@@ -83,7 +83,7 @@ public class Lucene40FieldInfosWriter extends FieldInfosWriter {
         if (!fi.hasDocValues()) {
           b = 0;
         } else {
-          switch(fi.getDocValues()) {
+          switch(fi.getDocValuesType()) {
           case VAR_INTS:
             b = 1;
             break;
@@ -124,7 +124,7 @@ public class Lucene40FieldInfosWriter extends FieldInfosWriter {
             b = 13;
             break;
           default:
-            throw new IllegalStateException("unhandled indexValues type " + fi.getDocValues());
+            throw new IllegalStateException("unhandled indexValues type " + fi.getDocValuesType());
           }
         }
         output.writeByte(b);
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/sep/SepDocValuesConsumer.java b/lucene/src/java/org/apache/lucene/index/codecs/sep/SepDocValuesConsumer.java
index 43817ab..0d28f42 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/sep/SepDocValuesConsumer.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/sep/SepDocValuesConsumer.java
@@ -53,7 +53,7 @@ public class SepDocValuesConsumer extends DocValuesWriterBase {
     for (FieldInfo fieldInfo : fieldInfos) {
       if (fieldInfo.hasDocValues()) {
         String filename = docValuesId(segmentInfo.name, fieldInfo.number);
-        switch (fieldInfo.getDocValues()) {
+        switch (fieldInfo.getDocValuesType()) {
           case BYTES_FIXED_DEREF:
           case BYTES_VAR_DEREF:
           case BYTES_VAR_STRAIGHT:
diff --git a/lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldInfosWriter.java b/lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldInfosWriter.java
index abc2c7a..e6f5fab 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldInfosWriter.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldInfosWriter.java
@@ -100,7 +100,7 @@ public class SimpleTextFieldInfosWriter extends FieldInfosWriter {
         if (!fi.hasDocValues()) {
           SimpleTextUtil.write(out, "false", scratch);
         } else {
-          SimpleTextUtil.write(out, fi.getDocValues().toString(), scratch);
+          SimpleTextUtil.write(out, fi.getDocValuesType().toString(), scratch);
         }
         SimpleTextUtil.writeNewline(out);
         
diff --git a/lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil.java b/lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil.java
index 0cfde9a..8fb0d35 100644
--- a/lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil.java
+++ b/lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil.java
@@ -440,7 +440,7 @@ public class _TestUtil {
   /** Adds field info for a Document. */
   public static void add(Document doc, FieldInfos fieldInfos) {
     for (IndexableField field : doc) {
-      fieldInfos.addOrUpdate(field.name(), field.fieldType(), false, field.docValuesType());
+      fieldInfos.addOrUpdate(field.name(), field.fieldType());
     }
   }
   
diff --git a/lucene/src/test/org/apache/lucene/index/TestFieldInfos.java b/lucene/src/test/org/apache/lucene/index/TestFieldInfos.java
index c95c0a1..726729e 100644
--- a/lucene/src/test/org/apache/lucene/index/TestFieldInfos.java
+++ b/lucene/src/test/org/apache/lucene/index/TestFieldInfos.java
@@ -27,7 +27,6 @@ import org.apache.lucene.index.codecs.FieldInfosWriter;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.IOContext;
 import org.apache.lucene.store.IndexOutput;
-import org.junit.Ignore;
 
 import java.io.IOException;
 import java.util.Arrays;
@@ -82,7 +81,6 @@ public class TestFieldInfos extends LuceneTestCase {
 
     info = readIn.fieldInfo("textField2");
     assertTrue(info != null);
-    assertTrue(info.storeTermVector == true);
     assertTrue(info.omitNorms == false);
 
     info = readIn.fieldInfo("textField3");

