GitDiffStart: 10fbc9814aaffb1ce1f341a6284e05a7620c74f6 | Mon Jul 6 16:36:05 2009 +0000
diff --git a/src/java/org/apache/lucene/analysis/NumericTokenStream.java b/src/java/org/apache/lucene/analysis/NumericTokenStream.java
index 3a6fb08..1c0dcec 100644
--- a/src/java/org/apache/lucene/analysis/NumericTokenStream.java
+++ b/src/java/org/apache/lucene/analysis/NumericTokenStream.java
@@ -62,7 +62,7 @@ import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
  *  Field field = new Field(name, stream);
  *  field.setOmitNorms(true);
  *  field.setOmitTermFreqAndPositions(true);
- *  Document doc = new Document();
+ *  Document document = new Document();
  *  document.add(field);
  *  <em>// use this code to index many documents:</em>
  *  stream.set<em>???</em>Value(value1)
diff --git a/src/java/org/apache/lucene/document/NumericField.java b/src/java/org/apache/lucene/document/NumericField.java
index 0df1f1c..1ae36c0 100644
--- a/src/java/org/apache/lucene/document/NumericField.java
+++ b/src/java/org/apache/lucene/document/NumericField.java
@@ -50,12 +50,12 @@ import org.apache.lucene.search.FieldCache; // javadocs
  * <pre>
  *  <em>// init</em>
  *  NumericField field = new NumericField(name, precisionStep, Field.Store.XXX, true);
- *  Document doc = new Document();
+ *  Document document = new Document();
  *  document.add(field);
  *  <em>// use this code to index many documents:</em>
- *  stream.set<em>???</em>Value(value1)
+ *  field.set<em>???</em>Value(value1)
  *  writer.addDocument(document);
- *  stream.set<em>???</em>Value(value2)
+ *  field.set<em>???</em>Value(value2)
  *  writer.addDocument(document);
  *  ...
  * </pre>
diff --git a/src/java/org/apache/lucene/search/NumericRangeQuery.java b/src/java/org/apache/lucene/search/NumericRangeQuery.java
index e78912e..dfdc32f 100644
--- a/src/java/org/apache/lucene/search/NumericRangeQuery.java
+++ b/src/java/org/apache/lucene/search/NumericRangeQuery.java
@@ -42,14 +42,14 @@ import org.apache.lucene.index.Term;
  * For code examples see {@link NumericField}.
  *
  * <h4>Searching</h4>
- * <p>This class has no constructor, you can create filters depending on the data type
+ * <p>This class has no constructor, you can create queries depending on the data type
  * by using the static factories {@linkplain #newLongRange NumericRangeQuery.newLongRange()},
  * {@linkplain #newIntRange NumericRangeQuery.newIntRange()}, {@linkplain #newDoubleRange NumericRangeQuery.newDoubleRange()},
  * and {@linkplain #newFloatRange NumericRangeQuery.newFloatRange()}, e.g.:
  * <pre>
- * Filter f = NumericRangeQuery.newFloatRange(field, <a href="#precisionStepDesc">precisionStep</a>,
- *                                            new Float(0.3f), new Float(0.10f),
- *                                            true, true);
+ * Query q = NumericRangeQuery.newFloatRange(field, <a href="#precisionStepDesc">precisionStep</a>,
+ *                                           new Float(0.3f), new Float(0.10f),
+ *                                           true, true);
  * </pre>
  *
  * <h3>How it works</h3>

