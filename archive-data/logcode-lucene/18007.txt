GitDiffStart: c6e0e86acc1b9bf8ab9b9f810473c1f8d39ffd62 | Wed Apr 28 15:07:46 2010 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 17bf893..acf59df 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -282,6 +282,10 @@ Bug fixes
 * LUCENE-2387: Don't hang onto Fieldables from the last doc indexed,
   in IndexWriter, nor the Reader in Tokenizer after close is
   called.  (Ruben Laguna, Uwe Schindler, Mike McCandless)
+  
+* LUCENE-2417: IndexCommit did not implement hashCode() and equals() 
+  consitently. Now they both take Directory and version into consideration. 
+  (Shai Erera)
 
 New features
 
diff --git a/lucene/src/java/org/apache/lucene/index/IndexCommit.java b/lucene/src/java/org/apache/lucene/index/IndexCommit.java
index 780b73d..db10054 100644
--- a/lucene/src/java/org/apache/lucene/index/IndexCommit.java
+++ b/lucene/src/java/org/apache/lucene/index/IndexCommit.java
@@ -99,7 +99,7 @@ public abstract class IndexCommit {
 
   @Override
   public int hashCode() {
-    return getDirectory().hashCode() + getSegmentsFileName().hashCode();
+    return (int) (getDirectory().hashCode() + getVersion());
   }
 
   /** Returns the version for this IndexCommit.  This is the
diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexCommit.java b/lucene/src/test/org/apache/lucene/index/TestIndexCommit.java
new file mode 100644
index 0000000..38ef6c9
--- /dev/null
+++ b/lucene/src/test/org/apache/lucene/index/TestIndexCommit.java
@@ -0,0 +1,67 @@
+package org.apache.lucene.index;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import static org.junit.Assert.*;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Map;
+
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.util.LuceneTestCaseJ4;
+import org.junit.Test;
+
+public class TestIndexCommit extends LuceneTestCaseJ4 {
+
+  @Test
+  public void testEqualsHashCode() throws Exception {
+    // LUCENE-2417: equals and hashCode() impl was inconsistent
+    final Directory dir = new RAMDirectory();
+    
+    IndexCommit ic1 = new IndexCommit() {
+      @Override public String getSegmentsFileName() { return "a"; }
+      @Override public long getVersion() { return 12; }
+      @Override public Directory getDirectory() { return dir; }
+      @Override public Collection<String> getFileNames() throws IOException { return null; }
+      @Override public void delete() {}
+      @Override public long getGeneration() { return 0; }
+      @Override public long getTimestamp() throws IOException { return 1;}
+      @Override public Map<String, String> getUserData() throws IOException { return null; }
+      @Override public boolean isDeleted() { return false; }
+      @Override public boolean isOptimized() { return false; }
+    };
+    
+    IndexCommit ic2 = new IndexCommit() {
+      @Override public String getSegmentsFileName() { return "b"; }
+      @Override public long getVersion() { return 12; }
+      @Override public Directory getDirectory() { return dir; }
+      @Override public Collection<String> getFileNames() throws IOException { return null; }
+      @Override public void delete() {}
+      @Override public long getGeneration() { return 0; }
+      @Override public long getTimestamp() throws IOException { return 1;}
+      @Override public Map<String, String> getUserData() throws IOException { return null; }
+      @Override public boolean isDeleted() { return false; }
+      @Override public boolean isOptimized() { return false; }
+    };
+
+    assertEquals(ic1, ic2);
+    assertEquals("hash codes are not equals", ic1.hashCode(), ic2.hashCode());
+  }
+}

