GitDiffStart: 1bb9ec73e2d588e1089aad8783d7dd8a89d68cf2 | Mon Oct 18 00:04:31 2010 +0000
diff --git a/solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest.java b/solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest.java
index fe6425c4..764e25e 100644
--- a/solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest.java
+++ b/solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest.java
@@ -25,6 +25,7 @@ import org.apache.solr.common.params.ModifiableSolrParams;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.client.solrj.request.FieldAnalysisRequest;
 import org.apache.solr.request.LocalSolrQueryRequest;
+import org.apache.solr.request.SolrQueryRequest;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -66,7 +67,8 @@ public class FieldAnalysisRequestHandlerTest extends AnalysisRequestHandlerTestB
     params.add(AnalysisParams.FIELD_VALUE, "the quick red fox jumped over the lazy brown dogs");
     params.add(CommonParams.Q, "fox brown");
 
-    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));
+    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);
+    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);
     List<String> fieldNames = request.getFieldNames();
     assertEquals("Expecting 2 field names", 2, fieldNames.size());
     assertEquals("text", fieldNames.get(0));
@@ -78,25 +80,35 @@ public class FieldAnalysisRequestHandlerTest extends AnalysisRequestHandlerTestB
     assertEquals("the quick red fox jumped over the lazy brown dogs", request.getFieldValue());
     assertEquals("fox brown", request.getQuery());
     assertFalse(request.isShowMatch());
+    req.close();
 
     // testing overide of query value using analysis.query param
     params.add(AnalysisParams.QUERY, "quick lazy");
-    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));
+    req=new LocalSolrQueryRequest(h.getCore(), params);
+    request = handler.resolveAnalysisRequest(req);
     assertEquals("quick lazy", request.getQuery());
+    req.close();
 
     // testing analysis.showmatch param
     params.add(AnalysisParams.SHOW_MATCH, "false");
-    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));
+    req=new LocalSolrQueryRequest(h.getCore(), params);
+    request = handler.resolveAnalysisRequest(req);
     assertFalse(request.isShowMatch());
+    req.close();
+
     params.set(AnalysisParams.SHOW_MATCH, "true");
-    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));
+    req=new LocalSolrQueryRequest(h.getCore(), params);
+    request = handler.resolveAnalysisRequest(req);
     assertTrue(request.isShowMatch());
+    req.close();
 
     // testing absence of query value
     params.remove(CommonParams.Q);
     params.remove(AnalysisParams.QUERY);
-    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));
+    req=new LocalSolrQueryRequest(h.getCore(), params);
+    request = handler.resolveAnalysisRequest(req);
     assertNull(request.getQuery());
+    req.close();
   }
 
   /**

