GitDiffStart: 1537fe710225f2f06ff4430083a0f92fb29e728a | Thu Aug 27 16:57:27 2009 +0000
diff --git a/CHANGES.txt b/CHANGES.txt
index a9c07ea..06bc334 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -205,6 +205,12 @@ Changes in runtime behavior
     The usage of the US locale is important to guarantee correct ordering of
     generated terms.  (Uwe Schindler)
 
+15. LUCENE-1860: MultiTermQuery now defaults to
+    CONSTANT_SCORE_AUTO_REWRITE_DEFAULT rewrite method (previously it
+    was SCORING_BOOLEAN_QUERY_REWRITE).  This means that PrefixQuery
+    and WildcardQuery will now produce constant score for all matching
+    docs, equal to the boost of the query.  (Mike McCandless)
+
 API Changes
 
 1. LUCENE-1419: Add expert API to set custom indexing chain. This API is 
diff --git a/common-build.xml b/common-build.xml
index b849197..2b910bd 100644
--- a/common-build.xml
+++ b/common-build.xml
@@ -42,7 +42,7 @@
   <property name="Name" value="Lucene"/>
   <property name="dev.version" value="2.9"/>
   <property name="version" value="${dev.version}"/>
-  <property name="compatibility.tag" value="lucene_2_4_back_compat_tests_20090815"/>
+  <property name="compatibility.tag" value="lucene_2_4_back_compat_tests_20090827"/>
   <property name="spec.version" value="${version}"/>	
   <property name="year" value="2000-${current.year}"/>
   <property name="final.name" value="lucene-${name}-${version}"/>
diff --git a/contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery.java b/contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery.java
index 79f2bcd..27efd56 100644
--- a/contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery.java
+++ b/contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery.java
@@ -50,8 +50,7 @@ public class SpanRegexQuery extends SpanQuery implements RegexQueryCapable {
   public Query rewrite(IndexReader reader) throws IOException {
     RegexQuery orig = new RegexQuery(term);
     orig.setRegexImplementation(regexImpl);
-
-    // RegexQuery (via MultiTermQuery).rewrite always returns a BooleanQuery
+    orig.setRewriteMethod(RegexQuery.SCORING_BOOLEAN_QUERY_REWRITE);
     BooleanQuery bq = (BooleanQuery) orig.rewrite(reader);
 
     BooleanClause[] clauses = bq.getClauses();
diff --git a/src/java/org/apache/lucene/search/MultiTermQuery.java b/src/java/org/apache/lucene/search/MultiTermQuery.java
index 995a857..bf1a7dd 100644
--- a/src/java/org/apache/lucene/search/MultiTermQuery.java
+++ b/src/java/org/apache/lucene/search/MultiTermQuery.java
@@ -60,7 +60,7 @@ import org.apache.lucene.queryParser.QueryParser; // for javadoc
 public abstract class MultiTermQuery extends Query {
   /* @deprecated move to sub class */
   protected Term term;
-  protected RewriteMethod rewriteMethod = SCORING_BOOLEAN_QUERY_REWRITE;
+  protected RewriteMethod rewriteMethod = CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;
   transient int numberOfTerms = 0;
 
   /** Abstract class that defines how the query is rewritten. */
diff --git a/src/java/org/apache/lucene/search/PrefixQuery.java b/src/java/org/apache/lucene/search/PrefixQuery.java
index 8a4d74f..46f8ad8 100644
--- a/src/java/org/apache/lucene/search/PrefixQuery.java
+++ b/src/java/org/apache/lucene/search/PrefixQuery.java
@@ -26,13 +26,9 @@ import org.apache.lucene.util.ToStringUtils;
 /** A Query that matches documents containing terms with a specified prefix. A PrefixQuery
  * is built by QueryParser for input like <code>app*</code>.
  *
- * <p><b>NOTE</b>: Currently this query uses {@link
- * MultiTermQuery#SCORING_BOOLEAN_QUERY_REWRITE}, which
- * assigns not-very-useful scores to the resulting hits.  In
- * 3.0 this default will change to {@link
- * MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}; you
- * can use {@link MultiTermQuery#setRewriteMethod} to change
- * it. */
+ * <p>This query uses the {@link
+ * MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}
+ * rewrite method. */
 public class PrefixQuery extends MultiTermQuery {
   private Term prefix;
 
diff --git a/src/java/org/apache/lucene/search/TermRangeQuery.java b/src/java/org/apache/lucene/search/TermRangeQuery.java
index 46c9ffd..0fb0972 100644
--- a/src/java/org/apache/lucene/search/TermRangeQuery.java
+++ b/src/java/org/apache/lucene/search/TermRangeQuery.java
@@ -109,7 +109,6 @@ public class TermRangeQuery extends MultiTermQuery {
     this.includeLower = includeLower;
     this.includeUpper = includeUpper;
     this.collator = collator;
-    rewriteMethod = CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;
   }
 
   /** Returns the field name for this query */
diff --git a/src/java/org/apache/lucene/search/WildcardQuery.java b/src/java/org/apache/lucene/search/WildcardQuery.java
index 64cc268..0fb2923 100644
--- a/src/java/org/apache/lucene/search/WildcardQuery.java
+++ b/src/java/org/apache/lucene/search/WildcardQuery.java
@@ -30,12 +30,9 @@ import java.io.IOException;
  * a Wildcard term should not start with one of the wildcards <code>*</code> or
  * <code>?</code>.
  * 
- * <p><b>NOTE</b>: Currently this query uses {@link
- * MultiTermQuery#SCORING_BOOLEAN_QUERY_REWRITE}, which
- * assigns not-very-useful scores to the resulting hits.  In
- * 3.0 this default will change to {@link
- * MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}; you can use {@link
- * MultiTermQuery#setRewriteMethod} to change it.
+ * <p>This query uses the {@link
+ * MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}
+ * rewrite method.
  *
  * @see WildcardTermEnum */
 public class WildcardQuery extends MultiTermQuery {
diff --git a/src/test/org/apache/lucene/search/TestBooleanPrefixQuery.java b/src/test/org/apache/lucene/search/TestBooleanPrefixQuery.java
index 3fcf1b0..799ca74 100644
--- a/src/test/org/apache/lucene/search/TestBooleanPrefixQuery.java
+++ b/src/test/org/apache/lucene/search/TestBooleanPrefixQuery.java
@@ -53,7 +53,22 @@ public class TestBooleanPrefixQuery extends LuceneTestCase {
     super(name);
   }
 
-  public void testMethod() {
+  private int getCount(IndexReader r, Query q) throws Exception {
+    if (q instanceof BooleanQuery) {
+      return ((BooleanQuery) q).getClauses().length;
+    } else if (q instanceof ConstantScoreQuery) {
+      DocIdSetIterator iter = ((ConstantScoreQuery) q).getFilter().getDocIdSet(r).iterator();
+      int count = 0;
+      while(iter.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
+        count++;
+      }
+      return count;
+    } else {
+      throw new RuntimeException("unepxected query " + q);
+    }
+  }
+
+  public void testMethod() throws Exception {
     RAMDirectory directory = new RAMDirectory();
 
     String[] categories = new String[]{"food",
@@ -63,6 +78,7 @@ public class TestBooleanPrefixQuery extends LuceneTestCase {
 
     Query rw1 = null;
     Query rw2 = null;
+    IndexReader reader = null;
     try {
       IndexWriter writer = new IndexWriter(directory, new
                                            WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);
@@ -73,9 +89,8 @@ public class TestBooleanPrefixQuery extends LuceneTestCase {
       }
       writer.close();
       
-      IndexReader reader = IndexReader.open(directory);
+      reader = IndexReader.open(directory);
       PrefixQuery query = new PrefixQuery(new Term("category", "foo"));
-      
       rw1 = query.rewrite(reader);
       
       BooleanQuery bq = new BooleanQuery();
@@ -86,20 +101,7 @@ public class TestBooleanPrefixQuery extends LuceneTestCase {
       fail(e.getMessage());
     }
 
-    BooleanQuery bq1 = null;
-    if (rw1 instanceof BooleanQuery) {
-      bq1 = (BooleanQuery) rw1;
-    }
-
-    BooleanQuery bq2 = null;
-    if (rw2 instanceof BooleanQuery) {
-        bq2 = (BooleanQuery) rw2;
-    } else {
-      fail("Rewrite");
-    }
-
-    assertEquals("Number of Clauses Mismatch", bq1.getClauses().length,
-                 bq2.getClauses().length);
+    assertEquals("Number of Clauses Mismatch", getCount(reader, rw1), getCount(reader, rw2));
   }
 }
 

