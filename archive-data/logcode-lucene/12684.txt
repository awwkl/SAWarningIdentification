GitDiffStart: 2722cbcbe2daf3490633dddfee623fb6b60277c6 | Mon Apr 23 01:22:54 2012 +0000
diff --git a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilter.java b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilter.java
index 0ab9a85..43b8769 100644
--- a/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilter.java
+++ b/lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilter.java
@@ -63,7 +63,7 @@ public final class BeiderMorseFilter extends TokenFilter {
   private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
   
   /** 
-   * Calls {@link #BeiderMorseFilter(TokenStream, PhoneticEngine, Languages.LanguageSet) 
+   * Calls {@link #BeiderMorseFilter(TokenStream, PhoneticEngine, LanguageSet)
    *        BeiderMorseFilter(input, engine, null)}
    */
   public BeiderMorseFilter(TokenStream input, PhoneticEngine engine) {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator.java b/lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator.java
index 98728e0..742bc8b 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator.java
@@ -230,9 +230,9 @@ public class StandardFacetsAccumulator extends FacetsAccumulator {
   /**
    * Iterate over the documents for this partition and fill the facet arrays with the correct
    * count/complement count/value.
-   * @param internalCollector
+   * @param docids
    * @param facetArrays
-   * @param part
+   * @param partition
    * @throws IOException
    */
   private final void fillArraysForPartition(ScoredDocIDs docids,
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts.java b/lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts.java
index 4ab9e81..5aea862 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts.java
@@ -71,7 +71,6 @@ public class TotalFacetCounts {
   
   /** 
    * Construct by key - from index Directory or by recomputing.
-   * @param key the key mapping of this total facet counts (index, taxonomy, category lists...) 
    */
   private TotalFacetCounts (TaxonomyReader taxonomy, FacetIndexingParams facetIndexingParams,
       int[][] counts, CreationType createType4Test) throws IOException, LockObtainFailedException {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal.java b/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal.java
index bdb87c7..f7a1ca6 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal.java
@@ -449,7 +449,7 @@ public class CompactLabelToOrdinal extends LabelToOrdinal {
 
   /**
    * Opens the file and reloads the CompactLabelToOrdinal. The file it expects
-   * is generated from the {@link #flush()} command.
+   * is generated from the {@link #flush(File)} command.
    */
   static CompactLabelToOrdinal open(File file, float loadFactor,
                                     int numHashArrays) throws IOException {
diff --git a/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU.java b/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU.java
index 917becd..24998cb 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU.java
@@ -4,6 +4,7 @@ import java.util.HashMap;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import org.apache.lucene.facet.taxonomy.CategoryPath;
+import org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter; // javadocs
 
 /**
  * Licensed to the Apache Software Foundation (ASF) under one or more
@@ -119,7 +120,7 @@ class NameIntCacheLRU {
    * If cache is full remove least recently used entries from cache.
    * Return true if anything was removed, false otherwise.
    * 
-   * See comment in {@link DirectoryTaxonomyWriter#addToCache(String, Integer)}
+   * See comment in {@link DirectoryTaxonomyWriter#addToCache(CategoryPath, int)}
    * for an explanation why we clean 2/3rds of the cache, and not just one
    * entry.
    */ 
diff --git a/lucene/facet/src/java/org/apache/lucene/util/collections/ArrayHashMap.java b/lucene/facet/src/java/org/apache/lucene/util/collections/ArrayHashMap.java
index b2ff567..858d3bf 100644
--- a/lucene/facet/src/java/org/apache/lucene/util/collections/ArrayHashMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/util/collections/ArrayHashMap.java
@@ -219,7 +219,7 @@ public class ArrayHashMap<K,V> implements Iterable<V> {
 
   /**
    * Adds a pair to the map. Takes the first empty position from the
-   * empty-linked-list's head - {@link firstEmpty}. New pairs are always
+   * empty-linked-list's head - {@link #firstEmpty}. New pairs are always
    * inserted to baseHash, and are followed by the old colliding pair.
    */
   private void prvt_put(K key, V value) {
@@ -312,7 +312,7 @@ public class ArrayHashMap<K,V> implements Iterable<V> {
 
   /**
    * Finds the actual index of a given key with it's baseHashIndex. Some methods
-   * use the baseHashIndex. If those call {@link #find()} there's no need to
+   * use the baseHashIndex. If those call {@link #find} there's no need to
    * re-calculate that hash.
    * 
    * @return the index of the given key, or 0 if the key wasn't found.
diff --git a/lucene/facet/src/java/org/apache/lucene/util/collections/FloatToObjectMap.java b/lucene/facet/src/java/org/apache/lucene/util/collections/FloatToObjectMap.java
index ba66d8c..77e99da 100644
--- a/lucene/facet/src/java/org/apache/lucene/util/collections/FloatToObjectMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/util/collections/FloatToObjectMap.java
@@ -243,7 +243,7 @@ public class FloatToObjectMap<T> implements Iterable<T> {
 
   /**
    * Adds a pair to the map. Takes the first empty position from the
-   * empty-linked-list's head - {@link firstEmpty}.
+   * empty-linked-list's head - {@link #firstEmpty}.
    * 
    * New pairs are always inserted to baseHash, and are followed by the old
    * colliding pair.
@@ -367,7 +367,7 @@ public class FloatToObjectMap<T> implements Iterable<T> {
 
   /**
    * Find the actual index of a given key with it's baseHashIndex.<br>
-   * Some methods use the baseHashIndex. If those call {@link #find()} there's
+   * Some methods use the baseHashIndex. If those call {@link #find} there's
    * no need to re-calculate that hash.
    * 
    * @param key
diff --git a/lucene/facet/src/java/org/apache/lucene/util/collections/IntHashSet.java b/lucene/facet/src/java/org/apache/lucene/util/collections/IntHashSet.java
index 9a059f7..3d3d164 100644
--- a/lucene/facet/src/java/org/apache/lucene/util/collections/IntHashSet.java
+++ b/lucene/facet/src/java/org/apache/lucene/util/collections/IntHashSet.java
@@ -206,15 +206,13 @@ public class IntHashSet {
 
   /**
    * Adds a pair to the map. Takes the first empty position from the
-   * empty-linked-list's head - {@link firstEmpty}.
+   * empty-linked-list's head - {@link #firstEmpty}.
    * 
    * New pairs are always inserted to baseHash, and are followed by the old
    * colliding pair.
    * 
    * @param key
    *            integer which maps the given value
-   * @param e
-   *            value which is being mapped using the given key
    */
   private void prvt_add(int key) {
     // Hash entry to which the new pair would be inserted
@@ -312,7 +310,7 @@ public class IntHashSet {
 
   /**
    * Find the actual index of a given key with it's baseHashIndex.<br>
-   * Some methods use the baseHashIndex. If those call {@link #find()} there's
+   * Some methods use the baseHashIndex. If those call {@link #find} there's
    * no need to re-calculate that hash.
    * 
    * @param key
diff --git a/lucene/facet/src/java/org/apache/lucene/util/collections/IntToDoubleMap.java b/lucene/facet/src/java/org/apache/lucene/util/collections/IntToDoubleMap.java
index 33b61d1..8698866 100644
--- a/lucene/facet/src/java/org/apache/lucene/util/collections/IntToDoubleMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/util/collections/IntToDoubleMap.java
@@ -243,7 +243,7 @@ public class IntToDoubleMap {
 
   /**
    * Adds a pair to the map. Takes the first empty position from the
-   * empty-linked-list's head - {@link firstEmpty}.
+   * empty-linked-list's head - {@link #firstEmpty}.
    * 
    * New pairs are always inserted to baseHash, and are followed by the old
    * colliding pair.
@@ -368,7 +368,7 @@ public class IntToDoubleMap {
 
   /**
    * Find the actual index of a given key with it's baseHashIndex.<br>
-   * Some methods use the baseHashIndex. If those call {@link #find()} there's
+   * Some methods use the baseHashIndex. If those call {@link #find} there's
    * no need to re-calculate that hash.
    * 
    * @param key
diff --git a/lucene/facet/src/java/org/apache/lucene/util/collections/IntToIntMap.java b/lucene/facet/src/java/org/apache/lucene/util/collections/IntToIntMap.java
index e7726c8..2db467d 100644
--- a/lucene/facet/src/java/org/apache/lucene/util/collections/IntToIntMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/util/collections/IntToIntMap.java
@@ -241,7 +241,7 @@ public class IntToIntMap {
 
   /**
    * Adds a pair to the map. Takes the first empty position from the
-   * empty-linked-list's head - {@link firstEmpty}.
+   * empty-linked-list's head - {@link #firstEmpty}.
    * 
    * New pairs are always inserted to baseHash, and are followed by the old
    * colliding pair.
@@ -365,7 +365,7 @@ public class IntToIntMap {
 
   /**
    * Find the actual index of a given key with it's baseHashIndex.<br>
-   * Some methods use the baseHashIndex. If those call {@link #find()} there's
+   * Some methods use the baseHashIndex. If those call {@link #find} there's
    * no need to re-calculate that hash.
    * 
    * @param key
diff --git a/lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap.java b/lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap.java
index 27e4654..211c73c 100644
--- a/lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/util/collections/IntToObjectMap.java
@@ -242,7 +242,7 @@ public class IntToObjectMap<T> implements Iterable<T> {
 
   /**
    * Adds a pair to the map. Takes the first empty position from the
-   * empty-linked-list's head - {@link firstEmpty}.
+   * empty-linked-list's head - {@link #firstEmpty}.
    * 
    * New pairs are always inserted to baseHash, and are followed by the old
    * colliding pair.
@@ -367,7 +367,7 @@ public class IntToObjectMap<T> implements Iterable<T> {
 
   /**
    * Find the actual index of a given key with it's baseHashIndex.<br>
-   * Some methods use the baseHashIndex. If those call {@link #find()} there's
+   * Some methods use the baseHashIndex. If those call {@link #find} there's
    * no need to re-calculate that hash.
    * 
    * @param key
diff --git a/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap.java b/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap.java
index d4ee811..e059e54 100644
--- a/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToFloatMap.java
@@ -243,7 +243,7 @@ public class ObjectToFloatMap<K> {
 
   /**
    * Adds a pair to the map. Takes the first empty position from the
-   * empty-linked-list's head - {@link firstEmpty}.
+   * empty-linked-list's head - {@link #firstEmpty}.
    * 
    * New pairs are always inserted to baseHash, and are followed by the old
    * colliding pair.
@@ -369,7 +369,7 @@ public class ObjectToFloatMap<K> {
 
   /**
    * Find the actual index of a given key with it's baseHashIndex.<br>
-   * Some methods use the baseHashIndex. If those call {@link #find()} there's
+   * Some methods use the baseHashIndex. If those call {@link #find} there's
    * no need to re-calculate that hash.
    * 
    * @param key
diff --git a/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.java b/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.java
index e6330c7..f5c6e3a 100644
--- a/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.java
+++ b/lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.java
@@ -243,7 +243,7 @@ public class ObjectToIntMap<K> {
 
   /**
    * Adds a pair to the map. Takes the first empty position from the
-   * empty-linked-list's head - {@link firstEmpty}.
+   * empty-linked-list's head - {@link #firstEmpty}.
    * 
    * New pairs are always inserted to baseHash, and are followed by the old
    * colliding pair.
@@ -369,7 +369,7 @@ public class ObjectToIntMap<K> {
 
   /**
    * Find the actual index of a given key with it's baseHashIndex.<br>
-   * Some methods use the baseHashIndex. If those call {@link #find()} there's
+   * Some methods use the baseHashIndex. If those call {@link #find} there's
    * no need to re-calculate that hash.
    * 
    * @param key
diff --git a/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java b/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
index 13f0a79..d6615bc 100644
--- a/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
+++ b/lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
@@ -194,7 +194,7 @@ public class MemoryIndex {
   /** pos: positions[3*i], startOffset: positions[3*i +1], endOffset: positions[3*i +2] */
   private final int stride;
   
-  /** Could be made configurable; See {@link Document#setBoost(float)} */
+  /** Could be made configurable; */
   private static final float docBoost = 1.0f;
 
   private static final boolean DEBUG = false;

