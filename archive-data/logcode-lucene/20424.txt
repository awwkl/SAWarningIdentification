GitDiffStart: 4d5f12e41780b1a9f3b4978983fe3264b40629f8 | Sun Apr 5 22:58:14 2009 +0000
diff --git a/contrib/dataimporthandler/CHANGES.txt b/contrib/dataimporthandler/CHANGES.txt
index e162200..78cda89 100644
--- a/contrib/dataimporthandler/CHANGES.txt
+++ b/contrib/dataimporthandler/CHANGES.txt
@@ -239,6 +239,9 @@ Other
               is not <dataConfig>.
               (Noble Paul via shalin)
 
+7. SOLR-1087: Deprecate 'where' attribute in CachedSqlEntityProcessor in favor of cacheKey and cacheLookup.
+              (Noble Paul via shalin)
+
 ================== Release 1.3.0 20080915 ==================
 
 Status
diff --git a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java
index ce45609..dccca07 100644
--- a/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java
+++ b/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java
@@ -296,12 +296,25 @@ public class EntityProcessorBase extends EntityProcessor {
     if (simpleCache != null || cacheWithWhereClause != null)
       return;
     String where = context.getEntityAttribute("where");
-    if (where == null) {
+
+    String cacheKey = context.getEntityAttribute(CACHE_KEY);
+    String lookupKey = context.getEntityAttribute(CACHE_LOOKUP);
+    if(cacheKey != null && lookupKey == null){
+      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,
+              "'cacheKey' is specified for the entity "+ entityName+" but 'cacheLookup' is missing" );
+
+    }
+    if (where == null && cacheKey == null) {
       simpleCache = new HashMap<String, List<Map<String, Object>>>();
     } else {
-      String[] splits = where.split("=");
-      cachePk = splits[0];
-      cacheVariableName = splits[1].trim();
+      if (where != null) {
+        String[] splits = where.split("=");
+        cachePk = splits[0];
+        cacheVariableName = splits[1].trim();
+      } else {
+        cachePk = cacheKey;
+        cacheVariableName = lookupKey;
+      }
       cacheWithWhereClause = new HashMap<String, Map<Object, List<Map<String, Object>>>>();
     }
   }
@@ -420,4 +433,9 @@ public class EntityProcessorBase extends EntityProcessor {
   public static final String SKIP = "skip";
 
   public static final String SKIP_DOC = "$skipDoc";
+
+  public static final String CACHE_KEY = "cacheKey";
+  
+  public static final String CACHE_LOOKUP = "cacheLookup";
+
 }
diff --git a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor.java b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor.java
index e025e48..a735e56 100644
--- a/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor.java
+++ b/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor.java
@@ -195,13 +195,38 @@ public class TestCachedSqlEntityProcessor {
     fields.add(AbstractDataImportHandlerTest.createMap("column", "desc"));
     String q = "select * from x";
     Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(
-            "query", q, "where", "id=x.id");
+            "query", q, EntityProcessorBase.CACHE_KEY,"id", EntityProcessorBase.CACHE_LOOKUP ,"x.id");
     MockDataSource ds = new MockDataSource();
     VariableResolverImpl vr = new VariableResolverImpl();
     Map xNamespace = AbstractDataImportHandlerTest.createMap("id", 0);
     vr.addNamespace("x", xNamespace);
     Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, 0,
             fields, entityAttrs);
+
+
+    doWhereTest(q, context, ds, xNamespace);
+  }
+
+  @Test
+  public void withKeyAndLookup() {
+    List fields = new ArrayList();
+    fields.add(AbstractDataImportHandlerTest.createMap("column", "id"));
+    fields.add(AbstractDataImportHandlerTest.createMap("column", "desc"));
+    String q = "select * from x";
+    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(
+            "query", q, "where", "id=x.id");    
+    MockDataSource ds = new MockDataSource();
+    VariableResolverImpl vr = new VariableResolverImpl();
+    Map xNamespace = AbstractDataImportHandlerTest.createMap("id", 0);
+    vr.addNamespace("x", xNamespace);
+    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, 0,
+            fields, entityAttrs);
+
+
+    doWhereTest(q, context, ds, xNamespace);
+  }
+
+  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {
     List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();
     rows.add(AbstractDataImportHandlerTest.createMap("id", 1, "desc", "one"));
     rows.add(AbstractDataImportHandlerTest.createMap("id", 2, "desc", "two"));

