GitDiffStart: 56b0a46f103d69a7a93c5a5f5818949978148cf6 | Fri Nov 13 15:52:02 2015 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 19830ac..4b9872b 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -388,6 +388,9 @@ Bug Fixes
   if the last published state is something else if it has already registered with ZK.
   (Ishan Chattopadhyaya, Mark Miller via noble)
 
+* SOLR-8287: TrieDoubleField and TrieLongField now override toNativeType
+  (Ishan Chattopadhyaya via Christine Poerschke)
+
 Optimizations
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/schema/TrieDoubleField.java b/solr/core/src/java/org/apache/solr/schema/TrieDoubleField.java
index 16c4484..4403b1b 100644
--- a/solr/core/src/java/org/apache/solr/schema/TrieDoubleField.java
+++ b/solr/core/src/java/org/apache/solr/schema/TrieDoubleField.java
@@ -56,6 +56,14 @@ public class TrieDoubleField extends TrieField implements DoubleValueFieldType {
   }
   
   @Override
+  public Object toNativeType(Object val) {
+    if(val==null) return null;
+    if (val instanceof Number) return ((Number) val).doubleValue();
+    if (val instanceof String) return Double.parseDouble((String) val);
+    return super.toNativeType(val);
+  }
+
+  @Override
   protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {
     
     return new SortedSetFieldSource(f.getName(), choice) {
diff --git a/solr/core/src/java/org/apache/solr/schema/TrieLongField.java b/solr/core/src/java/org/apache/solr/schema/TrieLongField.java
index 2d4ca93..3eb5de5 100644
--- a/solr/core/src/java/org/apache/solr/schema/TrieLongField.java
+++ b/solr/core/src/java/org/apache/solr/schema/TrieLongField.java
@@ -50,6 +50,19 @@ public class TrieLongField extends TrieField implements LongValueFieldType {
   }
 
   @Override
+  public Object toNativeType(Object val) {
+    if(val==null) return null;
+    if (val instanceof Number) return ((Number) val).longValue();
+    try {
+      if (val instanceof String) return Long.parseLong((String) val);
+    } catch (NumberFormatException e) {
+      Double v = Double.parseDouble((String) val);
+      return v.longValue();
+    }
+    return super.toNativeType(val);
+  }
+
+  @Override
   protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {
     
     return new SortedSetFieldSource(f.getName(), choice) {

