GitDiffStart: 532f82806fe8a0420471f78a69d5cb48cb5c41dc | Thu Oct 4 21:58:26 2012 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 9000cdf..af317fc 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -43,6 +43,11 @@ Optimizations
   into the skipdata. You need to reindex any indexes created with
   this experimental codec.  (Robert Muir)
 
+* LUCENE-4459: Improve WeakIdentityMap.keyIterator() to remove GCed keys
+  from backing map early instead of waiting for reap(). This makes test
+  failures in TestWeakIdentityMap disappear, too.
+  (Uwe Schindler, Mike McCandless, Robert Muir)
+
 Build
 
 * LUCENE-4451: Memory leak per unique thread caused by 
diff --git a/lucene/core/src/java/org/apache/lucene/util/WeakIdentityMap.java b/lucene/core/src/java/org/apache/lucene/util/WeakIdentityMap.java
index 33c91fc..c5437ef 100644
--- a/lucene/core/src/java/org/apache/lucene/util/WeakIdentityMap.java
+++ b/lucene/core/src/java/org/apache/lucene/util/WeakIdentityMap.java
@@ -133,22 +133,22 @@ public final class WeakIdentityMap<K,V> {
     
       @Override
       public boolean hasNext() {
-        return nextIsSet ? true : setNext();
+        return nextIsSet || setNext();
       }
       
       @Override @SuppressWarnings("unchecked")
       public K next() {
-        if (nextIsSet || setNext()) {
-          try {
-            assert nextIsSet;
-            return (K) next;
-          } finally {
-             // release strong reference and invalidate current value:
-            nextIsSet = false;
-            next = null;
-          }
+        if (!hasNext()) {
+          throw new NoSuchElementException();
+        }
+        assert nextIsSet;
+        try {
+          return (K) next;
+        } finally {
+           // release strong reference and invalidate current value:
+          nextIsSet = false;
+          next = null;
         }
-        throw new NoSuchElementException();
       }
       
       @Override
@@ -161,14 +161,15 @@ public final class WeakIdentityMap<K,V> {
         while (iterator.hasNext()) {
           next = iterator.next().get();
           if (next == null) {
-            // already garbage collected!
-            continue;
-          }
-          // unfold "null" special value
-          if (next == NULL) {
-            next = null;
+            // the key was already GCed, we can remove it from backing map:
+            iterator.remove();
+          } else {
+            // unfold "null" special value:
+            if (next == NULL) {
+              next = null;
+            }
+            return nextIsSet = true;
           }
-          return nextIsSet = true;
         }
         return false;
       }
diff --git a/lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap.java b/lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap.java
index 0b688f7..7ff4dea 100644
--- a/lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap.java
+++ b/lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap.java
@@ -122,13 +122,16 @@ public class TestWeakIdentityMap extends LuceneTestCase {
     for (int i = 0; size > 0 && i < 10; i++) try {
       System.runFinalization();
       System.gc();
+      int newSize = map.size();
+      assertTrue("previousSize("+size+")>=newSize("+newSize+")", size >= newSize);
+      size = newSize;
       Thread.sleep(100L);
       c = 0;
       for (Iterator<String> it = map.keyIterator(); it.hasNext();) {
         assertNotNull(it.next());
         c++;
       }
-      final int newSize = map.size();
+      newSize = map.size();
       assertTrue("previousSize("+size+")>=iteratorSize("+c+")", size >= c);
       assertTrue("iteratorSize("+c+")>=newSize("+newSize+")", c >= newSize);
       size = newSize;
@@ -223,13 +226,16 @@ public class TestWeakIdentityMap extends LuceneTestCase {
     for (int i = 0; size > 0 && i < 10; i++) try {
       System.runFinalization();
       System.gc();
+      int newSize = map.size();
+      assertTrue("previousSize("+size+")>=newSize("+newSize+")", size >= newSize);
+      size = newSize;
       Thread.sleep(100L);
       int c = 0;
       for (Iterator<Object> it = map.keyIterator(); it.hasNext();) {
         assertNotNull(it.next());
         c++;
       }
-      final int newSize = map.size();
+      newSize = map.size();
       assertTrue("previousSize("+size+")>=iteratorSize("+c+")", size >= c);
       assertTrue("iteratorSize("+c+")>=newSize("+newSize+")", c >= newSize);
       size = newSize;

