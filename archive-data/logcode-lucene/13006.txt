GitDiffStart: 7cc871d9f277208b00f626f34a05c52f76a579c3 | Sun Apr 1 14:08:14 2012 +0000
diff --git a/lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex.java b/lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex.java
index a1edce4..76c28db 100644
--- a/lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex.java
+++ b/lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex.java
@@ -125,7 +125,7 @@ public class TestTermInfosReaderIndex extends LuceneTestCase {
   
   public void testSeekEnum() throws CorruptIndexException, IOException {
     int indexPosition = 3;
-    SegmentTermEnum clone = (SegmentTermEnum) termEnum.clone();
+    SegmentTermEnum clone = termEnum.clone();
     Term term = findTermThatWouldBeAtIndex(clone, indexPosition);
     SegmentTermEnum enumerator = clone;
     index.seekEnum(enumerator, indexPosition);
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestPayloads.java b/lucene/core/src/test/org/apache/lucene/index/TestPayloads.java
index 920043b..c34410d 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestPayloads.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestPayloads.java
@@ -80,7 +80,7 @@ public class TestPayloads extends LuceneTestCase {
             // expected exception
         }
         
-        Payload clone = (Payload) payload.clone();
+        Payload clone = payload.clone();
         assertEquals(payload.length(), clone.length());
         for (int i = 0; i < payload.length(); i++) {
           assertEquals(payload.byteAt(i), clone.byteAt(i));
diff --git a/lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet.java b/lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet.java
index b487a58..47b50b6 100644
--- a/lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet.java
+++ b/lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet.java
@@ -183,14 +183,14 @@ public class TestOpenBitSet extends LuceneTestCase {
       fromIndex = random.nextInt(sz+80);
       toIndex = fromIndex + random.nextInt((sz>>1)+1);
       BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);
-      OpenBitSet bb = (OpenBitSet)b.clone(); bb.flip(fromIndex,toIndex);
+      OpenBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);
 
       doIterate(aa,bb, mode);   // a problem here is from flip or doIterate
 
       fromIndex = random.nextInt(sz+80);
       toIndex = fromIndex + random.nextInt((sz>>1)+1);
       aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);
-      bb = (OpenBitSet)b.clone(); bb.clear(fromIndex,toIndex);
+      bb = b.clone(); bb.clear(fromIndex,toIndex);
 
       doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit
       doNextSetBitLong(aa,bb);
@@ -201,7 +201,7 @@ public class TestOpenBitSet extends LuceneTestCase {
       fromIndex = random.nextInt(sz+80);
       toIndex = fromIndex + random.nextInt((sz>>1)+1);
       aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);
-      bb = (OpenBitSet)b.clone(); bb.set(fromIndex,toIndex);
+      bb = b.clone(); bb.set(fromIndex,toIndex);
 
       doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit
       doNextSetBitLong(aa,bb);
@@ -219,10 +219,10 @@ public class TestOpenBitSet extends LuceneTestCase {
         BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);
         BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);
 
-        OpenBitSet b_and = (OpenBitSet)b.clone(); assertEquals(b,b_and); b_and.and(b0);
-        OpenBitSet b_or = (OpenBitSet)b.clone(); b_or.or(b0);
-        OpenBitSet b_xor = (OpenBitSet)b.clone(); b_xor.xor(b0);
-        OpenBitSet b_andn = (OpenBitSet)b.clone(); b_andn.andNot(b0);
+        OpenBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);
+        OpenBitSet b_or = b.clone(); b_or.or(b0);
+        OpenBitSet b_xor = b.clone(); b_xor.xor(b0);
+        OpenBitSet b_andn = b.clone(); b_andn.andNot(b0);
 
         doIterate(a_and,b_and, mode);
         doIterate(a_or,b_or, mode);
diff --git a/lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java b/lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
index bac9b8c..6724f81 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java
@@ -53,10 +53,10 @@ public class QueryUtils {
 
   /** check very basic hashCode and equals */
   public static void checkHashEquals(Query q) {
-    Query q2 = (Query)q.clone();
+    Query q2 = q.clone();
     checkEqual(q,q2);
 
-    Query q3 = (Query)q.clone();
+    Query q3 = q.clone();
     q3.setBoost(7.21792348f);
     checkUnequal(q,q3);
 
@@ -120,7 +120,7 @@ public class QueryUtils {
         }
         checkExplanations(q1,s);
         
-        Query q2 = (Query)q1.clone();
+        Query q2 = q1.clone();
         checkEqual(s.rewrite(q1),
                    s.rewrite(q2));
       }

