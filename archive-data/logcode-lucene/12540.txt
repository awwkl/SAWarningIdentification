GitDiffStart: ea376c8725879241320e3a2d7108886b68b794a9 | Mon May 7 00:44:49 2012 +0000
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 3d2ae0d..8d5fabc 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -141,9 +141,10 @@ Changes in backwards compatibility policy
   ParallelMultiSearcher into IndexSearcher as an optional
   ExecutorServiced passed to its ctor.  (Mike McCandless)
 
-* LUCENE-2908: Removed serialization code from lucene classes. It is recommended
-  that you serialize user search needs at a higher level in your application.
-  (Robert Muir)
+* LUCENE-2908, LUCENE-4037: Removed serialization code from lucene classes. 
+  It is recommended that you serialize user search needs at a higher level 
+  in your application.
+  (Robert Muir, Benson Margulies)
 
 * LUCENE-2831: Changed Weight#scorer, Weight#explain & Filter#getDocIdSet to
   operate on a AtomicReaderContext instead of directly on IndexReader to enable
diff --git a/lucene/core/src/java/org/apache/lucene/search/FieldCache.java b/lucene/core/src/java/org/apache/lucene/search/FieldCache.java
index 80baf90..b8652d1 100644
--- a/lucene/core/src/java/org/apache/lucene/search/FieldCache.java
+++ b/lucene/core/src/java/org/apache/lucene/search/FieldCache.java
@@ -125,9 +125,6 @@ public interface FieldCache {
       // directly from byte[]
       return Byte.parseByte(term.utf8ToString());
     }
-    protected Object readResolve() {
-      return DEFAULT_BYTE_PARSER;
-    }
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_BYTE_PARSER"; 
@@ -143,9 +140,6 @@ public interface FieldCache {
       // directly from byte[]
       return Short.parseShort(term.utf8ToString());
     }
-    protected Object readResolve() {
-      return DEFAULT_SHORT_PARSER;
-    }
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_SHORT_PARSER"; 
@@ -161,9 +155,6 @@ public interface FieldCache {
       // directly from byte[]
       return Integer.parseInt(term.utf8ToString());
     }
-    protected Object readResolve() {
-      return DEFAULT_INT_PARSER;
-    }
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_INT_PARSER"; 
@@ -179,9 +170,6 @@ public interface FieldCache {
       // directly from byte[]
       return Float.parseFloat(term.utf8ToString());
     }
-    protected Object readResolve() {
-      return DEFAULT_FLOAT_PARSER;
-    }
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_FLOAT_PARSER"; 
@@ -197,9 +185,6 @@ public interface FieldCache {
       // directly from byte[]
       return Long.parseLong(term.utf8ToString());
     }
-    protected Object readResolve() {
-      return DEFAULT_LONG_PARSER;
-    }
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_LONG_PARSER"; 
@@ -215,9 +200,6 @@ public interface FieldCache {
       // directly from byte[]
       return Double.parseDouble(term.utf8ToString());
     }
-    protected Object readResolve() {
-      return DEFAULT_DOUBLE_PARSER;
-    }
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_DOUBLE_PARSER"; 
@@ -234,9 +216,6 @@ public interface FieldCache {
         throw new FieldCacheImpl.StopFillCacheException();
       return NumericUtils.prefixCodedToInt(term);
     }
-    protected Object readResolve() {
-      return NUMERIC_UTILS_INT_PARSER;
-    }
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".NUMERIC_UTILS_INT_PARSER"; 
@@ -253,9 +232,6 @@ public interface FieldCache {
         throw new FieldCacheImpl.StopFillCacheException();
       return NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(term));
     }
-    protected Object readResolve() {
-      return NUMERIC_UTILS_FLOAT_PARSER;
-    }
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".NUMERIC_UTILS_FLOAT_PARSER"; 
@@ -272,9 +248,6 @@ public interface FieldCache {
         throw new FieldCacheImpl.StopFillCacheException();
       return NumericUtils.prefixCodedToLong(term);
     }
-    protected Object readResolve() {
-      return NUMERIC_UTILS_LONG_PARSER;
-    }
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".NUMERIC_UTILS_LONG_PARSER"; 
@@ -291,9 +264,6 @@ public interface FieldCache {
         throw new FieldCacheImpl.StopFillCacheException();
       return NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(term));
     }
-    protected Object readResolve() {
-      return NUMERIC_UTILS_DOUBLE_PARSER;
-    }
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".NUMERIC_UTILS_DOUBLE_PARSER"; 
diff --git a/lucene/core/src/java/org/apache/lucene/search/ScoringRewrite.java b/lucene/core/src/java/org/apache/lucene/search/ScoringRewrite.java
index 6e48e07..f36253f 100644
--- a/lucene/core/src/java/org/apache/lucene/search/ScoringRewrite.java
+++ b/lucene/core/src/java/org/apache/lucene/search/ScoringRewrite.java
@@ -67,11 +67,6 @@ public abstract class ScoringRewrite<Q extends Query> extends TermCollectingRewr
       if (count > BooleanQuery.getMaxClauseCount())
         throw new BooleanQuery.TooManyClauses();
     }
-    
-    // Make sure we are still a singleton even after deserializing
-    protected Object readResolve() {
-      return SCORING_BOOLEAN_QUERY_REWRITE;
-    }    
   };
   
   /** Like {@link #SCORING_BOOLEAN_QUERY_REWRITE} except
@@ -96,11 +91,6 @@ public abstract class ScoringRewrite<Q extends Query> extends TermCollectingRewr
       result.setBoost(query.getBoost());
       return result;
     }
-
-    // Make sure we are still a singleton even after deserializing
-    protected Object readResolve() {
-      return CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE;
-    }
   };
 
   /** This method is called after every new term to check if the number of max clauses
diff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.java b/lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.java
index 44bcf3e..0a69a6d 100644
--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.java
+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.java
@@ -173,11 +173,6 @@ public class SpanMultiTermQueryWrapper<Q extends MultiTermQuery> extends SpanQue
     public SpanQuery rewrite(IndexReader reader, MultiTermQuery query) throws IOException {
       return delegate.rewrite(reader, query);
     }
-
-    // Make sure we are still a singleton even after deserializing
-    protected Object readResolve() {
-      return SCORING_SPAN_QUERY_REWRITE;
-    }
   };
   
   /**
diff --git a/lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java b/lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java
index 61b3190..ef265ec 100644
--- a/lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java
+++ b/lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex.java
@@ -146,11 +146,6 @@ public class TestCrashCausesCorruptIndex extends LuceneTestCase  {
    * actual machine crash.
    */
   private static class CrashingException extends RuntimeException {
-    /**
-     * 
-     */
-    private static final long serialVersionUID = 1L;
-
     public CrashingException(String msg) {
       super(msg);
     }
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.java b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.java
index 30a1913..68da0a3 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.java
@@ -18,16 +18,12 @@ package org.apache.lucene.queries.function;
  */
 
 import org.apache.lucene.index.AtomicReaderContext;
-import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.search.FieldComparator;
 import org.apache.lucene.search.FieldComparatorSource;
-import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.SortField;
-import org.apache.lucene.util.Bits;
 
 import java.io.IOException;
-import java.io.Serializable;
 import java.util.IdentityHashMap;
 import java.util.Map;
 
@@ -38,7 +34,7 @@ import java.util.Map;
  *
  *
  */
-public abstract class ValueSource implements Serializable {
+public abstract class ValueSource {
 
   /**
    * Gets the values for this reader and the context that was previously

