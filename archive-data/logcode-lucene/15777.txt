GitDiffStart: 06c339745e1f9fc8275b2af0b72db112371f9df1 | Wed May 18 13:48:52 2011 +0000
diff --git a/lucene/src/java/org/apache/lucene/util/StringHelper.java b/lucene/src/java/org/apache/lucene/util/StringHelper.java
index c2555d3..7809ccd 100644
--- a/lucene/src/java/org/apache/lucene/util/StringHelper.java
+++ b/lucene/src/java/org/apache/lucene/util/StringHelper.java
@@ -1,5 +1,8 @@
 package org.apache.lucene.util;
 
+import java.util.Comparator;
+import java.util.StringTokenizer;
+
 /**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -54,4 +57,42 @@ public abstract class StringHelper {
 
   private StringHelper() {
   }
+  
+  /**
+   * @return a Comparator over versioned strings such as X.YY.Z
+   * @lucene.internal
+   */
+  public static Comparator<String> getVersionComparator() {
+    return versionComparator;
+  }
+  
+  private static Comparator<String> versionComparator = new Comparator<String>() {
+    public int compare(String a, String b) {
+      StringTokenizer aTokens = new StringTokenizer(a, ".");
+      StringTokenizer bTokens = new StringTokenizer(b, ".");
+      
+      while (aTokens.hasMoreTokens()) {
+        int aToken = Integer.parseInt(aTokens.nextToken());
+        if (bTokens.hasMoreTokens()) {
+          int bToken = Integer.parseInt(bTokens.nextToken());
+          if (aToken != bToken) {
+            return aToken - bToken;
+          }
+        } else {
+          // a has some extra trailing tokens. if these are all zeroes, thats ok.
+          if (aToken != 0) {
+            return 1; 
+          }
+        }
+      }
+      
+      // b has some extra trailing tokens. if these are all zeroes, thats ok.
+      while (bTokens.hasMoreTokens()) {
+        if (Integer.parseInt(bTokens.nextToken()) != 0)
+          return -1;
+      }
+      
+      return 0;
+    }
+  };
 }
diff --git a/lucene/src/test/org/apache/lucene/util/TestVersionComparator.java b/lucene/src/test/org/apache/lucene/util/TestVersionComparator.java
new file mode 100644
index 0000000..0286050
--- /dev/null
+++ b/lucene/src/test/org/apache/lucene/util/TestVersionComparator.java
@@ -0,0 +1,47 @@
+package org.apache.lucene.util;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.util.Comparator;
+
+/**
+ * Tests for StringHelper.getVersionComparator
+ */
+public class TestVersionComparator extends LuceneTestCase {
+  public void testVersions() {
+    Comparator<String> comp = StringHelper.getVersionComparator();
+    assertTrue(comp.compare("1", "2") < 0);
+    assertTrue(comp.compare("1", "1") == 0);
+    assertTrue(comp.compare("2", "1") > 0);
+    
+    assertTrue(comp.compare("1.1", "1") > 0);
+    assertTrue(comp.compare("1", "1.1") < 0);
+    assertTrue(comp.compare("1.1", "1.1") == 0);
+    
+    assertTrue(comp.compare("1.0", "1") == 0);
+    assertTrue(comp.compare("1", "1.0") == 0);
+    assertTrue(comp.compare("1.0.1", "1.0") > 0);
+    assertTrue(comp.compare("1.0", "1.0.1") < 0);
+    
+    assertTrue(comp.compare("1.02.003", "1.2.3.0") == 0);
+    assertTrue(comp.compare("1.2.3.0", "1.02.003") == 0);
+    
+    assertTrue(comp.compare("1.10", "1.9") > 0);
+    assertTrue(comp.compare("1.9", "1.10") < 0);
+  }
+}

