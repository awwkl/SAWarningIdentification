GitDiffStart: f16af7afc03f6fd155f72a44728c1d26cc35c7f6 | Thu Sep 18 18:45:46 2014 +0000
diff --git a/solr/core/src/java/org/apache/solr/core/InitParams.java b/solr/core/src/java/org/apache/solr/core/InitParams.java
new file mode 100644
index 0000000..321cc99
--- /dev/null
+++ b/solr/core/src/java/org/apache/solr/core/InitParams.java
@@ -0,0 +1,117 @@
+package org.apache.solr.core;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.solr.common.util.NamedList;
+import org.apache.solr.common.util.StrUtils;
+
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+/**
+ * An Object which represents a <args> tag
+ *
+ */
+public class InitParams {
+  public static final String TYPE = "initParams";
+  public final String name;
+  public final Set<String> paths;
+  public final NamedList defaults,invariants,appends;
+
+  public InitParams(PluginInfo p) {
+    this.name = p.attributes.get("name");
+    Set<String> paths = null;
+    String pathStr = p.attributes.get("path");
+    if(pathStr!=null) {
+      paths = Collections.unmodifiableSet(new HashSet<>(StrUtils.splitSmart(pathStr, ',')));
+    }
+    this.paths = paths;
+    NamedList nl = (NamedList) p.initArgs.get(PluginInfo.DEFAULTS);
+    defaults = nl == null ? null: nl.getImmutableCopy();
+    nl = (NamedList) p.initArgs.get(PluginInfo.INVARIANTS);
+    invariants = nl == null ? null: nl.getImmutableCopy();
+    nl = (NamedList) p.initArgs.get(PluginInfo.APPENDS);
+    appends = nl == null ? null: nl.getImmutableCopy();
+  }
+
+  public boolean matchPath(String name) {
+    if(paths == null) return false;
+    if(paths.contains(name)) return true;
+
+    for (String path : paths) {
+      if(matchPath(path,name)) return true;
+    }
+
+    return false;
+  }
+
+  private static boolean matchPath(String path, String name){
+    List<String> pathSplit = StrUtils.splitSmart(path, '/');
+    List<String> nameSplit = StrUtils.splitSmart(name, '/');
+    for (int i = 0; i < nameSplit.size(); i++) {
+      String s = nameSplit.get(i);
+      String ps = pathSplit.size()>i ?  pathSplit.get(i) :null;
+      if(ps == null) return false;
+      if(s.equals(ps)) continue;
+      if("*".equals(ps) && nameSplit.size()==i+1) return true;
+      if("**".equals(ps)) return true;
+      return false;
+    }
+    return true;
+
+  }
+
+  public void apply(NamedList initArgs) {
+    merge(defaults, (NamedList) initArgs.get(PluginInfo.DEFAULTS), initArgs, PluginInfo.DEFAULTS, false);
+    merge((NamedList) initArgs.get(PluginInfo.INVARIANTS), invariants, initArgs, PluginInfo.INVARIANTS, false);
+    merge((NamedList) initArgs.get(PluginInfo.APPENDS), appends, initArgs, PluginInfo.APPENDS, true);
+  }
+
+  private static  void merge(NamedList first, NamedList second, NamedList sink, String name, boolean appends) {
+    if(first == null && second == null) return;
+    if(first == null) first = new NamedList();
+    NamedList nl = first.clone();
+    if(appends) {
+      if(second!=null) nl.addAll(second);
+    } else {
+      Set<String> a = new HashSet<>();
+      Set<String> b = new HashSet<>();
+      for (Object o : first)    {
+        Map.Entry<String,Object> e = (Map.Entry) o;
+        a.add(e.getKey() );
+      }
+      if(second!=null) {
+        for (Object o : second) {
+          Map.Entry<String, Object> e = (Map.Entry) o;
+          b.add(e.getKey());
+        }
+      }
+      for (String s : b) {
+        if (a.contains(s)) continue;
+        for (Object v : second.getAll(s)) nl.add(s, v);
+      }
+    }
+    if(sink.indexOf(name,0) >-1) {
+      sink.setVal(sink.indexOf(name, 0), nl);
+    } else {
+      sink.add(name,nl);
+    }
+  }
+}
diff --git a/solr/core/src/java/org/apache/solr/core/ParamSet.java b/solr/core/src/java/org/apache/solr/core/ParamSet.java
deleted file mode 100644
index dc5807e..0000000
--- a/solr/core/src/java/org/apache/solr/core/ParamSet.java
+++ /dev/null
@@ -1,117 +0,0 @@
-package org.apache.solr.core;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import org.apache.solr.common.util.NamedList;
-import org.apache.solr.common.util.StrUtils;
-
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-/**
- * An Object which represents a paramSet tag
- *
- */
-public class ParamSet {
-  public static final String TYPE = "paramSet";
-  public final String name;
-  public final Set<String> paths;
-  public final NamedList defaults,invariants,appends;
-
-  public ParamSet(PluginInfo p) {
-    this.name = p.attributes.get("name");
-    Set<String> paths = null;
-    String pathStr = p.attributes.get("path");
-    if(pathStr!=null) {
-      paths = Collections.unmodifiableSet(new HashSet<>(StrUtils.splitSmart(pathStr, ',')));
-    }
-    this.paths = paths;
-    NamedList nl = (NamedList) p.initArgs.get(PluginInfo.DEFAULTS);
-    defaults = nl == null ? null: nl.getImmutableCopy();
-    nl = (NamedList) p.initArgs.get(PluginInfo.INVARIANTS);
-    invariants = nl == null ? null: nl.getImmutableCopy();
-    nl = (NamedList) p.initArgs.get(PluginInfo.APPENDS);
-    appends = nl == null ? null: nl.getImmutableCopy();
-  }
-
-  public boolean matchPath(String name) {
-    if(paths == null) return false;
-    if(paths.contains(name)) return true;
-
-    for (String path : paths) {
-      if(matchPath(path,name)) return true;
-    }
-
-    return false;
-  }
-
-  private static boolean matchPath(String path, String name){
-    List<String> pathSplit = StrUtils.splitSmart(path, '/');
-    List<String> nameSplit = StrUtils.splitSmart(name, '/');
-    for (int i = 0; i < nameSplit.size(); i++) {
-      String s = nameSplit.get(i);
-      String ps = pathSplit.size()>i ?  pathSplit.get(i) :null;
-      if(ps == null) return false;
-      if(s.equals(ps)) continue;
-      if("*".equals(ps) && nameSplit.size()==i+1) return true;
-      if("**".equals(ps)) return true;
-      return false;
-    }
-    return true;
-
-  }
-
-  public void apply(NamedList initArgs) {
-    merge(defaults, (NamedList) initArgs.get(PluginInfo.DEFAULTS), initArgs, PluginInfo.DEFAULTS, false);
-    merge((NamedList) initArgs.get(PluginInfo.INVARIANTS), invariants, initArgs, PluginInfo.INVARIANTS, false);
-    merge((NamedList) initArgs.get(PluginInfo.APPENDS), appends, initArgs, PluginInfo.APPENDS, true);
-  }
-
-  private static  void merge(NamedList first, NamedList second, NamedList sink, String name, boolean appends) {
-    if(first == null && second == null) return;
-    if(first == null) first = new NamedList();
-    NamedList nl = first.clone();
-    if(appends) {
-      if(second!=null) nl.addAll(second);
-    } else {
-      Set<String> a = new HashSet<>();
-      Set<String> b = new HashSet<>();
-      for (Object o : first)    {
-        Map.Entry<String,Object> e = (Map.Entry) o;
-        a.add(e.getKey() );
-      }
-      if(second!=null) {
-        for (Object o : second) {
-          Map.Entry<String, Object> e = (Map.Entry) o;
-          b.add(e.getKey());
-        }
-      }
-      for (String s : b) {
-        if (a.contains(s)) continue;
-        for (Object v : second.getAll(s)) nl.add(s, v);
-      }
-    }
-    if(sink.indexOf(name,0) >-1) {
-      sink.setVal(sink.indexOf(name, 0), nl);
-    } else {
-      sink.add(name,nl);
-    }
-  }
-}
diff --git a/solr/core/src/java/org/apache/solr/core/RequestHandlers.java b/solr/core/src/java/org/apache/solr/core/RequestHandlers.java
index 8c4cb3a..4e8b9d5 100644
--- a/solr/core/src/java/org/apache/solr/core/RequestHandlers.java
+++ b/solr/core/src/java/org/apache/solr/core/RequestHandlers.java
@@ -22,7 +22,6 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -199,21 +198,21 @@ public final class RequestHandlers {
   }
 
   private PluginInfo applyParamSet(SolrConfig config, PluginInfo info) {
-    List<ParamSet> paramSets= new ArrayList<>();
-    String p = info.attributes.get("paramSet");
+    List<InitParams> ags = new ArrayList<>();
+    String p = info.attributes.get(InitParams.TYPE);
     if(p!=null) {
-      for (String paramSet : StrUtils.splitSmart(p, ',')) {
-        if(config.getParamSets().containsKey(paramSet)) paramSets.add(config.getParamSets().get(paramSet));
-        else log.warn("INVALID paramSet {} in requestHandler {}", paramSet, info.toString());
+      for (String arg : StrUtils.splitSmart(p, ',')) {
+        if(config.getInitParams().containsKey(arg)) ags.add(config.getInitParams().get(arg));
+        else log.warn("INVALID paramSet {} in requestHandler {}", arg, info.toString());
       }
     }
-    for (ParamSet paramSet : config.getParamSets().values()) {
-      if(paramSet.matchPath(info.name)) paramSets.add(paramSet);
+    for (InitParams args : config.getInitParams().values()) {
+      if(args.matchPath(info.name)) ags.add(args);
     }
-    if(!paramSets.isEmpty()){
+    if(!ags.isEmpty()){
       info = new PluginInfo(info.type, info.attributes, info.initArgs.clone(), info.children);
-      for (ParamSet paramSet : paramSets) {
-        paramSet.apply(info.initArgs);
+      for (InitParams args : ags) {
+        args.apply(info.initArgs);
       }
     }
     return info;
diff --git a/solr/core/src/java/org/apache/solr/core/SolrConfig.java b/solr/core/src/java/org/apache/solr/core/SolrConfig.java
index d3be068..a3be912 100644
--- a/solr/core/src/java/org/apache/solr/core/SolrConfig.java
+++ b/solr/core/src/java/org/apache/solr/core/SolrConfig.java
@@ -23,8 +23,6 @@ import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.util.Version;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.SolrException.ErrorCode;
-import org.apache.solr.common.util.NamedList;
-import org.apache.solr.common.util.StrUtils;
 import org.apache.solr.handler.component.SearchComponent;
 import org.apache.solr.request.SolrRequestHandler;
 import org.apache.solr.response.QueryResponseWriter;
@@ -59,13 +57,10 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.EnumSet;
 import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
-import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -312,24 +307,24 @@ public class SolrConfig extends Config {
      addHttpRequestToContext = getBool( 
          "requestDispatcher/requestParsers/@addHttpRequestToContext", false );
 
-    loadPluginInfo(ParamSet.class,ParamSet.TYPE, MULTI_OK);
-    List<PluginInfo> paramSetInfos =  pluginStore.get(ParamSet.class.getName()) ;
-    if(paramSetInfos!=null){
-      Map<String,ParamSet> paramSets = new HashMap<>();
-      for (PluginInfo p : paramSetInfos) {
-        ParamSet paramSet = new ParamSet(p);
-        paramSets.put(paramSet.name == null ? String.valueOf(paramSet.hashCode()) : paramSet.name , paramSet );
+    loadPluginInfo(InitParams.class, InitParams.TYPE, MULTI_OK);
+    List<PluginInfo> argsInfos =  pluginStore.get(InitParams.class.getName()) ;
+    if(argsInfos!=null){
+      Map<String,InitParams> argsMap = new HashMap<>();
+      for (PluginInfo p : argsInfos) {
+        InitParams args = new InitParams(p);
+        argsMap.put(args.name == null ? String.valueOf(args.hashCode()) : args.name, args);
       }
-      this.paramSets = Collections.unmodifiableMap(paramSets);
+      this.initParams = Collections.unmodifiableMap(argsMap);
 
     }
 
     solrRequestParsers = new SolrRequestParsers(this);
     Config.log.info("Loaded SolrConfig: " + name);
   }
-  private Map<String,ParamSet>  paramSets = Collections.emptyMap();
-  public Map<String, ParamSet> getParamSets() {
-    return paramSets;
+  private Map<String,InitParams> initParams = Collections.emptyMap();
+  public Map<String, InitParams> getInitParams() {
+    return initParams;
   }
   protected UpdateHandlerInfo loadUpdatehandlerInfo() {
     return new UpdateHandlerInfo(get("updateHandler/@class",null),
diff --git a/solr/core/src/java/org/apache/solr/util/SolrPluginUtils.java b/solr/core/src/java/org/apache/solr/util/SolrPluginUtils.java
index 18e2ae5..82fb659 100644
--- a/solr/core/src/java/org/apache/solr/util/SolrPluginUtils.java
+++ b/solr/core/src/java/org/apache/solr/util/SolrPluginUtils.java
@@ -48,7 +48,7 @@ import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.common.util.SimpleOrderedMap;
 import org.apache.solr.common.util.StrUtils;
-import org.apache.solr.core.ParamSet;
+import org.apache.solr.core.InitParams;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.handler.component.HighlightComponent;
 import org.apache.solr.handler.component.ResponseBuilder;
@@ -125,14 +125,14 @@ public class SolrPluginUtils {
    */
   public static void setDefaults(SolrQueryRequest req, SolrParams defaults,
                                  SolrParams appends, SolrParams invariants) {
-      String paramSetNames = req.getParams().get(ParamSet.TYPE);
-      if(paramSetNames !=null){
-        for (String name : StrUtils.splitSmart(paramSetNames,',')) {
-          ParamSet paramSet = req.getCore().getSolrConfig().getParamSets().get(name);
-          if(paramSet!=null){
-            if(paramSet.defaults != null) defaults = SolrParams.wrapDefaults(SolrParams.toSolrParams(paramSet.defaults) , defaults);
-            if(paramSet.invariants != null) invariants = SolrParams.wrapDefaults(invariants, SolrParams.toSolrParams(paramSet.invariants));
-            if(paramSet.appends != null)  appends = SolrParams.wrapAppended(appends, SolrParams.toSolrParams(paramSet.appends));
+      String useParams = req.getParams().get("useParam");
+      if(useParams !=null){
+        for (String name : StrUtils.splitSmart(useParams,',')) {
+          InitParams initParams = req.getCore().getSolrConfig().getInitParams().get(name);
+          if(initParams !=null){
+            if(initParams.defaults != null) defaults = SolrParams.wrapDefaults(SolrParams.toSolrParams(initParams.defaults) , defaults);
+            if(initParams.invariants != null) invariants = SolrParams.wrapDefaults(invariants, SolrParams.toSolrParams(initParams.invariants));
+            if(initParams.appends != null)  appends = SolrParams.wrapAppended(appends, SolrParams.toSolrParams(initParams.appends));
           }
         }
       }
diff --git a/solr/core/src/test-files/solr/collection1/conf/solrconfig-paramset.xml b/solr/core/src/test-files/solr/collection1/conf/solrconfig-paramset.xml
index 50f0e3f..3dde8b2 100644
--- a/solr/core/src/test-files/solr/collection1/conf/solrconfig-paramset.xml
+++ b/solr/core/src/test-files/solr/collection1/conf/solrconfig-paramset.xml
@@ -26,7 +26,7 @@
   <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.RAMDirectoryFactory}"/>
   <requestHandler name="standard" class="solr.StandardRequestHandler"/>
   <requestHandler name="/update" class="solr.UpdateRequestHandler"/>
-  <paramSet name="a" path="/dump3,/dump6,/root/*,/root1/**">
+  <initParams name="a" path="/dump3,/dump6,/root/*,/root1/**">
     <lst name="defaults">
       <str name="a">A</str>
     </lst>
@@ -36,19 +36,19 @@
     <lst name="appends">
       <str name="c">C</str>
     </lst>
-  </paramSet>
-  <paramSet path="/dump6">
+  </initParams>
+  <initParams path="/dump6">
     <lst name="defaults">
       <str name="p">P</str>
     </lst>
-  </paramSet>
+  </initParams>
   <requestHandler name="/dump3" class="DumpRequestHandler"/>
   <requestHandler name="/dump6" class="DumpRequestHandler"/>
   <requestHandler name="/dump4" class="DumpRequestHandler"/>
   <requestHandler name="/root/dump5" class="DumpRequestHandler"/>
   <requestHandler name="/root1/anotherlevel/dump6" class="DumpRequestHandler"/>
-  <requestHandler name="/dump1" class="DumpRequestHandler" paramSet="a"/>
-  <requestHandler name="/dump2" class="DumpRequestHandler" paramSet="a">
+  <requestHandler name="/dump1" class="DumpRequestHandler" initParams="a"/>
+  <requestHandler name="/dump2" class="DumpRequestHandler" initParams="a">
     <lst name="defaults">
       <str name="a">A1</str>
     </lst>
diff --git a/solr/core/src/test/org/apache/solr/core/TestInitParams.java b/solr/core/src/test/org/apache/solr/core/TestInitParams.java
new file mode 100644
index 0000000..65279db
--- /dev/null
+++ b/solr/core/src/test/org/apache/solr/core/TestInitParams.java
@@ -0,0 +1,96 @@
+package org.apache.solr.core;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.solr.SolrTestCaseJ4;
+import org.apache.solr.common.util.NamedList;
+import org.apache.solr.request.SolrRequestHandler;
+import org.apache.solr.response.SolrQueryResponse;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import java.util.Arrays;
+
+public class TestInitParams extends SolrTestCaseJ4 {
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    initCore("solrconfig-paramset.xml","schema.xml");
+  }
+  @Test
+  public void testComponentWithParamSet(){
+
+    for (String s : Arrays.asList("/dump1", "/dump3","/root/dump5" , "/root1/anotherlevel/dump6")) {
+      SolrRequestHandler handler = h.getCore().getRequestHandler(s);
+      SolrQueryResponse rsp = new SolrQueryResponse();
+      handler.handleRequest(req("initArgs", "true"), rsp);
+      NamedList nl = (NamedList) rsp.getValues().get("initArgs");
+      NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);
+      assertEquals("A", def.get("a"));
+      def = (NamedList) nl.get(PluginInfo.INVARIANTS);
+      assertEquals("B", def.get("b"));
+      def = (NamedList) nl.get(PluginInfo.APPENDS);
+      assertEquals("C", def.get("c"));
+    }
+  }
+
+  @Test
+  public void testMultiParamSet(){
+    SolrRequestHandler handler = h.getCore().getRequestHandler("/dump6");
+    SolrQueryResponse rsp = new SolrQueryResponse();
+    handler.handleRequest(req("initArgs", "true"), rsp);
+    NamedList nl = (NamedList) rsp.getValues().get("initArgs");
+    NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);
+    assertEquals("A", def.get("a"));
+    assertEquals("P", def.get("p"));
+    def = (NamedList) nl.get(PluginInfo.INVARIANTS);
+    assertEquals("B", def.get("b"));
+    def = (NamedList) nl.get(PluginInfo.APPENDS);
+    assertEquals("C", def.get("c"));
+
+  }
+
+  @Test
+  public void testComponentWithParamSetRequestParam(){
+    for (String s : Arrays.asList("/dump4")) {
+      SolrRequestHandler handler = h.getCore().getRequestHandler(s);
+      SolrQueryResponse rsp = new SolrQueryResponse();
+      handler.handleRequest(req("param", "a","param","b" ,"param","c", "useParam","a"), rsp);
+      NamedList def = (NamedList) rsp.getValues().get("params");
+      assertEquals("A", def.get("a"));
+      assertEquals("B", def.get("b"));
+      assertEquals("C", def.get("c"));
+    }
+  }
+  @Test
+  public void testComponentWithConflictingParamSet(){
+    SolrRequestHandler handler = h.getCore().getRequestHandler("/dump2");
+    SolrQueryResponse rsp = new SolrQueryResponse();
+    handler.handleRequest(req("initArgs", "true"), rsp);
+    NamedList nl = (NamedList) rsp.getValues().get("initArgs");
+    NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);
+    assertEquals("A" ,def.get("a"));
+    def = (NamedList) nl.get(PluginInfo.INVARIANTS);
+    assertEquals("B1" ,def.get("b"));
+    def = (NamedList) nl.get(PluginInfo.APPENDS);
+    assertEquals(Arrays.asList("C1","C") ,def.getAll("c"));
+  }
+
+
+
+
+}
diff --git a/solr/core/src/test/org/apache/solr/core/TestParamSet.java b/solr/core/src/test/org/apache/solr/core/TestParamSet.java
deleted file mode 100644
index 8d62eed..0000000
--- a/solr/core/src/test/org/apache/solr/core/TestParamSet.java
+++ /dev/null
@@ -1,96 +0,0 @@
-package org.apache.solr.core;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import org.apache.solr.SolrTestCaseJ4;
-import org.apache.solr.common.util.NamedList;
-import org.apache.solr.request.SolrRequestHandler;
-import org.apache.solr.response.SolrQueryResponse;
-import org.junit.BeforeClass;
-import org.junit.Test;
-
-import java.util.Arrays;
-
-public class TestParamSet  extends SolrTestCaseJ4 {
-  @BeforeClass
-  public static void beforeClass() throws Exception {
-    initCore("solrconfig-paramset.xml","schema.xml");
-  }
-  @Test
-  public void testComponentWithParamSet(){
-
-    for (String s : Arrays.asList("/dump1", "/dump3","/root/dump5" , "/root1/anotherlevel/dump6")) {
-      SolrRequestHandler handler = h.getCore().getRequestHandler(s);
-      SolrQueryResponse rsp = new SolrQueryResponse();
-      handler.handleRequest(req("initArgs", "true"), rsp);
-      NamedList nl = (NamedList) rsp.getValues().get("initArgs");
-      NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);
-      assertEquals("A", def.get("a"));
-      def = (NamedList) nl.get(PluginInfo.INVARIANTS);
-      assertEquals("B", def.get("b"));
-      def = (NamedList) nl.get(PluginInfo.APPENDS);
-      assertEquals("C", def.get("c"));
-    }
-  }
-
-  @Test
-  public void testMultiParamSet(){
-    SolrRequestHandler handler = h.getCore().getRequestHandler("/dump6");
-    SolrQueryResponse rsp = new SolrQueryResponse();
-    handler.handleRequest(req("initArgs", "true"), rsp);
-    NamedList nl = (NamedList) rsp.getValues().get("initArgs");
-    NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);
-    assertEquals("A", def.get("a"));
-    assertEquals("P", def.get("p"));
-    def = (NamedList) nl.get(PluginInfo.INVARIANTS);
-    assertEquals("B", def.get("b"));
-    def = (NamedList) nl.get(PluginInfo.APPENDS);
-    assertEquals("C", def.get("c"));
-
-  }
-
-  @Test
-  public void testComponentWithParamSetRequestParam(){
-    for (String s : Arrays.asList("/dump4")) {
-      SolrRequestHandler handler = h.getCore().getRequestHandler(s);
-      SolrQueryResponse rsp = new SolrQueryResponse();
-      handler.handleRequest(req("param", "a","param","b" ,"param","c", "paramSet","a"), rsp);
-      NamedList def = (NamedList) rsp.getValues().get("params");
-      assertEquals("A", def.get("a"));
-      assertEquals("B", def.get("b"));
-      assertEquals("C", def.get("c"));
-    }
-  }
-  @Test
-  public void testComponentWithConflictingParamSet(){
-    SolrRequestHandler handler = h.getCore().getRequestHandler("/dump2");
-    SolrQueryResponse rsp = new SolrQueryResponse();
-    handler.handleRequest(req("initArgs", "true"), rsp);
-    NamedList nl = (NamedList) rsp.getValues().get("initArgs");
-    NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);
-    assertEquals("A" ,def.get("a"));
-    def = (NamedList) nl.get(PluginInfo.INVARIANTS);
-    assertEquals("B1" ,def.get("b"));
-    def = (NamedList) nl.get(PluginInfo.APPENDS);
-    assertEquals(Arrays.asList("C1","C") ,def.getAll("c"));
-  }
-
-
-
-
-}
diff --git a/solr/example/example-schemaless/solr/collection1/conf/solrconfig.xml b/solr/example/example-schemaless/solr/collection1/conf/solrconfig.xml
index 2d07fcf..ce35a87 100755
--- a/solr/example/example-schemaless/solr/collection1/conf/solrconfig.xml
+++ b/solr/example/example-schemaless/solr/collection1/conf/solrconfig.xml
@@ -969,17 +969,17 @@
       <str>spellcheck</str>
     </arr>
   </requestHandler>
-  <paramSet path="/update/**,/query,/select,/tvrh,/elevate,/spell,/browse">
+  <initParams path="/update/**,/query,/select,/tvrh,/elevate,/spell,/browse">
     <lst name="defaults">
       <str name="df">_text</str>
     </lst>
-  </paramSet>
+  </initParams>
 
-  <paramSet path="/update/**">
+  <initParams path="/update/**">
     <lst name="defaults">
       <str name="update.chain">add-unknown-fields-to-the-schema</str>
     </lst>
-  </paramSet>
+  </initParams>
 
   <!-- Solr Cell Update Request Handler
 
diff --git a/solr/example/solr/collection1/conf/solrconfig.xml b/solr/example/solr/collection1/conf/solrconfig.xml
index 92f5dd1..a41c038 100755
--- a/solr/example/solr/collection1/conf/solrconfig.xml
+++ b/solr/example/solr/collection1/conf/solrconfig.xml
@@ -1052,11 +1052,11 @@
     -->
   <!--<requestHandler name="/update" class="solr.UpdateRequestHandler">
   </requestHandler>-->
-  <paramSet path="/update/**,/query,/select,/tvrh,/elevate,/spell,/browse">
+  <initParams path="/update/**,/query,/select,/tvrh,/elevate,/spell,/browse">
     <lst name="defaults">
       <str name="df">text</str>
     </lst>
-  </paramSet>
+  </initParams>
   <!-- The following are implicitly added
   <requestHandler name="/update/json" class="solr.UpdateRequestHandler">
         <lst name="defaults">

