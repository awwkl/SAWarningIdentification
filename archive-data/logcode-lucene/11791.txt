GitDiffStart: 2fd2d60e193fa7651d60bc142e5481d95ae33200 | Mon Jul 23 22:44:20 2012 +0000
diff --git a/solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.java b/solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.java
index 17695af..5c7f521 100644
--- a/solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.java
@@ -106,7 +106,7 @@ public class FullSolrCloudTest extends AbstractDistributedZkTestCase {
   protected ChaosMonkey chaosMonkey;
   protected volatile ZkStateReader zkStateReader;
   
-  private Map<String,SolrServer> shardToLeaderClient = new HashMap<String,SolrServer>();
+  protected Map<String,SolrServer> shardToLeaderClient = new HashMap<String,SolrServer>();
   protected Map<String,CloudJettyRunner> shardToLeaderJetty = new HashMap<String,CloudJettyRunner>();
   
   class CloudJettyRunner {
diff --git a/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java b/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java
index 187b9b7..62e0087 100644
--- a/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java
@@ -19,19 +19,24 @@ package org.apache.solr.cloud;
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
 import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.apache.solr.client.solrj.SolrQuery;
 import org.apache.solr.client.solrj.SolrRequest;
+import org.apache.solr.client.solrj.SolrServer;
 import org.apache.solr.client.solrj.SolrServerException;
+import org.apache.solr.client.solrj.embedded.JettySolrRunner;
 import org.apache.solr.client.solrj.impl.HttpSolrServer;
 import org.apache.solr.client.solrj.request.QueryRequest;
 import org.apache.solr.client.solrj.request.UpdateRequest;
 import org.apache.solr.common.SolrInputDocument;
+import org.apache.solr.common.cloud.ZkStateReader;
 import org.apache.solr.common.params.CollectionParams.CollectionAction;
 import org.apache.solr.common.params.ModifiableSolrParams;
+import org.apache.solr.servlet.SolrDispatchFilter;
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;
@@ -138,8 +143,28 @@ public class SyncSliceTest extends FullSolrCloudTest {
         "to come to the aid of their country.");
     
     // kill the leader - new leader could have all the docs or be missing one
-    chaosMonkey.killJetty(shardToLeaderJetty.get("shard1").jetty);
+    JettySolrRunner leaderJetty = shardToLeaderJetty.get("shard1").jetty;
+    SolrServer leaderClient = shardToLeaderClient.get("shard1");
+    Set<JettySolrRunner> jetties = new HashSet<JettySolrRunner>();
+    for (int i = 0; i < shardCount; i++) {
+      jetties.add(shardToJetty.get("shard1").get(i).jetty);
+    }
+    jetties.remove(leaderJetty);
+    
+    chaosMonkey.killJetty(leaderJetty);
 
+    JettySolrRunner upJetty = jetties.iterator().next();
+    // we are careful to make sure the downed node is no longer in the state,
+    // because on some systems (especially freebsd w/ blackhole enabled), trying
+    // to talk to a downed node causes grief
+    int tries = 0;
+    while (((SolrDispatchFilter) upJetty.getDispatchFilter().getFilter()).getCores().getZkController().getZkStateReader().getCloudState().liveNodesContain(clientToInfo.get(new CloudSolrServerClient(leaderClient)).get(ZkStateReader.NODE_NAME_PROP))) {
+      if (tries++ == 120) {
+        fail("Shard still reported as live in zk");
+      }
+      Thread.sleep(1000);
+    }
+    
     waitForThingsToLevelOut();
     
     checkShardConsistency(false, true);

