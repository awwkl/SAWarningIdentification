GitDiffStart: f24252c1bdceaa65b5e390bcb6c740c5fa7b4c72 | Fri Aug 22 20:25:38 2008 +0000
diff --git a/client/java/solrj/CHANGES.txt b/client/java/solrj/CHANGES.txt
index 7120e15..5057f02 100644
--- a/client/java/solrj/CHANGES.txt
+++ b/client/java/solrj/CHANGES.txt
@@ -45,6 +45,8 @@ Changes in runtime behavior
 
  6. SOLR-430: Added support for reading SpellCheckComponent's responses. (shalin)
 
+ 7. SOLR-718: Support persisting solr.xml through SolrJ (Henri Biestro via shalin)
+
 Bug Fixes
 
 Other Changes
diff --git a/client/java/solrj/src/org/apache/solr/client/solrj/request/CoreAdminRequest.java b/client/java/solrj/src/org/apache/solr/client/solrj/request/CoreAdminRequest.java
index 5b22fff..561c745 100644
--- a/client/java/solrj/src/org/apache/solr/client/solrj/request/CoreAdminRequest.java
+++ b/client/java/solrj/src/org/apache/solr/client/solrj/request/CoreAdminRequest.java
@@ -77,6 +77,33 @@ public class CoreAdminRequest extends SolrRequest
       return params;
     }
   }
+    //a persist core request
+  public static class Persist extends CoreAdminRequest {
+    protected String fileName = null;
+    
+    public Persist() {
+      action = CoreAdminAction.PERSIST;
+    }
+    
+    public void setFileName(String name) {
+      fileName = name;
+    }
+    public String getFileName() {
+      return fileName;
+    }
+    @Override
+    public SolrParams getParams() {
+      if( action == null ) {
+        throw new RuntimeException( "no action specified!" );
+      }
+      ModifiableSolrParams params = new ModifiableSolrParams();
+      params.set( CoreAdminParams.ACTION, action.toString() );
+      if (fileName != null) {
+        params.set( CoreAdminParams.FILE, fileName);
+      }
+      return params;
+    }
+  }
   
   public CoreAdminRequest()
   {
@@ -198,5 +225,12 @@ public class CoreAdminRequest extends SolrRequest
     req.setInstanceDir(instanceDir);
     return req.process( server );
   }
+    
+  public static CoreAdminResponse persist(String fileName, SolrServer server) throws SolrServerException, IOException 
+  {
+    CoreAdminRequest.Persist req = new CoreAdminRequest.Persist();
+    req.setFileName(fileName);
+    return req.process(server);
+  }
 }
 
diff --git a/src/java/org/apache/solr/common/params/CoreAdminParams.java b/src/java/org/apache/solr/common/params/CoreAdminParams.java
index fa7b725..1d85b2f 100644
--- a/src/java/org/apache/solr/common/params/CoreAdminParams.java
+++ b/src/java/org/apache/solr/common/params/CoreAdminParams.java
@@ -46,6 +46,9 @@ public interface CoreAdminParams
   
   /** Specifies a core instance dir. */
   public final static String INSTANCE_DIR = "instanceDir";
+
+  /** If you specify a file, what is its name **/
+  public final static String FILE = "file";
   
   public enum CoreAdminAction {
     STATUS,  
diff --git a/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java b/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
index b24e11d..4b6eafa 100644
--- a/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
+++ b/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
@@ -34,6 +34,7 @@ import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.request.SolrQueryResponse;
 import org.apache.solr.search.SolrIndexSearcher;
 import org.apache.solr.util.RefCounted;
+import org.apache.solr.common.util.StrUtils;
 
 /**
  * @version $Id$
@@ -160,7 +161,18 @@ public abstract class CoreAdminHandler extends RequestHandlerBase
       }
       
       case PERSIST: {
-        do_persist = true;
+        String fileName = params.get( CoreAdminParams.FILE );
+        if (fileName != null) {
+          java.io.File file = new java.io.File(fileName);
+          cores.persistFile(file);
+          rsp.add("saved", file.getAbsolutePath());
+          do_persist = false;
+        }
+        else if (!cores.isPersistent()) {
+          throw new SolrException (SolrException.ErrorCode.FORBIDDEN, "Persistence is not enabled");
+        }
+        else
+          do_persist = true;
         break;
       }
 

