GitDiffStart: 9f1c4d2a0d3d8c80fd60b5624540105c56b3bc50 | Fri Feb 5 23:56:19 2016 -0600
diff --git a/lucene/CHANGES.txt b/lucene/CHANGES.txt
index 5ab1f904..5ec505f 100644
--- a/lucene/CHANGES.txt
+++ b/lucene/CHANGES.txt
@@ -181,6 +181,10 @@ API Changes
 
 Optimizations
 
+* LUCENE-6930: Decouple GeoPointField from NumericType by using a custom
+  and efficient GeoPointTokenStream and TermEnum designed for GeoPoint prefix
+  terms. (Nick Knize)
+
 * LUCENE-6951: Improve GeoPointInPolygonQuery using point orientation based
   line crossing algorithm, and adding result for multi-value docs when least
   1 point satisfies polygon criteria. (Nick Knize)
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/document/GeoPointField.java b/lucene/spatial/src/java/org/apache/lucene/spatial/document/GeoPointField.java
index 6b7aa14..cafa67c 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/document/GeoPointField.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/document/GeoPointField.java
@@ -54,7 +54,7 @@ public final class GeoPointField extends Field {
   public enum TermEncoding {
     /**
      * encodes prefix terms only resulting in a small index and faster queries - use with
-     * {@link GeoPointTokenStream}
+     * {@code GeoPointTokenStream}
      */
     PREFIX,
     /**
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/document/GeoPointTokenStream.java b/lucene/spatial/src/java/org/apache/lucene/spatial/document/GeoPointTokenStream.java
index e22d446..ff97fee 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/document/GeoPointTokenStream.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/document/GeoPointTokenStream.java
@@ -85,7 +85,7 @@ final class GeoPointTokenStream extends TokenStream {
    * <code>precisionStep</code> using the given
    * {@link org.apache.lucene.util.AttributeFactory}.
    * The stream is not yet initialized,
-   * before using set a value using the various set<em>???</em>Value() methods.
+   * before using set a value using the various setGeoCode method.
    */
   public GeoPointTokenStream() {
     super(new GeoPointAttributeFactory(AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY));
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointInBBoxQuery.java b/lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointInBBoxQuery.java
index 874a217..0e6d5bf 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointInBBoxQuery.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointInBBoxQuery.java
@@ -32,7 +32,7 @@ import org.apache.lucene.spatial.util.GeoUtils;
  * passing this initial filter are passed to a final check that verifies whether
  * the decoded lat/lon falls within (or on the boundary) of the query bounding box.
  * The value comparisons are subject to a precision tolerance defined in
- * {@value org.apache.lucene.spatial.util.GeoUtils#TOLERANCE}
+ * {@value org.apache.lucene.spatial.util.GeoEncodingUtils#TOLERANCE}
  *
  * NOTES:
  *    1.  All latitude/longitude values must be in decimal degrees.
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointInPolygonQuery.java b/lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointInPolygonQuery.java
index a9be21e..a3cc061 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointInPolygonQuery.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointInPolygonQuery.java
@@ -16,12 +16,8 @@
  */
 package org.apache.lucene.spatial.search;
 
-import java.io.IOException;
 import java.util.Arrays;
 
-import org.apache.lucene.index.Terms;
-import org.apache.lucene.index.TermsEnum;
-import org.apache.lucene.util.AttributeSource;
 import org.apache.lucene.spatial.document.GeoPointField.TermEncoding;
 import org.apache.lucene.spatial.util.GeoEncodingUtils;
 import org.apache.lucene.spatial.util.GeoRect;
@@ -36,11 +32,7 @@ import org.apache.lucene.spatial.util.GeoUtils;
  * to a secondary filter that verifies whether the decoded lat/lon point falls within
  * (or on the boundary) of the bounding box query. Finally, the remaining candidate
  * term is passed to the final point in polygon check. All value comparisons are subject
-<<<<<<< HEAD:lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointInPolygonQuery.java
- * to the same precision tolerance defined in {@value org.apache.lucene.spatial.util.GeoUtils#TOLERANCE}
-=======
  * to the same precision tolerance defined in {@value GeoEncodingUtils#TOLERANCE}
->>>>>>> LUCENE-6930: Decouples GeoPointField from NumericType by using a custom GeoPointTokenStream and TermEnum designed for GeoPoint prefix terms:lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery.java
  *
  * <p>NOTES:
  *    1.  The polygon coordinates need to be in either clockwise or counter-clockwise order.
@@ -101,8 +93,8 @@ public final class GeoPointInPolygonQuery extends GeoPointInBBoxQueryImpl {
   }
 
   /**
-   * Custom {@link org.apache.lucene.index.TermsEnum} that computes morton hash ranges based on the defined edges of
-   * the provided polygon.
+   * Custom {@code org.apache.lucene.spatial.search.GeoPointMultiTermQuery.CellComparator} that computes morton hash
+   * ranges based on the defined edges of the provided polygon.
    */
   private final class GeoPolygonCellComparator extends CellComparator {
     GeoPolygonCellComparator(GeoPointMultiTermQuery query) {
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointNumericTermsEnum.java b/lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointNumericTermsEnum.java
index 867ea04..adfb6a0 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointNumericTermsEnum.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointNumericTermsEnum.java
@@ -30,7 +30,7 @@ import org.apache.lucene.util.LegacyNumericUtils;
 
 /**
  * Decomposes a given {@link GeoPointMultiTermQuery} into a set of terms that represent the query criteria using
- * {@link import org.apache.lucene.document.GeoPointTokenStream.TermEncoding#NUMERIC} method defined by
+ * {@link org.apache.lucene.spatial.document.GeoPointField.TermEncoding#NUMERIC} method defined by
  * {@link org.apache.lucene.analysis.LegacyNumericTokenStream}. The terms are then enumerated by the
  * {@link GeoPointTermQueryConstantScoreWrapper} and all docs whose GeoPoint fields match the prefix terms or
  * pass the {@link GeoPointMultiTermQuery.CellComparator#postFilter} criteria are returned in the resulting DocIdSet.
diff --git a/lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointPrefixTermsEnum.java b/lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointPrefixTermsEnum.java
index 239e959..d08cd98 100644
--- a/lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointPrefixTermsEnum.java
+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointPrefixTermsEnum.java
@@ -32,7 +32,7 @@ import static org.apache.lucene.spatial.util.GeoEncodingUtils.getPrefixCodedShif
 
 /**
  * Decomposes a given {@link GeoPointMultiTermQuery} into a set of terms that represent the query criteria using
- * {@link GeoPointField.TermEncoding#PREFIX} method defined by
+ * {@link org.apache.lucene.spatial.document.GeoPointField.TermEncoding#PREFIX} method defined by
  * {@link GeoPointField}. The terms are then enumerated by the
  * {@link GeoPointTermQueryConstantScoreWrapper} and all docs whose GeoPoint fields match the prefix terms or pass
  * the {@link GeoPointMultiTermQuery.CellComparator#postFilter} criteria are returned in the

