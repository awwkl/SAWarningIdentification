GitDiffStart: abe013d771956ed3fbf2292c28047cd2ee81faa5 | Thu May 1 09:11:04 2014 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 4450f47..4d0fa23 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -143,6 +143,9 @@ Other Changes
 * SOLR-6025: Replace mentions of CommonsHttpSolrServer with HttpSolrServer and
   StreamingUpdateSolrServer with ConcurrentUpdateSolrServer. (Ahmet Arslan via shalin)
 
+* SOLR-6013: Fix method visibility of Evaluator, refactor DateFormatEvaluator for
+  extensibility. (Aaron LaBella via shalin)
+
 Build
 ---------------------
 
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator.java
index 84bab52..2eef988 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator.java
@@ -52,11 +52,14 @@ import org.apache.solr.util.DateMathParser;
 public class DateFormatEvaluator extends Evaluator {
   
   public static final String DEFAULT_DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
-  Map<DateFormatCacheKey, SimpleDateFormat> cache = new WeakHashMap<>();
-  Map<String, Locale> availableLocales = new HashMap<>();
-  Set<String> availableTimezones = new HashSet<>();
-  
-  class DateFormatCacheKey {
+  protected Map<DateFormatCacheKey, SimpleDateFormat> cache = new WeakHashMap<>();
+  protected Map<String, Locale> availableLocales = new HashMap<>();
+  protected Set<String> availableTimezones = new HashSet<>();
+
+  /**
+   * Used to wrap cache keys containing a Locale, TimeZone and date format String
+   */
+  static protected class DateFormatCacheKey {
     DateFormatCacheKey(Locale l, TimeZone tz, String df) {
       this.locale = l;
       this.timezone = tz;
@@ -99,13 +102,13 @@ public class DateFormatEvaluator extends Evaluator {
       VariableWrapper wrapper = (VariableWrapper) format;
       o = wrapper.resolve();
       format = o.toString();
-    }    
+    }
     Locale locale = Locale.ROOT;
     if(l.size()>2) {
       Object localeObj = l.get(2);
       String localeStr = null;
       if (localeObj  instanceof VariableWrapper) {
-        localeStr = ((VariableWrapper) localeObj).resolve().toString();        
+        localeStr = ((VariableWrapper) localeObj).resolve().toString();
       } else {
         localeStr = localeObj.toString();
       }
@@ -119,7 +122,7 @@ public class DateFormatEvaluator extends Evaluator {
       Object tzObj = l.get(3);
       String tzStr = null;
       if (tzObj  instanceof VariableWrapper) {
-        tzStr = ((VariableWrapper) tzObj).resolve().toString();        
+        tzStr = ((VariableWrapper) tzObj).resolve().toString();
       } else {
         tzStr = tzObj.toString();
       }
@@ -133,30 +136,75 @@ public class DateFormatEvaluator extends Evaluator {
     SimpleDateFormat fmt = getDateFormat(dateFmt, tz, locale);
     Date date = null;
     if (o instanceof VariableWrapper) {
-      VariableWrapper variableWrapper = (VariableWrapper) o;
-      Object variableval = variableWrapper.resolve();
-      if (variableval instanceof Date) {
-        date = (Date) variableval;
-      } else {
-        String s = variableval.toString();
-        try {
-          date = getDateFormat(DEFAULT_DATE_FORMAT, tz, locale).parse(s);
-        } catch (ParseException exp) {
-          wrapAndThrow(SEVERE, exp, "Invalid expression for date");
-        }
-      }
+      date = evaluateWrapper((VariableWrapper) o, locale, tz);
+    } else {
+      date = evaluateString(o.toString(), locale, tz);
+    }
+    return fmt.format(date);
+  }
+
+  /**
+   * NOTE: declared as a method to allow for extensibility
+   *
+   * @lucene.experimental this API is experimental and subject to change
+   * @return the result of evaluating a string
+   */
+  protected Date evaluateWrapper(VariableWrapper variableWrapper, Locale locale, TimeZone tz) {
+    Date date = null;
+    Object variableval = resolveWrapper(variableWrapper,locale,tz);
+    if (variableval instanceof Date) {
+      date = (Date) variableval;
     } else {
-      String datemathfmt = o.toString();
-      datemathfmt = datemathfmt.replaceAll("NOW", "");
+      String s = variableval.toString();
       try {
-        date = getDateMathParser(locale, tz).parseMath(datemathfmt);
-      } catch (ParseException e) {
-        wrapAndThrow(SEVERE, e, "Invalid expression for date");
+        date = getDateFormat(DEFAULT_DATE_FORMAT, tz, locale).parse(s);
+      } catch (ParseException exp) {
+        wrapAndThrow(SEVERE, exp, "Invalid expression for date");
       }
     }
-    return fmt.format(date);
+    return date;
+  }
+
+  /**
+   * NOTE: declared as a method to allow for extensibility
+   * @lucene.experimental
+   * @return the result of evaluating a string
+   */
+  protected Date evaluateString(String datemathfmt, Locale locale, TimeZone tz) {
+    Date date = null;
+    datemathfmt = datemathfmt.replaceAll("NOW", "");
+    try {
+      DateMathParser parser = getDateMathParser(locale, tz);
+      date = parseMathString(parser,datemathfmt);
+    } catch (ParseException e) {
+      wrapAndThrow(SEVERE, e, "Invalid expression for date");
+    }
+    return date;
   }
-  static DateMathParser getDateMathParser(Locale l, TimeZone tz) {
+
+  /**
+   * NOTE: declared as a method to allow for extensibility
+   * @lucene.experimental
+   * @return the result of resolving the variable wrapper
+   */
+  protected Date parseMathString(DateMathParser parser, String datemathfmt) throws ParseException {
+    return parser.parseMath(datemathfmt);
+  }
+
+  /**
+   * NOTE: declared as a method to allow for extensibility
+   * @lucene.experimental
+   * @return the result of resolving the variable wrapper
+   */
+  protected Object resolveWrapper(VariableWrapper variableWrapper, Locale locale, TimeZone tz) {
+    return variableWrapper.resolve();
+  }
+
+  /**
+   * @lucene.experimental
+   * @return a DateMathParser
+   */
+  protected DateMathParser getDateMathParser(Locale l, TimeZone tz) {
     return new DateMathParser(tz, l) {
       @Override
       public Date getNow() {
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/Evaluator.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/Evaluator.java
index 4516895..9255e06 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/Evaluator.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/Evaluator.java
@@ -55,7 +55,7 @@ public abstract class Evaluator {
    * @return the value of the given expression evaluated using the resolver
    */
   public abstract String evaluate(String expression, Context context);
-  
+
   /**
    * Parses a string of expression into separate params. The values are separated by commas. each value will be
    * translated into one of the following:
@@ -70,7 +70,7 @@ public abstract class Evaluator {
    *
    * @return a List of objects which can either be a string, number or a variable wrapper
    */
-  List<Object> parseParams(String expression, VariableResolver vr) {
+  protected List<Object> parseParams(String expression, VariableResolver vr) {
     List<Object> result = new ArrayList<>();
     expression = expression.trim();
     String[] ss = expression.split(",");
@@ -102,16 +102,20 @@ public abstract class Evaluator {
             }
           }
         } else {
-          result.add(new VariableWrapper(ss[i], vr));
+          result.add(getVariableWrapper(ss[i], vr));
         }
       }
     }
     return result;
   }
 
-  static class VariableWrapper {
-    String varName;
-    VariableResolver vr;
+  protected VariableWrapper getVariableWrapper(String s, VariableResolver vr) {
+    return new VariableWrapper(s,vr);
+  }
+
+  static protected class VariableWrapper {
+    public final String varName;
+    public final VariableResolver vr;
 
     public VariableWrapper(String s, VariableResolver vr) {
       this.varName = s;
@@ -120,7 +124,6 @@ public abstract class Evaluator {
 
     public Object resolve() {
       return vr.resolve(varName);
-
     }
 
     @Override
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileListEntityProcessor.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileListEntityProcessor.java
index 2ea0a4f..d67d608 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileListEntityProcessor.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileListEntityProcessor.java
@@ -24,6 +24,8 @@ import java.util.*;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import org.apache.solr.util.DateMathParser;
+
 /**
  * <p>
  * An {@link EntityProcessor} instance which can stream file names found in a given base
@@ -157,7 +159,7 @@ public class FileListEntityProcessor extends EntityProcessorBase {
       String expr = null;
       expr = m.group(1).replaceAll("NOW", "");
       try {
-        return DateFormatEvaluator.getDateMathParser(Locale.ROOT, TimeZone.getDefault()).parseMath(expr);
+        return new DateMathParser(TimeZone.getDefault(), Locale.ROOT).parseMath(expr);
       } catch (ParseException exp) {
         throw new DataImportHandlerException(DataImportHandlerException.SEVERE,
                 "Invalid expression for date", exp);
diff --git a/solr/core/src/java/org/apache/solr/util/DateMathParser.java b/solr/core/src/java/org/apache/solr/util/DateMathParser.java
index fbeb61f..3730e58 100644
--- a/solr/core/src/java/org/apache/solr/util/DateMathParser.java
+++ b/solr/core/src/java/org/apache/solr/util/DateMathParser.java
@@ -207,8 +207,9 @@ public class DateMathParser  {
       c.clear(Calendar.MILLISECOND);
       break;
     default:
-      throw new IllegalStateException
-        ("No logic for rounding value ("+u+") " + unit);
+      throw new IllegalStateException(
+        "No logic for rounding value ("+u+") " + unit
+      );
     }
 
   }
@@ -248,6 +249,20 @@ public class DateMathParser  {
     zone = (null != tz) ? tz : DEFAULT_MATH_TZ;
   }
 
+  /**
+   * @return the time zone
+   */
+  public TimeZone getTimeZone() {
+    return this.zone;
+  }
+
+  /**
+   * @return the locale
+   */
+  public Locale getLocale() {
+    return this.loc;
+  }
+
   /** 
    * Defines this instance's concept of "now".
    * @see #getNow

