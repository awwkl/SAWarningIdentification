GitDiffStart: 3508d03220705b77b7b5c676d5f31ff1e1b37a69 | Wed Nov 16 01:27:26 2011 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 859ba9e..695126d 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -428,6 +428,8 @@ Bug Fixes
 * SOLR-2861: Fix extremely rare race condition on commit that can result
   in a NPE (yonik)
 
+* SOLR-2813: Fix HTTP error codes returned when requests contain strings that
+  can not be parsed as numbers for Trie fields. (Jeff Crump and hossman)
 
  Other Changes
 ----------------------
diff --git a/solr/core/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java b/solr/core/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java
index bf2a3ed..bc05b26 100644
--- a/solr/core/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java
+++ b/solr/core/src/java/org/apache/solr/analysis/TrieTokenizerFactory.java
@@ -89,24 +89,29 @@ final class TrieTokenizer extends Tokenizer {
       this.startOfs = correctOffset(0);
       this.endOfs = correctOffset(len);
       String v = new String(buf, 0, len);
-      switch (type) {
-        case INTEGER:
-          ts.setIntValue(Integer.parseInt(v));
-          break;
-        case FLOAT:
-          ts.setFloatValue(Float.parseFloat(v));
-          break;
-        case LONG:
-          ts.setLongValue(Long.parseLong(v));
-          break;
-        case DOUBLE:
-          ts.setDoubleValue(Double.parseDouble(v));
-          break;
-        case DATE:
-          ts.setLongValue(dateField.parseMath(null, v).getTime());
-          break;
-        default:
-          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Unknown type for trie field");
+      try {
+        switch (type) {
+          case INTEGER:
+            ts.setIntValue(Integer.parseInt(v));
+            break;
+          case FLOAT:
+            ts.setFloatValue(Float.parseFloat(v));
+            break;
+          case LONG:
+            ts.setLongValue(Long.parseLong(v));
+            break;
+          case DOUBLE:
+            ts.setDoubleValue(Double.parseDouble(v));
+            break;
+          case DATE:
+            ts.setLongValue(dateField.parseMath(null, v).getTime());
+            break;
+          default:
+            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Unknown type for trie field");
+        }
+      } catch (NumberFormatException nfe) {
+        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, 
+                                "Invalid Number: " + v);
       }
     } catch (IOException e) {
       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Unable to create TrieIndexTokenizer", e);
diff --git a/solr/core/src/test/org/apache/solr/BasicFunctionalityTest.java b/solr/core/src/test/org/apache/solr/BasicFunctionalityTest.java
index 5cabe21..f0a754c 100644
--- a/solr/core/src/test/org/apache/solr/BasicFunctionalityTest.java
+++ b/solr/core/src/test/org/apache/solr/BasicFunctionalityTest.java
@@ -22,6 +22,8 @@ import java.io.IOException;
 import java.io.StringWriter;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.List;
+import java.util.LinkedList;
 
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -222,6 +224,43 @@ public class BasicFunctionalityTest extends SolrTestCaseJ4 {
             );
   }
 
+
+  @Test
+  public void testClientErrorOnMalformedNumbers() throws Exception {
+
+    final String BAD_VALUE = "NOT_A_NUMBER";
+    ignoreException(BAD_VALUE);
+
+    final List<String> FIELDS = new LinkedList<String>();
+    for (String type : new String[] { "ti", "tf", "td", "tl" }) {
+      FIELDS.add("malformed_" + type);
+    }
+
+    // test that malformed numerics cause client error not server error
+    for (String field : FIELDS) {
+      try {
+        h.update(add( doc("id","100", field, BAD_VALUE)));
+        fail("Didn't encounter an error trying to add a non-number: " + field);
+      } catch (SolrException e) {
+        String msg = e.toString();
+        assertTrue("not an (update) client error on field: " + field +" : "+ msg,
+                   400 <= e.code() && e.code() < 500);
+        assertTrue("(update) client error does not mention bad value: " + msg,
+                   msg.contains(BAD_VALUE));
+      }
+      try {
+        h.query(req("q",field + ":" + BAD_VALUE));
+        fail("Didn't encounter an error trying to query a non-number: " + field);
+      } catch (SolrException e) {
+        String msg = e.toString();
+        assertTrue("not a (search) client error on field: " + field +" : "+ msg,
+                   400 <= e.code() && e.code() < 500);
+        assertTrue("(search) client error does not mention bad value: " + msg,
+                   msg.contains(BAD_VALUE));
+      }
+    }
+  }
+  
   @Test
   public void testRequestHandlerBaseException() {
     final String tmp = "BOO! ignore_exception";

