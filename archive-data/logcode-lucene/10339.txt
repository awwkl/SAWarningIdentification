GitDiffStart: 5b1d05c6abb2973fd0c719eeeeebac4ad95231dc | Wed Dec 5 20:29:40 2012 +0000
diff --git a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase.java b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase.java
index 0a1eb22..61cac9b 100644
--- a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase.java
+++ b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase.java
@@ -94,7 +94,7 @@ public abstract class AbstractSqlEntityProcessorTestCase extends
       for(Map.Entry<String,Object> entry : props.entrySet()) {
         sb.append("  > key=" + entry.getKey() + " / value=" + entry.getValue() + "\n");
       }
-      log.info(sb.toString());
+      log.debug(sb.toString());
     }
   }
   
@@ -420,7 +420,7 @@ public abstract class AbstractSqlEntityProcessorTestCase extends
     // One second in the future ensures a change time after the last import (DIH
     // uses second precision only)
     Timestamp theTime = new Timestamp(System.currentTimeMillis() + 1000);
-    log.info("PEOPLE UPDATE USING TIMESTAMP: "
+    log.debug("PEOPLE UPDATE USING TIMESTAMP: "
         + new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ", Locale.ROOT)
             .format(theTime));
     try {
@@ -491,7 +491,7 @@ public abstract class AbstractSqlEntityProcessorTestCase extends
     // One second in the future ensures a change time after the last import (DIH
     // uses second precision only)
     Timestamp theTime = new Timestamp(System.currentTimeMillis() + 1000);
-    log.info("COUNTRY UPDATE USING TIMESTAMP: "
+    log.debug("COUNTRY UPDATE USING TIMESTAMP: "
         + new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ", Locale.ROOT)
             .format(theTime));
     try {
@@ -639,7 +639,7 @@ public abstract class AbstractSqlEntityProcessorTestCase extends
     sb.append("</document> \n");
     sb.append("</dataConfig> \n");
     String config = sb.toString().replaceAll("[']{2}", "\"");
-    log.info(config);
+    log.debug(config);
     return config;
   }
   @Override
@@ -652,7 +652,7 @@ public abstract class AbstractSqlEntityProcessorTestCase extends
       s.executeUpdate("create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)");
       s.executeUpdate("create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)");
       s.executeUpdate("create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)");
-      log.info("INSERTING DB DATA USING TIMESTAMP: "
+      log.debug("INSERTING DB DATA USING TIMESTAMP: "
           + new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ", Locale.ROOT)
               .format(theTime));
       ps = conn
diff --git a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta.java b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta.java
index f2c7413..24b13b1 100644
--- a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta.java
+++ b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta.java
@@ -39,46 +39,46 @@ public class TestSqlEntityProcessorDelta extends AbstractSqlEntityProcessorTestC
   }
   @Test
   public void testSingleEntity() throws Exception {
-    log.info("testSingleEntity full-import...");
+    log.debug("testSingleEntity full-import...");
     singleEntity(1);
     logPropertiesFile();
     changeStuff();
     int c = calculateDatabaseCalls();
-    log.info("testSingleEntity delta-import (" + c + " database calls expected)...");
+    log.debug("testSingleEntity delta-import (" + c + " database calls expected)...");
     singleEntity(c);
     validateChanges();
   }
   @Test
   public void testWithSimpleTransformer() throws Exception {
-    log.info("testWithSimpleTransformer full-import...");    
+    log.debug("testWithSimpleTransformer full-import...");    
     simpleTransform(1); 
     logPropertiesFile(); 
     changeStuff();
     int c = calculateDatabaseCalls();
     simpleTransform(c);
-    log.info("testWithSimpleTransformer delta-import (" + c + " database calls expected)...");
+    log.debug("testWithSimpleTransformer delta-import (" + c + " database calls expected)...");
     validateChanges(); 
   }
   @Test
   public void testWithComplexTransformer() throws Exception {
-    log.info("testWithComplexTransformer full-import...");     
+    log.debug("testWithComplexTransformer full-import...");     
     complexTransform(1, 0);
     logPropertiesFile();
     changeStuff();
     int c = calculateDatabaseCalls();
-    log.info("testWithComplexTransformer delta-import (" + c + " database calls expected)...");
+    log.debug("testWithComplexTransformer delta-import (" + c + " database calls expected)...");
     complexTransform(c, personChanges.deletedKeys.length);
     validateChanges();  
   }
   @Test
   public void testChildEntities() throws Exception {
-    log.info("testChildEntities full-import...");
+    log.debug("testChildEntities full-import...");
     useParentDeltaQueryParam = random().nextBoolean();
-    log.info("using parent delta? " + useParentDeltaQueryParam);
+    log.debug("using parent delta? " + useParentDeltaQueryParam);
     withChildEntities(false, true);
     logPropertiesFile();
     changeStuff();
-    log.info("testChildEntities delta-import...");
+    log.debug("testChildEntities delta-import...");
     withChildEntities(false, false);
     validateChanges();
   }
@@ -148,13 +148,13 @@ public class TestSqlEntityProcessorDelta extends AbstractSqlEntityProcessorTestC
         sb.append(s).append(" ");
       }
       sb.append(" }");    
-      log.info(sb.toString());
+      log.debug(sb.toString());
     }
   }
   private void personChangesLog()
   {
     if(personChanges!=null) {
-    log.info("person changes { " + personChanges.toString() + " } ");
+    log.debug("person changes { " + personChanges.toString() + " } ");
     }
   }
   @Override

