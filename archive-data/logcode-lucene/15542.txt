GitDiffStart: 18e62ed5038426d7aa0d2a6a55997cd9806e93a7 | Sat Jun 11 21:54:39 2011 +0000
diff --git a/lucene/src/site/build/site/contributions.html b/lucene/src/site/build/site/contributions.html
index 815ee2c..72f4e9c 100644
--- a/lucene/src/site/build/site/contributions.html
+++ b/lucene/src/site/build/site/contributions.html
@@ -218,10 +218,6 @@ document.write("Last Published: " + document.lastModified);
     |start content
     +-->
 <div id="content">
-<div title="Portable Document Format" class="pdflink">
-<a class="dida" href="contributions.pdf"><img alt="PDF -icon" src="skin/images/pdfdoc.gif" class="skin"><br>
-        PDF</a>
-</div>
 <h1>
 	Apache Lucene - Contributions
 		</h1>
diff --git a/lucene/src/site/build/site/contributions.pdf b/lucene/src/site/build/site/contributions.pdf
deleted file mode 100644
index cdc1eaa..0000000
--- a/lucene/src/site/build/site/contributions.pdf
+++ /dev/null
@@ -1,121 +0,0 @@
-Apache Lucene - Contributions
-
-Peter Carlson
-Table of contents
-
-   1 Overview............................................................................................................................ 2
-   2 Lucene Tools...................................................................................................................... 2
-
-     2.1 Luke.............................................................................................................................. 2
-    2.2 LIMO (Lucene Index Monitor).................................................................................... 2
-   3 Lucene Document Converters............................................................................................2
-     3.1 XML Document #1.......................................................................................................2
-     3.2 XML Document #2.......................................................................................................2
-     3.3 PDF Box....................................................................................................................... 3
-    3.4 XPDF - PDF Document Conversion............................................................................ 3
-    3.5 PDFTextStream -- PDF text and metadata extraction.................................................. 3
-    3.6 PJ Classic & PJ Professional - PDF Document Conversion.........................................3
-   4 Miscellaneous..................................................................................................................... 3
-     4.1 Arabic Analyzer for Java..............................................................................................3
-     4.2 Phonetix........................................................................................................................ 3
-    4.3 ejIndex - JBoss MBean for Lucene.............................................................................. 4
-     4.4 JavaCC.......................................................................................................................... 4
-    4.5 LuSQL - Index databases with Lucene........................................................................ 4
-
-                                     Copyright © 2006 The Apache Software Foundation. All rights reserved.
-                                                               Apache Lucene - Contributions
-
-1 Overview
-
-This page lists external Lucene resources. If you have written something that should be
-included, please post all relevant information to one of the mailing lists. Nothing listed here
-is directly supported by the Lucene developers, so if you encounter any problems with any of
-this software, please use the author's contact information to get help.
-
-If you are looking for information on contributing patches or other improvements to Lucene,
-see How To Contribute on the Lucene Wiki.
-
-2 Lucene Tools
-Software that works with Lucene indices.
-
-2.1 Luke
-
-          URL                             http://www.getopt.org/luke/
-          author                          Andrzej Bialecki
-
-2.2 LIMO (Lucene Index Monitor)           http://limo.sf.net/
-                              URL         Julien Nioche
-                             author
-
-3 Lucene Document Converters
-
-Lucene requires information you want to index to be converted into a Document class.
-Here are contributions for various solutions that convert different content types to Lucene's
-Document classes.
-
-3.1 XML Document #1                       http://marc.theaimsgroup.com/?l=lucene-
-                              URL         dev&m=100723333506246&w=2
-
-                             author       Philip Ogren - ogren@mayo.edu
-
-3.2 XML Document #2                       http://www.mail-archive.com/lucene-
-                              URL         user@jakarta.apache.org/msg00346.html
-
-          Copyright © 2006 The Apache Software Foundation. All rights reserved.    Page 2
-                                                             Apache Lucene - Contributions
-
-                 author              Peter Carlson - carlson@bookandhammer.com
-
-3.3 PDF Box
-
-                 URL                 http://www.pdfbox.org/
-                 author              Ben Litchfield - ben@csh.rit.edu
-
-3.4 XPDF - PDF Document Conversion   http://www.foolabs.com/xpdf
-                              URL    N/A
-                             author
-
-3.5 PDFTextStream -- PDF text and metadata extraction
-
-                 URL                 http://snowtide.com
-                 author              N/A
-
-3.6 PJ Classic & PJ Professional - PDF Document Conversion
-
-                 URL                 http://www.etymon.com/
-                 author              N/A
-
-4 Miscellaneous
-
-4.1 Arabic Analyzer for Java         http://savannah.nongnu.org/projects/aramorph
-                              URL    Pierrick Brihaye
-                             author
-                                     http://www.companywebstore.de/tangentum/mirror/
-4.2 Phonetix                         en/products/phonetix/index.html
-                                     tangentum technologies
-                 URL
-
-                 author
-
-                 Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 3
-                                         Apache Lucene - Contributions
-
-4.3 ejIndex - JBoss MBean for Lucene     http://ejindex.sourceforge.net/
-                                         Andy Scholz
-                              URL
-                             author
-
-4.4 JavaCC
-
-            URL                          https://javacc.dev.java.net/
-            author                       Sun Microsystems (java.net)
-
-4.5 LuSQL - Index databases with Lucene
-
-            URL                          http://lab.cisti-icist.nrc-cnrc.gc.ca/cistilabswiki/
-            author                       index.php/LuSql
-
-                                         Glen Newton
-
-            Copyright © 2006 The Apache Software Foundation. All rights reserved.              Page 4
-
\ No newline at end of file
diff --git a/lucene/src/site/build/site/demo.html b/lucene/src/site/build/site/demo.html
index 3d08c54..24251b5 100644
--- a/lucene/src/site/build/site/demo.html
+++ b/lucene/src/site/build/site/demo.html
@@ -218,10 +218,6 @@ document.write("Last Published: " + document.lastModified);
     |start content
     +-->
 <div id="content">
-<div title="Portable Document Format" class="pdflink">
-<a class="dida" href="demo.pdf"><img alt="PDF -icon" src="skin/images/pdfdoc.gif" class="skin"><br>
-        PDF</a>
-</div>
 <h1>
 	Apache Lucene - Building and Installing the Basic Demo
 		</h1>
diff --git a/lucene/src/site/build/site/demo.pdf b/lucene/src/site/build/site/demo.pdf
deleted file mode 100644
index 6868425..0000000
--- a/lucene/src/site/build/site/demo.pdf
+++ /dev/null
@@ -1,54 +0,0 @@
-Apache Lucene - Building and
-Installing the Basic Demo
-
-Andrew C. Oliver
-Table of contents
-
-   1 About this Document......................................................................................................... 2
-   2 About the Demo.................................................................................................................2
-   3 Setting your CLASSPATH................................................................................................ 2
-   4 Indexing Files.....................................................................................................................2
-   5 About the code................................................................................................................... 2
-
-                                     Copyright © 2006 The Apache Software Foundation. All rights reserved.
-                                                                                      Apache Lucene - Building and Installing the Basic Demo
-
-1 About this Document
-
-This document is intended as a "getting started" guide to using and running the Lucene
-demos. It walks you through some basic installation and configuration.
-
-2 About the Demo
-
-The Lucene command-line demo code consists of an application that demonstrates various
-functionalities of Lucene and how you can add Lucene to your applications.
-
-3 Setting your CLASSPATH
-
-First, you should download the latest Lucene distribution and then extract it to a working
-directory.
-You need three JARs: the Lucene JAR, the common analysis JAR, and the Lucene demo
-JAR. You should see the Lucene JAR file in the directory you created when you extracted
-the archive -- it should be named something like lucene-core-{version}.jar.
-You should also see files called lucene-analyzers-common-{version}.jar and
-lucene-demo-{version}.jar.
-Put all three of these files in your Java CLASSPATH.
-
-4 Indexing Files
-
-Once you've gotten this far you're probably itching to go. Let's build an index! Assuming
-you've set your CLASSPATH correctly, just type: java org.apache.lucene.demo.IndexFiles -
-docs {path-to-lucene}/src This will produce a subdirectory called index which will contain
-an index of all of the Lucene source code.
-To search the index type: java org.apache.lucene.demo.SearchFiles You'll be prompted for a
-query. Type in a swear word and press the enter key. You'll see that the Lucene developers
-are very well mannered and get no results. Now try entering the word "string". That should
-return a whole bunch of documents. The results will page at every tenth result and ask you
-whether you want more results.
-
-5 About the code...
-
-read on>>>
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 2
-
\ No newline at end of file
diff --git a/lucene/src/site/build/site/demo2.html b/lucene/src/site/build/site/demo2.html
index a4fdbb2..b369c65 100644
--- a/lucene/src/site/build/site/demo2.html
+++ b/lucene/src/site/build/site/demo2.html
@@ -218,10 +218,6 @@ document.write("Last Published: " + document.lastModified);
     |start content
     +-->
 <div id="content">
-<div title="Portable Document Format" class="pdflink">
-<a class="dida" href="demo2.pdf"><img alt="PDF -icon" src="skin/images/pdfdoc.gif" class="skin"><br>
-        PDF</a>
-</div>
 <h1>
 	Apache Lucene - Basic Demo Sources Walk-through
 		</h1>
diff --git a/lucene/src/site/build/site/demo2.pdf b/lucene/src/site/build/site/demo2.pdf
deleted file mode 100644
index 3c24098..0000000
--- a/lucene/src/site/build/site/demo2.pdf
+++ /dev/null
@@ -1,102 +0,0 @@
-Apache Lucene - Basic Demo Sources
-Walk-through
-
-Andrew C. Oliver
-Table of contents
-
-   1 About the Code.................................................................................................................. 2
-   2 Location of the source....................................................................................................... 2
-   3 IndexFiles........................................................................................................................... 2
-   4 Searching Files................................................................................................................... 3
-
-                                     Copyright © 2006 The Apache Software Foundation. All rights reserved.
-                                                                                           Apache Lucene - Basic Demo Sources Walk-through
-
-1 About the Code
-
-In this section we walk through the sources behind the command-line Lucene demo: where to
-find them, their parts and their function. This section is intended for Java developers wishing
-to understand how to use Lucene in their applications.
-
-2 Location of the source
-
-NOTE: to examine the sources, you need to download and extract a source checkout of
-Lucene: (lucene-{version}-src.zip).
-Relative to the directory created when you extracted Lucene, you should see a directory
-called lucene/contrib/demo/. This is the root for the Lucene demo. Under this
-directory is src/java/org/apache/lucene/demo/. This is where all the Java
-sources for the demo live.
-Within this directory you should see the IndexFiles.java class we executed earlier.
-Bring it up in vi or your editor of choice and let's take a look at it.
-
-3 IndexFiles
-
-As we discussed in the previous walk-through, the IndexFiles class creates a Lucene Index.
-Let's take a look at how it does this.
-The main() method parses the command-line parameters, then in preparation for
-instantiating IndexWriter, opens a Directory and instantiates StandardAnalyzer and
-IndexWriterConfig.
-The value of the -index command-line parameter is the name of the filesystem directory
-where all index information should be stored. If IndexFiles is invoked with a relative
-path given in the -index command-line parameter, or if the -index command-line
-parameter is not given, causing the default relative index path "index" to be used, the index
-path will be created as a subdirectory of the current working directory (if it does not already
-exist). On some platforms, the index path may be created in a different directory (such as the
-user's home directory).
-The -docs command-line parameter value is the location of the directory containing files to
-be indexed.
-The -update command-line parameter tells IndexFiles not to delete the index if it
-already exists. When -update is not given, IndexFiles will first wipe the slate clean
-before indexing any documents.
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 2
-                                                                                           Apache Lucene - Basic Demo Sources Walk-through
-
-Lucene Directorys are used by the IndexWriter to store information in the index.
-In addition to the FSDirectory implementation we are using, there are several other
-Directory subclasses that can write to RAM, to databases, etc.
-
-Lucene Analyzers are processing pipelines that break up text into indexed tokens,
-a.k.a. terms, and optionally perform other operations on these tokens, e.g. downcasing,
-synonym insertion, filtering out unwanted tokens, etc. The Analyzer we are using is
-StandardAnalyzer, which creates tokens using the Word Break rules from the Unicode
-Text Segmentation algorithm specified in Unicode Standard Annex #29; converts tokens to
-lowercase; and then filters out stopwords. Stopwords are common language words such as
-articles (a, an, the, etc.) and other tokens that may have less value for searching. It should be
-noted that there are different rules for every language, and you should use the proper analyzer
-for each. Lucene currently provides Analyzers for a number of different languages (see the
-javadocs under modules/analysis/common/src/java/org/apache/lucene/analysis).
-
-The IndexWriterConfig instance holds all configuration for IndexWriter. For
-example, we set the OpenMode to use here based on the value of the -update command-
-line parameter.
-
-Looking further down in the file, after IndexWriter is instantiated, you should see the
-indexDocs() code. This recursive function crawls the directories and creates Document
-objects. The Document is simply a data object to represent the text content from the file as
-well as its creation time and location. These instances are added to the IndexWriter. If
-the -update command-line parameter is given, the IndexWriter OpenMode will be
-set to OpenMode.CREATE_OR_APPEND, and rather than adding documents to the index,
-the IndexWriter will update them in the index by attempting to find an already-indexed
-document with the same identifier (in our case, the file path serves as the identifier); deleting
-it from the index if it exists; and then adding the new document to the index.
-
-4 Searching Files
-
-The SearchFiles class is quite simple. It primarily collaborates with an IndexSearcher,
-StandardAnalyzer (which is used in the IndexFiles class as well) and a QueryParser. The
-query parser is constructed with an analyzer used to interpret your query text in the same way
-the documents are interpreted: finding word boundaries, downcasing, and removing useless
-words like 'a', 'an' and 'the'. The Query object contains the results from the QueryParser
-which is passed to the searcher. Note that it's also possible to programmatically construct a
-rich Query object without using the query parser. The query parser just enables decoding the
-Lucene query syntax into the corresponding Query object.
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 3
-                                                                                           Apache Lucene - Basic Demo Sources Walk-through
-
-SearchFiles uses the IndexSearcher.search(query,n) method that returns
-TopDocs with max n hits. The results are printed in pages, sorted by score (i.e. relevance).
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 4
-
\ No newline at end of file
diff --git a/lucene/src/site/build/site/fileformats.html b/lucene/src/site/build/site/fileformats.html
index 6c627fb..c246b1c 100644
--- a/lucene/src/site/build/site/fileformats.html
+++ b/lucene/src/site/build/site/fileformats.html
@@ -218,10 +218,6 @@ document.write("Last Published: " + document.lastModified);
     |start content
     +-->
 <div id="content">
-<div title="Portable Document Format" class="pdflink">
-<a class="dida" href="fileformats.pdf"><img alt="PDF -icon" src="skin/images/pdfdoc.gif" class="skin"><br>
-        PDF</a>
-</div>
 <h1>
             Apache Lucene - Index File Formats
         </h1>
diff --git a/lucene/src/site/build/site/fileformats.pdf b/lucene/src/site/build/site/fileformats.pdf
deleted file mode 100644
index 4b7ba8e..0000000
--- a/lucene/src/site/build/site/fileformats.pdf
+++ /dev/null
@@ -1,884 +0,0 @@
-Apache Lucene - Index File Formats
-
-Table of contents
-   1 Index File Formats............................................................................................................. 3
-   2 Definitions.......................................................................................................................... 4
-     2.1 Inverted Indexing.......................................................................................................... 4
-     2.2 Types of Fields............................................................................................................. 4
-     2.3 Segments....................................................................................................................... 4
-     2.4 Document Numbers...................................................................................................... 5
-   3 Overview............................................................................................................................ 5
-   4 File Naming........................................................................................................................6
-   5 Summary of File Extensions..............................................................................................6
-   6 Primitive Types.................................................................................................................. 7
-     6.1 Byte............................................................................................................................... 7
-     6.2 UInt32........................................................................................................................... 7
-     6.3 Uint64............................................................................................................................7
-     6.4 VInt............................................................................................................................... 8
-     6.5 Chars............................................................................................................................. 8
-     6.6 String.............................................................................................................................8
-   7 Compound Types............................................................................................................... 9
-     7.1 Map<String,String>...................................................................................................... 9
-   8 Per-Index Files................................................................................................................... 9
-     8.1 Segments File................................................................................................................9
-     8.2 Lock File.....................................................................................................................11
-     8.3 Deletable File..............................................................................................................11
-     8.4 Compound Files.......................................................................................................... 11
-
-                                     Copyright © 2006 The Apache Software Foundation. All rights reserved.
-                                                                                                             Apache Lucene - Index File Formats
-
-9 Per-Segment Files............................................................................................................ 11
-  9.1 Fields...........................................................................................................................12
-  9.2 Term Dictionary..........................................................................................................13
-  9.3 Frequencies................................................................................................................. 15
-  9.4 Positions...................................................................................................................... 17
-  9.5 Normalization Factors.................................................................................................17
-  9.6 Term Vectors.............................................................................................................. 18
-  9.7 Deleted Documents..................................................................................................... 20
-
-10 Limitations...................................................................................................................... 20
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 2
-Apache Lucene - Index File Formats
-
-1 Index File Formats
-
-This document defines the index file formats used in this version of Lucene. If you are using
-a different version of Lucene, please consult the copy of docs/fileformats.html that
-was distributed with the version you are using.
-
-Apache Lucene is written in Java, but several efforts are underway to write versions of
-Lucene in other programming languages. If these versions are to remain compatible with
-Apache Lucene, then a language-independent definition of the Lucene index format is
-required. This document thus attempts to provide a complete and independent definition of
-the Apache Lucene 4.0 file formats.
-
-As Lucene evolves, this document should evolve. Versions of Lucene in different
-programming languages should endeavor to agree on file formats, and generate new versions
-of this document.
-
-Compatibility notes are provided in this document, describing how file formats have changed
-from prior versions.
-
-In version 2.1, the file format was changed to allow lock-less commits (ie, no more commit
-lock). The change is fully backwards compatible: you can open a pre-2.1 index for searching
-or adding/deleting of docs. When the new segments file is saved (committed), it will be
-written in the new file format (meaning no specific "upgrade" process is needed). But note
-that once a commit has occurred, pre-2.1 Lucene will not be able to read the index.
-
-In version 2.3, the file format was changed to allow segments to share a single set of doc
-store (vectors & stored fields) files. This allows for faster indexing in certain cases. The
-change is fully backwards compatible (in the same way as the lock-less commits change in
-2.1).
-
-In version 2.4, Strings are now written as true UTF-8 byte sequence, not Java's modified
-UTF-8. See issue LUCENE-510 for details.
-
-In version 2.9, an optional opaque Map<String,String> CommitUserData may be passed to
-IndexWriter's commit methods (and later retrieved), which is recorded in the segments_N
-file. See issue LUCENE-1382 for details. Also, diagnostics were added to each segment
-written recording details about why it was written (due to flush, merge; which OS/JRE was
-used; etc.). See issue LUCENE-1654 for details.
-
-In version 3.0, compressed fields are no longer written to the index (they can still be read,
-but on merge the new segment will write them, uncompressed). See issue LUCENE-1960 for
-details.
-
-In version 3.1, segments records the code version that created them. See LUCENE-2720 for
-details. Additionally segments track explicitly whether or not they have term vectors. See
-LUCENE-2811 for details.
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 3
-Apache Lucene - Index File Formats
-
-In version 3.2, numeric fields are written as natively to stored fields file, previously they
-were stored in text format only.
-
-2 Definitions
-
-The fundamental concepts in Lucene are index, document, field and term.
-
-An index contains a sequence of documents.
-
-?? A document is a sequence of fields.
-?? A field is a named sequence of terms.
-?? A term is a string.
-
-The same string in two different fields is considered a different term. Thus terms are
-represented as a pair of strings, the first naming the field, and the second naming text within
-the field.
-
-2.1 Inverted Indexing
-
-The index stores statistics about terms in order to make term-based search more efficient.
-Lucene's index falls into the family of indexes known as an inverted index. This is because
-it can list, for a term, the documents that contain it. This is the inverse of the natural
-relationship, in which documents list terms.
-
-2.2 Types of Fields
-
-In Lucene, fields may be stored, in which case their text is stored in the index literally, in a
-non-inverted manner. Fields that are inverted are called indexed. A field may be both stored
-and indexed.
-
-The text of a field may be tokenized into terms to be indexed, or the text of a field may be
-used literally as a term to be indexed. Most fields are tokenized, but sometimes it is useful for
-certain identifier fields to be indexed literally.
-
-See the Field java docs for more information on Fields.
-
-2.3 Segments
-
-Lucene indexes may be composed of multiple sub-indexes, or segments. Each segment is a
-fully independent index, which could be searched separately. Indexes evolve by:
-1. Creating new segments for newly added documents.
-2. Merging existing segments.
-
-Searches may involve multiple segments and/or multiple indexes, each index potentially
-composed of a set of segments.
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 4
-Apache Lucene - Index File Formats
-
-2.4 Document Numbers
-
-Internally, Lucene refers to documents by an integer document number. The first document
-added to an index is numbered zero, and each subsequent document added gets a number one
-greater than the previous.
-
-Note that a document's number may change, so caution should be taken when storing these
-numbers outside of Lucene. In particular, numbers may change in the following situations:
-
-?? The numbers stored in each segment are unique only within the segment, and must
-    be converted before they can be used in a larger context. The standard technique is
-    to allocate each segment a range of values, based on the range of numbers used in
-    that segment. To convert a document number from a segment to an external value,
-    the segment's base document number is added. To convert an external value back to a
-    segment-specific value, the segment is identified by the range that the external value is
-    in, and the segment's base value is subtracted. For example two five document segments
-    might be combined, so that the first segment has a base value of zero, and the second of
-    five. Document three from the second segment would have an external value of eight.
-
-?? When documents are deleted, gaps are created in the numbering. These are eventually
-    removed as the index evolves through merging. Deleted documents are dropped when
-    segments are merged. A freshly-merged segment thus has no gaps in its numbering.
-
-3 Overview
-
-Each segment index maintains the following:
-
-?? Field names. This contains the set of field names used in the index.
-?? Stored Field values. This contains, for each document, a list of attribute-value pairs,
-
-    where the attributes are field names. These are used to store auxiliary information about
-    the document, such as its title, url, or an identifier to access a database. The set of stored
-    fields are what is returned for each hit when searching. This is keyed by document
-    number.
-?? Term dictionary. A dictionary containing all of the terms used in all of the indexed fields
-    of all of the documents. The dictionary also contains the number of documents which
-    contain the term, and pointers to the term's frequency and proximity data.
-?? Term Frequency data. For each term in the dictionary, the numbers of all the documents
-    that contain that term, and the frequency of the term in that document if omitTf is false.
-?? Term Proximity data. For each term in the dictionary, the positions that the term occurs
-    in each document. Note that this will not exist if all fields in all documents set omitTf to
-    true.
-?? Normalization factors. For each field in each document, a value is stored that is
-    multiplied into the score for hits on that field.
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 5
-                                               Apache Lucene - Index File Formats
-
-?? Term Vectors. For each field in each document, the term vector (sometimes called
-    document vector) may be stored. A term vector consists of term text and term frequency.
-    To add Term Vectors to your index see the Field constructors
-
-?? Deleted documents. An optional file indicating which documents are deleted.
-
-Details on each of these are provided in subsequent sections.
-
-4 File Naming
-
-All files belonging to a segment have the same name with varying extensions. The extensions
-correspond to the different file formats described below. When using the Compound File
-format (default in 1.4 and greater) these files are collapsed into a single .cfs file (see below
-for details)
-
-Typically, all segments in an index are stored in a single directory, although this is not
-required.
-
-As of version 2.1 (lock-less commits), file names are never re-used (there is one exception,
-"segments.gen", see below). That is, when any file is saved to the Directory it is given a
-never before used filename. This is achieved using a simple generations approach. For
-example, the first segments file is segments_1, then segments_2, etc. The generation is a
-sequential long integer represented in alpha-numeric (base 36) form.
-
-5 Summary of File Extensions
-
-The following table summarizes the names and extensions of the files in Lucene:
-
-               Name              Extension     Brief Description
-
-Segments File        segments.gen, segments_N  Stores information about segments
-
-Lock File            write.lock                The Write lock prevents multiple
-                                               IndexWriters from writing to the
-                                               same file.
-
-Compound File        .cfs                      An optional "virtual" file
-                                               consisting of all the other index
-                                               files for systems that frequently
-                                               run out of file handles.
-
-Fields               .fnm                      Stores information about the fields
-
-Field Index          .fdx                      Contains pointers to field data
-
-Field Data           .fdt                      The stored fields for documents
-
-Term Infos           .tis                      Part of the term dictionary, stores
-                                               term info
-
-                     Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 6
-                                                 Apache Lucene - Index File Formats
-
-                 Name                 Extension            Brief Description
-Term Info Index        .tii
-Frequencies            .frq                      The index into the Term Infos file
-
-Positions              .prx                      Contains the list of docs which
-Norms                  .nrm                      contain each term along with
-Term Vector Index      .tvx                      frequency
-Term Vector Documents  .tvd
-Term Vector Fields     .tvf                      Stores position information about
-Deleted Documents      .del                      where a term occurs in the index
-
-                                                 Encodes length and boost factors
-                                                 for docs and fields
-
-                                                 Stores offset into the document
-                                                 data file
-
-                                                 Contains information about each
-                                                 document that has term vectors
-
-                                                 The field level info about term
-                                                 vectors
-
-                                                 Info about what files are deleted
-
-6 Primitive Types
-
-6.1 Byte
-The most primitive type is an eight-bit byte. Files are accessed as sequences of bytes. All
-other data types are defined as sequences of bytes, so file formats are byte-order independent.
-
-6.2 UInt32
-32-bit unsigned integers are written as four bytes, high-order bytes first.
-UInt32 --> <Byte>4
-
-6.3 Uint64
-64-bit unsigned integers are written as eight bytes, high-order bytes first.
-UInt64 --> <Byte>8
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 7
-                                                                  Apache Lucene - Index File Formats
-
-6.4 VInt
-
-A variable-length format for positive integers is defined where the high-order bit of each byte
-indicates whether more bytes remain to be read. The low-order seven bits are appended as
-increasingly more significant bits in the resulting integer value. Thus values from zero to 127
-may be stored in a single byte, values from 128 to 16,383 may be stored in two bytes, and so
-on.
-
-VInt Encoding Example
-
-Value     First byte  Second byte                                  Third byte
-
-0 00000000
-
-1 00000001
-
-2 00000010
-
-...
-
-127 01111111
-
-128       10000000    00000001
-
-129       10000001    00000001
-
-130       10000010    00000001
-
-...
-
-16,383    11111111    01111111
-
-16,384    10000000    10000000                                     00000001
-
-16,385    10000001    10000000                                     00000001
-
-...
-
-This provides compression while still being efficient to decode.
-
-6.5 Chars
-Lucene writes unicode character sequences as UTF-8 encoded bytes.
-
-6.6 String
-
-Lucene writes strings as UTF-8 encoded bytes. First the length, in bytes, is written as a VInt,
-followed by the bytes.
-String --> VInt, Chars
-
-          Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 8
-                                                        Apache Lucene - Index File Formats
-
-7 Compound Types
-
-7.1 Map<String,String>
-In a couple places Lucene stores a Map String->String.
-Map<String,String> --> Count<String,String>Count
-
-8 Per-Index Files
-The files in this section exist one-per-index.
-
-8.1 Segments File
-
-The active segments in the index are stored in the segment info file, segments_N. There may
-be one or more segments_N files in the index; however, the one with the largest generation is
-the active one (when older segments_N files are present it's because they temporarily cannot
-be deleted, or, a writer is in the process of committing, or a custom IndexDeletionPolicy is in
-use). This file lists each segment by name, has details about the separate norms and deletion
-files, and also contains the size of each segment.
-
-As of 2.1, there is also a file segments.gen. This file contains the current generation (the _N
-in segments_N) of the index. This is used only as a fallback in case the current generation
-cannot be accurately determined by directory listing alone (as is the case for some NFS
-clients with time-based directory cache expiraation). This file simply contains an Int32
-version header (SegmentInfos.FORMAT_LOCKLESS = -2), followed by the generation
-recorded as Int64, written twice.
-
-3.1 Segments --> Format, Version, NameCounter, SegCount, <SegVersion, SegName,
-SegSize, DelGen, DocStoreOffset, [DocStoreSegment, DocStoreIsCompoundFile],
-HasSingleNormFile, NumField, NormGenNumField, IsCompoundFile, DeletionCount,
-HasProx, Diagnostics, HasVectors>SegCount, CommitUserData, Checksum
-
-Format, NameCounter, SegCount, SegSize, NumField, DocStoreOffset, DeletionCount -->
-Int32
-
-Version, DelGen, NormGen, Checksum --> Int64
-
-SegVersion, SegName, DocStoreSegment --> String
-
-Diagnostics --> Map<String,String>
-
-IsCompoundFile, HasSingleNormFile, DocStoreIsCompoundFile, HasProx, HasVectors -->
-Int8
-
-CommitUserData --> Map<String,String>
-
-                   Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 9
-                                                                                                                 Apache Lucene - Index File Formats
-
-Format is -9 (SegmentInfos.FORMAT_DIAGNOSTICS).
-
-Version counts how often the index has been changed by adding or deleting documents.
-
-NameCounter is used to generate names for new segment files.
-
-SegVersion is the code version that created the segment.
-
-SegName is the name of the segment, and is used as the file name prefix for all of the files
-that compose the segment's index.
-
-SegSize is the number of documents contained in the segment index.
-
-DelGen is the generation count of the separate deletes file. If this is -1, there are no separate
-deletes. If it is 0, this is a pre-2.1 segment and you must check filesystem for the existence of
-_X.del. Anything above zero means there are separate deletes (_X_N.del).
-
-NumField is the size of the array for NormGen, or -1 if there are no NormGens stored.
-
-NormGen records the generation of the separate norms files. If NumField is -1, there are no
-normGens stored and they are all assumed to be 0 when the segment file was written pre-2.1
-and all assumed to be -1 when the segments file is 2.1 or above. The generation then has the
-same meaning as delGen (above).
-
-IsCompoundFile records whether the segment is written as a compound file or not. If this is
--1, the segment is not a compound file. If it is 1, the segment is a compound file. Else it is 0,
-which means we check filesystem to see if _X.cfs exists.
-
-If HasSingleNormFile is 1, then the field norms are written as a single joined file (with
-extension .nrm); if it is 0 then each field's norms are stored as separate .fN files. See
-"Normalization Factors" below for details.
-
-DocStoreOffset, DocStoreSegment, DocStoreIsCompoundFile: If DocStoreOffset is
--1, this segment has its own doc store (stored fields values and term vectors) files and
-DocStoreSegment and DocStoreIsCompoundFile are not stored. In this case all files for
-stored field values (*.fdt and *.fdx) and term vectors (*.tvf, *.tvd and *.tvx) will be stored
-with this segment. Otherwise, DocStoreSegment is the name of the segment that has the
-shared doc store files; DocStoreIsCompoundFile is 1 if that segment is stored in compound
-file format (as a .cfx file); and DocStoreOffset is the starting document in the shared doc
-store files where this segment's documents begin. In this case, this segment does not store its
-own doc store files but instead shares a single set of these files with other segments.
-
-Checksum contains the CRC32 checksum of all bytes in the segments_N file up until the
-checksum. This is used to verify integrity of the file on opening the index.
-
-DeletionCount records the number of deleted documents in this segment.
-
-HasProx is 1 if any fields in this segment have omitTf set to false; else, it's 0.
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 10
-Apache Lucene - Index File Formats
-
-CommitUserData stores an optional user-supplied opaque Map<String,String> that was
-passed to IndexWriter's commit or prepareCommit, or IndexReader's flush methods.
-
-The Diagnostics Map is privately written by IndexWriter, as a debugging aid, for each
-segment it creates. It includes metadata like the current Lucene version, OS, Java version,
-why the segment was created (merge, flush, addIndexes), etc.
-
-HasVectors is 1 if this segment stores term vectors, else it's 0.
-
-8.2 Lock File
-
-The write lock, which is stored in the index directory by default, is named "write.lock". If
-the lock directory is different from the index directory then the write lock will be named
-"XXXX-write.lock" where XXXX is a unique prefix derived from the full path to the index
-directory. When this file is present, a writer is currently modifying the index (adding or
-removing documents). This lock file ensures that only one writer is modifying the index at a
-time.
-
-8.3 Deletable File
-A writer dynamically computes the files that are deletable, instead, so no file is written.
-
-8.4 Compound Files
-
-Starting with Lucene 1.4 the compound file format became default. This is simply a container
-for all files described in the next section (except for the .del file).
-Compound (.cfs) --> FileCount, <DataOffset, FileName> FileCount , FileData FileCount
-FileCount --> VInt
-DataOffset --> Long
-FileName --> String
-FileData --> raw file data
-The raw file data is the data from the individual files named above.
-Starting with Lucene 2.3, doc store files (stored field values and term vectors) can be shared
-in a single set of files for more than one segment. When compound file is enabled, these
-shared files will be added into a single compound file (same format as above) but with the
-extension .cfx.
-
-9 Per-Segment Files
-The remaining files are all per-segment, and are thus defined by suffix.
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.     Page 11
-Apache Lucene - Index File Formats
-
-9.1 Fields
-
-Field Info
-Field names are stored in the field info file, with suffix .fnm.
-FieldInfos (.fnm) --> FNMVersion,FieldsCount, <FieldName, FieldBits> FieldsCount
-FNMVersion, FieldsCount --> VInt
-FieldName --> String
-FieldBits --> Byte
-?? The low-order bit is one for indexed fields, and zero for non-indexed fields.
-?? The second lowest-order bit is one for fields that have term vectors stored, and zero for
-
-    fields without term vectors.
-?? If the third lowest-order bit is set (0x04), term positions are stored with the term vectors.
-?? If the fourth lowest-order bit is set (0x08), term offsets are stored with the term vectors.
-?? If the fifth lowest-order bit is set (0x10), norms are omitted for the indexed field.
-?? If the sixth lowest-order bit is set (0x20), payloads are stored for the indexed field.
-
-FNMVersion (added in 2.9) is always -2.
-Fields are numbered by their order in this file. Thus field zero is the first field in the file,
-field one the next, and so on. Note that, like document numbers, field numbers are segment
-relative.
-Stored Fields
-Stored fields are represented by two files:
-1. The field index, or .fdx file.
-
-    This contains, for each document, a pointer to its field data, as follows:
-    FieldIndex (.fdx) --> <FieldValuesPosition> SegSize
-    FieldValuesPosition --> Uint64
-    This is used to find the location within the field data file of the fields of a particular
-    document. Because it contains fixed-length data, this file may be easily randomly
-    accessed. The position of document n 's field data is the Uint64 at n*8 in this file.
-2. The field data, or .fdt file.
-    This contains the stored fields of each document, as follows:
-    FieldData (.fdt) --> <DocFieldData> SegSize
-    DocFieldData --> FieldCount, <FieldNum, Bits, Value> FieldCount
-    FieldCount --> VInt
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 12
-                                                                                                                 Apache Lucene - Index File Formats
-
-    FieldNum --> VInt
-    Bits --> Byte
-    ?? low order bit is one for tokenized fields
-    ?? second bit is one for fields containing binary data
-    ?? third bit is one for fields with compression option enabled (if compression is enabled,
-
-         the algorithm used is ZLIB), only available for indexes until Lucene version 2.9.x
-    ?? 4th to 6th bit (mask: 0x7<<3) define the type of a numeric field:
-
-         ?? all bits in mask are cleared if no numeric field at all
-         ?? 1<<3: Value is Int
-         ?? 2<<3: Value is Long
-         ?? 3<<3: Value is Int as Float (as of Float.intBitsToFloat)
-         ?? 4<<3: Value is Long as Double (as of Double.longBitsToDouble)
-
-    Value --> String | BinaryValue | Int | Long (depending on Bits)
-    BinaryValue --> ValueSize, <Byte>^ValueSize
-    ValueSize --> VInt
-
-9.2 Term Dictionary
-
-The term dictionary is represented as two files:
-1. The term infos, or tis file.
-
-    TermInfoFile (.tis)--> TIVersion, TermCount, IndexInterval, SkipInterval,
-    MaxSkipLevels, TermInfos
-    TIVersion --> UInt32
-    TermCount --> UInt64
-    IndexInterval --> UInt32
-    SkipInterval --> UInt32
-    MaxSkipLevels --> UInt32
-    TermInfos --> <TermInfo> TermCount
-    TermInfo --> <Term, DocFreq, FreqDelta, ProxDelta, SkipDelta>
-    Term --> <PrefixLength, Suffix, FieldNum>
-    Suffix --> String
-    PrefixLength, DocFreq, FreqDelta, ProxDelta, SkipDelta
-    --> VInt
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 13
-                                                                                                                 Apache Lucene - Index File Formats
-
-    This file is sorted by Term. Terms are ordered first lexicographically (by UTF16
-    character code) by the term's field name, and within that lexicographically (by UTF16
-    character code) by the term's text.
-
-    TIVersion names the version of the format of this file and is equal to
-    TermInfosWriter.FORMAT_CURRENT.
-
-    Term text prefixes are shared. The PrefixLength is the number of initial characters from
-    the previous term which must be pre-pended to a term's suffix in order to form the term's
-    text. Thus, if the previous term's text was "bone" and the term is "boy", the PrefixLength
-    is two and the suffix is "y".
-
-    FieldNumber determines the term's field, whose name is stored in the .fdt file.
-
-    DocFreq is the count of documents which contain the term.
-
-    FreqDelta determines the position of this term's TermFreqs within the .frq file. In
-    particular, it is the difference between the position of this term's data in that file and the
-    position of the previous term's data (or zero, for the first term in the file).
-
-    ProxDelta determines the position of this term's TermPositions within the .prx file. In
-    particular, it is the difference between the position of this term's data in that file and the
-    position of the previous term's data (or zero, for the first term in the file. For fields with
-    omitTf true, this will be 0 since prox information is not stored.
-
-    SkipDelta determines the position of this term's SkipData within the .frq file. In
-    particular, it is the number of bytes after TermFreqs that the SkipData starts. In other
-    words, it is the length of the TermFreq data. SkipDelta is only stored if DocFreq is not
-    smaller than SkipInterval.
-2. The term info index, or .tii file.
-
-    This contains every IndexInterval th entry from the .tis file, along with its location in the
-    "tis" file. This is designed to be read entirely into memory and used to provide random
-    access to the "tis" file.
-
-    The structure of this file is very similar to the .tis file, with the addition of one item per
-    record, the IndexDelta.
-
-    TermInfoIndex (.tii)--> TIVersion, IndexTermCount, IndexInterval, SkipInterval,
-    MaxSkipLevels, TermIndices
-
-    TIVersion --> UInt32
-
-    IndexTermCount --> UInt64
-
-    IndexInterval --> UInt32
-
-    SkipInterval --> UInt32
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 14
-Apache Lucene - Index File Formats
-
-TermIndices --> <TermInfo, IndexDelta> IndexTermCount
-
-IndexDelta --> VLong
-
-IndexDelta determines the position of this term's TermInfo within the .tis file. In
-particular, it is the difference between the position of this term's entry in that file and the
-position of the previous term's entry.
-
-SkipInterval is the fraction of TermDocs stored in skip tables. It is used to accelerate
-TermDocs.skipTo(int). Larger values result in smaller indexes, greater acceleration, but
-fewer accelerable cases, while smaller values result in bigger indexes, less acceleration
-(in case of a small value for MaxSkipLevels) and more accelerable cases.
-
-MaxSkipLevels is the max. number of skip levels stored for each term in the .frq file. A
-low value results in smaller indexes but less acceleration, a larger value results in slighly
-larger indexes but greater acceleration. See format of .frq file for more information about
-skip levels.
-
-9.3 Frequencies
-
-The .frq file contains the lists of documents which contain each term, along with the
-frequency of the term in that document (if omitTf is false).
-FreqFile (.frq) --> <TermFreqs, SkipData> TermCount
-TermFreqs --> <TermFreq> DocFreq
-TermFreq --> DocDelta[, Freq?]
-SkipData --> <<SkipLevelLength, SkipLevel> NumSkipLevels-1, SkipLevel> <SkipDatum>
-SkipLevel --> <SkipDatum> DocFreq/(SkipInterval^(Level + 1))
-SkipDatum --> DocSkip,PayloadLength?,FreqSkip,ProxSkip,SkipChildLevelPointer?
-DocDelta,Freq,DocSkip,PayloadLength,FreqSkip,ProxSkip --> VInt
-SkipChildLevelPointer --> VLong
-TermFreqs are ordered by term (the term is implicit, from the .tis file).
-TermFreq entries are ordered by increasing document number.
-DocDelta: if omitTf is false, this determines both the document number and the frequency.
-In particular, DocDelta/2 is the difference between this document number and the previous
-document number (or zero when this is the first document in a TermFreqs). When DocDelta
-is odd, the frequency is one. When DocDelta is even, the frequency is read as another VInt. If
-omitTf is true, DocDelta contains the gap (not multiplied by 2) between document numbers
-and no frequency information is stored.
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 15
-                                                                                                                 Apache Lucene - Index File Formats
-
-For example, the TermFreqs for a term which occurs once in document seven and three times
-in document eleven, with omitTf false, would be the following sequence of VInts:
-
-15, 8, 3
-
-If omitTf were true it would be this sequence of VInts instead:
-
-7,4
-
-DocSkip records the document number before every SkipInterval th document in TermFreqs.
-If payloads are disabled for the term's field, then DocSkip represents the difference from the
-previous value in the sequence. If payloads are enabled for the term's field, then DocSkip/2
-represents the difference from the previous value in the sequence. If payloads are enabled
-and DocSkip is odd, then PayloadLength is stored indicating the length of the last payload
-before the SkipIntervalth document in TermPositions. FreqSkip and ProxSkip record the
-position of every SkipInterval th entry in FreqFile and ProxFile, respectively. File positions
-are relative to the start of TermFreqs and Positions, to the previous SkipDatum in the
-sequence.
-
-For example, if DocFreq=35 and SkipInterval=16, then there are two SkipData entries,
-containing the 15 th and 31 st document numbers in TermFreqs. The first FreqSkip names
-the number of bytes after the beginning of TermFreqs that the 16 th SkipDatum starts, and
-the second the number of bytes after that that the 32 nd starts. The first ProxSkip names the
-number of bytes after the beginning of Positions that the 16 th SkipDatum starts, and the
-second the number of bytes after that that the 32 nd starts.
-
-Each term can have multiple skip levels. The amount of skip levels for a term is
-NumSkipLevels = Min(MaxSkipLevels, floor(log(DocFreq/log(SkipInterval)))). The number
-of SkipData entries for a skip level is DocFreq/(SkipInterval^(Level + 1)), whereas the
-lowest skip level is Level=0.
-Example: SkipInterval = 4, MaxSkipLevels = 2, DocFreq = 35. Then skip level 0 has 8
-SkipData entries, containing the 3rd, 7th, 11th, 15th, 19th, 23rd, 27th, and 31st document
-numbers in TermFreqs. Skip level 1 has 2 SkipData entries, containing the 15th and 31st
-document numbers in TermFreqs.
-The SkipData entries on all upper levels > 0 contain a SkipChildLevelPointer referencing the
-corresponding SkipData entry in level-1. In the example has entry 15 on level 1 a pointer to
-entry 15 on level 0 and entry 31 on level 1 a pointer to entry 31 on level 0.
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 16
-Apache Lucene - Index File Formats
-
-9.4 Positions
-
-The .prx file contains the lists of positions that each term occurs at within documents. Note
-that fields with omitTf true do not store anything into this file, and if all fields in the index
-have omitTf true then the .prx file will not exist.
-
-ProxFile (.prx) --> <TermPositions> TermCount
-
-TermPositions --> <Positions> DocFreq
-
-Positions --> <PositionDelta,Payload?> Freq
-
-Payload --> <PayloadLength?,PayloadData>
-
-PositionDelta --> VInt
-
-PayloadLength --> VInt
-
-PayloadData --> bytePayloadLength
-
-TermPositions are ordered by term (the term is implicit, from the .tis file).
-
-Positions entries are ordered by increasing document number (the document number is
-implicit from the .frq file).
-
-PositionDelta is, if payloads are disabled for the term's field, the difference between the
-position of the current occurrence in the document and the previous occurrence (or zero, if
-this is the first occurrence in this document). If payloads are enabled for the term's field, then
-PositionDelta/2 is the difference between the current and the previous position. If payloads
-are enabled and PositionDelta is odd, then PayloadLength is stored, indicating the length of
-the payload at the current term position.
-
-For example, the TermPositions for a term which occurs as the fourth term in one document,
-and as the fifth and ninth term in a subsequent document, would be the following sequence of
-VInts (payloads disabled):
-
-4, 5, 4
-
-PayloadData is metadata associated with the current term position. If PayloadLength is stored
-at the current position, then it indicates the length of this Payload. If PayloadLength is not
-stored, then this Payload has the same length as the Payload at the previous position.
-
-9.5 Normalization Factors                                                                                   Page 17
-There's a single .nrm file containing all norms:
-AllNorms (.nrm) --> NormsHeader,<Norms> NumFieldsWithNorms
-Norms --> <Byte> SegSize
-
-                                     Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Index File Formats
-
-NormsHeader --> 'N','R','M',Version
-
-Version --> Byte
-
-NormsHeader has 4 bytes, last of which is the format version for this file, currently -1.
-
-Each byte encodes a floating point value. Bits 0-2 contain the 3-bit mantissa, and bits 3-8
-contain the 5-bit exponent.
-
-These are converted to an IEEE single float value as follows:
-
-1. If the byte is zero, use a zero float.
-2. Otherwise, set the sign bit of the float to zero;
-3. add 48 to the exponent and use this as the float's exponent;
-4. map the mantissa to the high-order 3 bits of the float's mantissa; and
-5. set the low-order 21 bits of the float's mantissa to zero.
-
-A separate norm file is created when the norm values of an existing segment are modified.
-When field N is modified, a separate norm file .sN is created, to maintain the norm values for
-that field.
-
-Separate norm files are created (when adequate) for both compound and non compound
-segments.
-
-9.6 Term Vectors
-
-Term Vector support is an optional on a field by field basis. It consists of 3 files.
-1. The Document Index or .tvx file.
-
-    For each document, this stores the offset into the document data (.tvd) and field data (.tvf)
-    files.
-    DocumentIndex (.tvx) --> TVXVersion<DocumentPosition,FieldPosition> NumDocs
-    TVXVersion --> Int (TermVectorsReader.CURRENT)
-    DocumentPosition --> UInt64 (offset in the .tvd file)
-    FieldPosition --> UInt64 (offset in the .tvf file)
-2. The Document or .tvd file.
-    This contains, for each document, the number of fields, a list of the fields with term
-    vector info and finally a list of pointers to the field information in the .tvf (Term Vector
-    Fields) file.
-    Document (.tvd) --> TVDVersion<NumFields, FieldNums, FieldPositions> NumDocs
-    TVDVersion --> Int (TermVectorsReader.FORMAT_CURRENT)
-    NumFields --> VInt
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 18
-Apache Lucene - Index File Formats
-
-    FieldNums --> <FieldNumDelta> NumFields
-
-    FieldNumDelta --> VInt
-
-    FieldPositions --> <FieldPositionDelta> NumFields-1
-
-    FieldPositionDelta --> VLong
-
-    The .tvd file is used to map out the fields that have term vectors stored and where the
-    field information is in the .tvf file.
-3. The Field or .tvf file.
-
-    This file contains, for each field that has a term vector stored, a list of the terms, their
-    frequencies and, optionally, position and offest information.
-
-    Field (.tvf) --> TVFVersion<NumTerms, Position/Offset, TermFreqs> NumFields
-
-    TVFVersion --> Int (TermVectorsReader.FORMAT_CURRENT)
-
-    NumTerms --> VInt
-
-    Position/Offset --> Byte
-
-    TermFreqs --> <TermText, TermFreq, Positions?, Offsets?> NumTerms
-
-    TermText --> <PrefixLength, Suffix>
-
-    PrefixLength --> VInt
-
-    Suffix --> String
-
-    TermFreq --> VInt
-
-    Positions --> <VInt>TermFreq
-
-    Offsets --> <VInt, VInt>TermFreq
-
-    Notes:
-
-    ?? Position/Offset byte stores whether this term vector has position or offset information
-         stored.
-
-    ?? Term text prefixes are shared. The PrefixLength is the number of initial characters
-         from the previous term which must be pre-pended to a term's suffix in order to form
-         the term's text. Thus, if the previous term's text was "bone" and the term is "boy", the
-         PrefixLength is two and the suffix is "y".
-
-    ?? Positions are stored as delta encoded VInts. This means we only store the difference
-         of the current position from the last position
-
-    ?? Offsets are stored as delta encoded VInts. The first VInt is the startOffset, the second
-         is the endOffset.
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 19
-Apache Lucene - Index File Formats
-
-9.7 Deleted Documents
-
-The .del file is optional, and only exists when a segment contains deletions.
-Although per-segment, this file is maintained exterior to compound segment files.
-Deletions (.del) --> [Format],ByteCount,BitCount, Bits | DGaps (depending on Format)
-Format,ByteSize,BitCount --> Uint32
-Bits --> <Byte> ByteCount
-DGaps --> <DGap,NonzeroByte> NonzeroBytesCount
-DGap --> VInt
-NonzeroByte --> Byte
-Format is Optional. -1 indicates DGaps. Non-negative value indicates Bits, and that Format is
-excluded.
-ByteCount indicates the number of bytes in Bits. It is typically (SegSize/8)+1.
-BitCount indicates the number of bits that are currently set in Bits.
-Bits contains one bit for each document indexed. When the bit corresponding to a document
-number is set, that document is marked as deleted. Bit ordering is from least to most
-significant. Thus, if Bits contains two bytes, 0x00 and 0x02, then document 9 is marked as
-deleted.
-DGaps represents sparse bit-vectors more efficiently than Bits. It is made of DGaps on
-indexes of nonzero bytes in Bits, and the nonzero bytes themselves. The number of nonzero
-bytes in Bits (NonzeroBytesCount) is not stored.
-For example, if there are 8000 bits and only bits 10,12,32 are set, DGaps would be used:
-(VInt) 1 , (byte) 20 , (VInt) 3 , (Byte) 1
-
-10 Limitations
-
-When referring to term numbers, Lucene's current implementation uses a Java int to hold
-the term index, which means the maximum number of unique terms in any single index
-segment is ~2.1 billion times the term index interval (default 128) = ~274 billion. This is
-technically not a limitation of the index file format, just of Lucene's current implementation.
-Similarly, Lucene uses a Java int to refer to document numbers, and the index file format
-uses an Int32 on-disk to store document numbers. This is a limitation of both the index
-file format and the current implementation. Eventually these should be replaced with either
-UInt64 values, or better yet, VInt values which have no limit.
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 20
-
\ No newline at end of file
diff --git a/lucene/src/site/build/site/gettingstarted.html b/lucene/src/site/build/site/gettingstarted.html
index 66cf752..c83de12 100644
--- a/lucene/src/site/build/site/gettingstarted.html
+++ b/lucene/src/site/build/site/gettingstarted.html
@@ -218,10 +218,6 @@ document.write("Last Published: " + document.lastModified);
     |start content
     +-->
 <div id="content">
-<div title="Portable Document Format" class="pdflink">
-<a class="dida" href="gettingstarted.pdf"><img alt="PDF -icon" src="skin/images/pdfdoc.gif" class="skin"><br>
-        PDF</a>
-</div>
 <h1>
 	Apache Lucene - Getting Started Guide
 		</h1>
diff --git a/lucene/src/site/build/site/gettingstarted.pdf b/lucene/src/site/build/site/gettingstarted.pdf
deleted file mode 100644
index c15be13..0000000
--- a/lucene/src/site/build/site/gettingstarted.pdf
+++ /dev/null
@@ -1,30 +0,0 @@
-Apache Lucene - Getting Started Guide
-
-Andrew C. Oliver
-Table of contents
-
-   1 Getting Started....................................................................................................................2
-
-                                     Copyright © 2006 The Apache Software Foundation. All rights reserved.
-                                                                                                             Apache Lucene - Getting Started Guide
-
-1 Getting Started
-
-This document is intended as a "getting started" guide. It has three audiences: first-time users
-looking to install Apache Lucene in their application; developers looking to modify or base
-the applications they develop on Lucene; and developers looking to become involved in
-and contribute to the development of Lucene. This document is written in tutorial and walk-
-through format. The goal is to help you "get started". It does not go into great depth on some
-of the conceptual or inner details of Lucene.
-Each section listed below builds on one another. More advanced users may wish to skip
-sections.
-?? About the command-line Lucene demo and its usage. This section is intended for anyone
-
-    who wants to use the command-line Lucene demo.
-?? About the sources and implementation for the command-line Lucene demo. This section
-
-    walks through the implementation details (sources) of the command-line Lucene demo.
-    This section is intended for developers.
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 2
-
\ No newline at end of file
diff --git a/lucene/src/site/build/site/index.html b/lucene/src/site/build/site/index.html
index 444acc5..75ca1fc 100644
--- a/lucene/src/site/build/site/index.html
+++ b/lucene/src/site/build/site/index.html
@@ -219,10 +219,6 @@ document.write("Last Published: " + document.lastModified);
     |start content
     +-->
 <div id="content">
-<div title="Portable Document Format" class="pdflink">
-<a class="dida" href="index.pdf"><img alt="PDF -icon" src="skin/images/pdfdoc.gif" class="skin"><br>
-        PDF</a>
-</div>
 <h1>Lucene Java Documentation</h1>
     
 <p>
diff --git a/lucene/src/site/build/site/index.pdf b/lucene/src/site/build/site/index.pdf
deleted file mode 100644
index 7675462..0000000
--- a/lucene/src/site/build/site/index.pdf
+++ /dev/null
@@ -1,8 +0,0 @@
-Lucene Java Documentation
-
-This is the official documentation for Lucene Java Please use the menu on the left to access
-the Javadocs and different documents.
-Additional documentation is available in the Wiki.
-
-                                     Copyright © 2006 The Apache Software Foundation. All rights reserved.
-
\ No newline at end of file
diff --git a/lucene/src/site/build/site/linkmap.html b/lucene/src/site/build/site/linkmap.html
index 2611d0c..cb54615 100644
--- a/lucene/src/site/build/site/linkmap.html
+++ b/lucene/src/site/build/site/linkmap.html
@@ -216,10 +216,6 @@ document.write("Last Published: " + document.lastModified);
     |start content
     +-->
 <div id="content">
-<div title="Portable Document Format" class="pdflink">
-<a class="dida" href="linkmap.pdf"><img alt="PDF -icon" src="skin/images/pdfdoc.gif" class="skin"><br>
-        PDF</a>
-</div>
 <h1>Site Linkmap Table of Contents</h1>
 <p>
           This is a map of the complete site and its structure.
diff --git a/lucene/src/site/build/site/linkmap.pdf b/lucene/src/site/build/site/linkmap.pdf
deleted file mode 100644
index 5f009b9..0000000
--- a/lucene/src/site/build/site/linkmap.pdf
+++ /dev/null
@@ -1,62 +0,0 @@
-Site Linkmap Table of Contents
-
-This is a map of the complete site and its structure.
-?? Lucene ___________________ site
-
-         ?? Documentation ___________________ docs
-
-                  ?? Overview ___________________ overview
-                  ?? Changes ___________________ changes
-
-                           ?? Core ___________________ changes-core
-                           ?? Contrib ___________________ changes-contrib
-                  ?? Javadocs ___________________ javadoc
-
-                           ?? All ___________________ javadoc-all
-                           ?? Core ___________________ javadoc-core
-                           ?? Test Framework ___________________ javadoc-test-framework
-                           ?? Contrib ___________________ javadoc-contrib
-
-                                    ?? Benchmark ___________________ javadoc-contrib-
-                                        benchmark
-
-                                    ?? Demo ___________________ javadoc-contrib-demo
-                                    ?? Highlighter ___________________ javadoc-contrib-
-
-                                        highlighter
-                                    ?? Instantiated ___________________ javadoc-contrib-
-
-                                        instantiated
-                                    ?? Memory ___________________ javadoc-contrib-memory
-                                    ?? Miscellaneous ___________________ javadoc-contrib-
-
-                                        misc
-                                    ?? Queries ___________________ javadoc-contrib-queries
-                                    ?? Query Parser
-
-                                        Framework ___________________ javadoc-contrib-
-                                        queryparser
-                                    ?? Remote ___________________ javadoc-contrib-remote
-                                    ?? Spatial ___________________ javadoc-contrib-spatial
-                                    ?? Spellchecker ___________________ javadoc-contrib-
-                                        spellchecker
-
-                                     Copyright © 2006 The Apache Software Foundation. All rights reserved.
-                                                                                              Site Linkmap Table of Contents
-
-                  ?? Wordnet ___________________ javadoc-contrib-wordnet
-                  ?? XML Query Parser ___________________ javadoc-
-
-                      contrib-xml-query-parser
-?? System Requirements ___________________ systemrequirements
-?? Contributions ___________________ contributions
-?? FAQ ___________________ faq
-?? File Formats ___________________ file-formats
-?? Getting Started ___________________ tutorial
-?? Lucene Contrib ___________________ lucene-contrib
-?? Query Syntax ___________________ query-syntax
-?? Scoring ___________________ scoring
-?? Wiki ___________________ wiki
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 2
-
\ No newline at end of file
diff --git a/lucene/src/site/build/site/lucene-contrib/index.html b/lucene/src/site/build/site/lucene-contrib/index.html
index dee3032..3d34f87 100644
--- a/lucene/src/site/build/site/lucene-contrib/index.html
+++ b/lucene/src/site/build/site/lucene-contrib/index.html
@@ -221,10 +221,6 @@ document.write("Last Published: " + document.lastModified);
     |start content
     +-->
 <div id="content">
-<div title="Portable Document Format" class="pdflink">
-<a class="dida" href="index.pdf"><img alt="PDF -icon" src="../skin/images/pdfdoc.gif" class="skin"><br>
-        PDF</a>
-</div>
 <h1>
 	        Apache Lucene - Lucene Contrib
 		  </h1>
diff --git a/lucene/src/site/build/site/lucene-contrib/index.pdf b/lucene/src/site/build/site/lucene-contrib/index.pdf
deleted file mode 100644
index d6d1465..0000000
--- a/lucene/src/site/build/site/lucene-contrib/index.pdf
+++ /dev/null
@@ -1,117 +0,0 @@
-Apache Lucene - Lucene Contrib
-
-Table of contents
-   1 Lucene Contrib...................................................................................................................2
-     1.1 benchmark..................................................................................................................... 2
-     1.2 demo..............................................................................................................................2
-     1.3 highlighter..................................................................................................................... 2
-     1.4 instantiated.................................................................................................................... 3
-     1.5 memory......................................................................................................................... 3
-     1.6 misc............................................................................................................................... 3
-     1.7 queryparser....................................................................................................................3
-     1.8 queries........................................................................................................................... 3
-     1.9 remote............................................................................................................................3
-     1.10 spatial.......................................................................................................................... 3
-     1.11 spellchecker................................................................................................................. 3
-     1.12 wordnet........................................................................................................................4
-     1.13 xml-query-parser......................................................................................................... 4
-
-                                     Copyright © 2006 The Apache Software Foundation. All rights reserved.
-Apache Lucene - Lucene Contrib
-
-1 Lucene Contrib
-
-The Lucene Java project also contains a workspace, Lucene Contrib (formerly known as the
-Lucene Sandbox), that is open both to all Lucene Java core committers and to developers
-whose commit rights are restricted to the Contrib workspace; these developers are referred
-to as "Contrib committers". The Lucene Contrib workspace hosts the following types of
-packages:
-?? Various third party contributions.
-?? Contributions with third party dependencies - the Lucene Java core distribution has no
-
-    external runtime dependencies.
-?? New ideas that are intended for eventual inclusion into the Lucene Java core.
-
-Users are free to experiment with the components developed in the Contrib workspace,
-but Contrib packages will not necessarily be maintained, particularly in their current state.
-The Lucene Java core backwards compatibility commitments (see http://wiki.apache.org/
-lucene-java/BackwardsCompatibility) do not necessarily extend to the packages in the
-Contrib workspace. See the README.txt file for each Contrib package for details. If the
-README.txt file does not address its backwards compatibility commitments, users should
-assume it does not make any compatibility commitments.
-See Contrib CHANGES for changes included in the current release.
-You can access the current trunk Contrib repository at http://svn.apache.org/repos/asf/lucene/
-dev/trunk/lucene/contrib/.
-
-1.1 benchmark
-
-The benchmark contribution contains tools for benchmarking Lucene using standard, freely
-available corpora.
-See benchmark javadoc
-
-1.2 demo
-
-The demo contrib contains the Lucene demo: IndexFiles and SearchFiles, described under
-Getting Started.
-See demo javadoc
-
-1.3 highlighter
-
-A set of classes for highlighting matching terms in search results.
-See highlighter javadoc
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 2
-                                                        Apache Lucene - Lucene Contrib
-
-1.4 instantiated
-
-RAM-based index that enables much faster searching than RAMDirectory in certain
-situations.
-See instantiated javadoc
-
-1.5 memory
-High-performance single-document main memory index.
-See memory javadoc
-
-1.6 misc
-
-A variety of miscellaneous files, including QueryParsers, and other alternate Lucene class
-implementations and tools.
-See misc javadoc
-
-1.7 queryparser
-
-A new Lucene query parser implementation, which matches the syntax of the core
-QueryParser but offers a more modular architecture to enable customization.
-See queryparser javadoc
-
-1.8 queries
-Additional queries for Lucene.
-See queries javadoc
-
-1.9 remote
-Classes to help use Lucene with RMI.
-See remote javadoc
-
-1.10 spatial
-Classes to help with efficient distance based sorting.
-See spatial javadoc
-
-1.11 spellchecker                                                                                           Page 3
-Provides tools for spellchecking and suggestions with Lucene.
-
-                                     Copyright © 2006 The Apache Software Foundation. All rights reserved.
-                                                                                                                      Apache Lucene - Lucene Contrib
-
-See spellchecker javadoc
-
-1.12 wordnet
-Tools to help utilize wordnet synonyms with Lucene
-See wordnet javadoc
-
-1.13 xml-query-parser
-A QueryParser that can read queries written in an XML format.
-See xml-query-parser javadoc
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 4
-
\ No newline at end of file
diff --git a/lucene/src/site/build/site/queryparsersyntax.html b/lucene/src/site/build/site/queryparsersyntax.html
index a09bfdc..f2c9d69 100644
--- a/lucene/src/site/build/site/queryparsersyntax.html
+++ b/lucene/src/site/build/site/queryparsersyntax.html
@@ -218,10 +218,6 @@ document.write("Last Published: " + document.lastModified);
     |start content
     +-->
 <div id="content">
-<div title="Portable Document Format" class="pdflink">
-<a class="dida" href="queryparsersyntax.pdf"><img alt="PDF -icon" src="skin/images/pdfdoc.gif" class="skin"><br>
-        PDF</a>
-</div>
 <h1>
 	Apache Lucene - Query Parser Syntax
 		</h1>
diff --git a/lucene/src/site/build/site/queryparsersyntax.pdf b/lucene/src/site/build/site/queryparsersyntax.pdf
deleted file mode 100644
index b58bcd4..0000000
--- a/lucene/src/site/build/site/queryparsersyntax.pdf
+++ /dev/null
@@ -1,288 +0,0 @@
-Apache Lucene - Query Parser Syntax
-
-Peter Carlson
-Table of contents
-
-   1 Overview............................................................................................................................ 2
-   2 Terms.................................................................................................................................. 2
-   3 Fields.................................................................................................................................. 3
-   4 Term Modifiers.................................................................................................................. 3
-
-     4.1 Wildcard Searches........................................................................................................ 3
-     4.2 Fuzzy Searches............................................................................................................. 4
-     4.3 Proximity Searches....................................................................................................... 4
-     4.4 Range Searches............................................................................................................. 4
-     4.5 Boosting a Term........................................................................................................... 5
-   5 Boolean Operators..............................................................................................................5
-     5.1 .......................................................................................................................................5
-     5.2 AND.............................................................................................................................. 6
-     5.3 +.................................................................................................................................... 6
-     5.4 NOT.............................................................................................................................. 6
-     5.5 -..................................................................................................................................... 6
-   6 Grouping............................................................................................................................. 7
-   7 Field Grouping................................................................................................................... 7
-   8 Escaping Special Characters.............................................................................................. 7
-
-                                     Copyright © 2006 The Apache Software Foundation. All rights reserved.
-                                                                                                              Apache Lucene - Query Parser Syntax
-
-1 Overview
-
-Although Lucene provides the ability to create your own queries through its API, it also
-provides a rich query language through the Query Parser, a lexer which interprets a string
-into a Lucene Query using JavaCC.
-
-Generally, the query parser syntax may change from release to release. This page describes
-the syntax as of the current release. If you are using a different version of Lucene, please
-consult the copy of docs/queryparsersyntax.html that was distributed with the
-version you are using.
-
-Before choosing to use the provided Query Parser, please consider the following:
-1. If you are programmatically generating a query string and then parsing it with the
-
-    query parser then you should seriously consider building your queries directly with the
-    query API. In other words, the query parser is designed for human-entered text, not for
-    program-generated text.
-2. Untokenized fields are best added directly to queries, and not through the query parser. If
-    a field's values are generated programmatically by the application, then so should query
-    clauses for this field. An analyzer, which the query parser uses, is designed to convert
-    human-entered text to terms. Program-generated values, like dates, keywords, etc., should
-    be consistently program-generated.
-3. In a query form, fields which are general text should use the query parser. All others,
-    such as date ranges, keywords, etc. are better added directly through the query API. A
-    field with a limit set of values, that can be specified with a pull-down menu should not be
-    added to a query string which is subsequently parsed, but rather added as a TermQuery
-    clause.
-
-2 Terms
-
-A query is broken up into terms and operators. There are two types of terms: Single Terms
-and Phrases.
-
-A Single Term is a single word such as "test" or "hello".
-
-A Phrase is a group of words surrounded by double quotes such as "hello dolly".
-
-Multiple terms can be combined together with Boolean operators to form a more complex
-query (see below).
-
-Note: The analyzer used to create the index will be used on the terms and phrases in the
-query string. So it is important to choose an analyzer that will not interfere with the terms
-used in the query string.
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 2
-Apache Lucene - Query Parser Syntax
-
-3 Fields
-
-Lucene supports fielded data. When performing a search you can either specify a field, or use
-the default field. The field names and default field is implementation specific.
-You can search any field by typing the field name followed by a colon ":" and then the term
-you are looking for.
-As an example, let's assume a Lucene index contains two fields, title and text and text is the
-default field. If you want to find the document entitled "The Right Way" which contains the
-text "don't go this way", you can enter:
-
-  title:"The Right Way" AND text:go
-
-or
-
-  title:"Do it right" AND right
-
-Since text is the default field, the field indicator is not required.
-Note: The field is only valid for the term that it directly precedes, so the query
-
-  title:Do it right
-
-Will only find "Do" in the title field. It will find "it" and "right" in the default field (in this
-case the text field).
-
-4 Term Modifiers
-Lucene supports modifying query terms to provide a wide range of searching options.
-
-4.1 Wildcard Searches
-
-Lucene supports single and multiple character wildcard searches within single terms (not
-within phrase queries).
-To perform a single character wildcard search use the "?" symbol.
-To perform a multiple character wildcard search use the "*" symbol.
-The single character wildcard search looks for terms that match that with the single character
-replaced. For example, to search for "text" or "test" you can use the search:
-
-  te?t
-
-Multiple character wildcard searches looks for 0 or more characters. For example, to search
-for test, tests or tester, you can use the search:
-
-  test*
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.                Page 3
-                                                                                                              Apache Lucene - Query Parser Syntax
-
-You can also use the wildcard searches in the middle of a term.
-
-  te*t
-
-Note: You cannot use a * or ? symbol as the first character of a search.
-
-4.2 Fuzzy Searches
-Lucene supports fuzzy searches based on the Levenshtein Distance, or Edit Distance
-algorithm. To do a fuzzy search use the tilde, "~", symbol at the end of a Single word Term.
-For example to search for a term similar in spelling to "roam" use the fuzzy search:
-
-  roam~
-
-This search will find terms like foam and roams.
-Starting with Lucene 1.9 an additional (optional) parameter can specify the required
-similarity. The value is between 0 and 1, with a value closer to 1 only terms with a higher
-similarity will be matched. For example:
-
-  roam~0.8
-
-The default that is used if the parameter is not given is 0.5.
-
-4.3 Proximity Searches
-Lucene supports finding words are a within a specific distance away. To do a proximity
-search use the tilde, "~", symbol at the end of a Phrase. For example to search for a "apache"
-and "jakarta" within 10 words of each other in a document use the search:
-
-  "jakarta apache"~10
-
-4.4 Range Searches
-Range Queries allow one to match documents whose field(s) values are between the lower
-and upper bound specified by the Range Query. Range Queries can be inclusive or exclusive
-of the upper and lower bounds. Sorting is done lexicographically.
-
-  mod_date:[20020101 TO 20030101]
-
-This will find documents whose mod_date fields have values between 20020101 and
-20030101, inclusive. Note that Range Queries are not reserved for date fields. You could also
-use range queries with non-date fields:
-
-  title:{Aida TO Carmen}
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 4
-Apache Lucene - Query Parser Syntax
-
-This will find all documents whose titles are between Aida and Carmen, but not including
-Aida and Carmen.
-
-Inclusive range queries are denoted by square brackets. Exclusive range queries are denoted
-by curly brackets.
-
-4.5 Boosting a Term
-
-Lucene provides the relevance level of matching documents based on the terms found. To
-boost a term use the caret, "^", symbol with a boost factor (a number) at the end of the term
-you are searching. The higher the boost factor, the more relevant the term will be.
-Boosting allows you to control the relevance of a document by boosting its term. For
-example, if you are searching for
-
-  jakarta apache
-
-and you want the term "jakarta" to be more relevant boost it using the ^ symbol along with
-the boost factor next to the term. You would type:
-
-  jakarta^4 apache
-
-This will make documents with the term jakarta appear more relevant. You can also boost
-Phrase Terms as in the example:
-
-  "jakarta apache"^4 "Apache Lucene"
-
-By default, the boost factor is 1. Although the boost factor must be positive, it can be less
-than 1 (e.g. 0.2)
-
-5 Boolean Operators
-
-Boolean operators allow terms to be combined through logic operators. Lucene supports
-AND, "+", OR, NOT and "-" as Boolean operators(Note: Boolean operators must be ALL
-CAPS).
-
-5.1
-
-The OR operator is the default conjunction operator. This means that if there is no Boolean
-operator between two terms, the OR operator is used. The OR operator links two terms and
-finds a matching document if either of the terms exist in a document. This is equivalent to a
-union using sets. The symbol || can be used in place of the word OR.
-To search for documents that contain either "jakarta apache" or just "jakarta" use the query:
-
-  "jakarta apache" jakarta
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 5
-                               Apache Lucene - Query Parser Syntax
-
-or
-
-  "jakarta apache" OR jakarta
-
-5.2 AND
-
-The AND operator matches documents where both terms exist anywhere in the text of a
-single document. This is equivalent to an intersection using sets. The symbol && can be used
-in place of the word AND.
-To search for documents that contain "jakarta apache" and "Apache Lucene" use the query:
-
-  "jakarta apache" AND "Apache Lucene"
-
-5.3 +
-
-The "+" or required operator requires that the term after the "+" symbol exist somewhere in a
-the field of a single document.
-To search for documents that must contain "jakarta" and may contain "lucene" use the query:
-
-  +jakarta lucene
-
-5.4 NOT
-
-The NOT operator excludes documents that contain the term after NOT. This is equivalent to
-a difference using sets. The symbol ! can be used in place of the word NOT.
-To search for documents that contain "jakarta apache" but not "Apache Lucene" use the
-query:
-
-  "jakarta apache" NOT "Apache Lucene"
-
-Note: The NOT operator cannot be used with just one term. For example, the following
-search will return no results:
-
-  NOT "jakarta apache"
-
-5.5 -
-
-The "-" or prohibit operator excludes documents that contain the term after the "-" symbol.
-To search for documents that contain "jakarta apache" but not "Apache Lucene" use the
-query:
-
-  "jakarta apache" -"Apache Lucene"
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 6
-                                                                                                              Apache Lucene - Query Parser Syntax
-
-6 Grouping
-Lucene supports using parentheses to group clauses to form sub queries. This can be very
-useful if you want to control the boolean logic for a query.
-To search for either "jakarta" or "apache" and "website" use the query:
-
-  (jakarta OR apache) AND website
-
-This eliminates any confusion and makes sure you that website must exist and either term
-jakarta or apache may exist.
-
-7 Field Grouping
-Lucene supports using parentheses to group multiple clauses to a single field.
-To search for a title that contains both the word "return" and the phrase "pink panther" use
-the query:
-
-  title:(+return +"pink panther")
-
-8 Escaping Special Characters
-Lucene supports escaping special characters that are part of the query syntax. The current list
-special characters are
-+ - && || ! ( ) { } [ ] ^ " ~ * ? : \
-To escape these character use the \ before the character. For example to search for (1+1):2
-use the query:
-
-  \(1\+1\)\:2
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 7
-
\ No newline at end of file
diff --git a/lucene/src/site/build/site/scoring.html b/lucene/src/site/build/site/scoring.html
index 750fbeb..daba679 100644
--- a/lucene/src/site/build/site/scoring.html
+++ b/lucene/src/site/build/site/scoring.html
@@ -218,10 +218,6 @@ document.write("Last Published: " + document.lastModified);
     |start content
     +-->
 <div id="content">
-<div title="Portable Document Format" class="pdflink">
-<a class="dida" href="scoring.pdf"><img alt="PDF -icon" src="skin/images/pdfdoc.gif" class="skin"><br>
-        PDF</a>
-</div>
 <h1>
 	Apache Lucene - Scoring
 		</h1>
diff --git a/lucene/src/site/build/site/scoring.pdf b/lucene/src/site/build/site/scoring.pdf
deleted file mode 100644
index 5deafd3..0000000
--- a/lucene/src/site/build/site/scoring.pdf
+++ /dev/null
@@ -1,210 +0,0 @@
-Apache Lucene - Scoring
-
-Grant Ingersoll
-Table of contents
-
-   1 Introduction........................................................................................................................ 2
-   2 Scoring................................................................................................................................2
-
-     2.1 Fields and Documents.................................................................................................. 2
-     2.2 Score Boosting..............................................................................................................3
-    2.3 Understanding the Scoring Formula............................................................................. 3
-     2.4 The Big Picture.............................................................................................................3
-     2.5 Query Classes............................................................................................................... 4
-     2.6 Changing Similarity...................................................................................................... 4
-   3 Changing your Scoring -- Expert Level............................................................................ 4
-   4 Appendix............................................................................................................................ 5
-     4.1 Algorithm...................................................................................................................... 5
-
-                                     Copyright © 2006 The Apache Software Foundation. All rights reserved.
-                                                                       Apache Lucene - Scoring
-
-1 Introduction
-
-Lucene scoring is the heart of why we all love Lucene. It is blazingly fast and it hides almost
-all of the complexity from the user. In a nutshell, it works. At least, that is, until it doesn't
-work, or doesn't work as one would expect it to work. Then we are left digging into Lucene
-internals or asking for help on java-user@lucene.apache.org to figure out why a document
-with five of our query terms scores lower than a different document with only one of the
-query terms.
-
-While this document won't answer your specific scoring issues, it will, hopefully, point you
-to the places that can help you figure out the what and why of Lucene scoring.
-
-Lucene scoring uses a combination of the Vector Space Model (VSM) of Information
-Retrieval and the Boolean model to determine how relevant a given Document is to a
-User's query. In general, the idea behind the VSM is the more times a query term appears
-in a document relative to the number of times the term appears in all the documents in the
-collection, the more relevant that document is to the query. It uses the Boolean model to first
-narrow down the documents that need to be scored based on the use of boolean logic in the
-Query specification. Lucene also adds some capabilities and refinements onto this model to
-support boolean and fuzzy searching, but it essentially remains a VSM based system at the
-heart. For some valuable references on VSM and IR in general refer to the Lucene Wiki IR
-references.
-
-The rest of this document will cover Scoring basics and how to change your Similarity.
-Next it will cover ways you can customize the Lucene internals in Changing your Scoring
--- Expert Level which gives details on implementing your own Query class and related
-functionality. Finally, we will finish up with some reference material in the Appendix.
-
-2 Scoring
-
-Scoring is very much dependent on the way documents are indexed, so it is important to
-understand indexing (see Apache Lucene - Getting Started Guide and the Lucene file formats
-before continuing on with this section.) It is also assumed that readers know how to use the
-Searcher.explain(Query query, int doc) functionality, which can go a long way in informing
-why a score is returned.
-
-2.1 Fields and Documents
-
-In Lucene, the objects we are scoring are Documents. A Document is a collection of Fields.
-Each Field has semantics about how it is created and stored (i.e. tokenized, untokenized, raw
-data, compressed, etc.) It is important to note that Lucene scoring works on Fields and then
-combines the results to return Documents. This is important because two Documents with
-the exact same content, but one having the content in two Fields and the other in one Field
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 2
-                                                                       Apache Lucene - Scoring
-
-will return different scores for the same query due to length normalization (assumming the
-DefaultSimilarity on the Fields).
-
-2.2 Score Boosting
-
-Lucene allows influencing search results by "boosting" in more than one level:
-?? Document level boosting - while indexing - by calling document.setBoost() before a
-
-    document is added to the index.
-?? Document's Field level boosting - while indexing - by calling field.setBoost() before
-
-    adding a field to the document (and before adding the document to the index).
-?? Query level boosting - during search, by setting a boost on a query clause, calling
-
-    Query.setBoost().
-
-Indexing time boosts are preprocessed for storage efficiency and written to the directory
-(when writing the document) in a single byte (!) as follows: For each field of a document,
-all boosts of that field (i.e. all boosts under the same field name in that doc) are multiplied.
-The result is multiplied by the boost of the document, and also multiplied by a "field
-length norm" value that represents the length of that field in that doc (so shorter fields are
-automatically boosted up). The result is decoded as a single byte (with some precision loss of
-course) and stored in the directory. The similarity object in effect at indexing computes the
-length-norm of the field.
-
-This composition of 1-byte representation of norms (that is, indexing time multiplication of
-field boosts & doc boost & field-length-norm) is nicely described in Fieldable.setBoost().
-
-Encoding and decoding of the resulted float norm in a single byte are done by the static
-methods of the class Similarity: encodeNorm() and decodeNorm(). Due to loss of precision,
-it is not guaranteed that decode(encode(x)) = x, e.g. decode(encode(0.89)) = 0.75. At scoring
-(search) time, this norm is brought into the score of document as norm(t, d), as shown by the
-formula in Similarity.
-
-2.3 Understanding the Scoring Formula
-
-This scoring formula is described in the Similarity class. Please take the time to study this
-formula, as it contains much of the information about how the basics of Lucene scoring
-work, especially the TermQuery.
-
-2.4 The Big Picture
-
-OK, so the tf-idf formula and the Similarity is great for understanding the basics of Lucene
-scoring, but what really drives Lucene scoring are the use and interactions between the Query
-classes, as created by each application in response to a user's information need.
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 3
-                                                                                                                                Apache Lucene - Scoring
-
-In this regard, Lucene offers a wide variety of Query implementations, most of which are in
-the org.apache.lucene.search package. These implementations can be combined in a wide
-variety of ways to provide complex querying capabilities along with information about where
-matches took place in the document collection. The Query section below highlights some
-of the more important Query classes. For information on the other ones, see the package
-summary. For details on implementing your own Query class, see Changing your Scoring --
-Expert Level below.
-Once a Query has been created and submitted to the IndexSearcher, the scoring process
-begins. (See the Appendix Algorithm section for more notes on the process.) After some
-infrastructure setup, control finally passes to the Weight implementation and its Scorer
-instance. In the case of any type of BooleanQuery, scoring is handled by the BooleanWeight2
-(link goes to ViewVC BooleanQuery java code which contains the BooleanWeight2 inner
-class) or BooleanWeight (link goes to ViewVC BooleanQuery java code, which contains the
-BooleanWeight inner class).
-Assuming the use of the BooleanWeight2, a BooleanScorer2 is created by bringing together
-all of the Scorers from the sub-clauses of the BooleanQuery. When the BooleanScorer2
-is asked to score it delegates its work to an internal Scorer based on the type of clauses in
-the Query. This internal Scorer essentially loops over the sub scorers and sums the scores
-provided by each scorer while factoring in the coord() score.
-
-2.5 Query Classes
-
-For information on the Query Classes, refer to the search package javadocs
-
-2.6 Changing Similarity
-
-One of the ways of changing the scoring characteristics of Lucene is to change the similarity
-factors. For information on how to do this, see the search package javadocs
-
-3 Changing your Scoring -- Expert Level
-
-At a much deeper level, one can affect scoring by implementing their own Query classes
-(and related scoring classes.) To learn more about how to do this, refer to the search package
-javadocs
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 4
-                                                                                   Apache Lucene - Scoring
-
-4 Appendix
-
-4.1 Algorithm
-
-This section is mostly notes on stepping through the Scoring process and serves as fertilizer
-for the earlier sections.
-
-In the typical search application, a Query is passed to the Searcher , beginning the scoring
-process.
-
-Once inside the Searcher, a Collector is used for the scoring and sorting of the search results.
-These important objects are involved in a search:
-1. The Weight object of the Query. The Weight object is an internal representation of the
-
-    Query that allows the Query to be reused by the Searcher.
-2. The Searcher that initiated the call.
-3. A Filter for limiting the result set. Note, the Filter may be null.
-4. A Sort object for specifying how to sort the results if the standard score based sort
-
-    method is not desired.
-
-Assuming we are not sorting (since sorting doesn't effect the raw Lucene score), we
-call one of the search methods of the Searcher, passing in the Weight object created by
-Searcher.createWeight(Query), Filter and the number of results we want. This method returns
-a TopDocs object, which is an internal collection of search results. The Searcher creates a
-TopScoreDocCollector and passes it along with the Weight, Filter to another expert search
-method (for more on the Collector mechanism, see Searcher .) The TopDocCollector uses a
-PriorityQueue to collect the top results for the search.
-
-If a Filter is being used, some initial setup is done to determine which docs to include.
-Otherwise, we ask the Weight for a Scorer for the IndexReader of the current searcher and
-we proceed by calling the score method on the Scorer .
-
-At last, we are actually going to score some documents. The score method takes in the
-Collector (most likely the TopScoreDocCollector or TopFieldCollector) and does its
-business. Of course, here is where things get involved. The Scorer that is returned by the
-Weight object depends on what type of Query was submitted. In most real world applications
-with multiple query terms, the Scorer is going to be a BooleanScorer2 (see the section on
-customizing your scoring for info on changing this.)
-
-Assuming a BooleanScorer2 scorer, we first initialize the Coordinator, which is used to
-apply the coord() factor. We then get a internal Scorer based on the required, optional and
-prohibited parts of the query. Using this internal Scorer, the BooleanScorer2 then proceeds
-into a while loop based on the Scorer#next() method. The next() method advances to the
-next document matching the query. This is an abstract method in the Scorer class and is
-thus overriden by all derived implementations. If you have a simple OR query your internal
-
-            Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 5
-                                                                                                                                Apache Lucene - Scoring
-
-Scorer is most likely a DisjunctionSumScorer, which essentially combines the scorers from
-the sub scorers of the OR'd terms.
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 6
-
\ No newline at end of file
diff --git a/lucene/src/site/build/site/systemrequirements.html b/lucene/src/site/build/site/systemrequirements.html
index 71a9f6f..972d98b 100644
--- a/lucene/src/site/build/site/systemrequirements.html
+++ b/lucene/src/site/build/site/systemrequirements.html
@@ -216,10 +216,6 @@ document.write("Last Published: " + document.lastModified);
     |start content
     +-->
 <div id="content">
-<div title="Portable Document Format" class="pdflink">
-<a class="dida" href="systemrequirements.pdf"><img alt="PDF -icon" src="skin/images/pdfdoc.gif" class="skin"><br>
-        PDF</a>
-</div>
 <h1>Apache Lucene - System Requirements</h1>
 <div id="minitoc-area">
 <ul class="minitoc">
diff --git a/lucene/src/site/build/site/systemrequirements.pdf b/lucene/src/site/build/site/systemrequirements.pdf
deleted file mode 100644
index 6ef49f1..0000000
--- a/lucene/src/site/build/site/systemrequirements.pdf
+++ /dev/null
@@ -1,28 +0,0 @@
-Apache Lucene - System
-Requirements
-
-Grant Ingersoll, Uwe Schindler
-Table of contents
-
-   1 System Requirements......................................................................................................... 2
-
-                                     Copyright © 2006 The Apache Software Foundation. All rights reserved.
-                                                                                                            Apache Lucene - System Requirements
-
-1 System Requirements
-
-Lucene Java has the following minimum requirements:
-?? Java 1.5.x or greater.
-?? ANT 1.7.0 or greater.
-?? JUnit 3.8.2 if you wish to run the unit tests.
-?? CPU, Disk and Memory requirements are based on the many choices made in
-
-    implementing Lucene (document size, number of documents, and number of hits
-    retrieved to name a few.) The benchmarks page has some information related to
-    performance on particular platforms.
-
-Contrib modules may have other requirements, refer to their documentation and build files
-for information.
-
-Copyright © 2006 The Apache Software Foundation. All rights reserved.  Page 2
-
\ No newline at end of file
diff --git a/lucene/src/site/forrest.properties b/lucene/src/site/forrest.properties
index 10da2e1..63f08f9 100755
--- a/lucene/src/site/forrest.properties
+++ b/lucene/src/site/forrest.properties
@@ -123,7 +123,7 @@ project.configfile=${project.home}/src/documentation/conf/cli.xconf
 # a production environment it is recomended that you specify a known working 
 # version.
 # Run "forrest available-plugins" for a list of plug-ins currently available
-project.required.plugins=org.apache.forrest.plugin.output.pdf
+#project.required.plugins=org.apache.forrest.plugin.output.pdf
 
 # Proxy configuration
 # proxy.host=
diff --git a/lucene/src/site/src/documentation/skinconf.xml b/lucene/src/site/src/documentation/skinconf.xml
index 2613097..0ab811c 100755
--- a/lucene/src/site/src/documentation/skinconf.xml
+++ b/lucene/src/site/src/documentation/skinconf.xml
@@ -35,7 +35,7 @@ which will be used to configure the chosen Forrest skin.
   <!-- Disable the print link? If enabled, invalid HTML 4.0.1 -->
   <disable-print-link>true</disable-print-link>  
   <!-- Disable the PDF link? -->
-  <disable-pdf-link>false</disable-pdf-link>
+  <disable-pdf-link>true</disable-pdf-link>
   <!-- Disable the POD link? -->
   <disable-pod-link>true</disable-pod-link>
   <!-- Disable the Text link? FIXME: NOT YET IMPLEMENETED. -->
@@ -364,60 +364,6 @@ which will be used to configure the chosen Forrest skin.
 -->
   </colors>
  
-  <!-- Settings specific to PDF output. -->
-  <pdf>
-    <!-- 
-       Supported page sizes are a0, a1, a2, a3, a4, a5, executive,
-       folio, legal, ledger, letter, quarto, tabloid (default letter).
-       Supported page orientations are portrait, landscape (default
-       portrait).
-       Supported text alignments are left, right, justify (default left).
-    -->
-    <page size="letter" orientation="portrait" text-align="left"/>
-
-    <!-- 
-       Pattern of the page numbering in the footer - Default is "Page x".
-       first occurrence of '1' digit represents the current page number,
-       second occurrence of '1' digit represents the total page number,
-       anything else is considered as the static part of the numbering pattern.
-       Examples : x is the current page number, y the total page number.
-       <page-numbering-format>none</page-numbering-format> Do not displays the page numbering
-       <page-numbering-format>1</page-numbering-format> Displays "x"
-       <page-numbering-format>p1.</page-numbering-format> Displays "px."
-       <page-numbering-format>Page 1/1</page-numbering-format> Displays "Page x/y"
-       <page-numbering-format>(1-1)</page-numbering-format> Displays "(x-y)"
-    -->
-    <page-numbering-format>Page 1</page-numbering-format>
-
-    <!--
-       Margins can be specified for top, bottom, inner, and outer
-       edges. If double-sided="false", the inner edge is always left
-       and the outer is always right. If double-sided="true", the
-       inner edge will be left on odd pages, right on even pages,
-       the outer edge vice versa.
-       Specified below are the default settings.
-    -->
-    <margins double-sided="false">
-      <top>1in</top>
-      <bottom>1in</bottom>
-      <inner>1.25in</inner>
-      <outer>1in</outer>
-    </margins>
-
-    <!--
-      Print the URL text next to all links going outside the file
-    -->
-    <show-external-urls>false</show-external-urls>
-
-    <!--
-      Disable the copyright footer on each page of the PDF.
-      A footer is composed for each page. By default, a "credit" with role=pdf
-      will be used, as explained below. Otherwise a copyright statement
-      will be generated. This latter can be disabled.
-    -->
-    <disable-copyright-footer>false</disable-copyright-footer>
-  </pdf>
-
   <!-- 
     Credits are typically rendered as a set of small clickable
     images in the page footer.

