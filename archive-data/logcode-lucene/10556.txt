GitDiffStart: f8736aaf9ae96734003fcd028de44c3c86fc6f81 | Mon Nov 12 17:33:00 2012 +0000
diff --git a/dev-tools/eclipse/dot.classpath b/dev-tools/eclipse/dot.classpath
index a9e3578..592d38a 100644
--- a/dev-tools/eclipse/dot.classpath
+++ b/dev-tools/eclipse/dot.classpath
@@ -147,6 +147,8 @@
   <classpathentry kind="lib" path="solr/contrib/clustering/lib/simple-xml-2.4.1.jar"/>
   <classpathentry kind="lib" path="solr/contrib/dataimporthandler/lib/activation-1.1.jar"/>
   <classpathentry kind="lib" path="solr/contrib/dataimporthandler/lib/mail-1.4.1.jar"/>
+  <classpathentry kind="lib" path="solr/example/example-DIH/solr/db/lib/derby-10.9.1.0.jar"/>
+  <classpathentry kind="lib" path="solr/example/example-DIH/solr/db/lib/hsqldb-1.8.0.10.jar"/>
   <classpathentry kind="lib" path="solr/contrib/extraction/lib/bcmail-jdk15-1.45.jar"/>
   <classpathentry kind="lib" path="solr/contrib/extraction/lib/bcprov-jdk15-1.45.jar"/>
   <classpathentry kind="lib" path="solr/contrib/extraction/lib/boilerpipe-1.1.0.jar"/>
diff --git a/dev-tools/idea/.idea/libraries/Derby.xml b/dev-tools/idea/.idea/libraries/Derby.xml
new file mode 100644
index 0000000..a23a28e
--- /dev/null
+++ b/dev-tools/idea/.idea/libraries/Derby.xml
@@ -0,0 +1,9 @@
+<component name="libraryTable">
+  <library name="Derby">
+    <CLASSES>
+      <root url="jar://$PROJECT_DIR$/solr/example/example-DIH/solr/db/lib/derby-10.9.1.0.jar!/" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES />
+  </library>
+</component>
\ No newline at end of file
diff --git a/dev-tools/idea/solr/contrib/dataimporthandler/dataimporthandler.iml b/dev-tools/idea/solr/contrib/dataimporthandler/dataimporthandler.iml
index 45f8600..8c737ae 100644
--- a/dev-tools/idea/solr/contrib/dataimporthandler/dataimporthandler.iml
+++ b/dev-tools/idea/solr/contrib/dataimporthandler/dataimporthandler.iml
@@ -14,6 +14,7 @@
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" scope="TEST" name="JUnit" level="project" />
     <orderEntry type="library" scope="TEST" name="HSQLDB" level="project" />
+    <orderEntry type="library" scope="TEST" name="Derby" level="project" />
     <orderEntry type="library" name="Solr core library" level="project" />
     <orderEntry type="library" name="Solrj library" level="project" />
     <orderEntry type="library" name="Solr DIH library" level="project" />
diff --git a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.java b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.java
index 83f43db..6d6a1eb 100644
--- a/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.java
+++ b/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.java
@@ -397,6 +397,12 @@ public class JdbcDataSource extends
   private void closeConnection()  {
     try {
       if (conn != null) {
+        try {
+          //SOLR-2045
+          conn.commit();
+        } catch(Exception ex) {
+          //ignore.
+        }
         conn.close();
       }
     } catch (Exception e) {
diff --git a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase.java b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase.java
index 9f55a81..48063b3 100644
--- a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase.java
+++ b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase.java
@@ -16,6 +16,7 @@ package org.apache.solr.handler.dataimport;
  * the License.
  */
 
+import java.io.OutputStream;
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.PreparedStatement;
@@ -33,6 +34,7 @@ import java.util.regex.Pattern;
 import junit.framework.Assert;
 
 import org.apache.solr.request.LocalSolrQueryRequest;
+import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -40,8 +42,7 @@ import org.junit.BeforeClass;
  * This sets up an in-memory Sql database with a little sample data.
  */
 public abstract class AbstractDIHJdbcTestCase extends AbstractDataImportHandlerTestCase {
-  //Start with "true" so the first test run will populate the data.
-  protected boolean underlyingDataModified = true;
+  protected boolean underlyingDataModified;
   
   protected boolean useSimpleCaches;  
   protected boolean countryEntity;
@@ -52,6 +53,11 @@ public abstract class AbstractDIHJdbcTestCase extends AbstractDataImportHandlerT
   protected boolean countryTransformer;
   protected boolean sportsTransformer;
   
+  protected Database db = Database.RANDOM;
+  private Database dbToUse;
+  
+  public enum Database { RANDOM , DERBY , HSQLDB }
+  
   private static final Pattern totalRequestsPattern = Pattern
       .compile(".str name..Total Requests made to DataSource..(\\d+)..str.");
   
@@ -59,11 +65,20 @@ public abstract class AbstractDIHJdbcTestCase extends AbstractDataImportHandlerT
   public static void beforeClassDihJdbcTest() throws Exception {
     try {
       Class.forName("org.hsqldb.jdbcDriver").newInstance();
+      Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
     } catch (Exception e) {
       throw e;
     }  
     initCore("dataimport-solrconfig.xml", "dataimport-schema.xml");
-  }   
+  } 
+  @AfterClass
+  public static void afterClassDihJdbcTest() throws Exception {
+    try {
+      DriverManager.getConnection("jdbc:derby:;shutdown=true");
+    } catch(SQLException e) {
+      //ignore...we might not even be using derby this time...
+    } 
+  }
   @Before
   public void beforeDihJdbcTest() throws Exception {
     useSimpleCaches = false;  
@@ -75,21 +90,37 @@ public abstract class AbstractDIHJdbcTestCase extends AbstractDataImportHandlerT
     countryTransformer = false;
     sportsTransformer = false;
     
-    clearIndex();
-    assertU(commit());
+    dbToUse = db;
+    if(db==Database.RANDOM) {
+      if(random().nextBoolean()) {
+        dbToUse = Database.DERBY;
+      } else {
+        dbToUse = Database.HSQLDB;
+      }
+    } 
     
-    if(underlyingDataModified) {
-      refreshDatabase();
-    }
-  }  
-  @AfterClass
-  public static void afterClassDihJdbcTest() throws Exception {  
+    clearIndex();
+    assertU(commit());    
+    buildDatabase();
+  } 
+  @After
+  public void afterDihJdbcTest() throws Exception {
     Connection conn = null;
     Statement s = null;
-    try {      
-      conn = DriverManager.getConnection("jdbc:hsqldb:mem:.");    
-      s = conn.createStatement();
-      s.executeUpdate("shutdown");
+    try { 
+      if(dbToUse==Database.DERBY) {
+        try {
+          conn = DriverManager.getConnection("jdbc:derby:memory:derbyDB;drop=true");
+        } catch(SQLException e) {
+          if(!"08006".equals(e.getSQLState())) {
+            throw e;
+          }
+        }              
+      } else if(dbToUse==Database.HSQLDB) {
+        conn = DriverManager.getConnection("jdbc:hsqldb:mem:.");    
+        s = conn.createStatement();
+        s.executeUpdate("shutdown");
+      }
     } catch (SQLException e) {
       throw e;
     } finally {
@@ -97,6 +128,15 @@ public abstract class AbstractDIHJdbcTestCase extends AbstractDataImportHandlerT
       try { conn.close(); } catch(Exception ex) { }
     }
   }
+  private Connection newConnection() throws Exception {
+    if(dbToUse==Database.DERBY) {
+      return DriverManager.getConnection("jdbc:derby:memory:derbyDB;");
+    } else if(dbToUse==Database.HSQLDB) {
+      return DriverManager.getConnection("jdbc:hsqldb:mem:."); 
+    }
+    throw new AssertionError("Invalid database to use: " + dbToUse); 
+  }
+  
   protected void singleEntity(int numToExpect) throws Exception {
     h.query("/dataimport", generateRequest());
     assertQ("There should be 1 document per person in the database: "
@@ -278,23 +318,27 @@ public abstract class AbstractDIHJdbcTestCase extends AbstractDataImportHandlerT
           totalDatabaseRequests() < dbRequestsLessThan);
     }
   }
-  public void refreshDatabase() throws Exception
+  public void buildDatabase() throws Exception
   {    
     underlyingDataModified = false;
     Connection conn = null;
     Statement s = null;
     PreparedStatement ps = null;
     Timestamp theTime = new Timestamp(System.currentTimeMillis() - 10000); //10 seconds ago
-    try {    
-      conn = DriverManager.getConnection("jdbc:hsqldb:mem:.");    
-      s = conn.createStatement();
-      try {
-        s.executeUpdate("drop table countries");
-        s.executeUpdate("drop table people");
-        s.executeUpdate("drop table people_sports"); 
-      } catch(Exception e) {
-        //ignore.  dbs complain when tables do no exist.
+    try { 
+      if(dbToUse==Database.DERBY) {
+        String oldProp = System.getProperty("derby.stream.error.field");
+        System.setProperty("derby.stream.error.field", "DerbyUtil.DEV_NULL");
+        conn = DriverManager.getConnection("jdbc:derby:memory:derbyDB;create=true");
+        if(oldProp!=null) {
+          System.setProperty("derby.stream.error.field", oldProp);    
+        }
+      } else if(dbToUse==Database.HSQLDB) {
+        conn = DriverManager.getConnection("jdbc:hsqldb:mem:.");            
+      } else {
+        throw new AssertionError("Invalid database to use: " + dbToUse);
       }
+      s = conn.createStatement();
       s.executeUpdate("create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)");
       s.executeUpdate("create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)");
       s.executeUpdate("create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)");
@@ -346,7 +390,7 @@ public abstract class AbstractDIHJdbcTestCase extends AbstractDataImportHandlerT
     Statement s = null;
     ResultSet rs = null;
     try {      
-      conn = DriverManager.getConnection("jdbc:hsqldb:mem:.");    
+      conn = newConnection();  
       s = conn.createStatement();
       rs = s.executeQuery(query);
       if(rs.next()) {
@@ -366,7 +410,7 @@ public abstract class AbstractDIHJdbcTestCase extends AbstractDataImportHandlerT
     Statement s = null;
     ResultSet rs = null;
     try {      
-      conn = DriverManager.getConnection("jdbc:hsqldb:mem:.");    
+      conn = newConnection();  
       s = conn.createStatement();
       rs = s.executeQuery(query);
       List<String> results = new ArrayList<String>();
@@ -450,10 +494,10 @@ public abstract class AbstractDIHJdbcTestCase extends AbstractDataImportHandlerT
     //One second in the future ensures a change time after the last import (DIH uses second precision only)
     Timestamp theTime = new Timestamp(System.currentTimeMillis() + 1000);
     try {    
-      conn = DriverManager.getConnection("jdbc:hsqldb:mem:.");    
+      conn = newConnection();
       change = conn.prepareStatement("update people set name=?, last_modified=? where id=?");  
       delete  = conn.prepareStatement("update people set deleted='Y', last_modified=? where id=?");
-      add = conn.prepareStatement("insert into people (id,name,country_code,last_modified) values (?,?,'NEW',?)");
+      add = conn.prepareStatement("insert into people (id,name,country_code,last_modified) values (?,?,'ZZ',?)");
       for(int i=0 ; i<numberToChange ; i++) {
         int tryIndex = random().nextInt(people.length);
         Integer id = (Integer) people[tryIndex][0];
@@ -511,7 +555,7 @@ public abstract class AbstractDIHJdbcTestCase extends AbstractDataImportHandlerT
     // uses second precision only)
     Timestamp theTime = new Timestamp(System.currentTimeMillis() + 1000);
     try {
-      conn = DriverManager.getConnection("jdbc:hsqldb:mem:.");
+      conn = newConnection();
       change = conn
           .prepareStatement("update countries set country_name=?, last_modified=? where code=?");
       for (int i = 0; i < numberToChange; i++) {
@@ -547,86 +591,93 @@ public abstract class AbstractDIHJdbcTestCase extends AbstractDataImportHandlerT
     return lrf.makeRequest("command", "full-import", "dataConfig", generateConfig(), 
         "clean", "true", "commit", "true", "synchronous", "true", "indent", "true");
   }
+  
   protected String generateConfig() {
-     StringBuilder sb = new StringBuilder();
-     sb.append("<dataConfig> \n");
-     sb.append("<dataSource name=''hsqldb'' driver=''org.hsqldb.jdbcDriver'' url=''jdbc:hsqldb:mem:.'' /> \n");
-     sb.append("<document name=''TestSqlEntityProcessor''> \n");     
-     sb.append("<entity name=''People'' ");
-     sb.append("pk=''" + (random().nextBoolean() ? "ID" : "People.ID") + "'' ");
-     sb.append("processor=''SqlEntityProcessor'' dataSource=''hsqldb'' ");
-     sb.append(rootTransformerName !=null ? "transformer=''" + rootTransformerName + "'' " : "");
-     sb.append("query=''SELECT ID, NAME, COUNTRY_CODE FROM PEOPLE WHERE DELETED != 'Y' '' ");
-     sb.append(deltaQueriesPersonTable());
-     sb.append("> \n");
-     
-     sb.append("<field column=''NAME'' name=''NAME_mult_s'' /> \n");
-     sb.append("<field column=''COUNTRY_CODE'' name=''COUNTRY_CODES_mult_s'' /> \n");
-     
-     if(countryEntity) {
-       sb.append("<entity name=''Countries'' ");
-       sb.append("pk=''" + (random().nextBoolean() ? "CODE" : "Countries.CODE") + "'' ");
-       sb.append("dataSource=''hsqldb'' ");
-       sb.append(countryTransformer ? "transformer=''AddAColumnTransformer'' " +
-               "newColumnName=''countryAdded_s'' newColumnValue=''country_added'' " : "");
-       if(countryCached) {
-         sb.append(random().nextBoolean() ? 
-             "processor=''SqlEntityProcessor'' cacheImpl=''SortedMapBackedCache'' " : 
-             "processor=''CachedSqlEntityProcessor'' "
-         );
-         if(useSimpleCaches) {
-           sb.append("query=''SELECT CODE, COUNTRY_NAME FROM COUNTRIES WHERE DELETED != 'Y' AND CODE='${People.COUNTRY_CODE}' ''>\n");
-         } else {
-           sb.append(random().nextBoolean() ? 
-               "cacheKey=''CODE'' cacheLookup=''People.COUNTRY_CODE'' " :
-               "where=''CODE=People.COUNTRY_CODE'' "
-           );
-           sb.append("query=''SELECT CODE, COUNTRY_NAME FROM COUNTRIES'' ");
-           sb.append("> \n");
-         }
-       } else {
-         sb.append("processor=''SqlEntityProcessor'' query=''SELECT CODE, COUNTRY_NAME FROM COUNTRIES WHERE DELETED != 'Y' AND CODE='${People.COUNTRY_CODE}' '' ");
-         sb.append(deltaQueriesCountryTable());         
-         sb.append("> \n");
-       }
-       sb.append("<field column=''CODE'' name=''COUNTRY_CODE_s'' /> \n");
-       sb.append("<field column=''COUNTRY_NAME'' name=''COUNTRY_NAME_s'' /> \n");
-       sb.append("</entity> \n");
-     }
-     if(sportsEntity) {
-       sb.append("<entity name=''Sports'' dataSource=''hsqldb'' "
-           + (sportsTransformer ? "transformer=''AddAColumnTransformer'' " +
-               "newColumnName=''sportsAdded_s'' newColumnValue=''sport_added'' " : ""));
-       if(sportsCached) {
-         sb.append(random().nextBoolean() ? 
-             "processor=''SqlEntityProcessor'' cacheImpl=''SortedMapBackedCache'' " : 
-             "processor=''CachedSqlEntityProcessor'' "
-         );
-          if(useSimpleCaches) {
-           sb.append("query=''SELECT ID, SPORT_NAME FROM PEOPLE_SPORTS WHERE DELETED != 'Y' AND PERSON_ID='${People.ID}' ORDER BY ID'' ");
-         } else {
-           sb.append(random().nextBoolean() ? 
-               "cacheKey=''PERSON_ID'' cacheLookup=''People.ID'' " : 
-               "where=''PERSON_ID=People.ID'' " 
-           );
-           sb.append("query=''SELECT ID, PERSON_ID, SPORT_NAME FROM PEOPLE_SPORTS ORDER BY ID'' ");
-         }
-       } else {
-         sb.append("processor=''SqlEntityProcessor'' query=''SELECT ID, SPORT_NAME FROM PEOPLE_SPORTS WHERE DELETED != 'Y' AND PERSON_ID='${People.ID}' ORDER BY ID'' ");
-       }
-       sb.append("> \n");
-       sb.append("<field column=''SPORT_NAME'' name=''SPORT_NAME_mult_s'' /> \n");
-       sb.append("<field column=''id'' name=''SPORT_ID_mult_s'' /> \n");
-       sb.append("</entity> \n");
-     }     
-     
-     sb.append("</entity> \n");
-     sb.append("</document> \n");
-     sb.append("</dataConfig> \n");
-     String config = sb.toString().replaceAll("[']{2}", "\"");
-     log.debug(config);
-     return config;
-   } 
+    String ds = null;
+    if (dbToUse == Database.DERBY) {
+      ds = "derby";
+    } else if (dbToUse == Database.HSQLDB) {
+      ds = "hsqldb";
+    } else {
+      throw new AssertionError("Invalid database to use: " + dbToUse);
+    }
+    StringBuilder sb = new StringBuilder();
+    sb.append("<dataConfig> \n");
+    sb.append("<dataSource name=''hsqldb'' driver=''org.hsqldb.jdbcDriver'' url=''jdbc:hsqldb:mem:.'' /> \n");
+    sb.append("<dataSource name=''derby'' driver=''org.apache.derby.jdbc.EmbeddedDriver'' url=''jdbc:derby:memory:derbyDB;'' /> \n");
+    sb.append("<document name=''TestSqlEntityProcessor''> \n");
+    sb.append("<entity name=''People'' ");
+    sb.append("pk=''" + (random().nextBoolean() ? "ID" : "People.ID") + "'' ");
+    sb.append("processor=''SqlEntityProcessor'' ");
+    sb.append("dataSource=''" + ds + "'' ");
+    sb.append(rootTransformerName != null ? "transformer=''" + rootTransformerName + "'' " : "");
+    sb.append("query=''SELECT ID, NAME, COUNTRY_CODE FROM PEOPLE WHERE DELETED != 'Y' '' ");
+    sb.append(deltaQueriesPersonTable());
+    sb.append("> \n");
+    
+    sb.append("<field column=''NAME'' name=''NAME_mult_s'' /> \n");
+    sb.append("<field column=''COUNTRY_CODE'' name=''COUNTRY_CODES_mult_s'' /> \n");
+    
+    if (countryEntity) {
+      sb.append("<entity name=''Countries'' ");
+      sb.append("pk=''" + (random().nextBoolean() ? "CODE" : "Countries.CODE")
+          + "'' ");
+      sb.append("dataSource=''" + ds + "'' ");
+      sb.append(countryTransformer ? "transformer=''AddAColumnTransformer'' "
+          + "newColumnName=''countryAdded_s'' newColumnValue=''country_added'' "
+          : "");
+      if (countryCached) {
+        sb.append(random().nextBoolean() ? "processor=''SqlEntityProcessor'' cacheImpl=''SortedMapBackedCache'' "
+            : "processor=''CachedSqlEntityProcessor'' ");
+        if (useSimpleCaches) {
+          sb.append("query=''SELECT CODE, COUNTRY_NAME FROM COUNTRIES WHERE DELETED != 'Y' AND CODE='${People.COUNTRY_CODE}' ''>\n");
+        } else {
+          sb.append(random().nextBoolean() ? "cacheKey=''CODE'' cacheLookup=''People.COUNTRY_CODE'' "
+              : "where=''CODE=People.COUNTRY_CODE'' ");
+          sb.append("query=''SELECT CODE, COUNTRY_NAME FROM COUNTRIES'' ");
+          sb.append("> \n");
+        }
+      } else {
+        sb.append("processor=''SqlEntityProcessor'' query=''SELECT CODE, COUNTRY_NAME FROM COUNTRIES WHERE DELETED != 'Y' AND CODE='${People.COUNTRY_CODE}' '' ");
+        sb.append(deltaQueriesCountryTable());
+        sb.append("> \n");
+      }
+      sb.append("<field column=''CODE'' name=''COUNTRY_CODE_s'' /> \n");
+      sb.append("<field column=''COUNTRY_NAME'' name=''COUNTRY_NAME_s'' /> \n");
+      sb.append("</entity> \n");
+    }
+    if (sportsEntity) {
+      sb.append("<entity name=''Sports'' ");
+      sb.append("dataSource=''" + ds + "'' ");
+      sb.append(sportsTransformer ? "transformer=''AddAColumnTransformer'' "
+              + "newColumnName=''sportsAdded_s'' newColumnValue=''sport_added'' "
+              : "");
+      if (sportsCached) {
+        sb.append(random().nextBoolean() ? "processor=''SqlEntityProcessor'' cacheImpl=''SortedMapBackedCache'' "
+            : "processor=''CachedSqlEntityProcessor'' ");
+        if (useSimpleCaches) {
+          sb.append("query=''SELECT ID, SPORT_NAME FROM PEOPLE_SPORTS WHERE DELETED != 'Y' AND PERSON_ID=${People.ID} ORDER BY ID'' ");
+        } else {
+          sb.append(random().nextBoolean() ? "cacheKey=''PERSON_ID'' cacheLookup=''People.ID'' "
+              : "where=''PERSON_ID=People.ID'' ");
+          sb.append("query=''SELECT ID, PERSON_ID, SPORT_NAME FROM PEOPLE_SPORTS ORDER BY ID'' ");
+        }
+      } else {
+        sb.append("processor=''SqlEntityProcessor'' query=''SELECT ID, SPORT_NAME FROM PEOPLE_SPORTS WHERE DELETED != 'Y' AND PERSON_ID=${People.ID} ORDER BY ID'' ");
+      }
+      sb.append("> \n");
+      sb.append("<field column=''SPORT_NAME'' name=''SPORT_NAME_mult_s'' /> \n");
+      sb.append("<field column=''id'' name=''SPORT_ID_mult_s'' /> \n");
+      sb.append("</entity> \n");
+    }
+    
+    sb.append("</entity> \n");
+    sb.append("</document> \n");
+    sb.append("</dataConfig> \n");
+    String config = sb.toString().replaceAll("[']{2}", "\"");
+    log.debug(config);
+    return config;
+  }
   
   public static final String[][] countries = {
     {"NA",   "Namibia"},
@@ -692,5 +743,10 @@ public abstract class AbstractDIHJdbcTestCase extends AbstractDataImportHandlerT
     {1800, 18, "White Water Rafting"},
     {1900, 19, "Water skiing"},
     {2000, 20, "Windsurfing"}
-  }; 
+  };
+  public static class DerbyUtil {
+    public static final OutputStream DEV_NULL = new OutputStream() {
+        public void write(int b) {}
+    };
 }
+}
\ No newline at end of file
diff --git a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessor.java b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessor.java
index 1e4720f..550b58c 100644
--- a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessor.java
+++ b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessor.java
@@ -21,7 +21,7 @@ import org.junit.Test;
  */
 
 /**
- * Test with various combinations of parameters, child entites, caches, transformers.
+ * Test with various combinations of parameters, child entities, caches, transformers.
  */
 public class TestSqlEntityProcessor extends AbstractDIHJdbcTestCase { 
    
diff --git a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta.java b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta.java
index a9249cb..cd40813 100644
--- a/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta.java
+++ b/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta.java
@@ -7,7 +7,6 @@ import java.util.Locale;
 import org.apache.solr.request.LocalSolrQueryRequest;
 import org.junit.Assume;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 /*
diff --git a/solr/example/example-DIH/ivy.xml b/solr/example/example-DIH/ivy.xml
index 5d3f39c..9a79eee 100644
--- a/solr/example/example-DIH/ivy.xml
+++ b/solr/example/example-DIH/ivy.xml
@@ -21,6 +21,7 @@
 
     <dependencies>
       <dependency org="hsqldb" name="hsqldb" rev="1.8.0.10" transitive="false"/>
+      <dependency org="org.apache.derby" name="derby" rev="10.9.1.0" transitive="false"/>
       <exclude org="*" ext="*" matcher="regexp" type="${ivy.exclude.types}"/> 
     </dependencies>
 </ivy-module>
diff --git a/solr/licenses/derby-10.9.1.0.jar.sha1 b/solr/licenses/derby-10.9.1.0.jar.sha1
new file mode 100644
index 0000000..2a69e42
--- /dev/null
+++ b/solr/licenses/derby-10.9.1.0.jar.sha1
@@ -0,0 +1 @@
+4538cf5564ab3c262eec65c55fdb13965625589c
diff --git a/solr/licenses/derby-LICENSE-ASL.txt b/solr/licenses/derby-LICENSE-ASL.txt
new file mode 100644
index 0000000..d645695
--- /dev/null
+++ b/solr/licenses/derby-LICENSE-ASL.txt
@@ -0,0 +1,202 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
diff --git a/solr/licenses/derby-NOTICE.txt b/solr/licenses/derby-NOTICE.txt
new file mode 100644
index 0000000..f22595f
--- /dev/null
+++ b/solr/licenses/derby-NOTICE.txt
@@ -0,0 +1,182 @@
+=========================================================================
+==  NOTICE file corresponding to section 4(d) of the Apache License,
+==  Version 2.0, in this case for the Apache Derby distribution.
+==
+==  DO NOT EDIT THIS FILE DIRECTLY. IT IS GENERATED
+==  BY THE buildnotice TARGET IN THE TOP LEVEL build.xml FILE.
+==
+=========================================================================
+
+Apache Derby
+Copyright 2004-2012 The Apache Software Foundation
+
+This product includes software developed by
+The Apache Software Foundation (http://www.apache.org/).
+
+
+=========================================================================
+
+Portions of Derby were originally developed by
+International Business Machines Corporation and are
+licensed to the Apache Software Foundation under the
+"Software Grant and Corporate Contribution License Agreement",
+informally known as the "Derby CLA".
+The following copyright notice(s) were affixed to portions of the code
+with which this file is now or was at one time distributed
+and are placed here unaltered.
+
+(C) Copyright 1997,2004 International Business Machines Corporation.  All rights reserved.
+
+(C) Copyright IBM Corp. 2003. 
+
+
+=========================================================================
+
+
+The portion of the functionTests under 'nist' was originally 
+developed by the National Institute of Standards and Technology (NIST), 
+an agency of the United States Department of Commerce, and adapted by
+International Business Machines Corporation in accordance with the NIST
+Software Acknowledgment and Redistribution document at
+http://www.itl.nist.gov/div897/ctg/sql_form.htm
+
+
+
+=========================================================================
+
+
+The JDBC apis for small devices and JDBC3 (under java/stubs/jsr169 and
+java/stubs/jdbc3) were produced by trimming sources supplied by the
+Apache Harmony project. In addition, the Harmony SerialBlob and
+SerialClob implementations are used. The following notice covers the Harmony sources:
+
+Portions of Harmony were originally developed by
+Intel Corporation and are licensed to the Apache Software
+Foundation under the "Software Grant and Corporate Contribution
+License Agreement", informally known as the "Intel Harmony CLA".
+
+
+=========================================================================
+
+
+The Derby build relies on source files supplied by the Apache Felix
+project. The following notice covers the Felix files:
+
+  Apache Felix Main
+  Copyright 2008 The Apache Software Foundation
+
+
+  I. Included Software
+
+  This product includes software developed at
+  The Apache Software Foundation (http://www.apache.org/).
+  Licensed under the Apache License 2.0.
+
+  This product includes software developed at
+  The OSGi Alliance (http://www.osgi.org/).
+  Copyright (c) OSGi Alliance (2000, 2007).
+  Licensed under the Apache License 2.0.
+
+  This product includes software from http://kxml.sourceforge.net.
+  Copyright (c) 2002,2003, Stefan Haustein, Oberhausen, Rhld., Germany.
+  Licensed under BSD License.
+
+  II. Used Software
+
+  This product uses software developed at
+  The OSGi Alliance (http://www.osgi.org/).
+  Copyright (c) OSGi Alliance (2000, 2007).
+  Licensed under the Apache License 2.0.
+
+
+  III. License Summary
+  - Apache License 2.0
+  - BSD License
+
+
+=========================================================================
+
+
+The Derby build relies on jar files supplied by the Apache Xalan
+project. The following notice covers the Xalan jar files:
+
+   =========================================================================
+   ==  NOTICE file corresponding to section 4(d) of the Apache License,   ==
+   ==  Version 2.0, in this case for the Apache Xalan Java distribution.  ==
+   =========================================================================
+
+   Apache Xalan (Xalan XSLT processor)
+   Copyright 1999-2006 The Apache Software Foundation
+
+   Apache Xalan (Xalan serializer)
+   Copyright 1999-2006 The Apache Software Foundation
+
+   This product includes software developed at
+   The Apache Software Foundation (http://www.apache.org/).
+
+   =========================================================================
+   Portions of this software was originally based on the following:
+     - software copyright (c) 1999-2002, Lotus Development Corporation.,
+       http://www.lotus.com.
+     - software copyright (c) 2001-2002, Sun Microsystems.,
+       http://www.sun.com.
+     - software copyright (c) 2003, IBM Corporation., 
+       http://www.ibm.com.
+       
+   =========================================================================
+   The binary distribution package (ie. jars, samples and documentation) of
+   this product includes software developed by the following:
+       
+     - The Apache Software Foundation 
+         - Xerces Java - see LICENSE.txt 
+         - JAXP 1.3 APIs - see LICENSE.txt
+         - Bytecode Engineering Library - see LICENSE.txt
+         - Regular Expression - see LICENSE.txt
+       
+     - Scott Hudson, Frank Flannery, C. Scott Ananian 
+         - CUP Parser Generator runtime (javacup\runtime) - see LICENSE.txt 
+ 
+   ========================================================================= 
+   The source distribution package (ie. all source and tools required to build
+   Xalan Java) of this product includes software developed by the following:
+       
+     - The Apache Software Foundation
+         - Xerces Java - see LICENSE.txt 
+         - JAXP 1.3 APIs - see LICENSE.txt
+         - Bytecode Engineering Library - see LICENSE.txt
+         - Regular Expression - see LICENSE.txt
+         - Ant - see LICENSE.txt
+         - Stylebook doc tool - see LICENSE.txt    
+       
+     - Elliot Joel Berk and C. Scott Ananian 
+         - Lexical Analyzer Generator (JLex) - see LICENSE.txt
+
+   =========================================================================       
+   Apache Xerces Java
+   Copyright 1999-2006 The Apache Software Foundation
+
+   This product includes software developed at
+   The Apache Software Foundation (http://www.apache.org/).
+
+   Portions of Apache Xerces Java in xercesImpl.jar and xml-apis.jar
+   were originally based on the following:
+     - software copyright (c) 1999, IBM Corporation., http://www.ibm.com.
+     - software copyright (c) 1999, Sun Microsystems., http://www.sun.com.
+     - voluntary contributions made by Paul Eng on behalf of the 
+       Apache Software Foundation that were originally developed at iClick, Inc.,
+       software copyright (c) 1999.    
+
+   =========================================================================   
+   Apache xml-commons xml-apis (redistribution of xml-apis.jar)
+
+   Apache XML Commons
+   Copyright 2001-2003,2006 The Apache Software Foundation.
+
+   This product includes software developed at
+   The Apache Software Foundation (http://www.apache.org/).
+
+   Portions of this software were originally based on the following:
+     - software copyright (c) 1999, IBM Corporation., http://www.ibm.com.
+     - software copyright (c) 1999, Sun Microsystems., http://www.sun.com.
+     - software copyright (c) 2000 World Wide Web Consortium, http://www.w3.org
+

