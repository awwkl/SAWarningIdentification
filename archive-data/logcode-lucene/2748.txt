GitDiffStart: 37ec9f43447855478ddc5238dd1c83c027529c81 | Thu Sep 10 01:09:42 2015 +0000
diff --git a/lucene/test-framework/src/java/org/apache/lucene/mockfile/FilterFileChannel.java b/lucene/test-framework/src/java/org/apache/lucene/mockfile/FilterFileChannel.java
index 7a32bcd..bb92d08 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/mockfile/FilterFileChannel.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/mockfile/FilterFileChannel.java
@@ -17,17 +17,13 @@ package org.apache.lucene.mockfile;
  * limitations under the License.
  */
 
-import java.io.IOError;
 import java.io.IOException;
-import java.lang.reflect.Method;
 import java.nio.ByteBuffer;
 import java.nio.MappedByteBuffer;
 import java.nio.channels.FileChannel;
 import java.nio.channels.FileLock;
 import java.nio.channels.ReadableByteChannel;
 import java.nio.channels.WritableByteChannel;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
 import java.util.Objects;
 
 /**  
@@ -138,27 +134,8 @@ public class FilterFileChannel extends FileChannel {
 
   @Override
   protected void implCloseChannel() throws IOException {
-    // our only way to call delegate.implCloseChannel()
-    AccessController.doPrivileged(new PrivilegedAction<Void>() {
-      @Override
-      public Void run() {
-        for (Class<?> clazz = delegate.getClass(); clazz != null; clazz = clazz.getSuperclass()) {
-          final Method method;
-          try {
-            method = clazz.getDeclaredMethod("implCloseChannel");
-          } catch (NoSuchMethodException e) {
-            continue;
-          }
-          try {
-            method.setAccessible(true);
-            method.invoke(delegate);
-            return null;
-          } catch (ReflectiveOperationException e) {
-            throw new IOError(e);
-          }
-        }
-        throw new AssertionError();
-      }
-    });
+    // we can't call implCloseChannel, but calling this instead is "ok":
+    // http://mail.openjdk.java.net/pipermail/nio-dev/2015-September/003322.html
+    delegate.close();
   }
 }

