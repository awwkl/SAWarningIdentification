GitDiffStart: 55e3fd9ddf2ea01ce7cce253443f24b3269c7026 | Mon May 23 12:05:17 2016 +0530
diff --git a/solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java b/solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java
index 26b29fe..36a7825 100644
--- a/solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java
+++ b/solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java
@@ -64,7 +64,14 @@ public class PKIAuthenticationPlugin extends AuthenticationPlugin implements Htt
   private final Map<String, PublicKey> keyCache = new ConcurrentHashMap<>();
   private final CryptoKeys.RSAKeyPair keyPair = new CryptoKeys.RSAKeyPair();
   private final CoreContainer cores;
-  private final int MAX_VALIDITY = Integer.parseInt(System.getProperty("pkiauth.ttl", "5000"));
+  private final int MAX_VALIDITY = getTTL();
+
+  private int getTTL() {
+    String ttl = System.getProperty("pkiauth.ttl");
+    if (ttl != null) log.info("TTL is set to {}ms", ttl);
+    return Integer.parseInt(System.getProperty("pkiauth.ttl", "5000"));
+  }
+
   private final String myNodeName;
   private final HttpHeaderClientInterceptor interceptor = new HttpHeaderClientInterceptor();
   private boolean interceptorRegistered = false;
@@ -122,7 +129,7 @@ public class PKIAuthenticationPlugin extends AuthenticationPlugin implements Htt
       return;
     }
     if ((receivedTime - decipher.timestamp) > MAX_VALIDITY) {
-        log.error("Invalid key ");
+      log.error("Invalid key request timestamp {} : received timestamp {}", decipher.timestamp, receivedTime);
         filterChain.doFilter(request, response);
         return;
     }
diff --git a/solr/core/src/java/org/apache/solr/security/Permission.java b/solr/core/src/java/org/apache/solr/security/Permission.java
index 3ebf283..0084bdc 100644
--- a/solr/core/src/java/org/apache/solr/security/Permission.java
+++ b/solr/core/src/java/org/apache/solr/security/Permission.java
@@ -8,15 +8,12 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Function;
-import java.util.function.Predicate;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 import com.google.common.collect.ImmutableSet;
-import org.apache.solr.client.solrj.request.CollectionAdminRequest;
 import org.apache.solr.common.SolrException;
-import org.apache.solr.common.params.CommonParams;
-import org.apache.solr.common.util.Pair;
+import org.apache.solr.common.util.Utils;
 
 import static java.util.Collections.singleton;
 import static java.util.Collections.singletonList;
@@ -45,12 +42,14 @@ class Permission {
   Set<String> path, role, collections, method;
   Map<String, Function<String[], Boolean>> params;
   PermissionNameProvider.Name wellknownName;
+  Map originalConfig;
 
   private Permission() {
   }
 
   static Permission load(Map m) {
     Permission p = new Permission();
+    p.originalConfig = new LinkedHashMap<>(m);
     String name = (String) m.get(NAME);
     if (!m.containsKey("role")) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "role not specified");
     p.role = readValueAsSet(m, "role");
@@ -150,6 +149,10 @@ class Permission {
     return result.isEmpty() ? null : Collections.unmodifiableSet(result);
   }
 
+  @Override
+  public String toString() {
+   return Utils.toJSONString(originalConfig);
+  }
 
   static final Set<String> knownKeys = ImmutableSet.of("collection", "role", "params", "path", "method", NAME,"index");
   public static final Set<String> HTTP_METHODS = ImmutableSet.of("GET", "POST", "DELETE", "PUT", "HEAD");
diff --git a/solr/solrj/src/java/org/apache/solr/common/util/Utils.java b/solr/solrj/src/java/org/apache/solr/common/util/Utils.java
index ecc63ac..a8de0ac 100644
--- a/solr/solrj/src/java/org/apache/solr/common/util/Utils.java
+++ b/solr/solrj/src/java/org/apache/solr/common/util/Utils.java
@@ -81,6 +81,7 @@ public class Utils {
   }
 
   public static byte[] toJSON(Object o) {
+    if(o == null) return new byte[0];
     CharArr out = new CharArr();
     new JSONWriter(out, 2).write(o); // indentation by default
     return toUTF8(out);

