GitDiffStart: 435162104d5ff8ad6e3d3c5ea75e31410ef7f084 | Wed Jan 13 00:50:57 2016 +0000
diff --git a/solr/CHANGES.txt b/solr/CHANGES.txt
index 49544ca..d8041a1 100644
--- a/solr/CHANGES.txt
+++ b/solr/CHANGES.txt
@@ -310,6 +310,10 @@ New Features
            </BooleanQuery>
   (Erik Hatcher, Karl Wettin, Daniel Collins, Nathan Visagan, Ahmet Arslan, Christine Poerschke)
 
+* SOLR-8312: Add domain size and numBuckets to facet telemetry info (facet debug info
+  for the new Facet Module).  (Michael Sun, yonik)
+
+
 Bug Fixes
 ----------------------
 
diff --git a/solr/core/src/java/org/apache/solr/search/facet/FacetField.java b/solr/core/src/java/org/apache/solr/search/facet/FacetField.java
index 4378a02..f59caea 100644
--- a/solr/core/src/java/org/apache/solr/search/facet/FacetField.java
+++ b/solr/core/src/java/org/apache/solr/search/facet/FacetField.java
@@ -643,6 +643,9 @@ abstract class FacetFieldProcessorFCBase extends FacetFieldProcessor {
       }
     }
 
+    FacetDebugInfo fdebug = fcontext.getDebugInfo();
+    if (fdebug != null) fdebug.putInfoItem("numBuckets", new Long(numBuckets));
+    
     // if we are deep paging, we don't have to order the highest "offset" counts.
     int collectCount = Math.max(0, queue.size() - off);
     assert collectCount <= lim;
diff --git a/solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric.java b/solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric.java
index 3deed97..18f71b6 100644
--- a/solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric.java
+++ b/solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric.java
@@ -393,6 +393,9 @@ class FacetFieldProcessorNumeric extends FacetFieldProcessor {
       }
     }
 
+    FacetDebugInfo fdebug = fcontext.getDebugInfo();
+    if (fdebug != null) fdebug.putInfoItem("numBuckets", new Long(numBuckets));
+
     if (freq.allBuckets) {
       SimpleOrderedMap<Object> allBuckets = new SimpleOrderedMap<>();
       // countAcc.setValues(allBuckets, allBucketsSlot);
diff --git a/solr/core/src/java/org/apache/solr/search/facet/FacetModule.java b/solr/core/src/java/org/apache/solr/search/facet/FacetModule.java
index 8d965e7..793e867 100644
--- a/solr/core/src/java/org/apache/solr/search/facet/FacetModule.java
+++ b/solr/core/src/java/org/apache/solr/search/facet/FacetModule.java
@@ -92,6 +92,7 @@ public class FacetModule extends SearchComponent {
       fproc.process();
       long timeElapsed = (long) timer.getTime();
       fdebug.setElapse(timeElapsed);
+      fdebug.putInfoItem("domainSize", (long)fcontext.base.size());
       rb.req.getContext().put("FacetDebugInfo", fdebug);
     } else {
       fproc.process();
diff --git a/solr/core/src/java/org/apache/solr/search/facet/FacetProcessor.java b/solr/core/src/java/org/apache/solr/search/facet/FacetProcessor.java
index f4f03fd..4b7ed2c 100644
--- a/solr/core/src/java/org/apache/solr/search/facet/FacetProcessor.java
+++ b/solr/core/src/java/org/apache/solr/search/facet/FacetProcessor.java
@@ -233,6 +233,7 @@ public class FacetProcessor<FacetRequestT extends FacetRequest>  {
         subProcessor.process();
         long timeElapsed = (long) timer.getTime();
         fdebug.setElapse(timeElapsed);
+        fdebug.putInfoItem("domainSize", (long)subContext.base.size());
       } else {
         subProcessor.process();
       }

